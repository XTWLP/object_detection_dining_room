/* Generated code for Python module 'botocore.exceptions'
 * created by Nuitka version 0.9.6
 *
 * This code is in part copyright 2022 Kay Hayen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "nuitka/prelude.h"

#include "nuitka/unfreezing.h"

#include "__helpers.h"

/* The "module_botocore$exceptions" is a Python object pointer of module type.
 *
 * Note: For full compatibility with CPython, every module variable access
 * needs to go through it except for cases where the module cannot possibly
 * have changed in the mean time.
 */

PyObject *module_botocore$exceptions;
PyDictObject *moduledict_botocore$exceptions;

/* The declarations of module constants used, if any. */
static PyObject *mod_consts[270];
#ifndef __NUITKA_NO_ASSERT__
static Py_hash_t mod_consts_hash[270];
#endif

static PyObject *module_filename_obj = NULL;

/* Indicator if this modules private constants were created yet. */
static bool constants_created = false;

/* Function to create module private constants. */
static void createModuleConstants(void) {
    if (constants_created == false) {
        loadConstantsBlob(&mod_consts[0], UNTRANSLATE("botocore.exceptions"));
        constants_created = true;

#ifndef __NUITKA_NO_ASSERT__
        for (int i = 0; i < 270; i++) {
            mod_consts_hash[i] = DEEP_HASH(mod_consts[i]);
        }
#endif
    }
}

// We want to be able to initialize the "__main__" constants in any case.
#if 0
void createMainModuleConstants(void) {
    createModuleConstants();
}
#endif

/* Function to verify module private constants for non-corruption. */
#ifndef __NUITKA_NO_ASSERT__
void checkModuleConstants_botocore$exceptions(void) {
    // The module may not have been used at all, then ignore this.
    if (constants_created == false) return;

    for (int i = 0; i < 270; i++) {
        assert(mod_consts_hash[i] == DEEP_HASH(mod_consts[i]));
        CHECK_OBJECT_DEEP(mod_consts[i]);
    }
}
#endif

// The module code objects.
static PyCodeObject *codeobj_a719a31d518bc79422e5dc1f94c073b4;
static PyCodeObject *codeobj_a0ceb15d9408c7b45e848eee22bbec01;
static PyCodeObject *codeobj_e79d616026fdbe9706fc86f8a0531faf;
static PyCodeObject *codeobj_565641311b984b0e245ea11a93daaedf;
static PyCodeObject *codeobj_a45cd77b91b1f4fe65f618261f99e9d7;
static PyCodeObject *codeobj_86bd8a784d25ff9b97e0a5eef286a755;
static PyCodeObject *codeobj_0dbac56e1690ceff521c6ecc75691544;
static PyCodeObject *codeobj_651722d482c771cab792be0250808f51;
static PyCodeObject *codeobj_4ffb0b721c8e7f787404628028064e6a;
static PyCodeObject *codeobj_3814404a074f76c9e6bc45833e5f774f;
static PyCodeObject *codeobj_4e4a7642fc8c4fc4ee507673200fe6ab;
static PyCodeObject *codeobj_0d7cc9b130677721cecfda0a425c2897;
static PyCodeObject *codeobj_cae30ac246abe2402fb8725f07a2b8a2;
static PyCodeObject *codeobj_274c2935eb7ac086612f1216debaa02b;
static PyCodeObject *codeobj_7cdff9186afb17bbc5764d8b30246182;
static PyCodeObject *codeobj_e0c1eb30f6a58291cffa6e7866165b5b;
static PyCodeObject *codeobj_8ec45afd7350545a21bd2381898ac1cc;
static PyCodeObject *codeobj_ef5deee12db344ed6cf0495b2d8b25c1;
static PyCodeObject *codeobj_589847e97a18897f85121dae593ee49e;
static PyCodeObject *codeobj_bdf37c8d25be648e28e98e50775f3cc7;
static PyCodeObject *codeobj_528123f3b88a399219363b7e3e1b52bc;
static PyCodeObject *codeobj_58c793da95e1d980e6a91041dc9a8e79;
static PyCodeObject *codeobj_5975bf4559f6a1446c99f93868536ae2;
static PyCodeObject *codeobj_b0391e2f7c2f48999b6d5c484b23452b;
static PyCodeObject *codeobj_8d3d0dac09d6748bba182d1e4df1063d;
static PyCodeObject *codeobj_0fa66f49e61e33f2f35e96530ce0df24;
static PyCodeObject *codeobj_f272aacdb39eb2a25df282abe1bb41a8;
static PyCodeObject *codeobj_df9b2633f611616815dfaac59767af68;
static PyCodeObject *codeobj_93800b78e5b211ff5d16bceff2024e78;
static PyCodeObject *codeobj_3d165ac0cfadd83deb25ea8760705966;
static PyCodeObject *codeobj_c9b3d3c3deaa812b48c2ad3a73ae4856;
static PyCodeObject *codeobj_32971ab0fac478f7e727349fd857c775;
static PyCodeObject *codeobj_67e81db6c1222d1b0c3b676e07006b94;
static PyCodeObject *codeobj_2e460197ddfd2b6c424f096b90dfad47;
static PyCodeObject *codeobj_0125e6c19d9a9f06c4f9f829f62b8615;
static PyCodeObject *codeobj_43432ddae86353eb6ef768afd56166ca;
static PyCodeObject *codeobj_0c4727d4a3997960a50092d98b12e5c1;
static PyCodeObject *codeobj_a6e77d896ff602bfdecf11f0c85c65bb;
static PyCodeObject *codeobj_a72d0e59ff98038a11af02fdf245dbaa;
static PyCodeObject *codeobj_67a21261be7184590cf89a63f235b4aa;
static PyCodeObject *codeobj_c5d60c00d3cd6062b910619e1719f76a;
static PyCodeObject *codeobj_abe31f64c1d501b6a197fba4182155ff;
static PyCodeObject *codeobj_936558efffed40b305e47c65f896b9a6;
static PyCodeObject *codeobj_2f59c047cc38f8b4f1d9dcb8d282b2fe;
static PyCodeObject *codeobj_a600bb73e1b1999b637676aafd5a3034;
static PyCodeObject *codeobj_7764ed8434bf45842d38a7d7762eaea2;
static PyCodeObject *codeobj_79bf676b2417e28b36114a1b6e22056c;
static PyCodeObject *codeobj_026b7cc019bbc471dff47ad64f6c4beb;
static PyCodeObject *codeobj_fa16ea551b7dda4ad6b1c9626ca18308;
static PyCodeObject *codeobj_c2e1c09b78aa5299b3781c48626a546b;
static PyCodeObject *codeobj_ee4ca0ea30836de54d303548a4d69083;
static PyCodeObject *codeobj_db1ed124efaccc318ea7e05a853c8733;
static PyCodeObject *codeobj_e6660177ae6c191de8af8d07a1593cfb;
static PyCodeObject *codeobj_cc3dfd1c0604e11e3e45bc93ea9997cf;
static PyCodeObject *codeobj_5afbdbc4a235063970771fea8e50e684;
static PyCodeObject *codeobj_2331c9ecdced23e8130a4fb9a500fd55;
static PyCodeObject *codeobj_bf1a94ba48b83b32a393f271129dd85f;
static PyCodeObject *codeobj_aec7b451d1892859451e9b947870ee57;
static PyCodeObject *codeobj_0b9bc0f27a79d49074a1e90322b56e33;
static PyCodeObject *codeobj_7074a378db1bc1ab719a596cfea04cd7;
static PyCodeObject *codeobj_506aa82595a22b980b6416683315e6eb;
static PyCodeObject *codeobj_ff7f1c57167b122361e2ae00ec68ed30;
static PyCodeObject *codeobj_928984019de852157f2f6ed7d404e8b0;
static PyCodeObject *codeobj_b449e2438bb5d5e1407d0a0c4cb65d49;
static PyCodeObject *codeobj_3c40020e5af5cd24df47c8c13d685018;
static PyCodeObject *codeobj_2516b4116953e20c4679d08aba3fb9eb;
static PyCodeObject *codeobj_25cd7700e62e83506a4a2c3a68a02743;
static PyCodeObject *codeobj_c1b075a3448a97e50e64d8c99c49e125;
static PyCodeObject *codeobj_bae2d5ca9bd4d3c2347f71ec402708ba;
static PyCodeObject *codeobj_16dddd152cbad7ef4876d9078fe5ce82;
static PyCodeObject *codeobj_40a276ce738d53235a378f54b7fea973;
static PyCodeObject *codeobj_2317f3473d9f05a719acd520900b593e;
static PyCodeObject *codeobj_b78620c3d7e04f58bcabb5ab7b546801;
static PyCodeObject *codeobj_733ebbf5df077dd863ab5c251ef60149;
static PyCodeObject *codeobj_67e0e6eb84baf16d7354cf432037117c;
static PyCodeObject *codeobj_ef956613382d4045fee0bc4f3e25bfad;
static PyCodeObject *codeobj_886e2b29ca1eababc6a134c604774df4;
static PyCodeObject *codeobj_ec53316a34e9f38afe5238b8c0274d67;
static PyCodeObject *codeobj_92a1f33653a769dd8fefecde1499ef67;
static PyCodeObject *codeobj_b15b4ef00202c305b77010fd918a1da5;
static PyCodeObject *codeobj_957c8599cc37e6f7aba4f338c433b79f;
static PyCodeObject *codeobj_6c35fc215e56f7343c781c0c77361954;

static void createModuleCodeObjects(void) {
    module_filename_obj = MAKE_RELATIVE_PATH(mod_consts[260]); CHECK_OBJECT(module_filename_obj);
    codeobj_a719a31d518bc79422e5dc1f94c073b4 = MAKE_CODEOBJECT(module_filename_obj, 1, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[261], NULL, NULL, 0, 0, 0);
    codeobj_a0ceb15d9408c7b45e848eee22bbec01 = MAKE_CODEOBJECT(module_filename_obj, 316, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[143], mod_consts[262], NULL, 0, 0, 0);
    codeobj_e79d616026fdbe9706fc86f8a0531faf = MAKE_CODEOBJECT(module_filename_obj, 68, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[65], mod_consts[262], NULL, 0, 0, 0);
    codeobj_565641311b984b0e245ea11a93daaedf = MAKE_CODEOBJECT(module_filename_obj, 31, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[45], mod_consts[262], NULL, 0, 0, 0);
    codeobj_a45cd77b91b1f4fe65f618261f99e9d7 = MAKE_CODEOBJECT(module_filename_obj, 641, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[256], mod_consts[262], NULL, 0, 0, 0);
    codeobj_86bd8a784d25ff9b97e0a5eef286a755 = MAKE_CODEOBJECT(module_filename_obj, 347, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[153], mod_consts[262], NULL, 0, 0, 0);
    codeobj_0dbac56e1690ceff521c6ecc75691544 = MAKE_CODEOBJECT(module_filename_obj, 404, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[19], mod_consts[262], NULL, 0, 0, 0);
    codeobj_651722d482c771cab792be0250808f51 = MAKE_CODEOBJECT(module_filename_obj, 220, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[120], mod_consts[262], NULL, 0, 0, 0);
    codeobj_4ffb0b721c8e7f787404628028064e6a = MAKE_CODEOBJECT(module_filename_obj, 211, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[117], mod_consts[262], NULL, 0, 0, 0);
    codeobj_3814404a074f76c9e6bc45833e5f774f = MAKE_CODEOBJECT(module_filename_obj, 118, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[86], mod_consts[262], NULL, 0, 0, 0);
    codeobj_4e4a7642fc8c4fc4ee507673200fe6ab = MAKE_CODEOBJECT(module_filename_obj, 107, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[80], mod_consts[262], NULL, 0, 0, 0);
    codeobj_0d7cc9b130677721cecfda0a425c2897 = MAKE_CODEOBJECT(module_filename_obj, 91, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[71], mod_consts[262], NULL, 0, 0, 0);
    codeobj_cae30ac246abe2402fb8725f07a2b8a2 = MAKE_CODEOBJECT(module_filename_obj, 143, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[97], mod_consts[262], NULL, 0, 0, 0);
    codeobj_274c2935eb7ac086612f1216debaa02b = MAKE_CODEOBJECT(module_filename_obj, 48, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[59], mod_consts[262], NULL, 0, 0, 0);
    codeobj_7cdff9186afb17bbc5764d8b30246182 = MAKE_CODEOBJECT(module_filename_obj, 99, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[75], mod_consts[262], NULL, 0, 0, 0);
    codeobj_e0c1eb30f6a58291cffa6e7866165b5b = MAKE_CODEOBJECT(module_filename_obj, 79, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[8], mod_consts[262], NULL, 0, 0, 0);
    codeobj_8ec45afd7350545a21bd2381898ac1cc = MAKE_CODEOBJECT(module_filename_obj, 373, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[162], mod_consts[262], NULL, 0, 0, 0);
    codeobj_ef5deee12db344ed6cf0495b2d8b25c1 = MAKE_CODEOBJECT(module_filename_obj, 589, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[238], mod_consts[262], NULL, 0, 0, 0);
    codeobj_589847e97a18897f85121dae593ee49e = MAKE_CODEOBJECT(module_filename_obj, 585, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[236], mod_consts[262], NULL, 0, 0, 0);
    codeobj_bdf37c8d25be648e28e98e50775f3cc7 = MAKE_CODEOBJECT(module_filename_obj, 452, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[189], mod_consts[262], NULL, 0, 0, 0);
    codeobj_528123f3b88a399219363b7e3e1b52bc = MAKE_CODEOBJECT(module_filename_obj, 517, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[212], mod_consts[262], NULL, 0, 0, 0);
    codeobj_58c793da95e1d980e6a91041dc9a8e79 = MAKE_CODEOBJECT(module_filename_obj, 379, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[165], mod_consts[262], NULL, 0, 0, 0);
    codeobj_5975bf4559f6a1446c99f93868536ae2 = MAKE_CODEOBJECT(module_filename_obj, 486, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[201], mod_consts[262], NULL, 0, 0, 0);
    codeobj_b0391e2f7c2f48999b6d5c484b23452b = MAKE_CODEOBJECT(module_filename_obj, 95, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[73], mod_consts[262], NULL, 0, 0, 0);
    codeobj_8d3d0dac09d6748bba182d1e4df1063d = MAKE_CODEOBJECT(module_filename_obj, 540, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[221], mod_consts[262], NULL, 0, 0, 0);
    codeobj_0fa66f49e61e33f2f35e96530ce0df24 = MAKE_CODEOBJECT(module_filename_obj, 647, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[258], mod_consts[262], NULL, 0, 0, 0);
    codeobj_f272aacdb39eb2a25df282abe1bb41a8 = MAKE_CODEOBJECT(module_filename_obj, 305, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[140], mod_consts[262], NULL, 0, 0, 0);
    codeobj_df9b2633f611616815dfaac59767af68 = MAKE_CODEOBJECT(module_filename_obj, 532, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[218], mod_consts[262], NULL, 0, 0, 0);
    codeobj_93800b78e5b211ff5d16bceff2024e78 = MAKE_CODEOBJECT(module_filename_obj, 548, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[223], mod_consts[262], NULL, 0, 0, 0);
    codeobj_3d165ac0cfadd83deb25ea8760705966 = MAKE_CODEOBJECT(module_filename_obj, 463, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[192], mod_consts[262], NULL, 0, 0, 0);
    codeobj_c9b3d3c3deaa812b48c2ad3a73ae4856 = MAKE_CODEOBJECT(module_filename_obj, 556, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[226], mod_consts[262], NULL, 0, 0, 0);
    codeobj_32971ab0fac478f7e727349fd857c775 = MAKE_CODEOBJECT(module_filename_obj, 565, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[229], mod_consts[262], NULL, 0, 0, 0);
    codeobj_67e81db6c1222d1b0c3b676e07006b94 = MAKE_CODEOBJECT(module_filename_obj, 601, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[242], mod_consts[262], NULL, 0, 0, 0);
    codeobj_2e460197ddfd2b6c424f096b90dfad47 = MAKE_CODEOBJECT(module_filename_obj, 605, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[244], mod_consts[262], NULL, 0, 0, 0);
    codeobj_0125e6c19d9a9f06c4f9f829f62b8615 = MAKE_CODEOBJECT(module_filename_obj, 229, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[123], mod_consts[262], NULL, 0, 0, 0);
    codeobj_43432ddae86353eb6ef768afd56166ca = MAKE_CODEOBJECT(module_filename_obj, 613, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[247], mod_consts[262], NULL, 0, 0, 0);
    codeobj_0c4727d4a3997960a50092d98b12e5c1 = MAKE_CODEOBJECT(module_filename_obj, 126, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[91], mod_consts[262], NULL, 0, 0, 0);
    codeobj_a6e77d896ff602bfdecf11f0c85c65bb = MAKE_CODEOBJECT(module_filename_obj, 184, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[108], mod_consts[262], NULL, 0, 0, 0);
    codeobj_a72d0e59ff98038a11af02fdf245dbaa = MAKE_CODEOBJECT(module_filename_obj, 343, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[151], mod_consts[262], NULL, 0, 0, 0);
    codeobj_67a21261be7184590cf89a63f235b4aa = MAKE_CODEOBJECT(module_filename_obj, 339, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[149], mod_consts[262], NULL, 0, 0, 0);
    codeobj_c5d60c00d3cd6062b910619e1719f76a = MAKE_CODEOBJECT(module_filename_obj, 259, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[129], mod_consts[262], NULL, 0, 0, 0);
    codeobj_abe31f64c1d501b6a197fba4182155ff = MAKE_CODEOBJECT(module_filename_obj, 133, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[94], mod_consts[262], NULL, 0, 0, 0);
    codeobj_936558efffed40b305e47c65f896b9a6 = MAKE_CODEOBJECT(module_filename_obj, 201, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[114], mod_consts[262], NULL, 0, 0, 0);
    codeobj_2f59c047cc38f8b4f1d9dcb8d282b2fe = MAKE_CODEOBJECT(module_filename_obj, 122, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[89], mod_consts[262], NULL, 0, 0, 0);
    codeobj_a600bb73e1b1999b637676aafd5a3034 = MAKE_CODEOBJECT(module_filename_obj, 278, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[134], mod_consts[262], NULL, 0, 0, 0);
    codeobj_7764ed8434bf45842d38a7d7762eaea2 = MAKE_CODEOBJECT(module_filename_obj, 114, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[83], mod_consts[262], NULL, 0, 0, 0);
    codeobj_79bf676b2417e28b36114a1b6e22056c = MAKE_CODEOBJECT(module_filename_obj, 597, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[240], mod_consts[262], NULL, 0, 0, 0);
    codeobj_026b7cc019bbc471dff47ad64f6c4beb = MAKE_CODEOBJECT(module_filename_obj, 103, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[78], mod_consts[262], NULL, 0, 0, 0);
    codeobj_fa16ea551b7dda4ad6b1c9626ca18308 = MAKE_CODEOBJECT(module_filename_obj, 625, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[250], mod_consts[262], NULL, 0, 0, 0);
    codeobj_c2e1c09b78aa5299b3781c48626a546b = MAKE_CODEOBJECT(module_filename_obj, 629, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[252], mod_consts[262], NULL, 0, 0, 0);
    codeobj_ee4ca0ea30836de54d303548a4d69083 = MAKE_CODEOBJECT(module_filename_obj, 164, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[103], mod_consts[262], NULL, 0, 0, 0);
    codeobj_db1ed124efaccc318ea7e05a853c8733 = MAKE_CODEOBJECT(module_filename_obj, 573, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[232], mod_consts[262], NULL, 0, 0, 0);
    codeobj_e6660177ae6c191de8af8d07a1593cfb = MAKE_CODEOBJECT(module_filename_obj, 633, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[254], mod_consts[262], NULL, 0, 0, 0);
    codeobj_cc3dfd1c0604e11e3e45bc93ea9997cf = MAKE_CODEOBJECT(module_filename_obj, 394, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[174], mod_consts[262], NULL, 0, 0, 0);
    codeobj_5afbdbc4a235063970771fea8e50e684 = MAKE_CODEOBJECT(module_filename_obj, 384, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[168], mod_consts[262], NULL, 0, 0, 0);
    codeobj_2331c9ecdced23e8130a4fb9a500fd55 = MAKE_CODEOBJECT(module_filename_obj, 189, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[111], mod_consts[262], NULL, 0, 0, 0);
    codeobj_bf1a94ba48b83b32a393f271129dd85f = MAKE_CODEOBJECT(module_filename_obj, 266, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[131], mod_consts[262], NULL, 0, 0, 0);
    codeobj_aec7b451d1892859451e9b947870ee57 = MAKE_CODEOBJECT(module_filename_obj, 291, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[137], mod_consts[262], NULL, 0, 0, 0);
    codeobj_0b9bc0f27a79d49074a1e90322b56e33 = MAKE_CODEOBJECT(module_filename_obj, 57, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[62], mod_consts[262], NULL, 0, 0, 0);
    codeobj_7074a378db1bc1ab719a596cfea04cd7 = MAKE_CODEOBJECT(module_filename_obj, 330, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[146], mod_consts[262], NULL, 0, 0, 0);
    codeobj_506aa82595a22b980b6416683315e6eb = MAKE_CODEOBJECT(module_filename_obj, 155, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[100], mod_consts[262], NULL, 0, 0, 0);
    codeobj_ff7f1c57167b122361e2ae00ec68ed30 = MAKE_CODEOBJECT(module_filename_obj, 356, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[156], mod_consts[262], NULL, 0, 0, 0);
    codeobj_928984019de852157f2f6ed7d404e8b0 = MAKE_CODEOBJECT(module_filename_obj, 494, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[204], mod_consts[262], NULL, 0, 0, 0);
    codeobj_b449e2438bb5d5e1407d0a0c4cb65d49 = MAKE_CODEOBJECT(module_filename_obj, 510, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[210], mod_consts[262], NULL, 0, 0, 0);
    codeobj_3c40020e5af5cd24df47c8c13d685018 = MAKE_CODEOBJECT(module_filename_obj, 471, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[195], mod_consts[262], NULL, 0, 0, 0);
    codeobj_2516b4116953e20c4679d08aba3fb9eb = MAKE_CODEOBJECT(module_filename_obj, 503, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[207], mod_consts[262], NULL, 0, 0, 0);
    codeobj_25cd7700e62e83506a4a2c3a68a02743 = MAKE_CODEOBJECT(module_filename_obj, 479, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[198], mod_consts[262], NULL, 0, 0, 0);
    codeobj_c1b075a3448a97e50e64d8c99c49e125 = MAKE_CODEOBJECT(module_filename_obj, 525, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[215], mod_consts[262], NULL, 0, 0, 0);
    codeobj_bae2d5ca9bd4d3c2347f71ec402708ba = MAKE_CODEOBJECT(module_filename_obj, 399, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[177], mod_consts[262], NULL, 0, 0, 0);
    codeobj_16dddd152cbad7ef4876d9078fe5ce82 = MAKE_CODEOBJECT(module_filename_obj, 244, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[126], mod_consts[262], NULL, 0, 0, 0);
    codeobj_40a276ce738d53235a378f54b7fea973 = MAKE_CODEOBJECT(module_filename_obj, 389, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[171], mod_consts[262], NULL, 0, 0, 0);
    codeobj_2317f3473d9f05a719acd520900b593e = MAKE_CODEOBJECT(module_filename_obj, 364, CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[9], mod_consts[262], NULL, 0, 0, 0);
    codeobj_b78620c3d7e04f58bcabb5ab7b546801 = MAKE_CODEOBJECT(module_filename_obj, 409, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[3], mod_consts[263], NULL, 3, 0, 0);
    codeobj_733ebbf5df077dd863ab5c251ef60149 = MAKE_CODEOBJECT(module_filename_obj, 39, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[3], mod_consts[264], NULL, 1, 0, 0);
    codeobj_67e0e6eb84baf16d7354cf432037117c = MAKE_CODEOBJECT(module_filename_obj, 619, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[3], mod_consts[264], NULL, 1, 0, 0);
    codeobj_ef956613382d4045fee0bc4f3e25bfad = MAKE_CODEOBJECT(module_filename_obj, 368, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[3], mod_consts[265], NULL, 4, 0, 0);
    codeobj_886e2b29ca1eababc6a134c604774df4 = MAKE_CODEOBJECT(module_filename_obj, 81, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[3], mod_consts[266], NULL, 3, 0, 0);
    codeobj_ec53316a34e9f38afe5238b8c0274d67 = MAKE_CODEOBJECT(module_filename_obj, 44, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[56], mod_consts[267], NULL, 1, 0, 0);
    codeobj_92a1f33653a769dd8fefecde1499ef67 = MAKE_CODEOBJECT(module_filename_obj, 86, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[56], mod_consts[267], NULL, 1, 0, 0);
    codeobj_b15b4ef00202c305b77010fd918a1da5 = MAKE_CODEOBJECT(module_filename_obj, 432, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[56], mod_consts[267], NULL, 1, 0, 0);
    codeobj_957c8599cc37e6f7aba4f338c433b79f = MAKE_CODEOBJECT(module_filename_obj, 19, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[5], mod_consts[268], NULL, 3, 0, 0);
    codeobj_6c35fc215e56f7343c781c0c77361954 = MAKE_CODEOBJECT(module_filename_obj, 422, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE | CO_FUTURE_UNICODE_LITERALS, mod_consts[12], mod_consts[269], NULL, 2, 0, 0);
}

// The module function declarations.
NUITKA_CROSS_MODULE PyObject *impl___main__$$$function__1__mro_entries_conversion(PyObject **python_pars);


NUITKA_CROSS_MODULE PyObject *impl___main__$$$function__5_complex_call_helper_star_list_star_dict(PyObject **python_pars);


NUITKA_CROSS_MODULE PyObject *impl___main__$$$function__9_complex_call_helper_star_dict(PyObject **python_pars);


static PyObject *MAKE_FUNCTION_botocore$exceptions$$$function__10___init__();


static PyObject *MAKE_FUNCTION_botocore$exceptions$$$function__1__exception_from_packed_args(PyObject *defaults);


static PyObject *MAKE_FUNCTION_botocore$exceptions$$$function__2___init__();


static PyObject *MAKE_FUNCTION_botocore$exceptions$$$function__3___reduce__();


static PyObject *MAKE_FUNCTION_botocore$exceptions$$$function__4___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_botocore$exceptions$$$function__5___reduce__();


static PyObject *MAKE_FUNCTION_botocore$exceptions$$$function__6___init__();


static PyObject *MAKE_FUNCTION_botocore$exceptions$$$function__7___init__();


static PyObject *MAKE_FUNCTION_botocore$exceptions$$$function__8__get_retry_info();


static PyObject *MAKE_FUNCTION_botocore$exceptions$$$function__9___reduce__();


// The module function definitions.
static PyObject *impl_botocore$exceptions$$$function__1__exception_from_packed_args(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_exception_cls = python_pars[0];
    PyObject *par_args = python_pars[1];
    PyObject *par_kwargs = python_pars[2];
    struct Nuitka_FrameObject *frame_957c8599cc37e6f7aba4f338c433b79f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_957c8599cc37e6f7aba4f338c433b79f = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_args);
        tmp_cmp_expr_left_1 = par_args;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = mod_consts[0];
        {
            PyObject *old = par_args;
            assert(old != NULL);
            par_args = tmp_assign_source_1;
            Py_INCREF(par_args);
            Py_DECREF(old);
        }

    }
    branch_no_1:;
    {
        bool tmp_condition_result_2;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        CHECK_OBJECT(par_kwargs);
        tmp_cmp_expr_left_2 = par_kwargs;
        tmp_cmp_expr_right_2 = Py_None;
        tmp_condition_result_2 = (tmp_cmp_expr_left_2 == tmp_cmp_expr_right_2) ? true : false;
        if (tmp_condition_result_2 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = PyDict_New();
        {
            PyObject *old = par_kwargs;
            assert(old != NULL);
            par_kwargs = tmp_assign_source_2;
            Py_DECREF(old);
        }

    }
    branch_no_2:;
    // Tried code:
    if (isFrameUnusable(cache_frame_957c8599cc37e6f7aba4f338c433b79f)) {
        Py_XDECREF(cache_frame_957c8599cc37e6f7aba4f338c433b79f);

#if _DEBUG_REFCOUNTS
        if (cache_frame_957c8599cc37e6f7aba4f338c433b79f == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_957c8599cc37e6f7aba4f338c433b79f = MAKE_FUNCTION_FRAME(codeobj_957c8599cc37e6f7aba4f338c433b79f, module_botocore$exceptions, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_957c8599cc37e6f7aba4f338c433b79f->m_type_description == NULL);
    frame_957c8599cc37e6f7aba4f338c433b79f = cache_frame_957c8599cc37e6f7aba4f338c433b79f;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_957c8599cc37e6f7aba4f338c433b79f);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_957c8599cc37e6f7aba4f338c433b79f) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_dircall_arg3_1;
        CHECK_OBJECT(par_exception_cls);
        tmp_dircall_arg1_1 = par_exception_cls;
        CHECK_OBJECT(par_args);
        tmp_dircall_arg2_1 = par_args;
        CHECK_OBJECT(par_kwargs);
        tmp_dircall_arg3_1 = par_kwargs;
        Py_INCREF(tmp_dircall_arg1_1);
        Py_INCREF(tmp_dircall_arg2_1);
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_return_value = impl___main__$$$function__5_complex_call_helper_star_list_star_dict(dir_call_args);
        }
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 28;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_957c8599cc37e6f7aba4f338c433b79f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_957c8599cc37e6f7aba4f338c433b79f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_957c8599cc37e6f7aba4f338c433b79f);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_957c8599cc37e6f7aba4f338c433b79f, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_957c8599cc37e6f7aba4f338c433b79f->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_957c8599cc37e6f7aba4f338c433b79f, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_957c8599cc37e6f7aba4f338c433b79f,
        type_description_1,
        par_exception_cls,
        par_args,
        par_kwargs
    );


    // Release cached frame if used for exception.
    if (frame_957c8599cc37e6f7aba4f338c433b79f == cache_frame_957c8599cc37e6f7aba4f338c433b79f) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_957c8599cc37e6f7aba4f338c433b79f);
        cache_frame_957c8599cc37e6f7aba4f338c433b79f = NULL;
    }

    assertFrameObject(frame_957c8599cc37e6f7aba4f338c433b79f);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);
    par_args = NULL;
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);
    par_kwargs = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);
    par_args = NULL;
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);
    par_kwargs = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_exception_cls);
    Py_DECREF(par_exception_cls);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_exception_cls);
    Py_DECREF(par_exception_cls);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_botocore$exceptions$$$function__2___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_kwargs = python_pars[1];
    PyObject *var_msg = NULL;
    struct Nuitka_FrameObject *frame_733ebbf5df077dd863ab5c251ef60149;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_733ebbf5df077dd863ab5c251ef60149 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_733ebbf5df077dd863ab5c251ef60149)) {
        Py_XDECREF(cache_frame_733ebbf5df077dd863ab5c251ef60149);

#if _DEBUG_REFCOUNTS
        if (cache_frame_733ebbf5df077dd863ab5c251ef60149 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_733ebbf5df077dd863ab5c251ef60149 = MAKE_FUNCTION_FRAME(codeobj_733ebbf5df077dd863ab5c251ef60149, module_botocore$exceptions, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_733ebbf5df077dd863ab5c251ef60149->m_type_description == NULL);
    frame_733ebbf5df077dd863ab5c251ef60149 = cache_frame_733ebbf5df077dd863ab5c251ef60149;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_733ebbf5df077dd863ab5c251ef60149);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_733ebbf5df077dd863ab5c251ef60149) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_dircall_arg2_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_expression_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[1]);
        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 40;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[2]);
        Py_DECREF(tmp_expression_value_1);
        if (tmp_dircall_arg1_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 40;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_kwargs);
        tmp_dircall_arg2_1 = par_kwargs;
        Py_INCREF(tmp_dircall_arg2_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1};
            tmp_assign_source_1 = impl___main__$$$function__9_complex_call_helper_star_dict(dir_call_args);
        }
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 40;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert(var_msg == NULL);
        var_msg = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        tmp_called_instance_1 = PyExc_Exception;
        CHECK_OBJECT(par_self);
        tmp_args_element_value_1 = par_self;
        CHECK_OBJECT(var_msg);
        tmp_args_element_value_2 = var_msg;
        frame_733ebbf5df077dd863ab5c251ef60149->m_frame.f_lineno = 41;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS2(
                tmp_called_instance_1,
                mod_consts[3],
                call_args
            );
        }

        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 41;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_kwargs);
        tmp_assattr_value_1 = par_kwargs;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[4], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 42;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_733ebbf5df077dd863ab5c251ef60149);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_733ebbf5df077dd863ab5c251ef60149);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_733ebbf5df077dd863ab5c251ef60149, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_733ebbf5df077dd863ab5c251ef60149->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_733ebbf5df077dd863ab5c251ef60149, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_733ebbf5df077dd863ab5c251ef60149,
        type_description_1,
        par_self,
        par_kwargs,
        var_msg
    );


    // Release cached frame if used for exception.
    if (frame_733ebbf5df077dd863ab5c251ef60149 == cache_frame_733ebbf5df077dd863ab5c251ef60149) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_733ebbf5df077dd863ab5c251ef60149);
        cache_frame_733ebbf5df077dd863ab5c251ef60149 = NULL;
    }

    assertFrameObject(frame_733ebbf5df077dd863ab5c251ef60149);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_msg);
    Py_DECREF(var_msg);
    var_msg = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_msg);
    var_msg = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_botocore$exceptions$$$function__3___reduce__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_ec53316a34e9f38afe5238b8c0274d67;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_ec53316a34e9f38afe5238b8c0274d67 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_ec53316a34e9f38afe5238b8c0274d67)) {
        Py_XDECREF(cache_frame_ec53316a34e9f38afe5238b8c0274d67);

#if _DEBUG_REFCOUNTS
        if (cache_frame_ec53316a34e9f38afe5238b8c0274d67 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_ec53316a34e9f38afe5238b8c0274d67 = MAKE_FUNCTION_FRAME(codeobj_ec53316a34e9f38afe5238b8c0274d67, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_ec53316a34e9f38afe5238b8c0274d67->m_type_description == NULL);
    frame_ec53316a34e9f38afe5238b8c0274d67 = cache_frame_ec53316a34e9f38afe5238b8c0274d67;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_ec53316a34e9f38afe5238b8c0274d67);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_ec53316a34e9f38afe5238b8c0274d67) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_tuple_element_1;
        tmp_tuple_element_1 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[5]);

        if (unlikely(tmp_tuple_element_1 == NULL)) {
            tmp_tuple_element_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[5]);
        }

        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 45;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = PyTuple_New(2);
        {
            PyObject *tmp_tuple_element_2;
            PyObject *tmp_expression_value_1;
            PyTuple_SET_ITEM0(tmp_return_value, 0, tmp_tuple_element_1);
            CHECK_OBJECT(par_self);
            tmp_expression_value_1 = par_self;
            tmp_tuple_element_2 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_1);
            if (tmp_tuple_element_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 45;
                type_description_1 = "o";
                goto tuple_build_exception_1;
            }
            tmp_tuple_element_1 = PyTuple_New(3);
            {
                PyObject *tmp_expression_value_2;
                PyTuple_SET_ITEM(tmp_tuple_element_1, 0, tmp_tuple_element_2);
                tmp_tuple_element_2 = Py_None;
                PyTuple_SET_ITEM0(tmp_tuple_element_1, 1, tmp_tuple_element_2);
                CHECK_OBJECT(par_self);
                tmp_expression_value_2 = par_self;
                tmp_tuple_element_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[4]);
                if (tmp_tuple_element_2 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 45;
                    type_description_1 = "o";
                    goto tuple_build_exception_2;
                }
                PyTuple_SET_ITEM(tmp_tuple_element_1, 2, tmp_tuple_element_2);
            }
            goto tuple_build_noexception_1;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_2:;
            Py_DECREF(tmp_tuple_element_1);
            goto tuple_build_exception_1;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_1:;
            PyTuple_SET_ITEM(tmp_return_value, 1, tmp_tuple_element_1);
        }
        goto tuple_build_noexception_2;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_return_value);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_2:;
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ec53316a34e9f38afe5238b8c0274d67);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_ec53316a34e9f38afe5238b8c0274d67);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ec53316a34e9f38afe5238b8c0274d67);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_ec53316a34e9f38afe5238b8c0274d67, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_ec53316a34e9f38afe5238b8c0274d67->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_ec53316a34e9f38afe5238b8c0274d67, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_ec53316a34e9f38afe5238b8c0274d67,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_ec53316a34e9f38afe5238b8c0274d67 == cache_frame_ec53316a34e9f38afe5238b8c0274d67) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_ec53316a34e9f38afe5238b8c0274d67);
        cache_frame_ec53316a34e9f38afe5238b8c0274d67 = NULL;
    }

    assertFrameObject(frame_ec53316a34e9f38afe5238b8c0274d67);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_botocore$exceptions$$$function__4___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_request = python_pars[1];
    PyObject *par_response = python_pars[2];
    PyObject *par_kwargs = python_pars[3];
    struct Nuitka_FrameObject *frame_886e2b29ca1eababc6a134c604774df4;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_886e2b29ca1eababc6a134c604774df4 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_886e2b29ca1eababc6a134c604774df4)) {
        Py_XDECREF(cache_frame_886e2b29ca1eababc6a134c604774df4);

#if _DEBUG_REFCOUNTS
        if (cache_frame_886e2b29ca1eababc6a134c604774df4 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_886e2b29ca1eababc6a134c604774df4 = MAKE_FUNCTION_FRAME(codeobj_886e2b29ca1eababc6a134c604774df4, module_botocore$exceptions, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_886e2b29ca1eababc6a134c604774df4->m_type_description == NULL);
    frame_886e2b29ca1eababc6a134c604774df4 = cache_frame_886e2b29ca1eababc6a134c604774df4;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_886e2b29ca1eababc6a134c604774df4);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_886e2b29ca1eababc6a134c604774df4) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_request);
        tmp_assattr_value_1 = par_request;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[6], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 82;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT(par_response);
        tmp_assattr_value_2 = par_response;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[7], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 83;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_call_result_1;
        tmp_type_arg_value_1 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[8]);

        if (unlikely(tmp_type_arg_value_1 == NULL)) {
            tmp_type_arg_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[8]);
        }

        if (tmp_type_arg_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 84;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_object_arg_value_1 = par_self;
        tmp_expression_value_1 = BUILTIN_SUPER2(tmp_type_arg_value_1, tmp_object_arg_value_1);
        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 84;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[3]);
        Py_DECREF(tmp_expression_value_1);
        if (tmp_dircall_arg1_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 84;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_kwargs);
        tmp_dircall_arg2_1 = par_kwargs;
        Py_INCREF(tmp_dircall_arg2_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1};
            tmp_call_result_1 = impl___main__$$$function__9_complex_call_helper_star_dict(dir_call_args);
        }
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 84;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_886e2b29ca1eababc6a134c604774df4);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_886e2b29ca1eababc6a134c604774df4);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_886e2b29ca1eababc6a134c604774df4, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_886e2b29ca1eababc6a134c604774df4->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_886e2b29ca1eababc6a134c604774df4, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_886e2b29ca1eababc6a134c604774df4,
        type_description_1,
        par_self,
        par_request,
        par_response,
        par_kwargs,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_886e2b29ca1eababc6a134c604774df4 == cache_frame_886e2b29ca1eababc6a134c604774df4) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_886e2b29ca1eababc6a134c604774df4);
        cache_frame_886e2b29ca1eababc6a134c604774df4 = NULL;
    }

    assertFrameObject(frame_886e2b29ca1eababc6a134c604774df4);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_request);
    Py_DECREF(par_request);
    CHECK_OBJECT(par_response);
    Py_DECREF(par_response);
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_request);
    Py_DECREF(par_request);
    CHECK_OBJECT(par_response);
    Py_DECREF(par_response);
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_botocore$exceptions$$$function__5___reduce__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_92a1f33653a769dd8fefecde1499ef67;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_92a1f33653a769dd8fefecde1499ef67 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_92a1f33653a769dd8fefecde1499ef67)) {
        Py_XDECREF(cache_frame_92a1f33653a769dd8fefecde1499ef67);

#if _DEBUG_REFCOUNTS
        if (cache_frame_92a1f33653a769dd8fefecde1499ef67 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_92a1f33653a769dd8fefecde1499ef67 = MAKE_FUNCTION_FRAME(codeobj_92a1f33653a769dd8fefecde1499ef67, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_92a1f33653a769dd8fefecde1499ef67->m_type_description == NULL);
    frame_92a1f33653a769dd8fefecde1499ef67 = cache_frame_92a1f33653a769dd8fefecde1499ef67;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_92a1f33653a769dd8fefecde1499ef67);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_92a1f33653a769dd8fefecde1499ef67) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_tuple_element_1;
        tmp_tuple_element_1 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[5]);

        if (unlikely(tmp_tuple_element_1 == NULL)) {
            tmp_tuple_element_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[5]);
        }

        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 87;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = PyTuple_New(2);
        {
            PyObject *tmp_tuple_element_2;
            PyObject *tmp_expression_value_1;
            PyTuple_SET_ITEM0(tmp_return_value, 0, tmp_tuple_element_1);
            CHECK_OBJECT(par_self);
            tmp_expression_value_1 = par_self;
            tmp_tuple_element_2 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_1);
            if (tmp_tuple_element_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 88;
                type_description_1 = "o";
                goto tuple_build_exception_1;
            }
            tmp_tuple_element_1 = PyTuple_New(3);
            {
                PyObject *tmp_tuple_element_3;
                PyObject *tmp_expression_value_2;
                PyObject *tmp_expression_value_4;
                PyTuple_SET_ITEM(tmp_tuple_element_1, 0, tmp_tuple_element_2);
                CHECK_OBJECT(par_self);
                tmp_expression_value_2 = par_self;
                tmp_tuple_element_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[6]);
                if (tmp_tuple_element_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 88;
                    type_description_1 = "o";
                    goto tuple_build_exception_2;
                }
                tmp_tuple_element_2 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_3;
                    PyTuple_SET_ITEM(tmp_tuple_element_2, 0, tmp_tuple_element_3);
                    CHECK_OBJECT(par_self);
                    tmp_expression_value_3 = par_self;
                    tmp_tuple_element_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[7]);
                    if (tmp_tuple_element_3 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 88;
                        type_description_1 = "o";
                        goto tuple_build_exception_3;
                    }
                    PyTuple_SET_ITEM(tmp_tuple_element_2, 1, tmp_tuple_element_3);
                }
                goto tuple_build_noexception_1;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_3:;
                Py_DECREF(tmp_tuple_element_2);
                goto tuple_build_exception_2;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_1:;
                PyTuple_SET_ITEM(tmp_tuple_element_1, 1, tmp_tuple_element_2);
                CHECK_OBJECT(par_self);
                tmp_expression_value_4 = par_self;
                tmp_tuple_element_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[4]);
                if (tmp_tuple_element_2 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 88;
                    type_description_1 = "o";
                    goto tuple_build_exception_2;
                }
                PyTuple_SET_ITEM(tmp_tuple_element_1, 2, tmp_tuple_element_2);
            }
            goto tuple_build_noexception_2;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_2:;
            Py_DECREF(tmp_tuple_element_1);
            goto tuple_build_exception_1;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_2:;
            PyTuple_SET_ITEM(tmp_return_value, 1, tmp_tuple_element_1);
        }
        goto tuple_build_noexception_3;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_return_value);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_3:;
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_92a1f33653a769dd8fefecde1499ef67);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_92a1f33653a769dd8fefecde1499ef67);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_92a1f33653a769dd8fefecde1499ef67);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_92a1f33653a769dd8fefecde1499ef67, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_92a1f33653a769dd8fefecde1499ef67->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_92a1f33653a769dd8fefecde1499ef67, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_92a1f33653a769dd8fefecde1499ef67,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_92a1f33653a769dd8fefecde1499ef67 == cache_frame_92a1f33653a769dd8fefecde1499ef67) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_92a1f33653a769dd8fefecde1499ef67);
        cache_frame_92a1f33653a769dd8fefecde1499ef67 = NULL;
    }

    assertFrameObject(frame_92a1f33653a769dd8fefecde1499ef67);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_botocore$exceptions$$$function__6___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_name = python_pars[1];
    PyObject *par_reason = python_pars[2];
    PyObject *par_last_response = python_pars[3];
    struct Nuitka_FrameObject *frame_ef956613382d4045fee0bc4f3e25bfad;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_ef956613382d4045fee0bc4f3e25bfad = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_ef956613382d4045fee0bc4f3e25bfad)) {
        Py_XDECREF(cache_frame_ef956613382d4045fee0bc4f3e25bfad);

#if _DEBUG_REFCOUNTS
        if (cache_frame_ef956613382d4045fee0bc4f3e25bfad == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_ef956613382d4045fee0bc4f3e25bfad = MAKE_FUNCTION_FRAME(codeobj_ef956613382d4045fee0bc4f3e25bfad, module_botocore$exceptions, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_ef956613382d4045fee0bc4f3e25bfad->m_type_description == NULL);
    frame_ef956613382d4045fee0bc4f3e25bfad = cache_frame_ef956613382d4045fee0bc4f3e25bfad;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_ef956613382d4045fee0bc4f3e25bfad);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_ef956613382d4045fee0bc4f3e25bfad) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_kw_call_value_0_1;
        PyObject *tmp_kw_call_value_1_1;
        tmp_type_arg_value_1 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[9]);

        if (unlikely(tmp_type_arg_value_1 == NULL)) {
            tmp_type_arg_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[9]);
        }

        if (tmp_type_arg_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 369;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_object_arg_value_1 = par_self;
        tmp_expression_value_1 = BUILTIN_SUPER2(tmp_type_arg_value_1, tmp_object_arg_value_1);
        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 369;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[3]);
        Py_DECREF(tmp_expression_value_1);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 369;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_name);
        tmp_kw_call_value_0_1 = par_name;
        CHECK_OBJECT(par_reason);
        tmp_kw_call_value_1_1 = par_reason;
        frame_ef956613382d4045fee0bc4f3e25bfad->m_frame.f_lineno = 369;
        {
            PyObject *kw_values[2] = {tmp_kw_call_value_0_1, tmp_kw_call_value_1_1};

            tmp_call_result_1 = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tmp_called_value_1, kw_values, mod_consts[10]);
        }

        Py_DECREF(tmp_called_value_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 369;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_last_response);
        tmp_assattr_value_1 = par_last_response;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[11], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 370;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ef956613382d4045fee0bc4f3e25bfad);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ef956613382d4045fee0bc4f3e25bfad);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_ef956613382d4045fee0bc4f3e25bfad, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_ef956613382d4045fee0bc4f3e25bfad->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_ef956613382d4045fee0bc4f3e25bfad, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_ef956613382d4045fee0bc4f3e25bfad,
        type_description_1,
        par_self,
        par_name,
        par_reason,
        par_last_response,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_ef956613382d4045fee0bc4f3e25bfad == cache_frame_ef956613382d4045fee0bc4f3e25bfad) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_ef956613382d4045fee0bc4f3e25bfad);
        cache_frame_ef956613382d4045fee0bc4f3e25bfad = NULL;
    }

    assertFrameObject(frame_ef956613382d4045fee0bc4f3e25bfad);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);
    CHECK_OBJECT(par_last_response);
    Py_DECREF(par_last_response);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_reason);
    Py_DECREF(par_reason);
    CHECK_OBJECT(par_last_response);
    Py_DECREF(par_last_response);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_botocore$exceptions$$$function__7___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_error_response = python_pars[1];
    PyObject *par_operation_name = python_pars[2];
    PyObject *var_retry_info = NULL;
    PyObject *var_error = NULL;
    PyObject *var_msg = NULL;
    struct Nuitka_FrameObject *frame_b78620c3d7e04f58bcabb5ab7b546801;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_b78620c3d7e04f58bcabb5ab7b546801 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_b78620c3d7e04f58bcabb5ab7b546801)) {
        Py_XDECREF(cache_frame_b78620c3d7e04f58bcabb5ab7b546801);

#if _DEBUG_REFCOUNTS
        if (cache_frame_b78620c3d7e04f58bcabb5ab7b546801 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_b78620c3d7e04f58bcabb5ab7b546801 = MAKE_FUNCTION_FRAME(codeobj_b78620c3d7e04f58bcabb5ab7b546801, module_botocore$exceptions, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_b78620c3d7e04f58bcabb5ab7b546801->m_type_description == NULL);
    frame_b78620c3d7e04f58bcabb5ab7b546801 = cache_frame_b78620c3d7e04f58bcabb5ab7b546801;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_b78620c3d7e04f58bcabb5ab7b546801);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_b78620c3d7e04f58bcabb5ab7b546801) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_1;
        CHECK_OBJECT(par_self);
        tmp_called_instance_1 = par_self;
        CHECK_OBJECT(par_error_response);
        tmp_args_element_value_1 = par_error_response;
        frame_b78620c3d7e04f58bcabb5ab7b546801->m_frame.f_lineno = 410;
        tmp_assign_source_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[12], tmp_args_element_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 410;
            type_description_1 = "ooooooN";
            goto frame_exception_exit_1;
        }
        assert(var_retry_info == NULL);
        var_retry_info = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_call_arg_element_1;
        PyObject *tmp_call_arg_element_2;
        CHECK_OBJECT(par_error_response);
        tmp_expression_value_1 = par_error_response;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[13]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 411;
            type_description_1 = "ooooooN";
            goto frame_exception_exit_1;
        }
        tmp_call_arg_element_1 = mod_consts[14];
        tmp_call_arg_element_2 = PyDict_New();
        frame_b78620c3d7e04f58bcabb5ab7b546801->m_frame.f_lineno = 411;
        {
            PyObject *call_args[] = {tmp_call_arg_element_1, tmp_call_arg_element_2};
            tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_call_arg_element_2);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 411;
            type_description_1 = "ooooooN";
            goto frame_exception_exit_1;
        }
        assert(var_error == NULL);
        var_error = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_kw_call_value_0_1;
        PyObject *tmp_called_value_3;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_kw_call_value_1_1;
        PyObject *tmp_called_value_4;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_kw_call_value_2_1;
        PyObject *tmp_kw_call_value_3_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_expression_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[15]);
        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;
            type_description_1 = "ooooooN";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[2]);
        Py_DECREF(tmp_expression_value_2);
        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;
            type_description_1 = "ooooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_error);
        tmp_expression_value_4 = var_error;
        tmp_called_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[13]);
        if (tmp_called_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 413;
            type_description_1 = "ooooooN";
            goto frame_exception_exit_1;
        }
        frame_b78620c3d7e04f58bcabb5ab7b546801->m_frame.f_lineno = 413;
        tmp_kw_call_value_0_1 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_3, mod_consts[16]);

        Py_DECREF(tmp_called_value_3);
        if (tmp_kw_call_value_0_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 413;
            type_description_1 = "ooooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_error);
        tmp_expression_value_5 = var_error;
        tmp_called_value_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[13]);
        if (tmp_called_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_kw_call_value_0_1);

            exception_lineno = 414;
            type_description_1 = "ooooooN";
            goto frame_exception_exit_1;
        }
        frame_b78620c3d7e04f58bcabb5ab7b546801->m_frame.f_lineno = 414;
        tmp_kw_call_value_1_1 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_4, mod_consts[17]);

        Py_DECREF(tmp_called_value_4);
        if (tmp_kw_call_value_1_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_kw_call_value_0_1);

            exception_lineno = 414;
            type_description_1 = "ooooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_operation_name);
        tmp_kw_call_value_2_1 = par_operation_name;
        CHECK_OBJECT(var_retry_info);
        tmp_kw_call_value_3_1 = var_retry_info;
        frame_b78620c3d7e04f58bcabb5ab7b546801->m_frame.f_lineno = 412;
        {
            PyObject *kw_values[4] = {tmp_kw_call_value_0_1, tmp_kw_call_value_1_1, tmp_kw_call_value_2_1, tmp_kw_call_value_3_1};

            tmp_assign_source_3 = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tmp_called_value_2, kw_values, mod_consts[18]);
        }

        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_kw_call_value_0_1);
        Py_DECREF(tmp_kw_call_value_1_1);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;
            type_description_1 = "ooooooN";
            goto frame_exception_exit_1;
        }
        assert(var_msg == NULL);
        var_msg = tmp_assign_source_3;
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_2;
        tmp_type_arg_value_1 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[19]);

        if (unlikely(tmp_type_arg_value_1 == NULL)) {
            tmp_type_arg_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[19]);
        }

        if (tmp_type_arg_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 418;
            type_description_1 = "ooooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_object_arg_value_1 = par_self;
        tmp_called_instance_2 = BUILTIN_SUPER2(tmp_type_arg_value_1, tmp_object_arg_value_1);
        if (tmp_called_instance_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 418;
            type_description_1 = "ooooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_msg);
        tmp_args_element_value_2 = var_msg;
        frame_b78620c3d7e04f58bcabb5ab7b546801->m_frame.f_lineno = 418;
        tmp_call_result_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_2, mod_consts[3], tmp_args_element_value_2);
        Py_DECREF(tmp_called_instance_2);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 418;
            type_description_1 = "ooooooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_error_response);
        tmp_assattr_value_1 = par_error_response;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[7], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 419;
            type_description_1 = "ooooooN";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT(par_operation_name);
        tmp_assattr_value_2 = par_operation_name;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[20], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 420;
            type_description_1 = "ooooooN";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b78620c3d7e04f58bcabb5ab7b546801);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b78620c3d7e04f58bcabb5ab7b546801);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_b78620c3d7e04f58bcabb5ab7b546801, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_b78620c3d7e04f58bcabb5ab7b546801->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_b78620c3d7e04f58bcabb5ab7b546801, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_b78620c3d7e04f58bcabb5ab7b546801,
        type_description_1,
        par_self,
        par_error_response,
        par_operation_name,
        var_retry_info,
        var_error,
        var_msg,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_b78620c3d7e04f58bcabb5ab7b546801 == cache_frame_b78620c3d7e04f58bcabb5ab7b546801) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_b78620c3d7e04f58bcabb5ab7b546801);
        cache_frame_b78620c3d7e04f58bcabb5ab7b546801 = NULL;
    }

    assertFrameObject(frame_b78620c3d7e04f58bcabb5ab7b546801);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_retry_info);
    Py_DECREF(var_retry_info);
    var_retry_info = NULL;
    CHECK_OBJECT(var_error);
    Py_DECREF(var_error);
    var_error = NULL;
    CHECK_OBJECT(var_msg);
    Py_DECREF(var_msg);
    var_msg = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_retry_info);
    var_retry_info = NULL;
    Py_XDECREF(var_error);
    var_error = NULL;
    Py_XDECREF(var_msg);
    var_msg = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_error_response);
    Py_DECREF(par_error_response);
    CHECK_OBJECT(par_operation_name);
    Py_DECREF(par_operation_name);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_error_response);
    Py_DECREF(par_error_response);
    CHECK_OBJECT(par_operation_name);
    Py_DECREF(par_operation_name);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_botocore$exceptions$$$function__8__get_retry_info(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_response = python_pars[1];
    PyObject *var_retry_info = NULL;
    PyObject *var_metadata = NULL;
    struct Nuitka_FrameObject *frame_6c35fc215e56f7343c781c0c77361954;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_6c35fc215e56f7343c781c0c77361954 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = mod_consts[21];
        assert(var_retry_info == NULL);
        Py_INCREF(tmp_assign_source_1);
        var_retry_info = tmp_assign_source_1;
    }
    // Tried code:
    if (isFrameUnusable(cache_frame_6c35fc215e56f7343c781c0c77361954)) {
        Py_XDECREF(cache_frame_6c35fc215e56f7343c781c0c77361954);

#if _DEBUG_REFCOUNTS
        if (cache_frame_6c35fc215e56f7343c781c0c77361954 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_6c35fc215e56f7343c781c0c77361954 = MAKE_FUNCTION_FRAME(codeobj_6c35fc215e56f7343c781c0c77361954, module_botocore$exceptions, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_6c35fc215e56f7343c781c0c77361954->m_type_description == NULL);
    frame_6c35fc215e56f7343c781c0c77361954 = cache_frame_6c35fc215e56f7343c781c0c77361954;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_6c35fc215e56f7343c781c0c77361954);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_6c35fc215e56f7343c781c0c77361954) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        tmp_cmp_expr_left_1 = mod_consts[22];
        CHECK_OBJECT(par_response);
        tmp_cmp_expr_right_1 = par_response;
        tmp_res = PySequence_Contains(tmp_cmp_expr_right_1, tmp_cmp_expr_left_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 424;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_subscript_value_1;
        CHECK_OBJECT(par_response);
        tmp_expression_value_1 = par_response;
        tmp_subscript_value_1 = mod_consts[22];
        tmp_assign_source_2 = LOOKUP_SUBSCRIPT(tmp_expression_value_1, tmp_subscript_value_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 425;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(var_metadata == NULL);
        var_metadata = tmp_assign_source_2;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_call_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(var_metadata);
        tmp_expression_value_2 = var_metadata;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[13]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 426;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_6c35fc215e56f7343c781c0c77361954->m_frame.f_lineno = 426;
        tmp_call_result_1 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_1, mod_consts[23]);

        Py_DECREF(tmp_called_value_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 426;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_call_result_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_1);

            exception_lineno = 426;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_call_result_1);
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        bool tmp_condition_result_3;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        tmp_cmp_expr_left_2 = mod_consts[24];
        CHECK_OBJECT(var_metadata);
        tmp_cmp_expr_right_2 = var_metadata;
        tmp_res = PySequence_Contains(tmp_cmp_expr_right_2, tmp_cmp_expr_left_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 427;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = (tmp_res == 1) ? true : false;
        if (tmp_condition_result_3 != false) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_subscript_value_2;
        tmp_left_value_1 = mod_consts[25];
        CHECK_OBJECT(var_metadata);
        tmp_expression_value_3 = var_metadata;
        tmp_subscript_value_2 = mod_consts[24];
        tmp_right_value_1 = LOOKUP_SUBSCRIPT(tmp_expression_value_3, tmp_subscript_value_2);
        if (tmp_right_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 429;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_3 = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_left_value_1, tmp_right_value_1);
        Py_DECREF(tmp_right_value_1);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 429;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_retry_info;
            assert(old != NULL);
            var_retry_info = tmp_assign_source_3;
            Py_DECREF(old);
        }

    }
    branch_no_3:;
    branch_no_2:;
    branch_no_1:;
    if (var_retry_info == NULL) {

        FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[26]);
        exception_tb = NULL;
        NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
        CHAIN_EXCEPTION(exception_value);

        exception_lineno = 430;
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }

    tmp_return_value = var_retry_info;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_6c35fc215e56f7343c781c0c77361954);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_6c35fc215e56f7343c781c0c77361954);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_6c35fc215e56f7343c781c0c77361954);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_6c35fc215e56f7343c781c0c77361954, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_6c35fc215e56f7343c781c0c77361954->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_6c35fc215e56f7343c781c0c77361954, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_6c35fc215e56f7343c781c0c77361954,
        type_description_1,
        par_self,
        par_response,
        var_retry_info,
        var_metadata
    );


    // Release cached frame if used for exception.
    if (frame_6c35fc215e56f7343c781c0c77361954 == cache_frame_6c35fc215e56f7343c781c0c77361954) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_6c35fc215e56f7343c781c0c77361954);
        cache_frame_6c35fc215e56f7343c781c0c77361954 = NULL;
    }

    assertFrameObject(frame_6c35fc215e56f7343c781c0c77361954);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_retry_info);
    var_retry_info = NULL;
    Py_XDECREF(var_metadata);
    var_metadata = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_retry_info);
    var_retry_info = NULL;
    Py_XDECREF(var_metadata);
    var_metadata = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_response);
    Py_DECREF(par_response);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_response);
    Py_DECREF(par_response);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_botocore$exceptions$$$function__9___reduce__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_b15b4ef00202c305b77010fd918a1da5;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_b15b4ef00202c305b77010fd918a1da5 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_b15b4ef00202c305b77010fd918a1da5)) {
        Py_XDECREF(cache_frame_b15b4ef00202c305b77010fd918a1da5);

#if _DEBUG_REFCOUNTS
        if (cache_frame_b15b4ef00202c305b77010fd918a1da5 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_b15b4ef00202c305b77010fd918a1da5 = MAKE_FUNCTION_FRAME(codeobj_b15b4ef00202c305b77010fd918a1da5, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_b15b4ef00202c305b77010fd918a1da5->m_type_description == NULL);
    frame_b15b4ef00202c305b77010fd918a1da5 = cache_frame_b15b4ef00202c305b77010fd918a1da5;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_b15b4ef00202c305b77010fd918a1da5);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_b15b4ef00202c305b77010fd918a1da5) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_tuple_element_1;
        tmp_tuple_element_1 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[19]);

        if (unlikely(tmp_tuple_element_1 == NULL)) {
            tmp_tuple_element_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[19]);
        }

        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 436;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = PyTuple_New(2);
        {
            PyObject *tmp_tuple_element_2;
            PyObject *tmp_expression_value_1;
            PyTuple_SET_ITEM0(tmp_return_value, 0, tmp_tuple_element_1);
            CHECK_OBJECT(par_self);
            tmp_expression_value_1 = par_self;
            tmp_tuple_element_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[7]);
            if (tmp_tuple_element_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 436;
                type_description_1 = "o";
                goto tuple_build_exception_1;
            }
            tmp_tuple_element_1 = PyTuple_New(2);
            {
                PyObject *tmp_expression_value_2;
                PyTuple_SET_ITEM(tmp_tuple_element_1, 0, tmp_tuple_element_2);
                CHECK_OBJECT(par_self);
                tmp_expression_value_2 = par_self;
                tmp_tuple_element_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[20]);
                if (tmp_tuple_element_2 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 436;
                    type_description_1 = "o";
                    goto tuple_build_exception_2;
                }
                PyTuple_SET_ITEM(tmp_tuple_element_1, 1, tmp_tuple_element_2);
            }
            goto tuple_build_noexception_1;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_2:;
            Py_DECREF(tmp_tuple_element_1);
            goto tuple_build_exception_1;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_1:;
            PyTuple_SET_ITEM(tmp_return_value, 1, tmp_tuple_element_1);
        }
        goto tuple_build_noexception_2;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_return_value);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_2:;
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b15b4ef00202c305b77010fd918a1da5);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_b15b4ef00202c305b77010fd918a1da5);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b15b4ef00202c305b77010fd918a1da5);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_b15b4ef00202c305b77010fd918a1da5, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_b15b4ef00202c305b77010fd918a1da5->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_b15b4ef00202c305b77010fd918a1da5, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_b15b4ef00202c305b77010fd918a1da5,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_b15b4ef00202c305b77010fd918a1da5 == cache_frame_b15b4ef00202c305b77010fd918a1da5) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_b15b4ef00202c305b77010fd918a1da5);
        cache_frame_b15b4ef00202c305b77010fd918a1da5 = NULL;
    }

    assertFrameObject(frame_b15b4ef00202c305b77010fd918a1da5);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_botocore$exceptions$$$function__10___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_kwargs = python_pars[1];
    PyObject *var_msg = NULL;
    struct Nuitka_FrameObject *frame_67e0e6eb84baf16d7354cf432037117c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_67e0e6eb84baf16d7354cf432037117c = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_67e0e6eb84baf16d7354cf432037117c)) {
        Py_XDECREF(cache_frame_67e0e6eb84baf16d7354cf432037117c);

#if _DEBUG_REFCOUNTS
        if (cache_frame_67e0e6eb84baf16d7354cf432037117c == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_67e0e6eb84baf16d7354cf432037117c = MAKE_FUNCTION_FRAME(codeobj_67e0e6eb84baf16d7354cf432037117c, module_botocore$exceptions, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_67e0e6eb84baf16d7354cf432037117c->m_type_description == NULL);
    frame_67e0e6eb84baf16d7354cf432037117c = cache_frame_67e0e6eb84baf16d7354cf432037117c;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_67e0e6eb84baf16d7354cf432037117c);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_67e0e6eb84baf16d7354cf432037117c) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_dircall_arg2_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_expression_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[1]);
        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 620;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[2]);
        Py_DECREF(tmp_expression_value_1);
        if (tmp_dircall_arg1_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 620;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_kwargs);
        tmp_dircall_arg2_1 = par_kwargs;
        Py_INCREF(tmp_dircall_arg2_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1};
            tmp_assign_source_1 = impl___main__$$$function__9_complex_call_helper_star_dict(dir_call_args);
        }
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 620;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert(var_msg == NULL);
        var_msg = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        tmp_called_instance_1 = PyExc_Exception;
        CHECK_OBJECT(par_self);
        tmp_args_element_value_1 = par_self;
        CHECK_OBJECT(var_msg);
        tmp_args_element_value_2 = var_msg;
        frame_67e0e6eb84baf16d7354cf432037117c->m_frame.f_lineno = 621;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS2(
                tmp_called_instance_1,
                mod_consts[3],
                call_args
            );
        }

        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 621;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_kwargs);
        tmp_assattr_value_1 = par_kwargs;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[4], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 622;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_67e0e6eb84baf16d7354cf432037117c);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_67e0e6eb84baf16d7354cf432037117c);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_67e0e6eb84baf16d7354cf432037117c, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_67e0e6eb84baf16d7354cf432037117c->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_67e0e6eb84baf16d7354cf432037117c, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_67e0e6eb84baf16d7354cf432037117c,
        type_description_1,
        par_self,
        par_kwargs,
        var_msg
    );


    // Release cached frame if used for exception.
    if (frame_67e0e6eb84baf16d7354cf432037117c == cache_frame_67e0e6eb84baf16d7354cf432037117c) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_67e0e6eb84baf16d7354cf432037117c);
        cache_frame_67e0e6eb84baf16d7354cf432037117c = NULL;
    }

    assertFrameObject(frame_67e0e6eb84baf16d7354cf432037117c);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_msg);
    Py_DECREF(var_msg);
    var_msg = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_msg);
    var_msg = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



static PyObject *MAKE_FUNCTION_botocore$exceptions$$$function__10___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_botocore$exceptions$$$function__10___init__,
        mod_consts[3],
#if PYTHON_VERSION >= 0x300
        mod_consts[249],
#endif
        codeobj_67e0e6eb84baf16d7354cf432037117c,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_botocore$exceptions,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_botocore$exceptions$$$function__1__exception_from_packed_args(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_botocore$exceptions$$$function__1__exception_from_packed_args,
        mod_consts[5],
#if PYTHON_VERSION >= 0x300
        NULL,
#endif
        codeobj_957c8599cc37e6f7aba4f338c433b79f,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_botocore$exceptions,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_botocore$exceptions$$$function__2___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_botocore$exceptions$$$function__2___init__,
        mod_consts[3],
#if PYTHON_VERSION >= 0x300
        mod_consts[55],
#endif
        codeobj_733ebbf5df077dd863ab5c251ef60149,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_botocore$exceptions,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_botocore$exceptions$$$function__3___reduce__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_botocore$exceptions$$$function__3___reduce__,
        mod_consts[56],
#if PYTHON_VERSION >= 0x300
        mod_consts[57],
#endif
        codeobj_ec53316a34e9f38afe5238b8c0274d67,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_botocore$exceptions,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_botocore$exceptions$$$function__4___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_botocore$exceptions$$$function__4___init__,
        mod_consts[3],
#if PYTHON_VERSION >= 0x300
        mod_consts[69],
#endif
        codeobj_886e2b29ca1eababc6a134c604774df4,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_botocore$exceptions,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_botocore$exceptions$$$function__5___reduce__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_botocore$exceptions$$$function__5___reduce__,
        mod_consts[56],
#if PYTHON_VERSION >= 0x300
        mod_consts[70],
#endif
        codeobj_92a1f33653a769dd8fefecde1499ef67,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_botocore$exceptions,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_botocore$exceptions$$$function__6___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_botocore$exceptions$$$function__6___init__,
        mod_consts[3],
#if PYTHON_VERSION >= 0x300
        mod_consts[161],
#endif
        codeobj_ef956613382d4045fee0bc4f3e25bfad,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_botocore$exceptions,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_botocore$exceptions$$$function__7___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_botocore$exceptions$$$function__7___init__,
        mod_consts[3],
#if PYTHON_VERSION >= 0x300
        mod_consts[181],
#endif
        codeobj_b78620c3d7e04f58bcabb5ab7b546801,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_botocore$exceptions,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_botocore$exceptions$$$function__8__get_retry_info() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_botocore$exceptions$$$function__8__get_retry_info,
        mod_consts[12],
#if PYTHON_VERSION >= 0x300
        mod_consts[182],
#endif
        codeobj_6c35fc215e56f7343c781c0c77361954,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_botocore$exceptions,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_botocore$exceptions$$$function__9___reduce__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_botocore$exceptions$$$function__9___reduce__,
        mod_consts[56],
#if PYTHON_VERSION >= 0x300
        mod_consts[183],
#endif
        codeobj_b15b4ef00202c305b77010fd918a1da5,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_botocore$exceptions,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}


extern void _initCompiledCellType();
extern void _initCompiledGeneratorType();
extern void _initCompiledFunctionType();
extern void _initCompiledMethodType();
extern void _initCompiledFrameType();

extern PyTypeObject Nuitka_Loader_Type;

#ifdef _NUITKA_PLUGIN_DILL_ENABLED
// Provide a way to create find a function via its C code and create it back
// in another process, useful for multiprocessing extensions like dill
extern void registerDillPluginTables(char const *module_name, PyMethodDef *reduce_compiled_function, PyMethodDef *create_compiled_function);

function_impl_code functable_botocore$exceptions[] = {
    impl_botocore$exceptions$$$function__1__exception_from_packed_args,
    impl_botocore$exceptions$$$function__2___init__,
    impl_botocore$exceptions$$$function__3___reduce__,
    impl_botocore$exceptions$$$function__4___init__,
    impl_botocore$exceptions$$$function__5___reduce__,
    impl_botocore$exceptions$$$function__6___init__,
    impl_botocore$exceptions$$$function__7___init__,
    impl_botocore$exceptions$$$function__8__get_retry_info,
    impl_botocore$exceptions$$$function__9___reduce__,
    impl_botocore$exceptions$$$function__10___init__,
    NULL
};

static char const *_reduce_compiled_function_argnames[] = {
    "func",
    NULL
};

static PyObject *_reduce_compiled_function(PyObject *self, PyObject *args, PyObject *kwds) {
    PyObject *func;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "O:reduce_compiled_function", (char **)_reduce_compiled_function_argnames, &func, NULL)) {
        return NULL;
    }

    if (Nuitka_Function_Check(func) == false) {
        SET_CURRENT_EXCEPTION_TYPE0_STR(PyExc_TypeError, "not a compiled function");
        return NULL;
    }

    struct Nuitka_FunctionObject *function = (struct Nuitka_FunctionObject *)func;

    function_impl_code *current = functable_botocore$exceptions;
    int offset = 0;

    while (*current != NULL) {
        if (*current == function->m_c_code) {
            break;
        }

        current += 1;
        offset += 1;
    }

    if (*current == NULL) {
        SET_CURRENT_EXCEPTION_TYPE0_STR(PyExc_TypeError, "Cannot find compiled function in module.");
        return NULL;
    }

    PyObject *code_object_desc = PyTuple_New(6);
    PyTuple_SET_ITEM0(code_object_desc, 0, function->m_code_object->co_filename);
    PyTuple_SET_ITEM0(code_object_desc, 1, function->m_code_object->co_name);
    PyTuple_SET_ITEM(code_object_desc, 2, PyLong_FromLong(function->m_code_object->co_firstlineno));
    PyTuple_SET_ITEM0(code_object_desc, 3, function->m_code_object->co_varnames);
    PyTuple_SET_ITEM(code_object_desc, 4, PyLong_FromLong(function->m_code_object->co_argcount));
    PyTuple_SET_ITEM(code_object_desc, 5, PyLong_FromLong(function->m_code_object->co_flags));

    CHECK_OBJECT_DEEP(code_object_desc);

    PyObject *result = PyTuple_New(4);
    PyTuple_SET_ITEM(result, 0, PyLong_FromLong(offset));
    PyTuple_SET_ITEM(result, 1, code_object_desc);
    PyTuple_SET_ITEM0(result, 2, function->m_defaults);
    PyTuple_SET_ITEM0(result, 3, function->m_doc != NULL ? function->m_doc : Py_None);

    CHECK_OBJECT_DEEP(result);

    return result;
}

static PyMethodDef _method_def_reduce_compiled_function = {"reduce_compiled_function", (PyCFunction)_reduce_compiled_function,
                                                           METH_VARARGS | METH_KEYWORDS, NULL};

static char const *_create_compiled_function_argnames[] = {
    "func",
    "code_object_desc",
    "defaults",
    "doc",
    NULL
};


static PyObject *_create_compiled_function(PyObject *self, PyObject *args, PyObject *kwds) {
    CHECK_OBJECT_DEEP(args);

    PyObject *func;
    PyObject *code_object_desc;
    PyObject *defaults;
    PyObject *doc;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "OOOO:create_compiled_function", (char **)_create_compiled_function_argnames, &func, &code_object_desc, &defaults, &doc, NULL)) {
        return NULL;
    }

    int offset = PyLong_AsLong(func);

    if (offset == -1 && ERROR_OCCURRED()) {
        return NULL;
    }

    if (offset > sizeof(functable_botocore$exceptions) || offset < 0) {
        SET_CURRENT_EXCEPTION_TYPE0_STR(PyExc_TypeError, "Wrong offset for compiled function.");
        return NULL;
    }

    PyObject *filename = PyTuple_GET_ITEM(code_object_desc, 0);
    PyObject *function_name = PyTuple_GET_ITEM(code_object_desc, 1);
    PyObject *line = PyTuple_GET_ITEM(code_object_desc, 2);
    int line_int = PyLong_AsLong(line);
    assert(!ERROR_OCCURRED());

    PyObject *argnames = PyTuple_GET_ITEM(code_object_desc, 3);
    PyObject *arg_count = PyTuple_GET_ITEM(code_object_desc, 4);
    int arg_count_int = PyLong_AsLong(arg_count);
    assert(!ERROR_OCCURRED());
    PyObject *flags = PyTuple_GET_ITEM(code_object_desc, 5);
    int flags_int = PyLong_AsLong(flags);
    assert(!ERROR_OCCURRED());

    PyCodeObject *code_object = MAKE_CODEOBJECT(
        filename,
        line_int,
        flags_int,
        function_name,
        argnames,
        NULL, // freevars
        arg_count_int,
        0, // TODO: Missing kw_only_count
        0 // TODO: Missing pos_only_count
    );

    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        functable_botocore$exceptions[offset],
        code_object->co_name,
#if PYTHON_VERSION >= 0x300
        NULL, // TODO: Not transferring qualname yet
#endif
        code_object,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL, // kwdefaults are done on the outside currently
        NULL, // TODO: Not transferring annotations
#endif
        module_botocore$exceptions,
        doc,
        NULL,
        0
    );

    return (PyObject *)result;
}

static PyMethodDef _method_def_create_compiled_function = {
    "create_compiled_function",
    (PyCFunction)_create_compiled_function,
    METH_VARARGS | METH_KEYWORDS, NULL
};


#endif

// Internal entry point for module code.
PyObject *modulecode_botocore$exceptions(PyObject *module, struct Nuitka_MetaPathBasedLoaderEntry const *loader_entry) {
    // Report entry to PGO.
    PGO_onModuleEntered("botocore.exceptions");

    // Store the module for future use.
    module_botocore$exceptions = module;

    // Modules can be loaded again in case of errors, avoid the init being done again.
    static bool init_done = false;

    if (init_done == false) {
#if defined(_NUITKA_MODULE) && 0
        // In case of an extension module loaded into a process, we need to call
        // initialization here because that's the first and potentially only time
        // we are going called.

        // Initialize the constant values used.
        _initBuiltinModule();
        createGlobalConstants();

        /* Initialize the compiled types of Nuitka. */
        _initCompiledCellType();
        _initCompiledGeneratorType();
        _initCompiledFunctionType();
        _initCompiledMethodType();
        _initCompiledFrameType();

        _initSlotCompare();
#if PYTHON_VERSION >= 0x270
        _initSlotIterNext();
#endif

        patchTypeComparison();

        // Enable meta path based loader if not already done.
#ifdef _NUITKA_TRACE
        PRINT_STRING("botocore.exceptions: Calling setupMetaPathBasedLoader().\n");
#endif
        setupMetaPathBasedLoader();

#if PYTHON_VERSION >= 0x300
        patchInspectModule();
#endif

#endif

        /* The constants only used by this module are created now. */
#ifdef _NUITKA_TRACE
        PRINT_STRING("botocore.exceptions: Calling createModuleConstants().\n");
#endif
        createModuleConstants();

        /* The code objects used by this module are created now. */
#ifdef _NUITKA_TRACE
        PRINT_STRING("botocore.exceptions: Calling createModuleCodeObjects().\n");
#endif
        createModuleCodeObjects();

        init_done = true;
    }

    // PRINT_STRING("in initbotocore$exceptions\n");

    moduledict_botocore$exceptions = MODULE_DICT(module_botocore$exceptions);

#ifdef _NUITKA_PLUGIN_DILL_ENABLED
    registerDillPluginTables(loader_entry->name, &_method_def_reduce_compiled_function, &_method_def_create_compiled_function);
#endif

    // Set "__compiled__" to what version information we have.
    UPDATE_STRING_DICT0(
        moduledict_botocore$exceptions,
        (Nuitka_StringObject *)const_str_plain___compiled__,
        Nuitka_dunder_compiled_value
    );

    // Update "__package__" value to what it ought to be.
    {
#if 0
        UPDATE_STRING_DICT0(
            moduledict_botocore$exceptions,
            (Nuitka_StringObject *)const_str_plain___package__,
            mod_consts[21]
        );
#elif 0
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)const_str_plain___name__);

        UPDATE_STRING_DICT0(
            moduledict_botocore$exceptions,
            (Nuitka_StringObject *)const_str_plain___package__,
            module_name
        );
#else

#if PYTHON_VERSION < 0x300
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)const_str_plain___name__);
        char const *module_name_cstr = PyString_AS_STRING(module_name);

        char const *last_dot = strrchr(module_name_cstr, '.');

        if (last_dot != NULL) {
            UPDATE_STRING_DICT1(
                moduledict_botocore$exceptions,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyString_FromStringAndSize(module_name_cstr, last_dot - module_name_cstr)
            );
        }
#else
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)const_str_plain___name__);
        Py_ssize_t dot_index = PyUnicode_Find(module_name, const_str_dot, 0, PyUnicode_GetLength(module_name), -1);

        if (dot_index != -1) {
            UPDATE_STRING_DICT1(
                moduledict_botocore$exceptions,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyUnicode_Substring(module_name, 0, dot_index)
            );
        }
#endif
#endif
    }

    CHECK_OBJECT(module_botocore$exceptions);

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    if (GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)const_str_plain___builtins__) == NULL) {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then but the module itself.
#if defined(_NUITKA_MODULE) || !0
        value = PyModule_GetDict(value);
#endif

        UPDATE_STRING_DICT0(moduledict_botocore$exceptions, (Nuitka_StringObject *)const_str_plain___builtins__, value);
    }

#if PYTHON_VERSION >= 0x300
    UPDATE_STRING_DICT0(moduledict_botocore$exceptions, (Nuitka_StringObject *)const_str_plain___loader__, (PyObject *)&Nuitka_Loader_Type);
#endif

#if PYTHON_VERSION >= 0x340
// Set the "__spec__" value

#if 0
    // Main modules just get "None" as spec.
    UPDATE_STRING_DICT0(moduledict_botocore$exceptions, (Nuitka_StringObject *)const_str_plain___spec__, Py_None);
#else
    // Other modules get a "ModuleSpec" from the standard mechanism.
    {
        PyObject *bootstrap_module = getImportLibBootstrapModule();
        CHECK_OBJECT(bootstrap_module);

        PyObject *_spec_from_module = PyObject_GetAttrString(bootstrap_module, "_spec_from_module");
        CHECK_OBJECT(_spec_from_module);

        PyObject *spec_value = CALL_FUNCTION_WITH_SINGLE_ARG(_spec_from_module, module_botocore$exceptions);
        Py_DECREF(_spec_from_module);

        // We can assume this to never fail, or else we are in trouble anyway.
        // CHECK_OBJECT(spec_value);

        if (spec_value == NULL) {
            PyErr_PrintEx(0);
            abort();
        }

// Mark the execution in the "__spec__" value.
        SET_ATTRIBUTE(spec_value, const_str_plain__initializing, Py_True);

        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)const_str_plain___spec__, spec_value);
    }
#endif
#endif

    // Temp variables if any
    PyObject *outline_0_var___class__ = NULL;
    PyObject *outline_1_var___class__ = NULL;
    PyObject *outline_2_var___class__ = NULL;
    PyObject *outline_3_var___class__ = NULL;
    PyObject *outline_4_var___class__ = NULL;
    PyObject *outline_5_var___class__ = NULL;
    PyObject *outline_6_var___class__ = NULL;
    PyObject *outline_7_var___class__ = NULL;
    PyObject *outline_8_var___class__ = NULL;
    PyObject *outline_9_var___class__ = NULL;
    PyObject *outline_10_var___class__ = NULL;
    PyObject *outline_11_var___class__ = NULL;
    PyObject *outline_12_var___class__ = NULL;
    PyObject *outline_13_var___class__ = NULL;
    PyObject *outline_14_var___class__ = NULL;
    PyObject *outline_15_var___class__ = NULL;
    PyObject *outline_16_var___class__ = NULL;
    PyObject *outline_17_var___class__ = NULL;
    PyObject *outline_18_var___class__ = NULL;
    PyObject *outline_19_var___class__ = NULL;
    PyObject *outline_20_var___class__ = NULL;
    PyObject *outline_21_var___class__ = NULL;
    PyObject *outline_22_var___class__ = NULL;
    PyObject *outline_23_var___class__ = NULL;
    PyObject *outline_24_var___class__ = NULL;
    PyObject *outline_25_var___class__ = NULL;
    PyObject *outline_26_var___class__ = NULL;
    PyObject *outline_27_var___class__ = NULL;
    PyObject *outline_28_var___class__ = NULL;
    PyObject *outline_29_var___class__ = NULL;
    PyObject *outline_30_var___class__ = NULL;
    PyObject *outline_31_var___class__ = NULL;
    PyObject *outline_32_var___class__ = NULL;
    PyObject *outline_33_var___class__ = NULL;
    PyObject *outline_34_var___class__ = NULL;
    PyObject *outline_35_var___class__ = NULL;
    PyObject *outline_36_var___class__ = NULL;
    PyObject *outline_37_var___class__ = NULL;
    PyObject *outline_38_var___class__ = NULL;
    PyObject *outline_39_var___class__ = NULL;
    PyObject *outline_40_var___class__ = NULL;
    PyObject *outline_41_var___class__ = NULL;
    PyObject *outline_42_var___class__ = NULL;
    PyObject *outline_43_var___class__ = NULL;
    PyObject *outline_44_var___class__ = NULL;
    PyObject *outline_45_var___class__ = NULL;
    PyObject *outline_46_var___class__ = NULL;
    PyObject *outline_47_var___class__ = NULL;
    PyObject *outline_48_var___class__ = NULL;
    PyObject *outline_49_var___class__ = NULL;
    PyObject *outline_50_var___class__ = NULL;
    PyObject *outline_51_var___class__ = NULL;
    PyObject *outline_52_var___class__ = NULL;
    PyObject *outline_53_var___class__ = NULL;
    PyObject *outline_54_var___class__ = NULL;
    PyObject *outline_55_var___class__ = NULL;
    PyObject *outline_56_var___class__ = NULL;
    PyObject *outline_57_var___class__ = NULL;
    PyObject *outline_58_var___class__ = NULL;
    PyObject *outline_59_var___class__ = NULL;
    PyObject *outline_60_var___class__ = NULL;
    PyObject *outline_61_var___class__ = NULL;
    PyObject *outline_62_var___class__ = NULL;
    PyObject *outline_63_var___class__ = NULL;
    PyObject *outline_64_var___class__ = NULL;
    PyObject *outline_65_var___class__ = NULL;
    PyObject *outline_66_var___class__ = NULL;
    PyObject *outline_67_var___class__ = NULL;
    PyObject *outline_68_var___class__ = NULL;
    PyObject *outline_69_var___class__ = NULL;
    PyObject *outline_70_var___class__ = NULL;
    PyObject *outline_71_var___class__ = NULL;
    PyObject *outline_72_var___class__ = NULL;
    PyObject *outline_73_var___class__ = NULL;
    PyObject *outline_74_var___class__ = NULL;
    PyObject *outline_75_var___class__ = NULL;
    PyObject *outline_76_var___class__ = NULL;
    PyObject *outline_77_var___class__ = NULL;
    PyObject *tmp_class_creation_10__bases = NULL;
    PyObject *tmp_class_creation_10__bases_orig = NULL;
    PyObject *tmp_class_creation_10__class_decl_dict = NULL;
    PyObject *tmp_class_creation_10__metaclass = NULL;
    PyObject *tmp_class_creation_10__prepared = NULL;
    PyObject *tmp_class_creation_11__bases = NULL;
    PyObject *tmp_class_creation_11__bases_orig = NULL;
    PyObject *tmp_class_creation_11__class_decl_dict = NULL;
    PyObject *tmp_class_creation_11__metaclass = NULL;
    PyObject *tmp_class_creation_11__prepared = NULL;
    PyObject *tmp_class_creation_12__bases = NULL;
    PyObject *tmp_class_creation_12__bases_orig = NULL;
    PyObject *tmp_class_creation_12__class_decl_dict = NULL;
    PyObject *tmp_class_creation_12__metaclass = NULL;
    PyObject *tmp_class_creation_12__prepared = NULL;
    PyObject *tmp_class_creation_13__bases = NULL;
    PyObject *tmp_class_creation_13__bases_orig = NULL;
    PyObject *tmp_class_creation_13__class_decl_dict = NULL;
    PyObject *tmp_class_creation_13__metaclass = NULL;
    PyObject *tmp_class_creation_13__prepared = NULL;
    PyObject *tmp_class_creation_14__bases = NULL;
    PyObject *tmp_class_creation_14__bases_orig = NULL;
    PyObject *tmp_class_creation_14__class_decl_dict = NULL;
    PyObject *tmp_class_creation_14__metaclass = NULL;
    PyObject *tmp_class_creation_14__prepared = NULL;
    PyObject *tmp_class_creation_15__bases = NULL;
    PyObject *tmp_class_creation_15__bases_orig = NULL;
    PyObject *tmp_class_creation_15__class_decl_dict = NULL;
    PyObject *tmp_class_creation_15__metaclass = NULL;
    PyObject *tmp_class_creation_15__prepared = NULL;
    PyObject *tmp_class_creation_16__bases = NULL;
    PyObject *tmp_class_creation_16__bases_orig = NULL;
    PyObject *tmp_class_creation_16__class_decl_dict = NULL;
    PyObject *tmp_class_creation_16__metaclass = NULL;
    PyObject *tmp_class_creation_16__prepared = NULL;
    PyObject *tmp_class_creation_17__bases = NULL;
    PyObject *tmp_class_creation_17__bases_orig = NULL;
    PyObject *tmp_class_creation_17__class_decl_dict = NULL;
    PyObject *tmp_class_creation_17__metaclass = NULL;
    PyObject *tmp_class_creation_17__prepared = NULL;
    PyObject *tmp_class_creation_18__bases = NULL;
    PyObject *tmp_class_creation_18__bases_orig = NULL;
    PyObject *tmp_class_creation_18__class_decl_dict = NULL;
    PyObject *tmp_class_creation_18__metaclass = NULL;
    PyObject *tmp_class_creation_18__prepared = NULL;
    PyObject *tmp_class_creation_19__bases = NULL;
    PyObject *tmp_class_creation_19__bases_orig = NULL;
    PyObject *tmp_class_creation_19__class_decl_dict = NULL;
    PyObject *tmp_class_creation_19__metaclass = NULL;
    PyObject *tmp_class_creation_19__prepared = NULL;
    PyObject *tmp_class_creation_1__bases = NULL;
    PyObject *tmp_class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_class_creation_1__metaclass = NULL;
    PyObject *tmp_class_creation_1__prepared = NULL;
    PyObject *tmp_class_creation_20__bases = NULL;
    PyObject *tmp_class_creation_20__bases_orig = NULL;
    PyObject *tmp_class_creation_20__class_decl_dict = NULL;
    PyObject *tmp_class_creation_20__metaclass = NULL;
    PyObject *tmp_class_creation_20__prepared = NULL;
    PyObject *tmp_class_creation_21__bases = NULL;
    PyObject *tmp_class_creation_21__bases_orig = NULL;
    PyObject *tmp_class_creation_21__class_decl_dict = NULL;
    PyObject *tmp_class_creation_21__metaclass = NULL;
    PyObject *tmp_class_creation_21__prepared = NULL;
    PyObject *tmp_class_creation_22__bases = NULL;
    PyObject *tmp_class_creation_22__bases_orig = NULL;
    PyObject *tmp_class_creation_22__class_decl_dict = NULL;
    PyObject *tmp_class_creation_22__metaclass = NULL;
    PyObject *tmp_class_creation_22__prepared = NULL;
    PyObject *tmp_class_creation_23__bases = NULL;
    PyObject *tmp_class_creation_23__bases_orig = NULL;
    PyObject *tmp_class_creation_23__class_decl_dict = NULL;
    PyObject *tmp_class_creation_23__metaclass = NULL;
    PyObject *tmp_class_creation_23__prepared = NULL;
    PyObject *tmp_class_creation_24__bases = NULL;
    PyObject *tmp_class_creation_24__bases_orig = NULL;
    PyObject *tmp_class_creation_24__class_decl_dict = NULL;
    PyObject *tmp_class_creation_24__metaclass = NULL;
    PyObject *tmp_class_creation_24__prepared = NULL;
    PyObject *tmp_class_creation_25__bases = NULL;
    PyObject *tmp_class_creation_25__bases_orig = NULL;
    PyObject *tmp_class_creation_25__class_decl_dict = NULL;
    PyObject *tmp_class_creation_25__metaclass = NULL;
    PyObject *tmp_class_creation_25__prepared = NULL;
    PyObject *tmp_class_creation_26__bases = NULL;
    PyObject *tmp_class_creation_26__bases_orig = NULL;
    PyObject *tmp_class_creation_26__class_decl_dict = NULL;
    PyObject *tmp_class_creation_26__metaclass = NULL;
    PyObject *tmp_class_creation_26__prepared = NULL;
    PyObject *tmp_class_creation_27__bases = NULL;
    PyObject *tmp_class_creation_27__bases_orig = NULL;
    PyObject *tmp_class_creation_27__class_decl_dict = NULL;
    PyObject *tmp_class_creation_27__metaclass = NULL;
    PyObject *tmp_class_creation_27__prepared = NULL;
    PyObject *tmp_class_creation_28__bases = NULL;
    PyObject *tmp_class_creation_28__bases_orig = NULL;
    PyObject *tmp_class_creation_28__class_decl_dict = NULL;
    PyObject *tmp_class_creation_28__metaclass = NULL;
    PyObject *tmp_class_creation_28__prepared = NULL;
    PyObject *tmp_class_creation_29__bases = NULL;
    PyObject *tmp_class_creation_29__bases_orig = NULL;
    PyObject *tmp_class_creation_29__class_decl_dict = NULL;
    PyObject *tmp_class_creation_29__metaclass = NULL;
    PyObject *tmp_class_creation_29__prepared = NULL;
    PyObject *tmp_class_creation_2__bases = NULL;
    PyObject *tmp_class_creation_2__bases_orig = NULL;
    PyObject *tmp_class_creation_2__class_decl_dict = NULL;
    PyObject *tmp_class_creation_2__metaclass = NULL;
    PyObject *tmp_class_creation_2__prepared = NULL;
    PyObject *tmp_class_creation_30__bases = NULL;
    PyObject *tmp_class_creation_30__bases_orig = NULL;
    PyObject *tmp_class_creation_30__class_decl_dict = NULL;
    PyObject *tmp_class_creation_30__metaclass = NULL;
    PyObject *tmp_class_creation_30__prepared = NULL;
    PyObject *tmp_class_creation_31__bases = NULL;
    PyObject *tmp_class_creation_31__bases_orig = NULL;
    PyObject *tmp_class_creation_31__class_decl_dict = NULL;
    PyObject *tmp_class_creation_31__metaclass = NULL;
    PyObject *tmp_class_creation_31__prepared = NULL;
    PyObject *tmp_class_creation_32__bases = NULL;
    PyObject *tmp_class_creation_32__bases_orig = NULL;
    PyObject *tmp_class_creation_32__class_decl_dict = NULL;
    PyObject *tmp_class_creation_32__metaclass = NULL;
    PyObject *tmp_class_creation_32__prepared = NULL;
    PyObject *tmp_class_creation_33__bases = NULL;
    PyObject *tmp_class_creation_33__bases_orig = NULL;
    PyObject *tmp_class_creation_33__class_decl_dict = NULL;
    PyObject *tmp_class_creation_33__metaclass = NULL;
    PyObject *tmp_class_creation_33__prepared = NULL;
    PyObject *tmp_class_creation_34__bases = NULL;
    PyObject *tmp_class_creation_34__bases_orig = NULL;
    PyObject *tmp_class_creation_34__class_decl_dict = NULL;
    PyObject *tmp_class_creation_34__metaclass = NULL;
    PyObject *tmp_class_creation_34__prepared = NULL;
    PyObject *tmp_class_creation_35__bases = NULL;
    PyObject *tmp_class_creation_35__bases_orig = NULL;
    PyObject *tmp_class_creation_35__class_decl_dict = NULL;
    PyObject *tmp_class_creation_35__metaclass = NULL;
    PyObject *tmp_class_creation_35__prepared = NULL;
    PyObject *tmp_class_creation_36__bases = NULL;
    PyObject *tmp_class_creation_36__bases_orig = NULL;
    PyObject *tmp_class_creation_36__class_decl_dict = NULL;
    PyObject *tmp_class_creation_36__metaclass = NULL;
    PyObject *tmp_class_creation_36__prepared = NULL;
    PyObject *tmp_class_creation_37__bases = NULL;
    PyObject *tmp_class_creation_37__bases_orig = NULL;
    PyObject *tmp_class_creation_37__class_decl_dict = NULL;
    PyObject *tmp_class_creation_37__metaclass = NULL;
    PyObject *tmp_class_creation_37__prepared = NULL;
    PyObject *tmp_class_creation_38__bases = NULL;
    PyObject *tmp_class_creation_38__bases_orig = NULL;
    PyObject *tmp_class_creation_38__class_decl_dict = NULL;
    PyObject *tmp_class_creation_38__metaclass = NULL;
    PyObject *tmp_class_creation_38__prepared = NULL;
    PyObject *tmp_class_creation_39__bases = NULL;
    PyObject *tmp_class_creation_39__bases_orig = NULL;
    PyObject *tmp_class_creation_39__class_decl_dict = NULL;
    PyObject *tmp_class_creation_39__metaclass = NULL;
    PyObject *tmp_class_creation_39__prepared = NULL;
    PyObject *tmp_class_creation_3__bases = NULL;
    PyObject *tmp_class_creation_3__bases_orig = NULL;
    PyObject *tmp_class_creation_3__class_decl_dict = NULL;
    PyObject *tmp_class_creation_3__metaclass = NULL;
    PyObject *tmp_class_creation_3__prepared = NULL;
    PyObject *tmp_class_creation_40__bases = NULL;
    PyObject *tmp_class_creation_40__bases_orig = NULL;
    PyObject *tmp_class_creation_40__class_decl_dict = NULL;
    PyObject *tmp_class_creation_40__metaclass = NULL;
    PyObject *tmp_class_creation_40__prepared = NULL;
    PyObject *tmp_class_creation_41__bases = NULL;
    PyObject *tmp_class_creation_41__bases_orig = NULL;
    PyObject *tmp_class_creation_41__class_decl_dict = NULL;
    PyObject *tmp_class_creation_41__metaclass = NULL;
    PyObject *tmp_class_creation_41__prepared = NULL;
    PyObject *tmp_class_creation_42__bases = NULL;
    PyObject *tmp_class_creation_42__bases_orig = NULL;
    PyObject *tmp_class_creation_42__class_decl_dict = NULL;
    PyObject *tmp_class_creation_42__metaclass = NULL;
    PyObject *tmp_class_creation_42__prepared = NULL;
    PyObject *tmp_class_creation_43__bases = NULL;
    PyObject *tmp_class_creation_43__bases_orig = NULL;
    PyObject *tmp_class_creation_43__class_decl_dict = NULL;
    PyObject *tmp_class_creation_43__metaclass = NULL;
    PyObject *tmp_class_creation_43__prepared = NULL;
    PyObject *tmp_class_creation_44__bases = NULL;
    PyObject *tmp_class_creation_44__bases_orig = NULL;
    PyObject *tmp_class_creation_44__class_decl_dict = NULL;
    PyObject *tmp_class_creation_44__metaclass = NULL;
    PyObject *tmp_class_creation_44__prepared = NULL;
    PyObject *tmp_class_creation_45__bases = NULL;
    PyObject *tmp_class_creation_45__class_decl_dict = NULL;
    PyObject *tmp_class_creation_45__metaclass = NULL;
    PyObject *tmp_class_creation_45__prepared = NULL;
    PyObject *tmp_class_creation_46__bases = NULL;
    PyObject *tmp_class_creation_46__bases_orig = NULL;
    PyObject *tmp_class_creation_46__class_decl_dict = NULL;
    PyObject *tmp_class_creation_46__metaclass = NULL;
    PyObject *tmp_class_creation_46__prepared = NULL;
    PyObject *tmp_class_creation_47__bases = NULL;
    PyObject *tmp_class_creation_47__bases_orig = NULL;
    PyObject *tmp_class_creation_47__class_decl_dict = NULL;
    PyObject *tmp_class_creation_47__metaclass = NULL;
    PyObject *tmp_class_creation_47__prepared = NULL;
    PyObject *tmp_class_creation_48__bases = NULL;
    PyObject *tmp_class_creation_48__bases_orig = NULL;
    PyObject *tmp_class_creation_48__class_decl_dict = NULL;
    PyObject *tmp_class_creation_48__metaclass = NULL;
    PyObject *tmp_class_creation_48__prepared = NULL;
    PyObject *tmp_class_creation_49__bases = NULL;
    PyObject *tmp_class_creation_49__bases_orig = NULL;
    PyObject *tmp_class_creation_49__class_decl_dict = NULL;
    PyObject *tmp_class_creation_49__metaclass = NULL;
    PyObject *tmp_class_creation_49__prepared = NULL;
    PyObject *tmp_class_creation_4__bases = NULL;
    PyObject *tmp_class_creation_4__bases_orig = NULL;
    PyObject *tmp_class_creation_4__class_decl_dict = NULL;
    PyObject *tmp_class_creation_4__metaclass = NULL;
    PyObject *tmp_class_creation_4__prepared = NULL;
    PyObject *tmp_class_creation_50__bases = NULL;
    PyObject *tmp_class_creation_50__bases_orig = NULL;
    PyObject *tmp_class_creation_50__class_decl_dict = NULL;
    PyObject *tmp_class_creation_50__metaclass = NULL;
    PyObject *tmp_class_creation_50__prepared = NULL;
    PyObject *tmp_class_creation_51__bases = NULL;
    PyObject *tmp_class_creation_51__bases_orig = NULL;
    PyObject *tmp_class_creation_51__class_decl_dict = NULL;
    PyObject *tmp_class_creation_51__metaclass = NULL;
    PyObject *tmp_class_creation_51__prepared = NULL;
    PyObject *tmp_class_creation_52__bases = NULL;
    PyObject *tmp_class_creation_52__bases_orig = NULL;
    PyObject *tmp_class_creation_52__class_decl_dict = NULL;
    PyObject *tmp_class_creation_52__metaclass = NULL;
    PyObject *tmp_class_creation_52__prepared = NULL;
    PyObject *tmp_class_creation_53__bases = NULL;
    PyObject *tmp_class_creation_53__bases_orig = NULL;
    PyObject *tmp_class_creation_53__class_decl_dict = NULL;
    PyObject *tmp_class_creation_53__metaclass = NULL;
    PyObject *tmp_class_creation_53__prepared = NULL;
    PyObject *tmp_class_creation_54__bases = NULL;
    PyObject *tmp_class_creation_54__bases_orig = NULL;
    PyObject *tmp_class_creation_54__class_decl_dict = NULL;
    PyObject *tmp_class_creation_54__metaclass = NULL;
    PyObject *tmp_class_creation_54__prepared = NULL;
    PyObject *tmp_class_creation_55__bases = NULL;
    PyObject *tmp_class_creation_55__bases_orig = NULL;
    PyObject *tmp_class_creation_55__class_decl_dict = NULL;
    PyObject *tmp_class_creation_55__metaclass = NULL;
    PyObject *tmp_class_creation_55__prepared = NULL;
    PyObject *tmp_class_creation_56__bases = NULL;
    PyObject *tmp_class_creation_56__bases_orig = NULL;
    PyObject *tmp_class_creation_56__class_decl_dict = NULL;
    PyObject *tmp_class_creation_56__metaclass = NULL;
    PyObject *tmp_class_creation_56__prepared = NULL;
    PyObject *tmp_class_creation_57__bases = NULL;
    PyObject *tmp_class_creation_57__bases_orig = NULL;
    PyObject *tmp_class_creation_57__class_decl_dict = NULL;
    PyObject *tmp_class_creation_57__metaclass = NULL;
    PyObject *tmp_class_creation_57__prepared = NULL;
    PyObject *tmp_class_creation_58__bases = NULL;
    PyObject *tmp_class_creation_58__bases_orig = NULL;
    PyObject *tmp_class_creation_58__class_decl_dict = NULL;
    PyObject *tmp_class_creation_58__metaclass = NULL;
    PyObject *tmp_class_creation_58__prepared = NULL;
    PyObject *tmp_class_creation_59__bases = NULL;
    PyObject *tmp_class_creation_59__bases_orig = NULL;
    PyObject *tmp_class_creation_59__class_decl_dict = NULL;
    PyObject *tmp_class_creation_59__metaclass = NULL;
    PyObject *tmp_class_creation_59__prepared = NULL;
    PyObject *tmp_class_creation_5__bases = NULL;
    PyObject *tmp_class_creation_5__bases_orig = NULL;
    PyObject *tmp_class_creation_5__class_decl_dict = NULL;
    PyObject *tmp_class_creation_5__metaclass = NULL;
    PyObject *tmp_class_creation_5__prepared = NULL;
    PyObject *tmp_class_creation_60__bases = NULL;
    PyObject *tmp_class_creation_60__bases_orig = NULL;
    PyObject *tmp_class_creation_60__class_decl_dict = NULL;
    PyObject *tmp_class_creation_60__metaclass = NULL;
    PyObject *tmp_class_creation_60__prepared = NULL;
    PyObject *tmp_class_creation_61__bases = NULL;
    PyObject *tmp_class_creation_61__bases_orig = NULL;
    PyObject *tmp_class_creation_61__class_decl_dict = NULL;
    PyObject *tmp_class_creation_61__metaclass = NULL;
    PyObject *tmp_class_creation_61__prepared = NULL;
    PyObject *tmp_class_creation_62__bases = NULL;
    PyObject *tmp_class_creation_62__bases_orig = NULL;
    PyObject *tmp_class_creation_62__class_decl_dict = NULL;
    PyObject *tmp_class_creation_62__metaclass = NULL;
    PyObject *tmp_class_creation_62__prepared = NULL;
    PyObject *tmp_class_creation_63__bases = NULL;
    PyObject *tmp_class_creation_63__bases_orig = NULL;
    PyObject *tmp_class_creation_63__class_decl_dict = NULL;
    PyObject *tmp_class_creation_63__metaclass = NULL;
    PyObject *tmp_class_creation_63__prepared = NULL;
    PyObject *tmp_class_creation_64__bases = NULL;
    PyObject *tmp_class_creation_64__bases_orig = NULL;
    PyObject *tmp_class_creation_64__class_decl_dict = NULL;
    PyObject *tmp_class_creation_64__metaclass = NULL;
    PyObject *tmp_class_creation_64__prepared = NULL;
    PyObject *tmp_class_creation_65__bases = NULL;
    PyObject *tmp_class_creation_65__bases_orig = NULL;
    PyObject *tmp_class_creation_65__class_decl_dict = NULL;
    PyObject *tmp_class_creation_65__metaclass = NULL;
    PyObject *tmp_class_creation_65__prepared = NULL;
    PyObject *tmp_class_creation_66__bases = NULL;
    PyObject *tmp_class_creation_66__bases_orig = NULL;
    PyObject *tmp_class_creation_66__class_decl_dict = NULL;
    PyObject *tmp_class_creation_66__metaclass = NULL;
    PyObject *tmp_class_creation_66__prepared = NULL;
    PyObject *tmp_class_creation_67__bases = NULL;
    PyObject *tmp_class_creation_67__bases_orig = NULL;
    PyObject *tmp_class_creation_67__class_decl_dict = NULL;
    PyObject *tmp_class_creation_67__metaclass = NULL;
    PyObject *tmp_class_creation_67__prepared = NULL;
    PyObject *tmp_class_creation_68__bases = NULL;
    PyObject *tmp_class_creation_68__bases_orig = NULL;
    PyObject *tmp_class_creation_68__class_decl_dict = NULL;
    PyObject *tmp_class_creation_68__metaclass = NULL;
    PyObject *tmp_class_creation_68__prepared = NULL;
    PyObject *tmp_class_creation_69__bases = NULL;
    PyObject *tmp_class_creation_69__bases_orig = NULL;
    PyObject *tmp_class_creation_69__class_decl_dict = NULL;
    PyObject *tmp_class_creation_69__metaclass = NULL;
    PyObject *tmp_class_creation_69__prepared = NULL;
    PyObject *tmp_class_creation_6__bases = NULL;
    PyObject *tmp_class_creation_6__bases_orig = NULL;
    PyObject *tmp_class_creation_6__class_decl_dict = NULL;
    PyObject *tmp_class_creation_6__metaclass = NULL;
    PyObject *tmp_class_creation_6__prepared = NULL;
    PyObject *tmp_class_creation_70__bases = NULL;
    PyObject *tmp_class_creation_70__bases_orig = NULL;
    PyObject *tmp_class_creation_70__class_decl_dict = NULL;
    PyObject *tmp_class_creation_70__metaclass = NULL;
    PyObject *tmp_class_creation_70__prepared = NULL;
    PyObject *tmp_class_creation_71__bases = NULL;
    PyObject *tmp_class_creation_71__bases_orig = NULL;
    PyObject *tmp_class_creation_71__class_decl_dict = NULL;
    PyObject *tmp_class_creation_71__metaclass = NULL;
    PyObject *tmp_class_creation_71__prepared = NULL;
    PyObject *tmp_class_creation_72__bases = NULL;
    PyObject *tmp_class_creation_72__class_decl_dict = NULL;
    PyObject *tmp_class_creation_72__metaclass = NULL;
    PyObject *tmp_class_creation_72__prepared = NULL;
    PyObject *tmp_class_creation_73__bases = NULL;
    PyObject *tmp_class_creation_73__bases_orig = NULL;
    PyObject *tmp_class_creation_73__class_decl_dict = NULL;
    PyObject *tmp_class_creation_73__metaclass = NULL;
    PyObject *tmp_class_creation_73__prepared = NULL;
    PyObject *tmp_class_creation_74__bases = NULL;
    PyObject *tmp_class_creation_74__bases_orig = NULL;
    PyObject *tmp_class_creation_74__class_decl_dict = NULL;
    PyObject *tmp_class_creation_74__metaclass = NULL;
    PyObject *tmp_class_creation_74__prepared = NULL;
    PyObject *tmp_class_creation_75__bases = NULL;
    PyObject *tmp_class_creation_75__bases_orig = NULL;
    PyObject *tmp_class_creation_75__class_decl_dict = NULL;
    PyObject *tmp_class_creation_75__metaclass = NULL;
    PyObject *tmp_class_creation_75__prepared = NULL;
    PyObject *tmp_class_creation_76__bases = NULL;
    PyObject *tmp_class_creation_76__bases_orig = NULL;
    PyObject *tmp_class_creation_76__class_decl_dict = NULL;
    PyObject *tmp_class_creation_76__metaclass = NULL;
    PyObject *tmp_class_creation_76__prepared = NULL;
    PyObject *tmp_class_creation_77__bases = NULL;
    PyObject *tmp_class_creation_77__bases_orig = NULL;
    PyObject *tmp_class_creation_77__class_decl_dict = NULL;
    PyObject *tmp_class_creation_77__metaclass = NULL;
    PyObject *tmp_class_creation_77__prepared = NULL;
    PyObject *tmp_class_creation_78__bases = NULL;
    PyObject *tmp_class_creation_78__bases_orig = NULL;
    PyObject *tmp_class_creation_78__class_decl_dict = NULL;
    PyObject *tmp_class_creation_78__metaclass = NULL;
    PyObject *tmp_class_creation_78__prepared = NULL;
    PyObject *tmp_class_creation_7__bases = NULL;
    PyObject *tmp_class_creation_7__bases_orig = NULL;
    PyObject *tmp_class_creation_7__class_decl_dict = NULL;
    PyObject *tmp_class_creation_7__metaclass = NULL;
    PyObject *tmp_class_creation_7__prepared = NULL;
    PyObject *tmp_class_creation_8__bases = NULL;
    PyObject *tmp_class_creation_8__bases_orig = NULL;
    PyObject *tmp_class_creation_8__class_decl_dict = NULL;
    PyObject *tmp_class_creation_8__metaclass = NULL;
    PyObject *tmp_class_creation_8__prepared = NULL;
    PyObject *tmp_class_creation_9__bases = NULL;
    PyObject *tmp_class_creation_9__bases_orig = NULL;
    PyObject *tmp_class_creation_9__class_decl_dict = NULL;
    PyObject *tmp_class_creation_9__metaclass = NULL;
    PyObject *tmp_class_creation_9__prepared = NULL;
    struct Nuitka_FrameObject *frame_a719a31d518bc79422e5dc1f94c073b4;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_dictdel_dict;
    PyObject *tmp_dictdel_key;
    PyObject *locals_botocore$exceptions$$$class__1_BotoCoreError_31 = NULL;
    PyObject *tmp_dictset_value;
    struct Nuitka_FrameObject *frame_565641311b984b0e245ea11a93daaedf_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    static struct Nuitka_FrameObject *cache_frame_565641311b984b0e245ea11a93daaedf_2 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *locals_botocore$exceptions$$$class__2_DataNotFoundError_48 = NULL;
    struct Nuitka_FrameObject *frame_274c2935eb7ac086612f1216debaa02b_3;
    NUITKA_MAY_BE_UNUSED char const *type_description_3 = NULL;
    static struct Nuitka_FrameObject *cache_frame_274c2935eb7ac086612f1216debaa02b_3 = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *locals_botocore$exceptions$$$class__3_UnknownServiceError_57 = NULL;
    struct Nuitka_FrameObject *frame_0b9bc0f27a79d49074a1e90322b56e33_4;
    NUITKA_MAY_BE_UNUSED char const *type_description_4 = NULL;
    static struct Nuitka_FrameObject *cache_frame_0b9bc0f27a79d49074a1e90322b56e33_4 = NULL;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *locals_botocore$exceptions$$$class__4_ApiVersionNotFoundError_68 = NULL;
    struct Nuitka_FrameObject *frame_e79d616026fdbe9706fc86f8a0531faf_5;
    NUITKA_MAY_BE_UNUSED char const *type_description_5 = NULL;
    static struct Nuitka_FrameObject *cache_frame_e79d616026fdbe9706fc86f8a0531faf_5 = NULL;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *locals_botocore$exceptions$$$class__5_HTTPClientError_79 = NULL;
    struct Nuitka_FrameObject *frame_e0c1eb30f6a58291cffa6e7866165b5b_6;
    NUITKA_MAY_BE_UNUSED char const *type_description_6 = NULL;
    static struct Nuitka_FrameObject *cache_frame_e0c1eb30f6a58291cffa6e7866165b5b_6 = NULL;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;
    PyObject *locals_botocore$exceptions$$$class__6_ConnectionError_91 = NULL;
    struct Nuitka_FrameObject *frame_0d7cc9b130677721cecfda0a425c2897_7;
    NUITKA_MAY_BE_UNUSED char const *type_description_7 = NULL;
    static struct Nuitka_FrameObject *cache_frame_0d7cc9b130677721cecfda0a425c2897_7 = NULL;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_16;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_17;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_18;
    PyObject *locals_botocore$exceptions$$$class__7_InvalidIMDSEndpointError_95 = NULL;
    struct Nuitka_FrameObject *frame_b0391e2f7c2f48999b6d5c484b23452b_8;
    NUITKA_MAY_BE_UNUSED char const *type_description_8 = NULL;
    static struct Nuitka_FrameObject *cache_frame_b0391e2f7c2f48999b6d5c484b23452b_8 = NULL;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_19;
    PyObject *exception_keeper_type_20;
    PyObject *exception_keeper_value_20;
    PyTracebackObject *exception_keeper_tb_20;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_20;
    PyObject *exception_keeper_type_21;
    PyObject *exception_keeper_value_21;
    PyTracebackObject *exception_keeper_tb_21;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_21;
    PyObject *locals_botocore$exceptions$$$class__8_EndpointConnectionError_99 = NULL;
    struct Nuitka_FrameObject *frame_7cdff9186afb17bbc5764d8b30246182_9;
    NUITKA_MAY_BE_UNUSED char const *type_description_9 = NULL;
    static struct Nuitka_FrameObject *cache_frame_7cdff9186afb17bbc5764d8b30246182_9 = NULL;
    PyObject *exception_keeper_type_22;
    PyObject *exception_keeper_value_22;
    PyTracebackObject *exception_keeper_tb_22;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_22;
    PyObject *exception_keeper_type_23;
    PyObject *exception_keeper_value_23;
    PyTracebackObject *exception_keeper_tb_23;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_23;
    PyObject *exception_keeper_type_24;
    PyObject *exception_keeper_value_24;
    PyTracebackObject *exception_keeper_tb_24;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_24;
    PyObject *locals_botocore$exceptions$$$class__9_SSLError_103 = NULL;
    struct Nuitka_FrameObject *frame_026b7cc019bbc471dff47ad64f6c4beb_10;
    NUITKA_MAY_BE_UNUSED char const *type_description_10 = NULL;
    static struct Nuitka_FrameObject *cache_frame_026b7cc019bbc471dff47ad64f6c4beb_10 = NULL;
    PyObject *exception_keeper_type_25;
    PyObject *exception_keeper_value_25;
    PyTracebackObject *exception_keeper_tb_25;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_25;
    PyObject *exception_keeper_type_26;
    PyObject *exception_keeper_value_26;
    PyTracebackObject *exception_keeper_tb_26;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_26;
    PyObject *exception_keeper_type_27;
    PyObject *exception_keeper_value_27;
    PyTracebackObject *exception_keeper_tb_27;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_27;
    PyObject *locals_botocore$exceptions$$$class__10_ConnectionClosedError_107 = NULL;
    struct Nuitka_FrameObject *frame_4e4a7642fc8c4fc4ee507673200fe6ab_11;
    NUITKA_MAY_BE_UNUSED char const *type_description_11 = NULL;
    static struct Nuitka_FrameObject *cache_frame_4e4a7642fc8c4fc4ee507673200fe6ab_11 = NULL;
    PyObject *exception_keeper_type_28;
    PyObject *exception_keeper_value_28;
    PyTracebackObject *exception_keeper_tb_28;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_28;
    PyObject *exception_keeper_type_29;
    PyObject *exception_keeper_value_29;
    PyTracebackObject *exception_keeper_tb_29;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_29;
    PyObject *exception_keeper_type_30;
    PyObject *exception_keeper_value_30;
    PyTracebackObject *exception_keeper_tb_30;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_30;
    PyObject *locals_botocore$exceptions$$$class__11_ReadTimeoutError_114 = NULL;
    struct Nuitka_FrameObject *frame_7764ed8434bf45842d38a7d7762eaea2_12;
    NUITKA_MAY_BE_UNUSED char const *type_description_12 = NULL;
    static struct Nuitka_FrameObject *cache_frame_7764ed8434bf45842d38a7d7762eaea2_12 = NULL;
    PyObject *exception_keeper_type_31;
    PyObject *exception_keeper_value_31;
    PyTracebackObject *exception_keeper_tb_31;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_31;
    PyObject *exception_keeper_type_32;
    PyObject *exception_keeper_value_32;
    PyTracebackObject *exception_keeper_tb_32;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_32;
    PyObject *exception_keeper_type_33;
    PyObject *exception_keeper_value_33;
    PyTracebackObject *exception_keeper_tb_33;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_33;
    PyObject *locals_botocore$exceptions$$$class__12_ConnectTimeoutError_118 = NULL;
    struct Nuitka_FrameObject *frame_3814404a074f76c9e6bc45833e5f774f_13;
    NUITKA_MAY_BE_UNUSED char const *type_description_13 = NULL;
    static struct Nuitka_FrameObject *cache_frame_3814404a074f76c9e6bc45833e5f774f_13 = NULL;
    PyObject *exception_keeper_type_34;
    PyObject *exception_keeper_value_34;
    PyTracebackObject *exception_keeper_tb_34;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_34;
    PyObject *exception_keeper_type_35;
    PyObject *exception_keeper_value_35;
    PyTracebackObject *exception_keeper_tb_35;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_35;
    PyObject *exception_keeper_type_36;
    PyObject *exception_keeper_value_36;
    PyTracebackObject *exception_keeper_tb_36;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_36;
    PyObject *locals_botocore$exceptions$$$class__13_ProxyConnectionError_122 = NULL;
    struct Nuitka_FrameObject *frame_2f59c047cc38f8b4f1d9dcb8d282b2fe_14;
    NUITKA_MAY_BE_UNUSED char const *type_description_14 = NULL;
    static struct Nuitka_FrameObject *cache_frame_2f59c047cc38f8b4f1d9dcb8d282b2fe_14 = NULL;
    PyObject *exception_keeper_type_37;
    PyObject *exception_keeper_value_37;
    PyTracebackObject *exception_keeper_tb_37;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_37;
    PyObject *exception_keeper_type_38;
    PyObject *exception_keeper_value_38;
    PyTracebackObject *exception_keeper_tb_38;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_38;
    PyObject *exception_keeper_type_39;
    PyObject *exception_keeper_value_39;
    PyTracebackObject *exception_keeper_tb_39;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_39;
    PyObject *locals_botocore$exceptions$$$class__14_NoCredentialsError_126 = NULL;
    struct Nuitka_FrameObject *frame_0c4727d4a3997960a50092d98b12e5c1_15;
    NUITKA_MAY_BE_UNUSED char const *type_description_15 = NULL;
    static struct Nuitka_FrameObject *cache_frame_0c4727d4a3997960a50092d98b12e5c1_15 = NULL;
    PyObject *exception_keeper_type_40;
    PyObject *exception_keeper_value_40;
    PyTracebackObject *exception_keeper_tb_40;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_40;
    PyObject *exception_keeper_type_41;
    PyObject *exception_keeper_value_41;
    PyTracebackObject *exception_keeper_tb_41;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_41;
    PyObject *exception_keeper_type_42;
    PyObject *exception_keeper_value_42;
    PyTracebackObject *exception_keeper_tb_42;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_42;
    PyObject *locals_botocore$exceptions$$$class__15_PartialCredentialsError_133 = NULL;
    struct Nuitka_FrameObject *frame_abe31f64c1d501b6a197fba4182155ff_16;
    NUITKA_MAY_BE_UNUSED char const *type_description_16 = NULL;
    static struct Nuitka_FrameObject *cache_frame_abe31f64c1d501b6a197fba4182155ff_16 = NULL;
    PyObject *exception_keeper_type_43;
    PyObject *exception_keeper_value_43;
    PyTracebackObject *exception_keeper_tb_43;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_43;
    PyObject *exception_keeper_type_44;
    PyObject *exception_keeper_value_44;
    PyTracebackObject *exception_keeper_tb_44;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_44;
    PyObject *exception_keeper_type_45;
    PyObject *exception_keeper_value_45;
    PyTracebackObject *exception_keeper_tb_45;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_45;
    PyObject *locals_botocore$exceptions$$$class__16_CredentialRetrievalError_143 = NULL;
    struct Nuitka_FrameObject *frame_cae30ac246abe2402fb8725f07a2b8a2_17;
    NUITKA_MAY_BE_UNUSED char const *type_description_17 = NULL;
    static struct Nuitka_FrameObject *cache_frame_cae30ac246abe2402fb8725f07a2b8a2_17 = NULL;
    PyObject *exception_keeper_type_46;
    PyObject *exception_keeper_value_46;
    PyTracebackObject *exception_keeper_tb_46;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_46;
    PyObject *exception_keeper_type_47;
    PyObject *exception_keeper_value_47;
    PyTracebackObject *exception_keeper_tb_47;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_47;
    PyObject *exception_keeper_type_48;
    PyObject *exception_keeper_value_48;
    PyTracebackObject *exception_keeper_tb_48;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_48;
    PyObject *locals_botocore$exceptions$$$class__17_UnknownSignatureVersionError_155 = NULL;
    struct Nuitka_FrameObject *frame_506aa82595a22b980b6416683315e6eb_18;
    NUITKA_MAY_BE_UNUSED char const *type_description_18 = NULL;
    static struct Nuitka_FrameObject *cache_frame_506aa82595a22b980b6416683315e6eb_18 = NULL;
    PyObject *exception_keeper_type_49;
    PyObject *exception_keeper_value_49;
    PyTracebackObject *exception_keeper_tb_49;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_49;
    PyObject *exception_keeper_type_50;
    PyObject *exception_keeper_value_50;
    PyTracebackObject *exception_keeper_tb_50;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_50;
    PyObject *exception_keeper_type_51;
    PyObject *exception_keeper_value_51;
    PyTracebackObject *exception_keeper_tb_51;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_51;
    PyObject *locals_botocore$exceptions$$$class__18_ServiceNotInRegionError_164 = NULL;
    struct Nuitka_FrameObject *frame_ee4ca0ea30836de54d303548a4d69083_19;
    NUITKA_MAY_BE_UNUSED char const *type_description_19 = NULL;
    static struct Nuitka_FrameObject *cache_frame_ee4ca0ea30836de54d303548a4d69083_19 = NULL;
    PyObject *exception_keeper_type_52;
    PyObject *exception_keeper_value_52;
    PyTracebackObject *exception_keeper_tb_52;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_52;
    PyObject *exception_keeper_type_53;
    PyObject *exception_keeper_value_53;
    PyTracebackObject *exception_keeper_tb_53;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_53;
    PyObject *exception_keeper_type_54;
    PyObject *exception_keeper_value_54;
    PyTracebackObject *exception_keeper_tb_54;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_54;
    PyObject *locals_botocore$exceptions$$$class__19_BaseEndpointResolverError_174 = NULL;
    PyObject *exception_keeper_type_55;
    PyObject *exception_keeper_value_55;
    PyTracebackObject *exception_keeper_tb_55;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_55;
    PyObject *exception_keeper_type_56;
    PyObject *exception_keeper_value_56;
    PyTracebackObject *exception_keeper_tb_56;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_56;
    PyObject *exception_keeper_type_57;
    PyObject *exception_keeper_value_57;
    PyTracebackObject *exception_keeper_tb_57;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_57;
    PyObject *locals_botocore$exceptions$$$class__20_NoRegionError_184 = NULL;
    struct Nuitka_FrameObject *frame_a6e77d896ff602bfdecf11f0c85c65bb_20;
    NUITKA_MAY_BE_UNUSED char const *type_description_20 = NULL;
    static struct Nuitka_FrameObject *cache_frame_a6e77d896ff602bfdecf11f0c85c65bb_20 = NULL;
    PyObject *exception_keeper_type_58;
    PyObject *exception_keeper_value_58;
    PyTracebackObject *exception_keeper_tb_58;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_58;
    PyObject *exception_keeper_type_59;
    PyObject *exception_keeper_value_59;
    PyTracebackObject *exception_keeper_tb_59;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_59;
    PyObject *exception_keeper_type_60;
    PyObject *exception_keeper_value_60;
    PyTracebackObject *exception_keeper_tb_60;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_60;
    PyObject *locals_botocore$exceptions$$$class__21_UnknownEndpointError_189 = NULL;
    struct Nuitka_FrameObject *frame_2331c9ecdced23e8130a4fb9a500fd55_21;
    NUITKA_MAY_BE_UNUSED char const *type_description_21 = NULL;
    static struct Nuitka_FrameObject *cache_frame_2331c9ecdced23e8130a4fb9a500fd55_21 = NULL;
    PyObject *exception_keeper_type_61;
    PyObject *exception_keeper_value_61;
    PyTracebackObject *exception_keeper_tb_61;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_61;
    PyObject *exception_keeper_type_62;
    PyObject *exception_keeper_value_62;
    PyTracebackObject *exception_keeper_tb_62;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_62;
    PyObject *exception_keeper_type_63;
    PyObject *exception_keeper_value_63;
    PyTracebackObject *exception_keeper_tb_63;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_63;
    PyObject *locals_botocore$exceptions$$$class__22_ProfileNotFound_201 = NULL;
    struct Nuitka_FrameObject *frame_936558efffed40b305e47c65f896b9a6_22;
    NUITKA_MAY_BE_UNUSED char const *type_description_22 = NULL;
    static struct Nuitka_FrameObject *cache_frame_936558efffed40b305e47c65f896b9a6_22 = NULL;
    PyObject *exception_keeper_type_64;
    PyObject *exception_keeper_value_64;
    PyTracebackObject *exception_keeper_tb_64;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_64;
    PyObject *exception_keeper_type_65;
    PyObject *exception_keeper_value_65;
    PyTracebackObject *exception_keeper_tb_65;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_65;
    PyObject *exception_keeper_type_66;
    PyObject *exception_keeper_value_66;
    PyTracebackObject *exception_keeper_tb_66;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_66;
    PyObject *locals_botocore$exceptions$$$class__23_ConfigParseError_211 = NULL;
    struct Nuitka_FrameObject *frame_4ffb0b721c8e7f787404628028064e6a_23;
    NUITKA_MAY_BE_UNUSED char const *type_description_23 = NULL;
    static struct Nuitka_FrameObject *cache_frame_4ffb0b721c8e7f787404628028064e6a_23 = NULL;
    PyObject *exception_keeper_type_67;
    PyObject *exception_keeper_value_67;
    PyTracebackObject *exception_keeper_tb_67;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_67;
    PyObject *exception_keeper_type_68;
    PyObject *exception_keeper_value_68;
    PyTracebackObject *exception_keeper_tb_68;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_68;
    PyObject *exception_keeper_type_69;
    PyObject *exception_keeper_value_69;
    PyTracebackObject *exception_keeper_tb_69;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_69;
    PyObject *locals_botocore$exceptions$$$class__24_ConfigNotFound_220 = NULL;
    struct Nuitka_FrameObject *frame_651722d482c771cab792be0250808f51_24;
    NUITKA_MAY_BE_UNUSED char const *type_description_24 = NULL;
    static struct Nuitka_FrameObject *cache_frame_651722d482c771cab792be0250808f51_24 = NULL;
    PyObject *exception_keeper_type_70;
    PyObject *exception_keeper_value_70;
    PyTracebackObject *exception_keeper_tb_70;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_70;
    PyObject *exception_keeper_type_71;
    PyObject *exception_keeper_value_71;
    PyTracebackObject *exception_keeper_tb_71;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_71;
    PyObject *exception_keeper_type_72;
    PyObject *exception_keeper_value_72;
    PyTracebackObject *exception_keeper_tb_72;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_72;
    PyObject *locals_botocore$exceptions$$$class__25_MissingParametersError_229 = NULL;
    struct Nuitka_FrameObject *frame_0125e6c19d9a9f06c4f9f829f62b8615_25;
    NUITKA_MAY_BE_UNUSED char const *type_description_25 = NULL;
    static struct Nuitka_FrameObject *cache_frame_0125e6c19d9a9f06c4f9f829f62b8615_25 = NULL;
    PyObject *exception_keeper_type_73;
    PyObject *exception_keeper_value_73;
    PyTracebackObject *exception_keeper_tb_73;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_73;
    PyObject *exception_keeper_type_74;
    PyObject *exception_keeper_value_74;
    PyTracebackObject *exception_keeper_tb_74;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_74;
    PyObject *exception_keeper_type_75;
    PyObject *exception_keeper_value_75;
    PyTracebackObject *exception_keeper_tb_75;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_75;
    PyObject *locals_botocore$exceptions$$$class__26_ValidationError_244 = NULL;
    struct Nuitka_FrameObject *frame_16dddd152cbad7ef4876d9078fe5ce82_26;
    NUITKA_MAY_BE_UNUSED char const *type_description_26 = NULL;
    static struct Nuitka_FrameObject *cache_frame_16dddd152cbad7ef4876d9078fe5ce82_26 = NULL;
    PyObject *exception_keeper_type_76;
    PyObject *exception_keeper_value_76;
    PyTracebackObject *exception_keeper_tb_76;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_76;
    PyObject *exception_keeper_type_77;
    PyObject *exception_keeper_value_77;
    PyTracebackObject *exception_keeper_tb_77;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_77;
    PyObject *exception_keeper_type_78;
    PyObject *exception_keeper_value_78;
    PyTracebackObject *exception_keeper_tb_78;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_78;
    PyObject *locals_botocore$exceptions$$$class__27_ParamValidationError_259 = NULL;
    struct Nuitka_FrameObject *frame_c5d60c00d3cd6062b910619e1719f76a_27;
    NUITKA_MAY_BE_UNUSED char const *type_description_27 = NULL;
    static struct Nuitka_FrameObject *cache_frame_c5d60c00d3cd6062b910619e1719f76a_27 = NULL;
    PyObject *exception_keeper_type_79;
    PyObject *exception_keeper_value_79;
    PyTracebackObject *exception_keeper_tb_79;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_79;
    PyObject *exception_keeper_type_80;
    PyObject *exception_keeper_value_80;
    PyTracebackObject *exception_keeper_tb_80;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_80;
    PyObject *exception_keeper_type_81;
    PyObject *exception_keeper_value_81;
    PyTracebackObject *exception_keeper_tb_81;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_81;
    PyObject *locals_botocore$exceptions$$$class__28_UnknownKeyError_266 = NULL;
    struct Nuitka_FrameObject *frame_bf1a94ba48b83b32a393f271129dd85f_28;
    NUITKA_MAY_BE_UNUSED char const *type_description_28 = NULL;
    static struct Nuitka_FrameObject *cache_frame_bf1a94ba48b83b32a393f271129dd85f_28 = NULL;
    PyObject *exception_keeper_type_82;
    PyObject *exception_keeper_value_82;
    PyTracebackObject *exception_keeper_tb_82;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_82;
    PyObject *exception_keeper_type_83;
    PyObject *exception_keeper_value_83;
    PyTracebackObject *exception_keeper_tb_83;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_83;
    PyObject *exception_keeper_type_84;
    PyObject *exception_keeper_value_84;
    PyTracebackObject *exception_keeper_tb_84;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_84;
    PyObject *locals_botocore$exceptions$$$class__29_RangeError_278 = NULL;
    struct Nuitka_FrameObject *frame_a600bb73e1b1999b637676aafd5a3034_29;
    NUITKA_MAY_BE_UNUSED char const *type_description_29 = NULL;
    static struct Nuitka_FrameObject *cache_frame_a600bb73e1b1999b637676aafd5a3034_29 = NULL;
    PyObject *exception_keeper_type_85;
    PyObject *exception_keeper_value_85;
    PyTracebackObject *exception_keeper_tb_85;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_85;
    PyObject *exception_keeper_type_86;
    PyObject *exception_keeper_value_86;
    PyTracebackObject *exception_keeper_tb_86;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_86;
    PyObject *exception_keeper_type_87;
    PyObject *exception_keeper_value_87;
    PyTracebackObject *exception_keeper_tb_87;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_87;
    PyObject *locals_botocore$exceptions$$$class__30_UnknownParameterError_291 = NULL;
    struct Nuitka_FrameObject *frame_aec7b451d1892859451e9b947870ee57_30;
    NUITKA_MAY_BE_UNUSED char const *type_description_30 = NULL;
    static struct Nuitka_FrameObject *cache_frame_aec7b451d1892859451e9b947870ee57_30 = NULL;
    PyObject *exception_keeper_type_88;
    PyObject *exception_keeper_value_88;
    PyTracebackObject *exception_keeper_tb_88;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_88;
    PyObject *exception_keeper_type_89;
    PyObject *exception_keeper_value_89;
    PyTracebackObject *exception_keeper_tb_89;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_89;
    PyObject *exception_keeper_type_90;
    PyObject *exception_keeper_value_90;
    PyTracebackObject *exception_keeper_tb_90;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_90;
    PyObject *locals_botocore$exceptions$$$class__31_InvalidRegionError_305 = NULL;
    struct Nuitka_FrameObject *frame_f272aacdb39eb2a25df282abe1bb41a8_31;
    NUITKA_MAY_BE_UNUSED char const *type_description_31 = NULL;
    static struct Nuitka_FrameObject *cache_frame_f272aacdb39eb2a25df282abe1bb41a8_31 = NULL;
    PyObject *exception_keeper_type_91;
    PyObject *exception_keeper_value_91;
    PyTracebackObject *exception_keeper_tb_91;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_91;
    PyObject *exception_keeper_type_92;
    PyObject *exception_keeper_value_92;
    PyTracebackObject *exception_keeper_tb_92;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_92;
    PyObject *exception_keeper_type_93;
    PyObject *exception_keeper_value_93;
    PyTracebackObject *exception_keeper_tb_93;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_93;
    PyObject *locals_botocore$exceptions$$$class__32_AliasConflictParameterError_316 = NULL;
    struct Nuitka_FrameObject *frame_a0ceb15d9408c7b45e848eee22bbec01_32;
    NUITKA_MAY_BE_UNUSED char const *type_description_32 = NULL;
    static struct Nuitka_FrameObject *cache_frame_a0ceb15d9408c7b45e848eee22bbec01_32 = NULL;
    PyObject *exception_keeper_type_94;
    PyObject *exception_keeper_value_94;
    PyTracebackObject *exception_keeper_tb_94;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_94;
    PyObject *exception_keeper_type_95;
    PyObject *exception_keeper_value_95;
    PyTracebackObject *exception_keeper_tb_95;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_95;
    PyObject *exception_keeper_type_96;
    PyObject *exception_keeper_value_96;
    PyTracebackObject *exception_keeper_tb_96;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_96;
    PyObject *locals_botocore$exceptions$$$class__33_UnknownServiceStyle_330 = NULL;
    struct Nuitka_FrameObject *frame_7074a378db1bc1ab719a596cfea04cd7_33;
    NUITKA_MAY_BE_UNUSED char const *type_description_33 = NULL;
    static struct Nuitka_FrameObject *cache_frame_7074a378db1bc1ab719a596cfea04cd7_33 = NULL;
    PyObject *exception_keeper_type_97;
    PyObject *exception_keeper_value_97;
    PyTracebackObject *exception_keeper_tb_97;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_97;
    PyObject *exception_keeper_type_98;
    PyObject *exception_keeper_value_98;
    PyTracebackObject *exception_keeper_tb_98;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_98;
    PyObject *exception_keeper_type_99;
    PyObject *exception_keeper_value_99;
    PyTracebackObject *exception_keeper_tb_99;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_99;
    PyObject *locals_botocore$exceptions$$$class__34_PaginationError_339 = NULL;
    struct Nuitka_FrameObject *frame_67a21261be7184590cf89a63f235b4aa_34;
    NUITKA_MAY_BE_UNUSED char const *type_description_34 = NULL;
    static struct Nuitka_FrameObject *cache_frame_67a21261be7184590cf89a63f235b4aa_34 = NULL;
    PyObject *exception_keeper_type_100;
    PyObject *exception_keeper_value_100;
    PyTracebackObject *exception_keeper_tb_100;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_100;
    PyObject *exception_keeper_type_101;
    PyObject *exception_keeper_value_101;
    PyTracebackObject *exception_keeper_tb_101;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_101;
    PyObject *exception_keeper_type_102;
    PyObject *exception_keeper_value_102;
    PyTracebackObject *exception_keeper_tb_102;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_102;
    PyObject *locals_botocore$exceptions$$$class__35_OperationNotPageableError_343 = NULL;
    struct Nuitka_FrameObject *frame_a72d0e59ff98038a11af02fdf245dbaa_35;
    NUITKA_MAY_BE_UNUSED char const *type_description_35 = NULL;
    static struct Nuitka_FrameObject *cache_frame_a72d0e59ff98038a11af02fdf245dbaa_35 = NULL;
    PyObject *exception_keeper_type_103;
    PyObject *exception_keeper_value_103;
    PyTracebackObject *exception_keeper_tb_103;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_103;
    PyObject *exception_keeper_type_104;
    PyObject *exception_keeper_value_104;
    PyTracebackObject *exception_keeper_tb_104;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_104;
    PyObject *exception_keeper_type_105;
    PyObject *exception_keeper_value_105;
    PyTracebackObject *exception_keeper_tb_105;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_105;
    PyObject *locals_botocore$exceptions$$$class__36_ChecksumError_347 = NULL;
    struct Nuitka_FrameObject *frame_86bd8a784d25ff9b97e0a5eef286a755_36;
    NUITKA_MAY_BE_UNUSED char const *type_description_36 = NULL;
    static struct Nuitka_FrameObject *cache_frame_86bd8a784d25ff9b97e0a5eef286a755_36 = NULL;
    PyObject *exception_keeper_type_106;
    PyObject *exception_keeper_value_106;
    PyTracebackObject *exception_keeper_tb_106;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_106;
    PyObject *exception_keeper_type_107;
    PyObject *exception_keeper_value_107;
    PyTracebackObject *exception_keeper_tb_107;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_107;
    PyObject *exception_keeper_type_108;
    PyObject *exception_keeper_value_108;
    PyTracebackObject *exception_keeper_tb_108;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_108;
    PyObject *locals_botocore$exceptions$$$class__37_UnseekableStreamError_356 = NULL;
    struct Nuitka_FrameObject *frame_ff7f1c57167b122361e2ae00ec68ed30_37;
    NUITKA_MAY_BE_UNUSED char const *type_description_37 = NULL;
    static struct Nuitka_FrameObject *cache_frame_ff7f1c57167b122361e2ae00ec68ed30_37 = NULL;
    PyObject *exception_keeper_type_109;
    PyObject *exception_keeper_value_109;
    PyTracebackObject *exception_keeper_tb_109;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_109;
    PyObject *exception_keeper_type_110;
    PyObject *exception_keeper_value_110;
    PyTracebackObject *exception_keeper_tb_110;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_110;
    PyObject *exception_keeper_type_111;
    PyObject *exception_keeper_value_111;
    PyTracebackObject *exception_keeper_tb_111;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_111;
    PyObject *locals_botocore$exceptions$$$class__38_WaiterError_364 = NULL;
    struct Nuitka_FrameObject *frame_2317f3473d9f05a719acd520900b593e_38;
    NUITKA_MAY_BE_UNUSED char const *type_description_38 = NULL;
    static struct Nuitka_FrameObject *cache_frame_2317f3473d9f05a719acd520900b593e_38 = NULL;
    PyObject *exception_keeper_type_112;
    PyObject *exception_keeper_value_112;
    PyTracebackObject *exception_keeper_tb_112;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_112;
    PyObject *exception_keeper_type_113;
    PyObject *exception_keeper_value_113;
    PyTracebackObject *exception_keeper_tb_113;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_113;
    PyObject *exception_keeper_type_114;
    PyObject *exception_keeper_value_114;
    PyTracebackObject *exception_keeper_tb_114;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_114;
    PyObject *locals_botocore$exceptions$$$class__39_IncompleteReadError_373 = NULL;
    struct Nuitka_FrameObject *frame_8ec45afd7350545a21bd2381898ac1cc_39;
    NUITKA_MAY_BE_UNUSED char const *type_description_39 = NULL;
    static struct Nuitka_FrameObject *cache_frame_8ec45afd7350545a21bd2381898ac1cc_39 = NULL;
    PyObject *exception_keeper_type_115;
    PyObject *exception_keeper_value_115;
    PyTracebackObject *exception_keeper_tb_115;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_115;
    PyObject *exception_keeper_type_116;
    PyObject *exception_keeper_value_116;
    PyTracebackObject *exception_keeper_tb_116;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_116;
    PyObject *exception_keeper_type_117;
    PyObject *exception_keeper_value_117;
    PyTracebackObject *exception_keeper_tb_117;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_117;
    PyObject *locals_botocore$exceptions$$$class__40_InvalidExpressionError_379 = NULL;
    struct Nuitka_FrameObject *frame_58c793da95e1d980e6a91041dc9a8e79_40;
    NUITKA_MAY_BE_UNUSED char const *type_description_40 = NULL;
    static struct Nuitka_FrameObject *cache_frame_58c793da95e1d980e6a91041dc9a8e79_40 = NULL;
    PyObject *exception_keeper_type_118;
    PyObject *exception_keeper_value_118;
    PyTracebackObject *exception_keeper_tb_118;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_118;
    PyObject *exception_keeper_type_119;
    PyObject *exception_keeper_value_119;
    PyTracebackObject *exception_keeper_tb_119;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_119;
    PyObject *exception_keeper_type_120;
    PyObject *exception_keeper_value_120;
    PyTracebackObject *exception_keeper_tb_120;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_120;
    PyObject *locals_botocore$exceptions$$$class__41_UnknownCredentialError_384 = NULL;
    struct Nuitka_FrameObject *frame_5afbdbc4a235063970771fea8e50e684_41;
    NUITKA_MAY_BE_UNUSED char const *type_description_41 = NULL;
    static struct Nuitka_FrameObject *cache_frame_5afbdbc4a235063970771fea8e50e684_41 = NULL;
    PyObject *exception_keeper_type_121;
    PyObject *exception_keeper_value_121;
    PyTracebackObject *exception_keeper_tb_121;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_121;
    PyObject *exception_keeper_type_122;
    PyObject *exception_keeper_value_122;
    PyTracebackObject *exception_keeper_tb_122;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_122;
    PyObject *exception_keeper_type_123;
    PyObject *exception_keeper_value_123;
    PyTracebackObject *exception_keeper_tb_123;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_123;
    PyObject *locals_botocore$exceptions$$$class__42_WaiterConfigError_389 = NULL;
    struct Nuitka_FrameObject *frame_40a276ce738d53235a378f54b7fea973_42;
    NUITKA_MAY_BE_UNUSED char const *type_description_42 = NULL;
    static struct Nuitka_FrameObject *cache_frame_40a276ce738d53235a378f54b7fea973_42 = NULL;
    PyObject *exception_keeper_type_124;
    PyObject *exception_keeper_value_124;
    PyTracebackObject *exception_keeper_tb_124;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_124;
    PyObject *exception_keeper_type_125;
    PyObject *exception_keeper_value_125;
    PyTracebackObject *exception_keeper_tb_125;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_125;
    PyObject *exception_keeper_type_126;
    PyObject *exception_keeper_value_126;
    PyTracebackObject *exception_keeper_tb_126;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_126;
    PyObject *locals_botocore$exceptions$$$class__43_UnknownClientMethodError_394 = NULL;
    struct Nuitka_FrameObject *frame_cc3dfd1c0604e11e3e45bc93ea9997cf_43;
    NUITKA_MAY_BE_UNUSED char const *type_description_43 = NULL;
    static struct Nuitka_FrameObject *cache_frame_cc3dfd1c0604e11e3e45bc93ea9997cf_43 = NULL;
    PyObject *exception_keeper_type_127;
    PyObject *exception_keeper_value_127;
    PyTracebackObject *exception_keeper_tb_127;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_127;
    PyObject *exception_keeper_type_128;
    PyObject *exception_keeper_value_128;
    PyTracebackObject *exception_keeper_tb_128;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_128;
    PyObject *exception_keeper_type_129;
    PyObject *exception_keeper_value_129;
    PyTracebackObject *exception_keeper_tb_129;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_129;
    PyObject *locals_botocore$exceptions$$$class__44_UnsupportedSignatureVersionError_399 = NULL;
    struct Nuitka_FrameObject *frame_bae2d5ca9bd4d3c2347f71ec402708ba_44;
    NUITKA_MAY_BE_UNUSED char const *type_description_44 = NULL;
    static struct Nuitka_FrameObject *cache_frame_bae2d5ca9bd4d3c2347f71ec402708ba_44 = NULL;
    PyObject *exception_keeper_type_130;
    PyObject *exception_keeper_value_130;
    PyTracebackObject *exception_keeper_tb_130;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_130;
    PyObject *exception_keeper_type_131;
    PyObject *exception_keeper_value_131;
    PyTracebackObject *exception_keeper_tb_131;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_131;
    PyObject *exception_keeper_type_132;
    PyObject *exception_keeper_value_132;
    PyTracebackObject *exception_keeper_tb_132;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_132;
    PyObject *locals_botocore$exceptions$$$class__45_ClientError_404 = NULL;
    struct Nuitka_FrameObject *frame_0dbac56e1690ceff521c6ecc75691544_45;
    NUITKA_MAY_BE_UNUSED char const *type_description_45 = NULL;
    static struct Nuitka_FrameObject *cache_frame_0dbac56e1690ceff521c6ecc75691544_45 = NULL;
    PyObject *exception_keeper_type_133;
    PyObject *exception_keeper_value_133;
    PyTracebackObject *exception_keeper_tb_133;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_133;
    PyObject *exception_keeper_type_134;
    PyObject *exception_keeper_value_134;
    PyTracebackObject *exception_keeper_tb_134;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_134;
    PyObject *exception_keeper_type_135;
    PyObject *exception_keeper_value_135;
    PyTracebackObject *exception_keeper_tb_135;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_135;
    PyObject *locals_botocore$exceptions$$$class__46_EventStreamError_439 = NULL;
    PyObject *exception_keeper_type_136;
    PyObject *exception_keeper_value_136;
    PyTracebackObject *exception_keeper_tb_136;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_136;
    PyObject *exception_keeper_type_137;
    PyObject *exception_keeper_value_137;
    PyTracebackObject *exception_keeper_tb_137;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_137;
    PyObject *exception_keeper_type_138;
    PyObject *exception_keeper_value_138;
    PyTracebackObject *exception_keeper_tb_138;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_138;
    PyObject *locals_botocore$exceptions$$$class__47_UnsupportedTLSVersionWarning_443 = NULL;
    PyObject *exception_keeper_type_139;
    PyObject *exception_keeper_value_139;
    PyTracebackObject *exception_keeper_tb_139;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_139;
    PyObject *exception_keeper_type_140;
    PyObject *exception_keeper_value_140;
    PyTracebackObject *exception_keeper_tb_140;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_140;
    PyObject *exception_keeper_type_141;
    PyObject *exception_keeper_value_141;
    PyTracebackObject *exception_keeper_tb_141;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_141;
    PyObject *locals_botocore$exceptions$$$class__48_ImminentRemovalWarning_448 = NULL;
    PyObject *exception_keeper_type_142;
    PyObject *exception_keeper_value_142;
    PyTracebackObject *exception_keeper_tb_142;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_142;
    PyObject *exception_keeper_type_143;
    PyObject *exception_keeper_value_143;
    PyTracebackObject *exception_keeper_tb_143;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_143;
    PyObject *exception_keeper_type_144;
    PyObject *exception_keeper_value_144;
    PyTracebackObject *exception_keeper_tb_144;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_144;
    PyObject *locals_botocore$exceptions$$$class__49_InvalidDNSNameError_452 = NULL;
    struct Nuitka_FrameObject *frame_bdf37c8d25be648e28e98e50775f3cc7_46;
    NUITKA_MAY_BE_UNUSED char const *type_description_46 = NULL;
    static struct Nuitka_FrameObject *cache_frame_bdf37c8d25be648e28e98e50775f3cc7_46 = NULL;
    PyObject *exception_keeper_type_145;
    PyObject *exception_keeper_value_145;
    PyTracebackObject *exception_keeper_tb_145;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_145;
    PyObject *exception_keeper_type_146;
    PyObject *exception_keeper_value_146;
    PyTracebackObject *exception_keeper_tb_146;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_146;
    PyObject *exception_keeper_type_147;
    PyObject *exception_keeper_value_147;
    PyTracebackObject *exception_keeper_tb_147;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_147;
    PyObject *locals_botocore$exceptions$$$class__50_InvalidS3AddressingStyleError_463 = NULL;
    struct Nuitka_FrameObject *frame_3d165ac0cfadd83deb25ea8760705966_47;
    NUITKA_MAY_BE_UNUSED char const *type_description_47 = NULL;
    static struct Nuitka_FrameObject *cache_frame_3d165ac0cfadd83deb25ea8760705966_47 = NULL;
    PyObject *exception_keeper_type_148;
    PyObject *exception_keeper_value_148;
    PyTracebackObject *exception_keeper_tb_148;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_148;
    PyObject *exception_keeper_type_149;
    PyObject *exception_keeper_value_149;
    PyTracebackObject *exception_keeper_tb_149;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_149;
    PyObject *exception_keeper_type_150;
    PyObject *exception_keeper_value_150;
    PyTracebackObject *exception_keeper_tb_150;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_150;
    PyObject *locals_botocore$exceptions$$$class__51_UnsupportedS3ArnError_471 = NULL;
    struct Nuitka_FrameObject *frame_3c40020e5af5cd24df47c8c13d685018_48;
    NUITKA_MAY_BE_UNUSED char const *type_description_48 = NULL;
    static struct Nuitka_FrameObject *cache_frame_3c40020e5af5cd24df47c8c13d685018_48 = NULL;
    PyObject *exception_keeper_type_151;
    PyObject *exception_keeper_value_151;
    PyTracebackObject *exception_keeper_tb_151;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_151;
    PyObject *exception_keeper_type_152;
    PyObject *exception_keeper_value_152;
    PyTracebackObject *exception_keeper_tb_152;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_152;
    PyObject *exception_keeper_type_153;
    PyObject *exception_keeper_value_153;
    PyTracebackObject *exception_keeper_tb_153;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_153;
    PyObject *locals_botocore$exceptions$$$class__52_UnsupportedS3ControlArnError_479 = NULL;
    struct Nuitka_FrameObject *frame_25cd7700e62e83506a4a2c3a68a02743_49;
    NUITKA_MAY_BE_UNUSED char const *type_description_49 = NULL;
    static struct Nuitka_FrameObject *cache_frame_25cd7700e62e83506a4a2c3a68a02743_49 = NULL;
    PyObject *exception_keeper_type_154;
    PyObject *exception_keeper_value_154;
    PyTracebackObject *exception_keeper_tb_154;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_154;
    PyObject *exception_keeper_type_155;
    PyObject *exception_keeper_value_155;
    PyTracebackObject *exception_keeper_tb_155;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_155;
    PyObject *exception_keeper_type_156;
    PyObject *exception_keeper_value_156;
    PyTracebackObject *exception_keeper_tb_156;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_156;
    PyObject *locals_botocore$exceptions$$$class__53_InvalidHostLabelError_486 = NULL;
    struct Nuitka_FrameObject *frame_5975bf4559f6a1446c99f93868536ae2_50;
    NUITKA_MAY_BE_UNUSED char const *type_description_50 = NULL;
    static struct Nuitka_FrameObject *cache_frame_5975bf4559f6a1446c99f93868536ae2_50 = NULL;
    PyObject *exception_keeper_type_157;
    PyObject *exception_keeper_value_157;
    PyTracebackObject *exception_keeper_tb_157;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_157;
    PyObject *exception_keeper_type_158;
    PyObject *exception_keeper_value_158;
    PyTracebackObject *exception_keeper_tb_158;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_158;
    PyObject *exception_keeper_type_159;
    PyObject *exception_keeper_value_159;
    PyTracebackObject *exception_keeper_tb_159;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_159;
    PyObject *locals_botocore$exceptions$$$class__54_UnsupportedOutpostResourceError_494 = NULL;
    struct Nuitka_FrameObject *frame_928984019de852157f2f6ed7d404e8b0_51;
    NUITKA_MAY_BE_UNUSED char const *type_description_51 = NULL;
    static struct Nuitka_FrameObject *cache_frame_928984019de852157f2f6ed7d404e8b0_51 = NULL;
    PyObject *exception_keeper_type_160;
    PyObject *exception_keeper_value_160;
    PyTracebackObject *exception_keeper_tb_160;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_160;
    PyObject *exception_keeper_type_161;
    PyObject *exception_keeper_value_161;
    PyTracebackObject *exception_keeper_tb_161;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_161;
    PyObject *exception_keeper_type_162;
    PyObject *exception_keeper_value_162;
    PyTracebackObject *exception_keeper_tb_162;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_162;
    PyObject *locals_botocore$exceptions$$$class__55_UnsupportedS3ConfigurationError_503 = NULL;
    struct Nuitka_FrameObject *frame_2516b4116953e20c4679d08aba3fb9eb_52;
    NUITKA_MAY_BE_UNUSED char const *type_description_52 = NULL;
    static struct Nuitka_FrameObject *cache_frame_2516b4116953e20c4679d08aba3fb9eb_52 = NULL;
    PyObject *exception_keeper_type_163;
    PyObject *exception_keeper_value_163;
    PyTracebackObject *exception_keeper_tb_163;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_163;
    PyObject *exception_keeper_type_164;
    PyObject *exception_keeper_value_164;
    PyTracebackObject *exception_keeper_tb_164;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_164;
    PyObject *exception_keeper_type_165;
    PyObject *exception_keeper_value_165;
    PyTracebackObject *exception_keeper_tb_165;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_165;
    PyObject *locals_botocore$exceptions$$$class__56_UnsupportedS3AccesspointConfigurationError_510 = NULL;
    struct Nuitka_FrameObject *frame_b449e2438bb5d5e1407d0a0c4cb65d49_53;
    NUITKA_MAY_BE_UNUSED char const *type_description_53 = NULL;
    static struct Nuitka_FrameObject *cache_frame_b449e2438bb5d5e1407d0a0c4cb65d49_53 = NULL;
    PyObject *exception_keeper_type_166;
    PyObject *exception_keeper_value_166;
    PyTracebackObject *exception_keeper_tb_166;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_166;
    PyObject *exception_keeper_type_167;
    PyObject *exception_keeper_value_167;
    PyTracebackObject *exception_keeper_tb_167;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_167;
    PyObject *exception_keeper_type_168;
    PyObject *exception_keeper_value_168;
    PyTracebackObject *exception_keeper_tb_168;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_168;
    PyObject *locals_botocore$exceptions$$$class__57_InvalidEndpointDiscoveryConfigurationError_517 = NULL;
    struct Nuitka_FrameObject *frame_528123f3b88a399219363b7e3e1b52bc_54;
    NUITKA_MAY_BE_UNUSED char const *type_description_54 = NULL;
    static struct Nuitka_FrameObject *cache_frame_528123f3b88a399219363b7e3e1b52bc_54 = NULL;
    PyObject *exception_keeper_type_169;
    PyObject *exception_keeper_value_169;
    PyTracebackObject *exception_keeper_tb_169;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_169;
    PyObject *exception_keeper_type_170;
    PyObject *exception_keeper_value_170;
    PyTracebackObject *exception_keeper_tb_170;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_170;
    PyObject *exception_keeper_type_171;
    PyObject *exception_keeper_value_171;
    PyTracebackObject *exception_keeper_tb_171;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_171;
    PyObject *locals_botocore$exceptions$$$class__58_UnsupportedS3ControlConfigurationError_525 = NULL;
    struct Nuitka_FrameObject *frame_c1b075a3448a97e50e64d8c99c49e125_55;
    NUITKA_MAY_BE_UNUSED char const *type_description_55 = NULL;
    static struct Nuitka_FrameObject *cache_frame_c1b075a3448a97e50e64d8c99c49e125_55 = NULL;
    PyObject *exception_keeper_type_172;
    PyObject *exception_keeper_value_172;
    PyTracebackObject *exception_keeper_tb_172;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_172;
    PyObject *exception_keeper_type_173;
    PyObject *exception_keeper_value_173;
    PyTracebackObject *exception_keeper_tb_173;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_173;
    PyObject *exception_keeper_type_174;
    PyObject *exception_keeper_value_174;
    PyTracebackObject *exception_keeper_tb_174;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_174;
    PyObject *locals_botocore$exceptions$$$class__59_InvalidRetryConfigurationError_532 = NULL;
    struct Nuitka_FrameObject *frame_df9b2633f611616815dfaac59767af68_56;
    NUITKA_MAY_BE_UNUSED char const *type_description_56 = NULL;
    static struct Nuitka_FrameObject *cache_frame_df9b2633f611616815dfaac59767af68_56 = NULL;
    PyObject *exception_keeper_type_175;
    PyObject *exception_keeper_value_175;
    PyTracebackObject *exception_keeper_tb_175;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_175;
    PyObject *exception_keeper_type_176;
    PyObject *exception_keeper_value_176;
    PyTracebackObject *exception_keeper_tb_176;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_176;
    PyObject *exception_keeper_type_177;
    PyObject *exception_keeper_value_177;
    PyTracebackObject *exception_keeper_tb_177;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_177;
    PyObject *locals_botocore$exceptions$$$class__60_InvalidMaxRetryAttemptsError_540 = NULL;
    struct Nuitka_FrameObject *frame_8d3d0dac09d6748bba182d1e4df1063d_57;
    NUITKA_MAY_BE_UNUSED char const *type_description_57 = NULL;
    static struct Nuitka_FrameObject *cache_frame_8d3d0dac09d6748bba182d1e4df1063d_57 = NULL;
    PyObject *exception_keeper_type_178;
    PyObject *exception_keeper_value_178;
    PyTracebackObject *exception_keeper_tb_178;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_178;
    PyObject *exception_keeper_type_179;
    PyObject *exception_keeper_value_179;
    PyTracebackObject *exception_keeper_tb_179;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_179;
    PyObject *exception_keeper_type_180;
    PyObject *exception_keeper_value_180;
    PyTracebackObject *exception_keeper_tb_180;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_180;
    PyObject *locals_botocore$exceptions$$$class__61_InvalidRetryModeError_548 = NULL;
    struct Nuitka_FrameObject *frame_93800b78e5b211ff5d16bceff2024e78_58;
    NUITKA_MAY_BE_UNUSED char const *type_description_58 = NULL;
    static struct Nuitka_FrameObject *cache_frame_93800b78e5b211ff5d16bceff2024e78_58 = NULL;
    PyObject *exception_keeper_type_181;
    PyObject *exception_keeper_value_181;
    PyTracebackObject *exception_keeper_tb_181;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_181;
    PyObject *exception_keeper_type_182;
    PyObject *exception_keeper_value_182;
    PyTracebackObject *exception_keeper_tb_182;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_182;
    PyObject *exception_keeper_type_183;
    PyObject *exception_keeper_value_183;
    PyTracebackObject *exception_keeper_tb_183;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_183;
    PyObject *locals_botocore$exceptions$$$class__62_InvalidS3UsEast1RegionalEndpointConfigError_556 = NULL;
    struct Nuitka_FrameObject *frame_c9b3d3c3deaa812b48c2ad3a73ae4856_59;
    NUITKA_MAY_BE_UNUSED char const *type_description_59 = NULL;
    static struct Nuitka_FrameObject *cache_frame_c9b3d3c3deaa812b48c2ad3a73ae4856_59 = NULL;
    PyObject *exception_keeper_type_184;
    PyObject *exception_keeper_value_184;
    PyTracebackObject *exception_keeper_tb_184;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_184;
    PyObject *exception_keeper_type_185;
    PyObject *exception_keeper_value_185;
    PyTracebackObject *exception_keeper_tb_185;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_185;
    PyObject *exception_keeper_type_186;
    PyObject *exception_keeper_value_186;
    PyTracebackObject *exception_keeper_tb_186;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_186;
    PyObject *locals_botocore$exceptions$$$class__63_InvalidSTSRegionalEndpointsConfigError_565 = NULL;
    struct Nuitka_FrameObject *frame_32971ab0fac478f7e727349fd857c775_60;
    NUITKA_MAY_BE_UNUSED char const *type_description_60 = NULL;
    static struct Nuitka_FrameObject *cache_frame_32971ab0fac478f7e727349fd857c775_60 = NULL;
    PyObject *exception_keeper_type_187;
    PyObject *exception_keeper_value_187;
    PyTracebackObject *exception_keeper_tb_187;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_187;
    PyObject *exception_keeper_type_188;
    PyObject *exception_keeper_value_188;
    PyTracebackObject *exception_keeper_tb_188;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_188;
    PyObject *exception_keeper_type_189;
    PyObject *exception_keeper_value_189;
    PyTracebackObject *exception_keeper_tb_189;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_189;
    PyObject *locals_botocore$exceptions$$$class__64_StubResponseError_573 = NULL;
    struct Nuitka_FrameObject *frame_db1ed124efaccc318ea7e05a853c8733_61;
    NUITKA_MAY_BE_UNUSED char const *type_description_61 = NULL;
    static struct Nuitka_FrameObject *cache_frame_db1ed124efaccc318ea7e05a853c8733_61 = NULL;
    PyObject *exception_keeper_type_190;
    PyObject *exception_keeper_value_190;
    PyTracebackObject *exception_keeper_tb_190;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_190;
    PyObject *exception_keeper_type_191;
    PyObject *exception_keeper_value_191;
    PyTracebackObject *exception_keeper_tb_191;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_191;
    PyObject *exception_keeper_type_192;
    PyObject *exception_keeper_value_192;
    PyTracebackObject *exception_keeper_tb_192;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_192;
    PyObject *locals_botocore$exceptions$$$class__65_StubAssertionError_577 = NULL;
    PyObject *exception_keeper_type_193;
    PyObject *exception_keeper_value_193;
    PyTracebackObject *exception_keeper_tb_193;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_193;
    PyObject *exception_keeper_type_194;
    PyObject *exception_keeper_value_194;
    PyTracebackObject *exception_keeper_tb_194;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_194;
    PyObject *exception_keeper_type_195;
    PyObject *exception_keeper_value_195;
    PyTracebackObject *exception_keeper_tb_195;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_195;
    PyObject *locals_botocore$exceptions$$$class__66_UnStubbedResponseError_581 = NULL;
    PyObject *exception_keeper_type_196;
    PyObject *exception_keeper_value_196;
    PyTracebackObject *exception_keeper_tb_196;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_196;
    PyObject *exception_keeper_type_197;
    PyObject *exception_keeper_value_197;
    PyTracebackObject *exception_keeper_tb_197;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_197;
    PyObject *exception_keeper_type_198;
    PyObject *exception_keeper_value_198;
    PyTracebackObject *exception_keeper_tb_198;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_198;
    PyObject *locals_botocore$exceptions$$$class__67_InvalidConfigError_585 = NULL;
    struct Nuitka_FrameObject *frame_589847e97a18897f85121dae593ee49e_62;
    NUITKA_MAY_BE_UNUSED char const *type_description_62 = NULL;
    static struct Nuitka_FrameObject *cache_frame_589847e97a18897f85121dae593ee49e_62 = NULL;
    PyObject *exception_keeper_type_199;
    PyObject *exception_keeper_value_199;
    PyTracebackObject *exception_keeper_tb_199;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_199;
    PyObject *exception_keeper_type_200;
    PyObject *exception_keeper_value_200;
    PyTracebackObject *exception_keeper_tb_200;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_200;
    PyObject *exception_keeper_type_201;
    PyObject *exception_keeper_value_201;
    PyTracebackObject *exception_keeper_tb_201;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_201;
    PyObject *locals_botocore$exceptions$$$class__68_InfiniteLoopConfigError_589 = NULL;
    struct Nuitka_FrameObject *frame_ef5deee12db344ed6cf0495b2d8b25c1_63;
    NUITKA_MAY_BE_UNUSED char const *type_description_63 = NULL;
    static struct Nuitka_FrameObject *cache_frame_ef5deee12db344ed6cf0495b2d8b25c1_63 = NULL;
    PyObject *exception_keeper_type_202;
    PyObject *exception_keeper_value_202;
    PyTracebackObject *exception_keeper_tb_202;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_202;
    PyObject *exception_keeper_type_203;
    PyObject *exception_keeper_value_203;
    PyTracebackObject *exception_keeper_tb_203;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_203;
    PyObject *exception_keeper_type_204;
    PyObject *exception_keeper_value_204;
    PyTracebackObject *exception_keeper_tb_204;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_204;
    PyObject *locals_botocore$exceptions$$$class__69_RefreshWithMFAUnsupportedError_597 = NULL;
    struct Nuitka_FrameObject *frame_79bf676b2417e28b36114a1b6e22056c_64;
    NUITKA_MAY_BE_UNUSED char const *type_description_64 = NULL;
    static struct Nuitka_FrameObject *cache_frame_79bf676b2417e28b36114a1b6e22056c_64 = NULL;
    PyObject *exception_keeper_type_205;
    PyObject *exception_keeper_value_205;
    PyTracebackObject *exception_keeper_tb_205;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_205;
    PyObject *exception_keeper_type_206;
    PyObject *exception_keeper_value_206;
    PyTracebackObject *exception_keeper_tb_206;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_206;
    PyObject *exception_keeper_type_207;
    PyObject *exception_keeper_value_207;
    PyTracebackObject *exception_keeper_tb_207;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_207;
    PyObject *locals_botocore$exceptions$$$class__70_MD5UnavailableError_601 = NULL;
    struct Nuitka_FrameObject *frame_67e81db6c1222d1b0c3b676e07006b94_65;
    NUITKA_MAY_BE_UNUSED char const *type_description_65 = NULL;
    static struct Nuitka_FrameObject *cache_frame_67e81db6c1222d1b0c3b676e07006b94_65 = NULL;
    PyObject *exception_keeper_type_208;
    PyObject *exception_keeper_value_208;
    PyTracebackObject *exception_keeper_tb_208;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_208;
    PyObject *exception_keeper_type_209;
    PyObject *exception_keeper_value_209;
    PyTracebackObject *exception_keeper_tb_209;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_209;
    PyObject *exception_keeper_type_210;
    PyObject *exception_keeper_value_210;
    PyTracebackObject *exception_keeper_tb_210;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_210;
    PyObject *locals_botocore$exceptions$$$class__71_MetadataRetrievalError_605 = NULL;
    struct Nuitka_FrameObject *frame_2e460197ddfd2b6c424f096b90dfad47_66;
    NUITKA_MAY_BE_UNUSED char const *type_description_66 = NULL;
    static struct Nuitka_FrameObject *cache_frame_2e460197ddfd2b6c424f096b90dfad47_66 = NULL;
    PyObject *exception_keeper_type_211;
    PyObject *exception_keeper_value_211;
    PyTracebackObject *exception_keeper_tb_211;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_211;
    PyObject *exception_keeper_type_212;
    PyObject *exception_keeper_value_212;
    PyTracebackObject *exception_keeper_tb_212;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_212;
    PyObject *exception_keeper_type_213;
    PyObject *exception_keeper_value_213;
    PyTracebackObject *exception_keeper_tb_213;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_213;
    PyObject *locals_botocore$exceptions$$$class__72_UndefinedModelAttributeError_609 = NULL;
    PyObject *exception_keeper_type_214;
    PyObject *exception_keeper_value_214;
    PyTracebackObject *exception_keeper_tb_214;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_214;
    PyObject *exception_keeper_type_215;
    PyObject *exception_keeper_value_215;
    PyTracebackObject *exception_keeper_tb_215;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_215;
    PyObject *exception_keeper_type_216;
    PyObject *exception_keeper_value_216;
    PyTracebackObject *exception_keeper_tb_216;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_216;
    PyObject *locals_botocore$exceptions$$$class__73_MissingServiceIdError_613 = NULL;
    struct Nuitka_FrameObject *frame_43432ddae86353eb6ef768afd56166ca_67;
    NUITKA_MAY_BE_UNUSED char const *type_description_67 = NULL;
    static struct Nuitka_FrameObject *cache_frame_43432ddae86353eb6ef768afd56166ca_67 = NULL;
    PyObject *exception_keeper_type_217;
    PyObject *exception_keeper_value_217;
    PyTracebackObject *exception_keeper_tb_217;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_217;
    PyObject *exception_keeper_type_218;
    PyObject *exception_keeper_value_218;
    PyTracebackObject *exception_keeper_tb_218;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_218;
    PyObject *exception_keeper_type_219;
    PyObject *exception_keeper_value_219;
    PyTracebackObject *exception_keeper_tb_219;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_219;
    PyObject *locals_botocore$exceptions$$$class__74_SSOError_625 = NULL;
    struct Nuitka_FrameObject *frame_fa16ea551b7dda4ad6b1c9626ca18308_68;
    NUITKA_MAY_BE_UNUSED char const *type_description_68 = NULL;
    static struct Nuitka_FrameObject *cache_frame_fa16ea551b7dda4ad6b1c9626ca18308_68 = NULL;
    PyObject *exception_keeper_type_220;
    PyObject *exception_keeper_value_220;
    PyTracebackObject *exception_keeper_tb_220;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_220;
    PyObject *exception_keeper_type_221;
    PyObject *exception_keeper_value_221;
    PyTracebackObject *exception_keeper_tb_221;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_221;
    PyObject *exception_keeper_type_222;
    PyObject *exception_keeper_value_222;
    PyTracebackObject *exception_keeper_tb_222;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_222;
    PyObject *locals_botocore$exceptions$$$class__75_SSOTokenLoadError_629 = NULL;
    struct Nuitka_FrameObject *frame_c2e1c09b78aa5299b3781c48626a546b_69;
    NUITKA_MAY_BE_UNUSED char const *type_description_69 = NULL;
    static struct Nuitka_FrameObject *cache_frame_c2e1c09b78aa5299b3781c48626a546b_69 = NULL;
    PyObject *exception_keeper_type_223;
    PyObject *exception_keeper_value_223;
    PyTracebackObject *exception_keeper_tb_223;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_223;
    PyObject *exception_keeper_type_224;
    PyObject *exception_keeper_value_224;
    PyTracebackObject *exception_keeper_tb_224;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_224;
    PyObject *exception_keeper_type_225;
    PyObject *exception_keeper_value_225;
    PyTracebackObject *exception_keeper_tb_225;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_225;
    PyObject *locals_botocore$exceptions$$$class__76_UnauthorizedSSOTokenError_633 = NULL;
    struct Nuitka_FrameObject *frame_e6660177ae6c191de8af8d07a1593cfb_70;
    NUITKA_MAY_BE_UNUSED char const *type_description_70 = NULL;
    static struct Nuitka_FrameObject *cache_frame_e6660177ae6c191de8af8d07a1593cfb_70 = NULL;
    PyObject *exception_keeper_type_226;
    PyObject *exception_keeper_value_226;
    PyTracebackObject *exception_keeper_tb_226;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_226;
    PyObject *exception_keeper_type_227;
    PyObject *exception_keeper_value_227;
    PyTracebackObject *exception_keeper_tb_227;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_227;
    PyObject *exception_keeper_type_228;
    PyObject *exception_keeper_value_228;
    PyTracebackObject *exception_keeper_tb_228;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_228;
    PyObject *locals_botocore$exceptions$$$class__77_CapacityNotAvailableError_641 = NULL;
    struct Nuitka_FrameObject *frame_a45cd77b91b1f4fe65f618261f99e9d7_71;
    NUITKA_MAY_BE_UNUSED char const *type_description_71 = NULL;
    static struct Nuitka_FrameObject *cache_frame_a45cd77b91b1f4fe65f618261f99e9d7_71 = NULL;
    PyObject *exception_keeper_type_229;
    PyObject *exception_keeper_value_229;
    PyTracebackObject *exception_keeper_tb_229;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_229;
    PyObject *exception_keeper_type_230;
    PyObject *exception_keeper_value_230;
    PyTracebackObject *exception_keeper_tb_230;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_230;
    PyObject *exception_keeper_type_231;
    PyObject *exception_keeper_value_231;
    PyTracebackObject *exception_keeper_tb_231;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_231;
    PyObject *locals_botocore$exceptions$$$class__78_InvalidProxiesConfigError_647 = NULL;
    struct Nuitka_FrameObject *frame_0fa66f49e61e33f2f35e96530ce0df24_72;
    NUITKA_MAY_BE_UNUSED char const *type_description_72 = NULL;
    static struct Nuitka_FrameObject *cache_frame_0fa66f49e61e33f2f35e96530ce0df24_72 = NULL;
    PyObject *exception_keeper_type_232;
    PyObject *exception_keeper_value_232;
    PyTracebackObject *exception_keeper_tb_232;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_232;
    PyObject *exception_keeper_type_233;
    PyObject *exception_keeper_value_233;
    PyTracebackObject *exception_keeper_tb_233;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_233;
    PyObject *exception_keeper_type_234;
    PyObject *exception_keeper_value_234;
    PyTracebackObject *exception_keeper_tb_234;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_234;

    // Module code.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = Py_None;
        UPDATE_STRING_DICT0(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[27], tmp_assign_source_1);
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = module_filename_obj;
        UPDATE_STRING_DICT0(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[28], tmp_assign_source_2);
    }
    // Frame without reuse.
    frame_a719a31d518bc79422e5dc1f94c073b4 = MAKE_MODULE_FRAME(codeobj_a719a31d518bc79422e5dc1f94c073b4, module_botocore$exceptions);

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStack(frame_a719a31d518bc79422e5dc1f94c073b4);
    assert(Py_REFCNT(frame_a719a31d518bc79422e5dc1f94c073b4) == 2);

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_assattr_value_1 = module_filename_obj;
        tmp_assattr_target_1 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[29]);

        if (unlikely(tmp_assattr_target_1 == NULL)) {
            tmp_assattr_target_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[29]);
        }

        assert(!(tmp_assattr_target_1 == NULL));
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[30], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_value_2 = Py_True;
        tmp_assattr_target_2 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[29]);

        if (unlikely(tmp_assattr_target_2 == NULL)) {
            tmp_assattr_target_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[29]);
        }

        assert(!(tmp_assattr_target_2 == NULL));
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[31], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_3;
        tmp_assign_source_3 = Py_None;
        UPDATE_STRING_DICT0(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[32], tmp_assign_source_3);
    }
    {
        PyObject *tmp_assign_source_4;
        {
            PyObject *hard_module = IMPORT_HARD___FUTURE__();
            tmp_assign_source_4 = LOOKUP_ATTRIBUTE(hard_module, mod_consts[33]);
        }
        assert(!(tmp_assign_source_4 == NULL));
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[33], tmp_assign_source_4);
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_import_name_from_1;
        PyObject *tmp_name_value_1;
        PyObject *tmp_globals_arg_value_1;
        PyObject *tmp_locals_arg_value_1;
        PyObject *tmp_fromlist_value_1;
        PyObject *tmp_level_value_1;
        tmp_name_value_1 = mod_consts[34];
        tmp_globals_arg_value_1 = (PyObject *)moduledict_botocore$exceptions;
        tmp_locals_arg_value_1 = Py_None;
        tmp_fromlist_value_1 = mod_consts[35];
        tmp_level_value_1 = mod_consts[36];
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 15;
        tmp_import_name_from_1 = IMPORT_MODULE5(tmp_name_value_1, tmp_globals_arg_value_1, tmp_locals_arg_value_1, tmp_fromlist_value_1, tmp_level_value_1);
        if (tmp_import_name_from_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 15;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_1)) {
            tmp_assign_source_5 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_1,
                (PyObject *)moduledict_botocore$exceptions,
                mod_consts[37],
                mod_consts[36]
            );
        } else {
            tmp_assign_source_5 = IMPORT_NAME(tmp_import_name_from_1, mod_consts[37]);
        }

        Py_DECREF(tmp_import_name_from_1);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 15;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[37], tmp_assign_source_5);
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_import_name_from_2;
        PyObject *tmp_name_value_2;
        PyObject *tmp_globals_arg_value_2;
        PyObject *tmp_locals_arg_value_2;
        PyObject *tmp_fromlist_value_2;
        PyObject *tmp_level_value_2;
        tmp_name_value_2 = mod_consts[38];
        tmp_globals_arg_value_2 = (PyObject *)moduledict_botocore$exceptions;
        tmp_locals_arg_value_2 = Py_None;
        tmp_fromlist_value_2 = mod_consts[39];
        tmp_level_value_2 = mod_consts[36];
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 16;
        tmp_import_name_from_2 = IMPORT_MODULE5(tmp_name_value_2, tmp_globals_arg_value_2, tmp_locals_arg_value_2, tmp_fromlist_value_2, tmp_level_value_2);
        if (tmp_import_name_from_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 16;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_2)) {
            tmp_assign_source_6 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_2,
                (PyObject *)moduledict_botocore$exceptions,
                mod_consts[40],
                mod_consts[36]
            );
        } else {
            tmp_assign_source_6 = IMPORT_NAME(tmp_import_name_from_2, mod_consts[40]);
        }

        Py_DECREF(tmp_import_name_from_2);
        if (tmp_assign_source_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 16;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[40], tmp_assign_source_6);
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_defaults_1;
        tmp_defaults_1 = mod_consts[41];
        Py_INCREF(tmp_defaults_1);


        tmp_assign_source_7 = MAKE_FUNCTION_botocore$exceptions$$$function__1__exception_from_packed_args(tmp_defaults_1);

        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[5], tmp_assign_source_7);
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_dircall_arg1_1;
        tmp_dircall_arg1_1 = mod_consts[42];
        Py_INCREF(tmp_dircall_arg1_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1};
            tmp_assign_source_8 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 31;

            goto try_except_handler_1;
        }
        assert(tmp_class_creation_1__bases == NULL);
        tmp_class_creation_1__bases = tmp_assign_source_8;
    }
    {
        PyObject *tmp_assign_source_9;
        tmp_assign_source_9 = PyDict_New();
        assert(tmp_class_creation_1__class_decl_dict == NULL);
        tmp_class_creation_1__class_decl_dict = tmp_assign_source_9;
    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_metaclass_value_1;
        bool tmp_condition_result_1;
        PyObject *tmp_key_value_1;
        PyObject *tmp_dict_arg_value_1;
        PyObject *tmp_dict_arg_value_2;
        PyObject *tmp_key_value_2;
        nuitka_bool tmp_condition_result_2;
        int tmp_truth_name_1;
        PyObject *tmp_type_arg_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_subscript_value_1;
        PyObject *tmp_bases_value_1;
        tmp_key_value_1 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dict_arg_value_1 = tmp_class_creation_1__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_1, tmp_key_value_1);
        assert(!(tmp_res == -1));
        tmp_condition_result_1 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto condexpr_true_1;
        } else {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dict_arg_value_2 = tmp_class_creation_1__class_decl_dict;
        tmp_key_value_2 = mod_consts[43];
        tmp_metaclass_value_1 = DICT_GET_ITEM0(tmp_dict_arg_value_2, tmp_key_value_2);
        if (tmp_metaclass_value_1 == NULL) {
            tmp_metaclass_value_1 = Py_None;
        }
        assert(!(tmp_metaclass_value_1 == NULL));
        Py_INCREF(tmp_metaclass_value_1);
        goto condexpr_end_1;
        condexpr_false_1:;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_class_creation_1__bases);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 31;

            goto try_except_handler_1;
        }
        tmp_condition_result_2 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_2;
        } else {
            goto condexpr_false_2;
        }
        condexpr_true_2:;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_expression_value_1 = tmp_class_creation_1__bases;
        tmp_subscript_value_1 = mod_consts[36];
        tmp_type_arg_1 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_1, tmp_subscript_value_1, 0);
        if (tmp_type_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 31;

            goto try_except_handler_1;
        }
        tmp_metaclass_value_1 = BUILTIN_TYPE1(tmp_type_arg_1);
        Py_DECREF(tmp_type_arg_1);
        if (tmp_metaclass_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 31;

            goto try_except_handler_1;
        }
        goto condexpr_end_2;
        condexpr_false_2:;
        tmp_metaclass_value_1 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_1);
        condexpr_end_2:;
        condexpr_end_1:;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_bases_value_1 = tmp_class_creation_1__bases;
        tmp_assign_source_10 = SELECT_METACLASS(tmp_metaclass_value_1, tmp_bases_value_1);
        Py_DECREF(tmp_metaclass_value_1);
        if (tmp_assign_source_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 31;

            goto try_except_handler_1;
        }
        assert(tmp_class_creation_1__metaclass == NULL);
        tmp_class_creation_1__metaclass = tmp_assign_source_10;
    }
    {
        bool tmp_condition_result_3;
        PyObject *tmp_key_value_3;
        PyObject *tmp_dict_arg_value_3;
        tmp_key_value_3 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dict_arg_value_3 = tmp_class_creation_1__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_3, tmp_key_value_3);
        assert(!(tmp_res == -1));
        tmp_condition_result_3 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_3 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_1__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 31;

        goto try_except_handler_1;
    }
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_expression_value_2 = tmp_class_creation_1__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_2, mod_consts[44]);
        tmp_condition_result_4 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_args_value_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_kwargs_value_1;
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_expression_value_3 = tmp_class_creation_1__metaclass;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[44]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 31;

            goto try_except_handler_1;
        }
        tmp_tuple_element_1 = mod_consts[45];
        tmp_args_value_1 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_tuple_element_1 = tmp_class_creation_1__bases;
        PyTuple_SET_ITEM0(tmp_args_value_1, 1, tmp_tuple_element_1);
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_kwargs_value_1 = tmp_class_creation_1__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 31;
        tmp_assign_source_11 = CALL_FUNCTION(tmp_called_value_1, tmp_args_value_1, tmp_kwargs_value_1);
        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_value_1);
        if (tmp_assign_source_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 31;

            goto try_except_handler_1;
        }
        assert(tmp_class_creation_1__prepared == NULL);
        tmp_class_creation_1__prepared = tmp_assign_source_11;
    }
    {
        bool tmp_condition_result_5;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_expression_value_4;
        CHECK_OBJECT(tmp_class_creation_1__prepared);
        tmp_expression_value_4 = tmp_class_creation_1__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_4, mod_consts[46]);
        tmp_operand_value_1 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 31;

            goto try_except_handler_1;
        }
        tmp_condition_result_5 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_5 != false) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_raise_value_1;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_getattr_target_1;
        PyObject *tmp_getattr_attr_1;
        PyObject *tmp_getattr_default_1;
        tmp_raise_type_1 = PyExc_TypeError;
        tmp_left_value_1 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_getattr_target_1 = tmp_class_creation_1__metaclass;
        tmp_getattr_attr_1 = mod_consts[48];
        tmp_getattr_default_1 = mod_consts[49];
        tmp_tuple_element_2 = BUILTIN_GETATTR(tmp_getattr_target_1, tmp_getattr_attr_1, tmp_getattr_default_1);
        if (tmp_tuple_element_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 31;

            goto try_except_handler_1;
        }
        tmp_right_value_1 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_5;
            PyObject *tmp_type_arg_2;
            PyTuple_SET_ITEM(tmp_right_value_1, 0, tmp_tuple_element_2);
            CHECK_OBJECT(tmp_class_creation_1__prepared);
            tmp_type_arg_2 = tmp_class_creation_1__prepared;
            tmp_expression_value_5 = BUILTIN_TYPE1(tmp_type_arg_2);
            assert(!(tmp_expression_value_5 == NULL));
            tmp_tuple_element_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[48]);
            Py_DECREF(tmp_expression_value_5);
            if (tmp_tuple_element_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 31;

                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_right_value_1, 1, tmp_tuple_element_2);
        }
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_right_value_1);
        goto try_except_handler_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        tmp_raise_value_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_1, tmp_right_value_1);
        Py_DECREF(tmp_right_value_1);
        if (tmp_raise_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 31;

            goto try_except_handler_1;
        }
        exception_type = tmp_raise_type_1;
        Py_INCREF(tmp_raise_type_1);
        exception_value = tmp_raise_value_1;
        exception_lineno = 31;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_1;
    }
    branch_no_3:;
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_assign_source_12;
        tmp_assign_source_12 = PyDict_New();
        assert(tmp_class_creation_1__prepared == NULL);
        tmp_class_creation_1__prepared = tmp_assign_source_12;
    }
    branch_end_2:;
    {
        PyObject *tmp_assign_source_13;
        {
            PyObject *tmp_set_locals_1;
            CHECK_OBJECT(tmp_class_creation_1__prepared);
            tmp_set_locals_1 = tmp_class_creation_1__prepared;
            locals_botocore$exceptions$$$class__1_BotoCoreError_31 = tmp_set_locals_1;
            Py_INCREF(tmp_set_locals_1);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__1_BotoCoreError_31, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 31;

            goto try_except_handler_3;
        }
        tmp_dictset_value = mod_consts[52];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__1_BotoCoreError_31, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 31;

            goto try_except_handler_3;
        }
        tmp_dictset_value = mod_consts[45];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__1_BotoCoreError_31, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 31;

            goto try_except_handler_3;
        }
        if (isFrameUnusable(cache_frame_565641311b984b0e245ea11a93daaedf_2)) {
            Py_XDECREF(cache_frame_565641311b984b0e245ea11a93daaedf_2);

#if _DEBUG_REFCOUNTS
            if (cache_frame_565641311b984b0e245ea11a93daaedf_2 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_565641311b984b0e245ea11a93daaedf_2 = MAKE_FUNCTION_FRAME(codeobj_565641311b984b0e245ea11a93daaedf, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_565641311b984b0e245ea11a93daaedf_2->m_type_description == NULL);
        frame_565641311b984b0e245ea11a93daaedf_2 = cache_frame_565641311b984b0e245ea11a93daaedf_2;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_565641311b984b0e245ea11a93daaedf_2);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_565641311b984b0e245ea11a93daaedf_2) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[54];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__1_BotoCoreError_31, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 37;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }


        tmp_dictset_value = MAKE_FUNCTION_botocore$exceptions$$$function__2___init__();

        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__1_BotoCoreError_31, mod_consts[3], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 39;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }


        tmp_dictset_value = MAKE_FUNCTION_botocore$exceptions$$$function__3___reduce__();

        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__1_BotoCoreError_31, mod_consts[56], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 44;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_565641311b984b0e245ea11a93daaedf_2);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_1;

        frame_exception_exit_2:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_565641311b984b0e245ea11a93daaedf_2);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_565641311b984b0e245ea11a93daaedf_2, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_565641311b984b0e245ea11a93daaedf_2->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_565641311b984b0e245ea11a93daaedf_2, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_565641311b984b0e245ea11a93daaedf_2,
            type_description_2,
            outline_0_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_565641311b984b0e245ea11a93daaedf_2 == cache_frame_565641311b984b0e245ea11a93daaedf_2) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_565641311b984b0e245ea11a93daaedf_2);
            cache_frame_565641311b984b0e245ea11a93daaedf_2 = NULL;
        }

        assertFrameObject(frame_565641311b984b0e245ea11a93daaedf_2);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_1;

        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_1:;

        goto try_except_handler_3;
        skip_nested_handling_1:;
        {
            nuitka_bool tmp_condition_result_6;
            PyObject *tmp_cmp_expr_left_1;
            PyObject *tmp_cmp_expr_right_1;
            CHECK_OBJECT(tmp_class_creation_1__bases);
            tmp_cmp_expr_left_1 = tmp_class_creation_1__bases;
            tmp_cmp_expr_right_1 = mod_consts[42];
            tmp_condition_result_6 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
            if (tmp_condition_result_6 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 31;

                goto try_except_handler_3;
            }
            if (tmp_condition_result_6 == NUITKA_BOOL_TRUE) {
                goto branch_yes_4;
            } else {
                goto branch_no_4;
            }
            assert(tmp_condition_result_6 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_4:;
        tmp_dictset_value = mod_consts[42];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__1_BotoCoreError_31, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 31;

            goto try_except_handler_3;
        }
        branch_no_4:;
        {
            PyObject *tmp_assign_source_14;
            PyObject *tmp_called_value_2;
            PyObject *tmp_args_value_2;
            PyObject *tmp_tuple_element_3;
            PyObject *tmp_kwargs_value_2;
            CHECK_OBJECT(tmp_class_creation_1__metaclass);
            tmp_called_value_2 = tmp_class_creation_1__metaclass;
            tmp_tuple_element_3 = mod_consts[45];
            tmp_args_value_2 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_2, 0, tmp_tuple_element_3);
            CHECK_OBJECT(tmp_class_creation_1__bases);
            tmp_tuple_element_3 = tmp_class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_2, 1, tmp_tuple_element_3);
            tmp_tuple_element_3 = locals_botocore$exceptions$$$class__1_BotoCoreError_31;
            PyTuple_SET_ITEM0(tmp_args_value_2, 2, tmp_tuple_element_3);
            CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
            tmp_kwargs_value_2 = tmp_class_creation_1__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 31;
            tmp_assign_source_14 = CALL_FUNCTION(tmp_called_value_2, tmp_args_value_2, tmp_kwargs_value_2);
            Py_DECREF(tmp_args_value_2);
            if (tmp_assign_source_14 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 31;

                goto try_except_handler_3;
            }
            assert(outline_0_var___class__ == NULL);
            outline_0_var___class__ = tmp_assign_source_14;
        }
        CHECK_OBJECT(outline_0_var___class__);
        tmp_assign_source_13 = outline_0_var___class__;
        Py_INCREF(tmp_assign_source_13);
        goto try_return_handler_3;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_3:;
        Py_DECREF(locals_botocore$exceptions$$$class__1_BotoCoreError_31);
        locals_botocore$exceptions$$$class__1_BotoCoreError_31 = NULL;
        goto try_return_handler_2;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__1_BotoCoreError_31);
        locals_botocore$exceptions$$$class__1_BotoCoreError_31 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto try_except_handler_2;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        CHECK_OBJECT(outline_0_var___class__);
        Py_DECREF(outline_0_var___class__);
        outline_0_var___class__ = NULL;
        goto outline_result_1;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto outline_exception_1;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_1:;
        exception_lineno = 31;
        goto try_except_handler_1;
        outline_result_1:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45], tmp_assign_source_13);
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_1__bases);
    tmp_class_creation_1__bases = NULL;
    Py_XDECREF(tmp_class_creation_1__class_decl_dict);
    tmp_class_creation_1__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_1__metaclass);
    tmp_class_creation_1__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_1__prepared);
    tmp_class_creation_1__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    CHECK_OBJECT(tmp_class_creation_1__bases);
    Py_DECREF(tmp_class_creation_1__bases);
    tmp_class_creation_1__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
    Py_DECREF(tmp_class_creation_1__class_decl_dict);
    tmp_class_creation_1__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_1__metaclass);
    Py_DECREF(tmp_class_creation_1__metaclass);
    tmp_class_creation_1__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_1__prepared);
    Py_DECREF(tmp_class_creation_1__prepared);
    tmp_class_creation_1__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_tuple_element_4;
        tmp_tuple_element_4 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_4 == NULL)) {
            tmp_tuple_element_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_4;
        }
        tmp_assign_source_15 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_15, 0, tmp_tuple_element_4);
        assert(tmp_class_creation_2__bases_orig == NULL);
        tmp_class_creation_2__bases_orig = tmp_assign_source_15;
    }
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_dircall_arg1_2;
        CHECK_OBJECT(tmp_class_creation_2__bases_orig);
        tmp_dircall_arg1_2 = tmp_class_creation_2__bases_orig;
        Py_INCREF(tmp_dircall_arg1_2);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_2};
            tmp_assign_source_16 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_4;
        }
        assert(tmp_class_creation_2__bases == NULL);
        tmp_class_creation_2__bases = tmp_assign_source_16;
    }
    {
        PyObject *tmp_assign_source_17;
        tmp_assign_source_17 = PyDict_New();
        assert(tmp_class_creation_2__class_decl_dict == NULL);
        tmp_class_creation_2__class_decl_dict = tmp_assign_source_17;
    }
    {
        PyObject *tmp_assign_source_18;
        PyObject *tmp_metaclass_value_2;
        bool tmp_condition_result_7;
        PyObject *tmp_key_value_4;
        PyObject *tmp_dict_arg_value_4;
        PyObject *tmp_dict_arg_value_5;
        PyObject *tmp_key_value_5;
        nuitka_bool tmp_condition_result_8;
        int tmp_truth_name_2;
        PyObject *tmp_type_arg_3;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_subscript_value_2;
        PyObject *tmp_bases_value_2;
        tmp_key_value_4 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_dict_arg_value_4 = tmp_class_creation_2__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_4, tmp_key_value_4);
        assert(!(tmp_res == -1));
        tmp_condition_result_7 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_7 != false) {
            goto condexpr_true_3;
        } else {
            goto condexpr_false_3;
        }
        condexpr_true_3:;
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_dict_arg_value_5 = tmp_class_creation_2__class_decl_dict;
        tmp_key_value_5 = mod_consts[43];
        tmp_metaclass_value_2 = DICT_GET_ITEM0(tmp_dict_arg_value_5, tmp_key_value_5);
        if (tmp_metaclass_value_2 == NULL) {
            tmp_metaclass_value_2 = Py_None;
        }
        assert(!(tmp_metaclass_value_2 == NULL));
        Py_INCREF(tmp_metaclass_value_2);
        goto condexpr_end_3;
        condexpr_false_3:;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_class_creation_2__bases);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_4;
        }
        tmp_condition_result_8 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_8 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_4;
        } else {
            goto condexpr_false_4;
        }
        condexpr_true_4:;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_expression_value_6 = tmp_class_creation_2__bases;
        tmp_subscript_value_2 = mod_consts[36];
        tmp_type_arg_3 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_6, tmp_subscript_value_2, 0);
        if (tmp_type_arg_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_4;
        }
        tmp_metaclass_value_2 = BUILTIN_TYPE1(tmp_type_arg_3);
        Py_DECREF(tmp_type_arg_3);
        if (tmp_metaclass_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_4;
        }
        goto condexpr_end_4;
        condexpr_false_4:;
        tmp_metaclass_value_2 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_2);
        condexpr_end_4:;
        condexpr_end_3:;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_bases_value_2 = tmp_class_creation_2__bases;
        tmp_assign_source_18 = SELECT_METACLASS(tmp_metaclass_value_2, tmp_bases_value_2);
        Py_DECREF(tmp_metaclass_value_2);
        if (tmp_assign_source_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_4;
        }
        assert(tmp_class_creation_2__metaclass == NULL);
        tmp_class_creation_2__metaclass = tmp_assign_source_18;
    }
    {
        bool tmp_condition_result_9;
        PyObject *tmp_key_value_6;
        PyObject *tmp_dict_arg_value_6;
        tmp_key_value_6 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_dict_arg_value_6 = tmp_class_creation_2__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_6, tmp_key_value_6);
        assert(!(tmp_res == -1));
        tmp_condition_result_9 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_9 != false) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
    }
    branch_yes_5:;
    CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_2__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 48;

        goto try_except_handler_4;
    }
    branch_no_5:;
    {
        nuitka_bool tmp_condition_result_10;
        PyObject *tmp_expression_value_7;
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_expression_value_7 = tmp_class_creation_2__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_7, mod_consts[44]);
        tmp_condition_result_10 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_10 == NUITKA_BOOL_TRUE) {
            goto branch_yes_6;
        } else {
            goto branch_no_6;
        }
    }
    branch_yes_6:;
    {
        PyObject *tmp_assign_source_19;
        PyObject *tmp_called_value_3;
        PyObject *tmp_expression_value_8;
        PyObject *tmp_args_value_3;
        PyObject *tmp_tuple_element_5;
        PyObject *tmp_kwargs_value_3;
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_expression_value_8 = tmp_class_creation_2__metaclass;
        tmp_called_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_8, mod_consts[44]);
        if (tmp_called_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_4;
        }
        tmp_tuple_element_5 = mod_consts[59];
        tmp_args_value_3 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_3, 0, tmp_tuple_element_5);
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_tuple_element_5 = tmp_class_creation_2__bases;
        PyTuple_SET_ITEM0(tmp_args_value_3, 1, tmp_tuple_element_5);
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_kwargs_value_3 = tmp_class_creation_2__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 48;
        tmp_assign_source_19 = CALL_FUNCTION(tmp_called_value_3, tmp_args_value_3, tmp_kwargs_value_3);
        Py_DECREF(tmp_called_value_3);
        Py_DECREF(tmp_args_value_3);
        if (tmp_assign_source_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_4;
        }
        assert(tmp_class_creation_2__prepared == NULL);
        tmp_class_creation_2__prepared = tmp_assign_source_19;
    }
    {
        bool tmp_condition_result_11;
        PyObject *tmp_operand_value_2;
        PyObject *tmp_expression_value_9;
        CHECK_OBJECT(tmp_class_creation_2__prepared);
        tmp_expression_value_9 = tmp_class_creation_2__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_9, mod_consts[46]);
        tmp_operand_value_2 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_4;
        }
        tmp_condition_result_11 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_11 != false) {
            goto branch_yes_7;
        } else {
            goto branch_no_7;
        }
    }
    branch_yes_7:;
    {
        PyObject *tmp_raise_type_2;
        PyObject *tmp_raise_value_2;
        PyObject *tmp_left_value_2;
        PyObject *tmp_right_value_2;
        PyObject *tmp_tuple_element_6;
        PyObject *tmp_getattr_target_2;
        PyObject *tmp_getattr_attr_2;
        PyObject *tmp_getattr_default_2;
        tmp_raise_type_2 = PyExc_TypeError;
        tmp_left_value_2 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_getattr_target_2 = tmp_class_creation_2__metaclass;
        tmp_getattr_attr_2 = mod_consts[48];
        tmp_getattr_default_2 = mod_consts[49];
        tmp_tuple_element_6 = BUILTIN_GETATTR(tmp_getattr_target_2, tmp_getattr_attr_2, tmp_getattr_default_2);
        if (tmp_tuple_element_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_4;
        }
        tmp_right_value_2 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_10;
            PyObject *tmp_type_arg_4;
            PyTuple_SET_ITEM(tmp_right_value_2, 0, tmp_tuple_element_6);
            CHECK_OBJECT(tmp_class_creation_2__prepared);
            tmp_type_arg_4 = tmp_class_creation_2__prepared;
            tmp_expression_value_10 = BUILTIN_TYPE1(tmp_type_arg_4);
            assert(!(tmp_expression_value_10 == NULL));
            tmp_tuple_element_6 = LOOKUP_ATTRIBUTE(tmp_expression_value_10, mod_consts[48]);
            Py_DECREF(tmp_expression_value_10);
            if (tmp_tuple_element_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 48;

                goto tuple_build_exception_2;
            }
            PyTuple_SET_ITEM(tmp_right_value_2, 1, tmp_tuple_element_6);
        }
        goto tuple_build_noexception_2;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_2:;
        Py_DECREF(tmp_right_value_2);
        goto try_except_handler_4;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_2:;
        tmp_raise_value_2 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_2, tmp_right_value_2);
        Py_DECREF(tmp_right_value_2);
        if (tmp_raise_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_4;
        }
        exception_type = tmp_raise_type_2;
        Py_INCREF(tmp_raise_type_2);
        exception_value = tmp_raise_value_2;
        exception_lineno = 48;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_4;
    }
    branch_no_7:;
    goto branch_end_6;
    branch_no_6:;
    {
        PyObject *tmp_assign_source_20;
        tmp_assign_source_20 = PyDict_New();
        assert(tmp_class_creation_2__prepared == NULL);
        tmp_class_creation_2__prepared = tmp_assign_source_20;
    }
    branch_end_6:;
    {
        PyObject *tmp_assign_source_21;
        {
            PyObject *tmp_set_locals_2;
            CHECK_OBJECT(tmp_class_creation_2__prepared);
            tmp_set_locals_2 = tmp_class_creation_2__prepared;
            locals_botocore$exceptions$$$class__2_DataNotFoundError_48 = tmp_set_locals_2;
            Py_INCREF(tmp_set_locals_2);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__2_DataNotFoundError_48, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_6;
        }
        tmp_dictset_value = mod_consts[60];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__2_DataNotFoundError_48, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_6;
        }
        tmp_dictset_value = mod_consts[59];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__2_DataNotFoundError_48, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_6;
        }
        if (isFrameUnusable(cache_frame_274c2935eb7ac086612f1216debaa02b_3)) {
            Py_XDECREF(cache_frame_274c2935eb7ac086612f1216debaa02b_3);

#if _DEBUG_REFCOUNTS
            if (cache_frame_274c2935eb7ac086612f1216debaa02b_3 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_274c2935eb7ac086612f1216debaa02b_3 = MAKE_FUNCTION_FRAME(codeobj_274c2935eb7ac086612f1216debaa02b, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_274c2935eb7ac086612f1216debaa02b_3->m_type_description == NULL);
        frame_274c2935eb7ac086612f1216debaa02b_3 = cache_frame_274c2935eb7ac086612f1216debaa02b_3;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_274c2935eb7ac086612f1216debaa02b_3);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_274c2935eb7ac086612f1216debaa02b_3) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[61];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__2_DataNotFoundError_48, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 54;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_274c2935eb7ac086612f1216debaa02b_3);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_2;

        frame_exception_exit_3:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_274c2935eb7ac086612f1216debaa02b_3);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_274c2935eb7ac086612f1216debaa02b_3, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_274c2935eb7ac086612f1216debaa02b_3->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_274c2935eb7ac086612f1216debaa02b_3, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_274c2935eb7ac086612f1216debaa02b_3,
            type_description_2,
            outline_1_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_274c2935eb7ac086612f1216debaa02b_3 == cache_frame_274c2935eb7ac086612f1216debaa02b_3) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_274c2935eb7ac086612f1216debaa02b_3);
            cache_frame_274c2935eb7ac086612f1216debaa02b_3 = NULL;
        }

        assertFrameObject(frame_274c2935eb7ac086612f1216debaa02b_3);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_2;

        frame_no_exception_2:;
        goto skip_nested_handling_2;
        nested_frame_exit_2:;

        goto try_except_handler_6;
        skip_nested_handling_2:;
        {
            nuitka_bool tmp_condition_result_12;
            PyObject *tmp_cmp_expr_left_2;
            PyObject *tmp_cmp_expr_right_2;
            CHECK_OBJECT(tmp_class_creation_2__bases);
            tmp_cmp_expr_left_2 = tmp_class_creation_2__bases;
            CHECK_OBJECT(tmp_class_creation_2__bases_orig);
            tmp_cmp_expr_right_2 = tmp_class_creation_2__bases_orig;
            tmp_condition_result_12 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_2, tmp_cmp_expr_right_2);
            if (tmp_condition_result_12 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 48;

                goto try_except_handler_6;
            }
            if (tmp_condition_result_12 == NUITKA_BOOL_TRUE) {
                goto branch_yes_8;
            } else {
                goto branch_no_8;
            }
            assert(tmp_condition_result_12 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_8:;
        CHECK_OBJECT(tmp_class_creation_2__bases_orig);
        tmp_dictset_value = tmp_class_creation_2__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__2_DataNotFoundError_48, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_6;
        }
        branch_no_8:;
        {
            PyObject *tmp_assign_source_22;
            PyObject *tmp_called_value_4;
            PyObject *tmp_args_value_4;
            PyObject *tmp_tuple_element_7;
            PyObject *tmp_kwargs_value_4;
            CHECK_OBJECT(tmp_class_creation_2__metaclass);
            tmp_called_value_4 = tmp_class_creation_2__metaclass;
            tmp_tuple_element_7 = mod_consts[59];
            tmp_args_value_4 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_4, 0, tmp_tuple_element_7);
            CHECK_OBJECT(tmp_class_creation_2__bases);
            tmp_tuple_element_7 = tmp_class_creation_2__bases;
            PyTuple_SET_ITEM0(tmp_args_value_4, 1, tmp_tuple_element_7);
            tmp_tuple_element_7 = locals_botocore$exceptions$$$class__2_DataNotFoundError_48;
            PyTuple_SET_ITEM0(tmp_args_value_4, 2, tmp_tuple_element_7);
            CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
            tmp_kwargs_value_4 = tmp_class_creation_2__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 48;
            tmp_assign_source_22 = CALL_FUNCTION(tmp_called_value_4, tmp_args_value_4, tmp_kwargs_value_4);
            Py_DECREF(tmp_args_value_4);
            if (tmp_assign_source_22 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 48;

                goto try_except_handler_6;
            }
            assert(outline_1_var___class__ == NULL);
            outline_1_var___class__ = tmp_assign_source_22;
        }
        CHECK_OBJECT(outline_1_var___class__);
        tmp_assign_source_21 = outline_1_var___class__;
        Py_INCREF(tmp_assign_source_21);
        goto try_return_handler_6;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_6:;
        Py_DECREF(locals_botocore$exceptions$$$class__2_DataNotFoundError_48);
        locals_botocore$exceptions$$$class__2_DataNotFoundError_48 = NULL;
        goto try_return_handler_5;
        // Exception handler code:
        try_except_handler_6:;
        exception_keeper_type_4 = exception_type;
        exception_keeper_value_4 = exception_value;
        exception_keeper_tb_4 = exception_tb;
        exception_keeper_lineno_4 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__2_DataNotFoundError_48);
        locals_botocore$exceptions$$$class__2_DataNotFoundError_48 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;
        exception_lineno = exception_keeper_lineno_4;

        goto try_except_handler_5;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_5:;
        CHECK_OBJECT(outline_1_var___class__);
        Py_DECREF(outline_1_var___class__);
        outline_1_var___class__ = NULL;
        goto outline_result_2;
        // Exception handler code:
        try_except_handler_5:;
        exception_keeper_type_5 = exception_type;
        exception_keeper_value_5 = exception_value;
        exception_keeper_tb_5 = exception_tb;
        exception_keeper_lineno_5 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;
        exception_lineno = exception_keeper_lineno_5;

        goto outline_exception_2;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_2:;
        exception_lineno = 48;
        goto try_except_handler_4;
        outline_result_2:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[59], tmp_assign_source_21);
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_2__bases_orig);
    tmp_class_creation_2__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_2__bases);
    tmp_class_creation_2__bases = NULL;
    Py_XDECREF(tmp_class_creation_2__class_decl_dict);
    tmp_class_creation_2__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_2__metaclass);
    tmp_class_creation_2__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_2__prepared);
    tmp_class_creation_2__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(tmp_class_creation_2__bases_orig);
    Py_DECREF(tmp_class_creation_2__bases_orig);
    tmp_class_creation_2__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_2__bases);
    Py_DECREF(tmp_class_creation_2__bases);
    tmp_class_creation_2__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
    Py_DECREF(tmp_class_creation_2__class_decl_dict);
    tmp_class_creation_2__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_2__metaclass);
    Py_DECREF(tmp_class_creation_2__metaclass);
    tmp_class_creation_2__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_2__prepared);
    Py_DECREF(tmp_class_creation_2__prepared);
    tmp_class_creation_2__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_23;
        PyObject *tmp_tuple_element_8;
        tmp_tuple_element_8 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[59]);

        if (unlikely(tmp_tuple_element_8 == NULL)) {
            tmp_tuple_element_8 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[59]);
        }

        if (tmp_tuple_element_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;

            goto try_except_handler_7;
        }
        tmp_assign_source_23 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_23, 0, tmp_tuple_element_8);
        assert(tmp_class_creation_3__bases_orig == NULL);
        tmp_class_creation_3__bases_orig = tmp_assign_source_23;
    }
    {
        PyObject *tmp_assign_source_24;
        PyObject *tmp_dircall_arg1_3;
        CHECK_OBJECT(tmp_class_creation_3__bases_orig);
        tmp_dircall_arg1_3 = tmp_class_creation_3__bases_orig;
        Py_INCREF(tmp_dircall_arg1_3);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_3};
            tmp_assign_source_24 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;

            goto try_except_handler_7;
        }
        assert(tmp_class_creation_3__bases == NULL);
        tmp_class_creation_3__bases = tmp_assign_source_24;
    }
    {
        PyObject *tmp_assign_source_25;
        tmp_assign_source_25 = PyDict_New();
        assert(tmp_class_creation_3__class_decl_dict == NULL);
        tmp_class_creation_3__class_decl_dict = tmp_assign_source_25;
    }
    {
        PyObject *tmp_assign_source_26;
        PyObject *tmp_metaclass_value_3;
        bool tmp_condition_result_13;
        PyObject *tmp_key_value_7;
        PyObject *tmp_dict_arg_value_7;
        PyObject *tmp_dict_arg_value_8;
        PyObject *tmp_key_value_8;
        nuitka_bool tmp_condition_result_14;
        int tmp_truth_name_3;
        PyObject *tmp_type_arg_5;
        PyObject *tmp_expression_value_11;
        PyObject *tmp_subscript_value_3;
        PyObject *tmp_bases_value_3;
        tmp_key_value_7 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_dict_arg_value_7 = tmp_class_creation_3__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_7, tmp_key_value_7);
        assert(!(tmp_res == -1));
        tmp_condition_result_13 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_13 != false) {
            goto condexpr_true_5;
        } else {
            goto condexpr_false_5;
        }
        condexpr_true_5:;
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_dict_arg_value_8 = tmp_class_creation_3__class_decl_dict;
        tmp_key_value_8 = mod_consts[43];
        tmp_metaclass_value_3 = DICT_GET_ITEM0(tmp_dict_arg_value_8, tmp_key_value_8);
        if (tmp_metaclass_value_3 == NULL) {
            tmp_metaclass_value_3 = Py_None;
        }
        assert(!(tmp_metaclass_value_3 == NULL));
        Py_INCREF(tmp_metaclass_value_3);
        goto condexpr_end_5;
        condexpr_false_5:;
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_truth_name_3 = CHECK_IF_TRUE(tmp_class_creation_3__bases);
        if (tmp_truth_name_3 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;

            goto try_except_handler_7;
        }
        tmp_condition_result_14 = tmp_truth_name_3 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_14 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_6;
        } else {
            goto condexpr_false_6;
        }
        condexpr_true_6:;
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_expression_value_11 = tmp_class_creation_3__bases;
        tmp_subscript_value_3 = mod_consts[36];
        tmp_type_arg_5 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_11, tmp_subscript_value_3, 0);
        if (tmp_type_arg_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;

            goto try_except_handler_7;
        }
        tmp_metaclass_value_3 = BUILTIN_TYPE1(tmp_type_arg_5);
        Py_DECREF(tmp_type_arg_5);
        if (tmp_metaclass_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;

            goto try_except_handler_7;
        }
        goto condexpr_end_6;
        condexpr_false_6:;
        tmp_metaclass_value_3 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_3);
        condexpr_end_6:;
        condexpr_end_5:;
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_bases_value_3 = tmp_class_creation_3__bases;
        tmp_assign_source_26 = SELECT_METACLASS(tmp_metaclass_value_3, tmp_bases_value_3);
        Py_DECREF(tmp_metaclass_value_3);
        if (tmp_assign_source_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;

            goto try_except_handler_7;
        }
        assert(tmp_class_creation_3__metaclass == NULL);
        tmp_class_creation_3__metaclass = tmp_assign_source_26;
    }
    {
        bool tmp_condition_result_15;
        PyObject *tmp_key_value_9;
        PyObject *tmp_dict_arg_value_9;
        tmp_key_value_9 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_dict_arg_value_9 = tmp_class_creation_3__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_9, tmp_key_value_9);
        assert(!(tmp_res == -1));
        tmp_condition_result_15 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_15 != false) {
            goto branch_yes_9;
        } else {
            goto branch_no_9;
        }
    }
    branch_yes_9:;
    CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_3__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 57;

        goto try_except_handler_7;
    }
    branch_no_9:;
    {
        nuitka_bool tmp_condition_result_16;
        PyObject *tmp_expression_value_12;
        CHECK_OBJECT(tmp_class_creation_3__metaclass);
        tmp_expression_value_12 = tmp_class_creation_3__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_12, mod_consts[44]);
        tmp_condition_result_16 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_16 == NUITKA_BOOL_TRUE) {
            goto branch_yes_10;
        } else {
            goto branch_no_10;
        }
    }
    branch_yes_10:;
    {
        PyObject *tmp_assign_source_27;
        PyObject *tmp_called_value_5;
        PyObject *tmp_expression_value_13;
        PyObject *tmp_args_value_5;
        PyObject *tmp_tuple_element_9;
        PyObject *tmp_kwargs_value_5;
        CHECK_OBJECT(tmp_class_creation_3__metaclass);
        tmp_expression_value_13 = tmp_class_creation_3__metaclass;
        tmp_called_value_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_13, mod_consts[44]);
        if (tmp_called_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;

            goto try_except_handler_7;
        }
        tmp_tuple_element_9 = mod_consts[62];
        tmp_args_value_5 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_5, 0, tmp_tuple_element_9);
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_tuple_element_9 = tmp_class_creation_3__bases;
        PyTuple_SET_ITEM0(tmp_args_value_5, 1, tmp_tuple_element_9);
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_kwargs_value_5 = tmp_class_creation_3__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 57;
        tmp_assign_source_27 = CALL_FUNCTION(tmp_called_value_5, tmp_args_value_5, tmp_kwargs_value_5);
        Py_DECREF(tmp_called_value_5);
        Py_DECREF(tmp_args_value_5);
        if (tmp_assign_source_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;

            goto try_except_handler_7;
        }
        assert(tmp_class_creation_3__prepared == NULL);
        tmp_class_creation_3__prepared = tmp_assign_source_27;
    }
    {
        bool tmp_condition_result_17;
        PyObject *tmp_operand_value_3;
        PyObject *tmp_expression_value_14;
        CHECK_OBJECT(tmp_class_creation_3__prepared);
        tmp_expression_value_14 = tmp_class_creation_3__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_14, mod_consts[46]);
        tmp_operand_value_3 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_3);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;

            goto try_except_handler_7;
        }
        tmp_condition_result_17 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_17 != false) {
            goto branch_yes_11;
        } else {
            goto branch_no_11;
        }
    }
    branch_yes_11:;
    {
        PyObject *tmp_raise_type_3;
        PyObject *tmp_raise_value_3;
        PyObject *tmp_left_value_3;
        PyObject *tmp_right_value_3;
        PyObject *tmp_tuple_element_10;
        PyObject *tmp_getattr_target_3;
        PyObject *tmp_getattr_attr_3;
        PyObject *tmp_getattr_default_3;
        tmp_raise_type_3 = PyExc_TypeError;
        tmp_left_value_3 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_3__metaclass);
        tmp_getattr_target_3 = tmp_class_creation_3__metaclass;
        tmp_getattr_attr_3 = mod_consts[48];
        tmp_getattr_default_3 = mod_consts[49];
        tmp_tuple_element_10 = BUILTIN_GETATTR(tmp_getattr_target_3, tmp_getattr_attr_3, tmp_getattr_default_3);
        if (tmp_tuple_element_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;

            goto try_except_handler_7;
        }
        tmp_right_value_3 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_15;
            PyObject *tmp_type_arg_6;
            PyTuple_SET_ITEM(tmp_right_value_3, 0, tmp_tuple_element_10);
            CHECK_OBJECT(tmp_class_creation_3__prepared);
            tmp_type_arg_6 = tmp_class_creation_3__prepared;
            tmp_expression_value_15 = BUILTIN_TYPE1(tmp_type_arg_6);
            assert(!(tmp_expression_value_15 == NULL));
            tmp_tuple_element_10 = LOOKUP_ATTRIBUTE(tmp_expression_value_15, mod_consts[48]);
            Py_DECREF(tmp_expression_value_15);
            if (tmp_tuple_element_10 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 57;

                goto tuple_build_exception_3;
            }
            PyTuple_SET_ITEM(tmp_right_value_3, 1, tmp_tuple_element_10);
        }
        goto tuple_build_noexception_3;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_3:;
        Py_DECREF(tmp_right_value_3);
        goto try_except_handler_7;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_3:;
        tmp_raise_value_3 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_3, tmp_right_value_3);
        Py_DECREF(tmp_right_value_3);
        if (tmp_raise_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;

            goto try_except_handler_7;
        }
        exception_type = tmp_raise_type_3;
        Py_INCREF(tmp_raise_type_3);
        exception_value = tmp_raise_value_3;
        exception_lineno = 57;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_7;
    }
    branch_no_11:;
    goto branch_end_10;
    branch_no_10:;
    {
        PyObject *tmp_assign_source_28;
        tmp_assign_source_28 = PyDict_New();
        assert(tmp_class_creation_3__prepared == NULL);
        tmp_class_creation_3__prepared = tmp_assign_source_28;
    }
    branch_end_10:;
    {
        PyObject *tmp_assign_source_29;
        {
            PyObject *tmp_set_locals_3;
            CHECK_OBJECT(tmp_class_creation_3__prepared);
            tmp_set_locals_3 = tmp_class_creation_3__prepared;
            locals_botocore$exceptions$$$class__3_UnknownServiceError_57 = tmp_set_locals_3;
            Py_INCREF(tmp_set_locals_3);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__3_UnknownServiceError_57, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;

            goto try_except_handler_9;
        }
        tmp_dictset_value = mod_consts[63];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__3_UnknownServiceError_57, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;

            goto try_except_handler_9;
        }
        tmp_dictset_value = mod_consts[62];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__3_UnknownServiceError_57, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;

            goto try_except_handler_9;
        }
        if (isFrameUnusable(cache_frame_0b9bc0f27a79d49074a1e90322b56e33_4)) {
            Py_XDECREF(cache_frame_0b9bc0f27a79d49074a1e90322b56e33_4);

#if _DEBUG_REFCOUNTS
            if (cache_frame_0b9bc0f27a79d49074a1e90322b56e33_4 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_0b9bc0f27a79d49074a1e90322b56e33_4 = MAKE_FUNCTION_FRAME(codeobj_0b9bc0f27a79d49074a1e90322b56e33, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_0b9bc0f27a79d49074a1e90322b56e33_4->m_type_description == NULL);
        frame_0b9bc0f27a79d49074a1e90322b56e33_4 = cache_frame_0b9bc0f27a79d49074a1e90322b56e33_4;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_0b9bc0f27a79d49074a1e90322b56e33_4);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_0b9bc0f27a79d49074a1e90322b56e33_4) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[64];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__3_UnknownServiceError_57, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 63;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_0b9bc0f27a79d49074a1e90322b56e33_4);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_3;

        frame_exception_exit_4:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_0b9bc0f27a79d49074a1e90322b56e33_4);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_0b9bc0f27a79d49074a1e90322b56e33_4, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_0b9bc0f27a79d49074a1e90322b56e33_4->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_0b9bc0f27a79d49074a1e90322b56e33_4, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_0b9bc0f27a79d49074a1e90322b56e33_4,
            type_description_2,
            outline_2_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_0b9bc0f27a79d49074a1e90322b56e33_4 == cache_frame_0b9bc0f27a79d49074a1e90322b56e33_4) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_0b9bc0f27a79d49074a1e90322b56e33_4);
            cache_frame_0b9bc0f27a79d49074a1e90322b56e33_4 = NULL;
        }

        assertFrameObject(frame_0b9bc0f27a79d49074a1e90322b56e33_4);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_3;

        frame_no_exception_3:;
        goto skip_nested_handling_3;
        nested_frame_exit_3:;

        goto try_except_handler_9;
        skip_nested_handling_3:;
        {
            nuitka_bool tmp_condition_result_18;
            PyObject *tmp_cmp_expr_left_3;
            PyObject *tmp_cmp_expr_right_3;
            CHECK_OBJECT(tmp_class_creation_3__bases);
            tmp_cmp_expr_left_3 = tmp_class_creation_3__bases;
            CHECK_OBJECT(tmp_class_creation_3__bases_orig);
            tmp_cmp_expr_right_3 = tmp_class_creation_3__bases_orig;
            tmp_condition_result_18 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_3, tmp_cmp_expr_right_3);
            if (tmp_condition_result_18 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 57;

                goto try_except_handler_9;
            }
            if (tmp_condition_result_18 == NUITKA_BOOL_TRUE) {
                goto branch_yes_12;
            } else {
                goto branch_no_12;
            }
            assert(tmp_condition_result_18 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_12:;
        CHECK_OBJECT(tmp_class_creation_3__bases_orig);
        tmp_dictset_value = tmp_class_creation_3__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__3_UnknownServiceError_57, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;

            goto try_except_handler_9;
        }
        branch_no_12:;
        {
            PyObject *tmp_assign_source_30;
            PyObject *tmp_called_value_6;
            PyObject *tmp_args_value_6;
            PyObject *tmp_tuple_element_11;
            PyObject *tmp_kwargs_value_6;
            CHECK_OBJECT(tmp_class_creation_3__metaclass);
            tmp_called_value_6 = tmp_class_creation_3__metaclass;
            tmp_tuple_element_11 = mod_consts[62];
            tmp_args_value_6 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_6, 0, tmp_tuple_element_11);
            CHECK_OBJECT(tmp_class_creation_3__bases);
            tmp_tuple_element_11 = tmp_class_creation_3__bases;
            PyTuple_SET_ITEM0(tmp_args_value_6, 1, tmp_tuple_element_11);
            tmp_tuple_element_11 = locals_botocore$exceptions$$$class__3_UnknownServiceError_57;
            PyTuple_SET_ITEM0(tmp_args_value_6, 2, tmp_tuple_element_11);
            CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
            tmp_kwargs_value_6 = tmp_class_creation_3__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 57;
            tmp_assign_source_30 = CALL_FUNCTION(tmp_called_value_6, tmp_args_value_6, tmp_kwargs_value_6);
            Py_DECREF(tmp_args_value_6);
            if (tmp_assign_source_30 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 57;

                goto try_except_handler_9;
            }
            assert(outline_2_var___class__ == NULL);
            outline_2_var___class__ = tmp_assign_source_30;
        }
        CHECK_OBJECT(outline_2_var___class__);
        tmp_assign_source_29 = outline_2_var___class__;
        Py_INCREF(tmp_assign_source_29);
        goto try_return_handler_9;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_9:;
        Py_DECREF(locals_botocore$exceptions$$$class__3_UnknownServiceError_57);
        locals_botocore$exceptions$$$class__3_UnknownServiceError_57 = NULL;
        goto try_return_handler_8;
        // Exception handler code:
        try_except_handler_9:;
        exception_keeper_type_7 = exception_type;
        exception_keeper_value_7 = exception_value;
        exception_keeper_tb_7 = exception_tb;
        exception_keeper_lineno_7 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__3_UnknownServiceError_57);
        locals_botocore$exceptions$$$class__3_UnknownServiceError_57 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_7;
        exception_value = exception_keeper_value_7;
        exception_tb = exception_keeper_tb_7;
        exception_lineno = exception_keeper_lineno_7;

        goto try_except_handler_8;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_8:;
        CHECK_OBJECT(outline_2_var___class__);
        Py_DECREF(outline_2_var___class__);
        outline_2_var___class__ = NULL;
        goto outline_result_3;
        // Exception handler code:
        try_except_handler_8:;
        exception_keeper_type_8 = exception_type;
        exception_keeper_value_8 = exception_value;
        exception_keeper_tb_8 = exception_tb;
        exception_keeper_lineno_8 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;
        exception_lineno = exception_keeper_lineno_8;

        goto outline_exception_3;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_3:;
        exception_lineno = 57;
        goto try_except_handler_7;
        outline_result_3:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[62], tmp_assign_source_29);
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_9 = exception_type;
    exception_keeper_value_9 = exception_value;
    exception_keeper_tb_9 = exception_tb;
    exception_keeper_lineno_9 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_3__bases_orig);
    tmp_class_creation_3__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_3__bases);
    tmp_class_creation_3__bases = NULL;
    Py_XDECREF(tmp_class_creation_3__class_decl_dict);
    tmp_class_creation_3__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_3__metaclass);
    tmp_class_creation_3__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_3__prepared);
    tmp_class_creation_3__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_9;
    exception_value = exception_keeper_value_9;
    exception_tb = exception_keeper_tb_9;
    exception_lineno = exception_keeper_lineno_9;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    CHECK_OBJECT(tmp_class_creation_3__bases_orig);
    Py_DECREF(tmp_class_creation_3__bases_orig);
    tmp_class_creation_3__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_3__bases);
    Py_DECREF(tmp_class_creation_3__bases);
    tmp_class_creation_3__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
    Py_DECREF(tmp_class_creation_3__class_decl_dict);
    tmp_class_creation_3__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_3__metaclass);
    Py_DECREF(tmp_class_creation_3__metaclass);
    tmp_class_creation_3__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_3__prepared);
    Py_DECREF(tmp_class_creation_3__prepared);
    tmp_class_creation_3__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_31;
        PyObject *tmp_tuple_element_12;
        tmp_tuple_element_12 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_12 == NULL)) {
            tmp_tuple_element_12 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 68;

            goto try_except_handler_10;
        }
        tmp_assign_source_31 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_31, 0, tmp_tuple_element_12);
        assert(tmp_class_creation_4__bases_orig == NULL);
        tmp_class_creation_4__bases_orig = tmp_assign_source_31;
    }
    {
        PyObject *tmp_assign_source_32;
        PyObject *tmp_dircall_arg1_4;
        CHECK_OBJECT(tmp_class_creation_4__bases_orig);
        tmp_dircall_arg1_4 = tmp_class_creation_4__bases_orig;
        Py_INCREF(tmp_dircall_arg1_4);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_4};
            tmp_assign_source_32 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_32 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 68;

            goto try_except_handler_10;
        }
        assert(tmp_class_creation_4__bases == NULL);
        tmp_class_creation_4__bases = tmp_assign_source_32;
    }
    {
        PyObject *tmp_assign_source_33;
        tmp_assign_source_33 = PyDict_New();
        assert(tmp_class_creation_4__class_decl_dict == NULL);
        tmp_class_creation_4__class_decl_dict = tmp_assign_source_33;
    }
    {
        PyObject *tmp_assign_source_34;
        PyObject *tmp_metaclass_value_4;
        bool tmp_condition_result_19;
        PyObject *tmp_key_value_10;
        PyObject *tmp_dict_arg_value_10;
        PyObject *tmp_dict_arg_value_11;
        PyObject *tmp_key_value_11;
        nuitka_bool tmp_condition_result_20;
        int tmp_truth_name_4;
        PyObject *tmp_type_arg_7;
        PyObject *tmp_expression_value_16;
        PyObject *tmp_subscript_value_4;
        PyObject *tmp_bases_value_4;
        tmp_key_value_10 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
        tmp_dict_arg_value_10 = tmp_class_creation_4__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_10, tmp_key_value_10);
        assert(!(tmp_res == -1));
        tmp_condition_result_19 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_19 != false) {
            goto condexpr_true_7;
        } else {
            goto condexpr_false_7;
        }
        condexpr_true_7:;
        CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
        tmp_dict_arg_value_11 = tmp_class_creation_4__class_decl_dict;
        tmp_key_value_11 = mod_consts[43];
        tmp_metaclass_value_4 = DICT_GET_ITEM0(tmp_dict_arg_value_11, tmp_key_value_11);
        if (tmp_metaclass_value_4 == NULL) {
            tmp_metaclass_value_4 = Py_None;
        }
        assert(!(tmp_metaclass_value_4 == NULL));
        Py_INCREF(tmp_metaclass_value_4);
        goto condexpr_end_7;
        condexpr_false_7:;
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_truth_name_4 = CHECK_IF_TRUE(tmp_class_creation_4__bases);
        if (tmp_truth_name_4 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 68;

            goto try_except_handler_10;
        }
        tmp_condition_result_20 = tmp_truth_name_4 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_20 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_8;
        } else {
            goto condexpr_false_8;
        }
        condexpr_true_8:;
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_expression_value_16 = tmp_class_creation_4__bases;
        tmp_subscript_value_4 = mod_consts[36];
        tmp_type_arg_7 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_16, tmp_subscript_value_4, 0);
        if (tmp_type_arg_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 68;

            goto try_except_handler_10;
        }
        tmp_metaclass_value_4 = BUILTIN_TYPE1(tmp_type_arg_7);
        Py_DECREF(tmp_type_arg_7);
        if (tmp_metaclass_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 68;

            goto try_except_handler_10;
        }
        goto condexpr_end_8;
        condexpr_false_8:;
        tmp_metaclass_value_4 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_4);
        condexpr_end_8:;
        condexpr_end_7:;
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_bases_value_4 = tmp_class_creation_4__bases;
        tmp_assign_source_34 = SELECT_METACLASS(tmp_metaclass_value_4, tmp_bases_value_4);
        Py_DECREF(tmp_metaclass_value_4);
        if (tmp_assign_source_34 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 68;

            goto try_except_handler_10;
        }
        assert(tmp_class_creation_4__metaclass == NULL);
        tmp_class_creation_4__metaclass = tmp_assign_source_34;
    }
    {
        bool tmp_condition_result_21;
        PyObject *tmp_key_value_12;
        PyObject *tmp_dict_arg_value_12;
        tmp_key_value_12 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
        tmp_dict_arg_value_12 = tmp_class_creation_4__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_12, tmp_key_value_12);
        assert(!(tmp_res == -1));
        tmp_condition_result_21 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_21 != false) {
            goto branch_yes_13;
        } else {
            goto branch_no_13;
        }
    }
    branch_yes_13:;
    CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_4__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 68;

        goto try_except_handler_10;
    }
    branch_no_13:;
    {
        nuitka_bool tmp_condition_result_22;
        PyObject *tmp_expression_value_17;
        CHECK_OBJECT(tmp_class_creation_4__metaclass);
        tmp_expression_value_17 = tmp_class_creation_4__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_17, mod_consts[44]);
        tmp_condition_result_22 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_22 == NUITKA_BOOL_TRUE) {
            goto branch_yes_14;
        } else {
            goto branch_no_14;
        }
    }
    branch_yes_14:;
    {
        PyObject *tmp_assign_source_35;
        PyObject *tmp_called_value_7;
        PyObject *tmp_expression_value_18;
        PyObject *tmp_args_value_7;
        PyObject *tmp_tuple_element_13;
        PyObject *tmp_kwargs_value_7;
        CHECK_OBJECT(tmp_class_creation_4__metaclass);
        tmp_expression_value_18 = tmp_class_creation_4__metaclass;
        tmp_called_value_7 = LOOKUP_ATTRIBUTE(tmp_expression_value_18, mod_consts[44]);
        if (tmp_called_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 68;

            goto try_except_handler_10;
        }
        tmp_tuple_element_13 = mod_consts[65];
        tmp_args_value_7 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_7, 0, tmp_tuple_element_13);
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_tuple_element_13 = tmp_class_creation_4__bases;
        PyTuple_SET_ITEM0(tmp_args_value_7, 1, tmp_tuple_element_13);
        CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
        tmp_kwargs_value_7 = tmp_class_creation_4__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 68;
        tmp_assign_source_35 = CALL_FUNCTION(tmp_called_value_7, tmp_args_value_7, tmp_kwargs_value_7);
        Py_DECREF(tmp_called_value_7);
        Py_DECREF(tmp_args_value_7);
        if (tmp_assign_source_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 68;

            goto try_except_handler_10;
        }
        assert(tmp_class_creation_4__prepared == NULL);
        tmp_class_creation_4__prepared = tmp_assign_source_35;
    }
    {
        bool tmp_condition_result_23;
        PyObject *tmp_operand_value_4;
        PyObject *tmp_expression_value_19;
        CHECK_OBJECT(tmp_class_creation_4__prepared);
        tmp_expression_value_19 = tmp_class_creation_4__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_19, mod_consts[46]);
        tmp_operand_value_4 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_4);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 68;

            goto try_except_handler_10;
        }
        tmp_condition_result_23 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_23 != false) {
            goto branch_yes_15;
        } else {
            goto branch_no_15;
        }
    }
    branch_yes_15:;
    {
        PyObject *tmp_raise_type_4;
        PyObject *tmp_raise_value_4;
        PyObject *tmp_left_value_4;
        PyObject *tmp_right_value_4;
        PyObject *tmp_tuple_element_14;
        PyObject *tmp_getattr_target_4;
        PyObject *tmp_getattr_attr_4;
        PyObject *tmp_getattr_default_4;
        tmp_raise_type_4 = PyExc_TypeError;
        tmp_left_value_4 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_4__metaclass);
        tmp_getattr_target_4 = tmp_class_creation_4__metaclass;
        tmp_getattr_attr_4 = mod_consts[48];
        tmp_getattr_default_4 = mod_consts[49];
        tmp_tuple_element_14 = BUILTIN_GETATTR(tmp_getattr_target_4, tmp_getattr_attr_4, tmp_getattr_default_4);
        if (tmp_tuple_element_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 68;

            goto try_except_handler_10;
        }
        tmp_right_value_4 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_20;
            PyObject *tmp_type_arg_8;
            PyTuple_SET_ITEM(tmp_right_value_4, 0, tmp_tuple_element_14);
            CHECK_OBJECT(tmp_class_creation_4__prepared);
            tmp_type_arg_8 = tmp_class_creation_4__prepared;
            tmp_expression_value_20 = BUILTIN_TYPE1(tmp_type_arg_8);
            assert(!(tmp_expression_value_20 == NULL));
            tmp_tuple_element_14 = LOOKUP_ATTRIBUTE(tmp_expression_value_20, mod_consts[48]);
            Py_DECREF(tmp_expression_value_20);
            if (tmp_tuple_element_14 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 68;

                goto tuple_build_exception_4;
            }
            PyTuple_SET_ITEM(tmp_right_value_4, 1, tmp_tuple_element_14);
        }
        goto tuple_build_noexception_4;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_4:;
        Py_DECREF(tmp_right_value_4);
        goto try_except_handler_10;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_4:;
        tmp_raise_value_4 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_4, tmp_right_value_4);
        Py_DECREF(tmp_right_value_4);
        if (tmp_raise_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 68;

            goto try_except_handler_10;
        }
        exception_type = tmp_raise_type_4;
        Py_INCREF(tmp_raise_type_4);
        exception_value = tmp_raise_value_4;
        exception_lineno = 68;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_10;
    }
    branch_no_15:;
    goto branch_end_14;
    branch_no_14:;
    {
        PyObject *tmp_assign_source_36;
        tmp_assign_source_36 = PyDict_New();
        assert(tmp_class_creation_4__prepared == NULL);
        tmp_class_creation_4__prepared = tmp_assign_source_36;
    }
    branch_end_14:;
    {
        PyObject *tmp_assign_source_37;
        {
            PyObject *tmp_set_locals_4;
            CHECK_OBJECT(tmp_class_creation_4__prepared);
            tmp_set_locals_4 = tmp_class_creation_4__prepared;
            locals_botocore$exceptions$$$class__4_ApiVersionNotFoundError_68 = tmp_set_locals_4;
            Py_INCREF(tmp_set_locals_4);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__4_ApiVersionNotFoundError_68, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 68;

            goto try_except_handler_12;
        }
        tmp_dictset_value = mod_consts[66];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__4_ApiVersionNotFoundError_68, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 68;

            goto try_except_handler_12;
        }
        tmp_dictset_value = mod_consts[65];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__4_ApiVersionNotFoundError_68, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 68;

            goto try_except_handler_12;
        }
        if (isFrameUnusable(cache_frame_e79d616026fdbe9706fc86f8a0531faf_5)) {
            Py_XDECREF(cache_frame_e79d616026fdbe9706fc86f8a0531faf_5);

#if _DEBUG_REFCOUNTS
            if (cache_frame_e79d616026fdbe9706fc86f8a0531faf_5 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_e79d616026fdbe9706fc86f8a0531faf_5 = MAKE_FUNCTION_FRAME(codeobj_e79d616026fdbe9706fc86f8a0531faf, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_e79d616026fdbe9706fc86f8a0531faf_5->m_type_description == NULL);
        frame_e79d616026fdbe9706fc86f8a0531faf_5 = cache_frame_e79d616026fdbe9706fc86f8a0531faf_5;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_e79d616026fdbe9706fc86f8a0531faf_5);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_e79d616026fdbe9706fc86f8a0531faf_5) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[67];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__4_ApiVersionNotFoundError_68, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 76;
            type_description_2 = "o";
            goto frame_exception_exit_5;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e79d616026fdbe9706fc86f8a0531faf_5);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_4;

        frame_exception_exit_5:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e79d616026fdbe9706fc86f8a0531faf_5);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_e79d616026fdbe9706fc86f8a0531faf_5, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_e79d616026fdbe9706fc86f8a0531faf_5->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_e79d616026fdbe9706fc86f8a0531faf_5, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_e79d616026fdbe9706fc86f8a0531faf_5,
            type_description_2,
            outline_3_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_e79d616026fdbe9706fc86f8a0531faf_5 == cache_frame_e79d616026fdbe9706fc86f8a0531faf_5) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_e79d616026fdbe9706fc86f8a0531faf_5);
            cache_frame_e79d616026fdbe9706fc86f8a0531faf_5 = NULL;
        }

        assertFrameObject(frame_e79d616026fdbe9706fc86f8a0531faf_5);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_4;

        frame_no_exception_4:;
        goto skip_nested_handling_4;
        nested_frame_exit_4:;

        goto try_except_handler_12;
        skip_nested_handling_4:;
        {
            nuitka_bool tmp_condition_result_24;
            PyObject *tmp_cmp_expr_left_4;
            PyObject *tmp_cmp_expr_right_4;
            CHECK_OBJECT(tmp_class_creation_4__bases);
            tmp_cmp_expr_left_4 = tmp_class_creation_4__bases;
            CHECK_OBJECT(tmp_class_creation_4__bases_orig);
            tmp_cmp_expr_right_4 = tmp_class_creation_4__bases_orig;
            tmp_condition_result_24 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_4, tmp_cmp_expr_right_4);
            if (tmp_condition_result_24 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 68;

                goto try_except_handler_12;
            }
            if (tmp_condition_result_24 == NUITKA_BOOL_TRUE) {
                goto branch_yes_16;
            } else {
                goto branch_no_16;
            }
            assert(tmp_condition_result_24 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_16:;
        CHECK_OBJECT(tmp_class_creation_4__bases_orig);
        tmp_dictset_value = tmp_class_creation_4__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__4_ApiVersionNotFoundError_68, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 68;

            goto try_except_handler_12;
        }
        branch_no_16:;
        {
            PyObject *tmp_assign_source_38;
            PyObject *tmp_called_value_8;
            PyObject *tmp_args_value_8;
            PyObject *tmp_tuple_element_15;
            PyObject *tmp_kwargs_value_8;
            CHECK_OBJECT(tmp_class_creation_4__metaclass);
            tmp_called_value_8 = tmp_class_creation_4__metaclass;
            tmp_tuple_element_15 = mod_consts[65];
            tmp_args_value_8 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_8, 0, tmp_tuple_element_15);
            CHECK_OBJECT(tmp_class_creation_4__bases);
            tmp_tuple_element_15 = tmp_class_creation_4__bases;
            PyTuple_SET_ITEM0(tmp_args_value_8, 1, tmp_tuple_element_15);
            tmp_tuple_element_15 = locals_botocore$exceptions$$$class__4_ApiVersionNotFoundError_68;
            PyTuple_SET_ITEM0(tmp_args_value_8, 2, tmp_tuple_element_15);
            CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
            tmp_kwargs_value_8 = tmp_class_creation_4__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 68;
            tmp_assign_source_38 = CALL_FUNCTION(tmp_called_value_8, tmp_args_value_8, tmp_kwargs_value_8);
            Py_DECREF(tmp_args_value_8);
            if (tmp_assign_source_38 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 68;

                goto try_except_handler_12;
            }
            assert(outline_3_var___class__ == NULL);
            outline_3_var___class__ = tmp_assign_source_38;
        }
        CHECK_OBJECT(outline_3_var___class__);
        tmp_assign_source_37 = outline_3_var___class__;
        Py_INCREF(tmp_assign_source_37);
        goto try_return_handler_12;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_12:;
        Py_DECREF(locals_botocore$exceptions$$$class__4_ApiVersionNotFoundError_68);
        locals_botocore$exceptions$$$class__4_ApiVersionNotFoundError_68 = NULL;
        goto try_return_handler_11;
        // Exception handler code:
        try_except_handler_12:;
        exception_keeper_type_10 = exception_type;
        exception_keeper_value_10 = exception_value;
        exception_keeper_tb_10 = exception_tb;
        exception_keeper_lineno_10 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__4_ApiVersionNotFoundError_68);
        locals_botocore$exceptions$$$class__4_ApiVersionNotFoundError_68 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_10;
        exception_value = exception_keeper_value_10;
        exception_tb = exception_keeper_tb_10;
        exception_lineno = exception_keeper_lineno_10;

        goto try_except_handler_11;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_11:;
        CHECK_OBJECT(outline_3_var___class__);
        Py_DECREF(outline_3_var___class__);
        outline_3_var___class__ = NULL;
        goto outline_result_4;
        // Exception handler code:
        try_except_handler_11:;
        exception_keeper_type_11 = exception_type;
        exception_keeper_value_11 = exception_value;
        exception_keeper_tb_11 = exception_tb;
        exception_keeper_lineno_11 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_11;
        exception_value = exception_keeper_value_11;
        exception_tb = exception_keeper_tb_11;
        exception_lineno = exception_keeper_lineno_11;

        goto outline_exception_4;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_4:;
        exception_lineno = 68;
        goto try_except_handler_10;
        outline_result_4:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[65], tmp_assign_source_37);
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_10:;
    exception_keeper_type_12 = exception_type;
    exception_keeper_value_12 = exception_value;
    exception_keeper_tb_12 = exception_tb;
    exception_keeper_lineno_12 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_4__bases_orig);
    tmp_class_creation_4__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_4__bases);
    tmp_class_creation_4__bases = NULL;
    Py_XDECREF(tmp_class_creation_4__class_decl_dict);
    tmp_class_creation_4__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_4__metaclass);
    tmp_class_creation_4__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_4__prepared);
    tmp_class_creation_4__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_12;
    exception_value = exception_keeper_value_12;
    exception_tb = exception_keeper_tb_12;
    exception_lineno = exception_keeper_lineno_12;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    CHECK_OBJECT(tmp_class_creation_4__bases_orig);
    Py_DECREF(tmp_class_creation_4__bases_orig);
    tmp_class_creation_4__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_4__bases);
    Py_DECREF(tmp_class_creation_4__bases);
    tmp_class_creation_4__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
    Py_DECREF(tmp_class_creation_4__class_decl_dict);
    tmp_class_creation_4__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_4__metaclass);
    Py_DECREF(tmp_class_creation_4__metaclass);
    tmp_class_creation_4__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_4__prepared);
    Py_DECREF(tmp_class_creation_4__prepared);
    tmp_class_creation_4__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_39;
        PyObject *tmp_tuple_element_16;
        tmp_tuple_element_16 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_16 == NULL)) {
            tmp_tuple_element_16 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_13;
        }
        tmp_assign_source_39 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_39, 0, tmp_tuple_element_16);
        assert(tmp_class_creation_5__bases_orig == NULL);
        tmp_class_creation_5__bases_orig = tmp_assign_source_39;
    }
    {
        PyObject *tmp_assign_source_40;
        PyObject *tmp_dircall_arg1_5;
        CHECK_OBJECT(tmp_class_creation_5__bases_orig);
        tmp_dircall_arg1_5 = tmp_class_creation_5__bases_orig;
        Py_INCREF(tmp_dircall_arg1_5);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_5};
            tmp_assign_source_40 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_40 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_13;
        }
        assert(tmp_class_creation_5__bases == NULL);
        tmp_class_creation_5__bases = tmp_assign_source_40;
    }
    {
        PyObject *tmp_assign_source_41;
        tmp_assign_source_41 = PyDict_New();
        assert(tmp_class_creation_5__class_decl_dict == NULL);
        tmp_class_creation_5__class_decl_dict = tmp_assign_source_41;
    }
    {
        PyObject *tmp_assign_source_42;
        PyObject *tmp_metaclass_value_5;
        bool tmp_condition_result_25;
        PyObject *tmp_key_value_13;
        PyObject *tmp_dict_arg_value_13;
        PyObject *tmp_dict_arg_value_14;
        PyObject *tmp_key_value_14;
        nuitka_bool tmp_condition_result_26;
        int tmp_truth_name_5;
        PyObject *tmp_type_arg_9;
        PyObject *tmp_expression_value_21;
        PyObject *tmp_subscript_value_5;
        PyObject *tmp_bases_value_5;
        tmp_key_value_13 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
        tmp_dict_arg_value_13 = tmp_class_creation_5__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_13, tmp_key_value_13);
        assert(!(tmp_res == -1));
        tmp_condition_result_25 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_25 != false) {
            goto condexpr_true_9;
        } else {
            goto condexpr_false_9;
        }
        condexpr_true_9:;
        CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
        tmp_dict_arg_value_14 = tmp_class_creation_5__class_decl_dict;
        tmp_key_value_14 = mod_consts[43];
        tmp_metaclass_value_5 = DICT_GET_ITEM0(tmp_dict_arg_value_14, tmp_key_value_14);
        if (tmp_metaclass_value_5 == NULL) {
            tmp_metaclass_value_5 = Py_None;
        }
        assert(!(tmp_metaclass_value_5 == NULL));
        Py_INCREF(tmp_metaclass_value_5);
        goto condexpr_end_9;
        condexpr_false_9:;
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_truth_name_5 = CHECK_IF_TRUE(tmp_class_creation_5__bases);
        if (tmp_truth_name_5 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_13;
        }
        tmp_condition_result_26 = tmp_truth_name_5 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_26 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_10;
        } else {
            goto condexpr_false_10;
        }
        condexpr_true_10:;
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_expression_value_21 = tmp_class_creation_5__bases;
        tmp_subscript_value_5 = mod_consts[36];
        tmp_type_arg_9 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_21, tmp_subscript_value_5, 0);
        if (tmp_type_arg_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_13;
        }
        tmp_metaclass_value_5 = BUILTIN_TYPE1(tmp_type_arg_9);
        Py_DECREF(tmp_type_arg_9);
        if (tmp_metaclass_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_13;
        }
        goto condexpr_end_10;
        condexpr_false_10:;
        tmp_metaclass_value_5 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_5);
        condexpr_end_10:;
        condexpr_end_9:;
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_bases_value_5 = tmp_class_creation_5__bases;
        tmp_assign_source_42 = SELECT_METACLASS(tmp_metaclass_value_5, tmp_bases_value_5);
        Py_DECREF(tmp_metaclass_value_5);
        if (tmp_assign_source_42 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_13;
        }
        assert(tmp_class_creation_5__metaclass == NULL);
        tmp_class_creation_5__metaclass = tmp_assign_source_42;
    }
    {
        bool tmp_condition_result_27;
        PyObject *tmp_key_value_15;
        PyObject *tmp_dict_arg_value_15;
        tmp_key_value_15 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
        tmp_dict_arg_value_15 = tmp_class_creation_5__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_15, tmp_key_value_15);
        assert(!(tmp_res == -1));
        tmp_condition_result_27 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_27 != false) {
            goto branch_yes_17;
        } else {
            goto branch_no_17;
        }
    }
    branch_yes_17:;
    CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_5__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 79;

        goto try_except_handler_13;
    }
    branch_no_17:;
    {
        nuitka_bool tmp_condition_result_28;
        PyObject *tmp_expression_value_22;
        CHECK_OBJECT(tmp_class_creation_5__metaclass);
        tmp_expression_value_22 = tmp_class_creation_5__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_22, mod_consts[44]);
        tmp_condition_result_28 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_28 == NUITKA_BOOL_TRUE) {
            goto branch_yes_18;
        } else {
            goto branch_no_18;
        }
    }
    branch_yes_18:;
    {
        PyObject *tmp_assign_source_43;
        PyObject *tmp_called_value_9;
        PyObject *tmp_expression_value_23;
        PyObject *tmp_args_value_9;
        PyObject *tmp_tuple_element_17;
        PyObject *tmp_kwargs_value_9;
        CHECK_OBJECT(tmp_class_creation_5__metaclass);
        tmp_expression_value_23 = tmp_class_creation_5__metaclass;
        tmp_called_value_9 = LOOKUP_ATTRIBUTE(tmp_expression_value_23, mod_consts[44]);
        if (tmp_called_value_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_13;
        }
        tmp_tuple_element_17 = mod_consts[8];
        tmp_args_value_9 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_9, 0, tmp_tuple_element_17);
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_tuple_element_17 = tmp_class_creation_5__bases;
        PyTuple_SET_ITEM0(tmp_args_value_9, 1, tmp_tuple_element_17);
        CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
        tmp_kwargs_value_9 = tmp_class_creation_5__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 79;
        tmp_assign_source_43 = CALL_FUNCTION(tmp_called_value_9, tmp_args_value_9, tmp_kwargs_value_9);
        Py_DECREF(tmp_called_value_9);
        Py_DECREF(tmp_args_value_9);
        if (tmp_assign_source_43 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_13;
        }
        assert(tmp_class_creation_5__prepared == NULL);
        tmp_class_creation_5__prepared = tmp_assign_source_43;
    }
    {
        bool tmp_condition_result_29;
        PyObject *tmp_operand_value_5;
        PyObject *tmp_expression_value_24;
        CHECK_OBJECT(tmp_class_creation_5__prepared);
        tmp_expression_value_24 = tmp_class_creation_5__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_24, mod_consts[46]);
        tmp_operand_value_5 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_5);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_13;
        }
        tmp_condition_result_29 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_29 != false) {
            goto branch_yes_19;
        } else {
            goto branch_no_19;
        }
    }
    branch_yes_19:;
    {
        PyObject *tmp_raise_type_5;
        PyObject *tmp_raise_value_5;
        PyObject *tmp_left_value_5;
        PyObject *tmp_right_value_5;
        PyObject *tmp_tuple_element_18;
        PyObject *tmp_getattr_target_5;
        PyObject *tmp_getattr_attr_5;
        PyObject *tmp_getattr_default_5;
        tmp_raise_type_5 = PyExc_TypeError;
        tmp_left_value_5 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_5__metaclass);
        tmp_getattr_target_5 = tmp_class_creation_5__metaclass;
        tmp_getattr_attr_5 = mod_consts[48];
        tmp_getattr_default_5 = mod_consts[49];
        tmp_tuple_element_18 = BUILTIN_GETATTR(tmp_getattr_target_5, tmp_getattr_attr_5, tmp_getattr_default_5);
        if (tmp_tuple_element_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_13;
        }
        tmp_right_value_5 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_25;
            PyObject *tmp_type_arg_10;
            PyTuple_SET_ITEM(tmp_right_value_5, 0, tmp_tuple_element_18);
            CHECK_OBJECT(tmp_class_creation_5__prepared);
            tmp_type_arg_10 = tmp_class_creation_5__prepared;
            tmp_expression_value_25 = BUILTIN_TYPE1(tmp_type_arg_10);
            assert(!(tmp_expression_value_25 == NULL));
            tmp_tuple_element_18 = LOOKUP_ATTRIBUTE(tmp_expression_value_25, mod_consts[48]);
            Py_DECREF(tmp_expression_value_25);
            if (tmp_tuple_element_18 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 79;

                goto tuple_build_exception_5;
            }
            PyTuple_SET_ITEM(tmp_right_value_5, 1, tmp_tuple_element_18);
        }
        goto tuple_build_noexception_5;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_5:;
        Py_DECREF(tmp_right_value_5);
        goto try_except_handler_13;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_5:;
        tmp_raise_value_5 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_5, tmp_right_value_5);
        Py_DECREF(tmp_right_value_5);
        if (tmp_raise_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_13;
        }
        exception_type = tmp_raise_type_5;
        Py_INCREF(tmp_raise_type_5);
        exception_value = tmp_raise_value_5;
        exception_lineno = 79;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_13;
    }
    branch_no_19:;
    goto branch_end_18;
    branch_no_18:;
    {
        PyObject *tmp_assign_source_44;
        tmp_assign_source_44 = PyDict_New();
        assert(tmp_class_creation_5__prepared == NULL);
        tmp_class_creation_5__prepared = tmp_assign_source_44;
    }
    branch_end_18:;
    {
        PyObject *tmp_assign_source_45;
        {
            PyObject *tmp_set_locals_5;
            CHECK_OBJECT(tmp_class_creation_5__prepared);
            tmp_set_locals_5 = tmp_class_creation_5__prepared;
            locals_botocore$exceptions$$$class__5_HTTPClientError_79 = tmp_set_locals_5;
            Py_INCREF(tmp_set_locals_5);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__5_HTTPClientError_79, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_15;
        }
        tmp_dictset_value = mod_consts[8];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__5_HTTPClientError_79, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_15;
        }
        if (isFrameUnusable(cache_frame_e0c1eb30f6a58291cffa6e7866165b5b_6)) {
            Py_XDECREF(cache_frame_e0c1eb30f6a58291cffa6e7866165b5b_6);

#if _DEBUG_REFCOUNTS
            if (cache_frame_e0c1eb30f6a58291cffa6e7866165b5b_6 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_e0c1eb30f6a58291cffa6e7866165b5b_6 = MAKE_FUNCTION_FRAME(codeobj_e0c1eb30f6a58291cffa6e7866165b5b, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_e0c1eb30f6a58291cffa6e7866165b5b_6->m_type_description == NULL);
        frame_e0c1eb30f6a58291cffa6e7866165b5b_6 = cache_frame_e0c1eb30f6a58291cffa6e7866165b5b_6;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_e0c1eb30f6a58291cffa6e7866165b5b_6);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_e0c1eb30f6a58291cffa6e7866165b5b_6) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[68];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__5_HTTPClientError_79, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 80;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }
        {
            PyObject *tmp_defaults_2;
            tmp_defaults_2 = mod_consts[41];
            Py_INCREF(tmp_defaults_2);


            tmp_dictset_value = MAKE_FUNCTION_botocore$exceptions$$$function__4___init__(tmp_defaults_2);

            tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__5_HTTPClientError_79, mod_consts[3], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 81;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_botocore$exceptions$$$function__5___reduce__();

        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__5_HTTPClientError_79, mod_consts[56], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 86;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e0c1eb30f6a58291cffa6e7866165b5b_6);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_5;

        frame_exception_exit_6:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e0c1eb30f6a58291cffa6e7866165b5b_6);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_e0c1eb30f6a58291cffa6e7866165b5b_6, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_e0c1eb30f6a58291cffa6e7866165b5b_6->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_e0c1eb30f6a58291cffa6e7866165b5b_6, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_e0c1eb30f6a58291cffa6e7866165b5b_6,
            type_description_2,
            outline_4_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_e0c1eb30f6a58291cffa6e7866165b5b_6 == cache_frame_e0c1eb30f6a58291cffa6e7866165b5b_6) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_e0c1eb30f6a58291cffa6e7866165b5b_6);
            cache_frame_e0c1eb30f6a58291cffa6e7866165b5b_6 = NULL;
        }

        assertFrameObject(frame_e0c1eb30f6a58291cffa6e7866165b5b_6);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_5;

        frame_no_exception_5:;
        goto skip_nested_handling_5;
        nested_frame_exit_5:;

        goto try_except_handler_15;
        skip_nested_handling_5:;
        {
            nuitka_bool tmp_condition_result_30;
            PyObject *tmp_cmp_expr_left_5;
            PyObject *tmp_cmp_expr_right_5;
            CHECK_OBJECT(tmp_class_creation_5__bases);
            tmp_cmp_expr_left_5 = tmp_class_creation_5__bases;
            CHECK_OBJECT(tmp_class_creation_5__bases_orig);
            tmp_cmp_expr_right_5 = tmp_class_creation_5__bases_orig;
            tmp_condition_result_30 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_5, tmp_cmp_expr_right_5);
            if (tmp_condition_result_30 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 79;

                goto try_except_handler_15;
            }
            if (tmp_condition_result_30 == NUITKA_BOOL_TRUE) {
                goto branch_yes_20;
            } else {
                goto branch_no_20;
            }
            assert(tmp_condition_result_30 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_20:;
        CHECK_OBJECT(tmp_class_creation_5__bases_orig);
        tmp_dictset_value = tmp_class_creation_5__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__5_HTTPClientError_79, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_15;
        }
        branch_no_20:;
        {
            PyObject *tmp_assign_source_46;
            PyObject *tmp_called_value_10;
            PyObject *tmp_args_value_10;
            PyObject *tmp_tuple_element_19;
            PyObject *tmp_kwargs_value_10;
            CHECK_OBJECT(tmp_class_creation_5__metaclass);
            tmp_called_value_10 = tmp_class_creation_5__metaclass;
            tmp_tuple_element_19 = mod_consts[8];
            tmp_args_value_10 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_10, 0, tmp_tuple_element_19);
            CHECK_OBJECT(tmp_class_creation_5__bases);
            tmp_tuple_element_19 = tmp_class_creation_5__bases;
            PyTuple_SET_ITEM0(tmp_args_value_10, 1, tmp_tuple_element_19);
            tmp_tuple_element_19 = locals_botocore$exceptions$$$class__5_HTTPClientError_79;
            PyTuple_SET_ITEM0(tmp_args_value_10, 2, tmp_tuple_element_19);
            CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
            tmp_kwargs_value_10 = tmp_class_creation_5__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 79;
            tmp_assign_source_46 = CALL_FUNCTION(tmp_called_value_10, tmp_args_value_10, tmp_kwargs_value_10);
            Py_DECREF(tmp_args_value_10);
            if (tmp_assign_source_46 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 79;

                goto try_except_handler_15;
            }
            assert(outline_4_var___class__ == NULL);
            outline_4_var___class__ = tmp_assign_source_46;
        }
        CHECK_OBJECT(outline_4_var___class__);
        tmp_assign_source_45 = outline_4_var___class__;
        Py_INCREF(tmp_assign_source_45);
        goto try_return_handler_15;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_15:;
        Py_DECREF(locals_botocore$exceptions$$$class__5_HTTPClientError_79);
        locals_botocore$exceptions$$$class__5_HTTPClientError_79 = NULL;
        goto try_return_handler_14;
        // Exception handler code:
        try_except_handler_15:;
        exception_keeper_type_13 = exception_type;
        exception_keeper_value_13 = exception_value;
        exception_keeper_tb_13 = exception_tb;
        exception_keeper_lineno_13 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__5_HTTPClientError_79);
        locals_botocore$exceptions$$$class__5_HTTPClientError_79 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_13;
        exception_value = exception_keeper_value_13;
        exception_tb = exception_keeper_tb_13;
        exception_lineno = exception_keeper_lineno_13;

        goto try_except_handler_14;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_14:;
        CHECK_OBJECT(outline_4_var___class__);
        Py_DECREF(outline_4_var___class__);
        outline_4_var___class__ = NULL;
        goto outline_result_5;
        // Exception handler code:
        try_except_handler_14:;
        exception_keeper_type_14 = exception_type;
        exception_keeper_value_14 = exception_value;
        exception_keeper_tb_14 = exception_tb;
        exception_keeper_lineno_14 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_14;
        exception_value = exception_keeper_value_14;
        exception_tb = exception_keeper_tb_14;
        exception_lineno = exception_keeper_lineno_14;

        goto outline_exception_5;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_5:;
        exception_lineno = 79;
        goto try_except_handler_13;
        outline_result_5:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[8], tmp_assign_source_45);
    }
    goto try_end_5;
    // Exception handler code:
    try_except_handler_13:;
    exception_keeper_type_15 = exception_type;
    exception_keeper_value_15 = exception_value;
    exception_keeper_tb_15 = exception_tb;
    exception_keeper_lineno_15 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_5__bases_orig);
    tmp_class_creation_5__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_5__bases);
    tmp_class_creation_5__bases = NULL;
    Py_XDECREF(tmp_class_creation_5__class_decl_dict);
    tmp_class_creation_5__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_5__metaclass);
    tmp_class_creation_5__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_5__prepared);
    tmp_class_creation_5__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_15;
    exception_value = exception_keeper_value_15;
    exception_tb = exception_keeper_tb_15;
    exception_lineno = exception_keeper_lineno_15;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    CHECK_OBJECT(tmp_class_creation_5__bases_orig);
    Py_DECREF(tmp_class_creation_5__bases_orig);
    tmp_class_creation_5__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_5__bases);
    Py_DECREF(tmp_class_creation_5__bases);
    tmp_class_creation_5__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
    Py_DECREF(tmp_class_creation_5__class_decl_dict);
    tmp_class_creation_5__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_5__metaclass);
    Py_DECREF(tmp_class_creation_5__metaclass);
    tmp_class_creation_5__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_5__prepared);
    Py_DECREF(tmp_class_creation_5__prepared);
    tmp_class_creation_5__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_47;
        PyObject *tmp_tuple_element_20;
        tmp_tuple_element_20 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_20 == NULL)) {
            tmp_tuple_element_20 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 91;

            goto try_except_handler_16;
        }
        tmp_assign_source_47 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_47, 0, tmp_tuple_element_20);
        assert(tmp_class_creation_6__bases_orig == NULL);
        tmp_class_creation_6__bases_orig = tmp_assign_source_47;
    }
    {
        PyObject *tmp_assign_source_48;
        PyObject *tmp_dircall_arg1_6;
        CHECK_OBJECT(tmp_class_creation_6__bases_orig);
        tmp_dircall_arg1_6 = tmp_class_creation_6__bases_orig;
        Py_INCREF(tmp_dircall_arg1_6);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_6};
            tmp_assign_source_48 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_48 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 91;

            goto try_except_handler_16;
        }
        assert(tmp_class_creation_6__bases == NULL);
        tmp_class_creation_6__bases = tmp_assign_source_48;
    }
    {
        PyObject *tmp_assign_source_49;
        tmp_assign_source_49 = PyDict_New();
        assert(tmp_class_creation_6__class_decl_dict == NULL);
        tmp_class_creation_6__class_decl_dict = tmp_assign_source_49;
    }
    {
        PyObject *tmp_assign_source_50;
        PyObject *tmp_metaclass_value_6;
        bool tmp_condition_result_31;
        PyObject *tmp_key_value_16;
        PyObject *tmp_dict_arg_value_16;
        PyObject *tmp_dict_arg_value_17;
        PyObject *tmp_key_value_17;
        nuitka_bool tmp_condition_result_32;
        int tmp_truth_name_6;
        PyObject *tmp_type_arg_11;
        PyObject *tmp_expression_value_26;
        PyObject *tmp_subscript_value_6;
        PyObject *tmp_bases_value_6;
        tmp_key_value_16 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
        tmp_dict_arg_value_16 = tmp_class_creation_6__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_16, tmp_key_value_16);
        assert(!(tmp_res == -1));
        tmp_condition_result_31 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_31 != false) {
            goto condexpr_true_11;
        } else {
            goto condexpr_false_11;
        }
        condexpr_true_11:;
        CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
        tmp_dict_arg_value_17 = tmp_class_creation_6__class_decl_dict;
        tmp_key_value_17 = mod_consts[43];
        tmp_metaclass_value_6 = DICT_GET_ITEM0(tmp_dict_arg_value_17, tmp_key_value_17);
        if (tmp_metaclass_value_6 == NULL) {
            tmp_metaclass_value_6 = Py_None;
        }
        assert(!(tmp_metaclass_value_6 == NULL));
        Py_INCREF(tmp_metaclass_value_6);
        goto condexpr_end_11;
        condexpr_false_11:;
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_truth_name_6 = CHECK_IF_TRUE(tmp_class_creation_6__bases);
        if (tmp_truth_name_6 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 91;

            goto try_except_handler_16;
        }
        tmp_condition_result_32 = tmp_truth_name_6 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_32 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_12;
        } else {
            goto condexpr_false_12;
        }
        condexpr_true_12:;
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_expression_value_26 = tmp_class_creation_6__bases;
        tmp_subscript_value_6 = mod_consts[36];
        tmp_type_arg_11 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_26, tmp_subscript_value_6, 0);
        if (tmp_type_arg_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 91;

            goto try_except_handler_16;
        }
        tmp_metaclass_value_6 = BUILTIN_TYPE1(tmp_type_arg_11);
        Py_DECREF(tmp_type_arg_11);
        if (tmp_metaclass_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 91;

            goto try_except_handler_16;
        }
        goto condexpr_end_12;
        condexpr_false_12:;
        tmp_metaclass_value_6 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_6);
        condexpr_end_12:;
        condexpr_end_11:;
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_bases_value_6 = tmp_class_creation_6__bases;
        tmp_assign_source_50 = SELECT_METACLASS(tmp_metaclass_value_6, tmp_bases_value_6);
        Py_DECREF(tmp_metaclass_value_6);
        if (tmp_assign_source_50 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 91;

            goto try_except_handler_16;
        }
        assert(tmp_class_creation_6__metaclass == NULL);
        tmp_class_creation_6__metaclass = tmp_assign_source_50;
    }
    {
        bool tmp_condition_result_33;
        PyObject *tmp_key_value_18;
        PyObject *tmp_dict_arg_value_18;
        tmp_key_value_18 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
        tmp_dict_arg_value_18 = tmp_class_creation_6__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_18, tmp_key_value_18);
        assert(!(tmp_res == -1));
        tmp_condition_result_33 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_33 != false) {
            goto branch_yes_21;
        } else {
            goto branch_no_21;
        }
    }
    branch_yes_21:;
    CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_6__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 91;

        goto try_except_handler_16;
    }
    branch_no_21:;
    {
        nuitka_bool tmp_condition_result_34;
        PyObject *tmp_expression_value_27;
        CHECK_OBJECT(tmp_class_creation_6__metaclass);
        tmp_expression_value_27 = tmp_class_creation_6__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_27, mod_consts[44]);
        tmp_condition_result_34 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_34 == NUITKA_BOOL_TRUE) {
            goto branch_yes_22;
        } else {
            goto branch_no_22;
        }
    }
    branch_yes_22:;
    {
        PyObject *tmp_assign_source_51;
        PyObject *tmp_called_value_11;
        PyObject *tmp_expression_value_28;
        PyObject *tmp_args_value_11;
        PyObject *tmp_tuple_element_21;
        PyObject *tmp_kwargs_value_11;
        CHECK_OBJECT(tmp_class_creation_6__metaclass);
        tmp_expression_value_28 = tmp_class_creation_6__metaclass;
        tmp_called_value_11 = LOOKUP_ATTRIBUTE(tmp_expression_value_28, mod_consts[44]);
        if (tmp_called_value_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 91;

            goto try_except_handler_16;
        }
        tmp_tuple_element_21 = mod_consts[71];
        tmp_args_value_11 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_11, 0, tmp_tuple_element_21);
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_tuple_element_21 = tmp_class_creation_6__bases;
        PyTuple_SET_ITEM0(tmp_args_value_11, 1, tmp_tuple_element_21);
        CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
        tmp_kwargs_value_11 = tmp_class_creation_6__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 91;
        tmp_assign_source_51 = CALL_FUNCTION(tmp_called_value_11, tmp_args_value_11, tmp_kwargs_value_11);
        Py_DECREF(tmp_called_value_11);
        Py_DECREF(tmp_args_value_11);
        if (tmp_assign_source_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 91;

            goto try_except_handler_16;
        }
        assert(tmp_class_creation_6__prepared == NULL);
        tmp_class_creation_6__prepared = tmp_assign_source_51;
    }
    {
        bool tmp_condition_result_35;
        PyObject *tmp_operand_value_6;
        PyObject *tmp_expression_value_29;
        CHECK_OBJECT(tmp_class_creation_6__prepared);
        tmp_expression_value_29 = tmp_class_creation_6__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_29, mod_consts[46]);
        tmp_operand_value_6 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_6);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 91;

            goto try_except_handler_16;
        }
        tmp_condition_result_35 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_35 != false) {
            goto branch_yes_23;
        } else {
            goto branch_no_23;
        }
    }
    branch_yes_23:;
    {
        PyObject *tmp_raise_type_6;
        PyObject *tmp_raise_value_6;
        PyObject *tmp_left_value_6;
        PyObject *tmp_right_value_6;
        PyObject *tmp_tuple_element_22;
        PyObject *tmp_getattr_target_6;
        PyObject *tmp_getattr_attr_6;
        PyObject *tmp_getattr_default_6;
        tmp_raise_type_6 = PyExc_TypeError;
        tmp_left_value_6 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_6__metaclass);
        tmp_getattr_target_6 = tmp_class_creation_6__metaclass;
        tmp_getattr_attr_6 = mod_consts[48];
        tmp_getattr_default_6 = mod_consts[49];
        tmp_tuple_element_22 = BUILTIN_GETATTR(tmp_getattr_target_6, tmp_getattr_attr_6, tmp_getattr_default_6);
        if (tmp_tuple_element_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 91;

            goto try_except_handler_16;
        }
        tmp_right_value_6 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_30;
            PyObject *tmp_type_arg_12;
            PyTuple_SET_ITEM(tmp_right_value_6, 0, tmp_tuple_element_22);
            CHECK_OBJECT(tmp_class_creation_6__prepared);
            tmp_type_arg_12 = tmp_class_creation_6__prepared;
            tmp_expression_value_30 = BUILTIN_TYPE1(tmp_type_arg_12);
            assert(!(tmp_expression_value_30 == NULL));
            tmp_tuple_element_22 = LOOKUP_ATTRIBUTE(tmp_expression_value_30, mod_consts[48]);
            Py_DECREF(tmp_expression_value_30);
            if (tmp_tuple_element_22 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 91;

                goto tuple_build_exception_6;
            }
            PyTuple_SET_ITEM(tmp_right_value_6, 1, tmp_tuple_element_22);
        }
        goto tuple_build_noexception_6;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_6:;
        Py_DECREF(tmp_right_value_6);
        goto try_except_handler_16;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_6:;
        tmp_raise_value_6 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_6, tmp_right_value_6);
        Py_DECREF(tmp_right_value_6);
        if (tmp_raise_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 91;

            goto try_except_handler_16;
        }
        exception_type = tmp_raise_type_6;
        Py_INCREF(tmp_raise_type_6);
        exception_value = tmp_raise_value_6;
        exception_lineno = 91;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_16;
    }
    branch_no_23:;
    goto branch_end_22;
    branch_no_22:;
    {
        PyObject *tmp_assign_source_52;
        tmp_assign_source_52 = PyDict_New();
        assert(tmp_class_creation_6__prepared == NULL);
        tmp_class_creation_6__prepared = tmp_assign_source_52;
    }
    branch_end_22:;
    {
        PyObject *tmp_assign_source_53;
        {
            PyObject *tmp_set_locals_6;
            CHECK_OBJECT(tmp_class_creation_6__prepared);
            tmp_set_locals_6 = tmp_class_creation_6__prepared;
            locals_botocore$exceptions$$$class__6_ConnectionError_91 = tmp_set_locals_6;
            Py_INCREF(tmp_set_locals_6);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__6_ConnectionError_91, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 91;

            goto try_except_handler_18;
        }
        tmp_dictset_value = mod_consts[71];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__6_ConnectionError_91, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 91;

            goto try_except_handler_18;
        }
        if (isFrameUnusable(cache_frame_0d7cc9b130677721cecfda0a425c2897_7)) {
            Py_XDECREF(cache_frame_0d7cc9b130677721cecfda0a425c2897_7);

#if _DEBUG_REFCOUNTS
            if (cache_frame_0d7cc9b130677721cecfda0a425c2897_7 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_0d7cc9b130677721cecfda0a425c2897_7 = MAKE_FUNCTION_FRAME(codeobj_0d7cc9b130677721cecfda0a425c2897, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_0d7cc9b130677721cecfda0a425c2897_7->m_type_description == NULL);
        frame_0d7cc9b130677721cecfda0a425c2897_7 = cache_frame_0d7cc9b130677721cecfda0a425c2897_7;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_0d7cc9b130677721cecfda0a425c2897_7);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_0d7cc9b130677721cecfda0a425c2897_7) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[72];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__6_ConnectionError_91, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 92;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_0d7cc9b130677721cecfda0a425c2897_7);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_6;

        frame_exception_exit_7:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_0d7cc9b130677721cecfda0a425c2897_7);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_0d7cc9b130677721cecfda0a425c2897_7, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_0d7cc9b130677721cecfda0a425c2897_7->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_0d7cc9b130677721cecfda0a425c2897_7, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_0d7cc9b130677721cecfda0a425c2897_7,
            type_description_2,
            outline_5_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_0d7cc9b130677721cecfda0a425c2897_7 == cache_frame_0d7cc9b130677721cecfda0a425c2897_7) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_0d7cc9b130677721cecfda0a425c2897_7);
            cache_frame_0d7cc9b130677721cecfda0a425c2897_7 = NULL;
        }

        assertFrameObject(frame_0d7cc9b130677721cecfda0a425c2897_7);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_6;

        frame_no_exception_6:;
        goto skip_nested_handling_6;
        nested_frame_exit_6:;

        goto try_except_handler_18;
        skip_nested_handling_6:;
        {
            nuitka_bool tmp_condition_result_36;
            PyObject *tmp_cmp_expr_left_6;
            PyObject *tmp_cmp_expr_right_6;
            CHECK_OBJECT(tmp_class_creation_6__bases);
            tmp_cmp_expr_left_6 = tmp_class_creation_6__bases;
            CHECK_OBJECT(tmp_class_creation_6__bases_orig);
            tmp_cmp_expr_right_6 = tmp_class_creation_6__bases_orig;
            tmp_condition_result_36 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_6, tmp_cmp_expr_right_6);
            if (tmp_condition_result_36 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 91;

                goto try_except_handler_18;
            }
            if (tmp_condition_result_36 == NUITKA_BOOL_TRUE) {
                goto branch_yes_24;
            } else {
                goto branch_no_24;
            }
            assert(tmp_condition_result_36 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_24:;
        CHECK_OBJECT(tmp_class_creation_6__bases_orig);
        tmp_dictset_value = tmp_class_creation_6__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__6_ConnectionError_91, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 91;

            goto try_except_handler_18;
        }
        branch_no_24:;
        {
            PyObject *tmp_assign_source_54;
            PyObject *tmp_called_value_12;
            PyObject *tmp_args_value_12;
            PyObject *tmp_tuple_element_23;
            PyObject *tmp_kwargs_value_12;
            CHECK_OBJECT(tmp_class_creation_6__metaclass);
            tmp_called_value_12 = tmp_class_creation_6__metaclass;
            tmp_tuple_element_23 = mod_consts[71];
            tmp_args_value_12 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_12, 0, tmp_tuple_element_23);
            CHECK_OBJECT(tmp_class_creation_6__bases);
            tmp_tuple_element_23 = tmp_class_creation_6__bases;
            PyTuple_SET_ITEM0(tmp_args_value_12, 1, tmp_tuple_element_23);
            tmp_tuple_element_23 = locals_botocore$exceptions$$$class__6_ConnectionError_91;
            PyTuple_SET_ITEM0(tmp_args_value_12, 2, tmp_tuple_element_23);
            CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
            tmp_kwargs_value_12 = tmp_class_creation_6__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 91;
            tmp_assign_source_54 = CALL_FUNCTION(tmp_called_value_12, tmp_args_value_12, tmp_kwargs_value_12);
            Py_DECREF(tmp_args_value_12);
            if (tmp_assign_source_54 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 91;

                goto try_except_handler_18;
            }
            assert(outline_5_var___class__ == NULL);
            outline_5_var___class__ = tmp_assign_source_54;
        }
        CHECK_OBJECT(outline_5_var___class__);
        tmp_assign_source_53 = outline_5_var___class__;
        Py_INCREF(tmp_assign_source_53);
        goto try_return_handler_18;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_18:;
        Py_DECREF(locals_botocore$exceptions$$$class__6_ConnectionError_91);
        locals_botocore$exceptions$$$class__6_ConnectionError_91 = NULL;
        goto try_return_handler_17;
        // Exception handler code:
        try_except_handler_18:;
        exception_keeper_type_16 = exception_type;
        exception_keeper_value_16 = exception_value;
        exception_keeper_tb_16 = exception_tb;
        exception_keeper_lineno_16 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__6_ConnectionError_91);
        locals_botocore$exceptions$$$class__6_ConnectionError_91 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_16;
        exception_value = exception_keeper_value_16;
        exception_tb = exception_keeper_tb_16;
        exception_lineno = exception_keeper_lineno_16;

        goto try_except_handler_17;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_17:;
        CHECK_OBJECT(outline_5_var___class__);
        Py_DECREF(outline_5_var___class__);
        outline_5_var___class__ = NULL;
        goto outline_result_6;
        // Exception handler code:
        try_except_handler_17:;
        exception_keeper_type_17 = exception_type;
        exception_keeper_value_17 = exception_value;
        exception_keeper_tb_17 = exception_tb;
        exception_keeper_lineno_17 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_17;
        exception_value = exception_keeper_value_17;
        exception_tb = exception_keeper_tb_17;
        exception_lineno = exception_keeper_lineno_17;

        goto outline_exception_6;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_6:;
        exception_lineno = 91;
        goto try_except_handler_16;
        outline_result_6:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[71], tmp_assign_source_53);
    }
    goto try_end_6;
    // Exception handler code:
    try_except_handler_16:;
    exception_keeper_type_18 = exception_type;
    exception_keeper_value_18 = exception_value;
    exception_keeper_tb_18 = exception_tb;
    exception_keeper_lineno_18 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_6__bases_orig);
    tmp_class_creation_6__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_6__bases);
    tmp_class_creation_6__bases = NULL;
    Py_XDECREF(tmp_class_creation_6__class_decl_dict);
    tmp_class_creation_6__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_6__metaclass);
    tmp_class_creation_6__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_6__prepared);
    tmp_class_creation_6__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_18;
    exception_value = exception_keeper_value_18;
    exception_tb = exception_keeper_tb_18;
    exception_lineno = exception_keeper_lineno_18;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    CHECK_OBJECT(tmp_class_creation_6__bases_orig);
    Py_DECREF(tmp_class_creation_6__bases_orig);
    tmp_class_creation_6__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_6__bases);
    Py_DECREF(tmp_class_creation_6__bases);
    tmp_class_creation_6__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
    Py_DECREF(tmp_class_creation_6__class_decl_dict);
    tmp_class_creation_6__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_6__metaclass);
    Py_DECREF(tmp_class_creation_6__metaclass);
    tmp_class_creation_6__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_6__prepared);
    Py_DECREF(tmp_class_creation_6__prepared);
    tmp_class_creation_6__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_55;
        PyObject *tmp_tuple_element_24;
        tmp_tuple_element_24 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_24 == NULL)) {
            tmp_tuple_element_24 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_19;
        }
        tmp_assign_source_55 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_55, 0, tmp_tuple_element_24);
        assert(tmp_class_creation_7__bases_orig == NULL);
        tmp_class_creation_7__bases_orig = tmp_assign_source_55;
    }
    {
        PyObject *tmp_assign_source_56;
        PyObject *tmp_dircall_arg1_7;
        CHECK_OBJECT(tmp_class_creation_7__bases_orig);
        tmp_dircall_arg1_7 = tmp_class_creation_7__bases_orig;
        Py_INCREF(tmp_dircall_arg1_7);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_7};
            tmp_assign_source_56 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_56 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_19;
        }
        assert(tmp_class_creation_7__bases == NULL);
        tmp_class_creation_7__bases = tmp_assign_source_56;
    }
    {
        PyObject *tmp_assign_source_57;
        tmp_assign_source_57 = PyDict_New();
        assert(tmp_class_creation_7__class_decl_dict == NULL);
        tmp_class_creation_7__class_decl_dict = tmp_assign_source_57;
    }
    {
        PyObject *tmp_assign_source_58;
        PyObject *tmp_metaclass_value_7;
        bool tmp_condition_result_37;
        PyObject *tmp_key_value_19;
        PyObject *tmp_dict_arg_value_19;
        PyObject *tmp_dict_arg_value_20;
        PyObject *tmp_key_value_20;
        nuitka_bool tmp_condition_result_38;
        int tmp_truth_name_7;
        PyObject *tmp_type_arg_13;
        PyObject *tmp_expression_value_31;
        PyObject *tmp_subscript_value_7;
        PyObject *tmp_bases_value_7;
        tmp_key_value_19 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
        tmp_dict_arg_value_19 = tmp_class_creation_7__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_19, tmp_key_value_19);
        assert(!(tmp_res == -1));
        tmp_condition_result_37 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_37 != false) {
            goto condexpr_true_13;
        } else {
            goto condexpr_false_13;
        }
        condexpr_true_13:;
        CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
        tmp_dict_arg_value_20 = tmp_class_creation_7__class_decl_dict;
        tmp_key_value_20 = mod_consts[43];
        tmp_metaclass_value_7 = DICT_GET_ITEM0(tmp_dict_arg_value_20, tmp_key_value_20);
        if (tmp_metaclass_value_7 == NULL) {
            tmp_metaclass_value_7 = Py_None;
        }
        assert(!(tmp_metaclass_value_7 == NULL));
        Py_INCREF(tmp_metaclass_value_7);
        goto condexpr_end_13;
        condexpr_false_13:;
        CHECK_OBJECT(tmp_class_creation_7__bases);
        tmp_truth_name_7 = CHECK_IF_TRUE(tmp_class_creation_7__bases);
        if (tmp_truth_name_7 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_19;
        }
        tmp_condition_result_38 = tmp_truth_name_7 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_38 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_14;
        } else {
            goto condexpr_false_14;
        }
        condexpr_true_14:;
        CHECK_OBJECT(tmp_class_creation_7__bases);
        tmp_expression_value_31 = tmp_class_creation_7__bases;
        tmp_subscript_value_7 = mod_consts[36];
        tmp_type_arg_13 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_31, tmp_subscript_value_7, 0);
        if (tmp_type_arg_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_19;
        }
        tmp_metaclass_value_7 = BUILTIN_TYPE1(tmp_type_arg_13);
        Py_DECREF(tmp_type_arg_13);
        if (tmp_metaclass_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_19;
        }
        goto condexpr_end_14;
        condexpr_false_14:;
        tmp_metaclass_value_7 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_7);
        condexpr_end_14:;
        condexpr_end_13:;
        CHECK_OBJECT(tmp_class_creation_7__bases);
        tmp_bases_value_7 = tmp_class_creation_7__bases;
        tmp_assign_source_58 = SELECT_METACLASS(tmp_metaclass_value_7, tmp_bases_value_7);
        Py_DECREF(tmp_metaclass_value_7);
        if (tmp_assign_source_58 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_19;
        }
        assert(tmp_class_creation_7__metaclass == NULL);
        tmp_class_creation_7__metaclass = tmp_assign_source_58;
    }
    {
        bool tmp_condition_result_39;
        PyObject *tmp_key_value_21;
        PyObject *tmp_dict_arg_value_21;
        tmp_key_value_21 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
        tmp_dict_arg_value_21 = tmp_class_creation_7__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_21, tmp_key_value_21);
        assert(!(tmp_res == -1));
        tmp_condition_result_39 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_39 != false) {
            goto branch_yes_25;
        } else {
            goto branch_no_25;
        }
    }
    branch_yes_25:;
    CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_7__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 95;

        goto try_except_handler_19;
    }
    branch_no_25:;
    {
        nuitka_bool tmp_condition_result_40;
        PyObject *tmp_expression_value_32;
        CHECK_OBJECT(tmp_class_creation_7__metaclass);
        tmp_expression_value_32 = tmp_class_creation_7__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_32, mod_consts[44]);
        tmp_condition_result_40 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_40 == NUITKA_BOOL_TRUE) {
            goto branch_yes_26;
        } else {
            goto branch_no_26;
        }
    }
    branch_yes_26:;
    {
        PyObject *tmp_assign_source_59;
        PyObject *tmp_called_value_13;
        PyObject *tmp_expression_value_33;
        PyObject *tmp_args_value_13;
        PyObject *tmp_tuple_element_25;
        PyObject *tmp_kwargs_value_13;
        CHECK_OBJECT(tmp_class_creation_7__metaclass);
        tmp_expression_value_33 = tmp_class_creation_7__metaclass;
        tmp_called_value_13 = LOOKUP_ATTRIBUTE(tmp_expression_value_33, mod_consts[44]);
        if (tmp_called_value_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_19;
        }
        tmp_tuple_element_25 = mod_consts[73];
        tmp_args_value_13 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_13, 0, tmp_tuple_element_25);
        CHECK_OBJECT(tmp_class_creation_7__bases);
        tmp_tuple_element_25 = tmp_class_creation_7__bases;
        PyTuple_SET_ITEM0(tmp_args_value_13, 1, tmp_tuple_element_25);
        CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
        tmp_kwargs_value_13 = tmp_class_creation_7__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 95;
        tmp_assign_source_59 = CALL_FUNCTION(tmp_called_value_13, tmp_args_value_13, tmp_kwargs_value_13);
        Py_DECREF(tmp_called_value_13);
        Py_DECREF(tmp_args_value_13);
        if (tmp_assign_source_59 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_19;
        }
        assert(tmp_class_creation_7__prepared == NULL);
        tmp_class_creation_7__prepared = tmp_assign_source_59;
    }
    {
        bool tmp_condition_result_41;
        PyObject *tmp_operand_value_7;
        PyObject *tmp_expression_value_34;
        CHECK_OBJECT(tmp_class_creation_7__prepared);
        tmp_expression_value_34 = tmp_class_creation_7__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_34, mod_consts[46]);
        tmp_operand_value_7 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_7);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_19;
        }
        tmp_condition_result_41 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_41 != false) {
            goto branch_yes_27;
        } else {
            goto branch_no_27;
        }
    }
    branch_yes_27:;
    {
        PyObject *tmp_raise_type_7;
        PyObject *tmp_raise_value_7;
        PyObject *tmp_left_value_7;
        PyObject *tmp_right_value_7;
        PyObject *tmp_tuple_element_26;
        PyObject *tmp_getattr_target_7;
        PyObject *tmp_getattr_attr_7;
        PyObject *tmp_getattr_default_7;
        tmp_raise_type_7 = PyExc_TypeError;
        tmp_left_value_7 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_7__metaclass);
        tmp_getattr_target_7 = tmp_class_creation_7__metaclass;
        tmp_getattr_attr_7 = mod_consts[48];
        tmp_getattr_default_7 = mod_consts[49];
        tmp_tuple_element_26 = BUILTIN_GETATTR(tmp_getattr_target_7, tmp_getattr_attr_7, tmp_getattr_default_7);
        if (tmp_tuple_element_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_19;
        }
        tmp_right_value_7 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_35;
            PyObject *tmp_type_arg_14;
            PyTuple_SET_ITEM(tmp_right_value_7, 0, tmp_tuple_element_26);
            CHECK_OBJECT(tmp_class_creation_7__prepared);
            tmp_type_arg_14 = tmp_class_creation_7__prepared;
            tmp_expression_value_35 = BUILTIN_TYPE1(tmp_type_arg_14);
            assert(!(tmp_expression_value_35 == NULL));
            tmp_tuple_element_26 = LOOKUP_ATTRIBUTE(tmp_expression_value_35, mod_consts[48]);
            Py_DECREF(tmp_expression_value_35);
            if (tmp_tuple_element_26 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 95;

                goto tuple_build_exception_7;
            }
            PyTuple_SET_ITEM(tmp_right_value_7, 1, tmp_tuple_element_26);
        }
        goto tuple_build_noexception_7;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_7:;
        Py_DECREF(tmp_right_value_7);
        goto try_except_handler_19;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_7:;
        tmp_raise_value_7 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_7, tmp_right_value_7);
        Py_DECREF(tmp_right_value_7);
        if (tmp_raise_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_19;
        }
        exception_type = tmp_raise_type_7;
        Py_INCREF(tmp_raise_type_7);
        exception_value = tmp_raise_value_7;
        exception_lineno = 95;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_19;
    }
    branch_no_27:;
    goto branch_end_26;
    branch_no_26:;
    {
        PyObject *tmp_assign_source_60;
        tmp_assign_source_60 = PyDict_New();
        assert(tmp_class_creation_7__prepared == NULL);
        tmp_class_creation_7__prepared = tmp_assign_source_60;
    }
    branch_end_26:;
    {
        PyObject *tmp_assign_source_61;
        {
            PyObject *tmp_set_locals_7;
            CHECK_OBJECT(tmp_class_creation_7__prepared);
            tmp_set_locals_7 = tmp_class_creation_7__prepared;
            locals_botocore$exceptions$$$class__7_InvalidIMDSEndpointError_95 = tmp_set_locals_7;
            Py_INCREF(tmp_set_locals_7);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__7_InvalidIMDSEndpointError_95, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_21;
        }
        tmp_dictset_value = mod_consts[73];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__7_InvalidIMDSEndpointError_95, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_21;
        }
        if (isFrameUnusable(cache_frame_b0391e2f7c2f48999b6d5c484b23452b_8)) {
            Py_XDECREF(cache_frame_b0391e2f7c2f48999b6d5c484b23452b_8);

#if _DEBUG_REFCOUNTS
            if (cache_frame_b0391e2f7c2f48999b6d5c484b23452b_8 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_b0391e2f7c2f48999b6d5c484b23452b_8 = MAKE_FUNCTION_FRAME(codeobj_b0391e2f7c2f48999b6d5c484b23452b, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_b0391e2f7c2f48999b6d5c484b23452b_8->m_type_description == NULL);
        frame_b0391e2f7c2f48999b6d5c484b23452b_8 = cache_frame_b0391e2f7c2f48999b6d5c484b23452b_8;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_b0391e2f7c2f48999b6d5c484b23452b_8);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_b0391e2f7c2f48999b6d5c484b23452b_8) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[74];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__7_InvalidIMDSEndpointError_95, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 96;
            type_description_2 = "o";
            goto frame_exception_exit_8;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_b0391e2f7c2f48999b6d5c484b23452b_8);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_7;

        frame_exception_exit_8:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_b0391e2f7c2f48999b6d5c484b23452b_8);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_b0391e2f7c2f48999b6d5c484b23452b_8, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_b0391e2f7c2f48999b6d5c484b23452b_8->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_b0391e2f7c2f48999b6d5c484b23452b_8, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_b0391e2f7c2f48999b6d5c484b23452b_8,
            type_description_2,
            outline_6_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_b0391e2f7c2f48999b6d5c484b23452b_8 == cache_frame_b0391e2f7c2f48999b6d5c484b23452b_8) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_b0391e2f7c2f48999b6d5c484b23452b_8);
            cache_frame_b0391e2f7c2f48999b6d5c484b23452b_8 = NULL;
        }

        assertFrameObject(frame_b0391e2f7c2f48999b6d5c484b23452b_8);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_7;

        frame_no_exception_7:;
        goto skip_nested_handling_7;
        nested_frame_exit_7:;

        goto try_except_handler_21;
        skip_nested_handling_7:;
        {
            nuitka_bool tmp_condition_result_42;
            PyObject *tmp_cmp_expr_left_7;
            PyObject *tmp_cmp_expr_right_7;
            CHECK_OBJECT(tmp_class_creation_7__bases);
            tmp_cmp_expr_left_7 = tmp_class_creation_7__bases;
            CHECK_OBJECT(tmp_class_creation_7__bases_orig);
            tmp_cmp_expr_right_7 = tmp_class_creation_7__bases_orig;
            tmp_condition_result_42 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_7, tmp_cmp_expr_right_7);
            if (tmp_condition_result_42 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 95;

                goto try_except_handler_21;
            }
            if (tmp_condition_result_42 == NUITKA_BOOL_TRUE) {
                goto branch_yes_28;
            } else {
                goto branch_no_28;
            }
            assert(tmp_condition_result_42 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_28:;
        CHECK_OBJECT(tmp_class_creation_7__bases_orig);
        tmp_dictset_value = tmp_class_creation_7__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__7_InvalidIMDSEndpointError_95, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_21;
        }
        branch_no_28:;
        {
            PyObject *tmp_assign_source_62;
            PyObject *tmp_called_value_14;
            PyObject *tmp_args_value_14;
            PyObject *tmp_tuple_element_27;
            PyObject *tmp_kwargs_value_14;
            CHECK_OBJECT(tmp_class_creation_7__metaclass);
            tmp_called_value_14 = tmp_class_creation_7__metaclass;
            tmp_tuple_element_27 = mod_consts[73];
            tmp_args_value_14 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_14, 0, tmp_tuple_element_27);
            CHECK_OBJECT(tmp_class_creation_7__bases);
            tmp_tuple_element_27 = tmp_class_creation_7__bases;
            PyTuple_SET_ITEM0(tmp_args_value_14, 1, tmp_tuple_element_27);
            tmp_tuple_element_27 = locals_botocore$exceptions$$$class__7_InvalidIMDSEndpointError_95;
            PyTuple_SET_ITEM0(tmp_args_value_14, 2, tmp_tuple_element_27);
            CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
            tmp_kwargs_value_14 = tmp_class_creation_7__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 95;
            tmp_assign_source_62 = CALL_FUNCTION(tmp_called_value_14, tmp_args_value_14, tmp_kwargs_value_14);
            Py_DECREF(tmp_args_value_14);
            if (tmp_assign_source_62 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 95;

                goto try_except_handler_21;
            }
            assert(outline_6_var___class__ == NULL);
            outline_6_var___class__ = tmp_assign_source_62;
        }
        CHECK_OBJECT(outline_6_var___class__);
        tmp_assign_source_61 = outline_6_var___class__;
        Py_INCREF(tmp_assign_source_61);
        goto try_return_handler_21;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_21:;
        Py_DECREF(locals_botocore$exceptions$$$class__7_InvalidIMDSEndpointError_95);
        locals_botocore$exceptions$$$class__7_InvalidIMDSEndpointError_95 = NULL;
        goto try_return_handler_20;
        // Exception handler code:
        try_except_handler_21:;
        exception_keeper_type_19 = exception_type;
        exception_keeper_value_19 = exception_value;
        exception_keeper_tb_19 = exception_tb;
        exception_keeper_lineno_19 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__7_InvalidIMDSEndpointError_95);
        locals_botocore$exceptions$$$class__7_InvalidIMDSEndpointError_95 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_19;
        exception_value = exception_keeper_value_19;
        exception_tb = exception_keeper_tb_19;
        exception_lineno = exception_keeper_lineno_19;

        goto try_except_handler_20;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_20:;
        CHECK_OBJECT(outline_6_var___class__);
        Py_DECREF(outline_6_var___class__);
        outline_6_var___class__ = NULL;
        goto outline_result_7;
        // Exception handler code:
        try_except_handler_20:;
        exception_keeper_type_20 = exception_type;
        exception_keeper_value_20 = exception_value;
        exception_keeper_tb_20 = exception_tb;
        exception_keeper_lineno_20 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_20;
        exception_value = exception_keeper_value_20;
        exception_tb = exception_keeper_tb_20;
        exception_lineno = exception_keeper_lineno_20;

        goto outline_exception_7;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_7:;
        exception_lineno = 95;
        goto try_except_handler_19;
        outline_result_7:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[73], tmp_assign_source_61);
    }
    goto try_end_7;
    // Exception handler code:
    try_except_handler_19:;
    exception_keeper_type_21 = exception_type;
    exception_keeper_value_21 = exception_value;
    exception_keeper_tb_21 = exception_tb;
    exception_keeper_lineno_21 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_7__bases_orig);
    tmp_class_creation_7__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_7__bases);
    tmp_class_creation_7__bases = NULL;
    Py_XDECREF(tmp_class_creation_7__class_decl_dict);
    tmp_class_creation_7__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_7__metaclass);
    tmp_class_creation_7__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_7__prepared);
    tmp_class_creation_7__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_21;
    exception_value = exception_keeper_value_21;
    exception_tb = exception_keeper_tb_21;
    exception_lineno = exception_keeper_lineno_21;

    goto frame_exception_exit_1;
    // End of try:
    try_end_7:;
    CHECK_OBJECT(tmp_class_creation_7__bases_orig);
    Py_DECREF(tmp_class_creation_7__bases_orig);
    tmp_class_creation_7__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_7__bases);
    Py_DECREF(tmp_class_creation_7__bases);
    tmp_class_creation_7__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
    Py_DECREF(tmp_class_creation_7__class_decl_dict);
    tmp_class_creation_7__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_7__metaclass);
    Py_DECREF(tmp_class_creation_7__metaclass);
    tmp_class_creation_7__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_7__prepared);
    Py_DECREF(tmp_class_creation_7__prepared);
    tmp_class_creation_7__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_63;
        PyObject *tmp_tuple_element_28;
        tmp_tuple_element_28 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[71]);

        if (unlikely(tmp_tuple_element_28 == NULL)) {
            tmp_tuple_element_28 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
        }

        if (tmp_tuple_element_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_22;
        }
        tmp_assign_source_63 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_63, 0, tmp_tuple_element_28);
        assert(tmp_class_creation_8__bases_orig == NULL);
        tmp_class_creation_8__bases_orig = tmp_assign_source_63;
    }
    {
        PyObject *tmp_assign_source_64;
        PyObject *tmp_dircall_arg1_8;
        CHECK_OBJECT(tmp_class_creation_8__bases_orig);
        tmp_dircall_arg1_8 = tmp_class_creation_8__bases_orig;
        Py_INCREF(tmp_dircall_arg1_8);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_8};
            tmp_assign_source_64 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_64 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_22;
        }
        assert(tmp_class_creation_8__bases == NULL);
        tmp_class_creation_8__bases = tmp_assign_source_64;
    }
    {
        PyObject *tmp_assign_source_65;
        tmp_assign_source_65 = PyDict_New();
        assert(tmp_class_creation_8__class_decl_dict == NULL);
        tmp_class_creation_8__class_decl_dict = tmp_assign_source_65;
    }
    {
        PyObject *tmp_assign_source_66;
        PyObject *tmp_metaclass_value_8;
        bool tmp_condition_result_43;
        PyObject *tmp_key_value_22;
        PyObject *tmp_dict_arg_value_22;
        PyObject *tmp_dict_arg_value_23;
        PyObject *tmp_key_value_23;
        nuitka_bool tmp_condition_result_44;
        int tmp_truth_name_8;
        PyObject *tmp_type_arg_15;
        PyObject *tmp_expression_value_36;
        PyObject *tmp_subscript_value_8;
        PyObject *tmp_bases_value_8;
        tmp_key_value_22 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
        tmp_dict_arg_value_22 = tmp_class_creation_8__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_22, tmp_key_value_22);
        assert(!(tmp_res == -1));
        tmp_condition_result_43 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_43 != false) {
            goto condexpr_true_15;
        } else {
            goto condexpr_false_15;
        }
        condexpr_true_15:;
        CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
        tmp_dict_arg_value_23 = tmp_class_creation_8__class_decl_dict;
        tmp_key_value_23 = mod_consts[43];
        tmp_metaclass_value_8 = DICT_GET_ITEM0(tmp_dict_arg_value_23, tmp_key_value_23);
        if (tmp_metaclass_value_8 == NULL) {
            tmp_metaclass_value_8 = Py_None;
        }
        assert(!(tmp_metaclass_value_8 == NULL));
        Py_INCREF(tmp_metaclass_value_8);
        goto condexpr_end_15;
        condexpr_false_15:;
        CHECK_OBJECT(tmp_class_creation_8__bases);
        tmp_truth_name_8 = CHECK_IF_TRUE(tmp_class_creation_8__bases);
        if (tmp_truth_name_8 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_22;
        }
        tmp_condition_result_44 = tmp_truth_name_8 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_44 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_16;
        } else {
            goto condexpr_false_16;
        }
        condexpr_true_16:;
        CHECK_OBJECT(tmp_class_creation_8__bases);
        tmp_expression_value_36 = tmp_class_creation_8__bases;
        tmp_subscript_value_8 = mod_consts[36];
        tmp_type_arg_15 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_36, tmp_subscript_value_8, 0);
        if (tmp_type_arg_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_22;
        }
        tmp_metaclass_value_8 = BUILTIN_TYPE1(tmp_type_arg_15);
        Py_DECREF(tmp_type_arg_15);
        if (tmp_metaclass_value_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_22;
        }
        goto condexpr_end_16;
        condexpr_false_16:;
        tmp_metaclass_value_8 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_8);
        condexpr_end_16:;
        condexpr_end_15:;
        CHECK_OBJECT(tmp_class_creation_8__bases);
        tmp_bases_value_8 = tmp_class_creation_8__bases;
        tmp_assign_source_66 = SELECT_METACLASS(tmp_metaclass_value_8, tmp_bases_value_8);
        Py_DECREF(tmp_metaclass_value_8);
        if (tmp_assign_source_66 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_22;
        }
        assert(tmp_class_creation_8__metaclass == NULL);
        tmp_class_creation_8__metaclass = tmp_assign_source_66;
    }
    {
        bool tmp_condition_result_45;
        PyObject *tmp_key_value_24;
        PyObject *tmp_dict_arg_value_24;
        tmp_key_value_24 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
        tmp_dict_arg_value_24 = tmp_class_creation_8__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_24, tmp_key_value_24);
        assert(!(tmp_res == -1));
        tmp_condition_result_45 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_45 != false) {
            goto branch_yes_29;
        } else {
            goto branch_no_29;
        }
    }
    branch_yes_29:;
    CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_8__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 99;

        goto try_except_handler_22;
    }
    branch_no_29:;
    {
        nuitka_bool tmp_condition_result_46;
        PyObject *tmp_expression_value_37;
        CHECK_OBJECT(tmp_class_creation_8__metaclass);
        tmp_expression_value_37 = tmp_class_creation_8__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_37, mod_consts[44]);
        tmp_condition_result_46 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_46 == NUITKA_BOOL_TRUE) {
            goto branch_yes_30;
        } else {
            goto branch_no_30;
        }
    }
    branch_yes_30:;
    {
        PyObject *tmp_assign_source_67;
        PyObject *tmp_called_value_15;
        PyObject *tmp_expression_value_38;
        PyObject *tmp_args_value_15;
        PyObject *tmp_tuple_element_29;
        PyObject *tmp_kwargs_value_15;
        CHECK_OBJECT(tmp_class_creation_8__metaclass);
        tmp_expression_value_38 = tmp_class_creation_8__metaclass;
        tmp_called_value_15 = LOOKUP_ATTRIBUTE(tmp_expression_value_38, mod_consts[44]);
        if (tmp_called_value_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_22;
        }
        tmp_tuple_element_29 = mod_consts[75];
        tmp_args_value_15 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_15, 0, tmp_tuple_element_29);
        CHECK_OBJECT(tmp_class_creation_8__bases);
        tmp_tuple_element_29 = tmp_class_creation_8__bases;
        PyTuple_SET_ITEM0(tmp_args_value_15, 1, tmp_tuple_element_29);
        CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
        tmp_kwargs_value_15 = tmp_class_creation_8__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 99;
        tmp_assign_source_67 = CALL_FUNCTION(tmp_called_value_15, tmp_args_value_15, tmp_kwargs_value_15);
        Py_DECREF(tmp_called_value_15);
        Py_DECREF(tmp_args_value_15);
        if (tmp_assign_source_67 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_22;
        }
        assert(tmp_class_creation_8__prepared == NULL);
        tmp_class_creation_8__prepared = tmp_assign_source_67;
    }
    {
        bool tmp_condition_result_47;
        PyObject *tmp_operand_value_8;
        PyObject *tmp_expression_value_39;
        CHECK_OBJECT(tmp_class_creation_8__prepared);
        tmp_expression_value_39 = tmp_class_creation_8__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_39, mod_consts[46]);
        tmp_operand_value_8 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_8);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_22;
        }
        tmp_condition_result_47 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_47 != false) {
            goto branch_yes_31;
        } else {
            goto branch_no_31;
        }
    }
    branch_yes_31:;
    {
        PyObject *tmp_raise_type_8;
        PyObject *tmp_raise_value_8;
        PyObject *tmp_left_value_8;
        PyObject *tmp_right_value_8;
        PyObject *tmp_tuple_element_30;
        PyObject *tmp_getattr_target_8;
        PyObject *tmp_getattr_attr_8;
        PyObject *tmp_getattr_default_8;
        tmp_raise_type_8 = PyExc_TypeError;
        tmp_left_value_8 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_8__metaclass);
        tmp_getattr_target_8 = tmp_class_creation_8__metaclass;
        tmp_getattr_attr_8 = mod_consts[48];
        tmp_getattr_default_8 = mod_consts[49];
        tmp_tuple_element_30 = BUILTIN_GETATTR(tmp_getattr_target_8, tmp_getattr_attr_8, tmp_getattr_default_8);
        if (tmp_tuple_element_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_22;
        }
        tmp_right_value_8 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_40;
            PyObject *tmp_type_arg_16;
            PyTuple_SET_ITEM(tmp_right_value_8, 0, tmp_tuple_element_30);
            CHECK_OBJECT(tmp_class_creation_8__prepared);
            tmp_type_arg_16 = tmp_class_creation_8__prepared;
            tmp_expression_value_40 = BUILTIN_TYPE1(tmp_type_arg_16);
            assert(!(tmp_expression_value_40 == NULL));
            tmp_tuple_element_30 = LOOKUP_ATTRIBUTE(tmp_expression_value_40, mod_consts[48]);
            Py_DECREF(tmp_expression_value_40);
            if (tmp_tuple_element_30 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 99;

                goto tuple_build_exception_8;
            }
            PyTuple_SET_ITEM(tmp_right_value_8, 1, tmp_tuple_element_30);
        }
        goto tuple_build_noexception_8;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_8:;
        Py_DECREF(tmp_right_value_8);
        goto try_except_handler_22;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_8:;
        tmp_raise_value_8 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_8, tmp_right_value_8);
        Py_DECREF(tmp_right_value_8);
        if (tmp_raise_value_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_22;
        }
        exception_type = tmp_raise_type_8;
        Py_INCREF(tmp_raise_type_8);
        exception_value = tmp_raise_value_8;
        exception_lineno = 99;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_22;
    }
    branch_no_31:;
    goto branch_end_30;
    branch_no_30:;
    {
        PyObject *tmp_assign_source_68;
        tmp_assign_source_68 = PyDict_New();
        assert(tmp_class_creation_8__prepared == NULL);
        tmp_class_creation_8__prepared = tmp_assign_source_68;
    }
    branch_end_30:;
    {
        PyObject *tmp_assign_source_69;
        {
            PyObject *tmp_set_locals_8;
            CHECK_OBJECT(tmp_class_creation_8__prepared);
            tmp_set_locals_8 = tmp_class_creation_8__prepared;
            locals_botocore$exceptions$$$class__8_EndpointConnectionError_99 = tmp_set_locals_8;
            Py_INCREF(tmp_set_locals_8);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__8_EndpointConnectionError_99, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_24;
        }
        tmp_dictset_value = mod_consts[75];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__8_EndpointConnectionError_99, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_24;
        }
        if (isFrameUnusable(cache_frame_7cdff9186afb17bbc5764d8b30246182_9)) {
            Py_XDECREF(cache_frame_7cdff9186afb17bbc5764d8b30246182_9);

#if _DEBUG_REFCOUNTS
            if (cache_frame_7cdff9186afb17bbc5764d8b30246182_9 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_7cdff9186afb17bbc5764d8b30246182_9 = MAKE_FUNCTION_FRAME(codeobj_7cdff9186afb17bbc5764d8b30246182, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_7cdff9186afb17bbc5764d8b30246182_9->m_type_description == NULL);
        frame_7cdff9186afb17bbc5764d8b30246182_9 = cache_frame_7cdff9186afb17bbc5764d8b30246182_9;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_7cdff9186afb17bbc5764d8b30246182_9);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_7cdff9186afb17bbc5764d8b30246182_9) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[76];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__8_EndpointConnectionError_99, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 100;
            type_description_2 = "o";
            goto frame_exception_exit_9;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_7cdff9186afb17bbc5764d8b30246182_9);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_8;

        frame_exception_exit_9:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_7cdff9186afb17bbc5764d8b30246182_9);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_7cdff9186afb17bbc5764d8b30246182_9, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_7cdff9186afb17bbc5764d8b30246182_9->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_7cdff9186afb17bbc5764d8b30246182_9, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_7cdff9186afb17bbc5764d8b30246182_9,
            type_description_2,
            outline_7_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_7cdff9186afb17bbc5764d8b30246182_9 == cache_frame_7cdff9186afb17bbc5764d8b30246182_9) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_7cdff9186afb17bbc5764d8b30246182_9);
            cache_frame_7cdff9186afb17bbc5764d8b30246182_9 = NULL;
        }

        assertFrameObject(frame_7cdff9186afb17bbc5764d8b30246182_9);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_8;

        frame_no_exception_8:;
        goto skip_nested_handling_8;
        nested_frame_exit_8:;

        goto try_except_handler_24;
        skip_nested_handling_8:;
        {
            nuitka_bool tmp_condition_result_48;
            PyObject *tmp_cmp_expr_left_8;
            PyObject *tmp_cmp_expr_right_8;
            CHECK_OBJECT(tmp_class_creation_8__bases);
            tmp_cmp_expr_left_8 = tmp_class_creation_8__bases;
            CHECK_OBJECT(tmp_class_creation_8__bases_orig);
            tmp_cmp_expr_right_8 = tmp_class_creation_8__bases_orig;
            tmp_condition_result_48 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_8, tmp_cmp_expr_right_8);
            if (tmp_condition_result_48 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 99;

                goto try_except_handler_24;
            }
            if (tmp_condition_result_48 == NUITKA_BOOL_TRUE) {
                goto branch_yes_32;
            } else {
                goto branch_no_32;
            }
            assert(tmp_condition_result_48 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_32:;
        CHECK_OBJECT(tmp_class_creation_8__bases_orig);
        tmp_dictset_value = tmp_class_creation_8__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__8_EndpointConnectionError_99, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_24;
        }
        branch_no_32:;
        {
            PyObject *tmp_assign_source_70;
            PyObject *tmp_called_value_16;
            PyObject *tmp_args_value_16;
            PyObject *tmp_tuple_element_31;
            PyObject *tmp_kwargs_value_16;
            CHECK_OBJECT(tmp_class_creation_8__metaclass);
            tmp_called_value_16 = tmp_class_creation_8__metaclass;
            tmp_tuple_element_31 = mod_consts[75];
            tmp_args_value_16 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_16, 0, tmp_tuple_element_31);
            CHECK_OBJECT(tmp_class_creation_8__bases);
            tmp_tuple_element_31 = tmp_class_creation_8__bases;
            PyTuple_SET_ITEM0(tmp_args_value_16, 1, tmp_tuple_element_31);
            tmp_tuple_element_31 = locals_botocore$exceptions$$$class__8_EndpointConnectionError_99;
            PyTuple_SET_ITEM0(tmp_args_value_16, 2, tmp_tuple_element_31);
            CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
            tmp_kwargs_value_16 = tmp_class_creation_8__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 99;
            tmp_assign_source_70 = CALL_FUNCTION(tmp_called_value_16, tmp_args_value_16, tmp_kwargs_value_16);
            Py_DECREF(tmp_args_value_16);
            if (tmp_assign_source_70 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 99;

                goto try_except_handler_24;
            }
            assert(outline_7_var___class__ == NULL);
            outline_7_var___class__ = tmp_assign_source_70;
        }
        CHECK_OBJECT(outline_7_var___class__);
        tmp_assign_source_69 = outline_7_var___class__;
        Py_INCREF(tmp_assign_source_69);
        goto try_return_handler_24;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_24:;
        Py_DECREF(locals_botocore$exceptions$$$class__8_EndpointConnectionError_99);
        locals_botocore$exceptions$$$class__8_EndpointConnectionError_99 = NULL;
        goto try_return_handler_23;
        // Exception handler code:
        try_except_handler_24:;
        exception_keeper_type_22 = exception_type;
        exception_keeper_value_22 = exception_value;
        exception_keeper_tb_22 = exception_tb;
        exception_keeper_lineno_22 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__8_EndpointConnectionError_99);
        locals_botocore$exceptions$$$class__8_EndpointConnectionError_99 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_22;
        exception_value = exception_keeper_value_22;
        exception_tb = exception_keeper_tb_22;
        exception_lineno = exception_keeper_lineno_22;

        goto try_except_handler_23;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_23:;
        CHECK_OBJECT(outline_7_var___class__);
        Py_DECREF(outline_7_var___class__);
        outline_7_var___class__ = NULL;
        goto outline_result_8;
        // Exception handler code:
        try_except_handler_23:;
        exception_keeper_type_23 = exception_type;
        exception_keeper_value_23 = exception_value;
        exception_keeper_tb_23 = exception_tb;
        exception_keeper_lineno_23 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_23;
        exception_value = exception_keeper_value_23;
        exception_tb = exception_keeper_tb_23;
        exception_lineno = exception_keeper_lineno_23;

        goto outline_exception_8;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_8:;
        exception_lineno = 99;
        goto try_except_handler_22;
        outline_result_8:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[75], tmp_assign_source_69);
    }
    goto try_end_8;
    // Exception handler code:
    try_except_handler_22:;
    exception_keeper_type_24 = exception_type;
    exception_keeper_value_24 = exception_value;
    exception_keeper_tb_24 = exception_tb;
    exception_keeper_lineno_24 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_8__bases_orig);
    tmp_class_creation_8__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_8__bases);
    tmp_class_creation_8__bases = NULL;
    Py_XDECREF(tmp_class_creation_8__class_decl_dict);
    tmp_class_creation_8__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_8__metaclass);
    tmp_class_creation_8__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_8__prepared);
    tmp_class_creation_8__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_24;
    exception_value = exception_keeper_value_24;
    exception_tb = exception_keeper_tb_24;
    exception_lineno = exception_keeper_lineno_24;

    goto frame_exception_exit_1;
    // End of try:
    try_end_8:;
    CHECK_OBJECT(tmp_class_creation_8__bases_orig);
    Py_DECREF(tmp_class_creation_8__bases_orig);
    tmp_class_creation_8__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_8__bases);
    Py_DECREF(tmp_class_creation_8__bases);
    tmp_class_creation_8__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
    Py_DECREF(tmp_class_creation_8__class_decl_dict);
    tmp_class_creation_8__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_8__metaclass);
    Py_DECREF(tmp_class_creation_8__metaclass);
    tmp_class_creation_8__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_8__prepared);
    Py_DECREF(tmp_class_creation_8__prepared);
    tmp_class_creation_8__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_71;
        PyObject *tmp_tuple_element_32;
        tmp_tuple_element_32 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[71]);

        if (unlikely(tmp_tuple_element_32 == NULL)) {
            tmp_tuple_element_32 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
        }

        if (tmp_tuple_element_32 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 103;

            goto try_except_handler_25;
        }
        tmp_assign_source_71 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_41;
            PyObject *tmp_expression_value_42;
            PyTuple_SET_ITEM0(tmp_assign_source_71, 0, tmp_tuple_element_32);
            tmp_expression_value_42 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[37]);

            if (unlikely(tmp_expression_value_42 == NULL)) {
                tmp_expression_value_42 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[37]);
            }

            if (tmp_expression_value_42 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 103;

                goto tuple_build_exception_9;
            }
            tmp_expression_value_41 = LOOKUP_ATTRIBUTE(tmp_expression_value_42, mod_consts[77]);
            if (tmp_expression_value_41 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 103;

                goto tuple_build_exception_9;
            }
            tmp_tuple_element_32 = LOOKUP_ATTRIBUTE(tmp_expression_value_41, mod_consts[78]);
            Py_DECREF(tmp_expression_value_41);
            if (tmp_tuple_element_32 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 103;

                goto tuple_build_exception_9;
            }
            PyTuple_SET_ITEM(tmp_assign_source_71, 1, tmp_tuple_element_32);
        }
        goto tuple_build_noexception_9;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_9:;
        Py_DECREF(tmp_assign_source_71);
        goto try_except_handler_25;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_9:;
        assert(tmp_class_creation_9__bases_orig == NULL);
        tmp_class_creation_9__bases_orig = tmp_assign_source_71;
    }
    {
        PyObject *tmp_assign_source_72;
        PyObject *tmp_dircall_arg1_9;
        CHECK_OBJECT(tmp_class_creation_9__bases_orig);
        tmp_dircall_arg1_9 = tmp_class_creation_9__bases_orig;
        Py_INCREF(tmp_dircall_arg1_9);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_9};
            tmp_assign_source_72 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_72 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 103;

            goto try_except_handler_25;
        }
        assert(tmp_class_creation_9__bases == NULL);
        tmp_class_creation_9__bases = tmp_assign_source_72;
    }
    {
        PyObject *tmp_assign_source_73;
        tmp_assign_source_73 = PyDict_New();
        assert(tmp_class_creation_9__class_decl_dict == NULL);
        tmp_class_creation_9__class_decl_dict = tmp_assign_source_73;
    }
    {
        PyObject *tmp_assign_source_74;
        PyObject *tmp_metaclass_value_9;
        bool tmp_condition_result_49;
        PyObject *tmp_key_value_25;
        PyObject *tmp_dict_arg_value_25;
        PyObject *tmp_dict_arg_value_26;
        PyObject *tmp_key_value_26;
        nuitka_bool tmp_condition_result_50;
        int tmp_truth_name_9;
        PyObject *tmp_type_arg_17;
        PyObject *tmp_expression_value_43;
        PyObject *tmp_subscript_value_9;
        PyObject *tmp_bases_value_9;
        tmp_key_value_25 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
        tmp_dict_arg_value_25 = tmp_class_creation_9__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_25, tmp_key_value_25);
        assert(!(tmp_res == -1));
        tmp_condition_result_49 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_49 != false) {
            goto condexpr_true_17;
        } else {
            goto condexpr_false_17;
        }
        condexpr_true_17:;
        CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
        tmp_dict_arg_value_26 = tmp_class_creation_9__class_decl_dict;
        tmp_key_value_26 = mod_consts[43];
        tmp_metaclass_value_9 = DICT_GET_ITEM0(tmp_dict_arg_value_26, tmp_key_value_26);
        if (tmp_metaclass_value_9 == NULL) {
            tmp_metaclass_value_9 = Py_None;
        }
        assert(!(tmp_metaclass_value_9 == NULL));
        Py_INCREF(tmp_metaclass_value_9);
        goto condexpr_end_17;
        condexpr_false_17:;
        CHECK_OBJECT(tmp_class_creation_9__bases);
        tmp_truth_name_9 = CHECK_IF_TRUE(tmp_class_creation_9__bases);
        if (tmp_truth_name_9 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 103;

            goto try_except_handler_25;
        }
        tmp_condition_result_50 = tmp_truth_name_9 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_50 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_18;
        } else {
            goto condexpr_false_18;
        }
        condexpr_true_18:;
        CHECK_OBJECT(tmp_class_creation_9__bases);
        tmp_expression_value_43 = tmp_class_creation_9__bases;
        tmp_subscript_value_9 = mod_consts[36];
        tmp_type_arg_17 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_43, tmp_subscript_value_9, 0);
        if (tmp_type_arg_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 103;

            goto try_except_handler_25;
        }
        tmp_metaclass_value_9 = BUILTIN_TYPE1(tmp_type_arg_17);
        Py_DECREF(tmp_type_arg_17);
        if (tmp_metaclass_value_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 103;

            goto try_except_handler_25;
        }
        goto condexpr_end_18;
        condexpr_false_18:;
        tmp_metaclass_value_9 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_9);
        condexpr_end_18:;
        condexpr_end_17:;
        CHECK_OBJECT(tmp_class_creation_9__bases);
        tmp_bases_value_9 = tmp_class_creation_9__bases;
        tmp_assign_source_74 = SELECT_METACLASS(tmp_metaclass_value_9, tmp_bases_value_9);
        Py_DECREF(tmp_metaclass_value_9);
        if (tmp_assign_source_74 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 103;

            goto try_except_handler_25;
        }
        assert(tmp_class_creation_9__metaclass == NULL);
        tmp_class_creation_9__metaclass = tmp_assign_source_74;
    }
    {
        bool tmp_condition_result_51;
        PyObject *tmp_key_value_27;
        PyObject *tmp_dict_arg_value_27;
        tmp_key_value_27 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
        tmp_dict_arg_value_27 = tmp_class_creation_9__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_27, tmp_key_value_27);
        assert(!(tmp_res == -1));
        tmp_condition_result_51 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_51 != false) {
            goto branch_yes_33;
        } else {
            goto branch_no_33;
        }
    }
    branch_yes_33:;
    CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_9__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 103;

        goto try_except_handler_25;
    }
    branch_no_33:;
    {
        nuitka_bool tmp_condition_result_52;
        PyObject *tmp_expression_value_44;
        CHECK_OBJECT(tmp_class_creation_9__metaclass);
        tmp_expression_value_44 = tmp_class_creation_9__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_44, mod_consts[44]);
        tmp_condition_result_52 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_52 == NUITKA_BOOL_TRUE) {
            goto branch_yes_34;
        } else {
            goto branch_no_34;
        }
    }
    branch_yes_34:;
    {
        PyObject *tmp_assign_source_75;
        PyObject *tmp_called_value_17;
        PyObject *tmp_expression_value_45;
        PyObject *tmp_args_value_17;
        PyObject *tmp_tuple_element_33;
        PyObject *tmp_kwargs_value_17;
        CHECK_OBJECT(tmp_class_creation_9__metaclass);
        tmp_expression_value_45 = tmp_class_creation_9__metaclass;
        tmp_called_value_17 = LOOKUP_ATTRIBUTE(tmp_expression_value_45, mod_consts[44]);
        if (tmp_called_value_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 103;

            goto try_except_handler_25;
        }
        tmp_tuple_element_33 = mod_consts[78];
        tmp_args_value_17 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_17, 0, tmp_tuple_element_33);
        CHECK_OBJECT(tmp_class_creation_9__bases);
        tmp_tuple_element_33 = tmp_class_creation_9__bases;
        PyTuple_SET_ITEM0(tmp_args_value_17, 1, tmp_tuple_element_33);
        CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
        tmp_kwargs_value_17 = tmp_class_creation_9__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 103;
        tmp_assign_source_75 = CALL_FUNCTION(tmp_called_value_17, tmp_args_value_17, tmp_kwargs_value_17);
        Py_DECREF(tmp_called_value_17);
        Py_DECREF(tmp_args_value_17);
        if (tmp_assign_source_75 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 103;

            goto try_except_handler_25;
        }
        assert(tmp_class_creation_9__prepared == NULL);
        tmp_class_creation_9__prepared = tmp_assign_source_75;
    }
    {
        bool tmp_condition_result_53;
        PyObject *tmp_operand_value_9;
        PyObject *tmp_expression_value_46;
        CHECK_OBJECT(tmp_class_creation_9__prepared);
        tmp_expression_value_46 = tmp_class_creation_9__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_46, mod_consts[46]);
        tmp_operand_value_9 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_9);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 103;

            goto try_except_handler_25;
        }
        tmp_condition_result_53 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_53 != false) {
            goto branch_yes_35;
        } else {
            goto branch_no_35;
        }
    }
    branch_yes_35:;
    {
        PyObject *tmp_raise_type_9;
        PyObject *tmp_raise_value_9;
        PyObject *tmp_left_value_9;
        PyObject *tmp_right_value_9;
        PyObject *tmp_tuple_element_34;
        PyObject *tmp_getattr_target_9;
        PyObject *tmp_getattr_attr_9;
        PyObject *tmp_getattr_default_9;
        tmp_raise_type_9 = PyExc_TypeError;
        tmp_left_value_9 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_9__metaclass);
        tmp_getattr_target_9 = tmp_class_creation_9__metaclass;
        tmp_getattr_attr_9 = mod_consts[48];
        tmp_getattr_default_9 = mod_consts[49];
        tmp_tuple_element_34 = BUILTIN_GETATTR(tmp_getattr_target_9, tmp_getattr_attr_9, tmp_getattr_default_9);
        if (tmp_tuple_element_34 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 103;

            goto try_except_handler_25;
        }
        tmp_right_value_9 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_47;
            PyObject *tmp_type_arg_18;
            PyTuple_SET_ITEM(tmp_right_value_9, 0, tmp_tuple_element_34);
            CHECK_OBJECT(tmp_class_creation_9__prepared);
            tmp_type_arg_18 = tmp_class_creation_9__prepared;
            tmp_expression_value_47 = BUILTIN_TYPE1(tmp_type_arg_18);
            assert(!(tmp_expression_value_47 == NULL));
            tmp_tuple_element_34 = LOOKUP_ATTRIBUTE(tmp_expression_value_47, mod_consts[48]);
            Py_DECREF(tmp_expression_value_47);
            if (tmp_tuple_element_34 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 103;

                goto tuple_build_exception_10;
            }
            PyTuple_SET_ITEM(tmp_right_value_9, 1, tmp_tuple_element_34);
        }
        goto tuple_build_noexception_10;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_10:;
        Py_DECREF(tmp_right_value_9);
        goto try_except_handler_25;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_10:;
        tmp_raise_value_9 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_9, tmp_right_value_9);
        Py_DECREF(tmp_right_value_9);
        if (tmp_raise_value_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 103;

            goto try_except_handler_25;
        }
        exception_type = tmp_raise_type_9;
        Py_INCREF(tmp_raise_type_9);
        exception_value = tmp_raise_value_9;
        exception_lineno = 103;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_25;
    }
    branch_no_35:;
    goto branch_end_34;
    branch_no_34:;
    {
        PyObject *tmp_assign_source_76;
        tmp_assign_source_76 = PyDict_New();
        assert(tmp_class_creation_9__prepared == NULL);
        tmp_class_creation_9__prepared = tmp_assign_source_76;
    }
    branch_end_34:;
    {
        PyObject *tmp_assign_source_77;
        {
            PyObject *tmp_set_locals_9;
            CHECK_OBJECT(tmp_class_creation_9__prepared);
            tmp_set_locals_9 = tmp_class_creation_9__prepared;
            locals_botocore$exceptions$$$class__9_SSLError_103 = tmp_set_locals_9;
            Py_INCREF(tmp_set_locals_9);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__9_SSLError_103, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 103;

            goto try_except_handler_27;
        }
        tmp_dictset_value = mod_consts[78];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__9_SSLError_103, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 103;

            goto try_except_handler_27;
        }
        if (isFrameUnusable(cache_frame_026b7cc019bbc471dff47ad64f6c4beb_10)) {
            Py_XDECREF(cache_frame_026b7cc019bbc471dff47ad64f6c4beb_10);

#if _DEBUG_REFCOUNTS
            if (cache_frame_026b7cc019bbc471dff47ad64f6c4beb_10 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_026b7cc019bbc471dff47ad64f6c4beb_10 = MAKE_FUNCTION_FRAME(codeobj_026b7cc019bbc471dff47ad64f6c4beb, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_026b7cc019bbc471dff47ad64f6c4beb_10->m_type_description == NULL);
        frame_026b7cc019bbc471dff47ad64f6c4beb_10 = cache_frame_026b7cc019bbc471dff47ad64f6c4beb_10;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_026b7cc019bbc471dff47ad64f6c4beb_10);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_026b7cc019bbc471dff47ad64f6c4beb_10) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[79];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__9_SSLError_103, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 104;
            type_description_2 = "o";
            goto frame_exception_exit_10;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_026b7cc019bbc471dff47ad64f6c4beb_10);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_9;

        frame_exception_exit_10:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_026b7cc019bbc471dff47ad64f6c4beb_10);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_026b7cc019bbc471dff47ad64f6c4beb_10, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_026b7cc019bbc471dff47ad64f6c4beb_10->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_026b7cc019bbc471dff47ad64f6c4beb_10, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_026b7cc019bbc471dff47ad64f6c4beb_10,
            type_description_2,
            outline_8_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_026b7cc019bbc471dff47ad64f6c4beb_10 == cache_frame_026b7cc019bbc471dff47ad64f6c4beb_10) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_026b7cc019bbc471dff47ad64f6c4beb_10);
            cache_frame_026b7cc019bbc471dff47ad64f6c4beb_10 = NULL;
        }

        assertFrameObject(frame_026b7cc019bbc471dff47ad64f6c4beb_10);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_9;

        frame_no_exception_9:;
        goto skip_nested_handling_9;
        nested_frame_exit_9:;

        goto try_except_handler_27;
        skip_nested_handling_9:;
        {
            nuitka_bool tmp_condition_result_54;
            PyObject *tmp_cmp_expr_left_9;
            PyObject *tmp_cmp_expr_right_9;
            CHECK_OBJECT(tmp_class_creation_9__bases);
            tmp_cmp_expr_left_9 = tmp_class_creation_9__bases;
            CHECK_OBJECT(tmp_class_creation_9__bases_orig);
            tmp_cmp_expr_right_9 = tmp_class_creation_9__bases_orig;
            tmp_condition_result_54 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_9, tmp_cmp_expr_right_9);
            if (tmp_condition_result_54 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 103;

                goto try_except_handler_27;
            }
            if (tmp_condition_result_54 == NUITKA_BOOL_TRUE) {
                goto branch_yes_36;
            } else {
                goto branch_no_36;
            }
            assert(tmp_condition_result_54 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_36:;
        CHECK_OBJECT(tmp_class_creation_9__bases_orig);
        tmp_dictset_value = tmp_class_creation_9__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__9_SSLError_103, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 103;

            goto try_except_handler_27;
        }
        branch_no_36:;
        {
            PyObject *tmp_assign_source_78;
            PyObject *tmp_called_value_18;
            PyObject *tmp_args_value_18;
            PyObject *tmp_tuple_element_35;
            PyObject *tmp_kwargs_value_18;
            CHECK_OBJECT(tmp_class_creation_9__metaclass);
            tmp_called_value_18 = tmp_class_creation_9__metaclass;
            tmp_tuple_element_35 = mod_consts[78];
            tmp_args_value_18 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_18, 0, tmp_tuple_element_35);
            CHECK_OBJECT(tmp_class_creation_9__bases);
            tmp_tuple_element_35 = tmp_class_creation_9__bases;
            PyTuple_SET_ITEM0(tmp_args_value_18, 1, tmp_tuple_element_35);
            tmp_tuple_element_35 = locals_botocore$exceptions$$$class__9_SSLError_103;
            PyTuple_SET_ITEM0(tmp_args_value_18, 2, tmp_tuple_element_35);
            CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
            tmp_kwargs_value_18 = tmp_class_creation_9__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 103;
            tmp_assign_source_78 = CALL_FUNCTION(tmp_called_value_18, tmp_args_value_18, tmp_kwargs_value_18);
            Py_DECREF(tmp_args_value_18);
            if (tmp_assign_source_78 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 103;

                goto try_except_handler_27;
            }
            assert(outline_8_var___class__ == NULL);
            outline_8_var___class__ = tmp_assign_source_78;
        }
        CHECK_OBJECT(outline_8_var___class__);
        tmp_assign_source_77 = outline_8_var___class__;
        Py_INCREF(tmp_assign_source_77);
        goto try_return_handler_27;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_27:;
        Py_DECREF(locals_botocore$exceptions$$$class__9_SSLError_103);
        locals_botocore$exceptions$$$class__9_SSLError_103 = NULL;
        goto try_return_handler_26;
        // Exception handler code:
        try_except_handler_27:;
        exception_keeper_type_25 = exception_type;
        exception_keeper_value_25 = exception_value;
        exception_keeper_tb_25 = exception_tb;
        exception_keeper_lineno_25 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__9_SSLError_103);
        locals_botocore$exceptions$$$class__9_SSLError_103 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_25;
        exception_value = exception_keeper_value_25;
        exception_tb = exception_keeper_tb_25;
        exception_lineno = exception_keeper_lineno_25;

        goto try_except_handler_26;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_26:;
        CHECK_OBJECT(outline_8_var___class__);
        Py_DECREF(outline_8_var___class__);
        outline_8_var___class__ = NULL;
        goto outline_result_9;
        // Exception handler code:
        try_except_handler_26:;
        exception_keeper_type_26 = exception_type;
        exception_keeper_value_26 = exception_value;
        exception_keeper_tb_26 = exception_tb;
        exception_keeper_lineno_26 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_26;
        exception_value = exception_keeper_value_26;
        exception_tb = exception_keeper_tb_26;
        exception_lineno = exception_keeper_lineno_26;

        goto outline_exception_9;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_9:;
        exception_lineno = 103;
        goto try_except_handler_25;
        outline_result_9:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[78], tmp_assign_source_77);
    }
    goto try_end_9;
    // Exception handler code:
    try_except_handler_25:;
    exception_keeper_type_27 = exception_type;
    exception_keeper_value_27 = exception_value;
    exception_keeper_tb_27 = exception_tb;
    exception_keeper_lineno_27 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_9__bases_orig);
    tmp_class_creation_9__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_9__bases);
    tmp_class_creation_9__bases = NULL;
    Py_XDECREF(tmp_class_creation_9__class_decl_dict);
    tmp_class_creation_9__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_9__metaclass);
    tmp_class_creation_9__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_9__prepared);
    tmp_class_creation_9__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_27;
    exception_value = exception_keeper_value_27;
    exception_tb = exception_keeper_tb_27;
    exception_lineno = exception_keeper_lineno_27;

    goto frame_exception_exit_1;
    // End of try:
    try_end_9:;
    CHECK_OBJECT(tmp_class_creation_9__bases_orig);
    Py_DECREF(tmp_class_creation_9__bases_orig);
    tmp_class_creation_9__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_9__bases);
    Py_DECREF(tmp_class_creation_9__bases);
    tmp_class_creation_9__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
    Py_DECREF(tmp_class_creation_9__class_decl_dict);
    tmp_class_creation_9__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_9__metaclass);
    Py_DECREF(tmp_class_creation_9__metaclass);
    tmp_class_creation_9__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_9__prepared);
    Py_DECREF(tmp_class_creation_9__prepared);
    tmp_class_creation_9__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_79;
        PyObject *tmp_tuple_element_36;
        tmp_tuple_element_36 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[8]);

        if (unlikely(tmp_tuple_element_36 == NULL)) {
            tmp_tuple_element_36 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[8]);
        }

        if (tmp_tuple_element_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 107;

            goto try_except_handler_28;
        }
        tmp_assign_source_79 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_79, 0, tmp_tuple_element_36);
        assert(tmp_class_creation_10__bases_orig == NULL);
        tmp_class_creation_10__bases_orig = tmp_assign_source_79;
    }
    {
        PyObject *tmp_assign_source_80;
        PyObject *tmp_dircall_arg1_10;
        CHECK_OBJECT(tmp_class_creation_10__bases_orig);
        tmp_dircall_arg1_10 = tmp_class_creation_10__bases_orig;
        Py_INCREF(tmp_dircall_arg1_10);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_10};
            tmp_assign_source_80 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_80 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 107;

            goto try_except_handler_28;
        }
        assert(tmp_class_creation_10__bases == NULL);
        tmp_class_creation_10__bases = tmp_assign_source_80;
    }
    {
        PyObject *tmp_assign_source_81;
        tmp_assign_source_81 = PyDict_New();
        assert(tmp_class_creation_10__class_decl_dict == NULL);
        tmp_class_creation_10__class_decl_dict = tmp_assign_source_81;
    }
    {
        PyObject *tmp_assign_source_82;
        PyObject *tmp_metaclass_value_10;
        bool tmp_condition_result_55;
        PyObject *tmp_key_value_28;
        PyObject *tmp_dict_arg_value_28;
        PyObject *tmp_dict_arg_value_29;
        PyObject *tmp_key_value_29;
        nuitka_bool tmp_condition_result_56;
        int tmp_truth_name_10;
        PyObject *tmp_type_arg_19;
        PyObject *tmp_expression_value_48;
        PyObject *tmp_subscript_value_10;
        PyObject *tmp_bases_value_10;
        tmp_key_value_28 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
        tmp_dict_arg_value_28 = tmp_class_creation_10__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_28, tmp_key_value_28);
        assert(!(tmp_res == -1));
        tmp_condition_result_55 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_55 != false) {
            goto condexpr_true_19;
        } else {
            goto condexpr_false_19;
        }
        condexpr_true_19:;
        CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
        tmp_dict_arg_value_29 = tmp_class_creation_10__class_decl_dict;
        tmp_key_value_29 = mod_consts[43];
        tmp_metaclass_value_10 = DICT_GET_ITEM0(tmp_dict_arg_value_29, tmp_key_value_29);
        if (tmp_metaclass_value_10 == NULL) {
            tmp_metaclass_value_10 = Py_None;
        }
        assert(!(tmp_metaclass_value_10 == NULL));
        Py_INCREF(tmp_metaclass_value_10);
        goto condexpr_end_19;
        condexpr_false_19:;
        CHECK_OBJECT(tmp_class_creation_10__bases);
        tmp_truth_name_10 = CHECK_IF_TRUE(tmp_class_creation_10__bases);
        if (tmp_truth_name_10 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 107;

            goto try_except_handler_28;
        }
        tmp_condition_result_56 = tmp_truth_name_10 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_56 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_20;
        } else {
            goto condexpr_false_20;
        }
        condexpr_true_20:;
        CHECK_OBJECT(tmp_class_creation_10__bases);
        tmp_expression_value_48 = tmp_class_creation_10__bases;
        tmp_subscript_value_10 = mod_consts[36];
        tmp_type_arg_19 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_48, tmp_subscript_value_10, 0);
        if (tmp_type_arg_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 107;

            goto try_except_handler_28;
        }
        tmp_metaclass_value_10 = BUILTIN_TYPE1(tmp_type_arg_19);
        Py_DECREF(tmp_type_arg_19);
        if (tmp_metaclass_value_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 107;

            goto try_except_handler_28;
        }
        goto condexpr_end_20;
        condexpr_false_20:;
        tmp_metaclass_value_10 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_10);
        condexpr_end_20:;
        condexpr_end_19:;
        CHECK_OBJECT(tmp_class_creation_10__bases);
        tmp_bases_value_10 = tmp_class_creation_10__bases;
        tmp_assign_source_82 = SELECT_METACLASS(tmp_metaclass_value_10, tmp_bases_value_10);
        Py_DECREF(tmp_metaclass_value_10);
        if (tmp_assign_source_82 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 107;

            goto try_except_handler_28;
        }
        assert(tmp_class_creation_10__metaclass == NULL);
        tmp_class_creation_10__metaclass = tmp_assign_source_82;
    }
    {
        bool tmp_condition_result_57;
        PyObject *tmp_key_value_30;
        PyObject *tmp_dict_arg_value_30;
        tmp_key_value_30 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
        tmp_dict_arg_value_30 = tmp_class_creation_10__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_30, tmp_key_value_30);
        assert(!(tmp_res == -1));
        tmp_condition_result_57 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_57 != false) {
            goto branch_yes_37;
        } else {
            goto branch_no_37;
        }
    }
    branch_yes_37:;
    CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_10__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 107;

        goto try_except_handler_28;
    }
    branch_no_37:;
    {
        nuitka_bool tmp_condition_result_58;
        PyObject *tmp_expression_value_49;
        CHECK_OBJECT(tmp_class_creation_10__metaclass);
        tmp_expression_value_49 = tmp_class_creation_10__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_49, mod_consts[44]);
        tmp_condition_result_58 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_58 == NUITKA_BOOL_TRUE) {
            goto branch_yes_38;
        } else {
            goto branch_no_38;
        }
    }
    branch_yes_38:;
    {
        PyObject *tmp_assign_source_83;
        PyObject *tmp_called_value_19;
        PyObject *tmp_expression_value_50;
        PyObject *tmp_args_value_19;
        PyObject *tmp_tuple_element_37;
        PyObject *tmp_kwargs_value_19;
        CHECK_OBJECT(tmp_class_creation_10__metaclass);
        tmp_expression_value_50 = tmp_class_creation_10__metaclass;
        tmp_called_value_19 = LOOKUP_ATTRIBUTE(tmp_expression_value_50, mod_consts[44]);
        if (tmp_called_value_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 107;

            goto try_except_handler_28;
        }
        tmp_tuple_element_37 = mod_consts[80];
        tmp_args_value_19 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_19, 0, tmp_tuple_element_37);
        CHECK_OBJECT(tmp_class_creation_10__bases);
        tmp_tuple_element_37 = tmp_class_creation_10__bases;
        PyTuple_SET_ITEM0(tmp_args_value_19, 1, tmp_tuple_element_37);
        CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
        tmp_kwargs_value_19 = tmp_class_creation_10__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 107;
        tmp_assign_source_83 = CALL_FUNCTION(tmp_called_value_19, tmp_args_value_19, tmp_kwargs_value_19);
        Py_DECREF(tmp_called_value_19);
        Py_DECREF(tmp_args_value_19);
        if (tmp_assign_source_83 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 107;

            goto try_except_handler_28;
        }
        assert(tmp_class_creation_10__prepared == NULL);
        tmp_class_creation_10__prepared = tmp_assign_source_83;
    }
    {
        bool tmp_condition_result_59;
        PyObject *tmp_operand_value_10;
        PyObject *tmp_expression_value_51;
        CHECK_OBJECT(tmp_class_creation_10__prepared);
        tmp_expression_value_51 = tmp_class_creation_10__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_51, mod_consts[46]);
        tmp_operand_value_10 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_10);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 107;

            goto try_except_handler_28;
        }
        tmp_condition_result_59 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_59 != false) {
            goto branch_yes_39;
        } else {
            goto branch_no_39;
        }
    }
    branch_yes_39:;
    {
        PyObject *tmp_raise_type_10;
        PyObject *tmp_raise_value_10;
        PyObject *tmp_left_value_10;
        PyObject *tmp_right_value_10;
        PyObject *tmp_tuple_element_38;
        PyObject *tmp_getattr_target_10;
        PyObject *tmp_getattr_attr_10;
        PyObject *tmp_getattr_default_10;
        tmp_raise_type_10 = PyExc_TypeError;
        tmp_left_value_10 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_10__metaclass);
        tmp_getattr_target_10 = tmp_class_creation_10__metaclass;
        tmp_getattr_attr_10 = mod_consts[48];
        tmp_getattr_default_10 = mod_consts[49];
        tmp_tuple_element_38 = BUILTIN_GETATTR(tmp_getattr_target_10, tmp_getattr_attr_10, tmp_getattr_default_10);
        if (tmp_tuple_element_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 107;

            goto try_except_handler_28;
        }
        tmp_right_value_10 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_52;
            PyObject *tmp_type_arg_20;
            PyTuple_SET_ITEM(tmp_right_value_10, 0, tmp_tuple_element_38);
            CHECK_OBJECT(tmp_class_creation_10__prepared);
            tmp_type_arg_20 = tmp_class_creation_10__prepared;
            tmp_expression_value_52 = BUILTIN_TYPE1(tmp_type_arg_20);
            assert(!(tmp_expression_value_52 == NULL));
            tmp_tuple_element_38 = LOOKUP_ATTRIBUTE(tmp_expression_value_52, mod_consts[48]);
            Py_DECREF(tmp_expression_value_52);
            if (tmp_tuple_element_38 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 107;

                goto tuple_build_exception_11;
            }
            PyTuple_SET_ITEM(tmp_right_value_10, 1, tmp_tuple_element_38);
        }
        goto tuple_build_noexception_11;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_11:;
        Py_DECREF(tmp_right_value_10);
        goto try_except_handler_28;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_11:;
        tmp_raise_value_10 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_10, tmp_right_value_10);
        Py_DECREF(tmp_right_value_10);
        if (tmp_raise_value_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 107;

            goto try_except_handler_28;
        }
        exception_type = tmp_raise_type_10;
        Py_INCREF(tmp_raise_type_10);
        exception_value = tmp_raise_value_10;
        exception_lineno = 107;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_28;
    }
    branch_no_39:;
    goto branch_end_38;
    branch_no_38:;
    {
        PyObject *tmp_assign_source_84;
        tmp_assign_source_84 = PyDict_New();
        assert(tmp_class_creation_10__prepared == NULL);
        tmp_class_creation_10__prepared = tmp_assign_source_84;
    }
    branch_end_38:;
    {
        PyObject *tmp_assign_source_85;
        {
            PyObject *tmp_set_locals_10;
            CHECK_OBJECT(tmp_class_creation_10__prepared);
            tmp_set_locals_10 = tmp_class_creation_10__prepared;
            locals_botocore$exceptions$$$class__10_ConnectionClosedError_107 = tmp_set_locals_10;
            Py_INCREF(tmp_set_locals_10);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__10_ConnectionClosedError_107, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 107;

            goto try_except_handler_30;
        }
        tmp_dictset_value = mod_consts[80];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__10_ConnectionClosedError_107, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 107;

            goto try_except_handler_30;
        }
        if (isFrameUnusable(cache_frame_4e4a7642fc8c4fc4ee507673200fe6ab_11)) {
            Py_XDECREF(cache_frame_4e4a7642fc8c4fc4ee507673200fe6ab_11);

#if _DEBUG_REFCOUNTS
            if (cache_frame_4e4a7642fc8c4fc4ee507673200fe6ab_11 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_4e4a7642fc8c4fc4ee507673200fe6ab_11 = MAKE_FUNCTION_FRAME(codeobj_4e4a7642fc8c4fc4ee507673200fe6ab, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_4e4a7642fc8c4fc4ee507673200fe6ab_11->m_type_description == NULL);
        frame_4e4a7642fc8c4fc4ee507673200fe6ab_11 = cache_frame_4e4a7642fc8c4fc4ee507673200fe6ab_11;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_4e4a7642fc8c4fc4ee507673200fe6ab_11);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_4e4a7642fc8c4fc4ee507673200fe6ab_11) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[81];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__10_ConnectionClosedError_107, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 108;
            type_description_2 = "o";
            goto frame_exception_exit_11;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_4e4a7642fc8c4fc4ee507673200fe6ab_11);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_10;

        frame_exception_exit_11:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_4e4a7642fc8c4fc4ee507673200fe6ab_11);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_4e4a7642fc8c4fc4ee507673200fe6ab_11, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_4e4a7642fc8c4fc4ee507673200fe6ab_11->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_4e4a7642fc8c4fc4ee507673200fe6ab_11, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_4e4a7642fc8c4fc4ee507673200fe6ab_11,
            type_description_2,
            outline_9_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_4e4a7642fc8c4fc4ee507673200fe6ab_11 == cache_frame_4e4a7642fc8c4fc4ee507673200fe6ab_11) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_4e4a7642fc8c4fc4ee507673200fe6ab_11);
            cache_frame_4e4a7642fc8c4fc4ee507673200fe6ab_11 = NULL;
        }

        assertFrameObject(frame_4e4a7642fc8c4fc4ee507673200fe6ab_11);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_10;

        frame_no_exception_10:;
        goto skip_nested_handling_10;
        nested_frame_exit_10:;

        goto try_except_handler_30;
        skip_nested_handling_10:;
        {
            nuitka_bool tmp_condition_result_60;
            PyObject *tmp_cmp_expr_left_10;
            PyObject *tmp_cmp_expr_right_10;
            CHECK_OBJECT(tmp_class_creation_10__bases);
            tmp_cmp_expr_left_10 = tmp_class_creation_10__bases;
            CHECK_OBJECT(tmp_class_creation_10__bases_orig);
            tmp_cmp_expr_right_10 = tmp_class_creation_10__bases_orig;
            tmp_condition_result_60 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_10, tmp_cmp_expr_right_10);
            if (tmp_condition_result_60 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 107;

                goto try_except_handler_30;
            }
            if (tmp_condition_result_60 == NUITKA_BOOL_TRUE) {
                goto branch_yes_40;
            } else {
                goto branch_no_40;
            }
            assert(tmp_condition_result_60 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_40:;
        CHECK_OBJECT(tmp_class_creation_10__bases_orig);
        tmp_dictset_value = tmp_class_creation_10__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__10_ConnectionClosedError_107, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 107;

            goto try_except_handler_30;
        }
        branch_no_40:;
        {
            PyObject *tmp_assign_source_86;
            PyObject *tmp_called_value_20;
            PyObject *tmp_args_value_20;
            PyObject *tmp_tuple_element_39;
            PyObject *tmp_kwargs_value_20;
            CHECK_OBJECT(tmp_class_creation_10__metaclass);
            tmp_called_value_20 = tmp_class_creation_10__metaclass;
            tmp_tuple_element_39 = mod_consts[80];
            tmp_args_value_20 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_20, 0, tmp_tuple_element_39);
            CHECK_OBJECT(tmp_class_creation_10__bases);
            tmp_tuple_element_39 = tmp_class_creation_10__bases;
            PyTuple_SET_ITEM0(tmp_args_value_20, 1, tmp_tuple_element_39);
            tmp_tuple_element_39 = locals_botocore$exceptions$$$class__10_ConnectionClosedError_107;
            PyTuple_SET_ITEM0(tmp_args_value_20, 2, tmp_tuple_element_39);
            CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
            tmp_kwargs_value_20 = tmp_class_creation_10__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 107;
            tmp_assign_source_86 = CALL_FUNCTION(tmp_called_value_20, tmp_args_value_20, tmp_kwargs_value_20);
            Py_DECREF(tmp_args_value_20);
            if (tmp_assign_source_86 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 107;

                goto try_except_handler_30;
            }
            assert(outline_9_var___class__ == NULL);
            outline_9_var___class__ = tmp_assign_source_86;
        }
        CHECK_OBJECT(outline_9_var___class__);
        tmp_assign_source_85 = outline_9_var___class__;
        Py_INCREF(tmp_assign_source_85);
        goto try_return_handler_30;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_30:;
        Py_DECREF(locals_botocore$exceptions$$$class__10_ConnectionClosedError_107);
        locals_botocore$exceptions$$$class__10_ConnectionClosedError_107 = NULL;
        goto try_return_handler_29;
        // Exception handler code:
        try_except_handler_30:;
        exception_keeper_type_28 = exception_type;
        exception_keeper_value_28 = exception_value;
        exception_keeper_tb_28 = exception_tb;
        exception_keeper_lineno_28 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__10_ConnectionClosedError_107);
        locals_botocore$exceptions$$$class__10_ConnectionClosedError_107 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_28;
        exception_value = exception_keeper_value_28;
        exception_tb = exception_keeper_tb_28;
        exception_lineno = exception_keeper_lineno_28;

        goto try_except_handler_29;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_29:;
        CHECK_OBJECT(outline_9_var___class__);
        Py_DECREF(outline_9_var___class__);
        outline_9_var___class__ = NULL;
        goto outline_result_10;
        // Exception handler code:
        try_except_handler_29:;
        exception_keeper_type_29 = exception_type;
        exception_keeper_value_29 = exception_value;
        exception_keeper_tb_29 = exception_tb;
        exception_keeper_lineno_29 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_29;
        exception_value = exception_keeper_value_29;
        exception_tb = exception_keeper_tb_29;
        exception_lineno = exception_keeper_lineno_29;

        goto outline_exception_10;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_10:;
        exception_lineno = 107;
        goto try_except_handler_28;
        outline_result_10:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[80], tmp_assign_source_85);
    }
    goto try_end_10;
    // Exception handler code:
    try_except_handler_28:;
    exception_keeper_type_30 = exception_type;
    exception_keeper_value_30 = exception_value;
    exception_keeper_tb_30 = exception_tb;
    exception_keeper_lineno_30 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_10__bases_orig);
    tmp_class_creation_10__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_10__bases);
    tmp_class_creation_10__bases = NULL;
    Py_XDECREF(tmp_class_creation_10__class_decl_dict);
    tmp_class_creation_10__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_10__metaclass);
    tmp_class_creation_10__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_10__prepared);
    tmp_class_creation_10__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_30;
    exception_value = exception_keeper_value_30;
    exception_tb = exception_keeper_tb_30;
    exception_lineno = exception_keeper_lineno_30;

    goto frame_exception_exit_1;
    // End of try:
    try_end_10:;
    CHECK_OBJECT(tmp_class_creation_10__bases_orig);
    Py_DECREF(tmp_class_creation_10__bases_orig);
    tmp_class_creation_10__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_10__bases);
    Py_DECREF(tmp_class_creation_10__bases);
    tmp_class_creation_10__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
    Py_DECREF(tmp_class_creation_10__class_decl_dict);
    tmp_class_creation_10__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_10__metaclass);
    Py_DECREF(tmp_class_creation_10__metaclass);
    tmp_class_creation_10__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_10__prepared);
    Py_DECREF(tmp_class_creation_10__prepared);
    tmp_class_creation_10__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_87;
        PyObject *tmp_tuple_element_40;
        tmp_tuple_element_40 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[8]);

        if (unlikely(tmp_tuple_element_40 == NULL)) {
            tmp_tuple_element_40 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[8]);
        }

        if (tmp_tuple_element_40 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 113;

            goto try_except_handler_31;
        }
        tmp_assign_source_87 = PyTuple_New(3);
        {
            PyObject *tmp_expression_value_53;
            PyObject *tmp_expression_value_54;
            PyObject *tmp_expression_value_55;
            PyObject *tmp_expression_value_56;
            PyTuple_SET_ITEM0(tmp_assign_source_87, 0, tmp_tuple_element_40);
            tmp_expression_value_54 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[37]);

            if (unlikely(tmp_expression_value_54 == NULL)) {
                tmp_expression_value_54 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[37]);
            }

            if (tmp_expression_value_54 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 113;

                goto tuple_build_exception_12;
            }
            tmp_expression_value_53 = LOOKUP_ATTRIBUTE(tmp_expression_value_54, mod_consts[77]);
            if (tmp_expression_value_53 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 113;

                goto tuple_build_exception_12;
            }
            tmp_tuple_element_40 = LOOKUP_ATTRIBUTE(tmp_expression_value_53, mod_consts[82]);
            Py_DECREF(tmp_expression_value_53);
            if (tmp_tuple_element_40 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 113;

                goto tuple_build_exception_12;
            }
            PyTuple_SET_ITEM(tmp_assign_source_87, 1, tmp_tuple_element_40);
            tmp_expression_value_56 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[40]);

            if (unlikely(tmp_expression_value_56 == NULL)) {
                tmp_expression_value_56 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[40]);
            }

            if (tmp_expression_value_56 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 114;

                goto tuple_build_exception_12;
            }
            tmp_expression_value_55 = LOOKUP_ATTRIBUTE(tmp_expression_value_56, mod_consts[77]);
            if (tmp_expression_value_55 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 114;

                goto tuple_build_exception_12;
            }
            tmp_tuple_element_40 = LOOKUP_ATTRIBUTE(tmp_expression_value_55, mod_consts[83]);
            Py_DECREF(tmp_expression_value_55);
            if (tmp_tuple_element_40 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 114;

                goto tuple_build_exception_12;
            }
            PyTuple_SET_ITEM(tmp_assign_source_87, 2, tmp_tuple_element_40);
        }
        goto tuple_build_noexception_12;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_12:;
        Py_DECREF(tmp_assign_source_87);
        goto try_except_handler_31;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_12:;
        assert(tmp_class_creation_11__bases_orig == NULL);
        tmp_class_creation_11__bases_orig = tmp_assign_source_87;
    }
    {
        PyObject *tmp_assign_source_88;
        PyObject *tmp_dircall_arg1_11;
        CHECK_OBJECT(tmp_class_creation_11__bases_orig);
        tmp_dircall_arg1_11 = tmp_class_creation_11__bases_orig;
        Py_INCREF(tmp_dircall_arg1_11);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_11};
            tmp_assign_source_88 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_88 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 114;

            goto try_except_handler_31;
        }
        assert(tmp_class_creation_11__bases == NULL);
        tmp_class_creation_11__bases = tmp_assign_source_88;
    }
    {
        PyObject *tmp_assign_source_89;
        tmp_assign_source_89 = PyDict_New();
        assert(tmp_class_creation_11__class_decl_dict == NULL);
        tmp_class_creation_11__class_decl_dict = tmp_assign_source_89;
    }
    {
        PyObject *tmp_assign_source_90;
        PyObject *tmp_metaclass_value_11;
        bool tmp_condition_result_61;
        PyObject *tmp_key_value_31;
        PyObject *tmp_dict_arg_value_31;
        PyObject *tmp_dict_arg_value_32;
        PyObject *tmp_key_value_32;
        nuitka_bool tmp_condition_result_62;
        int tmp_truth_name_11;
        PyObject *tmp_type_arg_21;
        PyObject *tmp_expression_value_57;
        PyObject *tmp_subscript_value_11;
        PyObject *tmp_bases_value_11;
        tmp_key_value_31 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
        tmp_dict_arg_value_31 = tmp_class_creation_11__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_31, tmp_key_value_31);
        assert(!(tmp_res == -1));
        tmp_condition_result_61 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_61 != false) {
            goto condexpr_true_21;
        } else {
            goto condexpr_false_21;
        }
        condexpr_true_21:;
        CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
        tmp_dict_arg_value_32 = tmp_class_creation_11__class_decl_dict;
        tmp_key_value_32 = mod_consts[43];
        tmp_metaclass_value_11 = DICT_GET_ITEM0(tmp_dict_arg_value_32, tmp_key_value_32);
        if (tmp_metaclass_value_11 == NULL) {
            tmp_metaclass_value_11 = Py_None;
        }
        assert(!(tmp_metaclass_value_11 == NULL));
        Py_INCREF(tmp_metaclass_value_11);
        goto condexpr_end_21;
        condexpr_false_21:;
        CHECK_OBJECT(tmp_class_creation_11__bases);
        tmp_truth_name_11 = CHECK_IF_TRUE(tmp_class_creation_11__bases);
        if (tmp_truth_name_11 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 114;

            goto try_except_handler_31;
        }
        tmp_condition_result_62 = tmp_truth_name_11 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_62 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_22;
        } else {
            goto condexpr_false_22;
        }
        condexpr_true_22:;
        CHECK_OBJECT(tmp_class_creation_11__bases);
        tmp_expression_value_57 = tmp_class_creation_11__bases;
        tmp_subscript_value_11 = mod_consts[36];
        tmp_type_arg_21 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_57, tmp_subscript_value_11, 0);
        if (tmp_type_arg_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 114;

            goto try_except_handler_31;
        }
        tmp_metaclass_value_11 = BUILTIN_TYPE1(tmp_type_arg_21);
        Py_DECREF(tmp_type_arg_21);
        if (tmp_metaclass_value_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 114;

            goto try_except_handler_31;
        }
        goto condexpr_end_22;
        condexpr_false_22:;
        tmp_metaclass_value_11 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_11);
        condexpr_end_22:;
        condexpr_end_21:;
        CHECK_OBJECT(tmp_class_creation_11__bases);
        tmp_bases_value_11 = tmp_class_creation_11__bases;
        tmp_assign_source_90 = SELECT_METACLASS(tmp_metaclass_value_11, tmp_bases_value_11);
        Py_DECREF(tmp_metaclass_value_11);
        if (tmp_assign_source_90 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 114;

            goto try_except_handler_31;
        }
        assert(tmp_class_creation_11__metaclass == NULL);
        tmp_class_creation_11__metaclass = tmp_assign_source_90;
    }
    {
        bool tmp_condition_result_63;
        PyObject *tmp_key_value_33;
        PyObject *tmp_dict_arg_value_33;
        tmp_key_value_33 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
        tmp_dict_arg_value_33 = tmp_class_creation_11__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_33, tmp_key_value_33);
        assert(!(tmp_res == -1));
        tmp_condition_result_63 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_63 != false) {
            goto branch_yes_41;
        } else {
            goto branch_no_41;
        }
    }
    branch_yes_41:;
    CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_11__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 114;

        goto try_except_handler_31;
    }
    branch_no_41:;
    {
        nuitka_bool tmp_condition_result_64;
        PyObject *tmp_expression_value_58;
        CHECK_OBJECT(tmp_class_creation_11__metaclass);
        tmp_expression_value_58 = tmp_class_creation_11__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_58, mod_consts[44]);
        tmp_condition_result_64 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_64 == NUITKA_BOOL_TRUE) {
            goto branch_yes_42;
        } else {
            goto branch_no_42;
        }
    }
    branch_yes_42:;
    {
        PyObject *tmp_assign_source_91;
        PyObject *tmp_called_value_21;
        PyObject *tmp_expression_value_59;
        PyObject *tmp_args_value_21;
        PyObject *tmp_tuple_element_41;
        PyObject *tmp_kwargs_value_21;
        CHECK_OBJECT(tmp_class_creation_11__metaclass);
        tmp_expression_value_59 = tmp_class_creation_11__metaclass;
        tmp_called_value_21 = LOOKUP_ATTRIBUTE(tmp_expression_value_59, mod_consts[44]);
        if (tmp_called_value_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 114;

            goto try_except_handler_31;
        }
        tmp_tuple_element_41 = mod_consts[83];
        tmp_args_value_21 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_21, 0, tmp_tuple_element_41);
        CHECK_OBJECT(tmp_class_creation_11__bases);
        tmp_tuple_element_41 = tmp_class_creation_11__bases;
        PyTuple_SET_ITEM0(tmp_args_value_21, 1, tmp_tuple_element_41);
        CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
        tmp_kwargs_value_21 = tmp_class_creation_11__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 114;
        tmp_assign_source_91 = CALL_FUNCTION(tmp_called_value_21, tmp_args_value_21, tmp_kwargs_value_21);
        Py_DECREF(tmp_called_value_21);
        Py_DECREF(tmp_args_value_21);
        if (tmp_assign_source_91 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 114;

            goto try_except_handler_31;
        }
        assert(tmp_class_creation_11__prepared == NULL);
        tmp_class_creation_11__prepared = tmp_assign_source_91;
    }
    {
        bool tmp_condition_result_65;
        PyObject *tmp_operand_value_11;
        PyObject *tmp_expression_value_60;
        CHECK_OBJECT(tmp_class_creation_11__prepared);
        tmp_expression_value_60 = tmp_class_creation_11__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_60, mod_consts[46]);
        tmp_operand_value_11 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_11);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 114;

            goto try_except_handler_31;
        }
        tmp_condition_result_65 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_65 != false) {
            goto branch_yes_43;
        } else {
            goto branch_no_43;
        }
    }
    branch_yes_43:;
    {
        PyObject *tmp_raise_type_11;
        PyObject *tmp_raise_value_11;
        PyObject *tmp_left_value_11;
        PyObject *tmp_right_value_11;
        PyObject *tmp_tuple_element_42;
        PyObject *tmp_getattr_target_11;
        PyObject *tmp_getattr_attr_11;
        PyObject *tmp_getattr_default_11;
        tmp_raise_type_11 = PyExc_TypeError;
        tmp_left_value_11 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_11__metaclass);
        tmp_getattr_target_11 = tmp_class_creation_11__metaclass;
        tmp_getattr_attr_11 = mod_consts[48];
        tmp_getattr_default_11 = mod_consts[49];
        tmp_tuple_element_42 = BUILTIN_GETATTR(tmp_getattr_target_11, tmp_getattr_attr_11, tmp_getattr_default_11);
        if (tmp_tuple_element_42 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 114;

            goto try_except_handler_31;
        }
        tmp_right_value_11 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_61;
            PyObject *tmp_type_arg_22;
            PyTuple_SET_ITEM(tmp_right_value_11, 0, tmp_tuple_element_42);
            CHECK_OBJECT(tmp_class_creation_11__prepared);
            tmp_type_arg_22 = tmp_class_creation_11__prepared;
            tmp_expression_value_61 = BUILTIN_TYPE1(tmp_type_arg_22);
            assert(!(tmp_expression_value_61 == NULL));
            tmp_tuple_element_42 = LOOKUP_ATTRIBUTE(tmp_expression_value_61, mod_consts[48]);
            Py_DECREF(tmp_expression_value_61);
            if (tmp_tuple_element_42 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 114;

                goto tuple_build_exception_13;
            }
            PyTuple_SET_ITEM(tmp_right_value_11, 1, tmp_tuple_element_42);
        }
        goto tuple_build_noexception_13;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_13:;
        Py_DECREF(tmp_right_value_11);
        goto try_except_handler_31;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_13:;
        tmp_raise_value_11 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_11, tmp_right_value_11);
        Py_DECREF(tmp_right_value_11);
        if (tmp_raise_value_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 114;

            goto try_except_handler_31;
        }
        exception_type = tmp_raise_type_11;
        Py_INCREF(tmp_raise_type_11);
        exception_value = tmp_raise_value_11;
        exception_lineno = 114;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_31;
    }
    branch_no_43:;
    goto branch_end_42;
    branch_no_42:;
    {
        PyObject *tmp_assign_source_92;
        tmp_assign_source_92 = PyDict_New();
        assert(tmp_class_creation_11__prepared == NULL);
        tmp_class_creation_11__prepared = tmp_assign_source_92;
    }
    branch_end_42:;
    {
        PyObject *tmp_assign_source_93;
        {
            PyObject *tmp_set_locals_11;
            CHECK_OBJECT(tmp_class_creation_11__prepared);
            tmp_set_locals_11 = tmp_class_creation_11__prepared;
            locals_botocore$exceptions$$$class__11_ReadTimeoutError_114 = tmp_set_locals_11;
            Py_INCREF(tmp_set_locals_11);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__11_ReadTimeoutError_114, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 114;

            goto try_except_handler_33;
        }
        tmp_dictset_value = mod_consts[83];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__11_ReadTimeoutError_114, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 114;

            goto try_except_handler_33;
        }
        if (isFrameUnusable(cache_frame_7764ed8434bf45842d38a7d7762eaea2_12)) {
            Py_XDECREF(cache_frame_7764ed8434bf45842d38a7d7762eaea2_12);

#if _DEBUG_REFCOUNTS
            if (cache_frame_7764ed8434bf45842d38a7d7762eaea2_12 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_7764ed8434bf45842d38a7d7762eaea2_12 = MAKE_FUNCTION_FRAME(codeobj_7764ed8434bf45842d38a7d7762eaea2, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_7764ed8434bf45842d38a7d7762eaea2_12->m_type_description == NULL);
        frame_7764ed8434bf45842d38a7d7762eaea2_12 = cache_frame_7764ed8434bf45842d38a7d7762eaea2_12;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_7764ed8434bf45842d38a7d7762eaea2_12);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_7764ed8434bf45842d38a7d7762eaea2_12) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[84];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__11_ReadTimeoutError_114, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 115;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_7764ed8434bf45842d38a7d7762eaea2_12);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_11;

        frame_exception_exit_12:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_7764ed8434bf45842d38a7d7762eaea2_12);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_7764ed8434bf45842d38a7d7762eaea2_12, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_7764ed8434bf45842d38a7d7762eaea2_12->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_7764ed8434bf45842d38a7d7762eaea2_12, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_7764ed8434bf45842d38a7d7762eaea2_12,
            type_description_2,
            outline_10_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_7764ed8434bf45842d38a7d7762eaea2_12 == cache_frame_7764ed8434bf45842d38a7d7762eaea2_12) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_7764ed8434bf45842d38a7d7762eaea2_12);
            cache_frame_7764ed8434bf45842d38a7d7762eaea2_12 = NULL;
        }

        assertFrameObject(frame_7764ed8434bf45842d38a7d7762eaea2_12);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_11;

        frame_no_exception_11:;
        goto skip_nested_handling_11;
        nested_frame_exit_11:;

        goto try_except_handler_33;
        skip_nested_handling_11:;
        {
            nuitka_bool tmp_condition_result_66;
            PyObject *tmp_cmp_expr_left_11;
            PyObject *tmp_cmp_expr_right_11;
            CHECK_OBJECT(tmp_class_creation_11__bases);
            tmp_cmp_expr_left_11 = tmp_class_creation_11__bases;
            CHECK_OBJECT(tmp_class_creation_11__bases_orig);
            tmp_cmp_expr_right_11 = tmp_class_creation_11__bases_orig;
            tmp_condition_result_66 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_11, tmp_cmp_expr_right_11);
            if (tmp_condition_result_66 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 114;

                goto try_except_handler_33;
            }
            if (tmp_condition_result_66 == NUITKA_BOOL_TRUE) {
                goto branch_yes_44;
            } else {
                goto branch_no_44;
            }
            assert(tmp_condition_result_66 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_44:;
        CHECK_OBJECT(tmp_class_creation_11__bases_orig);
        tmp_dictset_value = tmp_class_creation_11__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__11_ReadTimeoutError_114, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 114;

            goto try_except_handler_33;
        }
        branch_no_44:;
        {
            PyObject *tmp_assign_source_94;
            PyObject *tmp_called_value_22;
            PyObject *tmp_args_value_22;
            PyObject *tmp_tuple_element_43;
            PyObject *tmp_kwargs_value_22;
            CHECK_OBJECT(tmp_class_creation_11__metaclass);
            tmp_called_value_22 = tmp_class_creation_11__metaclass;
            tmp_tuple_element_43 = mod_consts[83];
            tmp_args_value_22 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_22, 0, tmp_tuple_element_43);
            CHECK_OBJECT(tmp_class_creation_11__bases);
            tmp_tuple_element_43 = tmp_class_creation_11__bases;
            PyTuple_SET_ITEM0(tmp_args_value_22, 1, tmp_tuple_element_43);
            tmp_tuple_element_43 = locals_botocore$exceptions$$$class__11_ReadTimeoutError_114;
            PyTuple_SET_ITEM0(tmp_args_value_22, 2, tmp_tuple_element_43);
            CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
            tmp_kwargs_value_22 = tmp_class_creation_11__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 114;
            tmp_assign_source_94 = CALL_FUNCTION(tmp_called_value_22, tmp_args_value_22, tmp_kwargs_value_22);
            Py_DECREF(tmp_args_value_22);
            if (tmp_assign_source_94 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 114;

                goto try_except_handler_33;
            }
            assert(outline_10_var___class__ == NULL);
            outline_10_var___class__ = tmp_assign_source_94;
        }
        CHECK_OBJECT(outline_10_var___class__);
        tmp_assign_source_93 = outline_10_var___class__;
        Py_INCREF(tmp_assign_source_93);
        goto try_return_handler_33;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_33:;
        Py_DECREF(locals_botocore$exceptions$$$class__11_ReadTimeoutError_114);
        locals_botocore$exceptions$$$class__11_ReadTimeoutError_114 = NULL;
        goto try_return_handler_32;
        // Exception handler code:
        try_except_handler_33:;
        exception_keeper_type_31 = exception_type;
        exception_keeper_value_31 = exception_value;
        exception_keeper_tb_31 = exception_tb;
        exception_keeper_lineno_31 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__11_ReadTimeoutError_114);
        locals_botocore$exceptions$$$class__11_ReadTimeoutError_114 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_31;
        exception_value = exception_keeper_value_31;
        exception_tb = exception_keeper_tb_31;
        exception_lineno = exception_keeper_lineno_31;

        goto try_except_handler_32;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_32:;
        CHECK_OBJECT(outline_10_var___class__);
        Py_DECREF(outline_10_var___class__);
        outline_10_var___class__ = NULL;
        goto outline_result_11;
        // Exception handler code:
        try_except_handler_32:;
        exception_keeper_type_32 = exception_type;
        exception_keeper_value_32 = exception_value;
        exception_keeper_tb_32 = exception_tb;
        exception_keeper_lineno_32 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_32;
        exception_value = exception_keeper_value_32;
        exception_tb = exception_keeper_tb_32;
        exception_lineno = exception_keeper_lineno_32;

        goto outline_exception_11;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_11:;
        exception_lineno = 114;
        goto try_except_handler_31;
        outline_result_11:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[83], tmp_assign_source_93);
    }
    goto try_end_11;
    // Exception handler code:
    try_except_handler_31:;
    exception_keeper_type_33 = exception_type;
    exception_keeper_value_33 = exception_value;
    exception_keeper_tb_33 = exception_tb;
    exception_keeper_lineno_33 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_11__bases_orig);
    tmp_class_creation_11__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_11__bases);
    tmp_class_creation_11__bases = NULL;
    Py_XDECREF(tmp_class_creation_11__class_decl_dict);
    tmp_class_creation_11__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_11__metaclass);
    tmp_class_creation_11__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_11__prepared);
    tmp_class_creation_11__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_33;
    exception_value = exception_keeper_value_33;
    exception_tb = exception_keeper_tb_33;
    exception_lineno = exception_keeper_lineno_33;

    goto frame_exception_exit_1;
    // End of try:
    try_end_11:;
    CHECK_OBJECT(tmp_class_creation_11__bases_orig);
    Py_DECREF(tmp_class_creation_11__bases_orig);
    tmp_class_creation_11__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_11__bases);
    Py_DECREF(tmp_class_creation_11__bases);
    tmp_class_creation_11__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
    Py_DECREF(tmp_class_creation_11__class_decl_dict);
    tmp_class_creation_11__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_11__metaclass);
    Py_DECREF(tmp_class_creation_11__metaclass);
    tmp_class_creation_11__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_11__prepared);
    Py_DECREF(tmp_class_creation_11__prepared);
    tmp_class_creation_11__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_95;
        PyObject *tmp_tuple_element_44;
        tmp_tuple_element_44 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[71]);

        if (unlikely(tmp_tuple_element_44 == NULL)) {
            tmp_tuple_element_44 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
        }

        if (tmp_tuple_element_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 118;

            goto try_except_handler_34;
        }
        tmp_assign_source_95 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_62;
            PyObject *tmp_expression_value_63;
            PyTuple_SET_ITEM0(tmp_assign_source_95, 0, tmp_tuple_element_44);
            tmp_expression_value_63 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[37]);

            if (unlikely(tmp_expression_value_63 == NULL)) {
                tmp_expression_value_63 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[37]);
            }

            if (tmp_expression_value_63 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 118;

                goto tuple_build_exception_14;
            }
            tmp_expression_value_62 = LOOKUP_ATTRIBUTE(tmp_expression_value_63, mod_consts[77]);
            if (tmp_expression_value_62 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 118;

                goto tuple_build_exception_14;
            }
            tmp_tuple_element_44 = LOOKUP_ATTRIBUTE(tmp_expression_value_62, mod_consts[85]);
            Py_DECREF(tmp_expression_value_62);
            if (tmp_tuple_element_44 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 118;

                goto tuple_build_exception_14;
            }
            PyTuple_SET_ITEM(tmp_assign_source_95, 1, tmp_tuple_element_44);
        }
        goto tuple_build_noexception_14;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_14:;
        Py_DECREF(tmp_assign_source_95);
        goto try_except_handler_34;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_14:;
        assert(tmp_class_creation_12__bases_orig == NULL);
        tmp_class_creation_12__bases_orig = tmp_assign_source_95;
    }
    {
        PyObject *tmp_assign_source_96;
        PyObject *tmp_dircall_arg1_12;
        CHECK_OBJECT(tmp_class_creation_12__bases_orig);
        tmp_dircall_arg1_12 = tmp_class_creation_12__bases_orig;
        Py_INCREF(tmp_dircall_arg1_12);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_12};
            tmp_assign_source_96 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_96 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 118;

            goto try_except_handler_34;
        }
        assert(tmp_class_creation_12__bases == NULL);
        tmp_class_creation_12__bases = tmp_assign_source_96;
    }
    {
        PyObject *tmp_assign_source_97;
        tmp_assign_source_97 = PyDict_New();
        assert(tmp_class_creation_12__class_decl_dict == NULL);
        tmp_class_creation_12__class_decl_dict = tmp_assign_source_97;
    }
    {
        PyObject *tmp_assign_source_98;
        PyObject *tmp_metaclass_value_12;
        bool tmp_condition_result_67;
        PyObject *tmp_key_value_34;
        PyObject *tmp_dict_arg_value_34;
        PyObject *tmp_dict_arg_value_35;
        PyObject *tmp_key_value_35;
        nuitka_bool tmp_condition_result_68;
        int tmp_truth_name_12;
        PyObject *tmp_type_arg_23;
        PyObject *tmp_expression_value_64;
        PyObject *tmp_subscript_value_12;
        PyObject *tmp_bases_value_12;
        tmp_key_value_34 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
        tmp_dict_arg_value_34 = tmp_class_creation_12__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_34, tmp_key_value_34);
        assert(!(tmp_res == -1));
        tmp_condition_result_67 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_67 != false) {
            goto condexpr_true_23;
        } else {
            goto condexpr_false_23;
        }
        condexpr_true_23:;
        CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
        tmp_dict_arg_value_35 = tmp_class_creation_12__class_decl_dict;
        tmp_key_value_35 = mod_consts[43];
        tmp_metaclass_value_12 = DICT_GET_ITEM0(tmp_dict_arg_value_35, tmp_key_value_35);
        if (tmp_metaclass_value_12 == NULL) {
            tmp_metaclass_value_12 = Py_None;
        }
        assert(!(tmp_metaclass_value_12 == NULL));
        Py_INCREF(tmp_metaclass_value_12);
        goto condexpr_end_23;
        condexpr_false_23:;
        CHECK_OBJECT(tmp_class_creation_12__bases);
        tmp_truth_name_12 = CHECK_IF_TRUE(tmp_class_creation_12__bases);
        if (tmp_truth_name_12 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 118;

            goto try_except_handler_34;
        }
        tmp_condition_result_68 = tmp_truth_name_12 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_68 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_24;
        } else {
            goto condexpr_false_24;
        }
        condexpr_true_24:;
        CHECK_OBJECT(tmp_class_creation_12__bases);
        tmp_expression_value_64 = tmp_class_creation_12__bases;
        tmp_subscript_value_12 = mod_consts[36];
        tmp_type_arg_23 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_64, tmp_subscript_value_12, 0);
        if (tmp_type_arg_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 118;

            goto try_except_handler_34;
        }
        tmp_metaclass_value_12 = BUILTIN_TYPE1(tmp_type_arg_23);
        Py_DECREF(tmp_type_arg_23);
        if (tmp_metaclass_value_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 118;

            goto try_except_handler_34;
        }
        goto condexpr_end_24;
        condexpr_false_24:;
        tmp_metaclass_value_12 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_12);
        condexpr_end_24:;
        condexpr_end_23:;
        CHECK_OBJECT(tmp_class_creation_12__bases);
        tmp_bases_value_12 = tmp_class_creation_12__bases;
        tmp_assign_source_98 = SELECT_METACLASS(tmp_metaclass_value_12, tmp_bases_value_12);
        Py_DECREF(tmp_metaclass_value_12);
        if (tmp_assign_source_98 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 118;

            goto try_except_handler_34;
        }
        assert(tmp_class_creation_12__metaclass == NULL);
        tmp_class_creation_12__metaclass = tmp_assign_source_98;
    }
    {
        bool tmp_condition_result_69;
        PyObject *tmp_key_value_36;
        PyObject *tmp_dict_arg_value_36;
        tmp_key_value_36 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
        tmp_dict_arg_value_36 = tmp_class_creation_12__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_36, tmp_key_value_36);
        assert(!(tmp_res == -1));
        tmp_condition_result_69 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_69 != false) {
            goto branch_yes_45;
        } else {
            goto branch_no_45;
        }
    }
    branch_yes_45:;
    CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_12__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 118;

        goto try_except_handler_34;
    }
    branch_no_45:;
    {
        nuitka_bool tmp_condition_result_70;
        PyObject *tmp_expression_value_65;
        CHECK_OBJECT(tmp_class_creation_12__metaclass);
        tmp_expression_value_65 = tmp_class_creation_12__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_65, mod_consts[44]);
        tmp_condition_result_70 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_70 == NUITKA_BOOL_TRUE) {
            goto branch_yes_46;
        } else {
            goto branch_no_46;
        }
    }
    branch_yes_46:;
    {
        PyObject *tmp_assign_source_99;
        PyObject *tmp_called_value_23;
        PyObject *tmp_expression_value_66;
        PyObject *tmp_args_value_23;
        PyObject *tmp_tuple_element_45;
        PyObject *tmp_kwargs_value_23;
        CHECK_OBJECT(tmp_class_creation_12__metaclass);
        tmp_expression_value_66 = tmp_class_creation_12__metaclass;
        tmp_called_value_23 = LOOKUP_ATTRIBUTE(tmp_expression_value_66, mod_consts[44]);
        if (tmp_called_value_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 118;

            goto try_except_handler_34;
        }
        tmp_tuple_element_45 = mod_consts[86];
        tmp_args_value_23 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_23, 0, tmp_tuple_element_45);
        CHECK_OBJECT(tmp_class_creation_12__bases);
        tmp_tuple_element_45 = tmp_class_creation_12__bases;
        PyTuple_SET_ITEM0(tmp_args_value_23, 1, tmp_tuple_element_45);
        CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
        tmp_kwargs_value_23 = tmp_class_creation_12__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 118;
        tmp_assign_source_99 = CALL_FUNCTION(tmp_called_value_23, tmp_args_value_23, tmp_kwargs_value_23);
        Py_DECREF(tmp_called_value_23);
        Py_DECREF(tmp_args_value_23);
        if (tmp_assign_source_99 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 118;

            goto try_except_handler_34;
        }
        assert(tmp_class_creation_12__prepared == NULL);
        tmp_class_creation_12__prepared = tmp_assign_source_99;
    }
    {
        bool tmp_condition_result_71;
        PyObject *tmp_operand_value_12;
        PyObject *tmp_expression_value_67;
        CHECK_OBJECT(tmp_class_creation_12__prepared);
        tmp_expression_value_67 = tmp_class_creation_12__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_67, mod_consts[46]);
        tmp_operand_value_12 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_12);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 118;

            goto try_except_handler_34;
        }
        tmp_condition_result_71 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_71 != false) {
            goto branch_yes_47;
        } else {
            goto branch_no_47;
        }
    }
    branch_yes_47:;
    {
        PyObject *tmp_raise_type_12;
        PyObject *tmp_raise_value_12;
        PyObject *tmp_left_value_12;
        PyObject *tmp_right_value_12;
        PyObject *tmp_tuple_element_46;
        PyObject *tmp_getattr_target_12;
        PyObject *tmp_getattr_attr_12;
        PyObject *tmp_getattr_default_12;
        tmp_raise_type_12 = PyExc_TypeError;
        tmp_left_value_12 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_12__metaclass);
        tmp_getattr_target_12 = tmp_class_creation_12__metaclass;
        tmp_getattr_attr_12 = mod_consts[48];
        tmp_getattr_default_12 = mod_consts[49];
        tmp_tuple_element_46 = BUILTIN_GETATTR(tmp_getattr_target_12, tmp_getattr_attr_12, tmp_getattr_default_12);
        if (tmp_tuple_element_46 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 118;

            goto try_except_handler_34;
        }
        tmp_right_value_12 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_68;
            PyObject *tmp_type_arg_24;
            PyTuple_SET_ITEM(tmp_right_value_12, 0, tmp_tuple_element_46);
            CHECK_OBJECT(tmp_class_creation_12__prepared);
            tmp_type_arg_24 = tmp_class_creation_12__prepared;
            tmp_expression_value_68 = BUILTIN_TYPE1(tmp_type_arg_24);
            assert(!(tmp_expression_value_68 == NULL));
            tmp_tuple_element_46 = LOOKUP_ATTRIBUTE(tmp_expression_value_68, mod_consts[48]);
            Py_DECREF(tmp_expression_value_68);
            if (tmp_tuple_element_46 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 118;

                goto tuple_build_exception_15;
            }
            PyTuple_SET_ITEM(tmp_right_value_12, 1, tmp_tuple_element_46);
        }
        goto tuple_build_noexception_15;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_15:;
        Py_DECREF(tmp_right_value_12);
        goto try_except_handler_34;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_15:;
        tmp_raise_value_12 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_12, tmp_right_value_12);
        Py_DECREF(tmp_right_value_12);
        if (tmp_raise_value_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 118;

            goto try_except_handler_34;
        }
        exception_type = tmp_raise_type_12;
        Py_INCREF(tmp_raise_type_12);
        exception_value = tmp_raise_value_12;
        exception_lineno = 118;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_34;
    }
    branch_no_47:;
    goto branch_end_46;
    branch_no_46:;
    {
        PyObject *tmp_assign_source_100;
        tmp_assign_source_100 = PyDict_New();
        assert(tmp_class_creation_12__prepared == NULL);
        tmp_class_creation_12__prepared = tmp_assign_source_100;
    }
    branch_end_46:;
    {
        PyObject *tmp_assign_source_101;
        {
            PyObject *tmp_set_locals_12;
            CHECK_OBJECT(tmp_class_creation_12__prepared);
            tmp_set_locals_12 = tmp_class_creation_12__prepared;
            locals_botocore$exceptions$$$class__12_ConnectTimeoutError_118 = tmp_set_locals_12;
            Py_INCREF(tmp_set_locals_12);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__12_ConnectTimeoutError_118, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 118;

            goto try_except_handler_36;
        }
        tmp_dictset_value = mod_consts[86];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__12_ConnectTimeoutError_118, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 118;

            goto try_except_handler_36;
        }
        if (isFrameUnusable(cache_frame_3814404a074f76c9e6bc45833e5f774f_13)) {
            Py_XDECREF(cache_frame_3814404a074f76c9e6bc45833e5f774f_13);

#if _DEBUG_REFCOUNTS
            if (cache_frame_3814404a074f76c9e6bc45833e5f774f_13 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_3814404a074f76c9e6bc45833e5f774f_13 = MAKE_FUNCTION_FRAME(codeobj_3814404a074f76c9e6bc45833e5f774f, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_3814404a074f76c9e6bc45833e5f774f_13->m_type_description == NULL);
        frame_3814404a074f76c9e6bc45833e5f774f_13 = cache_frame_3814404a074f76c9e6bc45833e5f774f_13;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_3814404a074f76c9e6bc45833e5f774f_13);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_3814404a074f76c9e6bc45833e5f774f_13) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[87];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__12_ConnectTimeoutError_118, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 119;
            type_description_2 = "o";
            goto frame_exception_exit_13;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_3814404a074f76c9e6bc45833e5f774f_13);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_12;

        frame_exception_exit_13:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_3814404a074f76c9e6bc45833e5f774f_13);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_3814404a074f76c9e6bc45833e5f774f_13, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_3814404a074f76c9e6bc45833e5f774f_13->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_3814404a074f76c9e6bc45833e5f774f_13, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_3814404a074f76c9e6bc45833e5f774f_13,
            type_description_2,
            outline_11_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_3814404a074f76c9e6bc45833e5f774f_13 == cache_frame_3814404a074f76c9e6bc45833e5f774f_13) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_3814404a074f76c9e6bc45833e5f774f_13);
            cache_frame_3814404a074f76c9e6bc45833e5f774f_13 = NULL;
        }

        assertFrameObject(frame_3814404a074f76c9e6bc45833e5f774f_13);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_12;

        frame_no_exception_12:;
        goto skip_nested_handling_12;
        nested_frame_exit_12:;

        goto try_except_handler_36;
        skip_nested_handling_12:;
        {
            nuitka_bool tmp_condition_result_72;
            PyObject *tmp_cmp_expr_left_12;
            PyObject *tmp_cmp_expr_right_12;
            CHECK_OBJECT(tmp_class_creation_12__bases);
            tmp_cmp_expr_left_12 = tmp_class_creation_12__bases;
            CHECK_OBJECT(tmp_class_creation_12__bases_orig);
            tmp_cmp_expr_right_12 = tmp_class_creation_12__bases_orig;
            tmp_condition_result_72 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_12, tmp_cmp_expr_right_12);
            if (tmp_condition_result_72 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 118;

                goto try_except_handler_36;
            }
            if (tmp_condition_result_72 == NUITKA_BOOL_TRUE) {
                goto branch_yes_48;
            } else {
                goto branch_no_48;
            }
            assert(tmp_condition_result_72 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_48:;
        CHECK_OBJECT(tmp_class_creation_12__bases_orig);
        tmp_dictset_value = tmp_class_creation_12__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__12_ConnectTimeoutError_118, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 118;

            goto try_except_handler_36;
        }
        branch_no_48:;
        {
            PyObject *tmp_assign_source_102;
            PyObject *tmp_called_value_24;
            PyObject *tmp_args_value_24;
            PyObject *tmp_tuple_element_47;
            PyObject *tmp_kwargs_value_24;
            CHECK_OBJECT(tmp_class_creation_12__metaclass);
            tmp_called_value_24 = tmp_class_creation_12__metaclass;
            tmp_tuple_element_47 = mod_consts[86];
            tmp_args_value_24 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_24, 0, tmp_tuple_element_47);
            CHECK_OBJECT(tmp_class_creation_12__bases);
            tmp_tuple_element_47 = tmp_class_creation_12__bases;
            PyTuple_SET_ITEM0(tmp_args_value_24, 1, tmp_tuple_element_47);
            tmp_tuple_element_47 = locals_botocore$exceptions$$$class__12_ConnectTimeoutError_118;
            PyTuple_SET_ITEM0(tmp_args_value_24, 2, tmp_tuple_element_47);
            CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
            tmp_kwargs_value_24 = tmp_class_creation_12__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 118;
            tmp_assign_source_102 = CALL_FUNCTION(tmp_called_value_24, tmp_args_value_24, tmp_kwargs_value_24);
            Py_DECREF(tmp_args_value_24);
            if (tmp_assign_source_102 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 118;

                goto try_except_handler_36;
            }
            assert(outline_11_var___class__ == NULL);
            outline_11_var___class__ = tmp_assign_source_102;
        }
        CHECK_OBJECT(outline_11_var___class__);
        tmp_assign_source_101 = outline_11_var___class__;
        Py_INCREF(tmp_assign_source_101);
        goto try_return_handler_36;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_36:;
        Py_DECREF(locals_botocore$exceptions$$$class__12_ConnectTimeoutError_118);
        locals_botocore$exceptions$$$class__12_ConnectTimeoutError_118 = NULL;
        goto try_return_handler_35;
        // Exception handler code:
        try_except_handler_36:;
        exception_keeper_type_34 = exception_type;
        exception_keeper_value_34 = exception_value;
        exception_keeper_tb_34 = exception_tb;
        exception_keeper_lineno_34 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__12_ConnectTimeoutError_118);
        locals_botocore$exceptions$$$class__12_ConnectTimeoutError_118 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_34;
        exception_value = exception_keeper_value_34;
        exception_tb = exception_keeper_tb_34;
        exception_lineno = exception_keeper_lineno_34;

        goto try_except_handler_35;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_35:;
        CHECK_OBJECT(outline_11_var___class__);
        Py_DECREF(outline_11_var___class__);
        outline_11_var___class__ = NULL;
        goto outline_result_12;
        // Exception handler code:
        try_except_handler_35:;
        exception_keeper_type_35 = exception_type;
        exception_keeper_value_35 = exception_value;
        exception_keeper_tb_35 = exception_tb;
        exception_keeper_lineno_35 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_35;
        exception_value = exception_keeper_value_35;
        exception_tb = exception_keeper_tb_35;
        exception_lineno = exception_keeper_lineno_35;

        goto outline_exception_12;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_12:;
        exception_lineno = 118;
        goto try_except_handler_34;
        outline_result_12:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[86], tmp_assign_source_101);
    }
    goto try_end_12;
    // Exception handler code:
    try_except_handler_34:;
    exception_keeper_type_36 = exception_type;
    exception_keeper_value_36 = exception_value;
    exception_keeper_tb_36 = exception_tb;
    exception_keeper_lineno_36 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_12__bases_orig);
    tmp_class_creation_12__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_12__bases);
    tmp_class_creation_12__bases = NULL;
    Py_XDECREF(tmp_class_creation_12__class_decl_dict);
    tmp_class_creation_12__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_12__metaclass);
    tmp_class_creation_12__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_12__prepared);
    tmp_class_creation_12__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_36;
    exception_value = exception_keeper_value_36;
    exception_tb = exception_keeper_tb_36;
    exception_lineno = exception_keeper_lineno_36;

    goto frame_exception_exit_1;
    // End of try:
    try_end_12:;
    CHECK_OBJECT(tmp_class_creation_12__bases_orig);
    Py_DECREF(tmp_class_creation_12__bases_orig);
    tmp_class_creation_12__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_12__bases);
    Py_DECREF(tmp_class_creation_12__bases);
    tmp_class_creation_12__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
    Py_DECREF(tmp_class_creation_12__class_decl_dict);
    tmp_class_creation_12__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_12__metaclass);
    Py_DECREF(tmp_class_creation_12__metaclass);
    tmp_class_creation_12__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_12__prepared);
    Py_DECREF(tmp_class_creation_12__prepared);
    tmp_class_creation_12__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_103;
        PyObject *tmp_tuple_element_48;
        tmp_tuple_element_48 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[71]);

        if (unlikely(tmp_tuple_element_48 == NULL)) {
            tmp_tuple_element_48 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
        }

        if (tmp_tuple_element_48 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 122;

            goto try_except_handler_37;
        }
        tmp_assign_source_103 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_69;
            PyObject *tmp_expression_value_70;
            PyTuple_SET_ITEM0(tmp_assign_source_103, 0, tmp_tuple_element_48);
            tmp_expression_value_70 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[37]);

            if (unlikely(tmp_expression_value_70 == NULL)) {
                tmp_expression_value_70 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[37]);
            }

            if (tmp_expression_value_70 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 122;

                goto tuple_build_exception_16;
            }
            tmp_expression_value_69 = LOOKUP_ATTRIBUTE(tmp_expression_value_70, mod_consts[77]);
            if (tmp_expression_value_69 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 122;

                goto tuple_build_exception_16;
            }
            tmp_tuple_element_48 = LOOKUP_ATTRIBUTE(tmp_expression_value_69, mod_consts[88]);
            Py_DECREF(tmp_expression_value_69);
            if (tmp_tuple_element_48 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 122;

                goto tuple_build_exception_16;
            }
            PyTuple_SET_ITEM(tmp_assign_source_103, 1, tmp_tuple_element_48);
        }
        goto tuple_build_noexception_16;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_16:;
        Py_DECREF(tmp_assign_source_103);
        goto try_except_handler_37;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_16:;
        assert(tmp_class_creation_13__bases_orig == NULL);
        tmp_class_creation_13__bases_orig = tmp_assign_source_103;
    }
    {
        PyObject *tmp_assign_source_104;
        PyObject *tmp_dircall_arg1_13;
        CHECK_OBJECT(tmp_class_creation_13__bases_orig);
        tmp_dircall_arg1_13 = tmp_class_creation_13__bases_orig;
        Py_INCREF(tmp_dircall_arg1_13);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_13};
            tmp_assign_source_104 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_104 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 122;

            goto try_except_handler_37;
        }
        assert(tmp_class_creation_13__bases == NULL);
        tmp_class_creation_13__bases = tmp_assign_source_104;
    }
    {
        PyObject *tmp_assign_source_105;
        tmp_assign_source_105 = PyDict_New();
        assert(tmp_class_creation_13__class_decl_dict == NULL);
        tmp_class_creation_13__class_decl_dict = tmp_assign_source_105;
    }
    {
        PyObject *tmp_assign_source_106;
        PyObject *tmp_metaclass_value_13;
        bool tmp_condition_result_73;
        PyObject *tmp_key_value_37;
        PyObject *tmp_dict_arg_value_37;
        PyObject *tmp_dict_arg_value_38;
        PyObject *tmp_key_value_38;
        nuitka_bool tmp_condition_result_74;
        int tmp_truth_name_13;
        PyObject *tmp_type_arg_25;
        PyObject *tmp_expression_value_71;
        PyObject *tmp_subscript_value_13;
        PyObject *tmp_bases_value_13;
        tmp_key_value_37 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
        tmp_dict_arg_value_37 = tmp_class_creation_13__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_37, tmp_key_value_37);
        assert(!(tmp_res == -1));
        tmp_condition_result_73 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_73 != false) {
            goto condexpr_true_25;
        } else {
            goto condexpr_false_25;
        }
        condexpr_true_25:;
        CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
        tmp_dict_arg_value_38 = tmp_class_creation_13__class_decl_dict;
        tmp_key_value_38 = mod_consts[43];
        tmp_metaclass_value_13 = DICT_GET_ITEM0(tmp_dict_arg_value_38, tmp_key_value_38);
        if (tmp_metaclass_value_13 == NULL) {
            tmp_metaclass_value_13 = Py_None;
        }
        assert(!(tmp_metaclass_value_13 == NULL));
        Py_INCREF(tmp_metaclass_value_13);
        goto condexpr_end_25;
        condexpr_false_25:;
        CHECK_OBJECT(tmp_class_creation_13__bases);
        tmp_truth_name_13 = CHECK_IF_TRUE(tmp_class_creation_13__bases);
        if (tmp_truth_name_13 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 122;

            goto try_except_handler_37;
        }
        tmp_condition_result_74 = tmp_truth_name_13 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_74 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_26;
        } else {
            goto condexpr_false_26;
        }
        condexpr_true_26:;
        CHECK_OBJECT(tmp_class_creation_13__bases);
        tmp_expression_value_71 = tmp_class_creation_13__bases;
        tmp_subscript_value_13 = mod_consts[36];
        tmp_type_arg_25 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_71, tmp_subscript_value_13, 0);
        if (tmp_type_arg_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 122;

            goto try_except_handler_37;
        }
        tmp_metaclass_value_13 = BUILTIN_TYPE1(tmp_type_arg_25);
        Py_DECREF(tmp_type_arg_25);
        if (tmp_metaclass_value_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 122;

            goto try_except_handler_37;
        }
        goto condexpr_end_26;
        condexpr_false_26:;
        tmp_metaclass_value_13 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_13);
        condexpr_end_26:;
        condexpr_end_25:;
        CHECK_OBJECT(tmp_class_creation_13__bases);
        tmp_bases_value_13 = tmp_class_creation_13__bases;
        tmp_assign_source_106 = SELECT_METACLASS(tmp_metaclass_value_13, tmp_bases_value_13);
        Py_DECREF(tmp_metaclass_value_13);
        if (tmp_assign_source_106 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 122;

            goto try_except_handler_37;
        }
        assert(tmp_class_creation_13__metaclass == NULL);
        tmp_class_creation_13__metaclass = tmp_assign_source_106;
    }
    {
        bool tmp_condition_result_75;
        PyObject *tmp_key_value_39;
        PyObject *tmp_dict_arg_value_39;
        tmp_key_value_39 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
        tmp_dict_arg_value_39 = tmp_class_creation_13__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_39, tmp_key_value_39);
        assert(!(tmp_res == -1));
        tmp_condition_result_75 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_75 != false) {
            goto branch_yes_49;
        } else {
            goto branch_no_49;
        }
    }
    branch_yes_49:;
    CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_13__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 122;

        goto try_except_handler_37;
    }
    branch_no_49:;
    {
        nuitka_bool tmp_condition_result_76;
        PyObject *tmp_expression_value_72;
        CHECK_OBJECT(tmp_class_creation_13__metaclass);
        tmp_expression_value_72 = tmp_class_creation_13__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_72, mod_consts[44]);
        tmp_condition_result_76 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_76 == NUITKA_BOOL_TRUE) {
            goto branch_yes_50;
        } else {
            goto branch_no_50;
        }
    }
    branch_yes_50:;
    {
        PyObject *tmp_assign_source_107;
        PyObject *tmp_called_value_25;
        PyObject *tmp_expression_value_73;
        PyObject *tmp_args_value_25;
        PyObject *tmp_tuple_element_49;
        PyObject *tmp_kwargs_value_25;
        CHECK_OBJECT(tmp_class_creation_13__metaclass);
        tmp_expression_value_73 = tmp_class_creation_13__metaclass;
        tmp_called_value_25 = LOOKUP_ATTRIBUTE(tmp_expression_value_73, mod_consts[44]);
        if (tmp_called_value_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 122;

            goto try_except_handler_37;
        }
        tmp_tuple_element_49 = mod_consts[89];
        tmp_args_value_25 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_25, 0, tmp_tuple_element_49);
        CHECK_OBJECT(tmp_class_creation_13__bases);
        tmp_tuple_element_49 = tmp_class_creation_13__bases;
        PyTuple_SET_ITEM0(tmp_args_value_25, 1, tmp_tuple_element_49);
        CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
        tmp_kwargs_value_25 = tmp_class_creation_13__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 122;
        tmp_assign_source_107 = CALL_FUNCTION(tmp_called_value_25, tmp_args_value_25, tmp_kwargs_value_25);
        Py_DECREF(tmp_called_value_25);
        Py_DECREF(tmp_args_value_25);
        if (tmp_assign_source_107 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 122;

            goto try_except_handler_37;
        }
        assert(tmp_class_creation_13__prepared == NULL);
        tmp_class_creation_13__prepared = tmp_assign_source_107;
    }
    {
        bool tmp_condition_result_77;
        PyObject *tmp_operand_value_13;
        PyObject *tmp_expression_value_74;
        CHECK_OBJECT(tmp_class_creation_13__prepared);
        tmp_expression_value_74 = tmp_class_creation_13__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_74, mod_consts[46]);
        tmp_operand_value_13 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_13);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 122;

            goto try_except_handler_37;
        }
        tmp_condition_result_77 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_77 != false) {
            goto branch_yes_51;
        } else {
            goto branch_no_51;
        }
    }
    branch_yes_51:;
    {
        PyObject *tmp_raise_type_13;
        PyObject *tmp_raise_value_13;
        PyObject *tmp_left_value_13;
        PyObject *tmp_right_value_13;
        PyObject *tmp_tuple_element_50;
        PyObject *tmp_getattr_target_13;
        PyObject *tmp_getattr_attr_13;
        PyObject *tmp_getattr_default_13;
        tmp_raise_type_13 = PyExc_TypeError;
        tmp_left_value_13 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_13__metaclass);
        tmp_getattr_target_13 = tmp_class_creation_13__metaclass;
        tmp_getattr_attr_13 = mod_consts[48];
        tmp_getattr_default_13 = mod_consts[49];
        tmp_tuple_element_50 = BUILTIN_GETATTR(tmp_getattr_target_13, tmp_getattr_attr_13, tmp_getattr_default_13);
        if (tmp_tuple_element_50 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 122;

            goto try_except_handler_37;
        }
        tmp_right_value_13 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_75;
            PyObject *tmp_type_arg_26;
            PyTuple_SET_ITEM(tmp_right_value_13, 0, tmp_tuple_element_50);
            CHECK_OBJECT(tmp_class_creation_13__prepared);
            tmp_type_arg_26 = tmp_class_creation_13__prepared;
            tmp_expression_value_75 = BUILTIN_TYPE1(tmp_type_arg_26);
            assert(!(tmp_expression_value_75 == NULL));
            tmp_tuple_element_50 = LOOKUP_ATTRIBUTE(tmp_expression_value_75, mod_consts[48]);
            Py_DECREF(tmp_expression_value_75);
            if (tmp_tuple_element_50 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 122;

                goto tuple_build_exception_17;
            }
            PyTuple_SET_ITEM(tmp_right_value_13, 1, tmp_tuple_element_50);
        }
        goto tuple_build_noexception_17;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_17:;
        Py_DECREF(tmp_right_value_13);
        goto try_except_handler_37;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_17:;
        tmp_raise_value_13 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_13, tmp_right_value_13);
        Py_DECREF(tmp_right_value_13);
        if (tmp_raise_value_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 122;

            goto try_except_handler_37;
        }
        exception_type = tmp_raise_type_13;
        Py_INCREF(tmp_raise_type_13);
        exception_value = tmp_raise_value_13;
        exception_lineno = 122;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_37;
    }
    branch_no_51:;
    goto branch_end_50;
    branch_no_50:;
    {
        PyObject *tmp_assign_source_108;
        tmp_assign_source_108 = PyDict_New();
        assert(tmp_class_creation_13__prepared == NULL);
        tmp_class_creation_13__prepared = tmp_assign_source_108;
    }
    branch_end_50:;
    {
        PyObject *tmp_assign_source_109;
        {
            PyObject *tmp_set_locals_13;
            CHECK_OBJECT(tmp_class_creation_13__prepared);
            tmp_set_locals_13 = tmp_class_creation_13__prepared;
            locals_botocore$exceptions$$$class__13_ProxyConnectionError_122 = tmp_set_locals_13;
            Py_INCREF(tmp_set_locals_13);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__13_ProxyConnectionError_122, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 122;

            goto try_except_handler_39;
        }
        tmp_dictset_value = mod_consts[89];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__13_ProxyConnectionError_122, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 122;

            goto try_except_handler_39;
        }
        if (isFrameUnusable(cache_frame_2f59c047cc38f8b4f1d9dcb8d282b2fe_14)) {
            Py_XDECREF(cache_frame_2f59c047cc38f8b4f1d9dcb8d282b2fe_14);

#if _DEBUG_REFCOUNTS
            if (cache_frame_2f59c047cc38f8b4f1d9dcb8d282b2fe_14 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_2f59c047cc38f8b4f1d9dcb8d282b2fe_14 = MAKE_FUNCTION_FRAME(codeobj_2f59c047cc38f8b4f1d9dcb8d282b2fe, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_2f59c047cc38f8b4f1d9dcb8d282b2fe_14->m_type_description == NULL);
        frame_2f59c047cc38f8b4f1d9dcb8d282b2fe_14 = cache_frame_2f59c047cc38f8b4f1d9dcb8d282b2fe_14;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_2f59c047cc38f8b4f1d9dcb8d282b2fe_14);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_2f59c047cc38f8b4f1d9dcb8d282b2fe_14) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[90];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__13_ProxyConnectionError_122, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 123;
            type_description_2 = "o";
            goto frame_exception_exit_14;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_2f59c047cc38f8b4f1d9dcb8d282b2fe_14);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_13;

        frame_exception_exit_14:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_2f59c047cc38f8b4f1d9dcb8d282b2fe_14);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_2f59c047cc38f8b4f1d9dcb8d282b2fe_14, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_2f59c047cc38f8b4f1d9dcb8d282b2fe_14->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_2f59c047cc38f8b4f1d9dcb8d282b2fe_14, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_2f59c047cc38f8b4f1d9dcb8d282b2fe_14,
            type_description_2,
            outline_12_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_2f59c047cc38f8b4f1d9dcb8d282b2fe_14 == cache_frame_2f59c047cc38f8b4f1d9dcb8d282b2fe_14) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_2f59c047cc38f8b4f1d9dcb8d282b2fe_14);
            cache_frame_2f59c047cc38f8b4f1d9dcb8d282b2fe_14 = NULL;
        }

        assertFrameObject(frame_2f59c047cc38f8b4f1d9dcb8d282b2fe_14);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_13;

        frame_no_exception_13:;
        goto skip_nested_handling_13;
        nested_frame_exit_13:;

        goto try_except_handler_39;
        skip_nested_handling_13:;
        {
            nuitka_bool tmp_condition_result_78;
            PyObject *tmp_cmp_expr_left_13;
            PyObject *tmp_cmp_expr_right_13;
            CHECK_OBJECT(tmp_class_creation_13__bases);
            tmp_cmp_expr_left_13 = tmp_class_creation_13__bases;
            CHECK_OBJECT(tmp_class_creation_13__bases_orig);
            tmp_cmp_expr_right_13 = tmp_class_creation_13__bases_orig;
            tmp_condition_result_78 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_13, tmp_cmp_expr_right_13);
            if (tmp_condition_result_78 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 122;

                goto try_except_handler_39;
            }
            if (tmp_condition_result_78 == NUITKA_BOOL_TRUE) {
                goto branch_yes_52;
            } else {
                goto branch_no_52;
            }
            assert(tmp_condition_result_78 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_52:;
        CHECK_OBJECT(tmp_class_creation_13__bases_orig);
        tmp_dictset_value = tmp_class_creation_13__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__13_ProxyConnectionError_122, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 122;

            goto try_except_handler_39;
        }
        branch_no_52:;
        {
            PyObject *tmp_assign_source_110;
            PyObject *tmp_called_value_26;
            PyObject *tmp_args_value_26;
            PyObject *tmp_tuple_element_51;
            PyObject *tmp_kwargs_value_26;
            CHECK_OBJECT(tmp_class_creation_13__metaclass);
            tmp_called_value_26 = tmp_class_creation_13__metaclass;
            tmp_tuple_element_51 = mod_consts[89];
            tmp_args_value_26 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_26, 0, tmp_tuple_element_51);
            CHECK_OBJECT(tmp_class_creation_13__bases);
            tmp_tuple_element_51 = tmp_class_creation_13__bases;
            PyTuple_SET_ITEM0(tmp_args_value_26, 1, tmp_tuple_element_51);
            tmp_tuple_element_51 = locals_botocore$exceptions$$$class__13_ProxyConnectionError_122;
            PyTuple_SET_ITEM0(tmp_args_value_26, 2, tmp_tuple_element_51);
            CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
            tmp_kwargs_value_26 = tmp_class_creation_13__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 122;
            tmp_assign_source_110 = CALL_FUNCTION(tmp_called_value_26, tmp_args_value_26, tmp_kwargs_value_26);
            Py_DECREF(tmp_args_value_26);
            if (tmp_assign_source_110 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 122;

                goto try_except_handler_39;
            }
            assert(outline_12_var___class__ == NULL);
            outline_12_var___class__ = tmp_assign_source_110;
        }
        CHECK_OBJECT(outline_12_var___class__);
        tmp_assign_source_109 = outline_12_var___class__;
        Py_INCREF(tmp_assign_source_109);
        goto try_return_handler_39;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_39:;
        Py_DECREF(locals_botocore$exceptions$$$class__13_ProxyConnectionError_122);
        locals_botocore$exceptions$$$class__13_ProxyConnectionError_122 = NULL;
        goto try_return_handler_38;
        // Exception handler code:
        try_except_handler_39:;
        exception_keeper_type_37 = exception_type;
        exception_keeper_value_37 = exception_value;
        exception_keeper_tb_37 = exception_tb;
        exception_keeper_lineno_37 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__13_ProxyConnectionError_122);
        locals_botocore$exceptions$$$class__13_ProxyConnectionError_122 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_37;
        exception_value = exception_keeper_value_37;
        exception_tb = exception_keeper_tb_37;
        exception_lineno = exception_keeper_lineno_37;

        goto try_except_handler_38;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_38:;
        CHECK_OBJECT(outline_12_var___class__);
        Py_DECREF(outline_12_var___class__);
        outline_12_var___class__ = NULL;
        goto outline_result_13;
        // Exception handler code:
        try_except_handler_38:;
        exception_keeper_type_38 = exception_type;
        exception_keeper_value_38 = exception_value;
        exception_keeper_tb_38 = exception_tb;
        exception_keeper_lineno_38 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_38;
        exception_value = exception_keeper_value_38;
        exception_tb = exception_keeper_tb_38;
        exception_lineno = exception_keeper_lineno_38;

        goto outline_exception_13;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_13:;
        exception_lineno = 122;
        goto try_except_handler_37;
        outline_result_13:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[89], tmp_assign_source_109);
    }
    goto try_end_13;
    // Exception handler code:
    try_except_handler_37:;
    exception_keeper_type_39 = exception_type;
    exception_keeper_value_39 = exception_value;
    exception_keeper_tb_39 = exception_tb;
    exception_keeper_lineno_39 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_13__bases_orig);
    tmp_class_creation_13__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_13__bases);
    tmp_class_creation_13__bases = NULL;
    Py_XDECREF(tmp_class_creation_13__class_decl_dict);
    tmp_class_creation_13__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_13__metaclass);
    tmp_class_creation_13__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_13__prepared);
    tmp_class_creation_13__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_39;
    exception_value = exception_keeper_value_39;
    exception_tb = exception_keeper_tb_39;
    exception_lineno = exception_keeper_lineno_39;

    goto frame_exception_exit_1;
    // End of try:
    try_end_13:;
    CHECK_OBJECT(tmp_class_creation_13__bases_orig);
    Py_DECREF(tmp_class_creation_13__bases_orig);
    tmp_class_creation_13__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_13__bases);
    Py_DECREF(tmp_class_creation_13__bases);
    tmp_class_creation_13__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
    Py_DECREF(tmp_class_creation_13__class_decl_dict);
    tmp_class_creation_13__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_13__metaclass);
    Py_DECREF(tmp_class_creation_13__metaclass);
    tmp_class_creation_13__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_13__prepared);
    Py_DECREF(tmp_class_creation_13__prepared);
    tmp_class_creation_13__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_111;
        PyObject *tmp_tuple_element_52;
        tmp_tuple_element_52 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_52 == NULL)) {
            tmp_tuple_element_52 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_52 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_40;
        }
        tmp_assign_source_111 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_111, 0, tmp_tuple_element_52);
        assert(tmp_class_creation_14__bases_orig == NULL);
        tmp_class_creation_14__bases_orig = tmp_assign_source_111;
    }
    {
        PyObject *tmp_assign_source_112;
        PyObject *tmp_dircall_arg1_14;
        CHECK_OBJECT(tmp_class_creation_14__bases_orig);
        tmp_dircall_arg1_14 = tmp_class_creation_14__bases_orig;
        Py_INCREF(tmp_dircall_arg1_14);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_14};
            tmp_assign_source_112 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_112 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_40;
        }
        assert(tmp_class_creation_14__bases == NULL);
        tmp_class_creation_14__bases = tmp_assign_source_112;
    }
    {
        PyObject *tmp_assign_source_113;
        tmp_assign_source_113 = PyDict_New();
        assert(tmp_class_creation_14__class_decl_dict == NULL);
        tmp_class_creation_14__class_decl_dict = tmp_assign_source_113;
    }
    {
        PyObject *tmp_assign_source_114;
        PyObject *tmp_metaclass_value_14;
        bool tmp_condition_result_79;
        PyObject *tmp_key_value_40;
        PyObject *tmp_dict_arg_value_40;
        PyObject *tmp_dict_arg_value_41;
        PyObject *tmp_key_value_41;
        nuitka_bool tmp_condition_result_80;
        int tmp_truth_name_14;
        PyObject *tmp_type_arg_27;
        PyObject *tmp_expression_value_76;
        PyObject *tmp_subscript_value_14;
        PyObject *tmp_bases_value_14;
        tmp_key_value_40 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
        tmp_dict_arg_value_40 = tmp_class_creation_14__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_40, tmp_key_value_40);
        assert(!(tmp_res == -1));
        tmp_condition_result_79 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_79 != false) {
            goto condexpr_true_27;
        } else {
            goto condexpr_false_27;
        }
        condexpr_true_27:;
        CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
        tmp_dict_arg_value_41 = tmp_class_creation_14__class_decl_dict;
        tmp_key_value_41 = mod_consts[43];
        tmp_metaclass_value_14 = DICT_GET_ITEM0(tmp_dict_arg_value_41, tmp_key_value_41);
        if (tmp_metaclass_value_14 == NULL) {
            tmp_metaclass_value_14 = Py_None;
        }
        assert(!(tmp_metaclass_value_14 == NULL));
        Py_INCREF(tmp_metaclass_value_14);
        goto condexpr_end_27;
        condexpr_false_27:;
        CHECK_OBJECT(tmp_class_creation_14__bases);
        tmp_truth_name_14 = CHECK_IF_TRUE(tmp_class_creation_14__bases);
        if (tmp_truth_name_14 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_40;
        }
        tmp_condition_result_80 = tmp_truth_name_14 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_80 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_28;
        } else {
            goto condexpr_false_28;
        }
        condexpr_true_28:;
        CHECK_OBJECT(tmp_class_creation_14__bases);
        tmp_expression_value_76 = tmp_class_creation_14__bases;
        tmp_subscript_value_14 = mod_consts[36];
        tmp_type_arg_27 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_76, tmp_subscript_value_14, 0);
        if (tmp_type_arg_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_40;
        }
        tmp_metaclass_value_14 = BUILTIN_TYPE1(tmp_type_arg_27);
        Py_DECREF(tmp_type_arg_27);
        if (tmp_metaclass_value_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_40;
        }
        goto condexpr_end_28;
        condexpr_false_28:;
        tmp_metaclass_value_14 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_14);
        condexpr_end_28:;
        condexpr_end_27:;
        CHECK_OBJECT(tmp_class_creation_14__bases);
        tmp_bases_value_14 = tmp_class_creation_14__bases;
        tmp_assign_source_114 = SELECT_METACLASS(tmp_metaclass_value_14, tmp_bases_value_14);
        Py_DECREF(tmp_metaclass_value_14);
        if (tmp_assign_source_114 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_40;
        }
        assert(tmp_class_creation_14__metaclass == NULL);
        tmp_class_creation_14__metaclass = tmp_assign_source_114;
    }
    {
        bool tmp_condition_result_81;
        PyObject *tmp_key_value_42;
        PyObject *tmp_dict_arg_value_42;
        tmp_key_value_42 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
        tmp_dict_arg_value_42 = tmp_class_creation_14__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_42, tmp_key_value_42);
        assert(!(tmp_res == -1));
        tmp_condition_result_81 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_81 != false) {
            goto branch_yes_53;
        } else {
            goto branch_no_53;
        }
    }
    branch_yes_53:;
    CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_14__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 126;

        goto try_except_handler_40;
    }
    branch_no_53:;
    {
        nuitka_bool tmp_condition_result_82;
        PyObject *tmp_expression_value_77;
        CHECK_OBJECT(tmp_class_creation_14__metaclass);
        tmp_expression_value_77 = tmp_class_creation_14__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_77, mod_consts[44]);
        tmp_condition_result_82 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_82 == NUITKA_BOOL_TRUE) {
            goto branch_yes_54;
        } else {
            goto branch_no_54;
        }
    }
    branch_yes_54:;
    {
        PyObject *tmp_assign_source_115;
        PyObject *tmp_called_value_27;
        PyObject *tmp_expression_value_78;
        PyObject *tmp_args_value_27;
        PyObject *tmp_tuple_element_53;
        PyObject *tmp_kwargs_value_27;
        CHECK_OBJECT(tmp_class_creation_14__metaclass);
        tmp_expression_value_78 = tmp_class_creation_14__metaclass;
        tmp_called_value_27 = LOOKUP_ATTRIBUTE(tmp_expression_value_78, mod_consts[44]);
        if (tmp_called_value_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_40;
        }
        tmp_tuple_element_53 = mod_consts[91];
        tmp_args_value_27 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_27, 0, tmp_tuple_element_53);
        CHECK_OBJECT(tmp_class_creation_14__bases);
        tmp_tuple_element_53 = tmp_class_creation_14__bases;
        PyTuple_SET_ITEM0(tmp_args_value_27, 1, tmp_tuple_element_53);
        CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
        tmp_kwargs_value_27 = tmp_class_creation_14__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 126;
        tmp_assign_source_115 = CALL_FUNCTION(tmp_called_value_27, tmp_args_value_27, tmp_kwargs_value_27);
        Py_DECREF(tmp_called_value_27);
        Py_DECREF(tmp_args_value_27);
        if (tmp_assign_source_115 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_40;
        }
        assert(tmp_class_creation_14__prepared == NULL);
        tmp_class_creation_14__prepared = tmp_assign_source_115;
    }
    {
        bool tmp_condition_result_83;
        PyObject *tmp_operand_value_14;
        PyObject *tmp_expression_value_79;
        CHECK_OBJECT(tmp_class_creation_14__prepared);
        tmp_expression_value_79 = tmp_class_creation_14__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_79, mod_consts[46]);
        tmp_operand_value_14 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_14);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_40;
        }
        tmp_condition_result_83 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_83 != false) {
            goto branch_yes_55;
        } else {
            goto branch_no_55;
        }
    }
    branch_yes_55:;
    {
        PyObject *tmp_raise_type_14;
        PyObject *tmp_raise_value_14;
        PyObject *tmp_left_value_14;
        PyObject *tmp_right_value_14;
        PyObject *tmp_tuple_element_54;
        PyObject *tmp_getattr_target_14;
        PyObject *tmp_getattr_attr_14;
        PyObject *tmp_getattr_default_14;
        tmp_raise_type_14 = PyExc_TypeError;
        tmp_left_value_14 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_14__metaclass);
        tmp_getattr_target_14 = tmp_class_creation_14__metaclass;
        tmp_getattr_attr_14 = mod_consts[48];
        tmp_getattr_default_14 = mod_consts[49];
        tmp_tuple_element_54 = BUILTIN_GETATTR(tmp_getattr_target_14, tmp_getattr_attr_14, tmp_getattr_default_14);
        if (tmp_tuple_element_54 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_40;
        }
        tmp_right_value_14 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_80;
            PyObject *tmp_type_arg_28;
            PyTuple_SET_ITEM(tmp_right_value_14, 0, tmp_tuple_element_54);
            CHECK_OBJECT(tmp_class_creation_14__prepared);
            tmp_type_arg_28 = tmp_class_creation_14__prepared;
            tmp_expression_value_80 = BUILTIN_TYPE1(tmp_type_arg_28);
            assert(!(tmp_expression_value_80 == NULL));
            tmp_tuple_element_54 = LOOKUP_ATTRIBUTE(tmp_expression_value_80, mod_consts[48]);
            Py_DECREF(tmp_expression_value_80);
            if (tmp_tuple_element_54 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 126;

                goto tuple_build_exception_18;
            }
            PyTuple_SET_ITEM(tmp_right_value_14, 1, tmp_tuple_element_54);
        }
        goto tuple_build_noexception_18;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_18:;
        Py_DECREF(tmp_right_value_14);
        goto try_except_handler_40;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_18:;
        tmp_raise_value_14 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_14, tmp_right_value_14);
        Py_DECREF(tmp_right_value_14);
        if (tmp_raise_value_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_40;
        }
        exception_type = tmp_raise_type_14;
        Py_INCREF(tmp_raise_type_14);
        exception_value = tmp_raise_value_14;
        exception_lineno = 126;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_40;
    }
    branch_no_55:;
    goto branch_end_54;
    branch_no_54:;
    {
        PyObject *tmp_assign_source_116;
        tmp_assign_source_116 = PyDict_New();
        assert(tmp_class_creation_14__prepared == NULL);
        tmp_class_creation_14__prepared = tmp_assign_source_116;
    }
    branch_end_54:;
    {
        PyObject *tmp_assign_source_117;
        {
            PyObject *tmp_set_locals_14;
            CHECK_OBJECT(tmp_class_creation_14__prepared);
            tmp_set_locals_14 = tmp_class_creation_14__prepared;
            locals_botocore$exceptions$$$class__14_NoCredentialsError_126 = tmp_set_locals_14;
            Py_INCREF(tmp_set_locals_14);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__14_NoCredentialsError_126, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_42;
        }
        tmp_dictset_value = mod_consts[92];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__14_NoCredentialsError_126, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_42;
        }
        tmp_dictset_value = mod_consts[91];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__14_NoCredentialsError_126, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_42;
        }
        if (isFrameUnusable(cache_frame_0c4727d4a3997960a50092d98b12e5c1_15)) {
            Py_XDECREF(cache_frame_0c4727d4a3997960a50092d98b12e5c1_15);

#if _DEBUG_REFCOUNTS
            if (cache_frame_0c4727d4a3997960a50092d98b12e5c1_15 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_0c4727d4a3997960a50092d98b12e5c1_15 = MAKE_FUNCTION_FRAME(codeobj_0c4727d4a3997960a50092d98b12e5c1, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_0c4727d4a3997960a50092d98b12e5c1_15->m_type_description == NULL);
        frame_0c4727d4a3997960a50092d98b12e5c1_15 = cache_frame_0c4727d4a3997960a50092d98b12e5c1_15;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_0c4727d4a3997960a50092d98b12e5c1_15);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_0c4727d4a3997960a50092d98b12e5c1_15) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[93];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__14_NoCredentialsError_126, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 130;
            type_description_2 = "o";
            goto frame_exception_exit_15;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_0c4727d4a3997960a50092d98b12e5c1_15);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_14;

        frame_exception_exit_15:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_0c4727d4a3997960a50092d98b12e5c1_15);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_0c4727d4a3997960a50092d98b12e5c1_15, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_0c4727d4a3997960a50092d98b12e5c1_15->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_0c4727d4a3997960a50092d98b12e5c1_15, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_0c4727d4a3997960a50092d98b12e5c1_15,
            type_description_2,
            outline_13_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_0c4727d4a3997960a50092d98b12e5c1_15 == cache_frame_0c4727d4a3997960a50092d98b12e5c1_15) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_0c4727d4a3997960a50092d98b12e5c1_15);
            cache_frame_0c4727d4a3997960a50092d98b12e5c1_15 = NULL;
        }

        assertFrameObject(frame_0c4727d4a3997960a50092d98b12e5c1_15);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_14;

        frame_no_exception_14:;
        goto skip_nested_handling_14;
        nested_frame_exit_14:;

        goto try_except_handler_42;
        skip_nested_handling_14:;
        {
            nuitka_bool tmp_condition_result_84;
            PyObject *tmp_cmp_expr_left_14;
            PyObject *tmp_cmp_expr_right_14;
            CHECK_OBJECT(tmp_class_creation_14__bases);
            tmp_cmp_expr_left_14 = tmp_class_creation_14__bases;
            CHECK_OBJECT(tmp_class_creation_14__bases_orig);
            tmp_cmp_expr_right_14 = tmp_class_creation_14__bases_orig;
            tmp_condition_result_84 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_14, tmp_cmp_expr_right_14);
            if (tmp_condition_result_84 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 126;

                goto try_except_handler_42;
            }
            if (tmp_condition_result_84 == NUITKA_BOOL_TRUE) {
                goto branch_yes_56;
            } else {
                goto branch_no_56;
            }
            assert(tmp_condition_result_84 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_56:;
        CHECK_OBJECT(tmp_class_creation_14__bases_orig);
        tmp_dictset_value = tmp_class_creation_14__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__14_NoCredentialsError_126, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_42;
        }
        branch_no_56:;
        {
            PyObject *tmp_assign_source_118;
            PyObject *tmp_called_value_28;
            PyObject *tmp_args_value_28;
            PyObject *tmp_tuple_element_55;
            PyObject *tmp_kwargs_value_28;
            CHECK_OBJECT(tmp_class_creation_14__metaclass);
            tmp_called_value_28 = tmp_class_creation_14__metaclass;
            tmp_tuple_element_55 = mod_consts[91];
            tmp_args_value_28 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_28, 0, tmp_tuple_element_55);
            CHECK_OBJECT(tmp_class_creation_14__bases);
            tmp_tuple_element_55 = tmp_class_creation_14__bases;
            PyTuple_SET_ITEM0(tmp_args_value_28, 1, tmp_tuple_element_55);
            tmp_tuple_element_55 = locals_botocore$exceptions$$$class__14_NoCredentialsError_126;
            PyTuple_SET_ITEM0(tmp_args_value_28, 2, tmp_tuple_element_55);
            CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
            tmp_kwargs_value_28 = tmp_class_creation_14__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 126;
            tmp_assign_source_118 = CALL_FUNCTION(tmp_called_value_28, tmp_args_value_28, tmp_kwargs_value_28);
            Py_DECREF(tmp_args_value_28);
            if (tmp_assign_source_118 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 126;

                goto try_except_handler_42;
            }
            assert(outline_13_var___class__ == NULL);
            outline_13_var___class__ = tmp_assign_source_118;
        }
        CHECK_OBJECT(outline_13_var___class__);
        tmp_assign_source_117 = outline_13_var___class__;
        Py_INCREF(tmp_assign_source_117);
        goto try_return_handler_42;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_42:;
        Py_DECREF(locals_botocore$exceptions$$$class__14_NoCredentialsError_126);
        locals_botocore$exceptions$$$class__14_NoCredentialsError_126 = NULL;
        goto try_return_handler_41;
        // Exception handler code:
        try_except_handler_42:;
        exception_keeper_type_40 = exception_type;
        exception_keeper_value_40 = exception_value;
        exception_keeper_tb_40 = exception_tb;
        exception_keeper_lineno_40 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__14_NoCredentialsError_126);
        locals_botocore$exceptions$$$class__14_NoCredentialsError_126 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_40;
        exception_value = exception_keeper_value_40;
        exception_tb = exception_keeper_tb_40;
        exception_lineno = exception_keeper_lineno_40;

        goto try_except_handler_41;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_41:;
        CHECK_OBJECT(outline_13_var___class__);
        Py_DECREF(outline_13_var___class__);
        outline_13_var___class__ = NULL;
        goto outline_result_14;
        // Exception handler code:
        try_except_handler_41:;
        exception_keeper_type_41 = exception_type;
        exception_keeper_value_41 = exception_value;
        exception_keeper_tb_41 = exception_tb;
        exception_keeper_lineno_41 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_41;
        exception_value = exception_keeper_value_41;
        exception_tb = exception_keeper_tb_41;
        exception_lineno = exception_keeper_lineno_41;

        goto outline_exception_14;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_14:;
        exception_lineno = 126;
        goto try_except_handler_40;
        outline_result_14:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[91], tmp_assign_source_117);
    }
    goto try_end_14;
    // Exception handler code:
    try_except_handler_40:;
    exception_keeper_type_42 = exception_type;
    exception_keeper_value_42 = exception_value;
    exception_keeper_tb_42 = exception_tb;
    exception_keeper_lineno_42 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_14__bases_orig);
    tmp_class_creation_14__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_14__bases);
    tmp_class_creation_14__bases = NULL;
    Py_XDECREF(tmp_class_creation_14__class_decl_dict);
    tmp_class_creation_14__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_14__metaclass);
    tmp_class_creation_14__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_14__prepared);
    tmp_class_creation_14__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_42;
    exception_value = exception_keeper_value_42;
    exception_tb = exception_keeper_tb_42;
    exception_lineno = exception_keeper_lineno_42;

    goto frame_exception_exit_1;
    // End of try:
    try_end_14:;
    CHECK_OBJECT(tmp_class_creation_14__bases_orig);
    Py_DECREF(tmp_class_creation_14__bases_orig);
    tmp_class_creation_14__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_14__bases);
    Py_DECREF(tmp_class_creation_14__bases);
    tmp_class_creation_14__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
    Py_DECREF(tmp_class_creation_14__class_decl_dict);
    tmp_class_creation_14__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_14__metaclass);
    Py_DECREF(tmp_class_creation_14__metaclass);
    tmp_class_creation_14__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_14__prepared);
    Py_DECREF(tmp_class_creation_14__prepared);
    tmp_class_creation_14__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_119;
        PyObject *tmp_tuple_element_56;
        tmp_tuple_element_56 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_56 == NULL)) {
            tmp_tuple_element_56 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_56 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 133;

            goto try_except_handler_43;
        }
        tmp_assign_source_119 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_119, 0, tmp_tuple_element_56);
        assert(tmp_class_creation_15__bases_orig == NULL);
        tmp_class_creation_15__bases_orig = tmp_assign_source_119;
    }
    {
        PyObject *tmp_assign_source_120;
        PyObject *tmp_dircall_arg1_15;
        CHECK_OBJECT(tmp_class_creation_15__bases_orig);
        tmp_dircall_arg1_15 = tmp_class_creation_15__bases_orig;
        Py_INCREF(tmp_dircall_arg1_15);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_15};
            tmp_assign_source_120 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_120 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 133;

            goto try_except_handler_43;
        }
        assert(tmp_class_creation_15__bases == NULL);
        tmp_class_creation_15__bases = tmp_assign_source_120;
    }
    {
        PyObject *tmp_assign_source_121;
        tmp_assign_source_121 = PyDict_New();
        assert(tmp_class_creation_15__class_decl_dict == NULL);
        tmp_class_creation_15__class_decl_dict = tmp_assign_source_121;
    }
    {
        PyObject *tmp_assign_source_122;
        PyObject *tmp_metaclass_value_15;
        bool tmp_condition_result_85;
        PyObject *tmp_key_value_43;
        PyObject *tmp_dict_arg_value_43;
        PyObject *tmp_dict_arg_value_44;
        PyObject *tmp_key_value_44;
        nuitka_bool tmp_condition_result_86;
        int tmp_truth_name_15;
        PyObject *tmp_type_arg_29;
        PyObject *tmp_expression_value_81;
        PyObject *tmp_subscript_value_15;
        PyObject *tmp_bases_value_15;
        tmp_key_value_43 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
        tmp_dict_arg_value_43 = tmp_class_creation_15__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_43, tmp_key_value_43);
        assert(!(tmp_res == -1));
        tmp_condition_result_85 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_85 != false) {
            goto condexpr_true_29;
        } else {
            goto condexpr_false_29;
        }
        condexpr_true_29:;
        CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
        tmp_dict_arg_value_44 = tmp_class_creation_15__class_decl_dict;
        tmp_key_value_44 = mod_consts[43];
        tmp_metaclass_value_15 = DICT_GET_ITEM0(tmp_dict_arg_value_44, tmp_key_value_44);
        if (tmp_metaclass_value_15 == NULL) {
            tmp_metaclass_value_15 = Py_None;
        }
        assert(!(tmp_metaclass_value_15 == NULL));
        Py_INCREF(tmp_metaclass_value_15);
        goto condexpr_end_29;
        condexpr_false_29:;
        CHECK_OBJECT(tmp_class_creation_15__bases);
        tmp_truth_name_15 = CHECK_IF_TRUE(tmp_class_creation_15__bases);
        if (tmp_truth_name_15 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 133;

            goto try_except_handler_43;
        }
        tmp_condition_result_86 = tmp_truth_name_15 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_86 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_30;
        } else {
            goto condexpr_false_30;
        }
        condexpr_true_30:;
        CHECK_OBJECT(tmp_class_creation_15__bases);
        tmp_expression_value_81 = tmp_class_creation_15__bases;
        tmp_subscript_value_15 = mod_consts[36];
        tmp_type_arg_29 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_81, tmp_subscript_value_15, 0);
        if (tmp_type_arg_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 133;

            goto try_except_handler_43;
        }
        tmp_metaclass_value_15 = BUILTIN_TYPE1(tmp_type_arg_29);
        Py_DECREF(tmp_type_arg_29);
        if (tmp_metaclass_value_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 133;

            goto try_except_handler_43;
        }
        goto condexpr_end_30;
        condexpr_false_30:;
        tmp_metaclass_value_15 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_15);
        condexpr_end_30:;
        condexpr_end_29:;
        CHECK_OBJECT(tmp_class_creation_15__bases);
        tmp_bases_value_15 = tmp_class_creation_15__bases;
        tmp_assign_source_122 = SELECT_METACLASS(tmp_metaclass_value_15, tmp_bases_value_15);
        Py_DECREF(tmp_metaclass_value_15);
        if (tmp_assign_source_122 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 133;

            goto try_except_handler_43;
        }
        assert(tmp_class_creation_15__metaclass == NULL);
        tmp_class_creation_15__metaclass = tmp_assign_source_122;
    }
    {
        bool tmp_condition_result_87;
        PyObject *tmp_key_value_45;
        PyObject *tmp_dict_arg_value_45;
        tmp_key_value_45 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
        tmp_dict_arg_value_45 = tmp_class_creation_15__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_45, tmp_key_value_45);
        assert(!(tmp_res == -1));
        tmp_condition_result_87 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_87 != false) {
            goto branch_yes_57;
        } else {
            goto branch_no_57;
        }
    }
    branch_yes_57:;
    CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_15__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 133;

        goto try_except_handler_43;
    }
    branch_no_57:;
    {
        nuitka_bool tmp_condition_result_88;
        PyObject *tmp_expression_value_82;
        CHECK_OBJECT(tmp_class_creation_15__metaclass);
        tmp_expression_value_82 = tmp_class_creation_15__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_82, mod_consts[44]);
        tmp_condition_result_88 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_88 == NUITKA_BOOL_TRUE) {
            goto branch_yes_58;
        } else {
            goto branch_no_58;
        }
    }
    branch_yes_58:;
    {
        PyObject *tmp_assign_source_123;
        PyObject *tmp_called_value_29;
        PyObject *tmp_expression_value_83;
        PyObject *tmp_args_value_29;
        PyObject *tmp_tuple_element_57;
        PyObject *tmp_kwargs_value_29;
        CHECK_OBJECT(tmp_class_creation_15__metaclass);
        tmp_expression_value_83 = tmp_class_creation_15__metaclass;
        tmp_called_value_29 = LOOKUP_ATTRIBUTE(tmp_expression_value_83, mod_consts[44]);
        if (tmp_called_value_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 133;

            goto try_except_handler_43;
        }
        tmp_tuple_element_57 = mod_consts[94];
        tmp_args_value_29 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_29, 0, tmp_tuple_element_57);
        CHECK_OBJECT(tmp_class_creation_15__bases);
        tmp_tuple_element_57 = tmp_class_creation_15__bases;
        PyTuple_SET_ITEM0(tmp_args_value_29, 1, tmp_tuple_element_57);
        CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
        tmp_kwargs_value_29 = tmp_class_creation_15__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 133;
        tmp_assign_source_123 = CALL_FUNCTION(tmp_called_value_29, tmp_args_value_29, tmp_kwargs_value_29);
        Py_DECREF(tmp_called_value_29);
        Py_DECREF(tmp_args_value_29);
        if (tmp_assign_source_123 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 133;

            goto try_except_handler_43;
        }
        assert(tmp_class_creation_15__prepared == NULL);
        tmp_class_creation_15__prepared = tmp_assign_source_123;
    }
    {
        bool tmp_condition_result_89;
        PyObject *tmp_operand_value_15;
        PyObject *tmp_expression_value_84;
        CHECK_OBJECT(tmp_class_creation_15__prepared);
        tmp_expression_value_84 = tmp_class_creation_15__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_84, mod_consts[46]);
        tmp_operand_value_15 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_15);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 133;

            goto try_except_handler_43;
        }
        tmp_condition_result_89 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_89 != false) {
            goto branch_yes_59;
        } else {
            goto branch_no_59;
        }
    }
    branch_yes_59:;
    {
        PyObject *tmp_raise_type_15;
        PyObject *tmp_raise_value_15;
        PyObject *tmp_left_value_15;
        PyObject *tmp_right_value_15;
        PyObject *tmp_tuple_element_58;
        PyObject *tmp_getattr_target_15;
        PyObject *tmp_getattr_attr_15;
        PyObject *tmp_getattr_default_15;
        tmp_raise_type_15 = PyExc_TypeError;
        tmp_left_value_15 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_15__metaclass);
        tmp_getattr_target_15 = tmp_class_creation_15__metaclass;
        tmp_getattr_attr_15 = mod_consts[48];
        tmp_getattr_default_15 = mod_consts[49];
        tmp_tuple_element_58 = BUILTIN_GETATTR(tmp_getattr_target_15, tmp_getattr_attr_15, tmp_getattr_default_15);
        if (tmp_tuple_element_58 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 133;

            goto try_except_handler_43;
        }
        tmp_right_value_15 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_85;
            PyObject *tmp_type_arg_30;
            PyTuple_SET_ITEM(tmp_right_value_15, 0, tmp_tuple_element_58);
            CHECK_OBJECT(tmp_class_creation_15__prepared);
            tmp_type_arg_30 = tmp_class_creation_15__prepared;
            tmp_expression_value_85 = BUILTIN_TYPE1(tmp_type_arg_30);
            assert(!(tmp_expression_value_85 == NULL));
            tmp_tuple_element_58 = LOOKUP_ATTRIBUTE(tmp_expression_value_85, mod_consts[48]);
            Py_DECREF(tmp_expression_value_85);
            if (tmp_tuple_element_58 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 133;

                goto tuple_build_exception_19;
            }
            PyTuple_SET_ITEM(tmp_right_value_15, 1, tmp_tuple_element_58);
        }
        goto tuple_build_noexception_19;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_19:;
        Py_DECREF(tmp_right_value_15);
        goto try_except_handler_43;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_19:;
        tmp_raise_value_15 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_15, tmp_right_value_15);
        Py_DECREF(tmp_right_value_15);
        if (tmp_raise_value_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 133;

            goto try_except_handler_43;
        }
        exception_type = tmp_raise_type_15;
        Py_INCREF(tmp_raise_type_15);
        exception_value = tmp_raise_value_15;
        exception_lineno = 133;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_43;
    }
    branch_no_59:;
    goto branch_end_58;
    branch_no_58:;
    {
        PyObject *tmp_assign_source_124;
        tmp_assign_source_124 = PyDict_New();
        assert(tmp_class_creation_15__prepared == NULL);
        tmp_class_creation_15__prepared = tmp_assign_source_124;
    }
    branch_end_58:;
    {
        PyObject *tmp_assign_source_125;
        {
            PyObject *tmp_set_locals_15;
            CHECK_OBJECT(tmp_class_creation_15__prepared);
            tmp_set_locals_15 = tmp_class_creation_15__prepared;
            locals_botocore$exceptions$$$class__15_PartialCredentialsError_133 = tmp_set_locals_15;
            Py_INCREF(tmp_set_locals_15);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__15_PartialCredentialsError_133, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 133;

            goto try_except_handler_45;
        }
        tmp_dictset_value = mod_consts[95];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__15_PartialCredentialsError_133, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 133;

            goto try_except_handler_45;
        }
        tmp_dictset_value = mod_consts[94];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__15_PartialCredentialsError_133, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 133;

            goto try_except_handler_45;
        }
        if (isFrameUnusable(cache_frame_abe31f64c1d501b6a197fba4182155ff_16)) {
            Py_XDECREF(cache_frame_abe31f64c1d501b6a197fba4182155ff_16);

#if _DEBUG_REFCOUNTS
            if (cache_frame_abe31f64c1d501b6a197fba4182155ff_16 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_abe31f64c1d501b6a197fba4182155ff_16 = MAKE_FUNCTION_FRAME(codeobj_abe31f64c1d501b6a197fba4182155ff, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_abe31f64c1d501b6a197fba4182155ff_16->m_type_description == NULL);
        frame_abe31f64c1d501b6a197fba4182155ff_16 = cache_frame_abe31f64c1d501b6a197fba4182155ff_16;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_abe31f64c1d501b6a197fba4182155ff_16);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_abe31f64c1d501b6a197fba4182155ff_16) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[96];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__15_PartialCredentialsError_133, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 140;
            type_description_2 = "o";
            goto frame_exception_exit_16;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_abe31f64c1d501b6a197fba4182155ff_16);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_15;

        frame_exception_exit_16:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_abe31f64c1d501b6a197fba4182155ff_16);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_abe31f64c1d501b6a197fba4182155ff_16, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_abe31f64c1d501b6a197fba4182155ff_16->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_abe31f64c1d501b6a197fba4182155ff_16, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_abe31f64c1d501b6a197fba4182155ff_16,
            type_description_2,
            outline_14_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_abe31f64c1d501b6a197fba4182155ff_16 == cache_frame_abe31f64c1d501b6a197fba4182155ff_16) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_abe31f64c1d501b6a197fba4182155ff_16);
            cache_frame_abe31f64c1d501b6a197fba4182155ff_16 = NULL;
        }

        assertFrameObject(frame_abe31f64c1d501b6a197fba4182155ff_16);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_15;

        frame_no_exception_15:;
        goto skip_nested_handling_15;
        nested_frame_exit_15:;

        goto try_except_handler_45;
        skip_nested_handling_15:;
        {
            nuitka_bool tmp_condition_result_90;
            PyObject *tmp_cmp_expr_left_15;
            PyObject *tmp_cmp_expr_right_15;
            CHECK_OBJECT(tmp_class_creation_15__bases);
            tmp_cmp_expr_left_15 = tmp_class_creation_15__bases;
            CHECK_OBJECT(tmp_class_creation_15__bases_orig);
            tmp_cmp_expr_right_15 = tmp_class_creation_15__bases_orig;
            tmp_condition_result_90 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_15, tmp_cmp_expr_right_15);
            if (tmp_condition_result_90 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 133;

                goto try_except_handler_45;
            }
            if (tmp_condition_result_90 == NUITKA_BOOL_TRUE) {
                goto branch_yes_60;
            } else {
                goto branch_no_60;
            }
            assert(tmp_condition_result_90 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_60:;
        CHECK_OBJECT(tmp_class_creation_15__bases_orig);
        tmp_dictset_value = tmp_class_creation_15__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__15_PartialCredentialsError_133, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 133;

            goto try_except_handler_45;
        }
        branch_no_60:;
        {
            PyObject *tmp_assign_source_126;
            PyObject *tmp_called_value_30;
            PyObject *tmp_args_value_30;
            PyObject *tmp_tuple_element_59;
            PyObject *tmp_kwargs_value_30;
            CHECK_OBJECT(tmp_class_creation_15__metaclass);
            tmp_called_value_30 = tmp_class_creation_15__metaclass;
            tmp_tuple_element_59 = mod_consts[94];
            tmp_args_value_30 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_30, 0, tmp_tuple_element_59);
            CHECK_OBJECT(tmp_class_creation_15__bases);
            tmp_tuple_element_59 = tmp_class_creation_15__bases;
            PyTuple_SET_ITEM0(tmp_args_value_30, 1, tmp_tuple_element_59);
            tmp_tuple_element_59 = locals_botocore$exceptions$$$class__15_PartialCredentialsError_133;
            PyTuple_SET_ITEM0(tmp_args_value_30, 2, tmp_tuple_element_59);
            CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
            tmp_kwargs_value_30 = tmp_class_creation_15__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 133;
            tmp_assign_source_126 = CALL_FUNCTION(tmp_called_value_30, tmp_args_value_30, tmp_kwargs_value_30);
            Py_DECREF(tmp_args_value_30);
            if (tmp_assign_source_126 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 133;

                goto try_except_handler_45;
            }
            assert(outline_14_var___class__ == NULL);
            outline_14_var___class__ = tmp_assign_source_126;
        }
        CHECK_OBJECT(outline_14_var___class__);
        tmp_assign_source_125 = outline_14_var___class__;
        Py_INCREF(tmp_assign_source_125);
        goto try_return_handler_45;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_45:;
        Py_DECREF(locals_botocore$exceptions$$$class__15_PartialCredentialsError_133);
        locals_botocore$exceptions$$$class__15_PartialCredentialsError_133 = NULL;
        goto try_return_handler_44;
        // Exception handler code:
        try_except_handler_45:;
        exception_keeper_type_43 = exception_type;
        exception_keeper_value_43 = exception_value;
        exception_keeper_tb_43 = exception_tb;
        exception_keeper_lineno_43 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__15_PartialCredentialsError_133);
        locals_botocore$exceptions$$$class__15_PartialCredentialsError_133 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_43;
        exception_value = exception_keeper_value_43;
        exception_tb = exception_keeper_tb_43;
        exception_lineno = exception_keeper_lineno_43;

        goto try_except_handler_44;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_44:;
        CHECK_OBJECT(outline_14_var___class__);
        Py_DECREF(outline_14_var___class__);
        outline_14_var___class__ = NULL;
        goto outline_result_15;
        // Exception handler code:
        try_except_handler_44:;
        exception_keeper_type_44 = exception_type;
        exception_keeper_value_44 = exception_value;
        exception_keeper_tb_44 = exception_tb;
        exception_keeper_lineno_44 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_44;
        exception_value = exception_keeper_value_44;
        exception_tb = exception_keeper_tb_44;
        exception_lineno = exception_keeper_lineno_44;

        goto outline_exception_15;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_15:;
        exception_lineno = 133;
        goto try_except_handler_43;
        outline_result_15:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[94], tmp_assign_source_125);
    }
    goto try_end_15;
    // Exception handler code:
    try_except_handler_43:;
    exception_keeper_type_45 = exception_type;
    exception_keeper_value_45 = exception_value;
    exception_keeper_tb_45 = exception_tb;
    exception_keeper_lineno_45 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_15__bases_orig);
    tmp_class_creation_15__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_15__bases);
    tmp_class_creation_15__bases = NULL;
    Py_XDECREF(tmp_class_creation_15__class_decl_dict);
    tmp_class_creation_15__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_15__metaclass);
    tmp_class_creation_15__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_15__prepared);
    tmp_class_creation_15__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_45;
    exception_value = exception_keeper_value_45;
    exception_tb = exception_keeper_tb_45;
    exception_lineno = exception_keeper_lineno_45;

    goto frame_exception_exit_1;
    // End of try:
    try_end_15:;
    CHECK_OBJECT(tmp_class_creation_15__bases_orig);
    Py_DECREF(tmp_class_creation_15__bases_orig);
    tmp_class_creation_15__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_15__bases);
    Py_DECREF(tmp_class_creation_15__bases);
    tmp_class_creation_15__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
    Py_DECREF(tmp_class_creation_15__class_decl_dict);
    tmp_class_creation_15__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_15__metaclass);
    Py_DECREF(tmp_class_creation_15__metaclass);
    tmp_class_creation_15__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_15__prepared);
    Py_DECREF(tmp_class_creation_15__prepared);
    tmp_class_creation_15__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_127;
        PyObject *tmp_tuple_element_60;
        tmp_tuple_element_60 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_60 == NULL)) {
            tmp_tuple_element_60 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_60 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 143;

            goto try_except_handler_46;
        }
        tmp_assign_source_127 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_127, 0, tmp_tuple_element_60);
        assert(tmp_class_creation_16__bases_orig == NULL);
        tmp_class_creation_16__bases_orig = tmp_assign_source_127;
    }
    {
        PyObject *tmp_assign_source_128;
        PyObject *tmp_dircall_arg1_16;
        CHECK_OBJECT(tmp_class_creation_16__bases_orig);
        tmp_dircall_arg1_16 = tmp_class_creation_16__bases_orig;
        Py_INCREF(tmp_dircall_arg1_16);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_16};
            tmp_assign_source_128 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_128 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 143;

            goto try_except_handler_46;
        }
        assert(tmp_class_creation_16__bases == NULL);
        tmp_class_creation_16__bases = tmp_assign_source_128;
    }
    {
        PyObject *tmp_assign_source_129;
        tmp_assign_source_129 = PyDict_New();
        assert(tmp_class_creation_16__class_decl_dict == NULL);
        tmp_class_creation_16__class_decl_dict = tmp_assign_source_129;
    }
    {
        PyObject *tmp_assign_source_130;
        PyObject *tmp_metaclass_value_16;
        bool tmp_condition_result_91;
        PyObject *tmp_key_value_46;
        PyObject *tmp_dict_arg_value_46;
        PyObject *tmp_dict_arg_value_47;
        PyObject *tmp_key_value_47;
        nuitka_bool tmp_condition_result_92;
        int tmp_truth_name_16;
        PyObject *tmp_type_arg_31;
        PyObject *tmp_expression_value_86;
        PyObject *tmp_subscript_value_16;
        PyObject *tmp_bases_value_16;
        tmp_key_value_46 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
        tmp_dict_arg_value_46 = tmp_class_creation_16__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_46, tmp_key_value_46);
        assert(!(tmp_res == -1));
        tmp_condition_result_91 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_91 != false) {
            goto condexpr_true_31;
        } else {
            goto condexpr_false_31;
        }
        condexpr_true_31:;
        CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
        tmp_dict_arg_value_47 = tmp_class_creation_16__class_decl_dict;
        tmp_key_value_47 = mod_consts[43];
        tmp_metaclass_value_16 = DICT_GET_ITEM0(tmp_dict_arg_value_47, tmp_key_value_47);
        if (tmp_metaclass_value_16 == NULL) {
            tmp_metaclass_value_16 = Py_None;
        }
        assert(!(tmp_metaclass_value_16 == NULL));
        Py_INCREF(tmp_metaclass_value_16);
        goto condexpr_end_31;
        condexpr_false_31:;
        CHECK_OBJECT(tmp_class_creation_16__bases);
        tmp_truth_name_16 = CHECK_IF_TRUE(tmp_class_creation_16__bases);
        if (tmp_truth_name_16 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 143;

            goto try_except_handler_46;
        }
        tmp_condition_result_92 = tmp_truth_name_16 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_92 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_32;
        } else {
            goto condexpr_false_32;
        }
        condexpr_true_32:;
        CHECK_OBJECT(tmp_class_creation_16__bases);
        tmp_expression_value_86 = tmp_class_creation_16__bases;
        tmp_subscript_value_16 = mod_consts[36];
        tmp_type_arg_31 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_86, tmp_subscript_value_16, 0);
        if (tmp_type_arg_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 143;

            goto try_except_handler_46;
        }
        tmp_metaclass_value_16 = BUILTIN_TYPE1(tmp_type_arg_31);
        Py_DECREF(tmp_type_arg_31);
        if (tmp_metaclass_value_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 143;

            goto try_except_handler_46;
        }
        goto condexpr_end_32;
        condexpr_false_32:;
        tmp_metaclass_value_16 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_16);
        condexpr_end_32:;
        condexpr_end_31:;
        CHECK_OBJECT(tmp_class_creation_16__bases);
        tmp_bases_value_16 = tmp_class_creation_16__bases;
        tmp_assign_source_130 = SELECT_METACLASS(tmp_metaclass_value_16, tmp_bases_value_16);
        Py_DECREF(tmp_metaclass_value_16);
        if (tmp_assign_source_130 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 143;

            goto try_except_handler_46;
        }
        assert(tmp_class_creation_16__metaclass == NULL);
        tmp_class_creation_16__metaclass = tmp_assign_source_130;
    }
    {
        bool tmp_condition_result_93;
        PyObject *tmp_key_value_48;
        PyObject *tmp_dict_arg_value_48;
        tmp_key_value_48 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
        tmp_dict_arg_value_48 = tmp_class_creation_16__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_48, tmp_key_value_48);
        assert(!(tmp_res == -1));
        tmp_condition_result_93 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_93 != false) {
            goto branch_yes_61;
        } else {
            goto branch_no_61;
        }
    }
    branch_yes_61:;
    CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_16__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 143;

        goto try_except_handler_46;
    }
    branch_no_61:;
    {
        nuitka_bool tmp_condition_result_94;
        PyObject *tmp_expression_value_87;
        CHECK_OBJECT(tmp_class_creation_16__metaclass);
        tmp_expression_value_87 = tmp_class_creation_16__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_87, mod_consts[44]);
        tmp_condition_result_94 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_94 == NUITKA_BOOL_TRUE) {
            goto branch_yes_62;
        } else {
            goto branch_no_62;
        }
    }
    branch_yes_62:;
    {
        PyObject *tmp_assign_source_131;
        PyObject *tmp_called_value_31;
        PyObject *tmp_expression_value_88;
        PyObject *tmp_args_value_31;
        PyObject *tmp_tuple_element_61;
        PyObject *tmp_kwargs_value_31;
        CHECK_OBJECT(tmp_class_creation_16__metaclass);
        tmp_expression_value_88 = tmp_class_creation_16__metaclass;
        tmp_called_value_31 = LOOKUP_ATTRIBUTE(tmp_expression_value_88, mod_consts[44]);
        if (tmp_called_value_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 143;

            goto try_except_handler_46;
        }
        tmp_tuple_element_61 = mod_consts[97];
        tmp_args_value_31 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_31, 0, tmp_tuple_element_61);
        CHECK_OBJECT(tmp_class_creation_16__bases);
        tmp_tuple_element_61 = tmp_class_creation_16__bases;
        PyTuple_SET_ITEM0(tmp_args_value_31, 1, tmp_tuple_element_61);
        CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
        tmp_kwargs_value_31 = tmp_class_creation_16__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 143;
        tmp_assign_source_131 = CALL_FUNCTION(tmp_called_value_31, tmp_args_value_31, tmp_kwargs_value_31);
        Py_DECREF(tmp_called_value_31);
        Py_DECREF(tmp_args_value_31);
        if (tmp_assign_source_131 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 143;

            goto try_except_handler_46;
        }
        assert(tmp_class_creation_16__prepared == NULL);
        tmp_class_creation_16__prepared = tmp_assign_source_131;
    }
    {
        bool tmp_condition_result_95;
        PyObject *tmp_operand_value_16;
        PyObject *tmp_expression_value_89;
        CHECK_OBJECT(tmp_class_creation_16__prepared);
        tmp_expression_value_89 = tmp_class_creation_16__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_89, mod_consts[46]);
        tmp_operand_value_16 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_16);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 143;

            goto try_except_handler_46;
        }
        tmp_condition_result_95 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_95 != false) {
            goto branch_yes_63;
        } else {
            goto branch_no_63;
        }
    }
    branch_yes_63:;
    {
        PyObject *tmp_raise_type_16;
        PyObject *tmp_raise_value_16;
        PyObject *tmp_left_value_16;
        PyObject *tmp_right_value_16;
        PyObject *tmp_tuple_element_62;
        PyObject *tmp_getattr_target_16;
        PyObject *tmp_getattr_attr_16;
        PyObject *tmp_getattr_default_16;
        tmp_raise_type_16 = PyExc_TypeError;
        tmp_left_value_16 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_16__metaclass);
        tmp_getattr_target_16 = tmp_class_creation_16__metaclass;
        tmp_getattr_attr_16 = mod_consts[48];
        tmp_getattr_default_16 = mod_consts[49];
        tmp_tuple_element_62 = BUILTIN_GETATTR(tmp_getattr_target_16, tmp_getattr_attr_16, tmp_getattr_default_16);
        if (tmp_tuple_element_62 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 143;

            goto try_except_handler_46;
        }
        tmp_right_value_16 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_90;
            PyObject *tmp_type_arg_32;
            PyTuple_SET_ITEM(tmp_right_value_16, 0, tmp_tuple_element_62);
            CHECK_OBJECT(tmp_class_creation_16__prepared);
            tmp_type_arg_32 = tmp_class_creation_16__prepared;
            tmp_expression_value_90 = BUILTIN_TYPE1(tmp_type_arg_32);
            assert(!(tmp_expression_value_90 == NULL));
            tmp_tuple_element_62 = LOOKUP_ATTRIBUTE(tmp_expression_value_90, mod_consts[48]);
            Py_DECREF(tmp_expression_value_90);
            if (tmp_tuple_element_62 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 143;

                goto tuple_build_exception_20;
            }
            PyTuple_SET_ITEM(tmp_right_value_16, 1, tmp_tuple_element_62);
        }
        goto tuple_build_noexception_20;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_20:;
        Py_DECREF(tmp_right_value_16);
        goto try_except_handler_46;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_20:;
        tmp_raise_value_16 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_16, tmp_right_value_16);
        Py_DECREF(tmp_right_value_16);
        if (tmp_raise_value_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 143;

            goto try_except_handler_46;
        }
        exception_type = tmp_raise_type_16;
        Py_INCREF(tmp_raise_type_16);
        exception_value = tmp_raise_value_16;
        exception_lineno = 143;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_46;
    }
    branch_no_63:;
    goto branch_end_62;
    branch_no_62:;
    {
        PyObject *tmp_assign_source_132;
        tmp_assign_source_132 = PyDict_New();
        assert(tmp_class_creation_16__prepared == NULL);
        tmp_class_creation_16__prepared = tmp_assign_source_132;
    }
    branch_end_62:;
    {
        PyObject *tmp_assign_source_133;
        {
            PyObject *tmp_set_locals_16;
            CHECK_OBJECT(tmp_class_creation_16__prepared);
            tmp_set_locals_16 = tmp_class_creation_16__prepared;
            locals_botocore$exceptions$$$class__16_CredentialRetrievalError_143 = tmp_set_locals_16;
            Py_INCREF(tmp_set_locals_16);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__16_CredentialRetrievalError_143, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 143;

            goto try_except_handler_48;
        }
        tmp_dictset_value = mod_consts[98];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__16_CredentialRetrievalError_143, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 143;

            goto try_except_handler_48;
        }
        tmp_dictset_value = mod_consts[97];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__16_CredentialRetrievalError_143, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 143;

            goto try_except_handler_48;
        }
        if (isFrameUnusable(cache_frame_cae30ac246abe2402fb8725f07a2b8a2_17)) {
            Py_XDECREF(cache_frame_cae30ac246abe2402fb8725f07a2b8a2_17);

#if _DEBUG_REFCOUNTS
            if (cache_frame_cae30ac246abe2402fb8725f07a2b8a2_17 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_cae30ac246abe2402fb8725f07a2b8a2_17 = MAKE_FUNCTION_FRAME(codeobj_cae30ac246abe2402fb8725f07a2b8a2, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_cae30ac246abe2402fb8725f07a2b8a2_17->m_type_description == NULL);
        frame_cae30ac246abe2402fb8725f07a2b8a2_17 = cache_frame_cae30ac246abe2402fb8725f07a2b8a2_17;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_cae30ac246abe2402fb8725f07a2b8a2_17);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_cae30ac246abe2402fb8725f07a2b8a2_17) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[99];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__16_CredentialRetrievalError_143, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 152;
            type_description_2 = "o";
            goto frame_exception_exit_17;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_cae30ac246abe2402fb8725f07a2b8a2_17);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_16;

        frame_exception_exit_17:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_cae30ac246abe2402fb8725f07a2b8a2_17);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_cae30ac246abe2402fb8725f07a2b8a2_17, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_cae30ac246abe2402fb8725f07a2b8a2_17->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_cae30ac246abe2402fb8725f07a2b8a2_17, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_cae30ac246abe2402fb8725f07a2b8a2_17,
            type_description_2,
            outline_15_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_cae30ac246abe2402fb8725f07a2b8a2_17 == cache_frame_cae30ac246abe2402fb8725f07a2b8a2_17) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_cae30ac246abe2402fb8725f07a2b8a2_17);
            cache_frame_cae30ac246abe2402fb8725f07a2b8a2_17 = NULL;
        }

        assertFrameObject(frame_cae30ac246abe2402fb8725f07a2b8a2_17);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_16;

        frame_no_exception_16:;
        goto skip_nested_handling_16;
        nested_frame_exit_16:;

        goto try_except_handler_48;
        skip_nested_handling_16:;
        {
            nuitka_bool tmp_condition_result_96;
            PyObject *tmp_cmp_expr_left_16;
            PyObject *tmp_cmp_expr_right_16;
            CHECK_OBJECT(tmp_class_creation_16__bases);
            tmp_cmp_expr_left_16 = tmp_class_creation_16__bases;
            CHECK_OBJECT(tmp_class_creation_16__bases_orig);
            tmp_cmp_expr_right_16 = tmp_class_creation_16__bases_orig;
            tmp_condition_result_96 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_16, tmp_cmp_expr_right_16);
            if (tmp_condition_result_96 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 143;

                goto try_except_handler_48;
            }
            if (tmp_condition_result_96 == NUITKA_BOOL_TRUE) {
                goto branch_yes_64;
            } else {
                goto branch_no_64;
            }
            assert(tmp_condition_result_96 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_64:;
        CHECK_OBJECT(tmp_class_creation_16__bases_orig);
        tmp_dictset_value = tmp_class_creation_16__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__16_CredentialRetrievalError_143, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 143;

            goto try_except_handler_48;
        }
        branch_no_64:;
        {
            PyObject *tmp_assign_source_134;
            PyObject *tmp_called_value_32;
            PyObject *tmp_args_value_32;
            PyObject *tmp_tuple_element_63;
            PyObject *tmp_kwargs_value_32;
            CHECK_OBJECT(tmp_class_creation_16__metaclass);
            tmp_called_value_32 = tmp_class_creation_16__metaclass;
            tmp_tuple_element_63 = mod_consts[97];
            tmp_args_value_32 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_32, 0, tmp_tuple_element_63);
            CHECK_OBJECT(tmp_class_creation_16__bases);
            tmp_tuple_element_63 = tmp_class_creation_16__bases;
            PyTuple_SET_ITEM0(tmp_args_value_32, 1, tmp_tuple_element_63);
            tmp_tuple_element_63 = locals_botocore$exceptions$$$class__16_CredentialRetrievalError_143;
            PyTuple_SET_ITEM0(tmp_args_value_32, 2, tmp_tuple_element_63);
            CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
            tmp_kwargs_value_32 = tmp_class_creation_16__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 143;
            tmp_assign_source_134 = CALL_FUNCTION(tmp_called_value_32, tmp_args_value_32, tmp_kwargs_value_32);
            Py_DECREF(tmp_args_value_32);
            if (tmp_assign_source_134 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 143;

                goto try_except_handler_48;
            }
            assert(outline_15_var___class__ == NULL);
            outline_15_var___class__ = tmp_assign_source_134;
        }
        CHECK_OBJECT(outline_15_var___class__);
        tmp_assign_source_133 = outline_15_var___class__;
        Py_INCREF(tmp_assign_source_133);
        goto try_return_handler_48;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_48:;
        Py_DECREF(locals_botocore$exceptions$$$class__16_CredentialRetrievalError_143);
        locals_botocore$exceptions$$$class__16_CredentialRetrievalError_143 = NULL;
        goto try_return_handler_47;
        // Exception handler code:
        try_except_handler_48:;
        exception_keeper_type_46 = exception_type;
        exception_keeper_value_46 = exception_value;
        exception_keeper_tb_46 = exception_tb;
        exception_keeper_lineno_46 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__16_CredentialRetrievalError_143);
        locals_botocore$exceptions$$$class__16_CredentialRetrievalError_143 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_46;
        exception_value = exception_keeper_value_46;
        exception_tb = exception_keeper_tb_46;
        exception_lineno = exception_keeper_lineno_46;

        goto try_except_handler_47;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_47:;
        CHECK_OBJECT(outline_15_var___class__);
        Py_DECREF(outline_15_var___class__);
        outline_15_var___class__ = NULL;
        goto outline_result_16;
        // Exception handler code:
        try_except_handler_47:;
        exception_keeper_type_47 = exception_type;
        exception_keeper_value_47 = exception_value;
        exception_keeper_tb_47 = exception_tb;
        exception_keeper_lineno_47 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_47;
        exception_value = exception_keeper_value_47;
        exception_tb = exception_keeper_tb_47;
        exception_lineno = exception_keeper_lineno_47;

        goto outline_exception_16;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_16:;
        exception_lineno = 143;
        goto try_except_handler_46;
        outline_result_16:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[97], tmp_assign_source_133);
    }
    goto try_end_16;
    // Exception handler code:
    try_except_handler_46:;
    exception_keeper_type_48 = exception_type;
    exception_keeper_value_48 = exception_value;
    exception_keeper_tb_48 = exception_tb;
    exception_keeper_lineno_48 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_16__bases_orig);
    tmp_class_creation_16__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_16__bases);
    tmp_class_creation_16__bases = NULL;
    Py_XDECREF(tmp_class_creation_16__class_decl_dict);
    tmp_class_creation_16__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_16__metaclass);
    tmp_class_creation_16__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_16__prepared);
    tmp_class_creation_16__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_48;
    exception_value = exception_keeper_value_48;
    exception_tb = exception_keeper_tb_48;
    exception_lineno = exception_keeper_lineno_48;

    goto frame_exception_exit_1;
    // End of try:
    try_end_16:;
    CHECK_OBJECT(tmp_class_creation_16__bases_orig);
    Py_DECREF(tmp_class_creation_16__bases_orig);
    tmp_class_creation_16__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_16__bases);
    Py_DECREF(tmp_class_creation_16__bases);
    tmp_class_creation_16__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
    Py_DECREF(tmp_class_creation_16__class_decl_dict);
    tmp_class_creation_16__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_16__metaclass);
    Py_DECREF(tmp_class_creation_16__metaclass);
    tmp_class_creation_16__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_16__prepared);
    Py_DECREF(tmp_class_creation_16__prepared);
    tmp_class_creation_16__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_135;
        PyObject *tmp_tuple_element_64;
        tmp_tuple_element_64 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_64 == NULL)) {
            tmp_tuple_element_64 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_64 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 155;

            goto try_except_handler_49;
        }
        tmp_assign_source_135 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_135, 0, tmp_tuple_element_64);
        assert(tmp_class_creation_17__bases_orig == NULL);
        tmp_class_creation_17__bases_orig = tmp_assign_source_135;
    }
    {
        PyObject *tmp_assign_source_136;
        PyObject *tmp_dircall_arg1_17;
        CHECK_OBJECT(tmp_class_creation_17__bases_orig);
        tmp_dircall_arg1_17 = tmp_class_creation_17__bases_orig;
        Py_INCREF(tmp_dircall_arg1_17);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_17};
            tmp_assign_source_136 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_136 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 155;

            goto try_except_handler_49;
        }
        assert(tmp_class_creation_17__bases == NULL);
        tmp_class_creation_17__bases = tmp_assign_source_136;
    }
    {
        PyObject *tmp_assign_source_137;
        tmp_assign_source_137 = PyDict_New();
        assert(tmp_class_creation_17__class_decl_dict == NULL);
        tmp_class_creation_17__class_decl_dict = tmp_assign_source_137;
    }
    {
        PyObject *tmp_assign_source_138;
        PyObject *tmp_metaclass_value_17;
        bool tmp_condition_result_97;
        PyObject *tmp_key_value_49;
        PyObject *tmp_dict_arg_value_49;
        PyObject *tmp_dict_arg_value_50;
        PyObject *tmp_key_value_50;
        nuitka_bool tmp_condition_result_98;
        int tmp_truth_name_17;
        PyObject *tmp_type_arg_33;
        PyObject *tmp_expression_value_91;
        PyObject *tmp_subscript_value_17;
        PyObject *tmp_bases_value_17;
        tmp_key_value_49 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
        tmp_dict_arg_value_49 = tmp_class_creation_17__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_49, tmp_key_value_49);
        assert(!(tmp_res == -1));
        tmp_condition_result_97 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_97 != false) {
            goto condexpr_true_33;
        } else {
            goto condexpr_false_33;
        }
        condexpr_true_33:;
        CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
        tmp_dict_arg_value_50 = tmp_class_creation_17__class_decl_dict;
        tmp_key_value_50 = mod_consts[43];
        tmp_metaclass_value_17 = DICT_GET_ITEM0(tmp_dict_arg_value_50, tmp_key_value_50);
        if (tmp_metaclass_value_17 == NULL) {
            tmp_metaclass_value_17 = Py_None;
        }
        assert(!(tmp_metaclass_value_17 == NULL));
        Py_INCREF(tmp_metaclass_value_17);
        goto condexpr_end_33;
        condexpr_false_33:;
        CHECK_OBJECT(tmp_class_creation_17__bases);
        tmp_truth_name_17 = CHECK_IF_TRUE(tmp_class_creation_17__bases);
        if (tmp_truth_name_17 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 155;

            goto try_except_handler_49;
        }
        tmp_condition_result_98 = tmp_truth_name_17 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_98 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_34;
        } else {
            goto condexpr_false_34;
        }
        condexpr_true_34:;
        CHECK_OBJECT(tmp_class_creation_17__bases);
        tmp_expression_value_91 = tmp_class_creation_17__bases;
        tmp_subscript_value_17 = mod_consts[36];
        tmp_type_arg_33 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_91, tmp_subscript_value_17, 0);
        if (tmp_type_arg_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 155;

            goto try_except_handler_49;
        }
        tmp_metaclass_value_17 = BUILTIN_TYPE1(tmp_type_arg_33);
        Py_DECREF(tmp_type_arg_33);
        if (tmp_metaclass_value_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 155;

            goto try_except_handler_49;
        }
        goto condexpr_end_34;
        condexpr_false_34:;
        tmp_metaclass_value_17 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_17);
        condexpr_end_34:;
        condexpr_end_33:;
        CHECK_OBJECT(tmp_class_creation_17__bases);
        tmp_bases_value_17 = tmp_class_creation_17__bases;
        tmp_assign_source_138 = SELECT_METACLASS(tmp_metaclass_value_17, tmp_bases_value_17);
        Py_DECREF(tmp_metaclass_value_17);
        if (tmp_assign_source_138 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 155;

            goto try_except_handler_49;
        }
        assert(tmp_class_creation_17__metaclass == NULL);
        tmp_class_creation_17__metaclass = tmp_assign_source_138;
    }
    {
        bool tmp_condition_result_99;
        PyObject *tmp_key_value_51;
        PyObject *tmp_dict_arg_value_51;
        tmp_key_value_51 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
        tmp_dict_arg_value_51 = tmp_class_creation_17__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_51, tmp_key_value_51);
        assert(!(tmp_res == -1));
        tmp_condition_result_99 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_99 != false) {
            goto branch_yes_65;
        } else {
            goto branch_no_65;
        }
    }
    branch_yes_65:;
    CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_17__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 155;

        goto try_except_handler_49;
    }
    branch_no_65:;
    {
        nuitka_bool tmp_condition_result_100;
        PyObject *tmp_expression_value_92;
        CHECK_OBJECT(tmp_class_creation_17__metaclass);
        tmp_expression_value_92 = tmp_class_creation_17__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_92, mod_consts[44]);
        tmp_condition_result_100 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_100 == NUITKA_BOOL_TRUE) {
            goto branch_yes_66;
        } else {
            goto branch_no_66;
        }
    }
    branch_yes_66:;
    {
        PyObject *tmp_assign_source_139;
        PyObject *tmp_called_value_33;
        PyObject *tmp_expression_value_93;
        PyObject *tmp_args_value_33;
        PyObject *tmp_tuple_element_65;
        PyObject *tmp_kwargs_value_33;
        CHECK_OBJECT(tmp_class_creation_17__metaclass);
        tmp_expression_value_93 = tmp_class_creation_17__metaclass;
        tmp_called_value_33 = LOOKUP_ATTRIBUTE(tmp_expression_value_93, mod_consts[44]);
        if (tmp_called_value_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 155;

            goto try_except_handler_49;
        }
        tmp_tuple_element_65 = mod_consts[100];
        tmp_args_value_33 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_33, 0, tmp_tuple_element_65);
        CHECK_OBJECT(tmp_class_creation_17__bases);
        tmp_tuple_element_65 = tmp_class_creation_17__bases;
        PyTuple_SET_ITEM0(tmp_args_value_33, 1, tmp_tuple_element_65);
        CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
        tmp_kwargs_value_33 = tmp_class_creation_17__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 155;
        tmp_assign_source_139 = CALL_FUNCTION(tmp_called_value_33, tmp_args_value_33, tmp_kwargs_value_33);
        Py_DECREF(tmp_called_value_33);
        Py_DECREF(tmp_args_value_33);
        if (tmp_assign_source_139 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 155;

            goto try_except_handler_49;
        }
        assert(tmp_class_creation_17__prepared == NULL);
        tmp_class_creation_17__prepared = tmp_assign_source_139;
    }
    {
        bool tmp_condition_result_101;
        PyObject *tmp_operand_value_17;
        PyObject *tmp_expression_value_94;
        CHECK_OBJECT(tmp_class_creation_17__prepared);
        tmp_expression_value_94 = tmp_class_creation_17__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_94, mod_consts[46]);
        tmp_operand_value_17 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_17);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 155;

            goto try_except_handler_49;
        }
        tmp_condition_result_101 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_101 != false) {
            goto branch_yes_67;
        } else {
            goto branch_no_67;
        }
    }
    branch_yes_67:;
    {
        PyObject *tmp_raise_type_17;
        PyObject *tmp_raise_value_17;
        PyObject *tmp_left_value_17;
        PyObject *tmp_right_value_17;
        PyObject *tmp_tuple_element_66;
        PyObject *tmp_getattr_target_17;
        PyObject *tmp_getattr_attr_17;
        PyObject *tmp_getattr_default_17;
        tmp_raise_type_17 = PyExc_TypeError;
        tmp_left_value_17 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_17__metaclass);
        tmp_getattr_target_17 = tmp_class_creation_17__metaclass;
        tmp_getattr_attr_17 = mod_consts[48];
        tmp_getattr_default_17 = mod_consts[49];
        tmp_tuple_element_66 = BUILTIN_GETATTR(tmp_getattr_target_17, tmp_getattr_attr_17, tmp_getattr_default_17);
        if (tmp_tuple_element_66 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 155;

            goto try_except_handler_49;
        }
        tmp_right_value_17 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_95;
            PyObject *tmp_type_arg_34;
            PyTuple_SET_ITEM(tmp_right_value_17, 0, tmp_tuple_element_66);
            CHECK_OBJECT(tmp_class_creation_17__prepared);
            tmp_type_arg_34 = tmp_class_creation_17__prepared;
            tmp_expression_value_95 = BUILTIN_TYPE1(tmp_type_arg_34);
            assert(!(tmp_expression_value_95 == NULL));
            tmp_tuple_element_66 = LOOKUP_ATTRIBUTE(tmp_expression_value_95, mod_consts[48]);
            Py_DECREF(tmp_expression_value_95);
            if (tmp_tuple_element_66 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 155;

                goto tuple_build_exception_21;
            }
            PyTuple_SET_ITEM(tmp_right_value_17, 1, tmp_tuple_element_66);
        }
        goto tuple_build_noexception_21;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_21:;
        Py_DECREF(tmp_right_value_17);
        goto try_except_handler_49;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_21:;
        tmp_raise_value_17 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_17, tmp_right_value_17);
        Py_DECREF(tmp_right_value_17);
        if (tmp_raise_value_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 155;

            goto try_except_handler_49;
        }
        exception_type = tmp_raise_type_17;
        Py_INCREF(tmp_raise_type_17);
        exception_value = tmp_raise_value_17;
        exception_lineno = 155;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_49;
    }
    branch_no_67:;
    goto branch_end_66;
    branch_no_66:;
    {
        PyObject *tmp_assign_source_140;
        tmp_assign_source_140 = PyDict_New();
        assert(tmp_class_creation_17__prepared == NULL);
        tmp_class_creation_17__prepared = tmp_assign_source_140;
    }
    branch_end_66:;
    {
        PyObject *tmp_assign_source_141;
        {
            PyObject *tmp_set_locals_17;
            CHECK_OBJECT(tmp_class_creation_17__prepared);
            tmp_set_locals_17 = tmp_class_creation_17__prepared;
            locals_botocore$exceptions$$$class__17_UnknownSignatureVersionError_155 = tmp_set_locals_17;
            Py_INCREF(tmp_set_locals_17);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__17_UnknownSignatureVersionError_155, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 155;

            goto try_except_handler_51;
        }
        tmp_dictset_value = mod_consts[101];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__17_UnknownSignatureVersionError_155, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 155;

            goto try_except_handler_51;
        }
        tmp_dictset_value = mod_consts[100];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__17_UnknownSignatureVersionError_155, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 155;

            goto try_except_handler_51;
        }
        if (isFrameUnusable(cache_frame_506aa82595a22b980b6416683315e6eb_18)) {
            Py_XDECREF(cache_frame_506aa82595a22b980b6416683315e6eb_18);

#if _DEBUG_REFCOUNTS
            if (cache_frame_506aa82595a22b980b6416683315e6eb_18 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_506aa82595a22b980b6416683315e6eb_18 = MAKE_FUNCTION_FRAME(codeobj_506aa82595a22b980b6416683315e6eb, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_506aa82595a22b980b6416683315e6eb_18->m_type_description == NULL);
        frame_506aa82595a22b980b6416683315e6eb_18 = cache_frame_506aa82595a22b980b6416683315e6eb_18;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_506aa82595a22b980b6416683315e6eb_18);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_506aa82595a22b980b6416683315e6eb_18) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[102];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__17_UnknownSignatureVersionError_155, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 161;
            type_description_2 = "o";
            goto frame_exception_exit_18;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_506aa82595a22b980b6416683315e6eb_18);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_17;

        frame_exception_exit_18:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_506aa82595a22b980b6416683315e6eb_18);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_506aa82595a22b980b6416683315e6eb_18, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_506aa82595a22b980b6416683315e6eb_18->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_506aa82595a22b980b6416683315e6eb_18, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_506aa82595a22b980b6416683315e6eb_18,
            type_description_2,
            outline_16_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_506aa82595a22b980b6416683315e6eb_18 == cache_frame_506aa82595a22b980b6416683315e6eb_18) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_506aa82595a22b980b6416683315e6eb_18);
            cache_frame_506aa82595a22b980b6416683315e6eb_18 = NULL;
        }

        assertFrameObject(frame_506aa82595a22b980b6416683315e6eb_18);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_17;

        frame_no_exception_17:;
        goto skip_nested_handling_17;
        nested_frame_exit_17:;

        goto try_except_handler_51;
        skip_nested_handling_17:;
        {
            nuitka_bool tmp_condition_result_102;
            PyObject *tmp_cmp_expr_left_17;
            PyObject *tmp_cmp_expr_right_17;
            CHECK_OBJECT(tmp_class_creation_17__bases);
            tmp_cmp_expr_left_17 = tmp_class_creation_17__bases;
            CHECK_OBJECT(tmp_class_creation_17__bases_orig);
            tmp_cmp_expr_right_17 = tmp_class_creation_17__bases_orig;
            tmp_condition_result_102 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_17, tmp_cmp_expr_right_17);
            if (tmp_condition_result_102 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 155;

                goto try_except_handler_51;
            }
            if (tmp_condition_result_102 == NUITKA_BOOL_TRUE) {
                goto branch_yes_68;
            } else {
                goto branch_no_68;
            }
            assert(tmp_condition_result_102 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_68:;
        CHECK_OBJECT(tmp_class_creation_17__bases_orig);
        tmp_dictset_value = tmp_class_creation_17__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__17_UnknownSignatureVersionError_155, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 155;

            goto try_except_handler_51;
        }
        branch_no_68:;
        {
            PyObject *tmp_assign_source_142;
            PyObject *tmp_called_value_34;
            PyObject *tmp_args_value_34;
            PyObject *tmp_tuple_element_67;
            PyObject *tmp_kwargs_value_34;
            CHECK_OBJECT(tmp_class_creation_17__metaclass);
            tmp_called_value_34 = tmp_class_creation_17__metaclass;
            tmp_tuple_element_67 = mod_consts[100];
            tmp_args_value_34 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_34, 0, tmp_tuple_element_67);
            CHECK_OBJECT(tmp_class_creation_17__bases);
            tmp_tuple_element_67 = tmp_class_creation_17__bases;
            PyTuple_SET_ITEM0(tmp_args_value_34, 1, tmp_tuple_element_67);
            tmp_tuple_element_67 = locals_botocore$exceptions$$$class__17_UnknownSignatureVersionError_155;
            PyTuple_SET_ITEM0(tmp_args_value_34, 2, tmp_tuple_element_67);
            CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
            tmp_kwargs_value_34 = tmp_class_creation_17__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 155;
            tmp_assign_source_142 = CALL_FUNCTION(tmp_called_value_34, tmp_args_value_34, tmp_kwargs_value_34);
            Py_DECREF(tmp_args_value_34);
            if (tmp_assign_source_142 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 155;

                goto try_except_handler_51;
            }
            assert(outline_16_var___class__ == NULL);
            outline_16_var___class__ = tmp_assign_source_142;
        }
        CHECK_OBJECT(outline_16_var___class__);
        tmp_assign_source_141 = outline_16_var___class__;
        Py_INCREF(tmp_assign_source_141);
        goto try_return_handler_51;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_51:;
        Py_DECREF(locals_botocore$exceptions$$$class__17_UnknownSignatureVersionError_155);
        locals_botocore$exceptions$$$class__17_UnknownSignatureVersionError_155 = NULL;
        goto try_return_handler_50;
        // Exception handler code:
        try_except_handler_51:;
        exception_keeper_type_49 = exception_type;
        exception_keeper_value_49 = exception_value;
        exception_keeper_tb_49 = exception_tb;
        exception_keeper_lineno_49 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__17_UnknownSignatureVersionError_155);
        locals_botocore$exceptions$$$class__17_UnknownSignatureVersionError_155 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_49;
        exception_value = exception_keeper_value_49;
        exception_tb = exception_keeper_tb_49;
        exception_lineno = exception_keeper_lineno_49;

        goto try_except_handler_50;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_50:;
        CHECK_OBJECT(outline_16_var___class__);
        Py_DECREF(outline_16_var___class__);
        outline_16_var___class__ = NULL;
        goto outline_result_17;
        // Exception handler code:
        try_except_handler_50:;
        exception_keeper_type_50 = exception_type;
        exception_keeper_value_50 = exception_value;
        exception_keeper_tb_50 = exception_tb;
        exception_keeper_lineno_50 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_50;
        exception_value = exception_keeper_value_50;
        exception_tb = exception_keeper_tb_50;
        exception_lineno = exception_keeper_lineno_50;

        goto outline_exception_17;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_17:;
        exception_lineno = 155;
        goto try_except_handler_49;
        outline_result_17:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[100], tmp_assign_source_141);
    }
    goto try_end_17;
    // Exception handler code:
    try_except_handler_49:;
    exception_keeper_type_51 = exception_type;
    exception_keeper_value_51 = exception_value;
    exception_keeper_tb_51 = exception_tb;
    exception_keeper_lineno_51 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_17__bases_orig);
    tmp_class_creation_17__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_17__bases);
    tmp_class_creation_17__bases = NULL;
    Py_XDECREF(tmp_class_creation_17__class_decl_dict);
    tmp_class_creation_17__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_17__metaclass);
    tmp_class_creation_17__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_17__prepared);
    tmp_class_creation_17__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_51;
    exception_value = exception_keeper_value_51;
    exception_tb = exception_keeper_tb_51;
    exception_lineno = exception_keeper_lineno_51;

    goto frame_exception_exit_1;
    // End of try:
    try_end_17:;
    CHECK_OBJECT(tmp_class_creation_17__bases_orig);
    Py_DECREF(tmp_class_creation_17__bases_orig);
    tmp_class_creation_17__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_17__bases);
    Py_DECREF(tmp_class_creation_17__bases);
    tmp_class_creation_17__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
    Py_DECREF(tmp_class_creation_17__class_decl_dict);
    tmp_class_creation_17__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_17__metaclass);
    Py_DECREF(tmp_class_creation_17__metaclass);
    tmp_class_creation_17__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_17__prepared);
    Py_DECREF(tmp_class_creation_17__prepared);
    tmp_class_creation_17__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_143;
        PyObject *tmp_tuple_element_68;
        tmp_tuple_element_68 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_68 == NULL)) {
            tmp_tuple_element_68 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_68 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 164;

            goto try_except_handler_52;
        }
        tmp_assign_source_143 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_143, 0, tmp_tuple_element_68);
        assert(tmp_class_creation_18__bases_orig == NULL);
        tmp_class_creation_18__bases_orig = tmp_assign_source_143;
    }
    {
        PyObject *tmp_assign_source_144;
        PyObject *tmp_dircall_arg1_18;
        CHECK_OBJECT(tmp_class_creation_18__bases_orig);
        tmp_dircall_arg1_18 = tmp_class_creation_18__bases_orig;
        Py_INCREF(tmp_dircall_arg1_18);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_18};
            tmp_assign_source_144 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_144 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 164;

            goto try_except_handler_52;
        }
        assert(tmp_class_creation_18__bases == NULL);
        tmp_class_creation_18__bases = tmp_assign_source_144;
    }
    {
        PyObject *tmp_assign_source_145;
        tmp_assign_source_145 = PyDict_New();
        assert(tmp_class_creation_18__class_decl_dict == NULL);
        tmp_class_creation_18__class_decl_dict = tmp_assign_source_145;
    }
    {
        PyObject *tmp_assign_source_146;
        PyObject *tmp_metaclass_value_18;
        bool tmp_condition_result_103;
        PyObject *tmp_key_value_52;
        PyObject *tmp_dict_arg_value_52;
        PyObject *tmp_dict_arg_value_53;
        PyObject *tmp_key_value_53;
        nuitka_bool tmp_condition_result_104;
        int tmp_truth_name_18;
        PyObject *tmp_type_arg_35;
        PyObject *tmp_expression_value_96;
        PyObject *tmp_subscript_value_18;
        PyObject *tmp_bases_value_18;
        tmp_key_value_52 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
        tmp_dict_arg_value_52 = tmp_class_creation_18__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_52, tmp_key_value_52);
        assert(!(tmp_res == -1));
        tmp_condition_result_103 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_103 != false) {
            goto condexpr_true_35;
        } else {
            goto condexpr_false_35;
        }
        condexpr_true_35:;
        CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
        tmp_dict_arg_value_53 = tmp_class_creation_18__class_decl_dict;
        tmp_key_value_53 = mod_consts[43];
        tmp_metaclass_value_18 = DICT_GET_ITEM0(tmp_dict_arg_value_53, tmp_key_value_53);
        if (tmp_metaclass_value_18 == NULL) {
            tmp_metaclass_value_18 = Py_None;
        }
        assert(!(tmp_metaclass_value_18 == NULL));
        Py_INCREF(tmp_metaclass_value_18);
        goto condexpr_end_35;
        condexpr_false_35:;
        CHECK_OBJECT(tmp_class_creation_18__bases);
        tmp_truth_name_18 = CHECK_IF_TRUE(tmp_class_creation_18__bases);
        if (tmp_truth_name_18 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 164;

            goto try_except_handler_52;
        }
        tmp_condition_result_104 = tmp_truth_name_18 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_104 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_36;
        } else {
            goto condexpr_false_36;
        }
        condexpr_true_36:;
        CHECK_OBJECT(tmp_class_creation_18__bases);
        tmp_expression_value_96 = tmp_class_creation_18__bases;
        tmp_subscript_value_18 = mod_consts[36];
        tmp_type_arg_35 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_96, tmp_subscript_value_18, 0);
        if (tmp_type_arg_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 164;

            goto try_except_handler_52;
        }
        tmp_metaclass_value_18 = BUILTIN_TYPE1(tmp_type_arg_35);
        Py_DECREF(tmp_type_arg_35);
        if (tmp_metaclass_value_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 164;

            goto try_except_handler_52;
        }
        goto condexpr_end_36;
        condexpr_false_36:;
        tmp_metaclass_value_18 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_18);
        condexpr_end_36:;
        condexpr_end_35:;
        CHECK_OBJECT(tmp_class_creation_18__bases);
        tmp_bases_value_18 = tmp_class_creation_18__bases;
        tmp_assign_source_146 = SELECT_METACLASS(tmp_metaclass_value_18, tmp_bases_value_18);
        Py_DECREF(tmp_metaclass_value_18);
        if (tmp_assign_source_146 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 164;

            goto try_except_handler_52;
        }
        assert(tmp_class_creation_18__metaclass == NULL);
        tmp_class_creation_18__metaclass = tmp_assign_source_146;
    }
    {
        bool tmp_condition_result_105;
        PyObject *tmp_key_value_54;
        PyObject *tmp_dict_arg_value_54;
        tmp_key_value_54 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
        tmp_dict_arg_value_54 = tmp_class_creation_18__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_54, tmp_key_value_54);
        assert(!(tmp_res == -1));
        tmp_condition_result_105 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_105 != false) {
            goto branch_yes_69;
        } else {
            goto branch_no_69;
        }
    }
    branch_yes_69:;
    CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_18__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 164;

        goto try_except_handler_52;
    }
    branch_no_69:;
    {
        nuitka_bool tmp_condition_result_106;
        PyObject *tmp_expression_value_97;
        CHECK_OBJECT(tmp_class_creation_18__metaclass);
        tmp_expression_value_97 = tmp_class_creation_18__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_97, mod_consts[44]);
        tmp_condition_result_106 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_106 == NUITKA_BOOL_TRUE) {
            goto branch_yes_70;
        } else {
            goto branch_no_70;
        }
    }
    branch_yes_70:;
    {
        PyObject *tmp_assign_source_147;
        PyObject *tmp_called_value_35;
        PyObject *tmp_expression_value_98;
        PyObject *tmp_args_value_35;
        PyObject *tmp_tuple_element_69;
        PyObject *tmp_kwargs_value_35;
        CHECK_OBJECT(tmp_class_creation_18__metaclass);
        tmp_expression_value_98 = tmp_class_creation_18__metaclass;
        tmp_called_value_35 = LOOKUP_ATTRIBUTE(tmp_expression_value_98, mod_consts[44]);
        if (tmp_called_value_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 164;

            goto try_except_handler_52;
        }
        tmp_tuple_element_69 = mod_consts[103];
        tmp_args_value_35 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_35, 0, tmp_tuple_element_69);
        CHECK_OBJECT(tmp_class_creation_18__bases);
        tmp_tuple_element_69 = tmp_class_creation_18__bases;
        PyTuple_SET_ITEM0(tmp_args_value_35, 1, tmp_tuple_element_69);
        CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
        tmp_kwargs_value_35 = tmp_class_creation_18__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 164;
        tmp_assign_source_147 = CALL_FUNCTION(tmp_called_value_35, tmp_args_value_35, tmp_kwargs_value_35);
        Py_DECREF(tmp_called_value_35);
        Py_DECREF(tmp_args_value_35);
        if (tmp_assign_source_147 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 164;

            goto try_except_handler_52;
        }
        assert(tmp_class_creation_18__prepared == NULL);
        tmp_class_creation_18__prepared = tmp_assign_source_147;
    }
    {
        bool tmp_condition_result_107;
        PyObject *tmp_operand_value_18;
        PyObject *tmp_expression_value_99;
        CHECK_OBJECT(tmp_class_creation_18__prepared);
        tmp_expression_value_99 = tmp_class_creation_18__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_99, mod_consts[46]);
        tmp_operand_value_18 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_18);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 164;

            goto try_except_handler_52;
        }
        tmp_condition_result_107 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_107 != false) {
            goto branch_yes_71;
        } else {
            goto branch_no_71;
        }
    }
    branch_yes_71:;
    {
        PyObject *tmp_raise_type_18;
        PyObject *tmp_raise_value_18;
        PyObject *tmp_left_value_18;
        PyObject *tmp_right_value_18;
        PyObject *tmp_tuple_element_70;
        PyObject *tmp_getattr_target_18;
        PyObject *tmp_getattr_attr_18;
        PyObject *tmp_getattr_default_18;
        tmp_raise_type_18 = PyExc_TypeError;
        tmp_left_value_18 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_18__metaclass);
        tmp_getattr_target_18 = tmp_class_creation_18__metaclass;
        tmp_getattr_attr_18 = mod_consts[48];
        tmp_getattr_default_18 = mod_consts[49];
        tmp_tuple_element_70 = BUILTIN_GETATTR(tmp_getattr_target_18, tmp_getattr_attr_18, tmp_getattr_default_18);
        if (tmp_tuple_element_70 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 164;

            goto try_except_handler_52;
        }
        tmp_right_value_18 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_100;
            PyObject *tmp_type_arg_36;
            PyTuple_SET_ITEM(tmp_right_value_18, 0, tmp_tuple_element_70);
            CHECK_OBJECT(tmp_class_creation_18__prepared);
            tmp_type_arg_36 = tmp_class_creation_18__prepared;
            tmp_expression_value_100 = BUILTIN_TYPE1(tmp_type_arg_36);
            assert(!(tmp_expression_value_100 == NULL));
            tmp_tuple_element_70 = LOOKUP_ATTRIBUTE(tmp_expression_value_100, mod_consts[48]);
            Py_DECREF(tmp_expression_value_100);
            if (tmp_tuple_element_70 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 164;

                goto tuple_build_exception_22;
            }
            PyTuple_SET_ITEM(tmp_right_value_18, 1, tmp_tuple_element_70);
        }
        goto tuple_build_noexception_22;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_22:;
        Py_DECREF(tmp_right_value_18);
        goto try_except_handler_52;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_22:;
        tmp_raise_value_18 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_18, tmp_right_value_18);
        Py_DECREF(tmp_right_value_18);
        if (tmp_raise_value_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 164;

            goto try_except_handler_52;
        }
        exception_type = tmp_raise_type_18;
        Py_INCREF(tmp_raise_type_18);
        exception_value = tmp_raise_value_18;
        exception_lineno = 164;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_52;
    }
    branch_no_71:;
    goto branch_end_70;
    branch_no_70:;
    {
        PyObject *tmp_assign_source_148;
        tmp_assign_source_148 = PyDict_New();
        assert(tmp_class_creation_18__prepared == NULL);
        tmp_class_creation_18__prepared = tmp_assign_source_148;
    }
    branch_end_70:;
    {
        PyObject *tmp_assign_source_149;
        {
            PyObject *tmp_set_locals_18;
            CHECK_OBJECT(tmp_class_creation_18__prepared);
            tmp_set_locals_18 = tmp_class_creation_18__prepared;
            locals_botocore$exceptions$$$class__18_ServiceNotInRegionError_164 = tmp_set_locals_18;
            Py_INCREF(tmp_set_locals_18);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__18_ServiceNotInRegionError_164, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 164;

            goto try_except_handler_54;
        }
        tmp_dictset_value = mod_consts[104];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__18_ServiceNotInRegionError_164, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 164;

            goto try_except_handler_54;
        }
        tmp_dictset_value = mod_consts[103];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__18_ServiceNotInRegionError_164, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 164;

            goto try_except_handler_54;
        }
        if (isFrameUnusable(cache_frame_ee4ca0ea30836de54d303548a4d69083_19)) {
            Py_XDECREF(cache_frame_ee4ca0ea30836de54d303548a4d69083_19);

#if _DEBUG_REFCOUNTS
            if (cache_frame_ee4ca0ea30836de54d303548a4d69083_19 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_ee4ca0ea30836de54d303548a4d69083_19 = MAKE_FUNCTION_FRAME(codeobj_ee4ca0ea30836de54d303548a4d69083, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_ee4ca0ea30836de54d303548a4d69083_19->m_type_description == NULL);
        frame_ee4ca0ea30836de54d303548a4d69083_19 = cache_frame_ee4ca0ea30836de54d303548a4d69083_19;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_ee4ca0ea30836de54d303548a4d69083_19);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_ee4ca0ea30836de54d303548a4d69083_19) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[105];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__18_ServiceNotInRegionError_164, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 171;
            type_description_2 = "o";
            goto frame_exception_exit_19;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_ee4ca0ea30836de54d303548a4d69083_19);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_18;

        frame_exception_exit_19:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_ee4ca0ea30836de54d303548a4d69083_19);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_ee4ca0ea30836de54d303548a4d69083_19, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_ee4ca0ea30836de54d303548a4d69083_19->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_ee4ca0ea30836de54d303548a4d69083_19, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_ee4ca0ea30836de54d303548a4d69083_19,
            type_description_2,
            outline_17_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_ee4ca0ea30836de54d303548a4d69083_19 == cache_frame_ee4ca0ea30836de54d303548a4d69083_19) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_ee4ca0ea30836de54d303548a4d69083_19);
            cache_frame_ee4ca0ea30836de54d303548a4d69083_19 = NULL;
        }

        assertFrameObject(frame_ee4ca0ea30836de54d303548a4d69083_19);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_18;

        frame_no_exception_18:;
        goto skip_nested_handling_18;
        nested_frame_exit_18:;

        goto try_except_handler_54;
        skip_nested_handling_18:;
        {
            nuitka_bool tmp_condition_result_108;
            PyObject *tmp_cmp_expr_left_18;
            PyObject *tmp_cmp_expr_right_18;
            CHECK_OBJECT(tmp_class_creation_18__bases);
            tmp_cmp_expr_left_18 = tmp_class_creation_18__bases;
            CHECK_OBJECT(tmp_class_creation_18__bases_orig);
            tmp_cmp_expr_right_18 = tmp_class_creation_18__bases_orig;
            tmp_condition_result_108 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_18, tmp_cmp_expr_right_18);
            if (tmp_condition_result_108 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 164;

                goto try_except_handler_54;
            }
            if (tmp_condition_result_108 == NUITKA_BOOL_TRUE) {
                goto branch_yes_72;
            } else {
                goto branch_no_72;
            }
            assert(tmp_condition_result_108 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_72:;
        CHECK_OBJECT(tmp_class_creation_18__bases_orig);
        tmp_dictset_value = tmp_class_creation_18__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__18_ServiceNotInRegionError_164, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 164;

            goto try_except_handler_54;
        }
        branch_no_72:;
        {
            PyObject *tmp_assign_source_150;
            PyObject *tmp_called_value_36;
            PyObject *tmp_args_value_36;
            PyObject *tmp_tuple_element_71;
            PyObject *tmp_kwargs_value_36;
            CHECK_OBJECT(tmp_class_creation_18__metaclass);
            tmp_called_value_36 = tmp_class_creation_18__metaclass;
            tmp_tuple_element_71 = mod_consts[103];
            tmp_args_value_36 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_36, 0, tmp_tuple_element_71);
            CHECK_OBJECT(tmp_class_creation_18__bases);
            tmp_tuple_element_71 = tmp_class_creation_18__bases;
            PyTuple_SET_ITEM0(tmp_args_value_36, 1, tmp_tuple_element_71);
            tmp_tuple_element_71 = locals_botocore$exceptions$$$class__18_ServiceNotInRegionError_164;
            PyTuple_SET_ITEM0(tmp_args_value_36, 2, tmp_tuple_element_71);
            CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
            tmp_kwargs_value_36 = tmp_class_creation_18__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 164;
            tmp_assign_source_150 = CALL_FUNCTION(tmp_called_value_36, tmp_args_value_36, tmp_kwargs_value_36);
            Py_DECREF(tmp_args_value_36);
            if (tmp_assign_source_150 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 164;

                goto try_except_handler_54;
            }
            assert(outline_17_var___class__ == NULL);
            outline_17_var___class__ = tmp_assign_source_150;
        }
        CHECK_OBJECT(outline_17_var___class__);
        tmp_assign_source_149 = outline_17_var___class__;
        Py_INCREF(tmp_assign_source_149);
        goto try_return_handler_54;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_54:;
        Py_DECREF(locals_botocore$exceptions$$$class__18_ServiceNotInRegionError_164);
        locals_botocore$exceptions$$$class__18_ServiceNotInRegionError_164 = NULL;
        goto try_return_handler_53;
        // Exception handler code:
        try_except_handler_54:;
        exception_keeper_type_52 = exception_type;
        exception_keeper_value_52 = exception_value;
        exception_keeper_tb_52 = exception_tb;
        exception_keeper_lineno_52 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__18_ServiceNotInRegionError_164);
        locals_botocore$exceptions$$$class__18_ServiceNotInRegionError_164 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_52;
        exception_value = exception_keeper_value_52;
        exception_tb = exception_keeper_tb_52;
        exception_lineno = exception_keeper_lineno_52;

        goto try_except_handler_53;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_53:;
        CHECK_OBJECT(outline_17_var___class__);
        Py_DECREF(outline_17_var___class__);
        outline_17_var___class__ = NULL;
        goto outline_result_18;
        // Exception handler code:
        try_except_handler_53:;
        exception_keeper_type_53 = exception_type;
        exception_keeper_value_53 = exception_value;
        exception_keeper_tb_53 = exception_tb;
        exception_keeper_lineno_53 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_53;
        exception_value = exception_keeper_value_53;
        exception_tb = exception_keeper_tb_53;
        exception_lineno = exception_keeper_lineno_53;

        goto outline_exception_18;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_18:;
        exception_lineno = 164;
        goto try_except_handler_52;
        outline_result_18:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[103], tmp_assign_source_149);
    }
    goto try_end_18;
    // Exception handler code:
    try_except_handler_52:;
    exception_keeper_type_54 = exception_type;
    exception_keeper_value_54 = exception_value;
    exception_keeper_tb_54 = exception_tb;
    exception_keeper_lineno_54 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_18__bases_orig);
    tmp_class_creation_18__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_18__bases);
    tmp_class_creation_18__bases = NULL;
    Py_XDECREF(tmp_class_creation_18__class_decl_dict);
    tmp_class_creation_18__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_18__metaclass);
    tmp_class_creation_18__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_18__prepared);
    tmp_class_creation_18__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_54;
    exception_value = exception_keeper_value_54;
    exception_tb = exception_keeper_tb_54;
    exception_lineno = exception_keeper_lineno_54;

    goto frame_exception_exit_1;
    // End of try:
    try_end_18:;
    CHECK_OBJECT(tmp_class_creation_18__bases_orig);
    Py_DECREF(tmp_class_creation_18__bases_orig);
    tmp_class_creation_18__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_18__bases);
    Py_DECREF(tmp_class_creation_18__bases);
    tmp_class_creation_18__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
    Py_DECREF(tmp_class_creation_18__class_decl_dict);
    tmp_class_creation_18__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_18__metaclass);
    Py_DECREF(tmp_class_creation_18__metaclass);
    tmp_class_creation_18__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_18__prepared);
    Py_DECREF(tmp_class_creation_18__prepared);
    tmp_class_creation_18__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_151;
        PyObject *tmp_tuple_element_72;
        tmp_tuple_element_72 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_72 == NULL)) {
            tmp_tuple_element_72 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_72 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 174;

            goto try_except_handler_55;
        }
        tmp_assign_source_151 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_151, 0, tmp_tuple_element_72);
        assert(tmp_class_creation_19__bases_orig == NULL);
        tmp_class_creation_19__bases_orig = tmp_assign_source_151;
    }
    {
        PyObject *tmp_assign_source_152;
        PyObject *tmp_dircall_arg1_19;
        CHECK_OBJECT(tmp_class_creation_19__bases_orig);
        tmp_dircall_arg1_19 = tmp_class_creation_19__bases_orig;
        Py_INCREF(tmp_dircall_arg1_19);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_19};
            tmp_assign_source_152 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_152 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 174;

            goto try_except_handler_55;
        }
        assert(tmp_class_creation_19__bases == NULL);
        tmp_class_creation_19__bases = tmp_assign_source_152;
    }
    {
        PyObject *tmp_assign_source_153;
        tmp_assign_source_153 = PyDict_New();
        assert(tmp_class_creation_19__class_decl_dict == NULL);
        tmp_class_creation_19__class_decl_dict = tmp_assign_source_153;
    }
    {
        PyObject *tmp_assign_source_154;
        PyObject *tmp_metaclass_value_19;
        bool tmp_condition_result_109;
        PyObject *tmp_key_value_55;
        PyObject *tmp_dict_arg_value_55;
        PyObject *tmp_dict_arg_value_56;
        PyObject *tmp_key_value_56;
        nuitka_bool tmp_condition_result_110;
        int tmp_truth_name_19;
        PyObject *tmp_type_arg_37;
        PyObject *tmp_expression_value_101;
        PyObject *tmp_subscript_value_19;
        PyObject *tmp_bases_value_19;
        tmp_key_value_55 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
        tmp_dict_arg_value_55 = tmp_class_creation_19__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_55, tmp_key_value_55);
        assert(!(tmp_res == -1));
        tmp_condition_result_109 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_109 != false) {
            goto condexpr_true_37;
        } else {
            goto condexpr_false_37;
        }
        condexpr_true_37:;
        CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
        tmp_dict_arg_value_56 = tmp_class_creation_19__class_decl_dict;
        tmp_key_value_56 = mod_consts[43];
        tmp_metaclass_value_19 = DICT_GET_ITEM0(tmp_dict_arg_value_56, tmp_key_value_56);
        if (tmp_metaclass_value_19 == NULL) {
            tmp_metaclass_value_19 = Py_None;
        }
        assert(!(tmp_metaclass_value_19 == NULL));
        Py_INCREF(tmp_metaclass_value_19);
        goto condexpr_end_37;
        condexpr_false_37:;
        CHECK_OBJECT(tmp_class_creation_19__bases);
        tmp_truth_name_19 = CHECK_IF_TRUE(tmp_class_creation_19__bases);
        if (tmp_truth_name_19 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 174;

            goto try_except_handler_55;
        }
        tmp_condition_result_110 = tmp_truth_name_19 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_110 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_38;
        } else {
            goto condexpr_false_38;
        }
        condexpr_true_38:;
        CHECK_OBJECT(tmp_class_creation_19__bases);
        tmp_expression_value_101 = tmp_class_creation_19__bases;
        tmp_subscript_value_19 = mod_consts[36];
        tmp_type_arg_37 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_101, tmp_subscript_value_19, 0);
        if (tmp_type_arg_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 174;

            goto try_except_handler_55;
        }
        tmp_metaclass_value_19 = BUILTIN_TYPE1(tmp_type_arg_37);
        Py_DECREF(tmp_type_arg_37);
        if (tmp_metaclass_value_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 174;

            goto try_except_handler_55;
        }
        goto condexpr_end_38;
        condexpr_false_38:;
        tmp_metaclass_value_19 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_19);
        condexpr_end_38:;
        condexpr_end_37:;
        CHECK_OBJECT(tmp_class_creation_19__bases);
        tmp_bases_value_19 = tmp_class_creation_19__bases;
        tmp_assign_source_154 = SELECT_METACLASS(tmp_metaclass_value_19, tmp_bases_value_19);
        Py_DECREF(tmp_metaclass_value_19);
        if (tmp_assign_source_154 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 174;

            goto try_except_handler_55;
        }
        assert(tmp_class_creation_19__metaclass == NULL);
        tmp_class_creation_19__metaclass = tmp_assign_source_154;
    }
    {
        bool tmp_condition_result_111;
        PyObject *tmp_key_value_57;
        PyObject *tmp_dict_arg_value_57;
        tmp_key_value_57 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
        tmp_dict_arg_value_57 = tmp_class_creation_19__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_57, tmp_key_value_57);
        assert(!(tmp_res == -1));
        tmp_condition_result_111 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_111 != false) {
            goto branch_yes_73;
        } else {
            goto branch_no_73;
        }
    }
    branch_yes_73:;
    CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_19__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 174;

        goto try_except_handler_55;
    }
    branch_no_73:;
    {
        nuitka_bool tmp_condition_result_112;
        PyObject *tmp_expression_value_102;
        CHECK_OBJECT(tmp_class_creation_19__metaclass);
        tmp_expression_value_102 = tmp_class_creation_19__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_102, mod_consts[44]);
        tmp_condition_result_112 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_112 == NUITKA_BOOL_TRUE) {
            goto branch_yes_74;
        } else {
            goto branch_no_74;
        }
    }
    branch_yes_74:;
    {
        PyObject *tmp_assign_source_155;
        PyObject *tmp_called_value_37;
        PyObject *tmp_expression_value_103;
        PyObject *tmp_args_value_37;
        PyObject *tmp_tuple_element_73;
        PyObject *tmp_kwargs_value_37;
        CHECK_OBJECT(tmp_class_creation_19__metaclass);
        tmp_expression_value_103 = tmp_class_creation_19__metaclass;
        tmp_called_value_37 = LOOKUP_ATTRIBUTE(tmp_expression_value_103, mod_consts[44]);
        if (tmp_called_value_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 174;

            goto try_except_handler_55;
        }
        tmp_tuple_element_73 = mod_consts[106];
        tmp_args_value_37 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_37, 0, tmp_tuple_element_73);
        CHECK_OBJECT(tmp_class_creation_19__bases);
        tmp_tuple_element_73 = tmp_class_creation_19__bases;
        PyTuple_SET_ITEM0(tmp_args_value_37, 1, tmp_tuple_element_73);
        CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
        tmp_kwargs_value_37 = tmp_class_creation_19__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 174;
        tmp_assign_source_155 = CALL_FUNCTION(tmp_called_value_37, tmp_args_value_37, tmp_kwargs_value_37);
        Py_DECREF(tmp_called_value_37);
        Py_DECREF(tmp_args_value_37);
        if (tmp_assign_source_155 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 174;

            goto try_except_handler_55;
        }
        assert(tmp_class_creation_19__prepared == NULL);
        tmp_class_creation_19__prepared = tmp_assign_source_155;
    }
    {
        bool tmp_condition_result_113;
        PyObject *tmp_operand_value_19;
        PyObject *tmp_expression_value_104;
        CHECK_OBJECT(tmp_class_creation_19__prepared);
        tmp_expression_value_104 = tmp_class_creation_19__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_104, mod_consts[46]);
        tmp_operand_value_19 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_19);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 174;

            goto try_except_handler_55;
        }
        tmp_condition_result_113 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_113 != false) {
            goto branch_yes_75;
        } else {
            goto branch_no_75;
        }
    }
    branch_yes_75:;
    {
        PyObject *tmp_raise_type_19;
        PyObject *tmp_raise_value_19;
        PyObject *tmp_left_value_19;
        PyObject *tmp_right_value_19;
        PyObject *tmp_tuple_element_74;
        PyObject *tmp_getattr_target_19;
        PyObject *tmp_getattr_attr_19;
        PyObject *tmp_getattr_default_19;
        tmp_raise_type_19 = PyExc_TypeError;
        tmp_left_value_19 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_19__metaclass);
        tmp_getattr_target_19 = tmp_class_creation_19__metaclass;
        tmp_getattr_attr_19 = mod_consts[48];
        tmp_getattr_default_19 = mod_consts[49];
        tmp_tuple_element_74 = BUILTIN_GETATTR(tmp_getattr_target_19, tmp_getattr_attr_19, tmp_getattr_default_19);
        if (tmp_tuple_element_74 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 174;

            goto try_except_handler_55;
        }
        tmp_right_value_19 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_105;
            PyObject *tmp_type_arg_38;
            PyTuple_SET_ITEM(tmp_right_value_19, 0, tmp_tuple_element_74);
            CHECK_OBJECT(tmp_class_creation_19__prepared);
            tmp_type_arg_38 = tmp_class_creation_19__prepared;
            tmp_expression_value_105 = BUILTIN_TYPE1(tmp_type_arg_38);
            assert(!(tmp_expression_value_105 == NULL));
            tmp_tuple_element_74 = LOOKUP_ATTRIBUTE(tmp_expression_value_105, mod_consts[48]);
            Py_DECREF(tmp_expression_value_105);
            if (tmp_tuple_element_74 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 174;

                goto tuple_build_exception_23;
            }
            PyTuple_SET_ITEM(tmp_right_value_19, 1, tmp_tuple_element_74);
        }
        goto tuple_build_noexception_23;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_23:;
        Py_DECREF(tmp_right_value_19);
        goto try_except_handler_55;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_23:;
        tmp_raise_value_19 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_19, tmp_right_value_19);
        Py_DECREF(tmp_right_value_19);
        if (tmp_raise_value_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 174;

            goto try_except_handler_55;
        }
        exception_type = tmp_raise_type_19;
        Py_INCREF(tmp_raise_type_19);
        exception_value = tmp_raise_value_19;
        exception_lineno = 174;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_55;
    }
    branch_no_75:;
    goto branch_end_74;
    branch_no_74:;
    {
        PyObject *tmp_assign_source_156;
        tmp_assign_source_156 = PyDict_New();
        assert(tmp_class_creation_19__prepared == NULL);
        tmp_class_creation_19__prepared = tmp_assign_source_156;
    }
    branch_end_74:;
    {
        PyObject *tmp_assign_source_157;
        {
            PyObject *tmp_set_locals_19;
            CHECK_OBJECT(tmp_class_creation_19__prepared);
            tmp_set_locals_19 = tmp_class_creation_19__prepared;
            locals_botocore$exceptions$$$class__19_BaseEndpointResolverError_174 = tmp_set_locals_19;
            Py_INCREF(tmp_set_locals_19);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__19_BaseEndpointResolverError_174, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 174;

            goto try_except_handler_57;
        }
        tmp_dictset_value = mod_consts[107];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__19_BaseEndpointResolverError_174, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 174;

            goto try_except_handler_57;
        }
        tmp_dictset_value = mod_consts[106];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__19_BaseEndpointResolverError_174, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 174;

            goto try_except_handler_57;
        }
        {
            nuitka_bool tmp_condition_result_114;
            PyObject *tmp_cmp_expr_left_19;
            PyObject *tmp_cmp_expr_right_19;
            CHECK_OBJECT(tmp_class_creation_19__bases);
            tmp_cmp_expr_left_19 = tmp_class_creation_19__bases;
            CHECK_OBJECT(tmp_class_creation_19__bases_orig);
            tmp_cmp_expr_right_19 = tmp_class_creation_19__bases_orig;
            tmp_condition_result_114 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_19, tmp_cmp_expr_right_19);
            if (tmp_condition_result_114 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 174;

                goto try_except_handler_57;
            }
            if (tmp_condition_result_114 == NUITKA_BOOL_TRUE) {
                goto branch_yes_76;
            } else {
                goto branch_no_76;
            }
            assert(tmp_condition_result_114 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_76:;
        CHECK_OBJECT(tmp_class_creation_19__bases_orig);
        tmp_dictset_value = tmp_class_creation_19__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__19_BaseEndpointResolverError_174, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 174;

            goto try_except_handler_57;
        }
        branch_no_76:;
        {
            PyObject *tmp_assign_source_158;
            PyObject *tmp_called_value_38;
            PyObject *tmp_args_value_38;
            PyObject *tmp_tuple_element_75;
            PyObject *tmp_kwargs_value_38;
            CHECK_OBJECT(tmp_class_creation_19__metaclass);
            tmp_called_value_38 = tmp_class_creation_19__metaclass;
            tmp_tuple_element_75 = mod_consts[106];
            tmp_args_value_38 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_38, 0, tmp_tuple_element_75);
            CHECK_OBJECT(tmp_class_creation_19__bases);
            tmp_tuple_element_75 = tmp_class_creation_19__bases;
            PyTuple_SET_ITEM0(tmp_args_value_38, 1, tmp_tuple_element_75);
            tmp_tuple_element_75 = locals_botocore$exceptions$$$class__19_BaseEndpointResolverError_174;
            PyTuple_SET_ITEM0(tmp_args_value_38, 2, tmp_tuple_element_75);
            CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
            tmp_kwargs_value_38 = tmp_class_creation_19__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 174;
            tmp_assign_source_158 = CALL_FUNCTION(tmp_called_value_38, tmp_args_value_38, tmp_kwargs_value_38);
            Py_DECREF(tmp_args_value_38);
            if (tmp_assign_source_158 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 174;

                goto try_except_handler_57;
            }
            assert(outline_18_var___class__ == NULL);
            outline_18_var___class__ = tmp_assign_source_158;
        }
        CHECK_OBJECT(outline_18_var___class__);
        tmp_assign_source_157 = outline_18_var___class__;
        Py_INCREF(tmp_assign_source_157);
        goto try_return_handler_57;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_57:;
        Py_DECREF(locals_botocore$exceptions$$$class__19_BaseEndpointResolverError_174);
        locals_botocore$exceptions$$$class__19_BaseEndpointResolverError_174 = NULL;
        goto try_return_handler_56;
        // Exception handler code:
        try_except_handler_57:;
        exception_keeper_type_55 = exception_type;
        exception_keeper_value_55 = exception_value;
        exception_keeper_tb_55 = exception_tb;
        exception_keeper_lineno_55 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__19_BaseEndpointResolverError_174);
        locals_botocore$exceptions$$$class__19_BaseEndpointResolverError_174 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_55;
        exception_value = exception_keeper_value_55;
        exception_tb = exception_keeper_tb_55;
        exception_lineno = exception_keeper_lineno_55;

        goto try_except_handler_56;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_56:;
        CHECK_OBJECT(outline_18_var___class__);
        Py_DECREF(outline_18_var___class__);
        outline_18_var___class__ = NULL;
        goto outline_result_19;
        // Exception handler code:
        try_except_handler_56:;
        exception_keeper_type_56 = exception_type;
        exception_keeper_value_56 = exception_value;
        exception_keeper_tb_56 = exception_tb;
        exception_keeper_lineno_56 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_56;
        exception_value = exception_keeper_value_56;
        exception_tb = exception_keeper_tb_56;
        exception_lineno = exception_keeper_lineno_56;

        goto outline_exception_19;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_19:;
        exception_lineno = 174;
        goto try_except_handler_55;
        outline_result_19:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[106], tmp_assign_source_157);
    }
    goto try_end_19;
    // Exception handler code:
    try_except_handler_55:;
    exception_keeper_type_57 = exception_type;
    exception_keeper_value_57 = exception_value;
    exception_keeper_tb_57 = exception_tb;
    exception_keeper_lineno_57 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_19__bases_orig);
    tmp_class_creation_19__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_19__bases);
    tmp_class_creation_19__bases = NULL;
    Py_XDECREF(tmp_class_creation_19__class_decl_dict);
    tmp_class_creation_19__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_19__metaclass);
    tmp_class_creation_19__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_19__prepared);
    tmp_class_creation_19__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_57;
    exception_value = exception_keeper_value_57;
    exception_tb = exception_keeper_tb_57;
    exception_lineno = exception_keeper_lineno_57;

    goto frame_exception_exit_1;
    // End of try:
    try_end_19:;
    CHECK_OBJECT(tmp_class_creation_19__bases_orig);
    Py_DECREF(tmp_class_creation_19__bases_orig);
    tmp_class_creation_19__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_19__bases);
    Py_DECREF(tmp_class_creation_19__bases);
    tmp_class_creation_19__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
    Py_DECREF(tmp_class_creation_19__class_decl_dict);
    tmp_class_creation_19__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_19__metaclass);
    Py_DECREF(tmp_class_creation_19__metaclass);
    tmp_class_creation_19__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_19__prepared);
    Py_DECREF(tmp_class_creation_19__prepared);
    tmp_class_creation_19__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_159;
        PyObject *tmp_tuple_element_76;
        tmp_tuple_element_76 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[106]);

        if (unlikely(tmp_tuple_element_76 == NULL)) {
            tmp_tuple_element_76 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[106]);
        }

        if (tmp_tuple_element_76 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 184;

            goto try_except_handler_58;
        }
        tmp_assign_source_159 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_159, 0, tmp_tuple_element_76);
        assert(tmp_class_creation_20__bases_orig == NULL);
        tmp_class_creation_20__bases_orig = tmp_assign_source_159;
    }
    {
        PyObject *tmp_assign_source_160;
        PyObject *tmp_dircall_arg1_20;
        CHECK_OBJECT(tmp_class_creation_20__bases_orig);
        tmp_dircall_arg1_20 = tmp_class_creation_20__bases_orig;
        Py_INCREF(tmp_dircall_arg1_20);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_20};
            tmp_assign_source_160 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_160 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 184;

            goto try_except_handler_58;
        }
        assert(tmp_class_creation_20__bases == NULL);
        tmp_class_creation_20__bases = tmp_assign_source_160;
    }
    {
        PyObject *tmp_assign_source_161;
        tmp_assign_source_161 = PyDict_New();
        assert(tmp_class_creation_20__class_decl_dict == NULL);
        tmp_class_creation_20__class_decl_dict = tmp_assign_source_161;
    }
    {
        PyObject *tmp_assign_source_162;
        PyObject *tmp_metaclass_value_20;
        bool tmp_condition_result_115;
        PyObject *tmp_key_value_58;
        PyObject *tmp_dict_arg_value_58;
        PyObject *tmp_dict_arg_value_59;
        PyObject *tmp_key_value_59;
        nuitka_bool tmp_condition_result_116;
        int tmp_truth_name_20;
        PyObject *tmp_type_arg_39;
        PyObject *tmp_expression_value_106;
        PyObject *tmp_subscript_value_20;
        PyObject *tmp_bases_value_20;
        tmp_key_value_58 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
        tmp_dict_arg_value_58 = tmp_class_creation_20__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_58, tmp_key_value_58);
        assert(!(tmp_res == -1));
        tmp_condition_result_115 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_115 != false) {
            goto condexpr_true_39;
        } else {
            goto condexpr_false_39;
        }
        condexpr_true_39:;
        CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
        tmp_dict_arg_value_59 = tmp_class_creation_20__class_decl_dict;
        tmp_key_value_59 = mod_consts[43];
        tmp_metaclass_value_20 = DICT_GET_ITEM0(tmp_dict_arg_value_59, tmp_key_value_59);
        if (tmp_metaclass_value_20 == NULL) {
            tmp_metaclass_value_20 = Py_None;
        }
        assert(!(tmp_metaclass_value_20 == NULL));
        Py_INCREF(tmp_metaclass_value_20);
        goto condexpr_end_39;
        condexpr_false_39:;
        CHECK_OBJECT(tmp_class_creation_20__bases);
        tmp_truth_name_20 = CHECK_IF_TRUE(tmp_class_creation_20__bases);
        if (tmp_truth_name_20 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 184;

            goto try_except_handler_58;
        }
        tmp_condition_result_116 = tmp_truth_name_20 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_116 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_40;
        } else {
            goto condexpr_false_40;
        }
        condexpr_true_40:;
        CHECK_OBJECT(tmp_class_creation_20__bases);
        tmp_expression_value_106 = tmp_class_creation_20__bases;
        tmp_subscript_value_20 = mod_consts[36];
        tmp_type_arg_39 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_106, tmp_subscript_value_20, 0);
        if (tmp_type_arg_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 184;

            goto try_except_handler_58;
        }
        tmp_metaclass_value_20 = BUILTIN_TYPE1(tmp_type_arg_39);
        Py_DECREF(tmp_type_arg_39);
        if (tmp_metaclass_value_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 184;

            goto try_except_handler_58;
        }
        goto condexpr_end_40;
        condexpr_false_40:;
        tmp_metaclass_value_20 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_20);
        condexpr_end_40:;
        condexpr_end_39:;
        CHECK_OBJECT(tmp_class_creation_20__bases);
        tmp_bases_value_20 = tmp_class_creation_20__bases;
        tmp_assign_source_162 = SELECT_METACLASS(tmp_metaclass_value_20, tmp_bases_value_20);
        Py_DECREF(tmp_metaclass_value_20);
        if (tmp_assign_source_162 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 184;

            goto try_except_handler_58;
        }
        assert(tmp_class_creation_20__metaclass == NULL);
        tmp_class_creation_20__metaclass = tmp_assign_source_162;
    }
    {
        bool tmp_condition_result_117;
        PyObject *tmp_key_value_60;
        PyObject *tmp_dict_arg_value_60;
        tmp_key_value_60 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
        tmp_dict_arg_value_60 = tmp_class_creation_20__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_60, tmp_key_value_60);
        assert(!(tmp_res == -1));
        tmp_condition_result_117 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_117 != false) {
            goto branch_yes_77;
        } else {
            goto branch_no_77;
        }
    }
    branch_yes_77:;
    CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_20__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 184;

        goto try_except_handler_58;
    }
    branch_no_77:;
    {
        nuitka_bool tmp_condition_result_118;
        PyObject *tmp_expression_value_107;
        CHECK_OBJECT(tmp_class_creation_20__metaclass);
        tmp_expression_value_107 = tmp_class_creation_20__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_107, mod_consts[44]);
        tmp_condition_result_118 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_118 == NUITKA_BOOL_TRUE) {
            goto branch_yes_78;
        } else {
            goto branch_no_78;
        }
    }
    branch_yes_78:;
    {
        PyObject *tmp_assign_source_163;
        PyObject *tmp_called_value_39;
        PyObject *tmp_expression_value_108;
        PyObject *tmp_args_value_39;
        PyObject *tmp_tuple_element_77;
        PyObject *tmp_kwargs_value_39;
        CHECK_OBJECT(tmp_class_creation_20__metaclass);
        tmp_expression_value_108 = tmp_class_creation_20__metaclass;
        tmp_called_value_39 = LOOKUP_ATTRIBUTE(tmp_expression_value_108, mod_consts[44]);
        if (tmp_called_value_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 184;

            goto try_except_handler_58;
        }
        tmp_tuple_element_77 = mod_consts[108];
        tmp_args_value_39 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_39, 0, tmp_tuple_element_77);
        CHECK_OBJECT(tmp_class_creation_20__bases);
        tmp_tuple_element_77 = tmp_class_creation_20__bases;
        PyTuple_SET_ITEM0(tmp_args_value_39, 1, tmp_tuple_element_77);
        CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
        tmp_kwargs_value_39 = tmp_class_creation_20__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 184;
        tmp_assign_source_163 = CALL_FUNCTION(tmp_called_value_39, tmp_args_value_39, tmp_kwargs_value_39);
        Py_DECREF(tmp_called_value_39);
        Py_DECREF(tmp_args_value_39);
        if (tmp_assign_source_163 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 184;

            goto try_except_handler_58;
        }
        assert(tmp_class_creation_20__prepared == NULL);
        tmp_class_creation_20__prepared = tmp_assign_source_163;
    }
    {
        bool tmp_condition_result_119;
        PyObject *tmp_operand_value_20;
        PyObject *tmp_expression_value_109;
        CHECK_OBJECT(tmp_class_creation_20__prepared);
        tmp_expression_value_109 = tmp_class_creation_20__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_109, mod_consts[46]);
        tmp_operand_value_20 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_20);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 184;

            goto try_except_handler_58;
        }
        tmp_condition_result_119 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_119 != false) {
            goto branch_yes_79;
        } else {
            goto branch_no_79;
        }
    }
    branch_yes_79:;
    {
        PyObject *tmp_raise_type_20;
        PyObject *tmp_raise_value_20;
        PyObject *tmp_left_value_20;
        PyObject *tmp_right_value_20;
        PyObject *tmp_tuple_element_78;
        PyObject *tmp_getattr_target_20;
        PyObject *tmp_getattr_attr_20;
        PyObject *tmp_getattr_default_20;
        tmp_raise_type_20 = PyExc_TypeError;
        tmp_left_value_20 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_20__metaclass);
        tmp_getattr_target_20 = tmp_class_creation_20__metaclass;
        tmp_getattr_attr_20 = mod_consts[48];
        tmp_getattr_default_20 = mod_consts[49];
        tmp_tuple_element_78 = BUILTIN_GETATTR(tmp_getattr_target_20, tmp_getattr_attr_20, tmp_getattr_default_20);
        if (tmp_tuple_element_78 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 184;

            goto try_except_handler_58;
        }
        tmp_right_value_20 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_110;
            PyObject *tmp_type_arg_40;
            PyTuple_SET_ITEM(tmp_right_value_20, 0, tmp_tuple_element_78);
            CHECK_OBJECT(tmp_class_creation_20__prepared);
            tmp_type_arg_40 = tmp_class_creation_20__prepared;
            tmp_expression_value_110 = BUILTIN_TYPE1(tmp_type_arg_40);
            assert(!(tmp_expression_value_110 == NULL));
            tmp_tuple_element_78 = LOOKUP_ATTRIBUTE(tmp_expression_value_110, mod_consts[48]);
            Py_DECREF(tmp_expression_value_110);
            if (tmp_tuple_element_78 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 184;

                goto tuple_build_exception_24;
            }
            PyTuple_SET_ITEM(tmp_right_value_20, 1, tmp_tuple_element_78);
        }
        goto tuple_build_noexception_24;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_24:;
        Py_DECREF(tmp_right_value_20);
        goto try_except_handler_58;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_24:;
        tmp_raise_value_20 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_20, tmp_right_value_20);
        Py_DECREF(tmp_right_value_20);
        if (tmp_raise_value_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 184;

            goto try_except_handler_58;
        }
        exception_type = tmp_raise_type_20;
        Py_INCREF(tmp_raise_type_20);
        exception_value = tmp_raise_value_20;
        exception_lineno = 184;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_58;
    }
    branch_no_79:;
    goto branch_end_78;
    branch_no_78:;
    {
        PyObject *tmp_assign_source_164;
        tmp_assign_source_164 = PyDict_New();
        assert(tmp_class_creation_20__prepared == NULL);
        tmp_class_creation_20__prepared = tmp_assign_source_164;
    }
    branch_end_78:;
    {
        PyObject *tmp_assign_source_165;
        {
            PyObject *tmp_set_locals_20;
            CHECK_OBJECT(tmp_class_creation_20__prepared);
            tmp_set_locals_20 = tmp_class_creation_20__prepared;
            locals_botocore$exceptions$$$class__20_NoRegionError_184 = tmp_set_locals_20;
            Py_INCREF(tmp_set_locals_20);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__20_NoRegionError_184, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 184;

            goto try_except_handler_60;
        }
        tmp_dictset_value = mod_consts[109];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__20_NoRegionError_184, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 184;

            goto try_except_handler_60;
        }
        tmp_dictset_value = mod_consts[108];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__20_NoRegionError_184, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 184;

            goto try_except_handler_60;
        }
        if (isFrameUnusable(cache_frame_a6e77d896ff602bfdecf11f0c85c65bb_20)) {
            Py_XDECREF(cache_frame_a6e77d896ff602bfdecf11f0c85c65bb_20);

#if _DEBUG_REFCOUNTS
            if (cache_frame_a6e77d896ff602bfdecf11f0c85c65bb_20 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_a6e77d896ff602bfdecf11f0c85c65bb_20 = MAKE_FUNCTION_FRAME(codeobj_a6e77d896ff602bfdecf11f0c85c65bb, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_a6e77d896ff602bfdecf11f0c85c65bb_20->m_type_description == NULL);
        frame_a6e77d896ff602bfdecf11f0c85c65bb_20 = cache_frame_a6e77d896ff602bfdecf11f0c85c65bb_20;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_a6e77d896ff602bfdecf11f0c85c65bb_20);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_a6e77d896ff602bfdecf11f0c85c65bb_20) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[110];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__20_NoRegionError_184, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 186;
            type_description_2 = "o";
            goto frame_exception_exit_20;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a6e77d896ff602bfdecf11f0c85c65bb_20);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_19;

        frame_exception_exit_20:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a6e77d896ff602bfdecf11f0c85c65bb_20);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_a6e77d896ff602bfdecf11f0c85c65bb_20, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_a6e77d896ff602bfdecf11f0c85c65bb_20->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_a6e77d896ff602bfdecf11f0c85c65bb_20, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_a6e77d896ff602bfdecf11f0c85c65bb_20,
            type_description_2,
            outline_19_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_a6e77d896ff602bfdecf11f0c85c65bb_20 == cache_frame_a6e77d896ff602bfdecf11f0c85c65bb_20) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_a6e77d896ff602bfdecf11f0c85c65bb_20);
            cache_frame_a6e77d896ff602bfdecf11f0c85c65bb_20 = NULL;
        }

        assertFrameObject(frame_a6e77d896ff602bfdecf11f0c85c65bb_20);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_19;

        frame_no_exception_19:;
        goto skip_nested_handling_19;
        nested_frame_exit_19:;

        goto try_except_handler_60;
        skip_nested_handling_19:;
        {
            nuitka_bool tmp_condition_result_120;
            PyObject *tmp_cmp_expr_left_20;
            PyObject *tmp_cmp_expr_right_20;
            CHECK_OBJECT(tmp_class_creation_20__bases);
            tmp_cmp_expr_left_20 = tmp_class_creation_20__bases;
            CHECK_OBJECT(tmp_class_creation_20__bases_orig);
            tmp_cmp_expr_right_20 = tmp_class_creation_20__bases_orig;
            tmp_condition_result_120 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_20, tmp_cmp_expr_right_20);
            if (tmp_condition_result_120 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 184;

                goto try_except_handler_60;
            }
            if (tmp_condition_result_120 == NUITKA_BOOL_TRUE) {
                goto branch_yes_80;
            } else {
                goto branch_no_80;
            }
            assert(tmp_condition_result_120 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_80:;
        CHECK_OBJECT(tmp_class_creation_20__bases_orig);
        tmp_dictset_value = tmp_class_creation_20__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__20_NoRegionError_184, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 184;

            goto try_except_handler_60;
        }
        branch_no_80:;
        {
            PyObject *tmp_assign_source_166;
            PyObject *tmp_called_value_40;
            PyObject *tmp_args_value_40;
            PyObject *tmp_tuple_element_79;
            PyObject *tmp_kwargs_value_40;
            CHECK_OBJECT(tmp_class_creation_20__metaclass);
            tmp_called_value_40 = tmp_class_creation_20__metaclass;
            tmp_tuple_element_79 = mod_consts[108];
            tmp_args_value_40 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_40, 0, tmp_tuple_element_79);
            CHECK_OBJECT(tmp_class_creation_20__bases);
            tmp_tuple_element_79 = tmp_class_creation_20__bases;
            PyTuple_SET_ITEM0(tmp_args_value_40, 1, tmp_tuple_element_79);
            tmp_tuple_element_79 = locals_botocore$exceptions$$$class__20_NoRegionError_184;
            PyTuple_SET_ITEM0(tmp_args_value_40, 2, tmp_tuple_element_79);
            CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
            tmp_kwargs_value_40 = tmp_class_creation_20__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 184;
            tmp_assign_source_166 = CALL_FUNCTION(tmp_called_value_40, tmp_args_value_40, tmp_kwargs_value_40);
            Py_DECREF(tmp_args_value_40);
            if (tmp_assign_source_166 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 184;

                goto try_except_handler_60;
            }
            assert(outline_19_var___class__ == NULL);
            outline_19_var___class__ = tmp_assign_source_166;
        }
        CHECK_OBJECT(outline_19_var___class__);
        tmp_assign_source_165 = outline_19_var___class__;
        Py_INCREF(tmp_assign_source_165);
        goto try_return_handler_60;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_60:;
        Py_DECREF(locals_botocore$exceptions$$$class__20_NoRegionError_184);
        locals_botocore$exceptions$$$class__20_NoRegionError_184 = NULL;
        goto try_return_handler_59;
        // Exception handler code:
        try_except_handler_60:;
        exception_keeper_type_58 = exception_type;
        exception_keeper_value_58 = exception_value;
        exception_keeper_tb_58 = exception_tb;
        exception_keeper_lineno_58 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__20_NoRegionError_184);
        locals_botocore$exceptions$$$class__20_NoRegionError_184 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_58;
        exception_value = exception_keeper_value_58;
        exception_tb = exception_keeper_tb_58;
        exception_lineno = exception_keeper_lineno_58;

        goto try_except_handler_59;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_59:;
        CHECK_OBJECT(outline_19_var___class__);
        Py_DECREF(outline_19_var___class__);
        outline_19_var___class__ = NULL;
        goto outline_result_20;
        // Exception handler code:
        try_except_handler_59:;
        exception_keeper_type_59 = exception_type;
        exception_keeper_value_59 = exception_value;
        exception_keeper_tb_59 = exception_tb;
        exception_keeper_lineno_59 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_59;
        exception_value = exception_keeper_value_59;
        exception_tb = exception_keeper_tb_59;
        exception_lineno = exception_keeper_lineno_59;

        goto outline_exception_20;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_20:;
        exception_lineno = 184;
        goto try_except_handler_58;
        outline_result_20:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[108], tmp_assign_source_165);
    }
    goto try_end_20;
    // Exception handler code:
    try_except_handler_58:;
    exception_keeper_type_60 = exception_type;
    exception_keeper_value_60 = exception_value;
    exception_keeper_tb_60 = exception_tb;
    exception_keeper_lineno_60 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_20__bases_orig);
    tmp_class_creation_20__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_20__bases);
    tmp_class_creation_20__bases = NULL;
    Py_XDECREF(tmp_class_creation_20__class_decl_dict);
    tmp_class_creation_20__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_20__metaclass);
    tmp_class_creation_20__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_20__prepared);
    tmp_class_creation_20__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_60;
    exception_value = exception_keeper_value_60;
    exception_tb = exception_keeper_tb_60;
    exception_lineno = exception_keeper_lineno_60;

    goto frame_exception_exit_1;
    // End of try:
    try_end_20:;
    CHECK_OBJECT(tmp_class_creation_20__bases_orig);
    Py_DECREF(tmp_class_creation_20__bases_orig);
    tmp_class_creation_20__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_20__bases);
    Py_DECREF(tmp_class_creation_20__bases);
    tmp_class_creation_20__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
    Py_DECREF(tmp_class_creation_20__class_decl_dict);
    tmp_class_creation_20__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_20__metaclass);
    Py_DECREF(tmp_class_creation_20__metaclass);
    tmp_class_creation_20__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_20__prepared);
    Py_DECREF(tmp_class_creation_20__prepared);
    tmp_class_creation_20__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_167;
        PyObject *tmp_tuple_element_80;
        tmp_tuple_element_80 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[106]);

        if (unlikely(tmp_tuple_element_80 == NULL)) {
            tmp_tuple_element_80 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[106]);
        }

        if (tmp_tuple_element_80 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 189;

            goto try_except_handler_61;
        }
        tmp_assign_source_167 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_assign_source_167, 0, tmp_tuple_element_80);
        tmp_tuple_element_80 = PyExc_ValueError;
        PyTuple_SET_ITEM0(tmp_assign_source_167, 1, tmp_tuple_element_80);
        assert(tmp_class_creation_21__bases_orig == NULL);
        tmp_class_creation_21__bases_orig = tmp_assign_source_167;
    }
    {
        PyObject *tmp_assign_source_168;
        PyObject *tmp_dircall_arg1_21;
        CHECK_OBJECT(tmp_class_creation_21__bases_orig);
        tmp_dircall_arg1_21 = tmp_class_creation_21__bases_orig;
        Py_INCREF(tmp_dircall_arg1_21);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_21};
            tmp_assign_source_168 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_168 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 189;

            goto try_except_handler_61;
        }
        assert(tmp_class_creation_21__bases == NULL);
        tmp_class_creation_21__bases = tmp_assign_source_168;
    }
    {
        PyObject *tmp_assign_source_169;
        tmp_assign_source_169 = PyDict_New();
        assert(tmp_class_creation_21__class_decl_dict == NULL);
        tmp_class_creation_21__class_decl_dict = tmp_assign_source_169;
    }
    {
        PyObject *tmp_assign_source_170;
        PyObject *tmp_metaclass_value_21;
        bool tmp_condition_result_121;
        PyObject *tmp_key_value_61;
        PyObject *tmp_dict_arg_value_61;
        PyObject *tmp_dict_arg_value_62;
        PyObject *tmp_key_value_62;
        nuitka_bool tmp_condition_result_122;
        int tmp_truth_name_21;
        PyObject *tmp_type_arg_41;
        PyObject *tmp_expression_value_111;
        PyObject *tmp_subscript_value_21;
        PyObject *tmp_bases_value_21;
        tmp_key_value_61 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
        tmp_dict_arg_value_61 = tmp_class_creation_21__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_61, tmp_key_value_61);
        assert(!(tmp_res == -1));
        tmp_condition_result_121 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_121 != false) {
            goto condexpr_true_41;
        } else {
            goto condexpr_false_41;
        }
        condexpr_true_41:;
        CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
        tmp_dict_arg_value_62 = tmp_class_creation_21__class_decl_dict;
        tmp_key_value_62 = mod_consts[43];
        tmp_metaclass_value_21 = DICT_GET_ITEM0(tmp_dict_arg_value_62, tmp_key_value_62);
        if (tmp_metaclass_value_21 == NULL) {
            tmp_metaclass_value_21 = Py_None;
        }
        assert(!(tmp_metaclass_value_21 == NULL));
        Py_INCREF(tmp_metaclass_value_21);
        goto condexpr_end_41;
        condexpr_false_41:;
        CHECK_OBJECT(tmp_class_creation_21__bases);
        tmp_truth_name_21 = CHECK_IF_TRUE(tmp_class_creation_21__bases);
        if (tmp_truth_name_21 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 189;

            goto try_except_handler_61;
        }
        tmp_condition_result_122 = tmp_truth_name_21 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_122 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_42;
        } else {
            goto condexpr_false_42;
        }
        condexpr_true_42:;
        CHECK_OBJECT(tmp_class_creation_21__bases);
        tmp_expression_value_111 = tmp_class_creation_21__bases;
        tmp_subscript_value_21 = mod_consts[36];
        tmp_type_arg_41 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_111, tmp_subscript_value_21, 0);
        if (tmp_type_arg_41 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 189;

            goto try_except_handler_61;
        }
        tmp_metaclass_value_21 = BUILTIN_TYPE1(tmp_type_arg_41);
        Py_DECREF(tmp_type_arg_41);
        if (tmp_metaclass_value_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 189;

            goto try_except_handler_61;
        }
        goto condexpr_end_42;
        condexpr_false_42:;
        tmp_metaclass_value_21 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_21);
        condexpr_end_42:;
        condexpr_end_41:;
        CHECK_OBJECT(tmp_class_creation_21__bases);
        tmp_bases_value_21 = tmp_class_creation_21__bases;
        tmp_assign_source_170 = SELECT_METACLASS(tmp_metaclass_value_21, tmp_bases_value_21);
        Py_DECREF(tmp_metaclass_value_21);
        if (tmp_assign_source_170 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 189;

            goto try_except_handler_61;
        }
        assert(tmp_class_creation_21__metaclass == NULL);
        tmp_class_creation_21__metaclass = tmp_assign_source_170;
    }
    {
        bool tmp_condition_result_123;
        PyObject *tmp_key_value_63;
        PyObject *tmp_dict_arg_value_63;
        tmp_key_value_63 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
        tmp_dict_arg_value_63 = tmp_class_creation_21__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_63, tmp_key_value_63);
        assert(!(tmp_res == -1));
        tmp_condition_result_123 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_123 != false) {
            goto branch_yes_81;
        } else {
            goto branch_no_81;
        }
    }
    branch_yes_81:;
    CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_21__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 189;

        goto try_except_handler_61;
    }
    branch_no_81:;
    {
        nuitka_bool tmp_condition_result_124;
        PyObject *tmp_expression_value_112;
        CHECK_OBJECT(tmp_class_creation_21__metaclass);
        tmp_expression_value_112 = tmp_class_creation_21__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_112, mod_consts[44]);
        tmp_condition_result_124 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_124 == NUITKA_BOOL_TRUE) {
            goto branch_yes_82;
        } else {
            goto branch_no_82;
        }
    }
    branch_yes_82:;
    {
        PyObject *tmp_assign_source_171;
        PyObject *tmp_called_value_41;
        PyObject *tmp_expression_value_113;
        PyObject *tmp_args_value_41;
        PyObject *tmp_tuple_element_81;
        PyObject *tmp_kwargs_value_41;
        CHECK_OBJECT(tmp_class_creation_21__metaclass);
        tmp_expression_value_113 = tmp_class_creation_21__metaclass;
        tmp_called_value_41 = LOOKUP_ATTRIBUTE(tmp_expression_value_113, mod_consts[44]);
        if (tmp_called_value_41 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 189;

            goto try_except_handler_61;
        }
        tmp_tuple_element_81 = mod_consts[111];
        tmp_args_value_41 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_41, 0, tmp_tuple_element_81);
        CHECK_OBJECT(tmp_class_creation_21__bases);
        tmp_tuple_element_81 = tmp_class_creation_21__bases;
        PyTuple_SET_ITEM0(tmp_args_value_41, 1, tmp_tuple_element_81);
        CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
        tmp_kwargs_value_41 = tmp_class_creation_21__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 189;
        tmp_assign_source_171 = CALL_FUNCTION(tmp_called_value_41, tmp_args_value_41, tmp_kwargs_value_41);
        Py_DECREF(tmp_called_value_41);
        Py_DECREF(tmp_args_value_41);
        if (tmp_assign_source_171 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 189;

            goto try_except_handler_61;
        }
        assert(tmp_class_creation_21__prepared == NULL);
        tmp_class_creation_21__prepared = tmp_assign_source_171;
    }
    {
        bool tmp_condition_result_125;
        PyObject *tmp_operand_value_21;
        PyObject *tmp_expression_value_114;
        CHECK_OBJECT(tmp_class_creation_21__prepared);
        tmp_expression_value_114 = tmp_class_creation_21__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_114, mod_consts[46]);
        tmp_operand_value_21 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_21);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 189;

            goto try_except_handler_61;
        }
        tmp_condition_result_125 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_125 != false) {
            goto branch_yes_83;
        } else {
            goto branch_no_83;
        }
    }
    branch_yes_83:;
    {
        PyObject *tmp_raise_type_21;
        PyObject *tmp_raise_value_21;
        PyObject *tmp_left_value_21;
        PyObject *tmp_right_value_21;
        PyObject *tmp_tuple_element_82;
        PyObject *tmp_getattr_target_21;
        PyObject *tmp_getattr_attr_21;
        PyObject *tmp_getattr_default_21;
        tmp_raise_type_21 = PyExc_TypeError;
        tmp_left_value_21 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_21__metaclass);
        tmp_getattr_target_21 = tmp_class_creation_21__metaclass;
        tmp_getattr_attr_21 = mod_consts[48];
        tmp_getattr_default_21 = mod_consts[49];
        tmp_tuple_element_82 = BUILTIN_GETATTR(tmp_getattr_target_21, tmp_getattr_attr_21, tmp_getattr_default_21);
        if (tmp_tuple_element_82 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 189;

            goto try_except_handler_61;
        }
        tmp_right_value_21 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_115;
            PyObject *tmp_type_arg_42;
            PyTuple_SET_ITEM(tmp_right_value_21, 0, tmp_tuple_element_82);
            CHECK_OBJECT(tmp_class_creation_21__prepared);
            tmp_type_arg_42 = tmp_class_creation_21__prepared;
            tmp_expression_value_115 = BUILTIN_TYPE1(tmp_type_arg_42);
            assert(!(tmp_expression_value_115 == NULL));
            tmp_tuple_element_82 = LOOKUP_ATTRIBUTE(tmp_expression_value_115, mod_consts[48]);
            Py_DECREF(tmp_expression_value_115);
            if (tmp_tuple_element_82 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 189;

                goto tuple_build_exception_25;
            }
            PyTuple_SET_ITEM(tmp_right_value_21, 1, tmp_tuple_element_82);
        }
        goto tuple_build_noexception_25;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_25:;
        Py_DECREF(tmp_right_value_21);
        goto try_except_handler_61;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_25:;
        tmp_raise_value_21 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_21, tmp_right_value_21);
        Py_DECREF(tmp_right_value_21);
        if (tmp_raise_value_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 189;

            goto try_except_handler_61;
        }
        exception_type = tmp_raise_type_21;
        Py_INCREF(tmp_raise_type_21);
        exception_value = tmp_raise_value_21;
        exception_lineno = 189;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_61;
    }
    branch_no_83:;
    goto branch_end_82;
    branch_no_82:;
    {
        PyObject *tmp_assign_source_172;
        tmp_assign_source_172 = PyDict_New();
        assert(tmp_class_creation_21__prepared == NULL);
        tmp_class_creation_21__prepared = tmp_assign_source_172;
    }
    branch_end_82:;
    {
        PyObject *tmp_assign_source_173;
        {
            PyObject *tmp_set_locals_21;
            CHECK_OBJECT(tmp_class_creation_21__prepared);
            tmp_set_locals_21 = tmp_class_creation_21__prepared;
            locals_botocore$exceptions$$$class__21_UnknownEndpointError_189 = tmp_set_locals_21;
            Py_INCREF(tmp_set_locals_21);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__21_UnknownEndpointError_189, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 189;

            goto try_except_handler_63;
        }
        tmp_dictset_value = mod_consts[112];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__21_UnknownEndpointError_189, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 189;

            goto try_except_handler_63;
        }
        tmp_dictset_value = mod_consts[111];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__21_UnknownEndpointError_189, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 189;

            goto try_except_handler_63;
        }
        if (isFrameUnusable(cache_frame_2331c9ecdced23e8130a4fb9a500fd55_21)) {
            Py_XDECREF(cache_frame_2331c9ecdced23e8130a4fb9a500fd55_21);

#if _DEBUG_REFCOUNTS
            if (cache_frame_2331c9ecdced23e8130a4fb9a500fd55_21 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_2331c9ecdced23e8130a4fb9a500fd55_21 = MAKE_FUNCTION_FRAME(codeobj_2331c9ecdced23e8130a4fb9a500fd55, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_2331c9ecdced23e8130a4fb9a500fd55_21->m_type_description == NULL);
        frame_2331c9ecdced23e8130a4fb9a500fd55_21 = cache_frame_2331c9ecdced23e8130a4fb9a500fd55_21;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_2331c9ecdced23e8130a4fb9a500fd55_21);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_2331c9ecdced23e8130a4fb9a500fd55_21) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[113];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__21_UnknownEndpointError_189, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 196;
            type_description_2 = "o";
            goto frame_exception_exit_21;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_2331c9ecdced23e8130a4fb9a500fd55_21);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_20;

        frame_exception_exit_21:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_2331c9ecdced23e8130a4fb9a500fd55_21);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_2331c9ecdced23e8130a4fb9a500fd55_21, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_2331c9ecdced23e8130a4fb9a500fd55_21->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_2331c9ecdced23e8130a4fb9a500fd55_21, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_2331c9ecdced23e8130a4fb9a500fd55_21,
            type_description_2,
            outline_20_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_2331c9ecdced23e8130a4fb9a500fd55_21 == cache_frame_2331c9ecdced23e8130a4fb9a500fd55_21) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_2331c9ecdced23e8130a4fb9a500fd55_21);
            cache_frame_2331c9ecdced23e8130a4fb9a500fd55_21 = NULL;
        }

        assertFrameObject(frame_2331c9ecdced23e8130a4fb9a500fd55_21);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_20;

        frame_no_exception_20:;
        goto skip_nested_handling_20;
        nested_frame_exit_20:;

        goto try_except_handler_63;
        skip_nested_handling_20:;
        {
            nuitka_bool tmp_condition_result_126;
            PyObject *tmp_cmp_expr_left_21;
            PyObject *tmp_cmp_expr_right_21;
            CHECK_OBJECT(tmp_class_creation_21__bases);
            tmp_cmp_expr_left_21 = tmp_class_creation_21__bases;
            CHECK_OBJECT(tmp_class_creation_21__bases_orig);
            tmp_cmp_expr_right_21 = tmp_class_creation_21__bases_orig;
            tmp_condition_result_126 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_21, tmp_cmp_expr_right_21);
            if (tmp_condition_result_126 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 189;

                goto try_except_handler_63;
            }
            if (tmp_condition_result_126 == NUITKA_BOOL_TRUE) {
                goto branch_yes_84;
            } else {
                goto branch_no_84;
            }
            assert(tmp_condition_result_126 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_84:;
        CHECK_OBJECT(tmp_class_creation_21__bases_orig);
        tmp_dictset_value = tmp_class_creation_21__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__21_UnknownEndpointError_189, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 189;

            goto try_except_handler_63;
        }
        branch_no_84:;
        {
            PyObject *tmp_assign_source_174;
            PyObject *tmp_called_value_42;
            PyObject *tmp_args_value_42;
            PyObject *tmp_tuple_element_83;
            PyObject *tmp_kwargs_value_42;
            CHECK_OBJECT(tmp_class_creation_21__metaclass);
            tmp_called_value_42 = tmp_class_creation_21__metaclass;
            tmp_tuple_element_83 = mod_consts[111];
            tmp_args_value_42 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_42, 0, tmp_tuple_element_83);
            CHECK_OBJECT(tmp_class_creation_21__bases);
            tmp_tuple_element_83 = tmp_class_creation_21__bases;
            PyTuple_SET_ITEM0(tmp_args_value_42, 1, tmp_tuple_element_83);
            tmp_tuple_element_83 = locals_botocore$exceptions$$$class__21_UnknownEndpointError_189;
            PyTuple_SET_ITEM0(tmp_args_value_42, 2, tmp_tuple_element_83);
            CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
            tmp_kwargs_value_42 = tmp_class_creation_21__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 189;
            tmp_assign_source_174 = CALL_FUNCTION(tmp_called_value_42, tmp_args_value_42, tmp_kwargs_value_42);
            Py_DECREF(tmp_args_value_42);
            if (tmp_assign_source_174 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 189;

                goto try_except_handler_63;
            }
            assert(outline_20_var___class__ == NULL);
            outline_20_var___class__ = tmp_assign_source_174;
        }
        CHECK_OBJECT(outline_20_var___class__);
        tmp_assign_source_173 = outline_20_var___class__;
        Py_INCREF(tmp_assign_source_173);
        goto try_return_handler_63;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_63:;
        Py_DECREF(locals_botocore$exceptions$$$class__21_UnknownEndpointError_189);
        locals_botocore$exceptions$$$class__21_UnknownEndpointError_189 = NULL;
        goto try_return_handler_62;
        // Exception handler code:
        try_except_handler_63:;
        exception_keeper_type_61 = exception_type;
        exception_keeper_value_61 = exception_value;
        exception_keeper_tb_61 = exception_tb;
        exception_keeper_lineno_61 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__21_UnknownEndpointError_189);
        locals_botocore$exceptions$$$class__21_UnknownEndpointError_189 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_61;
        exception_value = exception_keeper_value_61;
        exception_tb = exception_keeper_tb_61;
        exception_lineno = exception_keeper_lineno_61;

        goto try_except_handler_62;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_62:;
        CHECK_OBJECT(outline_20_var___class__);
        Py_DECREF(outline_20_var___class__);
        outline_20_var___class__ = NULL;
        goto outline_result_21;
        // Exception handler code:
        try_except_handler_62:;
        exception_keeper_type_62 = exception_type;
        exception_keeper_value_62 = exception_value;
        exception_keeper_tb_62 = exception_tb;
        exception_keeper_lineno_62 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_62;
        exception_value = exception_keeper_value_62;
        exception_tb = exception_keeper_tb_62;
        exception_lineno = exception_keeper_lineno_62;

        goto outline_exception_21;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_21:;
        exception_lineno = 189;
        goto try_except_handler_61;
        outline_result_21:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[111], tmp_assign_source_173);
    }
    goto try_end_21;
    // Exception handler code:
    try_except_handler_61:;
    exception_keeper_type_63 = exception_type;
    exception_keeper_value_63 = exception_value;
    exception_keeper_tb_63 = exception_tb;
    exception_keeper_lineno_63 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_21__bases_orig);
    tmp_class_creation_21__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_21__bases);
    tmp_class_creation_21__bases = NULL;
    Py_XDECREF(tmp_class_creation_21__class_decl_dict);
    tmp_class_creation_21__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_21__metaclass);
    tmp_class_creation_21__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_21__prepared);
    tmp_class_creation_21__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_63;
    exception_value = exception_keeper_value_63;
    exception_tb = exception_keeper_tb_63;
    exception_lineno = exception_keeper_lineno_63;

    goto frame_exception_exit_1;
    // End of try:
    try_end_21:;
    CHECK_OBJECT(tmp_class_creation_21__bases_orig);
    Py_DECREF(tmp_class_creation_21__bases_orig);
    tmp_class_creation_21__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_21__bases);
    Py_DECREF(tmp_class_creation_21__bases);
    tmp_class_creation_21__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
    Py_DECREF(tmp_class_creation_21__class_decl_dict);
    tmp_class_creation_21__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_21__metaclass);
    Py_DECREF(tmp_class_creation_21__metaclass);
    tmp_class_creation_21__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_21__prepared);
    Py_DECREF(tmp_class_creation_21__prepared);
    tmp_class_creation_21__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_175;
        PyObject *tmp_tuple_element_84;
        tmp_tuple_element_84 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_84 == NULL)) {
            tmp_tuple_element_84 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_84 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_64;
        }
        tmp_assign_source_175 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_175, 0, tmp_tuple_element_84);
        assert(tmp_class_creation_22__bases_orig == NULL);
        tmp_class_creation_22__bases_orig = tmp_assign_source_175;
    }
    {
        PyObject *tmp_assign_source_176;
        PyObject *tmp_dircall_arg1_22;
        CHECK_OBJECT(tmp_class_creation_22__bases_orig);
        tmp_dircall_arg1_22 = tmp_class_creation_22__bases_orig;
        Py_INCREF(tmp_dircall_arg1_22);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_22};
            tmp_assign_source_176 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_176 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_64;
        }
        assert(tmp_class_creation_22__bases == NULL);
        tmp_class_creation_22__bases = tmp_assign_source_176;
    }
    {
        PyObject *tmp_assign_source_177;
        tmp_assign_source_177 = PyDict_New();
        assert(tmp_class_creation_22__class_decl_dict == NULL);
        tmp_class_creation_22__class_decl_dict = tmp_assign_source_177;
    }
    {
        PyObject *tmp_assign_source_178;
        PyObject *tmp_metaclass_value_22;
        bool tmp_condition_result_127;
        PyObject *tmp_key_value_64;
        PyObject *tmp_dict_arg_value_64;
        PyObject *tmp_dict_arg_value_65;
        PyObject *tmp_key_value_65;
        nuitka_bool tmp_condition_result_128;
        int tmp_truth_name_22;
        PyObject *tmp_type_arg_43;
        PyObject *tmp_expression_value_116;
        PyObject *tmp_subscript_value_22;
        PyObject *tmp_bases_value_22;
        tmp_key_value_64 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
        tmp_dict_arg_value_64 = tmp_class_creation_22__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_64, tmp_key_value_64);
        assert(!(tmp_res == -1));
        tmp_condition_result_127 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_127 != false) {
            goto condexpr_true_43;
        } else {
            goto condexpr_false_43;
        }
        condexpr_true_43:;
        CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
        tmp_dict_arg_value_65 = tmp_class_creation_22__class_decl_dict;
        tmp_key_value_65 = mod_consts[43];
        tmp_metaclass_value_22 = DICT_GET_ITEM0(tmp_dict_arg_value_65, tmp_key_value_65);
        if (tmp_metaclass_value_22 == NULL) {
            tmp_metaclass_value_22 = Py_None;
        }
        assert(!(tmp_metaclass_value_22 == NULL));
        Py_INCREF(tmp_metaclass_value_22);
        goto condexpr_end_43;
        condexpr_false_43:;
        CHECK_OBJECT(tmp_class_creation_22__bases);
        tmp_truth_name_22 = CHECK_IF_TRUE(tmp_class_creation_22__bases);
        if (tmp_truth_name_22 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_64;
        }
        tmp_condition_result_128 = tmp_truth_name_22 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_128 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_44;
        } else {
            goto condexpr_false_44;
        }
        condexpr_true_44:;
        CHECK_OBJECT(tmp_class_creation_22__bases);
        tmp_expression_value_116 = tmp_class_creation_22__bases;
        tmp_subscript_value_22 = mod_consts[36];
        tmp_type_arg_43 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_116, tmp_subscript_value_22, 0);
        if (tmp_type_arg_43 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_64;
        }
        tmp_metaclass_value_22 = BUILTIN_TYPE1(tmp_type_arg_43);
        Py_DECREF(tmp_type_arg_43);
        if (tmp_metaclass_value_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_64;
        }
        goto condexpr_end_44;
        condexpr_false_44:;
        tmp_metaclass_value_22 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_22);
        condexpr_end_44:;
        condexpr_end_43:;
        CHECK_OBJECT(tmp_class_creation_22__bases);
        tmp_bases_value_22 = tmp_class_creation_22__bases;
        tmp_assign_source_178 = SELECT_METACLASS(tmp_metaclass_value_22, tmp_bases_value_22);
        Py_DECREF(tmp_metaclass_value_22);
        if (tmp_assign_source_178 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_64;
        }
        assert(tmp_class_creation_22__metaclass == NULL);
        tmp_class_creation_22__metaclass = tmp_assign_source_178;
    }
    {
        bool tmp_condition_result_129;
        PyObject *tmp_key_value_66;
        PyObject *tmp_dict_arg_value_66;
        tmp_key_value_66 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
        tmp_dict_arg_value_66 = tmp_class_creation_22__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_66, tmp_key_value_66);
        assert(!(tmp_res == -1));
        tmp_condition_result_129 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_129 != false) {
            goto branch_yes_85;
        } else {
            goto branch_no_85;
        }
    }
    branch_yes_85:;
    CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_22__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 201;

        goto try_except_handler_64;
    }
    branch_no_85:;
    {
        nuitka_bool tmp_condition_result_130;
        PyObject *tmp_expression_value_117;
        CHECK_OBJECT(tmp_class_creation_22__metaclass);
        tmp_expression_value_117 = tmp_class_creation_22__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_117, mod_consts[44]);
        tmp_condition_result_130 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_130 == NUITKA_BOOL_TRUE) {
            goto branch_yes_86;
        } else {
            goto branch_no_86;
        }
    }
    branch_yes_86:;
    {
        PyObject *tmp_assign_source_179;
        PyObject *tmp_called_value_43;
        PyObject *tmp_expression_value_118;
        PyObject *tmp_args_value_43;
        PyObject *tmp_tuple_element_85;
        PyObject *tmp_kwargs_value_43;
        CHECK_OBJECT(tmp_class_creation_22__metaclass);
        tmp_expression_value_118 = tmp_class_creation_22__metaclass;
        tmp_called_value_43 = LOOKUP_ATTRIBUTE(tmp_expression_value_118, mod_consts[44]);
        if (tmp_called_value_43 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_64;
        }
        tmp_tuple_element_85 = mod_consts[114];
        tmp_args_value_43 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_43, 0, tmp_tuple_element_85);
        CHECK_OBJECT(tmp_class_creation_22__bases);
        tmp_tuple_element_85 = tmp_class_creation_22__bases;
        PyTuple_SET_ITEM0(tmp_args_value_43, 1, tmp_tuple_element_85);
        CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
        tmp_kwargs_value_43 = tmp_class_creation_22__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 201;
        tmp_assign_source_179 = CALL_FUNCTION(tmp_called_value_43, tmp_args_value_43, tmp_kwargs_value_43);
        Py_DECREF(tmp_called_value_43);
        Py_DECREF(tmp_args_value_43);
        if (tmp_assign_source_179 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_64;
        }
        assert(tmp_class_creation_22__prepared == NULL);
        tmp_class_creation_22__prepared = tmp_assign_source_179;
    }
    {
        bool tmp_condition_result_131;
        PyObject *tmp_operand_value_22;
        PyObject *tmp_expression_value_119;
        CHECK_OBJECT(tmp_class_creation_22__prepared);
        tmp_expression_value_119 = tmp_class_creation_22__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_119, mod_consts[46]);
        tmp_operand_value_22 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_22);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_64;
        }
        tmp_condition_result_131 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_131 != false) {
            goto branch_yes_87;
        } else {
            goto branch_no_87;
        }
    }
    branch_yes_87:;
    {
        PyObject *tmp_raise_type_22;
        PyObject *tmp_raise_value_22;
        PyObject *tmp_left_value_22;
        PyObject *tmp_right_value_22;
        PyObject *tmp_tuple_element_86;
        PyObject *tmp_getattr_target_22;
        PyObject *tmp_getattr_attr_22;
        PyObject *tmp_getattr_default_22;
        tmp_raise_type_22 = PyExc_TypeError;
        tmp_left_value_22 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_22__metaclass);
        tmp_getattr_target_22 = tmp_class_creation_22__metaclass;
        tmp_getattr_attr_22 = mod_consts[48];
        tmp_getattr_default_22 = mod_consts[49];
        tmp_tuple_element_86 = BUILTIN_GETATTR(tmp_getattr_target_22, tmp_getattr_attr_22, tmp_getattr_default_22);
        if (tmp_tuple_element_86 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_64;
        }
        tmp_right_value_22 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_120;
            PyObject *tmp_type_arg_44;
            PyTuple_SET_ITEM(tmp_right_value_22, 0, tmp_tuple_element_86);
            CHECK_OBJECT(tmp_class_creation_22__prepared);
            tmp_type_arg_44 = tmp_class_creation_22__prepared;
            tmp_expression_value_120 = BUILTIN_TYPE1(tmp_type_arg_44);
            assert(!(tmp_expression_value_120 == NULL));
            tmp_tuple_element_86 = LOOKUP_ATTRIBUTE(tmp_expression_value_120, mod_consts[48]);
            Py_DECREF(tmp_expression_value_120);
            if (tmp_tuple_element_86 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 201;

                goto tuple_build_exception_26;
            }
            PyTuple_SET_ITEM(tmp_right_value_22, 1, tmp_tuple_element_86);
        }
        goto tuple_build_noexception_26;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_26:;
        Py_DECREF(tmp_right_value_22);
        goto try_except_handler_64;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_26:;
        tmp_raise_value_22 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_22, tmp_right_value_22);
        Py_DECREF(tmp_right_value_22);
        if (tmp_raise_value_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_64;
        }
        exception_type = tmp_raise_type_22;
        Py_INCREF(tmp_raise_type_22);
        exception_value = tmp_raise_value_22;
        exception_lineno = 201;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_64;
    }
    branch_no_87:;
    goto branch_end_86;
    branch_no_86:;
    {
        PyObject *tmp_assign_source_180;
        tmp_assign_source_180 = PyDict_New();
        assert(tmp_class_creation_22__prepared == NULL);
        tmp_class_creation_22__prepared = tmp_assign_source_180;
    }
    branch_end_86:;
    {
        PyObject *tmp_assign_source_181;
        {
            PyObject *tmp_set_locals_22;
            CHECK_OBJECT(tmp_class_creation_22__prepared);
            tmp_set_locals_22 = tmp_class_creation_22__prepared;
            locals_botocore$exceptions$$$class__22_ProfileNotFound_201 = tmp_set_locals_22;
            Py_INCREF(tmp_set_locals_22);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__22_ProfileNotFound_201, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_66;
        }
        tmp_dictset_value = mod_consts[115];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__22_ProfileNotFound_201, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_66;
        }
        tmp_dictset_value = mod_consts[114];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__22_ProfileNotFound_201, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_66;
        }
        if (isFrameUnusable(cache_frame_936558efffed40b305e47c65f896b9a6_22)) {
            Py_XDECREF(cache_frame_936558efffed40b305e47c65f896b9a6_22);

#if _DEBUG_REFCOUNTS
            if (cache_frame_936558efffed40b305e47c65f896b9a6_22 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_936558efffed40b305e47c65f896b9a6_22 = MAKE_FUNCTION_FRAME(codeobj_936558efffed40b305e47c65f896b9a6, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_936558efffed40b305e47c65f896b9a6_22->m_type_description == NULL);
        frame_936558efffed40b305e47c65f896b9a6_22 = cache_frame_936558efffed40b305e47c65f896b9a6_22;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_936558efffed40b305e47c65f896b9a6_22);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_936558efffed40b305e47c65f896b9a6_22) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[116];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__22_ProfileNotFound_201, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 208;
            type_description_2 = "o";
            goto frame_exception_exit_22;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_936558efffed40b305e47c65f896b9a6_22);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_21;

        frame_exception_exit_22:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_936558efffed40b305e47c65f896b9a6_22);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_936558efffed40b305e47c65f896b9a6_22, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_936558efffed40b305e47c65f896b9a6_22->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_936558efffed40b305e47c65f896b9a6_22, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_936558efffed40b305e47c65f896b9a6_22,
            type_description_2,
            outline_21_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_936558efffed40b305e47c65f896b9a6_22 == cache_frame_936558efffed40b305e47c65f896b9a6_22) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_936558efffed40b305e47c65f896b9a6_22);
            cache_frame_936558efffed40b305e47c65f896b9a6_22 = NULL;
        }

        assertFrameObject(frame_936558efffed40b305e47c65f896b9a6_22);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_21;

        frame_no_exception_21:;
        goto skip_nested_handling_21;
        nested_frame_exit_21:;

        goto try_except_handler_66;
        skip_nested_handling_21:;
        {
            nuitka_bool tmp_condition_result_132;
            PyObject *tmp_cmp_expr_left_22;
            PyObject *tmp_cmp_expr_right_22;
            CHECK_OBJECT(tmp_class_creation_22__bases);
            tmp_cmp_expr_left_22 = tmp_class_creation_22__bases;
            CHECK_OBJECT(tmp_class_creation_22__bases_orig);
            tmp_cmp_expr_right_22 = tmp_class_creation_22__bases_orig;
            tmp_condition_result_132 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_22, tmp_cmp_expr_right_22);
            if (tmp_condition_result_132 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 201;

                goto try_except_handler_66;
            }
            if (tmp_condition_result_132 == NUITKA_BOOL_TRUE) {
                goto branch_yes_88;
            } else {
                goto branch_no_88;
            }
            assert(tmp_condition_result_132 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_88:;
        CHECK_OBJECT(tmp_class_creation_22__bases_orig);
        tmp_dictset_value = tmp_class_creation_22__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__22_ProfileNotFound_201, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;

            goto try_except_handler_66;
        }
        branch_no_88:;
        {
            PyObject *tmp_assign_source_182;
            PyObject *tmp_called_value_44;
            PyObject *tmp_args_value_44;
            PyObject *tmp_tuple_element_87;
            PyObject *tmp_kwargs_value_44;
            CHECK_OBJECT(tmp_class_creation_22__metaclass);
            tmp_called_value_44 = tmp_class_creation_22__metaclass;
            tmp_tuple_element_87 = mod_consts[114];
            tmp_args_value_44 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_44, 0, tmp_tuple_element_87);
            CHECK_OBJECT(tmp_class_creation_22__bases);
            tmp_tuple_element_87 = tmp_class_creation_22__bases;
            PyTuple_SET_ITEM0(tmp_args_value_44, 1, tmp_tuple_element_87);
            tmp_tuple_element_87 = locals_botocore$exceptions$$$class__22_ProfileNotFound_201;
            PyTuple_SET_ITEM0(tmp_args_value_44, 2, tmp_tuple_element_87);
            CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
            tmp_kwargs_value_44 = tmp_class_creation_22__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 201;
            tmp_assign_source_182 = CALL_FUNCTION(tmp_called_value_44, tmp_args_value_44, tmp_kwargs_value_44);
            Py_DECREF(tmp_args_value_44);
            if (tmp_assign_source_182 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 201;

                goto try_except_handler_66;
            }
            assert(outline_21_var___class__ == NULL);
            outline_21_var___class__ = tmp_assign_source_182;
        }
        CHECK_OBJECT(outline_21_var___class__);
        tmp_assign_source_181 = outline_21_var___class__;
        Py_INCREF(tmp_assign_source_181);
        goto try_return_handler_66;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_66:;
        Py_DECREF(locals_botocore$exceptions$$$class__22_ProfileNotFound_201);
        locals_botocore$exceptions$$$class__22_ProfileNotFound_201 = NULL;
        goto try_return_handler_65;
        // Exception handler code:
        try_except_handler_66:;
        exception_keeper_type_64 = exception_type;
        exception_keeper_value_64 = exception_value;
        exception_keeper_tb_64 = exception_tb;
        exception_keeper_lineno_64 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__22_ProfileNotFound_201);
        locals_botocore$exceptions$$$class__22_ProfileNotFound_201 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_64;
        exception_value = exception_keeper_value_64;
        exception_tb = exception_keeper_tb_64;
        exception_lineno = exception_keeper_lineno_64;

        goto try_except_handler_65;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_65:;
        CHECK_OBJECT(outline_21_var___class__);
        Py_DECREF(outline_21_var___class__);
        outline_21_var___class__ = NULL;
        goto outline_result_22;
        // Exception handler code:
        try_except_handler_65:;
        exception_keeper_type_65 = exception_type;
        exception_keeper_value_65 = exception_value;
        exception_keeper_tb_65 = exception_tb;
        exception_keeper_lineno_65 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_65;
        exception_value = exception_keeper_value_65;
        exception_tb = exception_keeper_tb_65;
        exception_lineno = exception_keeper_lineno_65;

        goto outline_exception_22;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_22:;
        exception_lineno = 201;
        goto try_except_handler_64;
        outline_result_22:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[114], tmp_assign_source_181);
    }
    goto try_end_22;
    // Exception handler code:
    try_except_handler_64:;
    exception_keeper_type_66 = exception_type;
    exception_keeper_value_66 = exception_value;
    exception_keeper_tb_66 = exception_tb;
    exception_keeper_lineno_66 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_22__bases_orig);
    tmp_class_creation_22__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_22__bases);
    tmp_class_creation_22__bases = NULL;
    Py_XDECREF(tmp_class_creation_22__class_decl_dict);
    tmp_class_creation_22__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_22__metaclass);
    tmp_class_creation_22__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_22__prepared);
    tmp_class_creation_22__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_66;
    exception_value = exception_keeper_value_66;
    exception_tb = exception_keeper_tb_66;
    exception_lineno = exception_keeper_lineno_66;

    goto frame_exception_exit_1;
    // End of try:
    try_end_22:;
    CHECK_OBJECT(tmp_class_creation_22__bases_orig);
    Py_DECREF(tmp_class_creation_22__bases_orig);
    tmp_class_creation_22__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_22__bases);
    Py_DECREF(tmp_class_creation_22__bases);
    tmp_class_creation_22__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
    Py_DECREF(tmp_class_creation_22__class_decl_dict);
    tmp_class_creation_22__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_22__metaclass);
    Py_DECREF(tmp_class_creation_22__metaclass);
    tmp_class_creation_22__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_22__prepared);
    Py_DECREF(tmp_class_creation_22__prepared);
    tmp_class_creation_22__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_183;
        PyObject *tmp_tuple_element_88;
        tmp_tuple_element_88 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_88 == NULL)) {
            tmp_tuple_element_88 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_88 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;

            goto try_except_handler_67;
        }
        tmp_assign_source_183 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_183, 0, tmp_tuple_element_88);
        assert(tmp_class_creation_23__bases_orig == NULL);
        tmp_class_creation_23__bases_orig = tmp_assign_source_183;
    }
    {
        PyObject *tmp_assign_source_184;
        PyObject *tmp_dircall_arg1_23;
        CHECK_OBJECT(tmp_class_creation_23__bases_orig);
        tmp_dircall_arg1_23 = tmp_class_creation_23__bases_orig;
        Py_INCREF(tmp_dircall_arg1_23);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_23};
            tmp_assign_source_184 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_184 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;

            goto try_except_handler_67;
        }
        assert(tmp_class_creation_23__bases == NULL);
        tmp_class_creation_23__bases = tmp_assign_source_184;
    }
    {
        PyObject *tmp_assign_source_185;
        tmp_assign_source_185 = PyDict_New();
        assert(tmp_class_creation_23__class_decl_dict == NULL);
        tmp_class_creation_23__class_decl_dict = tmp_assign_source_185;
    }
    {
        PyObject *tmp_assign_source_186;
        PyObject *tmp_metaclass_value_23;
        bool tmp_condition_result_133;
        PyObject *tmp_key_value_67;
        PyObject *tmp_dict_arg_value_67;
        PyObject *tmp_dict_arg_value_68;
        PyObject *tmp_key_value_68;
        nuitka_bool tmp_condition_result_134;
        int tmp_truth_name_23;
        PyObject *tmp_type_arg_45;
        PyObject *tmp_expression_value_121;
        PyObject *tmp_subscript_value_23;
        PyObject *tmp_bases_value_23;
        tmp_key_value_67 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
        tmp_dict_arg_value_67 = tmp_class_creation_23__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_67, tmp_key_value_67);
        assert(!(tmp_res == -1));
        tmp_condition_result_133 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_133 != false) {
            goto condexpr_true_45;
        } else {
            goto condexpr_false_45;
        }
        condexpr_true_45:;
        CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
        tmp_dict_arg_value_68 = tmp_class_creation_23__class_decl_dict;
        tmp_key_value_68 = mod_consts[43];
        tmp_metaclass_value_23 = DICT_GET_ITEM0(tmp_dict_arg_value_68, tmp_key_value_68);
        if (tmp_metaclass_value_23 == NULL) {
            tmp_metaclass_value_23 = Py_None;
        }
        assert(!(tmp_metaclass_value_23 == NULL));
        Py_INCREF(tmp_metaclass_value_23);
        goto condexpr_end_45;
        condexpr_false_45:;
        CHECK_OBJECT(tmp_class_creation_23__bases);
        tmp_truth_name_23 = CHECK_IF_TRUE(tmp_class_creation_23__bases);
        if (tmp_truth_name_23 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;

            goto try_except_handler_67;
        }
        tmp_condition_result_134 = tmp_truth_name_23 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_134 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_46;
        } else {
            goto condexpr_false_46;
        }
        condexpr_true_46:;
        CHECK_OBJECT(tmp_class_creation_23__bases);
        tmp_expression_value_121 = tmp_class_creation_23__bases;
        tmp_subscript_value_23 = mod_consts[36];
        tmp_type_arg_45 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_121, tmp_subscript_value_23, 0);
        if (tmp_type_arg_45 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;

            goto try_except_handler_67;
        }
        tmp_metaclass_value_23 = BUILTIN_TYPE1(tmp_type_arg_45);
        Py_DECREF(tmp_type_arg_45);
        if (tmp_metaclass_value_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;

            goto try_except_handler_67;
        }
        goto condexpr_end_46;
        condexpr_false_46:;
        tmp_metaclass_value_23 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_23);
        condexpr_end_46:;
        condexpr_end_45:;
        CHECK_OBJECT(tmp_class_creation_23__bases);
        tmp_bases_value_23 = tmp_class_creation_23__bases;
        tmp_assign_source_186 = SELECT_METACLASS(tmp_metaclass_value_23, tmp_bases_value_23);
        Py_DECREF(tmp_metaclass_value_23);
        if (tmp_assign_source_186 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;

            goto try_except_handler_67;
        }
        assert(tmp_class_creation_23__metaclass == NULL);
        tmp_class_creation_23__metaclass = tmp_assign_source_186;
    }
    {
        bool tmp_condition_result_135;
        PyObject *tmp_key_value_69;
        PyObject *tmp_dict_arg_value_69;
        tmp_key_value_69 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
        tmp_dict_arg_value_69 = tmp_class_creation_23__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_69, tmp_key_value_69);
        assert(!(tmp_res == -1));
        tmp_condition_result_135 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_135 != false) {
            goto branch_yes_89;
        } else {
            goto branch_no_89;
        }
    }
    branch_yes_89:;
    CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_23__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 211;

        goto try_except_handler_67;
    }
    branch_no_89:;
    {
        nuitka_bool tmp_condition_result_136;
        PyObject *tmp_expression_value_122;
        CHECK_OBJECT(tmp_class_creation_23__metaclass);
        tmp_expression_value_122 = tmp_class_creation_23__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_122, mod_consts[44]);
        tmp_condition_result_136 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_136 == NUITKA_BOOL_TRUE) {
            goto branch_yes_90;
        } else {
            goto branch_no_90;
        }
    }
    branch_yes_90:;
    {
        PyObject *tmp_assign_source_187;
        PyObject *tmp_called_value_45;
        PyObject *tmp_expression_value_123;
        PyObject *tmp_args_value_45;
        PyObject *tmp_tuple_element_89;
        PyObject *tmp_kwargs_value_45;
        CHECK_OBJECT(tmp_class_creation_23__metaclass);
        tmp_expression_value_123 = tmp_class_creation_23__metaclass;
        tmp_called_value_45 = LOOKUP_ATTRIBUTE(tmp_expression_value_123, mod_consts[44]);
        if (tmp_called_value_45 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;

            goto try_except_handler_67;
        }
        tmp_tuple_element_89 = mod_consts[117];
        tmp_args_value_45 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_45, 0, tmp_tuple_element_89);
        CHECK_OBJECT(tmp_class_creation_23__bases);
        tmp_tuple_element_89 = tmp_class_creation_23__bases;
        PyTuple_SET_ITEM0(tmp_args_value_45, 1, tmp_tuple_element_89);
        CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
        tmp_kwargs_value_45 = tmp_class_creation_23__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 211;
        tmp_assign_source_187 = CALL_FUNCTION(tmp_called_value_45, tmp_args_value_45, tmp_kwargs_value_45);
        Py_DECREF(tmp_called_value_45);
        Py_DECREF(tmp_args_value_45);
        if (tmp_assign_source_187 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;

            goto try_except_handler_67;
        }
        assert(tmp_class_creation_23__prepared == NULL);
        tmp_class_creation_23__prepared = tmp_assign_source_187;
    }
    {
        bool tmp_condition_result_137;
        PyObject *tmp_operand_value_23;
        PyObject *tmp_expression_value_124;
        CHECK_OBJECT(tmp_class_creation_23__prepared);
        tmp_expression_value_124 = tmp_class_creation_23__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_124, mod_consts[46]);
        tmp_operand_value_23 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_23);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;

            goto try_except_handler_67;
        }
        tmp_condition_result_137 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_137 != false) {
            goto branch_yes_91;
        } else {
            goto branch_no_91;
        }
    }
    branch_yes_91:;
    {
        PyObject *tmp_raise_type_23;
        PyObject *tmp_raise_value_23;
        PyObject *tmp_left_value_23;
        PyObject *tmp_right_value_23;
        PyObject *tmp_tuple_element_90;
        PyObject *tmp_getattr_target_23;
        PyObject *tmp_getattr_attr_23;
        PyObject *tmp_getattr_default_23;
        tmp_raise_type_23 = PyExc_TypeError;
        tmp_left_value_23 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_23__metaclass);
        tmp_getattr_target_23 = tmp_class_creation_23__metaclass;
        tmp_getattr_attr_23 = mod_consts[48];
        tmp_getattr_default_23 = mod_consts[49];
        tmp_tuple_element_90 = BUILTIN_GETATTR(tmp_getattr_target_23, tmp_getattr_attr_23, tmp_getattr_default_23);
        if (tmp_tuple_element_90 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;

            goto try_except_handler_67;
        }
        tmp_right_value_23 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_125;
            PyObject *tmp_type_arg_46;
            PyTuple_SET_ITEM(tmp_right_value_23, 0, tmp_tuple_element_90);
            CHECK_OBJECT(tmp_class_creation_23__prepared);
            tmp_type_arg_46 = tmp_class_creation_23__prepared;
            tmp_expression_value_125 = BUILTIN_TYPE1(tmp_type_arg_46);
            assert(!(tmp_expression_value_125 == NULL));
            tmp_tuple_element_90 = LOOKUP_ATTRIBUTE(tmp_expression_value_125, mod_consts[48]);
            Py_DECREF(tmp_expression_value_125);
            if (tmp_tuple_element_90 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 211;

                goto tuple_build_exception_27;
            }
            PyTuple_SET_ITEM(tmp_right_value_23, 1, tmp_tuple_element_90);
        }
        goto tuple_build_noexception_27;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_27:;
        Py_DECREF(tmp_right_value_23);
        goto try_except_handler_67;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_27:;
        tmp_raise_value_23 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_23, tmp_right_value_23);
        Py_DECREF(tmp_right_value_23);
        if (tmp_raise_value_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;

            goto try_except_handler_67;
        }
        exception_type = tmp_raise_type_23;
        Py_INCREF(tmp_raise_type_23);
        exception_value = tmp_raise_value_23;
        exception_lineno = 211;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_67;
    }
    branch_no_91:;
    goto branch_end_90;
    branch_no_90:;
    {
        PyObject *tmp_assign_source_188;
        tmp_assign_source_188 = PyDict_New();
        assert(tmp_class_creation_23__prepared == NULL);
        tmp_class_creation_23__prepared = tmp_assign_source_188;
    }
    branch_end_90:;
    {
        PyObject *tmp_assign_source_189;
        {
            PyObject *tmp_set_locals_23;
            CHECK_OBJECT(tmp_class_creation_23__prepared);
            tmp_set_locals_23 = tmp_class_creation_23__prepared;
            locals_botocore$exceptions$$$class__23_ConfigParseError_211 = tmp_set_locals_23;
            Py_INCREF(tmp_set_locals_23);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__23_ConfigParseError_211, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;

            goto try_except_handler_69;
        }
        tmp_dictset_value = mod_consts[118];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__23_ConfigParseError_211, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;

            goto try_except_handler_69;
        }
        tmp_dictset_value = mod_consts[117];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__23_ConfigParseError_211, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;

            goto try_except_handler_69;
        }
        if (isFrameUnusable(cache_frame_4ffb0b721c8e7f787404628028064e6a_23)) {
            Py_XDECREF(cache_frame_4ffb0b721c8e7f787404628028064e6a_23);

#if _DEBUG_REFCOUNTS
            if (cache_frame_4ffb0b721c8e7f787404628028064e6a_23 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_4ffb0b721c8e7f787404628028064e6a_23 = MAKE_FUNCTION_FRAME(codeobj_4ffb0b721c8e7f787404628028064e6a, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_4ffb0b721c8e7f787404628028064e6a_23->m_type_description == NULL);
        frame_4ffb0b721c8e7f787404628028064e6a_23 = cache_frame_4ffb0b721c8e7f787404628028064e6a_23;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_4ffb0b721c8e7f787404628028064e6a_23);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_4ffb0b721c8e7f787404628028064e6a_23) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[119];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__23_ConfigParseError_211, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 217;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_4ffb0b721c8e7f787404628028064e6a_23);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_22;

        frame_exception_exit_23:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_4ffb0b721c8e7f787404628028064e6a_23);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_4ffb0b721c8e7f787404628028064e6a_23, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_4ffb0b721c8e7f787404628028064e6a_23->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_4ffb0b721c8e7f787404628028064e6a_23, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_4ffb0b721c8e7f787404628028064e6a_23,
            type_description_2,
            outline_22_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_4ffb0b721c8e7f787404628028064e6a_23 == cache_frame_4ffb0b721c8e7f787404628028064e6a_23) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_4ffb0b721c8e7f787404628028064e6a_23);
            cache_frame_4ffb0b721c8e7f787404628028064e6a_23 = NULL;
        }

        assertFrameObject(frame_4ffb0b721c8e7f787404628028064e6a_23);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_22;

        frame_no_exception_22:;
        goto skip_nested_handling_22;
        nested_frame_exit_22:;

        goto try_except_handler_69;
        skip_nested_handling_22:;
        {
            nuitka_bool tmp_condition_result_138;
            PyObject *tmp_cmp_expr_left_23;
            PyObject *tmp_cmp_expr_right_23;
            CHECK_OBJECT(tmp_class_creation_23__bases);
            tmp_cmp_expr_left_23 = tmp_class_creation_23__bases;
            CHECK_OBJECT(tmp_class_creation_23__bases_orig);
            tmp_cmp_expr_right_23 = tmp_class_creation_23__bases_orig;
            tmp_condition_result_138 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_23, tmp_cmp_expr_right_23);
            if (tmp_condition_result_138 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 211;

                goto try_except_handler_69;
            }
            if (tmp_condition_result_138 == NUITKA_BOOL_TRUE) {
                goto branch_yes_92;
            } else {
                goto branch_no_92;
            }
            assert(tmp_condition_result_138 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_92:;
        CHECK_OBJECT(tmp_class_creation_23__bases_orig);
        tmp_dictset_value = tmp_class_creation_23__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__23_ConfigParseError_211, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;

            goto try_except_handler_69;
        }
        branch_no_92:;
        {
            PyObject *tmp_assign_source_190;
            PyObject *tmp_called_value_46;
            PyObject *tmp_args_value_46;
            PyObject *tmp_tuple_element_91;
            PyObject *tmp_kwargs_value_46;
            CHECK_OBJECT(tmp_class_creation_23__metaclass);
            tmp_called_value_46 = tmp_class_creation_23__metaclass;
            tmp_tuple_element_91 = mod_consts[117];
            tmp_args_value_46 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_46, 0, tmp_tuple_element_91);
            CHECK_OBJECT(tmp_class_creation_23__bases);
            tmp_tuple_element_91 = tmp_class_creation_23__bases;
            PyTuple_SET_ITEM0(tmp_args_value_46, 1, tmp_tuple_element_91);
            tmp_tuple_element_91 = locals_botocore$exceptions$$$class__23_ConfigParseError_211;
            PyTuple_SET_ITEM0(tmp_args_value_46, 2, tmp_tuple_element_91);
            CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
            tmp_kwargs_value_46 = tmp_class_creation_23__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 211;
            tmp_assign_source_190 = CALL_FUNCTION(tmp_called_value_46, tmp_args_value_46, tmp_kwargs_value_46);
            Py_DECREF(tmp_args_value_46);
            if (tmp_assign_source_190 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 211;

                goto try_except_handler_69;
            }
            assert(outline_22_var___class__ == NULL);
            outline_22_var___class__ = tmp_assign_source_190;
        }
        CHECK_OBJECT(outline_22_var___class__);
        tmp_assign_source_189 = outline_22_var___class__;
        Py_INCREF(tmp_assign_source_189);
        goto try_return_handler_69;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_69:;
        Py_DECREF(locals_botocore$exceptions$$$class__23_ConfigParseError_211);
        locals_botocore$exceptions$$$class__23_ConfigParseError_211 = NULL;
        goto try_return_handler_68;
        // Exception handler code:
        try_except_handler_69:;
        exception_keeper_type_67 = exception_type;
        exception_keeper_value_67 = exception_value;
        exception_keeper_tb_67 = exception_tb;
        exception_keeper_lineno_67 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__23_ConfigParseError_211);
        locals_botocore$exceptions$$$class__23_ConfigParseError_211 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_67;
        exception_value = exception_keeper_value_67;
        exception_tb = exception_keeper_tb_67;
        exception_lineno = exception_keeper_lineno_67;

        goto try_except_handler_68;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_68:;
        CHECK_OBJECT(outline_22_var___class__);
        Py_DECREF(outline_22_var___class__);
        outline_22_var___class__ = NULL;
        goto outline_result_23;
        // Exception handler code:
        try_except_handler_68:;
        exception_keeper_type_68 = exception_type;
        exception_keeper_value_68 = exception_value;
        exception_keeper_tb_68 = exception_tb;
        exception_keeper_lineno_68 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_68;
        exception_value = exception_keeper_value_68;
        exception_tb = exception_keeper_tb_68;
        exception_lineno = exception_keeper_lineno_68;

        goto outline_exception_23;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_23:;
        exception_lineno = 211;
        goto try_except_handler_67;
        outline_result_23:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[117], tmp_assign_source_189);
    }
    goto try_end_23;
    // Exception handler code:
    try_except_handler_67:;
    exception_keeper_type_69 = exception_type;
    exception_keeper_value_69 = exception_value;
    exception_keeper_tb_69 = exception_tb;
    exception_keeper_lineno_69 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_23__bases_orig);
    tmp_class_creation_23__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_23__bases);
    tmp_class_creation_23__bases = NULL;
    Py_XDECREF(tmp_class_creation_23__class_decl_dict);
    tmp_class_creation_23__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_23__metaclass);
    tmp_class_creation_23__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_23__prepared);
    tmp_class_creation_23__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_69;
    exception_value = exception_keeper_value_69;
    exception_tb = exception_keeper_tb_69;
    exception_lineno = exception_keeper_lineno_69;

    goto frame_exception_exit_1;
    // End of try:
    try_end_23:;
    CHECK_OBJECT(tmp_class_creation_23__bases_orig);
    Py_DECREF(tmp_class_creation_23__bases_orig);
    tmp_class_creation_23__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_23__bases);
    Py_DECREF(tmp_class_creation_23__bases);
    tmp_class_creation_23__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
    Py_DECREF(tmp_class_creation_23__class_decl_dict);
    tmp_class_creation_23__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_23__metaclass);
    Py_DECREF(tmp_class_creation_23__metaclass);
    tmp_class_creation_23__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_23__prepared);
    Py_DECREF(tmp_class_creation_23__prepared);
    tmp_class_creation_23__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_191;
        PyObject *tmp_tuple_element_92;
        tmp_tuple_element_92 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_92 == NULL)) {
            tmp_tuple_element_92 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_92 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_70;
        }
        tmp_assign_source_191 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_191, 0, tmp_tuple_element_92);
        assert(tmp_class_creation_24__bases_orig == NULL);
        tmp_class_creation_24__bases_orig = tmp_assign_source_191;
    }
    {
        PyObject *tmp_assign_source_192;
        PyObject *tmp_dircall_arg1_24;
        CHECK_OBJECT(tmp_class_creation_24__bases_orig);
        tmp_dircall_arg1_24 = tmp_class_creation_24__bases_orig;
        Py_INCREF(tmp_dircall_arg1_24);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_24};
            tmp_assign_source_192 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_192 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_70;
        }
        assert(tmp_class_creation_24__bases == NULL);
        tmp_class_creation_24__bases = tmp_assign_source_192;
    }
    {
        PyObject *tmp_assign_source_193;
        tmp_assign_source_193 = PyDict_New();
        assert(tmp_class_creation_24__class_decl_dict == NULL);
        tmp_class_creation_24__class_decl_dict = tmp_assign_source_193;
    }
    {
        PyObject *tmp_assign_source_194;
        PyObject *tmp_metaclass_value_24;
        bool tmp_condition_result_139;
        PyObject *tmp_key_value_70;
        PyObject *tmp_dict_arg_value_70;
        PyObject *tmp_dict_arg_value_71;
        PyObject *tmp_key_value_71;
        nuitka_bool tmp_condition_result_140;
        int tmp_truth_name_24;
        PyObject *tmp_type_arg_47;
        PyObject *tmp_expression_value_126;
        PyObject *tmp_subscript_value_24;
        PyObject *tmp_bases_value_24;
        tmp_key_value_70 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
        tmp_dict_arg_value_70 = tmp_class_creation_24__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_70, tmp_key_value_70);
        assert(!(tmp_res == -1));
        tmp_condition_result_139 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_139 != false) {
            goto condexpr_true_47;
        } else {
            goto condexpr_false_47;
        }
        condexpr_true_47:;
        CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
        tmp_dict_arg_value_71 = tmp_class_creation_24__class_decl_dict;
        tmp_key_value_71 = mod_consts[43];
        tmp_metaclass_value_24 = DICT_GET_ITEM0(tmp_dict_arg_value_71, tmp_key_value_71);
        if (tmp_metaclass_value_24 == NULL) {
            tmp_metaclass_value_24 = Py_None;
        }
        assert(!(tmp_metaclass_value_24 == NULL));
        Py_INCREF(tmp_metaclass_value_24);
        goto condexpr_end_47;
        condexpr_false_47:;
        CHECK_OBJECT(tmp_class_creation_24__bases);
        tmp_truth_name_24 = CHECK_IF_TRUE(tmp_class_creation_24__bases);
        if (tmp_truth_name_24 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_70;
        }
        tmp_condition_result_140 = tmp_truth_name_24 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_140 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_48;
        } else {
            goto condexpr_false_48;
        }
        condexpr_true_48:;
        CHECK_OBJECT(tmp_class_creation_24__bases);
        tmp_expression_value_126 = tmp_class_creation_24__bases;
        tmp_subscript_value_24 = mod_consts[36];
        tmp_type_arg_47 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_126, tmp_subscript_value_24, 0);
        if (tmp_type_arg_47 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_70;
        }
        tmp_metaclass_value_24 = BUILTIN_TYPE1(tmp_type_arg_47);
        Py_DECREF(tmp_type_arg_47);
        if (tmp_metaclass_value_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_70;
        }
        goto condexpr_end_48;
        condexpr_false_48:;
        tmp_metaclass_value_24 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_24);
        condexpr_end_48:;
        condexpr_end_47:;
        CHECK_OBJECT(tmp_class_creation_24__bases);
        tmp_bases_value_24 = tmp_class_creation_24__bases;
        tmp_assign_source_194 = SELECT_METACLASS(tmp_metaclass_value_24, tmp_bases_value_24);
        Py_DECREF(tmp_metaclass_value_24);
        if (tmp_assign_source_194 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_70;
        }
        assert(tmp_class_creation_24__metaclass == NULL);
        tmp_class_creation_24__metaclass = tmp_assign_source_194;
    }
    {
        bool tmp_condition_result_141;
        PyObject *tmp_key_value_72;
        PyObject *tmp_dict_arg_value_72;
        tmp_key_value_72 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
        tmp_dict_arg_value_72 = tmp_class_creation_24__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_72, tmp_key_value_72);
        assert(!(tmp_res == -1));
        tmp_condition_result_141 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_141 != false) {
            goto branch_yes_93;
        } else {
            goto branch_no_93;
        }
    }
    branch_yes_93:;
    CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_24__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 220;

        goto try_except_handler_70;
    }
    branch_no_93:;
    {
        nuitka_bool tmp_condition_result_142;
        PyObject *tmp_expression_value_127;
        CHECK_OBJECT(tmp_class_creation_24__metaclass);
        tmp_expression_value_127 = tmp_class_creation_24__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_127, mod_consts[44]);
        tmp_condition_result_142 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_142 == NUITKA_BOOL_TRUE) {
            goto branch_yes_94;
        } else {
            goto branch_no_94;
        }
    }
    branch_yes_94:;
    {
        PyObject *tmp_assign_source_195;
        PyObject *tmp_called_value_47;
        PyObject *tmp_expression_value_128;
        PyObject *tmp_args_value_47;
        PyObject *tmp_tuple_element_93;
        PyObject *tmp_kwargs_value_47;
        CHECK_OBJECT(tmp_class_creation_24__metaclass);
        tmp_expression_value_128 = tmp_class_creation_24__metaclass;
        tmp_called_value_47 = LOOKUP_ATTRIBUTE(tmp_expression_value_128, mod_consts[44]);
        if (tmp_called_value_47 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_70;
        }
        tmp_tuple_element_93 = mod_consts[120];
        tmp_args_value_47 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_47, 0, tmp_tuple_element_93);
        CHECK_OBJECT(tmp_class_creation_24__bases);
        tmp_tuple_element_93 = tmp_class_creation_24__bases;
        PyTuple_SET_ITEM0(tmp_args_value_47, 1, tmp_tuple_element_93);
        CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
        tmp_kwargs_value_47 = tmp_class_creation_24__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 220;
        tmp_assign_source_195 = CALL_FUNCTION(tmp_called_value_47, tmp_args_value_47, tmp_kwargs_value_47);
        Py_DECREF(tmp_called_value_47);
        Py_DECREF(tmp_args_value_47);
        if (tmp_assign_source_195 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_70;
        }
        assert(tmp_class_creation_24__prepared == NULL);
        tmp_class_creation_24__prepared = tmp_assign_source_195;
    }
    {
        bool tmp_condition_result_143;
        PyObject *tmp_operand_value_24;
        PyObject *tmp_expression_value_129;
        CHECK_OBJECT(tmp_class_creation_24__prepared);
        tmp_expression_value_129 = tmp_class_creation_24__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_129, mod_consts[46]);
        tmp_operand_value_24 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_24);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_70;
        }
        tmp_condition_result_143 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_143 != false) {
            goto branch_yes_95;
        } else {
            goto branch_no_95;
        }
    }
    branch_yes_95:;
    {
        PyObject *tmp_raise_type_24;
        PyObject *tmp_raise_value_24;
        PyObject *tmp_left_value_24;
        PyObject *tmp_right_value_24;
        PyObject *tmp_tuple_element_94;
        PyObject *tmp_getattr_target_24;
        PyObject *tmp_getattr_attr_24;
        PyObject *tmp_getattr_default_24;
        tmp_raise_type_24 = PyExc_TypeError;
        tmp_left_value_24 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_24__metaclass);
        tmp_getattr_target_24 = tmp_class_creation_24__metaclass;
        tmp_getattr_attr_24 = mod_consts[48];
        tmp_getattr_default_24 = mod_consts[49];
        tmp_tuple_element_94 = BUILTIN_GETATTR(tmp_getattr_target_24, tmp_getattr_attr_24, tmp_getattr_default_24);
        if (tmp_tuple_element_94 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_70;
        }
        tmp_right_value_24 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_130;
            PyObject *tmp_type_arg_48;
            PyTuple_SET_ITEM(tmp_right_value_24, 0, tmp_tuple_element_94);
            CHECK_OBJECT(tmp_class_creation_24__prepared);
            tmp_type_arg_48 = tmp_class_creation_24__prepared;
            tmp_expression_value_130 = BUILTIN_TYPE1(tmp_type_arg_48);
            assert(!(tmp_expression_value_130 == NULL));
            tmp_tuple_element_94 = LOOKUP_ATTRIBUTE(tmp_expression_value_130, mod_consts[48]);
            Py_DECREF(tmp_expression_value_130);
            if (tmp_tuple_element_94 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 220;

                goto tuple_build_exception_28;
            }
            PyTuple_SET_ITEM(tmp_right_value_24, 1, tmp_tuple_element_94);
        }
        goto tuple_build_noexception_28;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_28:;
        Py_DECREF(tmp_right_value_24);
        goto try_except_handler_70;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_28:;
        tmp_raise_value_24 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_24, tmp_right_value_24);
        Py_DECREF(tmp_right_value_24);
        if (tmp_raise_value_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_70;
        }
        exception_type = tmp_raise_type_24;
        Py_INCREF(tmp_raise_type_24);
        exception_value = tmp_raise_value_24;
        exception_lineno = 220;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_70;
    }
    branch_no_95:;
    goto branch_end_94;
    branch_no_94:;
    {
        PyObject *tmp_assign_source_196;
        tmp_assign_source_196 = PyDict_New();
        assert(tmp_class_creation_24__prepared == NULL);
        tmp_class_creation_24__prepared = tmp_assign_source_196;
    }
    branch_end_94:;
    {
        PyObject *tmp_assign_source_197;
        {
            PyObject *tmp_set_locals_24;
            CHECK_OBJECT(tmp_class_creation_24__prepared);
            tmp_set_locals_24 = tmp_class_creation_24__prepared;
            locals_botocore$exceptions$$$class__24_ConfigNotFound_220 = tmp_set_locals_24;
            Py_INCREF(tmp_set_locals_24);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__24_ConfigNotFound_220, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_72;
        }
        tmp_dictset_value = mod_consts[121];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__24_ConfigNotFound_220, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_72;
        }
        tmp_dictset_value = mod_consts[120];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__24_ConfigNotFound_220, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_72;
        }
        if (isFrameUnusable(cache_frame_651722d482c771cab792be0250808f51_24)) {
            Py_XDECREF(cache_frame_651722d482c771cab792be0250808f51_24);

#if _DEBUG_REFCOUNTS
            if (cache_frame_651722d482c771cab792be0250808f51_24 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_651722d482c771cab792be0250808f51_24 = MAKE_FUNCTION_FRAME(codeobj_651722d482c771cab792be0250808f51, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_651722d482c771cab792be0250808f51_24->m_type_description == NULL);
        frame_651722d482c771cab792be0250808f51_24 = cache_frame_651722d482c771cab792be0250808f51_24;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_651722d482c771cab792be0250808f51_24);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_651722d482c771cab792be0250808f51_24) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[122];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__24_ConfigNotFound_220, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 226;
            type_description_2 = "o";
            goto frame_exception_exit_24;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_651722d482c771cab792be0250808f51_24);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_23;

        frame_exception_exit_24:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_651722d482c771cab792be0250808f51_24);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_651722d482c771cab792be0250808f51_24, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_651722d482c771cab792be0250808f51_24->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_651722d482c771cab792be0250808f51_24, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_651722d482c771cab792be0250808f51_24,
            type_description_2,
            outline_23_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_651722d482c771cab792be0250808f51_24 == cache_frame_651722d482c771cab792be0250808f51_24) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_651722d482c771cab792be0250808f51_24);
            cache_frame_651722d482c771cab792be0250808f51_24 = NULL;
        }

        assertFrameObject(frame_651722d482c771cab792be0250808f51_24);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_23;

        frame_no_exception_23:;
        goto skip_nested_handling_23;
        nested_frame_exit_23:;

        goto try_except_handler_72;
        skip_nested_handling_23:;
        {
            nuitka_bool tmp_condition_result_144;
            PyObject *tmp_cmp_expr_left_24;
            PyObject *tmp_cmp_expr_right_24;
            CHECK_OBJECT(tmp_class_creation_24__bases);
            tmp_cmp_expr_left_24 = tmp_class_creation_24__bases;
            CHECK_OBJECT(tmp_class_creation_24__bases_orig);
            tmp_cmp_expr_right_24 = tmp_class_creation_24__bases_orig;
            tmp_condition_result_144 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_24, tmp_cmp_expr_right_24);
            if (tmp_condition_result_144 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 220;

                goto try_except_handler_72;
            }
            if (tmp_condition_result_144 == NUITKA_BOOL_TRUE) {
                goto branch_yes_96;
            } else {
                goto branch_no_96;
            }
            assert(tmp_condition_result_144 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_96:;
        CHECK_OBJECT(tmp_class_creation_24__bases_orig);
        tmp_dictset_value = tmp_class_creation_24__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__24_ConfigNotFound_220, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_72;
        }
        branch_no_96:;
        {
            PyObject *tmp_assign_source_198;
            PyObject *tmp_called_value_48;
            PyObject *tmp_args_value_48;
            PyObject *tmp_tuple_element_95;
            PyObject *tmp_kwargs_value_48;
            CHECK_OBJECT(tmp_class_creation_24__metaclass);
            tmp_called_value_48 = tmp_class_creation_24__metaclass;
            tmp_tuple_element_95 = mod_consts[120];
            tmp_args_value_48 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_48, 0, tmp_tuple_element_95);
            CHECK_OBJECT(tmp_class_creation_24__bases);
            tmp_tuple_element_95 = tmp_class_creation_24__bases;
            PyTuple_SET_ITEM0(tmp_args_value_48, 1, tmp_tuple_element_95);
            tmp_tuple_element_95 = locals_botocore$exceptions$$$class__24_ConfigNotFound_220;
            PyTuple_SET_ITEM0(tmp_args_value_48, 2, tmp_tuple_element_95);
            CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
            tmp_kwargs_value_48 = tmp_class_creation_24__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 220;
            tmp_assign_source_198 = CALL_FUNCTION(tmp_called_value_48, tmp_args_value_48, tmp_kwargs_value_48);
            Py_DECREF(tmp_args_value_48);
            if (tmp_assign_source_198 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 220;

                goto try_except_handler_72;
            }
            assert(outline_23_var___class__ == NULL);
            outline_23_var___class__ = tmp_assign_source_198;
        }
        CHECK_OBJECT(outline_23_var___class__);
        tmp_assign_source_197 = outline_23_var___class__;
        Py_INCREF(tmp_assign_source_197);
        goto try_return_handler_72;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_72:;
        Py_DECREF(locals_botocore$exceptions$$$class__24_ConfigNotFound_220);
        locals_botocore$exceptions$$$class__24_ConfigNotFound_220 = NULL;
        goto try_return_handler_71;
        // Exception handler code:
        try_except_handler_72:;
        exception_keeper_type_70 = exception_type;
        exception_keeper_value_70 = exception_value;
        exception_keeper_tb_70 = exception_tb;
        exception_keeper_lineno_70 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__24_ConfigNotFound_220);
        locals_botocore$exceptions$$$class__24_ConfigNotFound_220 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_70;
        exception_value = exception_keeper_value_70;
        exception_tb = exception_keeper_tb_70;
        exception_lineno = exception_keeper_lineno_70;

        goto try_except_handler_71;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_71:;
        CHECK_OBJECT(outline_23_var___class__);
        Py_DECREF(outline_23_var___class__);
        outline_23_var___class__ = NULL;
        goto outline_result_24;
        // Exception handler code:
        try_except_handler_71:;
        exception_keeper_type_71 = exception_type;
        exception_keeper_value_71 = exception_value;
        exception_keeper_tb_71 = exception_tb;
        exception_keeper_lineno_71 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_71;
        exception_value = exception_keeper_value_71;
        exception_tb = exception_keeper_tb_71;
        exception_lineno = exception_keeper_lineno_71;

        goto outline_exception_24;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_24:;
        exception_lineno = 220;
        goto try_except_handler_70;
        outline_result_24:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[120], tmp_assign_source_197);
    }
    goto try_end_24;
    // Exception handler code:
    try_except_handler_70:;
    exception_keeper_type_72 = exception_type;
    exception_keeper_value_72 = exception_value;
    exception_keeper_tb_72 = exception_tb;
    exception_keeper_lineno_72 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_24__bases_orig);
    tmp_class_creation_24__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_24__bases);
    tmp_class_creation_24__bases = NULL;
    Py_XDECREF(tmp_class_creation_24__class_decl_dict);
    tmp_class_creation_24__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_24__metaclass);
    tmp_class_creation_24__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_24__prepared);
    tmp_class_creation_24__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_72;
    exception_value = exception_keeper_value_72;
    exception_tb = exception_keeper_tb_72;
    exception_lineno = exception_keeper_lineno_72;

    goto frame_exception_exit_1;
    // End of try:
    try_end_24:;
    CHECK_OBJECT(tmp_class_creation_24__bases_orig);
    Py_DECREF(tmp_class_creation_24__bases_orig);
    tmp_class_creation_24__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_24__bases);
    Py_DECREF(tmp_class_creation_24__bases);
    tmp_class_creation_24__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
    Py_DECREF(tmp_class_creation_24__class_decl_dict);
    tmp_class_creation_24__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_24__metaclass);
    Py_DECREF(tmp_class_creation_24__metaclass);
    tmp_class_creation_24__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_24__prepared);
    Py_DECREF(tmp_class_creation_24__prepared);
    tmp_class_creation_24__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_199;
        PyObject *tmp_tuple_element_96;
        tmp_tuple_element_96 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_96 == NULL)) {
            tmp_tuple_element_96 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_96 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 229;

            goto try_except_handler_73;
        }
        tmp_assign_source_199 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_199, 0, tmp_tuple_element_96);
        assert(tmp_class_creation_25__bases_orig == NULL);
        tmp_class_creation_25__bases_orig = tmp_assign_source_199;
    }
    {
        PyObject *tmp_assign_source_200;
        PyObject *tmp_dircall_arg1_25;
        CHECK_OBJECT(tmp_class_creation_25__bases_orig);
        tmp_dircall_arg1_25 = tmp_class_creation_25__bases_orig;
        Py_INCREF(tmp_dircall_arg1_25);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_25};
            tmp_assign_source_200 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_200 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 229;

            goto try_except_handler_73;
        }
        assert(tmp_class_creation_25__bases == NULL);
        tmp_class_creation_25__bases = tmp_assign_source_200;
    }
    {
        PyObject *tmp_assign_source_201;
        tmp_assign_source_201 = PyDict_New();
        assert(tmp_class_creation_25__class_decl_dict == NULL);
        tmp_class_creation_25__class_decl_dict = tmp_assign_source_201;
    }
    {
        PyObject *tmp_assign_source_202;
        PyObject *tmp_metaclass_value_25;
        bool tmp_condition_result_145;
        PyObject *tmp_key_value_73;
        PyObject *tmp_dict_arg_value_73;
        PyObject *tmp_dict_arg_value_74;
        PyObject *tmp_key_value_74;
        nuitka_bool tmp_condition_result_146;
        int tmp_truth_name_25;
        PyObject *tmp_type_arg_49;
        PyObject *tmp_expression_value_131;
        PyObject *tmp_subscript_value_25;
        PyObject *tmp_bases_value_25;
        tmp_key_value_73 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
        tmp_dict_arg_value_73 = tmp_class_creation_25__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_73, tmp_key_value_73);
        assert(!(tmp_res == -1));
        tmp_condition_result_145 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_145 != false) {
            goto condexpr_true_49;
        } else {
            goto condexpr_false_49;
        }
        condexpr_true_49:;
        CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
        tmp_dict_arg_value_74 = tmp_class_creation_25__class_decl_dict;
        tmp_key_value_74 = mod_consts[43];
        tmp_metaclass_value_25 = DICT_GET_ITEM0(tmp_dict_arg_value_74, tmp_key_value_74);
        if (tmp_metaclass_value_25 == NULL) {
            tmp_metaclass_value_25 = Py_None;
        }
        assert(!(tmp_metaclass_value_25 == NULL));
        Py_INCREF(tmp_metaclass_value_25);
        goto condexpr_end_49;
        condexpr_false_49:;
        CHECK_OBJECT(tmp_class_creation_25__bases);
        tmp_truth_name_25 = CHECK_IF_TRUE(tmp_class_creation_25__bases);
        if (tmp_truth_name_25 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 229;

            goto try_except_handler_73;
        }
        tmp_condition_result_146 = tmp_truth_name_25 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_146 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_50;
        } else {
            goto condexpr_false_50;
        }
        condexpr_true_50:;
        CHECK_OBJECT(tmp_class_creation_25__bases);
        tmp_expression_value_131 = tmp_class_creation_25__bases;
        tmp_subscript_value_25 = mod_consts[36];
        tmp_type_arg_49 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_131, tmp_subscript_value_25, 0);
        if (tmp_type_arg_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 229;

            goto try_except_handler_73;
        }
        tmp_metaclass_value_25 = BUILTIN_TYPE1(tmp_type_arg_49);
        Py_DECREF(tmp_type_arg_49);
        if (tmp_metaclass_value_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 229;

            goto try_except_handler_73;
        }
        goto condexpr_end_50;
        condexpr_false_50:;
        tmp_metaclass_value_25 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_25);
        condexpr_end_50:;
        condexpr_end_49:;
        CHECK_OBJECT(tmp_class_creation_25__bases);
        tmp_bases_value_25 = tmp_class_creation_25__bases;
        tmp_assign_source_202 = SELECT_METACLASS(tmp_metaclass_value_25, tmp_bases_value_25);
        Py_DECREF(tmp_metaclass_value_25);
        if (tmp_assign_source_202 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 229;

            goto try_except_handler_73;
        }
        assert(tmp_class_creation_25__metaclass == NULL);
        tmp_class_creation_25__metaclass = tmp_assign_source_202;
    }
    {
        bool tmp_condition_result_147;
        PyObject *tmp_key_value_75;
        PyObject *tmp_dict_arg_value_75;
        tmp_key_value_75 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
        tmp_dict_arg_value_75 = tmp_class_creation_25__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_75, tmp_key_value_75);
        assert(!(tmp_res == -1));
        tmp_condition_result_147 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_147 != false) {
            goto branch_yes_97;
        } else {
            goto branch_no_97;
        }
    }
    branch_yes_97:;
    CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_25__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 229;

        goto try_except_handler_73;
    }
    branch_no_97:;
    {
        nuitka_bool tmp_condition_result_148;
        PyObject *tmp_expression_value_132;
        CHECK_OBJECT(tmp_class_creation_25__metaclass);
        tmp_expression_value_132 = tmp_class_creation_25__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_132, mod_consts[44]);
        tmp_condition_result_148 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_148 == NUITKA_BOOL_TRUE) {
            goto branch_yes_98;
        } else {
            goto branch_no_98;
        }
    }
    branch_yes_98:;
    {
        PyObject *tmp_assign_source_203;
        PyObject *tmp_called_value_49;
        PyObject *tmp_expression_value_133;
        PyObject *tmp_args_value_49;
        PyObject *tmp_tuple_element_97;
        PyObject *tmp_kwargs_value_49;
        CHECK_OBJECT(tmp_class_creation_25__metaclass);
        tmp_expression_value_133 = tmp_class_creation_25__metaclass;
        tmp_called_value_49 = LOOKUP_ATTRIBUTE(tmp_expression_value_133, mod_consts[44]);
        if (tmp_called_value_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 229;

            goto try_except_handler_73;
        }
        tmp_tuple_element_97 = mod_consts[123];
        tmp_args_value_49 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_49, 0, tmp_tuple_element_97);
        CHECK_OBJECT(tmp_class_creation_25__bases);
        tmp_tuple_element_97 = tmp_class_creation_25__bases;
        PyTuple_SET_ITEM0(tmp_args_value_49, 1, tmp_tuple_element_97);
        CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
        tmp_kwargs_value_49 = tmp_class_creation_25__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 229;
        tmp_assign_source_203 = CALL_FUNCTION(tmp_called_value_49, tmp_args_value_49, tmp_kwargs_value_49);
        Py_DECREF(tmp_called_value_49);
        Py_DECREF(tmp_args_value_49);
        if (tmp_assign_source_203 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 229;

            goto try_except_handler_73;
        }
        assert(tmp_class_creation_25__prepared == NULL);
        tmp_class_creation_25__prepared = tmp_assign_source_203;
    }
    {
        bool tmp_condition_result_149;
        PyObject *tmp_operand_value_25;
        PyObject *tmp_expression_value_134;
        CHECK_OBJECT(tmp_class_creation_25__prepared);
        tmp_expression_value_134 = tmp_class_creation_25__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_134, mod_consts[46]);
        tmp_operand_value_25 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_25);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 229;

            goto try_except_handler_73;
        }
        tmp_condition_result_149 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_149 != false) {
            goto branch_yes_99;
        } else {
            goto branch_no_99;
        }
    }
    branch_yes_99:;
    {
        PyObject *tmp_raise_type_25;
        PyObject *tmp_raise_value_25;
        PyObject *tmp_left_value_25;
        PyObject *tmp_right_value_25;
        PyObject *tmp_tuple_element_98;
        PyObject *tmp_getattr_target_25;
        PyObject *tmp_getattr_attr_25;
        PyObject *tmp_getattr_default_25;
        tmp_raise_type_25 = PyExc_TypeError;
        tmp_left_value_25 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_25__metaclass);
        tmp_getattr_target_25 = tmp_class_creation_25__metaclass;
        tmp_getattr_attr_25 = mod_consts[48];
        tmp_getattr_default_25 = mod_consts[49];
        tmp_tuple_element_98 = BUILTIN_GETATTR(tmp_getattr_target_25, tmp_getattr_attr_25, tmp_getattr_default_25);
        if (tmp_tuple_element_98 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 229;

            goto try_except_handler_73;
        }
        tmp_right_value_25 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_135;
            PyObject *tmp_type_arg_50;
            PyTuple_SET_ITEM(tmp_right_value_25, 0, tmp_tuple_element_98);
            CHECK_OBJECT(tmp_class_creation_25__prepared);
            tmp_type_arg_50 = tmp_class_creation_25__prepared;
            tmp_expression_value_135 = BUILTIN_TYPE1(tmp_type_arg_50);
            assert(!(tmp_expression_value_135 == NULL));
            tmp_tuple_element_98 = LOOKUP_ATTRIBUTE(tmp_expression_value_135, mod_consts[48]);
            Py_DECREF(tmp_expression_value_135);
            if (tmp_tuple_element_98 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 229;

                goto tuple_build_exception_29;
            }
            PyTuple_SET_ITEM(tmp_right_value_25, 1, tmp_tuple_element_98);
        }
        goto tuple_build_noexception_29;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_29:;
        Py_DECREF(tmp_right_value_25);
        goto try_except_handler_73;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_29:;
        tmp_raise_value_25 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_25, tmp_right_value_25);
        Py_DECREF(tmp_right_value_25);
        if (tmp_raise_value_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 229;

            goto try_except_handler_73;
        }
        exception_type = tmp_raise_type_25;
        Py_INCREF(tmp_raise_type_25);
        exception_value = tmp_raise_value_25;
        exception_lineno = 229;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_73;
    }
    branch_no_99:;
    goto branch_end_98;
    branch_no_98:;
    {
        PyObject *tmp_assign_source_204;
        tmp_assign_source_204 = PyDict_New();
        assert(tmp_class_creation_25__prepared == NULL);
        tmp_class_creation_25__prepared = tmp_assign_source_204;
    }
    branch_end_98:;
    {
        PyObject *tmp_assign_source_205;
        {
            PyObject *tmp_set_locals_25;
            CHECK_OBJECT(tmp_class_creation_25__prepared);
            tmp_set_locals_25 = tmp_class_creation_25__prepared;
            locals_botocore$exceptions$$$class__25_MissingParametersError_229 = tmp_set_locals_25;
            Py_INCREF(tmp_set_locals_25);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__25_MissingParametersError_229, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 229;

            goto try_except_handler_75;
        }
        tmp_dictset_value = mod_consts[124];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__25_MissingParametersError_229, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 229;

            goto try_except_handler_75;
        }
        tmp_dictset_value = mod_consts[123];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__25_MissingParametersError_229, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 229;

            goto try_except_handler_75;
        }
        if (isFrameUnusable(cache_frame_0125e6c19d9a9f06c4f9f829f62b8615_25)) {
            Py_XDECREF(cache_frame_0125e6c19d9a9f06c4f9f829f62b8615_25);

#if _DEBUG_REFCOUNTS
            if (cache_frame_0125e6c19d9a9f06c4f9f829f62b8615_25 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_0125e6c19d9a9f06c4f9f829f62b8615_25 = MAKE_FUNCTION_FRAME(codeobj_0125e6c19d9a9f06c4f9f829f62b8615, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_0125e6c19d9a9f06c4f9f829f62b8615_25->m_type_description == NULL);
        frame_0125e6c19d9a9f06c4f9f829f62b8615_25 = cache_frame_0125e6c19d9a9f06c4f9f829f62b8615_25;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_0125e6c19d9a9f06c4f9f829f62b8615_25);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_0125e6c19d9a9f06c4f9f829f62b8615_25) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[125];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__25_MissingParametersError_229, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 240;
            type_description_2 = "o";
            goto frame_exception_exit_25;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_0125e6c19d9a9f06c4f9f829f62b8615_25);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_24;

        frame_exception_exit_25:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_0125e6c19d9a9f06c4f9f829f62b8615_25);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_0125e6c19d9a9f06c4f9f829f62b8615_25, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_0125e6c19d9a9f06c4f9f829f62b8615_25->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_0125e6c19d9a9f06c4f9f829f62b8615_25, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_0125e6c19d9a9f06c4f9f829f62b8615_25,
            type_description_2,
            outline_24_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_0125e6c19d9a9f06c4f9f829f62b8615_25 == cache_frame_0125e6c19d9a9f06c4f9f829f62b8615_25) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_0125e6c19d9a9f06c4f9f829f62b8615_25);
            cache_frame_0125e6c19d9a9f06c4f9f829f62b8615_25 = NULL;
        }

        assertFrameObject(frame_0125e6c19d9a9f06c4f9f829f62b8615_25);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_24;

        frame_no_exception_24:;
        goto skip_nested_handling_24;
        nested_frame_exit_24:;

        goto try_except_handler_75;
        skip_nested_handling_24:;
        {
            nuitka_bool tmp_condition_result_150;
            PyObject *tmp_cmp_expr_left_25;
            PyObject *tmp_cmp_expr_right_25;
            CHECK_OBJECT(tmp_class_creation_25__bases);
            tmp_cmp_expr_left_25 = tmp_class_creation_25__bases;
            CHECK_OBJECT(tmp_class_creation_25__bases_orig);
            tmp_cmp_expr_right_25 = tmp_class_creation_25__bases_orig;
            tmp_condition_result_150 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_25, tmp_cmp_expr_right_25);
            if (tmp_condition_result_150 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 229;

                goto try_except_handler_75;
            }
            if (tmp_condition_result_150 == NUITKA_BOOL_TRUE) {
                goto branch_yes_100;
            } else {
                goto branch_no_100;
            }
            assert(tmp_condition_result_150 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_100:;
        CHECK_OBJECT(tmp_class_creation_25__bases_orig);
        tmp_dictset_value = tmp_class_creation_25__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__25_MissingParametersError_229, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 229;

            goto try_except_handler_75;
        }
        branch_no_100:;
        {
            PyObject *tmp_assign_source_206;
            PyObject *tmp_called_value_50;
            PyObject *tmp_args_value_50;
            PyObject *tmp_tuple_element_99;
            PyObject *tmp_kwargs_value_50;
            CHECK_OBJECT(tmp_class_creation_25__metaclass);
            tmp_called_value_50 = tmp_class_creation_25__metaclass;
            tmp_tuple_element_99 = mod_consts[123];
            tmp_args_value_50 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_50, 0, tmp_tuple_element_99);
            CHECK_OBJECT(tmp_class_creation_25__bases);
            tmp_tuple_element_99 = tmp_class_creation_25__bases;
            PyTuple_SET_ITEM0(tmp_args_value_50, 1, tmp_tuple_element_99);
            tmp_tuple_element_99 = locals_botocore$exceptions$$$class__25_MissingParametersError_229;
            PyTuple_SET_ITEM0(tmp_args_value_50, 2, tmp_tuple_element_99);
            CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
            tmp_kwargs_value_50 = tmp_class_creation_25__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 229;
            tmp_assign_source_206 = CALL_FUNCTION(tmp_called_value_50, tmp_args_value_50, tmp_kwargs_value_50);
            Py_DECREF(tmp_args_value_50);
            if (tmp_assign_source_206 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 229;

                goto try_except_handler_75;
            }
            assert(outline_24_var___class__ == NULL);
            outline_24_var___class__ = tmp_assign_source_206;
        }
        CHECK_OBJECT(outline_24_var___class__);
        tmp_assign_source_205 = outline_24_var___class__;
        Py_INCREF(tmp_assign_source_205);
        goto try_return_handler_75;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_75:;
        Py_DECREF(locals_botocore$exceptions$$$class__25_MissingParametersError_229);
        locals_botocore$exceptions$$$class__25_MissingParametersError_229 = NULL;
        goto try_return_handler_74;
        // Exception handler code:
        try_except_handler_75:;
        exception_keeper_type_73 = exception_type;
        exception_keeper_value_73 = exception_value;
        exception_keeper_tb_73 = exception_tb;
        exception_keeper_lineno_73 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__25_MissingParametersError_229);
        locals_botocore$exceptions$$$class__25_MissingParametersError_229 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_73;
        exception_value = exception_keeper_value_73;
        exception_tb = exception_keeper_tb_73;
        exception_lineno = exception_keeper_lineno_73;

        goto try_except_handler_74;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_74:;
        CHECK_OBJECT(outline_24_var___class__);
        Py_DECREF(outline_24_var___class__);
        outline_24_var___class__ = NULL;
        goto outline_result_25;
        // Exception handler code:
        try_except_handler_74:;
        exception_keeper_type_74 = exception_type;
        exception_keeper_value_74 = exception_value;
        exception_keeper_tb_74 = exception_tb;
        exception_keeper_lineno_74 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_74;
        exception_value = exception_keeper_value_74;
        exception_tb = exception_keeper_tb_74;
        exception_lineno = exception_keeper_lineno_74;

        goto outline_exception_25;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_25:;
        exception_lineno = 229;
        goto try_except_handler_73;
        outline_result_25:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[123], tmp_assign_source_205);
    }
    goto try_end_25;
    // Exception handler code:
    try_except_handler_73:;
    exception_keeper_type_75 = exception_type;
    exception_keeper_value_75 = exception_value;
    exception_keeper_tb_75 = exception_tb;
    exception_keeper_lineno_75 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_25__bases_orig);
    tmp_class_creation_25__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_25__bases);
    tmp_class_creation_25__bases = NULL;
    Py_XDECREF(tmp_class_creation_25__class_decl_dict);
    tmp_class_creation_25__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_25__metaclass);
    tmp_class_creation_25__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_25__prepared);
    tmp_class_creation_25__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_75;
    exception_value = exception_keeper_value_75;
    exception_tb = exception_keeper_tb_75;
    exception_lineno = exception_keeper_lineno_75;

    goto frame_exception_exit_1;
    // End of try:
    try_end_25:;
    CHECK_OBJECT(tmp_class_creation_25__bases_orig);
    Py_DECREF(tmp_class_creation_25__bases_orig);
    tmp_class_creation_25__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_25__bases);
    Py_DECREF(tmp_class_creation_25__bases);
    tmp_class_creation_25__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
    Py_DECREF(tmp_class_creation_25__class_decl_dict);
    tmp_class_creation_25__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_25__metaclass);
    Py_DECREF(tmp_class_creation_25__metaclass);
    tmp_class_creation_25__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_25__prepared);
    Py_DECREF(tmp_class_creation_25__prepared);
    tmp_class_creation_25__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_207;
        PyObject *tmp_tuple_element_100;
        tmp_tuple_element_100 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_100 == NULL)) {
            tmp_tuple_element_100 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_100 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 244;

            goto try_except_handler_76;
        }
        tmp_assign_source_207 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_207, 0, tmp_tuple_element_100);
        assert(tmp_class_creation_26__bases_orig == NULL);
        tmp_class_creation_26__bases_orig = tmp_assign_source_207;
    }
    {
        PyObject *tmp_assign_source_208;
        PyObject *tmp_dircall_arg1_26;
        CHECK_OBJECT(tmp_class_creation_26__bases_orig);
        tmp_dircall_arg1_26 = tmp_class_creation_26__bases_orig;
        Py_INCREF(tmp_dircall_arg1_26);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_26};
            tmp_assign_source_208 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_208 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 244;

            goto try_except_handler_76;
        }
        assert(tmp_class_creation_26__bases == NULL);
        tmp_class_creation_26__bases = tmp_assign_source_208;
    }
    {
        PyObject *tmp_assign_source_209;
        tmp_assign_source_209 = PyDict_New();
        assert(tmp_class_creation_26__class_decl_dict == NULL);
        tmp_class_creation_26__class_decl_dict = tmp_assign_source_209;
    }
    {
        PyObject *tmp_assign_source_210;
        PyObject *tmp_metaclass_value_26;
        bool tmp_condition_result_151;
        PyObject *tmp_key_value_76;
        PyObject *tmp_dict_arg_value_76;
        PyObject *tmp_dict_arg_value_77;
        PyObject *tmp_key_value_77;
        nuitka_bool tmp_condition_result_152;
        int tmp_truth_name_26;
        PyObject *tmp_type_arg_51;
        PyObject *tmp_expression_value_136;
        PyObject *tmp_subscript_value_26;
        PyObject *tmp_bases_value_26;
        tmp_key_value_76 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
        tmp_dict_arg_value_76 = tmp_class_creation_26__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_76, tmp_key_value_76);
        assert(!(tmp_res == -1));
        tmp_condition_result_151 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_151 != false) {
            goto condexpr_true_51;
        } else {
            goto condexpr_false_51;
        }
        condexpr_true_51:;
        CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
        tmp_dict_arg_value_77 = tmp_class_creation_26__class_decl_dict;
        tmp_key_value_77 = mod_consts[43];
        tmp_metaclass_value_26 = DICT_GET_ITEM0(tmp_dict_arg_value_77, tmp_key_value_77);
        if (tmp_metaclass_value_26 == NULL) {
            tmp_metaclass_value_26 = Py_None;
        }
        assert(!(tmp_metaclass_value_26 == NULL));
        Py_INCREF(tmp_metaclass_value_26);
        goto condexpr_end_51;
        condexpr_false_51:;
        CHECK_OBJECT(tmp_class_creation_26__bases);
        tmp_truth_name_26 = CHECK_IF_TRUE(tmp_class_creation_26__bases);
        if (tmp_truth_name_26 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 244;

            goto try_except_handler_76;
        }
        tmp_condition_result_152 = tmp_truth_name_26 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_152 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_52;
        } else {
            goto condexpr_false_52;
        }
        condexpr_true_52:;
        CHECK_OBJECT(tmp_class_creation_26__bases);
        tmp_expression_value_136 = tmp_class_creation_26__bases;
        tmp_subscript_value_26 = mod_consts[36];
        tmp_type_arg_51 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_136, tmp_subscript_value_26, 0);
        if (tmp_type_arg_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 244;

            goto try_except_handler_76;
        }
        tmp_metaclass_value_26 = BUILTIN_TYPE1(tmp_type_arg_51);
        Py_DECREF(tmp_type_arg_51);
        if (tmp_metaclass_value_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 244;

            goto try_except_handler_76;
        }
        goto condexpr_end_52;
        condexpr_false_52:;
        tmp_metaclass_value_26 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_26);
        condexpr_end_52:;
        condexpr_end_51:;
        CHECK_OBJECT(tmp_class_creation_26__bases);
        tmp_bases_value_26 = tmp_class_creation_26__bases;
        tmp_assign_source_210 = SELECT_METACLASS(tmp_metaclass_value_26, tmp_bases_value_26);
        Py_DECREF(tmp_metaclass_value_26);
        if (tmp_assign_source_210 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 244;

            goto try_except_handler_76;
        }
        assert(tmp_class_creation_26__metaclass == NULL);
        tmp_class_creation_26__metaclass = tmp_assign_source_210;
    }
    {
        bool tmp_condition_result_153;
        PyObject *tmp_key_value_78;
        PyObject *tmp_dict_arg_value_78;
        tmp_key_value_78 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
        tmp_dict_arg_value_78 = tmp_class_creation_26__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_78, tmp_key_value_78);
        assert(!(tmp_res == -1));
        tmp_condition_result_153 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_153 != false) {
            goto branch_yes_101;
        } else {
            goto branch_no_101;
        }
    }
    branch_yes_101:;
    CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_26__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 244;

        goto try_except_handler_76;
    }
    branch_no_101:;
    {
        nuitka_bool tmp_condition_result_154;
        PyObject *tmp_expression_value_137;
        CHECK_OBJECT(tmp_class_creation_26__metaclass);
        tmp_expression_value_137 = tmp_class_creation_26__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_137, mod_consts[44]);
        tmp_condition_result_154 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_154 == NUITKA_BOOL_TRUE) {
            goto branch_yes_102;
        } else {
            goto branch_no_102;
        }
    }
    branch_yes_102:;
    {
        PyObject *tmp_assign_source_211;
        PyObject *tmp_called_value_51;
        PyObject *tmp_expression_value_138;
        PyObject *tmp_args_value_51;
        PyObject *tmp_tuple_element_101;
        PyObject *tmp_kwargs_value_51;
        CHECK_OBJECT(tmp_class_creation_26__metaclass);
        tmp_expression_value_138 = tmp_class_creation_26__metaclass;
        tmp_called_value_51 = LOOKUP_ATTRIBUTE(tmp_expression_value_138, mod_consts[44]);
        if (tmp_called_value_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 244;

            goto try_except_handler_76;
        }
        tmp_tuple_element_101 = mod_consts[126];
        tmp_args_value_51 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_51, 0, tmp_tuple_element_101);
        CHECK_OBJECT(tmp_class_creation_26__bases);
        tmp_tuple_element_101 = tmp_class_creation_26__bases;
        PyTuple_SET_ITEM0(tmp_args_value_51, 1, tmp_tuple_element_101);
        CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
        tmp_kwargs_value_51 = tmp_class_creation_26__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 244;
        tmp_assign_source_211 = CALL_FUNCTION(tmp_called_value_51, tmp_args_value_51, tmp_kwargs_value_51);
        Py_DECREF(tmp_called_value_51);
        Py_DECREF(tmp_args_value_51);
        if (tmp_assign_source_211 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 244;

            goto try_except_handler_76;
        }
        assert(tmp_class_creation_26__prepared == NULL);
        tmp_class_creation_26__prepared = tmp_assign_source_211;
    }
    {
        bool tmp_condition_result_155;
        PyObject *tmp_operand_value_26;
        PyObject *tmp_expression_value_139;
        CHECK_OBJECT(tmp_class_creation_26__prepared);
        tmp_expression_value_139 = tmp_class_creation_26__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_139, mod_consts[46]);
        tmp_operand_value_26 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_26);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 244;

            goto try_except_handler_76;
        }
        tmp_condition_result_155 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_155 != false) {
            goto branch_yes_103;
        } else {
            goto branch_no_103;
        }
    }
    branch_yes_103:;
    {
        PyObject *tmp_raise_type_26;
        PyObject *tmp_raise_value_26;
        PyObject *tmp_left_value_26;
        PyObject *tmp_right_value_26;
        PyObject *tmp_tuple_element_102;
        PyObject *tmp_getattr_target_26;
        PyObject *tmp_getattr_attr_26;
        PyObject *tmp_getattr_default_26;
        tmp_raise_type_26 = PyExc_TypeError;
        tmp_left_value_26 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_26__metaclass);
        tmp_getattr_target_26 = tmp_class_creation_26__metaclass;
        tmp_getattr_attr_26 = mod_consts[48];
        tmp_getattr_default_26 = mod_consts[49];
        tmp_tuple_element_102 = BUILTIN_GETATTR(tmp_getattr_target_26, tmp_getattr_attr_26, tmp_getattr_default_26);
        if (tmp_tuple_element_102 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 244;

            goto try_except_handler_76;
        }
        tmp_right_value_26 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_140;
            PyObject *tmp_type_arg_52;
            PyTuple_SET_ITEM(tmp_right_value_26, 0, tmp_tuple_element_102);
            CHECK_OBJECT(tmp_class_creation_26__prepared);
            tmp_type_arg_52 = tmp_class_creation_26__prepared;
            tmp_expression_value_140 = BUILTIN_TYPE1(tmp_type_arg_52);
            assert(!(tmp_expression_value_140 == NULL));
            tmp_tuple_element_102 = LOOKUP_ATTRIBUTE(tmp_expression_value_140, mod_consts[48]);
            Py_DECREF(tmp_expression_value_140);
            if (tmp_tuple_element_102 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 244;

                goto tuple_build_exception_30;
            }
            PyTuple_SET_ITEM(tmp_right_value_26, 1, tmp_tuple_element_102);
        }
        goto tuple_build_noexception_30;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_30:;
        Py_DECREF(tmp_right_value_26);
        goto try_except_handler_76;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_30:;
        tmp_raise_value_26 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_26, tmp_right_value_26);
        Py_DECREF(tmp_right_value_26);
        if (tmp_raise_value_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 244;

            goto try_except_handler_76;
        }
        exception_type = tmp_raise_type_26;
        Py_INCREF(tmp_raise_type_26);
        exception_value = tmp_raise_value_26;
        exception_lineno = 244;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_76;
    }
    branch_no_103:;
    goto branch_end_102;
    branch_no_102:;
    {
        PyObject *tmp_assign_source_212;
        tmp_assign_source_212 = PyDict_New();
        assert(tmp_class_creation_26__prepared == NULL);
        tmp_class_creation_26__prepared = tmp_assign_source_212;
    }
    branch_end_102:;
    {
        PyObject *tmp_assign_source_213;
        {
            PyObject *tmp_set_locals_26;
            CHECK_OBJECT(tmp_class_creation_26__prepared);
            tmp_set_locals_26 = tmp_class_creation_26__prepared;
            locals_botocore$exceptions$$$class__26_ValidationError_244 = tmp_set_locals_26;
            Py_INCREF(tmp_set_locals_26);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__26_ValidationError_244, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 244;

            goto try_except_handler_78;
        }
        tmp_dictset_value = mod_consts[127];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__26_ValidationError_244, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 244;

            goto try_except_handler_78;
        }
        tmp_dictset_value = mod_consts[126];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__26_ValidationError_244, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 244;

            goto try_except_handler_78;
        }
        if (isFrameUnusable(cache_frame_16dddd152cbad7ef4876d9078fe5ce82_26)) {
            Py_XDECREF(cache_frame_16dddd152cbad7ef4876d9078fe5ce82_26);

#if _DEBUG_REFCOUNTS
            if (cache_frame_16dddd152cbad7ef4876d9078fe5ce82_26 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_16dddd152cbad7ef4876d9078fe5ce82_26 = MAKE_FUNCTION_FRAME(codeobj_16dddd152cbad7ef4876d9078fe5ce82, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_16dddd152cbad7ef4876d9078fe5ce82_26->m_type_description == NULL);
        frame_16dddd152cbad7ef4876d9078fe5ce82_26 = cache_frame_16dddd152cbad7ef4876d9078fe5ce82_26;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_16dddd152cbad7ef4876d9078fe5ce82_26);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_16dddd152cbad7ef4876d9078fe5ce82_26) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[128];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__26_ValidationError_244, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 255;
            type_description_2 = "o";
            goto frame_exception_exit_26;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_16dddd152cbad7ef4876d9078fe5ce82_26);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_25;

        frame_exception_exit_26:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_16dddd152cbad7ef4876d9078fe5ce82_26);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_16dddd152cbad7ef4876d9078fe5ce82_26, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_16dddd152cbad7ef4876d9078fe5ce82_26->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_16dddd152cbad7ef4876d9078fe5ce82_26, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_16dddd152cbad7ef4876d9078fe5ce82_26,
            type_description_2,
            outline_25_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_16dddd152cbad7ef4876d9078fe5ce82_26 == cache_frame_16dddd152cbad7ef4876d9078fe5ce82_26) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_16dddd152cbad7ef4876d9078fe5ce82_26);
            cache_frame_16dddd152cbad7ef4876d9078fe5ce82_26 = NULL;
        }

        assertFrameObject(frame_16dddd152cbad7ef4876d9078fe5ce82_26);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_25;

        frame_no_exception_25:;
        goto skip_nested_handling_25;
        nested_frame_exit_25:;

        goto try_except_handler_78;
        skip_nested_handling_25:;
        {
            nuitka_bool tmp_condition_result_156;
            PyObject *tmp_cmp_expr_left_26;
            PyObject *tmp_cmp_expr_right_26;
            CHECK_OBJECT(tmp_class_creation_26__bases);
            tmp_cmp_expr_left_26 = tmp_class_creation_26__bases;
            CHECK_OBJECT(tmp_class_creation_26__bases_orig);
            tmp_cmp_expr_right_26 = tmp_class_creation_26__bases_orig;
            tmp_condition_result_156 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_26, tmp_cmp_expr_right_26);
            if (tmp_condition_result_156 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 244;

                goto try_except_handler_78;
            }
            if (tmp_condition_result_156 == NUITKA_BOOL_TRUE) {
                goto branch_yes_104;
            } else {
                goto branch_no_104;
            }
            assert(tmp_condition_result_156 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_104:;
        CHECK_OBJECT(tmp_class_creation_26__bases_orig);
        tmp_dictset_value = tmp_class_creation_26__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__26_ValidationError_244, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 244;

            goto try_except_handler_78;
        }
        branch_no_104:;
        {
            PyObject *tmp_assign_source_214;
            PyObject *tmp_called_value_52;
            PyObject *tmp_args_value_52;
            PyObject *tmp_tuple_element_103;
            PyObject *tmp_kwargs_value_52;
            CHECK_OBJECT(tmp_class_creation_26__metaclass);
            tmp_called_value_52 = tmp_class_creation_26__metaclass;
            tmp_tuple_element_103 = mod_consts[126];
            tmp_args_value_52 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_52, 0, tmp_tuple_element_103);
            CHECK_OBJECT(tmp_class_creation_26__bases);
            tmp_tuple_element_103 = tmp_class_creation_26__bases;
            PyTuple_SET_ITEM0(tmp_args_value_52, 1, tmp_tuple_element_103);
            tmp_tuple_element_103 = locals_botocore$exceptions$$$class__26_ValidationError_244;
            PyTuple_SET_ITEM0(tmp_args_value_52, 2, tmp_tuple_element_103);
            CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
            tmp_kwargs_value_52 = tmp_class_creation_26__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 244;
            tmp_assign_source_214 = CALL_FUNCTION(tmp_called_value_52, tmp_args_value_52, tmp_kwargs_value_52);
            Py_DECREF(tmp_args_value_52);
            if (tmp_assign_source_214 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 244;

                goto try_except_handler_78;
            }
            assert(outline_25_var___class__ == NULL);
            outline_25_var___class__ = tmp_assign_source_214;
        }
        CHECK_OBJECT(outline_25_var___class__);
        tmp_assign_source_213 = outline_25_var___class__;
        Py_INCREF(tmp_assign_source_213);
        goto try_return_handler_78;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_78:;
        Py_DECREF(locals_botocore$exceptions$$$class__26_ValidationError_244);
        locals_botocore$exceptions$$$class__26_ValidationError_244 = NULL;
        goto try_return_handler_77;
        // Exception handler code:
        try_except_handler_78:;
        exception_keeper_type_76 = exception_type;
        exception_keeper_value_76 = exception_value;
        exception_keeper_tb_76 = exception_tb;
        exception_keeper_lineno_76 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__26_ValidationError_244);
        locals_botocore$exceptions$$$class__26_ValidationError_244 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_76;
        exception_value = exception_keeper_value_76;
        exception_tb = exception_keeper_tb_76;
        exception_lineno = exception_keeper_lineno_76;

        goto try_except_handler_77;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_77:;
        CHECK_OBJECT(outline_25_var___class__);
        Py_DECREF(outline_25_var___class__);
        outline_25_var___class__ = NULL;
        goto outline_result_26;
        // Exception handler code:
        try_except_handler_77:;
        exception_keeper_type_77 = exception_type;
        exception_keeper_value_77 = exception_value;
        exception_keeper_tb_77 = exception_tb;
        exception_keeper_lineno_77 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_77;
        exception_value = exception_keeper_value_77;
        exception_tb = exception_keeper_tb_77;
        exception_lineno = exception_keeper_lineno_77;

        goto outline_exception_26;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_26:;
        exception_lineno = 244;
        goto try_except_handler_76;
        outline_result_26:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[126], tmp_assign_source_213);
    }
    goto try_end_26;
    // Exception handler code:
    try_except_handler_76:;
    exception_keeper_type_78 = exception_type;
    exception_keeper_value_78 = exception_value;
    exception_keeper_tb_78 = exception_tb;
    exception_keeper_lineno_78 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_26__bases_orig);
    tmp_class_creation_26__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_26__bases);
    tmp_class_creation_26__bases = NULL;
    Py_XDECREF(tmp_class_creation_26__class_decl_dict);
    tmp_class_creation_26__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_26__metaclass);
    tmp_class_creation_26__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_26__prepared);
    tmp_class_creation_26__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_78;
    exception_value = exception_keeper_value_78;
    exception_tb = exception_keeper_tb_78;
    exception_lineno = exception_keeper_lineno_78;

    goto frame_exception_exit_1;
    // End of try:
    try_end_26:;
    CHECK_OBJECT(tmp_class_creation_26__bases_orig);
    Py_DECREF(tmp_class_creation_26__bases_orig);
    tmp_class_creation_26__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_26__bases);
    Py_DECREF(tmp_class_creation_26__bases);
    tmp_class_creation_26__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
    Py_DECREF(tmp_class_creation_26__class_decl_dict);
    tmp_class_creation_26__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_26__metaclass);
    Py_DECREF(tmp_class_creation_26__metaclass);
    tmp_class_creation_26__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_26__prepared);
    Py_DECREF(tmp_class_creation_26__prepared);
    tmp_class_creation_26__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_215;
        PyObject *tmp_tuple_element_104;
        tmp_tuple_element_104 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_104 == NULL)) {
            tmp_tuple_element_104 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_104 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 259;

            goto try_except_handler_79;
        }
        tmp_assign_source_215 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_215, 0, tmp_tuple_element_104);
        assert(tmp_class_creation_27__bases_orig == NULL);
        tmp_class_creation_27__bases_orig = tmp_assign_source_215;
    }
    {
        PyObject *tmp_assign_source_216;
        PyObject *tmp_dircall_arg1_27;
        CHECK_OBJECT(tmp_class_creation_27__bases_orig);
        tmp_dircall_arg1_27 = tmp_class_creation_27__bases_orig;
        Py_INCREF(tmp_dircall_arg1_27);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_27};
            tmp_assign_source_216 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_216 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 259;

            goto try_except_handler_79;
        }
        assert(tmp_class_creation_27__bases == NULL);
        tmp_class_creation_27__bases = tmp_assign_source_216;
    }
    {
        PyObject *tmp_assign_source_217;
        tmp_assign_source_217 = PyDict_New();
        assert(tmp_class_creation_27__class_decl_dict == NULL);
        tmp_class_creation_27__class_decl_dict = tmp_assign_source_217;
    }
    {
        PyObject *tmp_assign_source_218;
        PyObject *tmp_metaclass_value_27;
        bool tmp_condition_result_157;
        PyObject *tmp_key_value_79;
        PyObject *tmp_dict_arg_value_79;
        PyObject *tmp_dict_arg_value_80;
        PyObject *tmp_key_value_80;
        nuitka_bool tmp_condition_result_158;
        int tmp_truth_name_27;
        PyObject *tmp_type_arg_53;
        PyObject *tmp_expression_value_141;
        PyObject *tmp_subscript_value_27;
        PyObject *tmp_bases_value_27;
        tmp_key_value_79 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
        tmp_dict_arg_value_79 = tmp_class_creation_27__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_79, tmp_key_value_79);
        assert(!(tmp_res == -1));
        tmp_condition_result_157 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_157 != false) {
            goto condexpr_true_53;
        } else {
            goto condexpr_false_53;
        }
        condexpr_true_53:;
        CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
        tmp_dict_arg_value_80 = tmp_class_creation_27__class_decl_dict;
        tmp_key_value_80 = mod_consts[43];
        tmp_metaclass_value_27 = DICT_GET_ITEM0(tmp_dict_arg_value_80, tmp_key_value_80);
        if (tmp_metaclass_value_27 == NULL) {
            tmp_metaclass_value_27 = Py_None;
        }
        assert(!(tmp_metaclass_value_27 == NULL));
        Py_INCREF(tmp_metaclass_value_27);
        goto condexpr_end_53;
        condexpr_false_53:;
        CHECK_OBJECT(tmp_class_creation_27__bases);
        tmp_truth_name_27 = CHECK_IF_TRUE(tmp_class_creation_27__bases);
        if (tmp_truth_name_27 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 259;

            goto try_except_handler_79;
        }
        tmp_condition_result_158 = tmp_truth_name_27 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_158 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_54;
        } else {
            goto condexpr_false_54;
        }
        condexpr_true_54:;
        CHECK_OBJECT(tmp_class_creation_27__bases);
        tmp_expression_value_141 = tmp_class_creation_27__bases;
        tmp_subscript_value_27 = mod_consts[36];
        tmp_type_arg_53 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_141, tmp_subscript_value_27, 0);
        if (tmp_type_arg_53 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 259;

            goto try_except_handler_79;
        }
        tmp_metaclass_value_27 = BUILTIN_TYPE1(tmp_type_arg_53);
        Py_DECREF(tmp_type_arg_53);
        if (tmp_metaclass_value_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 259;

            goto try_except_handler_79;
        }
        goto condexpr_end_54;
        condexpr_false_54:;
        tmp_metaclass_value_27 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_27);
        condexpr_end_54:;
        condexpr_end_53:;
        CHECK_OBJECT(tmp_class_creation_27__bases);
        tmp_bases_value_27 = tmp_class_creation_27__bases;
        tmp_assign_source_218 = SELECT_METACLASS(tmp_metaclass_value_27, tmp_bases_value_27);
        Py_DECREF(tmp_metaclass_value_27);
        if (tmp_assign_source_218 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 259;

            goto try_except_handler_79;
        }
        assert(tmp_class_creation_27__metaclass == NULL);
        tmp_class_creation_27__metaclass = tmp_assign_source_218;
    }
    {
        bool tmp_condition_result_159;
        PyObject *tmp_key_value_81;
        PyObject *tmp_dict_arg_value_81;
        tmp_key_value_81 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
        tmp_dict_arg_value_81 = tmp_class_creation_27__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_81, tmp_key_value_81);
        assert(!(tmp_res == -1));
        tmp_condition_result_159 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_159 != false) {
            goto branch_yes_105;
        } else {
            goto branch_no_105;
        }
    }
    branch_yes_105:;
    CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_27__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 259;

        goto try_except_handler_79;
    }
    branch_no_105:;
    {
        nuitka_bool tmp_condition_result_160;
        PyObject *tmp_expression_value_142;
        CHECK_OBJECT(tmp_class_creation_27__metaclass);
        tmp_expression_value_142 = tmp_class_creation_27__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_142, mod_consts[44]);
        tmp_condition_result_160 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_160 == NUITKA_BOOL_TRUE) {
            goto branch_yes_106;
        } else {
            goto branch_no_106;
        }
    }
    branch_yes_106:;
    {
        PyObject *tmp_assign_source_219;
        PyObject *tmp_called_value_53;
        PyObject *tmp_expression_value_143;
        PyObject *tmp_args_value_53;
        PyObject *tmp_tuple_element_105;
        PyObject *tmp_kwargs_value_53;
        CHECK_OBJECT(tmp_class_creation_27__metaclass);
        tmp_expression_value_143 = tmp_class_creation_27__metaclass;
        tmp_called_value_53 = LOOKUP_ATTRIBUTE(tmp_expression_value_143, mod_consts[44]);
        if (tmp_called_value_53 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 259;

            goto try_except_handler_79;
        }
        tmp_tuple_element_105 = mod_consts[129];
        tmp_args_value_53 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_53, 0, tmp_tuple_element_105);
        CHECK_OBJECT(tmp_class_creation_27__bases);
        tmp_tuple_element_105 = tmp_class_creation_27__bases;
        PyTuple_SET_ITEM0(tmp_args_value_53, 1, tmp_tuple_element_105);
        CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
        tmp_kwargs_value_53 = tmp_class_creation_27__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 259;
        tmp_assign_source_219 = CALL_FUNCTION(tmp_called_value_53, tmp_args_value_53, tmp_kwargs_value_53);
        Py_DECREF(tmp_called_value_53);
        Py_DECREF(tmp_args_value_53);
        if (tmp_assign_source_219 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 259;

            goto try_except_handler_79;
        }
        assert(tmp_class_creation_27__prepared == NULL);
        tmp_class_creation_27__prepared = tmp_assign_source_219;
    }
    {
        bool tmp_condition_result_161;
        PyObject *tmp_operand_value_27;
        PyObject *tmp_expression_value_144;
        CHECK_OBJECT(tmp_class_creation_27__prepared);
        tmp_expression_value_144 = tmp_class_creation_27__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_144, mod_consts[46]);
        tmp_operand_value_27 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_27);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 259;

            goto try_except_handler_79;
        }
        tmp_condition_result_161 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_161 != false) {
            goto branch_yes_107;
        } else {
            goto branch_no_107;
        }
    }
    branch_yes_107:;
    {
        PyObject *tmp_raise_type_27;
        PyObject *tmp_raise_value_27;
        PyObject *tmp_left_value_27;
        PyObject *tmp_right_value_27;
        PyObject *tmp_tuple_element_106;
        PyObject *tmp_getattr_target_27;
        PyObject *tmp_getattr_attr_27;
        PyObject *tmp_getattr_default_27;
        tmp_raise_type_27 = PyExc_TypeError;
        tmp_left_value_27 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_27__metaclass);
        tmp_getattr_target_27 = tmp_class_creation_27__metaclass;
        tmp_getattr_attr_27 = mod_consts[48];
        tmp_getattr_default_27 = mod_consts[49];
        tmp_tuple_element_106 = BUILTIN_GETATTR(tmp_getattr_target_27, tmp_getattr_attr_27, tmp_getattr_default_27);
        if (tmp_tuple_element_106 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 259;

            goto try_except_handler_79;
        }
        tmp_right_value_27 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_145;
            PyObject *tmp_type_arg_54;
            PyTuple_SET_ITEM(tmp_right_value_27, 0, tmp_tuple_element_106);
            CHECK_OBJECT(tmp_class_creation_27__prepared);
            tmp_type_arg_54 = tmp_class_creation_27__prepared;
            tmp_expression_value_145 = BUILTIN_TYPE1(tmp_type_arg_54);
            assert(!(tmp_expression_value_145 == NULL));
            tmp_tuple_element_106 = LOOKUP_ATTRIBUTE(tmp_expression_value_145, mod_consts[48]);
            Py_DECREF(tmp_expression_value_145);
            if (tmp_tuple_element_106 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 259;

                goto tuple_build_exception_31;
            }
            PyTuple_SET_ITEM(tmp_right_value_27, 1, tmp_tuple_element_106);
        }
        goto tuple_build_noexception_31;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_31:;
        Py_DECREF(tmp_right_value_27);
        goto try_except_handler_79;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_31:;
        tmp_raise_value_27 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_27, tmp_right_value_27);
        Py_DECREF(tmp_right_value_27);
        if (tmp_raise_value_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 259;

            goto try_except_handler_79;
        }
        exception_type = tmp_raise_type_27;
        Py_INCREF(tmp_raise_type_27);
        exception_value = tmp_raise_value_27;
        exception_lineno = 259;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_79;
    }
    branch_no_107:;
    goto branch_end_106;
    branch_no_106:;
    {
        PyObject *tmp_assign_source_220;
        tmp_assign_source_220 = PyDict_New();
        assert(tmp_class_creation_27__prepared == NULL);
        tmp_class_creation_27__prepared = tmp_assign_source_220;
    }
    branch_end_106:;
    {
        PyObject *tmp_assign_source_221;
        {
            PyObject *tmp_set_locals_27;
            CHECK_OBJECT(tmp_class_creation_27__prepared);
            tmp_set_locals_27 = tmp_class_creation_27__prepared;
            locals_botocore$exceptions$$$class__27_ParamValidationError_259 = tmp_set_locals_27;
            Py_INCREF(tmp_set_locals_27);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__27_ParamValidationError_259, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 259;

            goto try_except_handler_81;
        }
        tmp_dictset_value = mod_consts[129];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__27_ParamValidationError_259, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 259;

            goto try_except_handler_81;
        }
        if (isFrameUnusable(cache_frame_c5d60c00d3cd6062b910619e1719f76a_27)) {
            Py_XDECREF(cache_frame_c5d60c00d3cd6062b910619e1719f76a_27);

#if _DEBUG_REFCOUNTS
            if (cache_frame_c5d60c00d3cd6062b910619e1719f76a_27 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_c5d60c00d3cd6062b910619e1719f76a_27 = MAKE_FUNCTION_FRAME(codeobj_c5d60c00d3cd6062b910619e1719f76a, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_c5d60c00d3cd6062b910619e1719f76a_27->m_type_description == NULL);
        frame_c5d60c00d3cd6062b910619e1719f76a_27 = cache_frame_c5d60c00d3cd6062b910619e1719f76a_27;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_c5d60c00d3cd6062b910619e1719f76a_27);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_c5d60c00d3cd6062b910619e1719f76a_27) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[130];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__27_ParamValidationError_259, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 260;
            type_description_2 = "o";
            goto frame_exception_exit_27;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_c5d60c00d3cd6062b910619e1719f76a_27);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_26;

        frame_exception_exit_27:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_c5d60c00d3cd6062b910619e1719f76a_27);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_c5d60c00d3cd6062b910619e1719f76a_27, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_c5d60c00d3cd6062b910619e1719f76a_27->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_c5d60c00d3cd6062b910619e1719f76a_27, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_c5d60c00d3cd6062b910619e1719f76a_27,
            type_description_2,
            outline_26_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_c5d60c00d3cd6062b910619e1719f76a_27 == cache_frame_c5d60c00d3cd6062b910619e1719f76a_27) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_c5d60c00d3cd6062b910619e1719f76a_27);
            cache_frame_c5d60c00d3cd6062b910619e1719f76a_27 = NULL;
        }

        assertFrameObject(frame_c5d60c00d3cd6062b910619e1719f76a_27);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_26;

        frame_no_exception_26:;
        goto skip_nested_handling_26;
        nested_frame_exit_26:;

        goto try_except_handler_81;
        skip_nested_handling_26:;
        {
            nuitka_bool tmp_condition_result_162;
            PyObject *tmp_cmp_expr_left_27;
            PyObject *tmp_cmp_expr_right_27;
            CHECK_OBJECT(tmp_class_creation_27__bases);
            tmp_cmp_expr_left_27 = tmp_class_creation_27__bases;
            CHECK_OBJECT(tmp_class_creation_27__bases_orig);
            tmp_cmp_expr_right_27 = tmp_class_creation_27__bases_orig;
            tmp_condition_result_162 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_27, tmp_cmp_expr_right_27);
            if (tmp_condition_result_162 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 259;

                goto try_except_handler_81;
            }
            if (tmp_condition_result_162 == NUITKA_BOOL_TRUE) {
                goto branch_yes_108;
            } else {
                goto branch_no_108;
            }
            assert(tmp_condition_result_162 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_108:;
        CHECK_OBJECT(tmp_class_creation_27__bases_orig);
        tmp_dictset_value = tmp_class_creation_27__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__27_ParamValidationError_259, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 259;

            goto try_except_handler_81;
        }
        branch_no_108:;
        {
            PyObject *tmp_assign_source_222;
            PyObject *tmp_called_value_54;
            PyObject *tmp_args_value_54;
            PyObject *tmp_tuple_element_107;
            PyObject *tmp_kwargs_value_54;
            CHECK_OBJECT(tmp_class_creation_27__metaclass);
            tmp_called_value_54 = tmp_class_creation_27__metaclass;
            tmp_tuple_element_107 = mod_consts[129];
            tmp_args_value_54 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_54, 0, tmp_tuple_element_107);
            CHECK_OBJECT(tmp_class_creation_27__bases);
            tmp_tuple_element_107 = tmp_class_creation_27__bases;
            PyTuple_SET_ITEM0(tmp_args_value_54, 1, tmp_tuple_element_107);
            tmp_tuple_element_107 = locals_botocore$exceptions$$$class__27_ParamValidationError_259;
            PyTuple_SET_ITEM0(tmp_args_value_54, 2, tmp_tuple_element_107);
            CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
            tmp_kwargs_value_54 = tmp_class_creation_27__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 259;
            tmp_assign_source_222 = CALL_FUNCTION(tmp_called_value_54, tmp_args_value_54, tmp_kwargs_value_54);
            Py_DECREF(tmp_args_value_54);
            if (tmp_assign_source_222 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 259;

                goto try_except_handler_81;
            }
            assert(outline_26_var___class__ == NULL);
            outline_26_var___class__ = tmp_assign_source_222;
        }
        CHECK_OBJECT(outline_26_var___class__);
        tmp_assign_source_221 = outline_26_var___class__;
        Py_INCREF(tmp_assign_source_221);
        goto try_return_handler_81;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_81:;
        Py_DECREF(locals_botocore$exceptions$$$class__27_ParamValidationError_259);
        locals_botocore$exceptions$$$class__27_ParamValidationError_259 = NULL;
        goto try_return_handler_80;
        // Exception handler code:
        try_except_handler_81:;
        exception_keeper_type_79 = exception_type;
        exception_keeper_value_79 = exception_value;
        exception_keeper_tb_79 = exception_tb;
        exception_keeper_lineno_79 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__27_ParamValidationError_259);
        locals_botocore$exceptions$$$class__27_ParamValidationError_259 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_79;
        exception_value = exception_keeper_value_79;
        exception_tb = exception_keeper_tb_79;
        exception_lineno = exception_keeper_lineno_79;

        goto try_except_handler_80;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_80:;
        CHECK_OBJECT(outline_26_var___class__);
        Py_DECREF(outline_26_var___class__);
        outline_26_var___class__ = NULL;
        goto outline_result_27;
        // Exception handler code:
        try_except_handler_80:;
        exception_keeper_type_80 = exception_type;
        exception_keeper_value_80 = exception_value;
        exception_keeper_tb_80 = exception_tb;
        exception_keeper_lineno_80 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_80;
        exception_value = exception_keeper_value_80;
        exception_tb = exception_keeper_tb_80;
        exception_lineno = exception_keeper_lineno_80;

        goto outline_exception_27;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_27:;
        exception_lineno = 259;
        goto try_except_handler_79;
        outline_result_27:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[129], tmp_assign_source_221);
    }
    goto try_end_27;
    // Exception handler code:
    try_except_handler_79:;
    exception_keeper_type_81 = exception_type;
    exception_keeper_value_81 = exception_value;
    exception_keeper_tb_81 = exception_tb;
    exception_keeper_lineno_81 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_27__bases_orig);
    tmp_class_creation_27__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_27__bases);
    tmp_class_creation_27__bases = NULL;
    Py_XDECREF(tmp_class_creation_27__class_decl_dict);
    tmp_class_creation_27__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_27__metaclass);
    tmp_class_creation_27__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_27__prepared);
    tmp_class_creation_27__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_81;
    exception_value = exception_keeper_value_81;
    exception_tb = exception_keeper_tb_81;
    exception_lineno = exception_keeper_lineno_81;

    goto frame_exception_exit_1;
    // End of try:
    try_end_27:;
    CHECK_OBJECT(tmp_class_creation_27__bases_orig);
    Py_DECREF(tmp_class_creation_27__bases_orig);
    tmp_class_creation_27__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_27__bases);
    Py_DECREF(tmp_class_creation_27__bases);
    tmp_class_creation_27__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
    Py_DECREF(tmp_class_creation_27__class_decl_dict);
    tmp_class_creation_27__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_27__metaclass);
    Py_DECREF(tmp_class_creation_27__metaclass);
    tmp_class_creation_27__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_27__prepared);
    Py_DECREF(tmp_class_creation_27__prepared);
    tmp_class_creation_27__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_223;
        PyObject *tmp_tuple_element_108;
        tmp_tuple_element_108 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[126]);

        if (unlikely(tmp_tuple_element_108 == NULL)) {
            tmp_tuple_element_108 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[126]);
        }

        if (tmp_tuple_element_108 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 266;

            goto try_except_handler_82;
        }
        tmp_assign_source_223 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_223, 0, tmp_tuple_element_108);
        assert(tmp_class_creation_28__bases_orig == NULL);
        tmp_class_creation_28__bases_orig = tmp_assign_source_223;
    }
    {
        PyObject *tmp_assign_source_224;
        PyObject *tmp_dircall_arg1_28;
        CHECK_OBJECT(tmp_class_creation_28__bases_orig);
        tmp_dircall_arg1_28 = tmp_class_creation_28__bases_orig;
        Py_INCREF(tmp_dircall_arg1_28);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_28};
            tmp_assign_source_224 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_224 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 266;

            goto try_except_handler_82;
        }
        assert(tmp_class_creation_28__bases == NULL);
        tmp_class_creation_28__bases = tmp_assign_source_224;
    }
    {
        PyObject *tmp_assign_source_225;
        tmp_assign_source_225 = PyDict_New();
        assert(tmp_class_creation_28__class_decl_dict == NULL);
        tmp_class_creation_28__class_decl_dict = tmp_assign_source_225;
    }
    {
        PyObject *tmp_assign_source_226;
        PyObject *tmp_metaclass_value_28;
        bool tmp_condition_result_163;
        PyObject *tmp_key_value_82;
        PyObject *tmp_dict_arg_value_82;
        PyObject *tmp_dict_arg_value_83;
        PyObject *tmp_key_value_83;
        nuitka_bool tmp_condition_result_164;
        int tmp_truth_name_28;
        PyObject *tmp_type_arg_55;
        PyObject *tmp_expression_value_146;
        PyObject *tmp_subscript_value_28;
        PyObject *tmp_bases_value_28;
        tmp_key_value_82 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
        tmp_dict_arg_value_82 = tmp_class_creation_28__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_82, tmp_key_value_82);
        assert(!(tmp_res == -1));
        tmp_condition_result_163 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_163 != false) {
            goto condexpr_true_55;
        } else {
            goto condexpr_false_55;
        }
        condexpr_true_55:;
        CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
        tmp_dict_arg_value_83 = tmp_class_creation_28__class_decl_dict;
        tmp_key_value_83 = mod_consts[43];
        tmp_metaclass_value_28 = DICT_GET_ITEM0(tmp_dict_arg_value_83, tmp_key_value_83);
        if (tmp_metaclass_value_28 == NULL) {
            tmp_metaclass_value_28 = Py_None;
        }
        assert(!(tmp_metaclass_value_28 == NULL));
        Py_INCREF(tmp_metaclass_value_28);
        goto condexpr_end_55;
        condexpr_false_55:;
        CHECK_OBJECT(tmp_class_creation_28__bases);
        tmp_truth_name_28 = CHECK_IF_TRUE(tmp_class_creation_28__bases);
        if (tmp_truth_name_28 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 266;

            goto try_except_handler_82;
        }
        tmp_condition_result_164 = tmp_truth_name_28 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_164 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_56;
        } else {
            goto condexpr_false_56;
        }
        condexpr_true_56:;
        CHECK_OBJECT(tmp_class_creation_28__bases);
        tmp_expression_value_146 = tmp_class_creation_28__bases;
        tmp_subscript_value_28 = mod_consts[36];
        tmp_type_arg_55 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_146, tmp_subscript_value_28, 0);
        if (tmp_type_arg_55 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 266;

            goto try_except_handler_82;
        }
        tmp_metaclass_value_28 = BUILTIN_TYPE1(tmp_type_arg_55);
        Py_DECREF(tmp_type_arg_55);
        if (tmp_metaclass_value_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 266;

            goto try_except_handler_82;
        }
        goto condexpr_end_56;
        condexpr_false_56:;
        tmp_metaclass_value_28 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_28);
        condexpr_end_56:;
        condexpr_end_55:;
        CHECK_OBJECT(tmp_class_creation_28__bases);
        tmp_bases_value_28 = tmp_class_creation_28__bases;
        tmp_assign_source_226 = SELECT_METACLASS(tmp_metaclass_value_28, tmp_bases_value_28);
        Py_DECREF(tmp_metaclass_value_28);
        if (tmp_assign_source_226 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 266;

            goto try_except_handler_82;
        }
        assert(tmp_class_creation_28__metaclass == NULL);
        tmp_class_creation_28__metaclass = tmp_assign_source_226;
    }
    {
        bool tmp_condition_result_165;
        PyObject *tmp_key_value_84;
        PyObject *tmp_dict_arg_value_84;
        tmp_key_value_84 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
        tmp_dict_arg_value_84 = tmp_class_creation_28__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_84, tmp_key_value_84);
        assert(!(tmp_res == -1));
        tmp_condition_result_165 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_165 != false) {
            goto branch_yes_109;
        } else {
            goto branch_no_109;
        }
    }
    branch_yes_109:;
    CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_28__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 266;

        goto try_except_handler_82;
    }
    branch_no_109:;
    {
        nuitka_bool tmp_condition_result_166;
        PyObject *tmp_expression_value_147;
        CHECK_OBJECT(tmp_class_creation_28__metaclass);
        tmp_expression_value_147 = tmp_class_creation_28__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_147, mod_consts[44]);
        tmp_condition_result_166 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_166 == NUITKA_BOOL_TRUE) {
            goto branch_yes_110;
        } else {
            goto branch_no_110;
        }
    }
    branch_yes_110:;
    {
        PyObject *tmp_assign_source_227;
        PyObject *tmp_called_value_55;
        PyObject *tmp_expression_value_148;
        PyObject *tmp_args_value_55;
        PyObject *tmp_tuple_element_109;
        PyObject *tmp_kwargs_value_55;
        CHECK_OBJECT(tmp_class_creation_28__metaclass);
        tmp_expression_value_148 = tmp_class_creation_28__metaclass;
        tmp_called_value_55 = LOOKUP_ATTRIBUTE(tmp_expression_value_148, mod_consts[44]);
        if (tmp_called_value_55 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 266;

            goto try_except_handler_82;
        }
        tmp_tuple_element_109 = mod_consts[131];
        tmp_args_value_55 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_55, 0, tmp_tuple_element_109);
        CHECK_OBJECT(tmp_class_creation_28__bases);
        tmp_tuple_element_109 = tmp_class_creation_28__bases;
        PyTuple_SET_ITEM0(tmp_args_value_55, 1, tmp_tuple_element_109);
        CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
        tmp_kwargs_value_55 = tmp_class_creation_28__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 266;
        tmp_assign_source_227 = CALL_FUNCTION(tmp_called_value_55, tmp_args_value_55, tmp_kwargs_value_55);
        Py_DECREF(tmp_called_value_55);
        Py_DECREF(tmp_args_value_55);
        if (tmp_assign_source_227 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 266;

            goto try_except_handler_82;
        }
        assert(tmp_class_creation_28__prepared == NULL);
        tmp_class_creation_28__prepared = tmp_assign_source_227;
    }
    {
        bool tmp_condition_result_167;
        PyObject *tmp_operand_value_28;
        PyObject *tmp_expression_value_149;
        CHECK_OBJECT(tmp_class_creation_28__prepared);
        tmp_expression_value_149 = tmp_class_creation_28__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_149, mod_consts[46]);
        tmp_operand_value_28 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_28);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 266;

            goto try_except_handler_82;
        }
        tmp_condition_result_167 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_167 != false) {
            goto branch_yes_111;
        } else {
            goto branch_no_111;
        }
    }
    branch_yes_111:;
    {
        PyObject *tmp_raise_type_28;
        PyObject *tmp_raise_value_28;
        PyObject *tmp_left_value_28;
        PyObject *tmp_right_value_28;
        PyObject *tmp_tuple_element_110;
        PyObject *tmp_getattr_target_28;
        PyObject *tmp_getattr_attr_28;
        PyObject *tmp_getattr_default_28;
        tmp_raise_type_28 = PyExc_TypeError;
        tmp_left_value_28 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_28__metaclass);
        tmp_getattr_target_28 = tmp_class_creation_28__metaclass;
        tmp_getattr_attr_28 = mod_consts[48];
        tmp_getattr_default_28 = mod_consts[49];
        tmp_tuple_element_110 = BUILTIN_GETATTR(tmp_getattr_target_28, tmp_getattr_attr_28, tmp_getattr_default_28);
        if (tmp_tuple_element_110 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 266;

            goto try_except_handler_82;
        }
        tmp_right_value_28 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_150;
            PyObject *tmp_type_arg_56;
            PyTuple_SET_ITEM(tmp_right_value_28, 0, tmp_tuple_element_110);
            CHECK_OBJECT(tmp_class_creation_28__prepared);
            tmp_type_arg_56 = tmp_class_creation_28__prepared;
            tmp_expression_value_150 = BUILTIN_TYPE1(tmp_type_arg_56);
            assert(!(tmp_expression_value_150 == NULL));
            tmp_tuple_element_110 = LOOKUP_ATTRIBUTE(tmp_expression_value_150, mod_consts[48]);
            Py_DECREF(tmp_expression_value_150);
            if (tmp_tuple_element_110 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 266;

                goto tuple_build_exception_32;
            }
            PyTuple_SET_ITEM(tmp_right_value_28, 1, tmp_tuple_element_110);
        }
        goto tuple_build_noexception_32;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_32:;
        Py_DECREF(tmp_right_value_28);
        goto try_except_handler_82;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_32:;
        tmp_raise_value_28 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_28, tmp_right_value_28);
        Py_DECREF(tmp_right_value_28);
        if (tmp_raise_value_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 266;

            goto try_except_handler_82;
        }
        exception_type = tmp_raise_type_28;
        Py_INCREF(tmp_raise_type_28);
        exception_value = tmp_raise_value_28;
        exception_lineno = 266;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_82;
    }
    branch_no_111:;
    goto branch_end_110;
    branch_no_110:;
    {
        PyObject *tmp_assign_source_228;
        tmp_assign_source_228 = PyDict_New();
        assert(tmp_class_creation_28__prepared == NULL);
        tmp_class_creation_28__prepared = tmp_assign_source_228;
    }
    branch_end_110:;
    {
        PyObject *tmp_assign_source_229;
        {
            PyObject *tmp_set_locals_28;
            CHECK_OBJECT(tmp_class_creation_28__prepared);
            tmp_set_locals_28 = tmp_class_creation_28__prepared;
            locals_botocore$exceptions$$$class__28_UnknownKeyError_266 = tmp_set_locals_28;
            Py_INCREF(tmp_set_locals_28);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__28_UnknownKeyError_266, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 266;

            goto try_except_handler_84;
        }
        tmp_dictset_value = mod_consts[132];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__28_UnknownKeyError_266, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 266;

            goto try_except_handler_84;
        }
        tmp_dictset_value = mod_consts[131];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__28_UnknownKeyError_266, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 266;

            goto try_except_handler_84;
        }
        if (isFrameUnusable(cache_frame_bf1a94ba48b83b32a393f271129dd85f_28)) {
            Py_XDECREF(cache_frame_bf1a94ba48b83b32a393f271129dd85f_28);

#if _DEBUG_REFCOUNTS
            if (cache_frame_bf1a94ba48b83b32a393f271129dd85f_28 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_bf1a94ba48b83b32a393f271129dd85f_28 = MAKE_FUNCTION_FRAME(codeobj_bf1a94ba48b83b32a393f271129dd85f, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_bf1a94ba48b83b32a393f271129dd85f_28->m_type_description == NULL);
        frame_bf1a94ba48b83b32a393f271129dd85f_28 = cache_frame_bf1a94ba48b83b32a393f271129dd85f_28;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_bf1a94ba48b83b32a393f271129dd85f_28);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_bf1a94ba48b83b32a393f271129dd85f_28) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[133];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__28_UnknownKeyError_266, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 274;
            type_description_2 = "o";
            goto frame_exception_exit_28;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_bf1a94ba48b83b32a393f271129dd85f_28);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_27;

        frame_exception_exit_28:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_bf1a94ba48b83b32a393f271129dd85f_28);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_bf1a94ba48b83b32a393f271129dd85f_28, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_bf1a94ba48b83b32a393f271129dd85f_28->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_bf1a94ba48b83b32a393f271129dd85f_28, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_bf1a94ba48b83b32a393f271129dd85f_28,
            type_description_2,
            outline_27_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_bf1a94ba48b83b32a393f271129dd85f_28 == cache_frame_bf1a94ba48b83b32a393f271129dd85f_28) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_bf1a94ba48b83b32a393f271129dd85f_28);
            cache_frame_bf1a94ba48b83b32a393f271129dd85f_28 = NULL;
        }

        assertFrameObject(frame_bf1a94ba48b83b32a393f271129dd85f_28);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_27;

        frame_no_exception_27:;
        goto skip_nested_handling_27;
        nested_frame_exit_27:;

        goto try_except_handler_84;
        skip_nested_handling_27:;
        {
            nuitka_bool tmp_condition_result_168;
            PyObject *tmp_cmp_expr_left_28;
            PyObject *tmp_cmp_expr_right_28;
            CHECK_OBJECT(tmp_class_creation_28__bases);
            tmp_cmp_expr_left_28 = tmp_class_creation_28__bases;
            CHECK_OBJECT(tmp_class_creation_28__bases_orig);
            tmp_cmp_expr_right_28 = tmp_class_creation_28__bases_orig;
            tmp_condition_result_168 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_28, tmp_cmp_expr_right_28);
            if (tmp_condition_result_168 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 266;

                goto try_except_handler_84;
            }
            if (tmp_condition_result_168 == NUITKA_BOOL_TRUE) {
                goto branch_yes_112;
            } else {
                goto branch_no_112;
            }
            assert(tmp_condition_result_168 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_112:;
        CHECK_OBJECT(tmp_class_creation_28__bases_orig);
        tmp_dictset_value = tmp_class_creation_28__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__28_UnknownKeyError_266, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 266;

            goto try_except_handler_84;
        }
        branch_no_112:;
        {
            PyObject *tmp_assign_source_230;
            PyObject *tmp_called_value_56;
            PyObject *tmp_args_value_56;
            PyObject *tmp_tuple_element_111;
            PyObject *tmp_kwargs_value_56;
            CHECK_OBJECT(tmp_class_creation_28__metaclass);
            tmp_called_value_56 = tmp_class_creation_28__metaclass;
            tmp_tuple_element_111 = mod_consts[131];
            tmp_args_value_56 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_56, 0, tmp_tuple_element_111);
            CHECK_OBJECT(tmp_class_creation_28__bases);
            tmp_tuple_element_111 = tmp_class_creation_28__bases;
            PyTuple_SET_ITEM0(tmp_args_value_56, 1, tmp_tuple_element_111);
            tmp_tuple_element_111 = locals_botocore$exceptions$$$class__28_UnknownKeyError_266;
            PyTuple_SET_ITEM0(tmp_args_value_56, 2, tmp_tuple_element_111);
            CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
            tmp_kwargs_value_56 = tmp_class_creation_28__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 266;
            tmp_assign_source_230 = CALL_FUNCTION(tmp_called_value_56, tmp_args_value_56, tmp_kwargs_value_56);
            Py_DECREF(tmp_args_value_56);
            if (tmp_assign_source_230 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 266;

                goto try_except_handler_84;
            }
            assert(outline_27_var___class__ == NULL);
            outline_27_var___class__ = tmp_assign_source_230;
        }
        CHECK_OBJECT(outline_27_var___class__);
        tmp_assign_source_229 = outline_27_var___class__;
        Py_INCREF(tmp_assign_source_229);
        goto try_return_handler_84;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_84:;
        Py_DECREF(locals_botocore$exceptions$$$class__28_UnknownKeyError_266);
        locals_botocore$exceptions$$$class__28_UnknownKeyError_266 = NULL;
        goto try_return_handler_83;
        // Exception handler code:
        try_except_handler_84:;
        exception_keeper_type_82 = exception_type;
        exception_keeper_value_82 = exception_value;
        exception_keeper_tb_82 = exception_tb;
        exception_keeper_lineno_82 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__28_UnknownKeyError_266);
        locals_botocore$exceptions$$$class__28_UnknownKeyError_266 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_82;
        exception_value = exception_keeper_value_82;
        exception_tb = exception_keeper_tb_82;
        exception_lineno = exception_keeper_lineno_82;

        goto try_except_handler_83;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_83:;
        CHECK_OBJECT(outline_27_var___class__);
        Py_DECREF(outline_27_var___class__);
        outline_27_var___class__ = NULL;
        goto outline_result_28;
        // Exception handler code:
        try_except_handler_83:;
        exception_keeper_type_83 = exception_type;
        exception_keeper_value_83 = exception_value;
        exception_keeper_tb_83 = exception_tb;
        exception_keeper_lineno_83 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_83;
        exception_value = exception_keeper_value_83;
        exception_tb = exception_keeper_tb_83;
        exception_lineno = exception_keeper_lineno_83;

        goto outline_exception_28;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_28:;
        exception_lineno = 266;
        goto try_except_handler_82;
        outline_result_28:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[131], tmp_assign_source_229);
    }
    goto try_end_28;
    // Exception handler code:
    try_except_handler_82:;
    exception_keeper_type_84 = exception_type;
    exception_keeper_value_84 = exception_value;
    exception_keeper_tb_84 = exception_tb;
    exception_keeper_lineno_84 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_28__bases_orig);
    tmp_class_creation_28__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_28__bases);
    tmp_class_creation_28__bases = NULL;
    Py_XDECREF(tmp_class_creation_28__class_decl_dict);
    tmp_class_creation_28__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_28__metaclass);
    tmp_class_creation_28__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_28__prepared);
    tmp_class_creation_28__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_84;
    exception_value = exception_keeper_value_84;
    exception_tb = exception_keeper_tb_84;
    exception_lineno = exception_keeper_lineno_84;

    goto frame_exception_exit_1;
    // End of try:
    try_end_28:;
    CHECK_OBJECT(tmp_class_creation_28__bases_orig);
    Py_DECREF(tmp_class_creation_28__bases_orig);
    tmp_class_creation_28__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_28__bases);
    Py_DECREF(tmp_class_creation_28__bases);
    tmp_class_creation_28__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
    Py_DECREF(tmp_class_creation_28__class_decl_dict);
    tmp_class_creation_28__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_28__metaclass);
    Py_DECREF(tmp_class_creation_28__metaclass);
    tmp_class_creation_28__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_28__prepared);
    Py_DECREF(tmp_class_creation_28__prepared);
    tmp_class_creation_28__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_231;
        PyObject *tmp_tuple_element_112;
        tmp_tuple_element_112 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[126]);

        if (unlikely(tmp_tuple_element_112 == NULL)) {
            tmp_tuple_element_112 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[126]);
        }

        if (tmp_tuple_element_112 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 278;

            goto try_except_handler_85;
        }
        tmp_assign_source_231 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_231, 0, tmp_tuple_element_112);
        assert(tmp_class_creation_29__bases_orig == NULL);
        tmp_class_creation_29__bases_orig = tmp_assign_source_231;
    }
    {
        PyObject *tmp_assign_source_232;
        PyObject *tmp_dircall_arg1_29;
        CHECK_OBJECT(tmp_class_creation_29__bases_orig);
        tmp_dircall_arg1_29 = tmp_class_creation_29__bases_orig;
        Py_INCREF(tmp_dircall_arg1_29);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_29};
            tmp_assign_source_232 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_232 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 278;

            goto try_except_handler_85;
        }
        assert(tmp_class_creation_29__bases == NULL);
        tmp_class_creation_29__bases = tmp_assign_source_232;
    }
    {
        PyObject *tmp_assign_source_233;
        tmp_assign_source_233 = PyDict_New();
        assert(tmp_class_creation_29__class_decl_dict == NULL);
        tmp_class_creation_29__class_decl_dict = tmp_assign_source_233;
    }
    {
        PyObject *tmp_assign_source_234;
        PyObject *tmp_metaclass_value_29;
        bool tmp_condition_result_169;
        PyObject *tmp_key_value_85;
        PyObject *tmp_dict_arg_value_85;
        PyObject *tmp_dict_arg_value_86;
        PyObject *tmp_key_value_86;
        nuitka_bool tmp_condition_result_170;
        int tmp_truth_name_29;
        PyObject *tmp_type_arg_57;
        PyObject *tmp_expression_value_151;
        PyObject *tmp_subscript_value_29;
        PyObject *tmp_bases_value_29;
        tmp_key_value_85 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
        tmp_dict_arg_value_85 = tmp_class_creation_29__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_85, tmp_key_value_85);
        assert(!(tmp_res == -1));
        tmp_condition_result_169 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_169 != false) {
            goto condexpr_true_57;
        } else {
            goto condexpr_false_57;
        }
        condexpr_true_57:;
        CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
        tmp_dict_arg_value_86 = tmp_class_creation_29__class_decl_dict;
        tmp_key_value_86 = mod_consts[43];
        tmp_metaclass_value_29 = DICT_GET_ITEM0(tmp_dict_arg_value_86, tmp_key_value_86);
        if (tmp_metaclass_value_29 == NULL) {
            tmp_metaclass_value_29 = Py_None;
        }
        assert(!(tmp_metaclass_value_29 == NULL));
        Py_INCREF(tmp_metaclass_value_29);
        goto condexpr_end_57;
        condexpr_false_57:;
        CHECK_OBJECT(tmp_class_creation_29__bases);
        tmp_truth_name_29 = CHECK_IF_TRUE(tmp_class_creation_29__bases);
        if (tmp_truth_name_29 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 278;

            goto try_except_handler_85;
        }
        tmp_condition_result_170 = tmp_truth_name_29 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_170 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_58;
        } else {
            goto condexpr_false_58;
        }
        condexpr_true_58:;
        CHECK_OBJECT(tmp_class_creation_29__bases);
        tmp_expression_value_151 = tmp_class_creation_29__bases;
        tmp_subscript_value_29 = mod_consts[36];
        tmp_type_arg_57 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_151, tmp_subscript_value_29, 0);
        if (tmp_type_arg_57 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 278;

            goto try_except_handler_85;
        }
        tmp_metaclass_value_29 = BUILTIN_TYPE1(tmp_type_arg_57);
        Py_DECREF(tmp_type_arg_57);
        if (tmp_metaclass_value_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 278;

            goto try_except_handler_85;
        }
        goto condexpr_end_58;
        condexpr_false_58:;
        tmp_metaclass_value_29 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_29);
        condexpr_end_58:;
        condexpr_end_57:;
        CHECK_OBJECT(tmp_class_creation_29__bases);
        tmp_bases_value_29 = tmp_class_creation_29__bases;
        tmp_assign_source_234 = SELECT_METACLASS(tmp_metaclass_value_29, tmp_bases_value_29);
        Py_DECREF(tmp_metaclass_value_29);
        if (tmp_assign_source_234 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 278;

            goto try_except_handler_85;
        }
        assert(tmp_class_creation_29__metaclass == NULL);
        tmp_class_creation_29__metaclass = tmp_assign_source_234;
    }
    {
        bool tmp_condition_result_171;
        PyObject *tmp_key_value_87;
        PyObject *tmp_dict_arg_value_87;
        tmp_key_value_87 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
        tmp_dict_arg_value_87 = tmp_class_creation_29__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_87, tmp_key_value_87);
        assert(!(tmp_res == -1));
        tmp_condition_result_171 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_171 != false) {
            goto branch_yes_113;
        } else {
            goto branch_no_113;
        }
    }
    branch_yes_113:;
    CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_29__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 278;

        goto try_except_handler_85;
    }
    branch_no_113:;
    {
        nuitka_bool tmp_condition_result_172;
        PyObject *tmp_expression_value_152;
        CHECK_OBJECT(tmp_class_creation_29__metaclass);
        tmp_expression_value_152 = tmp_class_creation_29__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_152, mod_consts[44]);
        tmp_condition_result_172 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_172 == NUITKA_BOOL_TRUE) {
            goto branch_yes_114;
        } else {
            goto branch_no_114;
        }
    }
    branch_yes_114:;
    {
        PyObject *tmp_assign_source_235;
        PyObject *tmp_called_value_57;
        PyObject *tmp_expression_value_153;
        PyObject *tmp_args_value_57;
        PyObject *tmp_tuple_element_113;
        PyObject *tmp_kwargs_value_57;
        CHECK_OBJECT(tmp_class_creation_29__metaclass);
        tmp_expression_value_153 = tmp_class_creation_29__metaclass;
        tmp_called_value_57 = LOOKUP_ATTRIBUTE(tmp_expression_value_153, mod_consts[44]);
        if (tmp_called_value_57 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 278;

            goto try_except_handler_85;
        }
        tmp_tuple_element_113 = mod_consts[134];
        tmp_args_value_57 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_57, 0, tmp_tuple_element_113);
        CHECK_OBJECT(tmp_class_creation_29__bases);
        tmp_tuple_element_113 = tmp_class_creation_29__bases;
        PyTuple_SET_ITEM0(tmp_args_value_57, 1, tmp_tuple_element_113);
        CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
        tmp_kwargs_value_57 = tmp_class_creation_29__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 278;
        tmp_assign_source_235 = CALL_FUNCTION(tmp_called_value_57, tmp_args_value_57, tmp_kwargs_value_57);
        Py_DECREF(tmp_called_value_57);
        Py_DECREF(tmp_args_value_57);
        if (tmp_assign_source_235 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 278;

            goto try_except_handler_85;
        }
        assert(tmp_class_creation_29__prepared == NULL);
        tmp_class_creation_29__prepared = tmp_assign_source_235;
    }
    {
        bool tmp_condition_result_173;
        PyObject *tmp_operand_value_29;
        PyObject *tmp_expression_value_154;
        CHECK_OBJECT(tmp_class_creation_29__prepared);
        tmp_expression_value_154 = tmp_class_creation_29__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_154, mod_consts[46]);
        tmp_operand_value_29 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_29);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 278;

            goto try_except_handler_85;
        }
        tmp_condition_result_173 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_173 != false) {
            goto branch_yes_115;
        } else {
            goto branch_no_115;
        }
    }
    branch_yes_115:;
    {
        PyObject *tmp_raise_type_29;
        PyObject *tmp_raise_value_29;
        PyObject *tmp_left_value_29;
        PyObject *tmp_right_value_29;
        PyObject *tmp_tuple_element_114;
        PyObject *tmp_getattr_target_29;
        PyObject *tmp_getattr_attr_29;
        PyObject *tmp_getattr_default_29;
        tmp_raise_type_29 = PyExc_TypeError;
        tmp_left_value_29 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_29__metaclass);
        tmp_getattr_target_29 = tmp_class_creation_29__metaclass;
        tmp_getattr_attr_29 = mod_consts[48];
        tmp_getattr_default_29 = mod_consts[49];
        tmp_tuple_element_114 = BUILTIN_GETATTR(tmp_getattr_target_29, tmp_getattr_attr_29, tmp_getattr_default_29);
        if (tmp_tuple_element_114 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 278;

            goto try_except_handler_85;
        }
        tmp_right_value_29 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_155;
            PyObject *tmp_type_arg_58;
            PyTuple_SET_ITEM(tmp_right_value_29, 0, tmp_tuple_element_114);
            CHECK_OBJECT(tmp_class_creation_29__prepared);
            tmp_type_arg_58 = tmp_class_creation_29__prepared;
            tmp_expression_value_155 = BUILTIN_TYPE1(tmp_type_arg_58);
            assert(!(tmp_expression_value_155 == NULL));
            tmp_tuple_element_114 = LOOKUP_ATTRIBUTE(tmp_expression_value_155, mod_consts[48]);
            Py_DECREF(tmp_expression_value_155);
            if (tmp_tuple_element_114 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 278;

                goto tuple_build_exception_33;
            }
            PyTuple_SET_ITEM(tmp_right_value_29, 1, tmp_tuple_element_114);
        }
        goto tuple_build_noexception_33;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_33:;
        Py_DECREF(tmp_right_value_29);
        goto try_except_handler_85;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_33:;
        tmp_raise_value_29 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_29, tmp_right_value_29);
        Py_DECREF(tmp_right_value_29);
        if (tmp_raise_value_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 278;

            goto try_except_handler_85;
        }
        exception_type = tmp_raise_type_29;
        Py_INCREF(tmp_raise_type_29);
        exception_value = tmp_raise_value_29;
        exception_lineno = 278;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_85;
    }
    branch_no_115:;
    goto branch_end_114;
    branch_no_114:;
    {
        PyObject *tmp_assign_source_236;
        tmp_assign_source_236 = PyDict_New();
        assert(tmp_class_creation_29__prepared == NULL);
        tmp_class_creation_29__prepared = tmp_assign_source_236;
    }
    branch_end_114:;
    {
        PyObject *tmp_assign_source_237;
        {
            PyObject *tmp_set_locals_29;
            CHECK_OBJECT(tmp_class_creation_29__prepared);
            tmp_set_locals_29 = tmp_class_creation_29__prepared;
            locals_botocore$exceptions$$$class__29_RangeError_278 = tmp_set_locals_29;
            Py_INCREF(tmp_set_locals_29);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__29_RangeError_278, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 278;

            goto try_except_handler_87;
        }
        tmp_dictset_value = mod_consts[135];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__29_RangeError_278, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 278;

            goto try_except_handler_87;
        }
        tmp_dictset_value = mod_consts[134];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__29_RangeError_278, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 278;

            goto try_except_handler_87;
        }
        if (isFrameUnusable(cache_frame_a600bb73e1b1999b637676aafd5a3034_29)) {
            Py_XDECREF(cache_frame_a600bb73e1b1999b637676aafd5a3034_29);

#if _DEBUG_REFCOUNTS
            if (cache_frame_a600bb73e1b1999b637676aafd5a3034_29 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_a600bb73e1b1999b637676aafd5a3034_29 = MAKE_FUNCTION_FRAME(codeobj_a600bb73e1b1999b637676aafd5a3034, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_a600bb73e1b1999b637676aafd5a3034_29->m_type_description == NULL);
        frame_a600bb73e1b1999b637676aafd5a3034_29 = cache_frame_a600bb73e1b1999b637676aafd5a3034_29;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_a600bb73e1b1999b637676aafd5a3034_29);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_a600bb73e1b1999b637676aafd5a3034_29) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[136];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__29_RangeError_278, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 287;
            type_description_2 = "o";
            goto frame_exception_exit_29;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a600bb73e1b1999b637676aafd5a3034_29);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_28;

        frame_exception_exit_29:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a600bb73e1b1999b637676aafd5a3034_29);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_a600bb73e1b1999b637676aafd5a3034_29, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_a600bb73e1b1999b637676aafd5a3034_29->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_a600bb73e1b1999b637676aafd5a3034_29, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_a600bb73e1b1999b637676aafd5a3034_29,
            type_description_2,
            outline_28_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_a600bb73e1b1999b637676aafd5a3034_29 == cache_frame_a600bb73e1b1999b637676aafd5a3034_29) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_a600bb73e1b1999b637676aafd5a3034_29);
            cache_frame_a600bb73e1b1999b637676aafd5a3034_29 = NULL;
        }

        assertFrameObject(frame_a600bb73e1b1999b637676aafd5a3034_29);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_28;

        frame_no_exception_28:;
        goto skip_nested_handling_28;
        nested_frame_exit_28:;

        goto try_except_handler_87;
        skip_nested_handling_28:;
        {
            nuitka_bool tmp_condition_result_174;
            PyObject *tmp_cmp_expr_left_29;
            PyObject *tmp_cmp_expr_right_29;
            CHECK_OBJECT(tmp_class_creation_29__bases);
            tmp_cmp_expr_left_29 = tmp_class_creation_29__bases;
            CHECK_OBJECT(tmp_class_creation_29__bases_orig);
            tmp_cmp_expr_right_29 = tmp_class_creation_29__bases_orig;
            tmp_condition_result_174 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_29, tmp_cmp_expr_right_29);
            if (tmp_condition_result_174 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 278;

                goto try_except_handler_87;
            }
            if (tmp_condition_result_174 == NUITKA_BOOL_TRUE) {
                goto branch_yes_116;
            } else {
                goto branch_no_116;
            }
            assert(tmp_condition_result_174 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_116:;
        CHECK_OBJECT(tmp_class_creation_29__bases_orig);
        tmp_dictset_value = tmp_class_creation_29__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__29_RangeError_278, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 278;

            goto try_except_handler_87;
        }
        branch_no_116:;
        {
            PyObject *tmp_assign_source_238;
            PyObject *tmp_called_value_58;
            PyObject *tmp_args_value_58;
            PyObject *tmp_tuple_element_115;
            PyObject *tmp_kwargs_value_58;
            CHECK_OBJECT(tmp_class_creation_29__metaclass);
            tmp_called_value_58 = tmp_class_creation_29__metaclass;
            tmp_tuple_element_115 = mod_consts[134];
            tmp_args_value_58 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_58, 0, tmp_tuple_element_115);
            CHECK_OBJECT(tmp_class_creation_29__bases);
            tmp_tuple_element_115 = tmp_class_creation_29__bases;
            PyTuple_SET_ITEM0(tmp_args_value_58, 1, tmp_tuple_element_115);
            tmp_tuple_element_115 = locals_botocore$exceptions$$$class__29_RangeError_278;
            PyTuple_SET_ITEM0(tmp_args_value_58, 2, tmp_tuple_element_115);
            CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
            tmp_kwargs_value_58 = tmp_class_creation_29__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 278;
            tmp_assign_source_238 = CALL_FUNCTION(tmp_called_value_58, tmp_args_value_58, tmp_kwargs_value_58);
            Py_DECREF(tmp_args_value_58);
            if (tmp_assign_source_238 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 278;

                goto try_except_handler_87;
            }
            assert(outline_28_var___class__ == NULL);
            outline_28_var___class__ = tmp_assign_source_238;
        }
        CHECK_OBJECT(outline_28_var___class__);
        tmp_assign_source_237 = outline_28_var___class__;
        Py_INCREF(tmp_assign_source_237);
        goto try_return_handler_87;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_87:;
        Py_DECREF(locals_botocore$exceptions$$$class__29_RangeError_278);
        locals_botocore$exceptions$$$class__29_RangeError_278 = NULL;
        goto try_return_handler_86;
        // Exception handler code:
        try_except_handler_87:;
        exception_keeper_type_85 = exception_type;
        exception_keeper_value_85 = exception_value;
        exception_keeper_tb_85 = exception_tb;
        exception_keeper_lineno_85 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__29_RangeError_278);
        locals_botocore$exceptions$$$class__29_RangeError_278 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_85;
        exception_value = exception_keeper_value_85;
        exception_tb = exception_keeper_tb_85;
        exception_lineno = exception_keeper_lineno_85;

        goto try_except_handler_86;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_86:;
        CHECK_OBJECT(outline_28_var___class__);
        Py_DECREF(outline_28_var___class__);
        outline_28_var___class__ = NULL;
        goto outline_result_29;
        // Exception handler code:
        try_except_handler_86:;
        exception_keeper_type_86 = exception_type;
        exception_keeper_value_86 = exception_value;
        exception_keeper_tb_86 = exception_tb;
        exception_keeper_lineno_86 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_86;
        exception_value = exception_keeper_value_86;
        exception_tb = exception_keeper_tb_86;
        exception_lineno = exception_keeper_lineno_86;

        goto outline_exception_29;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_29:;
        exception_lineno = 278;
        goto try_except_handler_85;
        outline_result_29:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[134], tmp_assign_source_237);
    }
    goto try_end_29;
    // Exception handler code:
    try_except_handler_85:;
    exception_keeper_type_87 = exception_type;
    exception_keeper_value_87 = exception_value;
    exception_keeper_tb_87 = exception_tb;
    exception_keeper_lineno_87 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_29__bases_orig);
    tmp_class_creation_29__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_29__bases);
    tmp_class_creation_29__bases = NULL;
    Py_XDECREF(tmp_class_creation_29__class_decl_dict);
    tmp_class_creation_29__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_29__metaclass);
    tmp_class_creation_29__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_29__prepared);
    tmp_class_creation_29__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_87;
    exception_value = exception_keeper_value_87;
    exception_tb = exception_keeper_tb_87;
    exception_lineno = exception_keeper_lineno_87;

    goto frame_exception_exit_1;
    // End of try:
    try_end_29:;
    CHECK_OBJECT(tmp_class_creation_29__bases_orig);
    Py_DECREF(tmp_class_creation_29__bases_orig);
    tmp_class_creation_29__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_29__bases);
    Py_DECREF(tmp_class_creation_29__bases);
    tmp_class_creation_29__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
    Py_DECREF(tmp_class_creation_29__class_decl_dict);
    tmp_class_creation_29__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_29__metaclass);
    Py_DECREF(tmp_class_creation_29__metaclass);
    tmp_class_creation_29__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_29__prepared);
    Py_DECREF(tmp_class_creation_29__prepared);
    tmp_class_creation_29__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_239;
        PyObject *tmp_tuple_element_116;
        tmp_tuple_element_116 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[126]);

        if (unlikely(tmp_tuple_element_116 == NULL)) {
            tmp_tuple_element_116 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[126]);
        }

        if (tmp_tuple_element_116 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 291;

            goto try_except_handler_88;
        }
        tmp_assign_source_239 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_239, 0, tmp_tuple_element_116);
        assert(tmp_class_creation_30__bases_orig == NULL);
        tmp_class_creation_30__bases_orig = tmp_assign_source_239;
    }
    {
        PyObject *tmp_assign_source_240;
        PyObject *tmp_dircall_arg1_30;
        CHECK_OBJECT(tmp_class_creation_30__bases_orig);
        tmp_dircall_arg1_30 = tmp_class_creation_30__bases_orig;
        Py_INCREF(tmp_dircall_arg1_30);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_30};
            tmp_assign_source_240 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_240 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 291;

            goto try_except_handler_88;
        }
        assert(tmp_class_creation_30__bases == NULL);
        tmp_class_creation_30__bases = tmp_assign_source_240;
    }
    {
        PyObject *tmp_assign_source_241;
        tmp_assign_source_241 = PyDict_New();
        assert(tmp_class_creation_30__class_decl_dict == NULL);
        tmp_class_creation_30__class_decl_dict = tmp_assign_source_241;
    }
    {
        PyObject *tmp_assign_source_242;
        PyObject *tmp_metaclass_value_30;
        bool tmp_condition_result_175;
        PyObject *tmp_key_value_88;
        PyObject *tmp_dict_arg_value_88;
        PyObject *tmp_dict_arg_value_89;
        PyObject *tmp_key_value_89;
        nuitka_bool tmp_condition_result_176;
        int tmp_truth_name_30;
        PyObject *tmp_type_arg_59;
        PyObject *tmp_expression_value_156;
        PyObject *tmp_subscript_value_30;
        PyObject *tmp_bases_value_30;
        tmp_key_value_88 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
        tmp_dict_arg_value_88 = tmp_class_creation_30__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_88, tmp_key_value_88);
        assert(!(tmp_res == -1));
        tmp_condition_result_175 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_175 != false) {
            goto condexpr_true_59;
        } else {
            goto condexpr_false_59;
        }
        condexpr_true_59:;
        CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
        tmp_dict_arg_value_89 = tmp_class_creation_30__class_decl_dict;
        tmp_key_value_89 = mod_consts[43];
        tmp_metaclass_value_30 = DICT_GET_ITEM0(tmp_dict_arg_value_89, tmp_key_value_89);
        if (tmp_metaclass_value_30 == NULL) {
            tmp_metaclass_value_30 = Py_None;
        }
        assert(!(tmp_metaclass_value_30 == NULL));
        Py_INCREF(tmp_metaclass_value_30);
        goto condexpr_end_59;
        condexpr_false_59:;
        CHECK_OBJECT(tmp_class_creation_30__bases);
        tmp_truth_name_30 = CHECK_IF_TRUE(tmp_class_creation_30__bases);
        if (tmp_truth_name_30 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 291;

            goto try_except_handler_88;
        }
        tmp_condition_result_176 = tmp_truth_name_30 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_176 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_60;
        } else {
            goto condexpr_false_60;
        }
        condexpr_true_60:;
        CHECK_OBJECT(tmp_class_creation_30__bases);
        tmp_expression_value_156 = tmp_class_creation_30__bases;
        tmp_subscript_value_30 = mod_consts[36];
        tmp_type_arg_59 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_156, tmp_subscript_value_30, 0);
        if (tmp_type_arg_59 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 291;

            goto try_except_handler_88;
        }
        tmp_metaclass_value_30 = BUILTIN_TYPE1(tmp_type_arg_59);
        Py_DECREF(tmp_type_arg_59);
        if (tmp_metaclass_value_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 291;

            goto try_except_handler_88;
        }
        goto condexpr_end_60;
        condexpr_false_60:;
        tmp_metaclass_value_30 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_30);
        condexpr_end_60:;
        condexpr_end_59:;
        CHECK_OBJECT(tmp_class_creation_30__bases);
        tmp_bases_value_30 = tmp_class_creation_30__bases;
        tmp_assign_source_242 = SELECT_METACLASS(tmp_metaclass_value_30, tmp_bases_value_30);
        Py_DECREF(tmp_metaclass_value_30);
        if (tmp_assign_source_242 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 291;

            goto try_except_handler_88;
        }
        assert(tmp_class_creation_30__metaclass == NULL);
        tmp_class_creation_30__metaclass = tmp_assign_source_242;
    }
    {
        bool tmp_condition_result_177;
        PyObject *tmp_key_value_90;
        PyObject *tmp_dict_arg_value_90;
        tmp_key_value_90 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
        tmp_dict_arg_value_90 = tmp_class_creation_30__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_90, tmp_key_value_90);
        assert(!(tmp_res == -1));
        tmp_condition_result_177 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_177 != false) {
            goto branch_yes_117;
        } else {
            goto branch_no_117;
        }
    }
    branch_yes_117:;
    CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_30__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 291;

        goto try_except_handler_88;
    }
    branch_no_117:;
    {
        nuitka_bool tmp_condition_result_178;
        PyObject *tmp_expression_value_157;
        CHECK_OBJECT(tmp_class_creation_30__metaclass);
        tmp_expression_value_157 = tmp_class_creation_30__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_157, mod_consts[44]);
        tmp_condition_result_178 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_178 == NUITKA_BOOL_TRUE) {
            goto branch_yes_118;
        } else {
            goto branch_no_118;
        }
    }
    branch_yes_118:;
    {
        PyObject *tmp_assign_source_243;
        PyObject *tmp_called_value_59;
        PyObject *tmp_expression_value_158;
        PyObject *tmp_args_value_59;
        PyObject *tmp_tuple_element_117;
        PyObject *tmp_kwargs_value_59;
        CHECK_OBJECT(tmp_class_creation_30__metaclass);
        tmp_expression_value_158 = tmp_class_creation_30__metaclass;
        tmp_called_value_59 = LOOKUP_ATTRIBUTE(tmp_expression_value_158, mod_consts[44]);
        if (tmp_called_value_59 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 291;

            goto try_except_handler_88;
        }
        tmp_tuple_element_117 = mod_consts[137];
        tmp_args_value_59 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_59, 0, tmp_tuple_element_117);
        CHECK_OBJECT(tmp_class_creation_30__bases);
        tmp_tuple_element_117 = tmp_class_creation_30__bases;
        PyTuple_SET_ITEM0(tmp_args_value_59, 1, tmp_tuple_element_117);
        CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
        tmp_kwargs_value_59 = tmp_class_creation_30__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 291;
        tmp_assign_source_243 = CALL_FUNCTION(tmp_called_value_59, tmp_args_value_59, tmp_kwargs_value_59);
        Py_DECREF(tmp_called_value_59);
        Py_DECREF(tmp_args_value_59);
        if (tmp_assign_source_243 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 291;

            goto try_except_handler_88;
        }
        assert(tmp_class_creation_30__prepared == NULL);
        tmp_class_creation_30__prepared = tmp_assign_source_243;
    }
    {
        bool tmp_condition_result_179;
        PyObject *tmp_operand_value_30;
        PyObject *tmp_expression_value_159;
        CHECK_OBJECT(tmp_class_creation_30__prepared);
        tmp_expression_value_159 = tmp_class_creation_30__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_159, mod_consts[46]);
        tmp_operand_value_30 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_30);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 291;

            goto try_except_handler_88;
        }
        tmp_condition_result_179 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_179 != false) {
            goto branch_yes_119;
        } else {
            goto branch_no_119;
        }
    }
    branch_yes_119:;
    {
        PyObject *tmp_raise_type_30;
        PyObject *tmp_raise_value_30;
        PyObject *tmp_left_value_30;
        PyObject *tmp_right_value_30;
        PyObject *tmp_tuple_element_118;
        PyObject *tmp_getattr_target_30;
        PyObject *tmp_getattr_attr_30;
        PyObject *tmp_getattr_default_30;
        tmp_raise_type_30 = PyExc_TypeError;
        tmp_left_value_30 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_30__metaclass);
        tmp_getattr_target_30 = tmp_class_creation_30__metaclass;
        tmp_getattr_attr_30 = mod_consts[48];
        tmp_getattr_default_30 = mod_consts[49];
        tmp_tuple_element_118 = BUILTIN_GETATTR(tmp_getattr_target_30, tmp_getattr_attr_30, tmp_getattr_default_30);
        if (tmp_tuple_element_118 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 291;

            goto try_except_handler_88;
        }
        tmp_right_value_30 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_160;
            PyObject *tmp_type_arg_60;
            PyTuple_SET_ITEM(tmp_right_value_30, 0, tmp_tuple_element_118);
            CHECK_OBJECT(tmp_class_creation_30__prepared);
            tmp_type_arg_60 = tmp_class_creation_30__prepared;
            tmp_expression_value_160 = BUILTIN_TYPE1(tmp_type_arg_60);
            assert(!(tmp_expression_value_160 == NULL));
            tmp_tuple_element_118 = LOOKUP_ATTRIBUTE(tmp_expression_value_160, mod_consts[48]);
            Py_DECREF(tmp_expression_value_160);
            if (tmp_tuple_element_118 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 291;

                goto tuple_build_exception_34;
            }
            PyTuple_SET_ITEM(tmp_right_value_30, 1, tmp_tuple_element_118);
        }
        goto tuple_build_noexception_34;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_34:;
        Py_DECREF(tmp_right_value_30);
        goto try_except_handler_88;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_34:;
        tmp_raise_value_30 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_30, tmp_right_value_30);
        Py_DECREF(tmp_right_value_30);
        if (tmp_raise_value_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 291;

            goto try_except_handler_88;
        }
        exception_type = tmp_raise_type_30;
        Py_INCREF(tmp_raise_type_30);
        exception_value = tmp_raise_value_30;
        exception_lineno = 291;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_88;
    }
    branch_no_119:;
    goto branch_end_118;
    branch_no_118:;
    {
        PyObject *tmp_assign_source_244;
        tmp_assign_source_244 = PyDict_New();
        assert(tmp_class_creation_30__prepared == NULL);
        tmp_class_creation_30__prepared = tmp_assign_source_244;
    }
    branch_end_118:;
    {
        PyObject *tmp_assign_source_245;
        {
            PyObject *tmp_set_locals_30;
            CHECK_OBJECT(tmp_class_creation_30__prepared);
            tmp_set_locals_30 = tmp_class_creation_30__prepared;
            locals_botocore$exceptions$$$class__30_UnknownParameterError_291 = tmp_set_locals_30;
            Py_INCREF(tmp_set_locals_30);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__30_UnknownParameterError_291, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 291;

            goto try_except_handler_90;
        }
        tmp_dictset_value = mod_consts[138];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__30_UnknownParameterError_291, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 291;

            goto try_except_handler_90;
        }
        tmp_dictset_value = mod_consts[137];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__30_UnknownParameterError_291, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 291;

            goto try_except_handler_90;
        }
        if (isFrameUnusable(cache_frame_aec7b451d1892859451e9b947870ee57_30)) {
            Py_XDECREF(cache_frame_aec7b451d1892859451e9b947870ee57_30);

#if _DEBUG_REFCOUNTS
            if (cache_frame_aec7b451d1892859451e9b947870ee57_30 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_aec7b451d1892859451e9b947870ee57_30 = MAKE_FUNCTION_FRAME(codeobj_aec7b451d1892859451e9b947870ee57, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_aec7b451d1892859451e9b947870ee57_30->m_type_description == NULL);
        frame_aec7b451d1892859451e9b947870ee57_30 = cache_frame_aec7b451d1892859451e9b947870ee57_30;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_aec7b451d1892859451e9b947870ee57_30);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_aec7b451d1892859451e9b947870ee57_30) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[139];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__30_UnknownParameterError_291, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 299;
            type_description_2 = "o";
            goto frame_exception_exit_30;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_aec7b451d1892859451e9b947870ee57_30);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_29;

        frame_exception_exit_30:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_aec7b451d1892859451e9b947870ee57_30);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_aec7b451d1892859451e9b947870ee57_30, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_aec7b451d1892859451e9b947870ee57_30->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_aec7b451d1892859451e9b947870ee57_30, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_aec7b451d1892859451e9b947870ee57_30,
            type_description_2,
            outline_29_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_aec7b451d1892859451e9b947870ee57_30 == cache_frame_aec7b451d1892859451e9b947870ee57_30) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_aec7b451d1892859451e9b947870ee57_30);
            cache_frame_aec7b451d1892859451e9b947870ee57_30 = NULL;
        }

        assertFrameObject(frame_aec7b451d1892859451e9b947870ee57_30);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_29;

        frame_no_exception_29:;
        goto skip_nested_handling_29;
        nested_frame_exit_29:;

        goto try_except_handler_90;
        skip_nested_handling_29:;
        {
            nuitka_bool tmp_condition_result_180;
            PyObject *tmp_cmp_expr_left_30;
            PyObject *tmp_cmp_expr_right_30;
            CHECK_OBJECT(tmp_class_creation_30__bases);
            tmp_cmp_expr_left_30 = tmp_class_creation_30__bases;
            CHECK_OBJECT(tmp_class_creation_30__bases_orig);
            tmp_cmp_expr_right_30 = tmp_class_creation_30__bases_orig;
            tmp_condition_result_180 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_30, tmp_cmp_expr_right_30);
            if (tmp_condition_result_180 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 291;

                goto try_except_handler_90;
            }
            if (tmp_condition_result_180 == NUITKA_BOOL_TRUE) {
                goto branch_yes_120;
            } else {
                goto branch_no_120;
            }
            assert(tmp_condition_result_180 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_120:;
        CHECK_OBJECT(tmp_class_creation_30__bases_orig);
        tmp_dictset_value = tmp_class_creation_30__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__30_UnknownParameterError_291, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 291;

            goto try_except_handler_90;
        }
        branch_no_120:;
        {
            PyObject *tmp_assign_source_246;
            PyObject *tmp_called_value_60;
            PyObject *tmp_args_value_60;
            PyObject *tmp_tuple_element_119;
            PyObject *tmp_kwargs_value_60;
            CHECK_OBJECT(tmp_class_creation_30__metaclass);
            tmp_called_value_60 = tmp_class_creation_30__metaclass;
            tmp_tuple_element_119 = mod_consts[137];
            tmp_args_value_60 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_60, 0, tmp_tuple_element_119);
            CHECK_OBJECT(tmp_class_creation_30__bases);
            tmp_tuple_element_119 = tmp_class_creation_30__bases;
            PyTuple_SET_ITEM0(tmp_args_value_60, 1, tmp_tuple_element_119);
            tmp_tuple_element_119 = locals_botocore$exceptions$$$class__30_UnknownParameterError_291;
            PyTuple_SET_ITEM0(tmp_args_value_60, 2, tmp_tuple_element_119);
            CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
            tmp_kwargs_value_60 = tmp_class_creation_30__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 291;
            tmp_assign_source_246 = CALL_FUNCTION(tmp_called_value_60, tmp_args_value_60, tmp_kwargs_value_60);
            Py_DECREF(tmp_args_value_60);
            if (tmp_assign_source_246 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 291;

                goto try_except_handler_90;
            }
            assert(outline_29_var___class__ == NULL);
            outline_29_var___class__ = tmp_assign_source_246;
        }
        CHECK_OBJECT(outline_29_var___class__);
        tmp_assign_source_245 = outline_29_var___class__;
        Py_INCREF(tmp_assign_source_245);
        goto try_return_handler_90;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_90:;
        Py_DECREF(locals_botocore$exceptions$$$class__30_UnknownParameterError_291);
        locals_botocore$exceptions$$$class__30_UnknownParameterError_291 = NULL;
        goto try_return_handler_89;
        // Exception handler code:
        try_except_handler_90:;
        exception_keeper_type_88 = exception_type;
        exception_keeper_value_88 = exception_value;
        exception_keeper_tb_88 = exception_tb;
        exception_keeper_lineno_88 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__30_UnknownParameterError_291);
        locals_botocore$exceptions$$$class__30_UnknownParameterError_291 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_88;
        exception_value = exception_keeper_value_88;
        exception_tb = exception_keeper_tb_88;
        exception_lineno = exception_keeper_lineno_88;

        goto try_except_handler_89;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_89:;
        CHECK_OBJECT(outline_29_var___class__);
        Py_DECREF(outline_29_var___class__);
        outline_29_var___class__ = NULL;
        goto outline_result_30;
        // Exception handler code:
        try_except_handler_89:;
        exception_keeper_type_89 = exception_type;
        exception_keeper_value_89 = exception_value;
        exception_keeper_tb_89 = exception_tb;
        exception_keeper_lineno_89 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_89;
        exception_value = exception_keeper_value_89;
        exception_tb = exception_keeper_tb_89;
        exception_lineno = exception_keeper_lineno_89;

        goto outline_exception_30;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_30:;
        exception_lineno = 291;
        goto try_except_handler_88;
        outline_result_30:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[137], tmp_assign_source_245);
    }
    goto try_end_30;
    // Exception handler code:
    try_except_handler_88:;
    exception_keeper_type_90 = exception_type;
    exception_keeper_value_90 = exception_value;
    exception_keeper_tb_90 = exception_tb;
    exception_keeper_lineno_90 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_30__bases_orig);
    tmp_class_creation_30__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_30__bases);
    tmp_class_creation_30__bases = NULL;
    Py_XDECREF(tmp_class_creation_30__class_decl_dict);
    tmp_class_creation_30__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_30__metaclass);
    tmp_class_creation_30__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_30__prepared);
    tmp_class_creation_30__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_90;
    exception_value = exception_keeper_value_90;
    exception_tb = exception_keeper_tb_90;
    exception_lineno = exception_keeper_lineno_90;

    goto frame_exception_exit_1;
    // End of try:
    try_end_30:;
    CHECK_OBJECT(tmp_class_creation_30__bases_orig);
    Py_DECREF(tmp_class_creation_30__bases_orig);
    tmp_class_creation_30__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_30__bases);
    Py_DECREF(tmp_class_creation_30__bases);
    tmp_class_creation_30__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
    Py_DECREF(tmp_class_creation_30__class_decl_dict);
    tmp_class_creation_30__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_30__metaclass);
    Py_DECREF(tmp_class_creation_30__metaclass);
    tmp_class_creation_30__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_30__prepared);
    Py_DECREF(tmp_class_creation_30__prepared);
    tmp_class_creation_30__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_247;
        PyObject *tmp_tuple_element_120;
        tmp_tuple_element_120 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[126]);

        if (unlikely(tmp_tuple_element_120 == NULL)) {
            tmp_tuple_element_120 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[126]);
        }

        if (tmp_tuple_element_120 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 305;

            goto try_except_handler_91;
        }
        tmp_assign_source_247 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_assign_source_247, 0, tmp_tuple_element_120);
        tmp_tuple_element_120 = PyExc_ValueError;
        PyTuple_SET_ITEM0(tmp_assign_source_247, 1, tmp_tuple_element_120);
        assert(tmp_class_creation_31__bases_orig == NULL);
        tmp_class_creation_31__bases_orig = tmp_assign_source_247;
    }
    {
        PyObject *tmp_assign_source_248;
        PyObject *tmp_dircall_arg1_31;
        CHECK_OBJECT(tmp_class_creation_31__bases_orig);
        tmp_dircall_arg1_31 = tmp_class_creation_31__bases_orig;
        Py_INCREF(tmp_dircall_arg1_31);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_31};
            tmp_assign_source_248 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_248 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 305;

            goto try_except_handler_91;
        }
        assert(tmp_class_creation_31__bases == NULL);
        tmp_class_creation_31__bases = tmp_assign_source_248;
    }
    {
        PyObject *tmp_assign_source_249;
        tmp_assign_source_249 = PyDict_New();
        assert(tmp_class_creation_31__class_decl_dict == NULL);
        tmp_class_creation_31__class_decl_dict = tmp_assign_source_249;
    }
    {
        PyObject *tmp_assign_source_250;
        PyObject *tmp_metaclass_value_31;
        bool tmp_condition_result_181;
        PyObject *tmp_key_value_91;
        PyObject *tmp_dict_arg_value_91;
        PyObject *tmp_dict_arg_value_92;
        PyObject *tmp_key_value_92;
        nuitka_bool tmp_condition_result_182;
        int tmp_truth_name_31;
        PyObject *tmp_type_arg_61;
        PyObject *tmp_expression_value_161;
        PyObject *tmp_subscript_value_31;
        PyObject *tmp_bases_value_31;
        tmp_key_value_91 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
        tmp_dict_arg_value_91 = tmp_class_creation_31__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_91, tmp_key_value_91);
        assert(!(tmp_res == -1));
        tmp_condition_result_181 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_181 != false) {
            goto condexpr_true_61;
        } else {
            goto condexpr_false_61;
        }
        condexpr_true_61:;
        CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
        tmp_dict_arg_value_92 = tmp_class_creation_31__class_decl_dict;
        tmp_key_value_92 = mod_consts[43];
        tmp_metaclass_value_31 = DICT_GET_ITEM0(tmp_dict_arg_value_92, tmp_key_value_92);
        if (tmp_metaclass_value_31 == NULL) {
            tmp_metaclass_value_31 = Py_None;
        }
        assert(!(tmp_metaclass_value_31 == NULL));
        Py_INCREF(tmp_metaclass_value_31);
        goto condexpr_end_61;
        condexpr_false_61:;
        CHECK_OBJECT(tmp_class_creation_31__bases);
        tmp_truth_name_31 = CHECK_IF_TRUE(tmp_class_creation_31__bases);
        if (tmp_truth_name_31 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 305;

            goto try_except_handler_91;
        }
        tmp_condition_result_182 = tmp_truth_name_31 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_182 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_62;
        } else {
            goto condexpr_false_62;
        }
        condexpr_true_62:;
        CHECK_OBJECT(tmp_class_creation_31__bases);
        tmp_expression_value_161 = tmp_class_creation_31__bases;
        tmp_subscript_value_31 = mod_consts[36];
        tmp_type_arg_61 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_161, tmp_subscript_value_31, 0);
        if (tmp_type_arg_61 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 305;

            goto try_except_handler_91;
        }
        tmp_metaclass_value_31 = BUILTIN_TYPE1(tmp_type_arg_61);
        Py_DECREF(tmp_type_arg_61);
        if (tmp_metaclass_value_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 305;

            goto try_except_handler_91;
        }
        goto condexpr_end_62;
        condexpr_false_62:;
        tmp_metaclass_value_31 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_31);
        condexpr_end_62:;
        condexpr_end_61:;
        CHECK_OBJECT(tmp_class_creation_31__bases);
        tmp_bases_value_31 = tmp_class_creation_31__bases;
        tmp_assign_source_250 = SELECT_METACLASS(tmp_metaclass_value_31, tmp_bases_value_31);
        Py_DECREF(tmp_metaclass_value_31);
        if (tmp_assign_source_250 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 305;

            goto try_except_handler_91;
        }
        assert(tmp_class_creation_31__metaclass == NULL);
        tmp_class_creation_31__metaclass = tmp_assign_source_250;
    }
    {
        bool tmp_condition_result_183;
        PyObject *tmp_key_value_93;
        PyObject *tmp_dict_arg_value_93;
        tmp_key_value_93 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
        tmp_dict_arg_value_93 = tmp_class_creation_31__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_93, tmp_key_value_93);
        assert(!(tmp_res == -1));
        tmp_condition_result_183 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_183 != false) {
            goto branch_yes_121;
        } else {
            goto branch_no_121;
        }
    }
    branch_yes_121:;
    CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_31__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 305;

        goto try_except_handler_91;
    }
    branch_no_121:;
    {
        nuitka_bool tmp_condition_result_184;
        PyObject *tmp_expression_value_162;
        CHECK_OBJECT(tmp_class_creation_31__metaclass);
        tmp_expression_value_162 = tmp_class_creation_31__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_162, mod_consts[44]);
        tmp_condition_result_184 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_184 == NUITKA_BOOL_TRUE) {
            goto branch_yes_122;
        } else {
            goto branch_no_122;
        }
    }
    branch_yes_122:;
    {
        PyObject *tmp_assign_source_251;
        PyObject *tmp_called_value_61;
        PyObject *tmp_expression_value_163;
        PyObject *tmp_args_value_61;
        PyObject *tmp_tuple_element_121;
        PyObject *tmp_kwargs_value_61;
        CHECK_OBJECT(tmp_class_creation_31__metaclass);
        tmp_expression_value_163 = tmp_class_creation_31__metaclass;
        tmp_called_value_61 = LOOKUP_ATTRIBUTE(tmp_expression_value_163, mod_consts[44]);
        if (tmp_called_value_61 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 305;

            goto try_except_handler_91;
        }
        tmp_tuple_element_121 = mod_consts[140];
        tmp_args_value_61 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_61, 0, tmp_tuple_element_121);
        CHECK_OBJECT(tmp_class_creation_31__bases);
        tmp_tuple_element_121 = tmp_class_creation_31__bases;
        PyTuple_SET_ITEM0(tmp_args_value_61, 1, tmp_tuple_element_121);
        CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
        tmp_kwargs_value_61 = tmp_class_creation_31__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 305;
        tmp_assign_source_251 = CALL_FUNCTION(tmp_called_value_61, tmp_args_value_61, tmp_kwargs_value_61);
        Py_DECREF(tmp_called_value_61);
        Py_DECREF(tmp_args_value_61);
        if (tmp_assign_source_251 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 305;

            goto try_except_handler_91;
        }
        assert(tmp_class_creation_31__prepared == NULL);
        tmp_class_creation_31__prepared = tmp_assign_source_251;
    }
    {
        bool tmp_condition_result_185;
        PyObject *tmp_operand_value_31;
        PyObject *tmp_expression_value_164;
        CHECK_OBJECT(tmp_class_creation_31__prepared);
        tmp_expression_value_164 = tmp_class_creation_31__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_164, mod_consts[46]);
        tmp_operand_value_31 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_31);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 305;

            goto try_except_handler_91;
        }
        tmp_condition_result_185 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_185 != false) {
            goto branch_yes_123;
        } else {
            goto branch_no_123;
        }
    }
    branch_yes_123:;
    {
        PyObject *tmp_raise_type_31;
        PyObject *tmp_raise_value_31;
        PyObject *tmp_left_value_31;
        PyObject *tmp_right_value_31;
        PyObject *tmp_tuple_element_122;
        PyObject *tmp_getattr_target_31;
        PyObject *tmp_getattr_attr_31;
        PyObject *tmp_getattr_default_31;
        tmp_raise_type_31 = PyExc_TypeError;
        tmp_left_value_31 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_31__metaclass);
        tmp_getattr_target_31 = tmp_class_creation_31__metaclass;
        tmp_getattr_attr_31 = mod_consts[48];
        tmp_getattr_default_31 = mod_consts[49];
        tmp_tuple_element_122 = BUILTIN_GETATTR(tmp_getattr_target_31, tmp_getattr_attr_31, tmp_getattr_default_31);
        if (tmp_tuple_element_122 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 305;

            goto try_except_handler_91;
        }
        tmp_right_value_31 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_165;
            PyObject *tmp_type_arg_62;
            PyTuple_SET_ITEM(tmp_right_value_31, 0, tmp_tuple_element_122);
            CHECK_OBJECT(tmp_class_creation_31__prepared);
            tmp_type_arg_62 = tmp_class_creation_31__prepared;
            tmp_expression_value_165 = BUILTIN_TYPE1(tmp_type_arg_62);
            assert(!(tmp_expression_value_165 == NULL));
            tmp_tuple_element_122 = LOOKUP_ATTRIBUTE(tmp_expression_value_165, mod_consts[48]);
            Py_DECREF(tmp_expression_value_165);
            if (tmp_tuple_element_122 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 305;

                goto tuple_build_exception_35;
            }
            PyTuple_SET_ITEM(tmp_right_value_31, 1, tmp_tuple_element_122);
        }
        goto tuple_build_noexception_35;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_35:;
        Py_DECREF(tmp_right_value_31);
        goto try_except_handler_91;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_35:;
        tmp_raise_value_31 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_31, tmp_right_value_31);
        Py_DECREF(tmp_right_value_31);
        if (tmp_raise_value_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 305;

            goto try_except_handler_91;
        }
        exception_type = tmp_raise_type_31;
        Py_INCREF(tmp_raise_type_31);
        exception_value = tmp_raise_value_31;
        exception_lineno = 305;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_91;
    }
    branch_no_123:;
    goto branch_end_122;
    branch_no_122:;
    {
        PyObject *tmp_assign_source_252;
        tmp_assign_source_252 = PyDict_New();
        assert(tmp_class_creation_31__prepared == NULL);
        tmp_class_creation_31__prepared = tmp_assign_source_252;
    }
    branch_end_122:;
    {
        PyObject *tmp_assign_source_253;
        {
            PyObject *tmp_set_locals_31;
            CHECK_OBJECT(tmp_class_creation_31__prepared);
            tmp_set_locals_31 = tmp_class_creation_31__prepared;
            locals_botocore$exceptions$$$class__31_InvalidRegionError_305 = tmp_set_locals_31;
            Py_INCREF(tmp_set_locals_31);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__31_InvalidRegionError_305, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 305;

            goto try_except_handler_93;
        }
        tmp_dictset_value = mod_consts[141];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__31_InvalidRegionError_305, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 305;

            goto try_except_handler_93;
        }
        tmp_dictset_value = mod_consts[140];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__31_InvalidRegionError_305, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 305;

            goto try_except_handler_93;
        }
        if (isFrameUnusable(cache_frame_f272aacdb39eb2a25df282abe1bb41a8_31)) {
            Py_XDECREF(cache_frame_f272aacdb39eb2a25df282abe1bb41a8_31);

#if _DEBUG_REFCOUNTS
            if (cache_frame_f272aacdb39eb2a25df282abe1bb41a8_31 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_f272aacdb39eb2a25df282abe1bb41a8_31 = MAKE_FUNCTION_FRAME(codeobj_f272aacdb39eb2a25df282abe1bb41a8, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_f272aacdb39eb2a25df282abe1bb41a8_31->m_type_description == NULL);
        frame_f272aacdb39eb2a25df282abe1bb41a8_31 = cache_frame_f272aacdb39eb2a25df282abe1bb41a8_31;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_f272aacdb39eb2a25df282abe1bb41a8_31);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_f272aacdb39eb2a25df282abe1bb41a8_31) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[142];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__31_InvalidRegionError_305, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 311;
            type_description_2 = "o";
            goto frame_exception_exit_31;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_f272aacdb39eb2a25df282abe1bb41a8_31);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_30;

        frame_exception_exit_31:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_f272aacdb39eb2a25df282abe1bb41a8_31);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_f272aacdb39eb2a25df282abe1bb41a8_31, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_f272aacdb39eb2a25df282abe1bb41a8_31->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_f272aacdb39eb2a25df282abe1bb41a8_31, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_f272aacdb39eb2a25df282abe1bb41a8_31,
            type_description_2,
            outline_30_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_f272aacdb39eb2a25df282abe1bb41a8_31 == cache_frame_f272aacdb39eb2a25df282abe1bb41a8_31) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_f272aacdb39eb2a25df282abe1bb41a8_31);
            cache_frame_f272aacdb39eb2a25df282abe1bb41a8_31 = NULL;
        }

        assertFrameObject(frame_f272aacdb39eb2a25df282abe1bb41a8_31);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_30;

        frame_no_exception_30:;
        goto skip_nested_handling_30;
        nested_frame_exit_30:;

        goto try_except_handler_93;
        skip_nested_handling_30:;
        {
            nuitka_bool tmp_condition_result_186;
            PyObject *tmp_cmp_expr_left_31;
            PyObject *tmp_cmp_expr_right_31;
            CHECK_OBJECT(tmp_class_creation_31__bases);
            tmp_cmp_expr_left_31 = tmp_class_creation_31__bases;
            CHECK_OBJECT(tmp_class_creation_31__bases_orig);
            tmp_cmp_expr_right_31 = tmp_class_creation_31__bases_orig;
            tmp_condition_result_186 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_31, tmp_cmp_expr_right_31);
            if (tmp_condition_result_186 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 305;

                goto try_except_handler_93;
            }
            if (tmp_condition_result_186 == NUITKA_BOOL_TRUE) {
                goto branch_yes_124;
            } else {
                goto branch_no_124;
            }
            assert(tmp_condition_result_186 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_124:;
        CHECK_OBJECT(tmp_class_creation_31__bases_orig);
        tmp_dictset_value = tmp_class_creation_31__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__31_InvalidRegionError_305, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 305;

            goto try_except_handler_93;
        }
        branch_no_124:;
        {
            PyObject *tmp_assign_source_254;
            PyObject *tmp_called_value_62;
            PyObject *tmp_args_value_62;
            PyObject *tmp_tuple_element_123;
            PyObject *tmp_kwargs_value_62;
            CHECK_OBJECT(tmp_class_creation_31__metaclass);
            tmp_called_value_62 = tmp_class_creation_31__metaclass;
            tmp_tuple_element_123 = mod_consts[140];
            tmp_args_value_62 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_62, 0, tmp_tuple_element_123);
            CHECK_OBJECT(tmp_class_creation_31__bases);
            tmp_tuple_element_123 = tmp_class_creation_31__bases;
            PyTuple_SET_ITEM0(tmp_args_value_62, 1, tmp_tuple_element_123);
            tmp_tuple_element_123 = locals_botocore$exceptions$$$class__31_InvalidRegionError_305;
            PyTuple_SET_ITEM0(tmp_args_value_62, 2, tmp_tuple_element_123);
            CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
            tmp_kwargs_value_62 = tmp_class_creation_31__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 305;
            tmp_assign_source_254 = CALL_FUNCTION(tmp_called_value_62, tmp_args_value_62, tmp_kwargs_value_62);
            Py_DECREF(tmp_args_value_62);
            if (tmp_assign_source_254 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 305;

                goto try_except_handler_93;
            }
            assert(outline_30_var___class__ == NULL);
            outline_30_var___class__ = tmp_assign_source_254;
        }
        CHECK_OBJECT(outline_30_var___class__);
        tmp_assign_source_253 = outline_30_var___class__;
        Py_INCREF(tmp_assign_source_253);
        goto try_return_handler_93;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_93:;
        Py_DECREF(locals_botocore$exceptions$$$class__31_InvalidRegionError_305);
        locals_botocore$exceptions$$$class__31_InvalidRegionError_305 = NULL;
        goto try_return_handler_92;
        // Exception handler code:
        try_except_handler_93:;
        exception_keeper_type_91 = exception_type;
        exception_keeper_value_91 = exception_value;
        exception_keeper_tb_91 = exception_tb;
        exception_keeper_lineno_91 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__31_InvalidRegionError_305);
        locals_botocore$exceptions$$$class__31_InvalidRegionError_305 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_91;
        exception_value = exception_keeper_value_91;
        exception_tb = exception_keeper_tb_91;
        exception_lineno = exception_keeper_lineno_91;

        goto try_except_handler_92;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_92:;
        CHECK_OBJECT(outline_30_var___class__);
        Py_DECREF(outline_30_var___class__);
        outline_30_var___class__ = NULL;
        goto outline_result_31;
        // Exception handler code:
        try_except_handler_92:;
        exception_keeper_type_92 = exception_type;
        exception_keeper_value_92 = exception_value;
        exception_keeper_tb_92 = exception_tb;
        exception_keeper_lineno_92 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_92;
        exception_value = exception_keeper_value_92;
        exception_tb = exception_keeper_tb_92;
        exception_lineno = exception_keeper_lineno_92;

        goto outline_exception_31;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_31:;
        exception_lineno = 305;
        goto try_except_handler_91;
        outline_result_31:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[140], tmp_assign_source_253);
    }
    goto try_end_31;
    // Exception handler code:
    try_except_handler_91:;
    exception_keeper_type_93 = exception_type;
    exception_keeper_value_93 = exception_value;
    exception_keeper_tb_93 = exception_tb;
    exception_keeper_lineno_93 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_31__bases_orig);
    tmp_class_creation_31__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_31__bases);
    tmp_class_creation_31__bases = NULL;
    Py_XDECREF(tmp_class_creation_31__class_decl_dict);
    tmp_class_creation_31__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_31__metaclass);
    tmp_class_creation_31__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_31__prepared);
    tmp_class_creation_31__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_93;
    exception_value = exception_keeper_value_93;
    exception_tb = exception_keeper_tb_93;
    exception_lineno = exception_keeper_lineno_93;

    goto frame_exception_exit_1;
    // End of try:
    try_end_31:;
    CHECK_OBJECT(tmp_class_creation_31__bases_orig);
    Py_DECREF(tmp_class_creation_31__bases_orig);
    tmp_class_creation_31__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_31__bases);
    Py_DECREF(tmp_class_creation_31__bases);
    tmp_class_creation_31__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
    Py_DECREF(tmp_class_creation_31__class_decl_dict);
    tmp_class_creation_31__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_31__metaclass);
    Py_DECREF(tmp_class_creation_31__metaclass);
    tmp_class_creation_31__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_31__prepared);
    Py_DECREF(tmp_class_creation_31__prepared);
    tmp_class_creation_31__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_255;
        PyObject *tmp_tuple_element_124;
        tmp_tuple_element_124 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[126]);

        if (unlikely(tmp_tuple_element_124 == NULL)) {
            tmp_tuple_element_124 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[126]);
        }

        if (tmp_tuple_element_124 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;

            goto try_except_handler_94;
        }
        tmp_assign_source_255 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_255, 0, tmp_tuple_element_124);
        assert(tmp_class_creation_32__bases_orig == NULL);
        tmp_class_creation_32__bases_orig = tmp_assign_source_255;
    }
    {
        PyObject *tmp_assign_source_256;
        PyObject *tmp_dircall_arg1_32;
        CHECK_OBJECT(tmp_class_creation_32__bases_orig);
        tmp_dircall_arg1_32 = tmp_class_creation_32__bases_orig;
        Py_INCREF(tmp_dircall_arg1_32);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_32};
            tmp_assign_source_256 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_256 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;

            goto try_except_handler_94;
        }
        assert(tmp_class_creation_32__bases == NULL);
        tmp_class_creation_32__bases = tmp_assign_source_256;
    }
    {
        PyObject *tmp_assign_source_257;
        tmp_assign_source_257 = PyDict_New();
        assert(tmp_class_creation_32__class_decl_dict == NULL);
        tmp_class_creation_32__class_decl_dict = tmp_assign_source_257;
    }
    {
        PyObject *tmp_assign_source_258;
        PyObject *tmp_metaclass_value_32;
        bool tmp_condition_result_187;
        PyObject *tmp_key_value_94;
        PyObject *tmp_dict_arg_value_94;
        PyObject *tmp_dict_arg_value_95;
        PyObject *tmp_key_value_95;
        nuitka_bool tmp_condition_result_188;
        int tmp_truth_name_32;
        PyObject *tmp_type_arg_63;
        PyObject *tmp_expression_value_166;
        PyObject *tmp_subscript_value_32;
        PyObject *tmp_bases_value_32;
        tmp_key_value_94 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
        tmp_dict_arg_value_94 = tmp_class_creation_32__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_94, tmp_key_value_94);
        assert(!(tmp_res == -1));
        tmp_condition_result_187 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_187 != false) {
            goto condexpr_true_63;
        } else {
            goto condexpr_false_63;
        }
        condexpr_true_63:;
        CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
        tmp_dict_arg_value_95 = tmp_class_creation_32__class_decl_dict;
        tmp_key_value_95 = mod_consts[43];
        tmp_metaclass_value_32 = DICT_GET_ITEM0(tmp_dict_arg_value_95, tmp_key_value_95);
        if (tmp_metaclass_value_32 == NULL) {
            tmp_metaclass_value_32 = Py_None;
        }
        assert(!(tmp_metaclass_value_32 == NULL));
        Py_INCREF(tmp_metaclass_value_32);
        goto condexpr_end_63;
        condexpr_false_63:;
        CHECK_OBJECT(tmp_class_creation_32__bases);
        tmp_truth_name_32 = CHECK_IF_TRUE(tmp_class_creation_32__bases);
        if (tmp_truth_name_32 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;

            goto try_except_handler_94;
        }
        tmp_condition_result_188 = tmp_truth_name_32 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_188 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_64;
        } else {
            goto condexpr_false_64;
        }
        condexpr_true_64:;
        CHECK_OBJECT(tmp_class_creation_32__bases);
        tmp_expression_value_166 = tmp_class_creation_32__bases;
        tmp_subscript_value_32 = mod_consts[36];
        tmp_type_arg_63 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_166, tmp_subscript_value_32, 0);
        if (tmp_type_arg_63 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;

            goto try_except_handler_94;
        }
        tmp_metaclass_value_32 = BUILTIN_TYPE1(tmp_type_arg_63);
        Py_DECREF(tmp_type_arg_63);
        if (tmp_metaclass_value_32 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;

            goto try_except_handler_94;
        }
        goto condexpr_end_64;
        condexpr_false_64:;
        tmp_metaclass_value_32 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_32);
        condexpr_end_64:;
        condexpr_end_63:;
        CHECK_OBJECT(tmp_class_creation_32__bases);
        tmp_bases_value_32 = tmp_class_creation_32__bases;
        tmp_assign_source_258 = SELECT_METACLASS(tmp_metaclass_value_32, tmp_bases_value_32);
        Py_DECREF(tmp_metaclass_value_32);
        if (tmp_assign_source_258 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;

            goto try_except_handler_94;
        }
        assert(tmp_class_creation_32__metaclass == NULL);
        tmp_class_creation_32__metaclass = tmp_assign_source_258;
    }
    {
        bool tmp_condition_result_189;
        PyObject *tmp_key_value_96;
        PyObject *tmp_dict_arg_value_96;
        tmp_key_value_96 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
        tmp_dict_arg_value_96 = tmp_class_creation_32__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_96, tmp_key_value_96);
        assert(!(tmp_res == -1));
        tmp_condition_result_189 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_189 != false) {
            goto branch_yes_125;
        } else {
            goto branch_no_125;
        }
    }
    branch_yes_125:;
    CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_32__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 316;

        goto try_except_handler_94;
    }
    branch_no_125:;
    {
        nuitka_bool tmp_condition_result_190;
        PyObject *tmp_expression_value_167;
        CHECK_OBJECT(tmp_class_creation_32__metaclass);
        tmp_expression_value_167 = tmp_class_creation_32__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_167, mod_consts[44]);
        tmp_condition_result_190 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_190 == NUITKA_BOOL_TRUE) {
            goto branch_yes_126;
        } else {
            goto branch_no_126;
        }
    }
    branch_yes_126:;
    {
        PyObject *tmp_assign_source_259;
        PyObject *tmp_called_value_63;
        PyObject *tmp_expression_value_168;
        PyObject *tmp_args_value_63;
        PyObject *tmp_tuple_element_125;
        PyObject *tmp_kwargs_value_63;
        CHECK_OBJECT(tmp_class_creation_32__metaclass);
        tmp_expression_value_168 = tmp_class_creation_32__metaclass;
        tmp_called_value_63 = LOOKUP_ATTRIBUTE(tmp_expression_value_168, mod_consts[44]);
        if (tmp_called_value_63 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;

            goto try_except_handler_94;
        }
        tmp_tuple_element_125 = mod_consts[143];
        tmp_args_value_63 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_63, 0, tmp_tuple_element_125);
        CHECK_OBJECT(tmp_class_creation_32__bases);
        tmp_tuple_element_125 = tmp_class_creation_32__bases;
        PyTuple_SET_ITEM0(tmp_args_value_63, 1, tmp_tuple_element_125);
        CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
        tmp_kwargs_value_63 = tmp_class_creation_32__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 316;
        tmp_assign_source_259 = CALL_FUNCTION(tmp_called_value_63, tmp_args_value_63, tmp_kwargs_value_63);
        Py_DECREF(tmp_called_value_63);
        Py_DECREF(tmp_args_value_63);
        if (tmp_assign_source_259 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;

            goto try_except_handler_94;
        }
        assert(tmp_class_creation_32__prepared == NULL);
        tmp_class_creation_32__prepared = tmp_assign_source_259;
    }
    {
        bool tmp_condition_result_191;
        PyObject *tmp_operand_value_32;
        PyObject *tmp_expression_value_169;
        CHECK_OBJECT(tmp_class_creation_32__prepared);
        tmp_expression_value_169 = tmp_class_creation_32__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_169, mod_consts[46]);
        tmp_operand_value_32 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_32);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;

            goto try_except_handler_94;
        }
        tmp_condition_result_191 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_191 != false) {
            goto branch_yes_127;
        } else {
            goto branch_no_127;
        }
    }
    branch_yes_127:;
    {
        PyObject *tmp_raise_type_32;
        PyObject *tmp_raise_value_32;
        PyObject *tmp_left_value_32;
        PyObject *tmp_right_value_32;
        PyObject *tmp_tuple_element_126;
        PyObject *tmp_getattr_target_32;
        PyObject *tmp_getattr_attr_32;
        PyObject *tmp_getattr_default_32;
        tmp_raise_type_32 = PyExc_TypeError;
        tmp_left_value_32 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_32__metaclass);
        tmp_getattr_target_32 = tmp_class_creation_32__metaclass;
        tmp_getattr_attr_32 = mod_consts[48];
        tmp_getattr_default_32 = mod_consts[49];
        tmp_tuple_element_126 = BUILTIN_GETATTR(tmp_getattr_target_32, tmp_getattr_attr_32, tmp_getattr_default_32);
        if (tmp_tuple_element_126 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;

            goto try_except_handler_94;
        }
        tmp_right_value_32 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_170;
            PyObject *tmp_type_arg_64;
            PyTuple_SET_ITEM(tmp_right_value_32, 0, tmp_tuple_element_126);
            CHECK_OBJECT(tmp_class_creation_32__prepared);
            tmp_type_arg_64 = tmp_class_creation_32__prepared;
            tmp_expression_value_170 = BUILTIN_TYPE1(tmp_type_arg_64);
            assert(!(tmp_expression_value_170 == NULL));
            tmp_tuple_element_126 = LOOKUP_ATTRIBUTE(tmp_expression_value_170, mod_consts[48]);
            Py_DECREF(tmp_expression_value_170);
            if (tmp_tuple_element_126 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 316;

                goto tuple_build_exception_36;
            }
            PyTuple_SET_ITEM(tmp_right_value_32, 1, tmp_tuple_element_126);
        }
        goto tuple_build_noexception_36;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_36:;
        Py_DECREF(tmp_right_value_32);
        goto try_except_handler_94;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_36:;
        tmp_raise_value_32 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_32, tmp_right_value_32);
        Py_DECREF(tmp_right_value_32);
        if (tmp_raise_value_32 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;

            goto try_except_handler_94;
        }
        exception_type = tmp_raise_type_32;
        Py_INCREF(tmp_raise_type_32);
        exception_value = tmp_raise_value_32;
        exception_lineno = 316;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_94;
    }
    branch_no_127:;
    goto branch_end_126;
    branch_no_126:;
    {
        PyObject *tmp_assign_source_260;
        tmp_assign_source_260 = PyDict_New();
        assert(tmp_class_creation_32__prepared == NULL);
        tmp_class_creation_32__prepared = tmp_assign_source_260;
    }
    branch_end_126:;
    {
        PyObject *tmp_assign_source_261;
        {
            PyObject *tmp_set_locals_32;
            CHECK_OBJECT(tmp_class_creation_32__prepared);
            tmp_set_locals_32 = tmp_class_creation_32__prepared;
            locals_botocore$exceptions$$$class__32_AliasConflictParameterError_316 = tmp_set_locals_32;
            Py_INCREF(tmp_set_locals_32);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__32_AliasConflictParameterError_316, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;

            goto try_except_handler_96;
        }
        tmp_dictset_value = mod_consts[144];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__32_AliasConflictParameterError_316, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;

            goto try_except_handler_96;
        }
        tmp_dictset_value = mod_consts[143];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__32_AliasConflictParameterError_316, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;

            goto try_except_handler_96;
        }
        if (isFrameUnusable(cache_frame_a0ceb15d9408c7b45e848eee22bbec01_32)) {
            Py_XDECREF(cache_frame_a0ceb15d9408c7b45e848eee22bbec01_32);

#if _DEBUG_REFCOUNTS
            if (cache_frame_a0ceb15d9408c7b45e848eee22bbec01_32 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_a0ceb15d9408c7b45e848eee22bbec01_32 = MAKE_FUNCTION_FRAME(codeobj_a0ceb15d9408c7b45e848eee22bbec01, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_a0ceb15d9408c7b45e848eee22bbec01_32->m_type_description == NULL);
        frame_a0ceb15d9408c7b45e848eee22bbec01_32 = cache_frame_a0ceb15d9408c7b45e848eee22bbec01_32;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_a0ceb15d9408c7b45e848eee22bbec01_32);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_a0ceb15d9408c7b45e848eee22bbec01_32) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[145];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__32_AliasConflictParameterError_316, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 324;
            type_description_2 = "o";
            goto frame_exception_exit_32;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a0ceb15d9408c7b45e848eee22bbec01_32);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_31;

        frame_exception_exit_32:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a0ceb15d9408c7b45e848eee22bbec01_32);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_a0ceb15d9408c7b45e848eee22bbec01_32, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_a0ceb15d9408c7b45e848eee22bbec01_32->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_a0ceb15d9408c7b45e848eee22bbec01_32, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_a0ceb15d9408c7b45e848eee22bbec01_32,
            type_description_2,
            outline_31_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_a0ceb15d9408c7b45e848eee22bbec01_32 == cache_frame_a0ceb15d9408c7b45e848eee22bbec01_32) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_a0ceb15d9408c7b45e848eee22bbec01_32);
            cache_frame_a0ceb15d9408c7b45e848eee22bbec01_32 = NULL;
        }

        assertFrameObject(frame_a0ceb15d9408c7b45e848eee22bbec01_32);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_31;

        frame_no_exception_31:;
        goto skip_nested_handling_31;
        nested_frame_exit_31:;

        goto try_except_handler_96;
        skip_nested_handling_31:;
        {
            nuitka_bool tmp_condition_result_192;
            PyObject *tmp_cmp_expr_left_32;
            PyObject *tmp_cmp_expr_right_32;
            CHECK_OBJECT(tmp_class_creation_32__bases);
            tmp_cmp_expr_left_32 = tmp_class_creation_32__bases;
            CHECK_OBJECT(tmp_class_creation_32__bases_orig);
            tmp_cmp_expr_right_32 = tmp_class_creation_32__bases_orig;
            tmp_condition_result_192 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_32, tmp_cmp_expr_right_32);
            if (tmp_condition_result_192 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 316;

                goto try_except_handler_96;
            }
            if (tmp_condition_result_192 == NUITKA_BOOL_TRUE) {
                goto branch_yes_128;
            } else {
                goto branch_no_128;
            }
            assert(tmp_condition_result_192 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_128:;
        CHECK_OBJECT(tmp_class_creation_32__bases_orig);
        tmp_dictset_value = tmp_class_creation_32__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__32_AliasConflictParameterError_316, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;

            goto try_except_handler_96;
        }
        branch_no_128:;
        {
            PyObject *tmp_assign_source_262;
            PyObject *tmp_called_value_64;
            PyObject *tmp_args_value_64;
            PyObject *tmp_tuple_element_127;
            PyObject *tmp_kwargs_value_64;
            CHECK_OBJECT(tmp_class_creation_32__metaclass);
            tmp_called_value_64 = tmp_class_creation_32__metaclass;
            tmp_tuple_element_127 = mod_consts[143];
            tmp_args_value_64 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_64, 0, tmp_tuple_element_127);
            CHECK_OBJECT(tmp_class_creation_32__bases);
            tmp_tuple_element_127 = tmp_class_creation_32__bases;
            PyTuple_SET_ITEM0(tmp_args_value_64, 1, tmp_tuple_element_127);
            tmp_tuple_element_127 = locals_botocore$exceptions$$$class__32_AliasConflictParameterError_316;
            PyTuple_SET_ITEM0(tmp_args_value_64, 2, tmp_tuple_element_127);
            CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
            tmp_kwargs_value_64 = tmp_class_creation_32__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 316;
            tmp_assign_source_262 = CALL_FUNCTION(tmp_called_value_64, tmp_args_value_64, tmp_kwargs_value_64);
            Py_DECREF(tmp_args_value_64);
            if (tmp_assign_source_262 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 316;

                goto try_except_handler_96;
            }
            assert(outline_31_var___class__ == NULL);
            outline_31_var___class__ = tmp_assign_source_262;
        }
        CHECK_OBJECT(outline_31_var___class__);
        tmp_assign_source_261 = outline_31_var___class__;
        Py_INCREF(tmp_assign_source_261);
        goto try_return_handler_96;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_96:;
        Py_DECREF(locals_botocore$exceptions$$$class__32_AliasConflictParameterError_316);
        locals_botocore$exceptions$$$class__32_AliasConflictParameterError_316 = NULL;
        goto try_return_handler_95;
        // Exception handler code:
        try_except_handler_96:;
        exception_keeper_type_94 = exception_type;
        exception_keeper_value_94 = exception_value;
        exception_keeper_tb_94 = exception_tb;
        exception_keeper_lineno_94 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__32_AliasConflictParameterError_316);
        locals_botocore$exceptions$$$class__32_AliasConflictParameterError_316 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_94;
        exception_value = exception_keeper_value_94;
        exception_tb = exception_keeper_tb_94;
        exception_lineno = exception_keeper_lineno_94;

        goto try_except_handler_95;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_95:;
        CHECK_OBJECT(outline_31_var___class__);
        Py_DECREF(outline_31_var___class__);
        outline_31_var___class__ = NULL;
        goto outline_result_32;
        // Exception handler code:
        try_except_handler_95:;
        exception_keeper_type_95 = exception_type;
        exception_keeper_value_95 = exception_value;
        exception_keeper_tb_95 = exception_tb;
        exception_keeper_lineno_95 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_95;
        exception_value = exception_keeper_value_95;
        exception_tb = exception_keeper_tb_95;
        exception_lineno = exception_keeper_lineno_95;

        goto outline_exception_32;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_32:;
        exception_lineno = 316;
        goto try_except_handler_94;
        outline_result_32:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[143], tmp_assign_source_261);
    }
    goto try_end_32;
    // Exception handler code:
    try_except_handler_94:;
    exception_keeper_type_96 = exception_type;
    exception_keeper_value_96 = exception_value;
    exception_keeper_tb_96 = exception_tb;
    exception_keeper_lineno_96 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_32__bases_orig);
    tmp_class_creation_32__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_32__bases);
    tmp_class_creation_32__bases = NULL;
    Py_XDECREF(tmp_class_creation_32__class_decl_dict);
    tmp_class_creation_32__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_32__metaclass);
    tmp_class_creation_32__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_32__prepared);
    tmp_class_creation_32__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_96;
    exception_value = exception_keeper_value_96;
    exception_tb = exception_keeper_tb_96;
    exception_lineno = exception_keeper_lineno_96;

    goto frame_exception_exit_1;
    // End of try:
    try_end_32:;
    CHECK_OBJECT(tmp_class_creation_32__bases_orig);
    Py_DECREF(tmp_class_creation_32__bases_orig);
    tmp_class_creation_32__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_32__bases);
    Py_DECREF(tmp_class_creation_32__bases);
    tmp_class_creation_32__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
    Py_DECREF(tmp_class_creation_32__class_decl_dict);
    tmp_class_creation_32__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_32__metaclass);
    Py_DECREF(tmp_class_creation_32__metaclass);
    tmp_class_creation_32__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_32__prepared);
    Py_DECREF(tmp_class_creation_32__prepared);
    tmp_class_creation_32__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_263;
        PyObject *tmp_tuple_element_128;
        tmp_tuple_element_128 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_128 == NULL)) {
            tmp_tuple_element_128 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_128 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 330;

            goto try_except_handler_97;
        }
        tmp_assign_source_263 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_263, 0, tmp_tuple_element_128);
        assert(tmp_class_creation_33__bases_orig == NULL);
        tmp_class_creation_33__bases_orig = tmp_assign_source_263;
    }
    {
        PyObject *tmp_assign_source_264;
        PyObject *tmp_dircall_arg1_33;
        CHECK_OBJECT(tmp_class_creation_33__bases_orig);
        tmp_dircall_arg1_33 = tmp_class_creation_33__bases_orig;
        Py_INCREF(tmp_dircall_arg1_33);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_33};
            tmp_assign_source_264 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_264 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 330;

            goto try_except_handler_97;
        }
        assert(tmp_class_creation_33__bases == NULL);
        tmp_class_creation_33__bases = tmp_assign_source_264;
    }
    {
        PyObject *tmp_assign_source_265;
        tmp_assign_source_265 = PyDict_New();
        assert(tmp_class_creation_33__class_decl_dict == NULL);
        tmp_class_creation_33__class_decl_dict = tmp_assign_source_265;
    }
    {
        PyObject *tmp_assign_source_266;
        PyObject *tmp_metaclass_value_33;
        bool tmp_condition_result_193;
        PyObject *tmp_key_value_97;
        PyObject *tmp_dict_arg_value_97;
        PyObject *tmp_dict_arg_value_98;
        PyObject *tmp_key_value_98;
        nuitka_bool tmp_condition_result_194;
        int tmp_truth_name_33;
        PyObject *tmp_type_arg_65;
        PyObject *tmp_expression_value_171;
        PyObject *tmp_subscript_value_33;
        PyObject *tmp_bases_value_33;
        tmp_key_value_97 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
        tmp_dict_arg_value_97 = tmp_class_creation_33__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_97, tmp_key_value_97);
        assert(!(tmp_res == -1));
        tmp_condition_result_193 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_193 != false) {
            goto condexpr_true_65;
        } else {
            goto condexpr_false_65;
        }
        condexpr_true_65:;
        CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
        tmp_dict_arg_value_98 = tmp_class_creation_33__class_decl_dict;
        tmp_key_value_98 = mod_consts[43];
        tmp_metaclass_value_33 = DICT_GET_ITEM0(tmp_dict_arg_value_98, tmp_key_value_98);
        if (tmp_metaclass_value_33 == NULL) {
            tmp_metaclass_value_33 = Py_None;
        }
        assert(!(tmp_metaclass_value_33 == NULL));
        Py_INCREF(tmp_metaclass_value_33);
        goto condexpr_end_65;
        condexpr_false_65:;
        CHECK_OBJECT(tmp_class_creation_33__bases);
        tmp_truth_name_33 = CHECK_IF_TRUE(tmp_class_creation_33__bases);
        if (tmp_truth_name_33 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 330;

            goto try_except_handler_97;
        }
        tmp_condition_result_194 = tmp_truth_name_33 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_194 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_66;
        } else {
            goto condexpr_false_66;
        }
        condexpr_true_66:;
        CHECK_OBJECT(tmp_class_creation_33__bases);
        tmp_expression_value_171 = tmp_class_creation_33__bases;
        tmp_subscript_value_33 = mod_consts[36];
        tmp_type_arg_65 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_171, tmp_subscript_value_33, 0);
        if (tmp_type_arg_65 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 330;

            goto try_except_handler_97;
        }
        tmp_metaclass_value_33 = BUILTIN_TYPE1(tmp_type_arg_65);
        Py_DECREF(tmp_type_arg_65);
        if (tmp_metaclass_value_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 330;

            goto try_except_handler_97;
        }
        goto condexpr_end_66;
        condexpr_false_66:;
        tmp_metaclass_value_33 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_33);
        condexpr_end_66:;
        condexpr_end_65:;
        CHECK_OBJECT(tmp_class_creation_33__bases);
        tmp_bases_value_33 = tmp_class_creation_33__bases;
        tmp_assign_source_266 = SELECT_METACLASS(tmp_metaclass_value_33, tmp_bases_value_33);
        Py_DECREF(tmp_metaclass_value_33);
        if (tmp_assign_source_266 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 330;

            goto try_except_handler_97;
        }
        assert(tmp_class_creation_33__metaclass == NULL);
        tmp_class_creation_33__metaclass = tmp_assign_source_266;
    }
    {
        bool tmp_condition_result_195;
        PyObject *tmp_key_value_99;
        PyObject *tmp_dict_arg_value_99;
        tmp_key_value_99 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
        tmp_dict_arg_value_99 = tmp_class_creation_33__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_99, tmp_key_value_99);
        assert(!(tmp_res == -1));
        tmp_condition_result_195 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_195 != false) {
            goto branch_yes_129;
        } else {
            goto branch_no_129;
        }
    }
    branch_yes_129:;
    CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_33__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 330;

        goto try_except_handler_97;
    }
    branch_no_129:;
    {
        nuitka_bool tmp_condition_result_196;
        PyObject *tmp_expression_value_172;
        CHECK_OBJECT(tmp_class_creation_33__metaclass);
        tmp_expression_value_172 = tmp_class_creation_33__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_172, mod_consts[44]);
        tmp_condition_result_196 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_196 == NUITKA_BOOL_TRUE) {
            goto branch_yes_130;
        } else {
            goto branch_no_130;
        }
    }
    branch_yes_130:;
    {
        PyObject *tmp_assign_source_267;
        PyObject *tmp_called_value_65;
        PyObject *tmp_expression_value_173;
        PyObject *tmp_args_value_65;
        PyObject *tmp_tuple_element_129;
        PyObject *tmp_kwargs_value_65;
        CHECK_OBJECT(tmp_class_creation_33__metaclass);
        tmp_expression_value_173 = tmp_class_creation_33__metaclass;
        tmp_called_value_65 = LOOKUP_ATTRIBUTE(tmp_expression_value_173, mod_consts[44]);
        if (tmp_called_value_65 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 330;

            goto try_except_handler_97;
        }
        tmp_tuple_element_129 = mod_consts[146];
        tmp_args_value_65 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_65, 0, tmp_tuple_element_129);
        CHECK_OBJECT(tmp_class_creation_33__bases);
        tmp_tuple_element_129 = tmp_class_creation_33__bases;
        PyTuple_SET_ITEM0(tmp_args_value_65, 1, tmp_tuple_element_129);
        CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
        tmp_kwargs_value_65 = tmp_class_creation_33__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 330;
        tmp_assign_source_267 = CALL_FUNCTION(tmp_called_value_65, tmp_args_value_65, tmp_kwargs_value_65);
        Py_DECREF(tmp_called_value_65);
        Py_DECREF(tmp_args_value_65);
        if (tmp_assign_source_267 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 330;

            goto try_except_handler_97;
        }
        assert(tmp_class_creation_33__prepared == NULL);
        tmp_class_creation_33__prepared = tmp_assign_source_267;
    }
    {
        bool tmp_condition_result_197;
        PyObject *tmp_operand_value_33;
        PyObject *tmp_expression_value_174;
        CHECK_OBJECT(tmp_class_creation_33__prepared);
        tmp_expression_value_174 = tmp_class_creation_33__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_174, mod_consts[46]);
        tmp_operand_value_33 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_33);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 330;

            goto try_except_handler_97;
        }
        tmp_condition_result_197 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_197 != false) {
            goto branch_yes_131;
        } else {
            goto branch_no_131;
        }
    }
    branch_yes_131:;
    {
        PyObject *tmp_raise_type_33;
        PyObject *tmp_raise_value_33;
        PyObject *tmp_left_value_33;
        PyObject *tmp_right_value_33;
        PyObject *tmp_tuple_element_130;
        PyObject *tmp_getattr_target_33;
        PyObject *tmp_getattr_attr_33;
        PyObject *tmp_getattr_default_33;
        tmp_raise_type_33 = PyExc_TypeError;
        tmp_left_value_33 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_33__metaclass);
        tmp_getattr_target_33 = tmp_class_creation_33__metaclass;
        tmp_getattr_attr_33 = mod_consts[48];
        tmp_getattr_default_33 = mod_consts[49];
        tmp_tuple_element_130 = BUILTIN_GETATTR(tmp_getattr_target_33, tmp_getattr_attr_33, tmp_getattr_default_33);
        if (tmp_tuple_element_130 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 330;

            goto try_except_handler_97;
        }
        tmp_right_value_33 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_175;
            PyObject *tmp_type_arg_66;
            PyTuple_SET_ITEM(tmp_right_value_33, 0, tmp_tuple_element_130);
            CHECK_OBJECT(tmp_class_creation_33__prepared);
            tmp_type_arg_66 = tmp_class_creation_33__prepared;
            tmp_expression_value_175 = BUILTIN_TYPE1(tmp_type_arg_66);
            assert(!(tmp_expression_value_175 == NULL));
            tmp_tuple_element_130 = LOOKUP_ATTRIBUTE(tmp_expression_value_175, mod_consts[48]);
            Py_DECREF(tmp_expression_value_175);
            if (tmp_tuple_element_130 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 330;

                goto tuple_build_exception_37;
            }
            PyTuple_SET_ITEM(tmp_right_value_33, 1, tmp_tuple_element_130);
        }
        goto tuple_build_noexception_37;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_37:;
        Py_DECREF(tmp_right_value_33);
        goto try_except_handler_97;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_37:;
        tmp_raise_value_33 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_33, tmp_right_value_33);
        Py_DECREF(tmp_right_value_33);
        if (tmp_raise_value_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 330;

            goto try_except_handler_97;
        }
        exception_type = tmp_raise_type_33;
        Py_INCREF(tmp_raise_type_33);
        exception_value = tmp_raise_value_33;
        exception_lineno = 330;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_97;
    }
    branch_no_131:;
    goto branch_end_130;
    branch_no_130:;
    {
        PyObject *tmp_assign_source_268;
        tmp_assign_source_268 = PyDict_New();
        assert(tmp_class_creation_33__prepared == NULL);
        tmp_class_creation_33__prepared = tmp_assign_source_268;
    }
    branch_end_130:;
    {
        PyObject *tmp_assign_source_269;
        {
            PyObject *tmp_set_locals_33;
            CHECK_OBJECT(tmp_class_creation_33__prepared);
            tmp_set_locals_33 = tmp_class_creation_33__prepared;
            locals_botocore$exceptions$$$class__33_UnknownServiceStyle_330 = tmp_set_locals_33;
            Py_INCREF(tmp_set_locals_33);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__33_UnknownServiceStyle_330, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 330;

            goto try_except_handler_99;
        }
        tmp_dictset_value = mod_consts[147];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__33_UnknownServiceStyle_330, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 330;

            goto try_except_handler_99;
        }
        tmp_dictset_value = mod_consts[146];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__33_UnknownServiceStyle_330, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 330;

            goto try_except_handler_99;
        }
        if (isFrameUnusable(cache_frame_7074a378db1bc1ab719a596cfea04cd7_33)) {
            Py_XDECREF(cache_frame_7074a378db1bc1ab719a596cfea04cd7_33);

#if _DEBUG_REFCOUNTS
            if (cache_frame_7074a378db1bc1ab719a596cfea04cd7_33 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_7074a378db1bc1ab719a596cfea04cd7_33 = MAKE_FUNCTION_FRAME(codeobj_7074a378db1bc1ab719a596cfea04cd7, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_7074a378db1bc1ab719a596cfea04cd7_33->m_type_description == NULL);
        frame_7074a378db1bc1ab719a596cfea04cd7_33 = cache_frame_7074a378db1bc1ab719a596cfea04cd7_33;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_7074a378db1bc1ab719a596cfea04cd7_33);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_7074a378db1bc1ab719a596cfea04cd7_33) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[148];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__33_UnknownServiceStyle_330, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 336;
            type_description_2 = "o";
            goto frame_exception_exit_33;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_7074a378db1bc1ab719a596cfea04cd7_33);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_32;

        frame_exception_exit_33:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_7074a378db1bc1ab719a596cfea04cd7_33);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_7074a378db1bc1ab719a596cfea04cd7_33, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_7074a378db1bc1ab719a596cfea04cd7_33->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_7074a378db1bc1ab719a596cfea04cd7_33, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_7074a378db1bc1ab719a596cfea04cd7_33,
            type_description_2,
            outline_32_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_7074a378db1bc1ab719a596cfea04cd7_33 == cache_frame_7074a378db1bc1ab719a596cfea04cd7_33) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_7074a378db1bc1ab719a596cfea04cd7_33);
            cache_frame_7074a378db1bc1ab719a596cfea04cd7_33 = NULL;
        }

        assertFrameObject(frame_7074a378db1bc1ab719a596cfea04cd7_33);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_32;

        frame_no_exception_32:;
        goto skip_nested_handling_32;
        nested_frame_exit_32:;

        goto try_except_handler_99;
        skip_nested_handling_32:;
        {
            nuitka_bool tmp_condition_result_198;
            PyObject *tmp_cmp_expr_left_33;
            PyObject *tmp_cmp_expr_right_33;
            CHECK_OBJECT(tmp_class_creation_33__bases);
            tmp_cmp_expr_left_33 = tmp_class_creation_33__bases;
            CHECK_OBJECT(tmp_class_creation_33__bases_orig);
            tmp_cmp_expr_right_33 = tmp_class_creation_33__bases_orig;
            tmp_condition_result_198 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_33, tmp_cmp_expr_right_33);
            if (tmp_condition_result_198 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 330;

                goto try_except_handler_99;
            }
            if (tmp_condition_result_198 == NUITKA_BOOL_TRUE) {
                goto branch_yes_132;
            } else {
                goto branch_no_132;
            }
            assert(tmp_condition_result_198 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_132:;
        CHECK_OBJECT(tmp_class_creation_33__bases_orig);
        tmp_dictset_value = tmp_class_creation_33__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__33_UnknownServiceStyle_330, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 330;

            goto try_except_handler_99;
        }
        branch_no_132:;
        {
            PyObject *tmp_assign_source_270;
            PyObject *tmp_called_value_66;
            PyObject *tmp_args_value_66;
            PyObject *tmp_tuple_element_131;
            PyObject *tmp_kwargs_value_66;
            CHECK_OBJECT(tmp_class_creation_33__metaclass);
            tmp_called_value_66 = tmp_class_creation_33__metaclass;
            tmp_tuple_element_131 = mod_consts[146];
            tmp_args_value_66 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_66, 0, tmp_tuple_element_131);
            CHECK_OBJECT(tmp_class_creation_33__bases);
            tmp_tuple_element_131 = tmp_class_creation_33__bases;
            PyTuple_SET_ITEM0(tmp_args_value_66, 1, tmp_tuple_element_131);
            tmp_tuple_element_131 = locals_botocore$exceptions$$$class__33_UnknownServiceStyle_330;
            PyTuple_SET_ITEM0(tmp_args_value_66, 2, tmp_tuple_element_131);
            CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
            tmp_kwargs_value_66 = tmp_class_creation_33__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 330;
            tmp_assign_source_270 = CALL_FUNCTION(tmp_called_value_66, tmp_args_value_66, tmp_kwargs_value_66);
            Py_DECREF(tmp_args_value_66);
            if (tmp_assign_source_270 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 330;

                goto try_except_handler_99;
            }
            assert(outline_32_var___class__ == NULL);
            outline_32_var___class__ = tmp_assign_source_270;
        }
        CHECK_OBJECT(outline_32_var___class__);
        tmp_assign_source_269 = outline_32_var___class__;
        Py_INCREF(tmp_assign_source_269);
        goto try_return_handler_99;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_99:;
        Py_DECREF(locals_botocore$exceptions$$$class__33_UnknownServiceStyle_330);
        locals_botocore$exceptions$$$class__33_UnknownServiceStyle_330 = NULL;
        goto try_return_handler_98;
        // Exception handler code:
        try_except_handler_99:;
        exception_keeper_type_97 = exception_type;
        exception_keeper_value_97 = exception_value;
        exception_keeper_tb_97 = exception_tb;
        exception_keeper_lineno_97 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__33_UnknownServiceStyle_330);
        locals_botocore$exceptions$$$class__33_UnknownServiceStyle_330 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_97;
        exception_value = exception_keeper_value_97;
        exception_tb = exception_keeper_tb_97;
        exception_lineno = exception_keeper_lineno_97;

        goto try_except_handler_98;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_98:;
        CHECK_OBJECT(outline_32_var___class__);
        Py_DECREF(outline_32_var___class__);
        outline_32_var___class__ = NULL;
        goto outline_result_33;
        // Exception handler code:
        try_except_handler_98:;
        exception_keeper_type_98 = exception_type;
        exception_keeper_value_98 = exception_value;
        exception_keeper_tb_98 = exception_tb;
        exception_keeper_lineno_98 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_98;
        exception_value = exception_keeper_value_98;
        exception_tb = exception_keeper_tb_98;
        exception_lineno = exception_keeper_lineno_98;

        goto outline_exception_33;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_33:;
        exception_lineno = 330;
        goto try_except_handler_97;
        outline_result_33:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[146], tmp_assign_source_269);
    }
    goto try_end_33;
    // Exception handler code:
    try_except_handler_97:;
    exception_keeper_type_99 = exception_type;
    exception_keeper_value_99 = exception_value;
    exception_keeper_tb_99 = exception_tb;
    exception_keeper_lineno_99 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_33__bases_orig);
    tmp_class_creation_33__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_33__bases);
    tmp_class_creation_33__bases = NULL;
    Py_XDECREF(tmp_class_creation_33__class_decl_dict);
    tmp_class_creation_33__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_33__metaclass);
    tmp_class_creation_33__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_33__prepared);
    tmp_class_creation_33__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_99;
    exception_value = exception_keeper_value_99;
    exception_tb = exception_keeper_tb_99;
    exception_lineno = exception_keeper_lineno_99;

    goto frame_exception_exit_1;
    // End of try:
    try_end_33:;
    CHECK_OBJECT(tmp_class_creation_33__bases_orig);
    Py_DECREF(tmp_class_creation_33__bases_orig);
    tmp_class_creation_33__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_33__bases);
    Py_DECREF(tmp_class_creation_33__bases);
    tmp_class_creation_33__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
    Py_DECREF(tmp_class_creation_33__class_decl_dict);
    tmp_class_creation_33__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_33__metaclass);
    Py_DECREF(tmp_class_creation_33__metaclass);
    tmp_class_creation_33__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_33__prepared);
    Py_DECREF(tmp_class_creation_33__prepared);
    tmp_class_creation_33__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_271;
        PyObject *tmp_tuple_element_132;
        tmp_tuple_element_132 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_132 == NULL)) {
            tmp_tuple_element_132 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_132 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 339;

            goto try_except_handler_100;
        }
        tmp_assign_source_271 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_271, 0, tmp_tuple_element_132);
        assert(tmp_class_creation_34__bases_orig == NULL);
        tmp_class_creation_34__bases_orig = tmp_assign_source_271;
    }
    {
        PyObject *tmp_assign_source_272;
        PyObject *tmp_dircall_arg1_34;
        CHECK_OBJECT(tmp_class_creation_34__bases_orig);
        tmp_dircall_arg1_34 = tmp_class_creation_34__bases_orig;
        Py_INCREF(tmp_dircall_arg1_34);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_34};
            tmp_assign_source_272 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_272 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 339;

            goto try_except_handler_100;
        }
        assert(tmp_class_creation_34__bases == NULL);
        tmp_class_creation_34__bases = tmp_assign_source_272;
    }
    {
        PyObject *tmp_assign_source_273;
        tmp_assign_source_273 = PyDict_New();
        assert(tmp_class_creation_34__class_decl_dict == NULL);
        tmp_class_creation_34__class_decl_dict = tmp_assign_source_273;
    }
    {
        PyObject *tmp_assign_source_274;
        PyObject *tmp_metaclass_value_34;
        bool tmp_condition_result_199;
        PyObject *tmp_key_value_100;
        PyObject *tmp_dict_arg_value_100;
        PyObject *tmp_dict_arg_value_101;
        PyObject *tmp_key_value_101;
        nuitka_bool tmp_condition_result_200;
        int tmp_truth_name_34;
        PyObject *tmp_type_arg_67;
        PyObject *tmp_expression_value_176;
        PyObject *tmp_subscript_value_34;
        PyObject *tmp_bases_value_34;
        tmp_key_value_100 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
        tmp_dict_arg_value_100 = tmp_class_creation_34__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_100, tmp_key_value_100);
        assert(!(tmp_res == -1));
        tmp_condition_result_199 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_199 != false) {
            goto condexpr_true_67;
        } else {
            goto condexpr_false_67;
        }
        condexpr_true_67:;
        CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
        tmp_dict_arg_value_101 = tmp_class_creation_34__class_decl_dict;
        tmp_key_value_101 = mod_consts[43];
        tmp_metaclass_value_34 = DICT_GET_ITEM0(tmp_dict_arg_value_101, tmp_key_value_101);
        if (tmp_metaclass_value_34 == NULL) {
            tmp_metaclass_value_34 = Py_None;
        }
        assert(!(tmp_metaclass_value_34 == NULL));
        Py_INCREF(tmp_metaclass_value_34);
        goto condexpr_end_67;
        condexpr_false_67:;
        CHECK_OBJECT(tmp_class_creation_34__bases);
        tmp_truth_name_34 = CHECK_IF_TRUE(tmp_class_creation_34__bases);
        if (tmp_truth_name_34 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 339;

            goto try_except_handler_100;
        }
        tmp_condition_result_200 = tmp_truth_name_34 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_200 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_68;
        } else {
            goto condexpr_false_68;
        }
        condexpr_true_68:;
        CHECK_OBJECT(tmp_class_creation_34__bases);
        tmp_expression_value_176 = tmp_class_creation_34__bases;
        tmp_subscript_value_34 = mod_consts[36];
        tmp_type_arg_67 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_176, tmp_subscript_value_34, 0);
        if (tmp_type_arg_67 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 339;

            goto try_except_handler_100;
        }
        tmp_metaclass_value_34 = BUILTIN_TYPE1(tmp_type_arg_67);
        Py_DECREF(tmp_type_arg_67);
        if (tmp_metaclass_value_34 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 339;

            goto try_except_handler_100;
        }
        goto condexpr_end_68;
        condexpr_false_68:;
        tmp_metaclass_value_34 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_34);
        condexpr_end_68:;
        condexpr_end_67:;
        CHECK_OBJECT(tmp_class_creation_34__bases);
        tmp_bases_value_34 = tmp_class_creation_34__bases;
        tmp_assign_source_274 = SELECT_METACLASS(tmp_metaclass_value_34, tmp_bases_value_34);
        Py_DECREF(tmp_metaclass_value_34);
        if (tmp_assign_source_274 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 339;

            goto try_except_handler_100;
        }
        assert(tmp_class_creation_34__metaclass == NULL);
        tmp_class_creation_34__metaclass = tmp_assign_source_274;
    }
    {
        bool tmp_condition_result_201;
        PyObject *tmp_key_value_102;
        PyObject *tmp_dict_arg_value_102;
        tmp_key_value_102 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
        tmp_dict_arg_value_102 = tmp_class_creation_34__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_102, tmp_key_value_102);
        assert(!(tmp_res == -1));
        tmp_condition_result_201 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_201 != false) {
            goto branch_yes_133;
        } else {
            goto branch_no_133;
        }
    }
    branch_yes_133:;
    CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_34__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 339;

        goto try_except_handler_100;
    }
    branch_no_133:;
    {
        nuitka_bool tmp_condition_result_202;
        PyObject *tmp_expression_value_177;
        CHECK_OBJECT(tmp_class_creation_34__metaclass);
        tmp_expression_value_177 = tmp_class_creation_34__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_177, mod_consts[44]);
        tmp_condition_result_202 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_202 == NUITKA_BOOL_TRUE) {
            goto branch_yes_134;
        } else {
            goto branch_no_134;
        }
    }
    branch_yes_134:;
    {
        PyObject *tmp_assign_source_275;
        PyObject *tmp_called_value_67;
        PyObject *tmp_expression_value_178;
        PyObject *tmp_args_value_67;
        PyObject *tmp_tuple_element_133;
        PyObject *tmp_kwargs_value_67;
        CHECK_OBJECT(tmp_class_creation_34__metaclass);
        tmp_expression_value_178 = tmp_class_creation_34__metaclass;
        tmp_called_value_67 = LOOKUP_ATTRIBUTE(tmp_expression_value_178, mod_consts[44]);
        if (tmp_called_value_67 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 339;

            goto try_except_handler_100;
        }
        tmp_tuple_element_133 = mod_consts[149];
        tmp_args_value_67 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_67, 0, tmp_tuple_element_133);
        CHECK_OBJECT(tmp_class_creation_34__bases);
        tmp_tuple_element_133 = tmp_class_creation_34__bases;
        PyTuple_SET_ITEM0(tmp_args_value_67, 1, tmp_tuple_element_133);
        CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
        tmp_kwargs_value_67 = tmp_class_creation_34__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 339;
        tmp_assign_source_275 = CALL_FUNCTION(tmp_called_value_67, tmp_args_value_67, tmp_kwargs_value_67);
        Py_DECREF(tmp_called_value_67);
        Py_DECREF(tmp_args_value_67);
        if (tmp_assign_source_275 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 339;

            goto try_except_handler_100;
        }
        assert(tmp_class_creation_34__prepared == NULL);
        tmp_class_creation_34__prepared = tmp_assign_source_275;
    }
    {
        bool tmp_condition_result_203;
        PyObject *tmp_operand_value_34;
        PyObject *tmp_expression_value_179;
        CHECK_OBJECT(tmp_class_creation_34__prepared);
        tmp_expression_value_179 = tmp_class_creation_34__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_179, mod_consts[46]);
        tmp_operand_value_34 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_34);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 339;

            goto try_except_handler_100;
        }
        tmp_condition_result_203 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_203 != false) {
            goto branch_yes_135;
        } else {
            goto branch_no_135;
        }
    }
    branch_yes_135:;
    {
        PyObject *tmp_raise_type_34;
        PyObject *tmp_raise_value_34;
        PyObject *tmp_left_value_34;
        PyObject *tmp_right_value_34;
        PyObject *tmp_tuple_element_134;
        PyObject *tmp_getattr_target_34;
        PyObject *tmp_getattr_attr_34;
        PyObject *tmp_getattr_default_34;
        tmp_raise_type_34 = PyExc_TypeError;
        tmp_left_value_34 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_34__metaclass);
        tmp_getattr_target_34 = tmp_class_creation_34__metaclass;
        tmp_getattr_attr_34 = mod_consts[48];
        tmp_getattr_default_34 = mod_consts[49];
        tmp_tuple_element_134 = BUILTIN_GETATTR(tmp_getattr_target_34, tmp_getattr_attr_34, tmp_getattr_default_34);
        if (tmp_tuple_element_134 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 339;

            goto try_except_handler_100;
        }
        tmp_right_value_34 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_180;
            PyObject *tmp_type_arg_68;
            PyTuple_SET_ITEM(tmp_right_value_34, 0, tmp_tuple_element_134);
            CHECK_OBJECT(tmp_class_creation_34__prepared);
            tmp_type_arg_68 = tmp_class_creation_34__prepared;
            tmp_expression_value_180 = BUILTIN_TYPE1(tmp_type_arg_68);
            assert(!(tmp_expression_value_180 == NULL));
            tmp_tuple_element_134 = LOOKUP_ATTRIBUTE(tmp_expression_value_180, mod_consts[48]);
            Py_DECREF(tmp_expression_value_180);
            if (tmp_tuple_element_134 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 339;

                goto tuple_build_exception_38;
            }
            PyTuple_SET_ITEM(tmp_right_value_34, 1, tmp_tuple_element_134);
        }
        goto tuple_build_noexception_38;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_38:;
        Py_DECREF(tmp_right_value_34);
        goto try_except_handler_100;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_38:;
        tmp_raise_value_34 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_34, tmp_right_value_34);
        Py_DECREF(tmp_right_value_34);
        if (tmp_raise_value_34 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 339;

            goto try_except_handler_100;
        }
        exception_type = tmp_raise_type_34;
        Py_INCREF(tmp_raise_type_34);
        exception_value = tmp_raise_value_34;
        exception_lineno = 339;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_100;
    }
    branch_no_135:;
    goto branch_end_134;
    branch_no_134:;
    {
        PyObject *tmp_assign_source_276;
        tmp_assign_source_276 = PyDict_New();
        assert(tmp_class_creation_34__prepared == NULL);
        tmp_class_creation_34__prepared = tmp_assign_source_276;
    }
    branch_end_134:;
    {
        PyObject *tmp_assign_source_277;
        {
            PyObject *tmp_set_locals_34;
            CHECK_OBJECT(tmp_class_creation_34__prepared);
            tmp_set_locals_34 = tmp_class_creation_34__prepared;
            locals_botocore$exceptions$$$class__34_PaginationError_339 = tmp_set_locals_34;
            Py_INCREF(tmp_set_locals_34);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__34_PaginationError_339, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 339;

            goto try_except_handler_102;
        }
        tmp_dictset_value = mod_consts[149];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__34_PaginationError_339, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 339;

            goto try_except_handler_102;
        }
        if (isFrameUnusable(cache_frame_67a21261be7184590cf89a63f235b4aa_34)) {
            Py_XDECREF(cache_frame_67a21261be7184590cf89a63f235b4aa_34);

#if _DEBUG_REFCOUNTS
            if (cache_frame_67a21261be7184590cf89a63f235b4aa_34 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_67a21261be7184590cf89a63f235b4aa_34 = MAKE_FUNCTION_FRAME(codeobj_67a21261be7184590cf89a63f235b4aa, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_67a21261be7184590cf89a63f235b4aa_34->m_type_description == NULL);
        frame_67a21261be7184590cf89a63f235b4aa_34 = cache_frame_67a21261be7184590cf89a63f235b4aa_34;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_67a21261be7184590cf89a63f235b4aa_34);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_67a21261be7184590cf89a63f235b4aa_34) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[150];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__34_PaginationError_339, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 340;
            type_description_2 = "o";
            goto frame_exception_exit_34;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_67a21261be7184590cf89a63f235b4aa_34);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_33;

        frame_exception_exit_34:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_67a21261be7184590cf89a63f235b4aa_34);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_67a21261be7184590cf89a63f235b4aa_34, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_67a21261be7184590cf89a63f235b4aa_34->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_67a21261be7184590cf89a63f235b4aa_34, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_67a21261be7184590cf89a63f235b4aa_34,
            type_description_2,
            outline_33_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_67a21261be7184590cf89a63f235b4aa_34 == cache_frame_67a21261be7184590cf89a63f235b4aa_34) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_67a21261be7184590cf89a63f235b4aa_34);
            cache_frame_67a21261be7184590cf89a63f235b4aa_34 = NULL;
        }

        assertFrameObject(frame_67a21261be7184590cf89a63f235b4aa_34);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_33;

        frame_no_exception_33:;
        goto skip_nested_handling_33;
        nested_frame_exit_33:;

        goto try_except_handler_102;
        skip_nested_handling_33:;
        {
            nuitka_bool tmp_condition_result_204;
            PyObject *tmp_cmp_expr_left_34;
            PyObject *tmp_cmp_expr_right_34;
            CHECK_OBJECT(tmp_class_creation_34__bases);
            tmp_cmp_expr_left_34 = tmp_class_creation_34__bases;
            CHECK_OBJECT(tmp_class_creation_34__bases_orig);
            tmp_cmp_expr_right_34 = tmp_class_creation_34__bases_orig;
            tmp_condition_result_204 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_34, tmp_cmp_expr_right_34);
            if (tmp_condition_result_204 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 339;

                goto try_except_handler_102;
            }
            if (tmp_condition_result_204 == NUITKA_BOOL_TRUE) {
                goto branch_yes_136;
            } else {
                goto branch_no_136;
            }
            assert(tmp_condition_result_204 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_136:;
        CHECK_OBJECT(tmp_class_creation_34__bases_orig);
        tmp_dictset_value = tmp_class_creation_34__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__34_PaginationError_339, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 339;

            goto try_except_handler_102;
        }
        branch_no_136:;
        {
            PyObject *tmp_assign_source_278;
            PyObject *tmp_called_value_68;
            PyObject *tmp_args_value_68;
            PyObject *tmp_tuple_element_135;
            PyObject *tmp_kwargs_value_68;
            CHECK_OBJECT(tmp_class_creation_34__metaclass);
            tmp_called_value_68 = tmp_class_creation_34__metaclass;
            tmp_tuple_element_135 = mod_consts[149];
            tmp_args_value_68 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_68, 0, tmp_tuple_element_135);
            CHECK_OBJECT(tmp_class_creation_34__bases);
            tmp_tuple_element_135 = tmp_class_creation_34__bases;
            PyTuple_SET_ITEM0(tmp_args_value_68, 1, tmp_tuple_element_135);
            tmp_tuple_element_135 = locals_botocore$exceptions$$$class__34_PaginationError_339;
            PyTuple_SET_ITEM0(tmp_args_value_68, 2, tmp_tuple_element_135);
            CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
            tmp_kwargs_value_68 = tmp_class_creation_34__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 339;
            tmp_assign_source_278 = CALL_FUNCTION(tmp_called_value_68, tmp_args_value_68, tmp_kwargs_value_68);
            Py_DECREF(tmp_args_value_68);
            if (tmp_assign_source_278 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 339;

                goto try_except_handler_102;
            }
            assert(outline_33_var___class__ == NULL);
            outline_33_var___class__ = tmp_assign_source_278;
        }
        CHECK_OBJECT(outline_33_var___class__);
        tmp_assign_source_277 = outline_33_var___class__;
        Py_INCREF(tmp_assign_source_277);
        goto try_return_handler_102;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_102:;
        Py_DECREF(locals_botocore$exceptions$$$class__34_PaginationError_339);
        locals_botocore$exceptions$$$class__34_PaginationError_339 = NULL;
        goto try_return_handler_101;
        // Exception handler code:
        try_except_handler_102:;
        exception_keeper_type_100 = exception_type;
        exception_keeper_value_100 = exception_value;
        exception_keeper_tb_100 = exception_tb;
        exception_keeper_lineno_100 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__34_PaginationError_339);
        locals_botocore$exceptions$$$class__34_PaginationError_339 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_100;
        exception_value = exception_keeper_value_100;
        exception_tb = exception_keeper_tb_100;
        exception_lineno = exception_keeper_lineno_100;

        goto try_except_handler_101;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_101:;
        CHECK_OBJECT(outline_33_var___class__);
        Py_DECREF(outline_33_var___class__);
        outline_33_var___class__ = NULL;
        goto outline_result_34;
        // Exception handler code:
        try_except_handler_101:;
        exception_keeper_type_101 = exception_type;
        exception_keeper_value_101 = exception_value;
        exception_keeper_tb_101 = exception_tb;
        exception_keeper_lineno_101 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_101;
        exception_value = exception_keeper_value_101;
        exception_tb = exception_keeper_tb_101;
        exception_lineno = exception_keeper_lineno_101;

        goto outline_exception_34;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_34:;
        exception_lineno = 339;
        goto try_except_handler_100;
        outline_result_34:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[149], tmp_assign_source_277);
    }
    goto try_end_34;
    // Exception handler code:
    try_except_handler_100:;
    exception_keeper_type_102 = exception_type;
    exception_keeper_value_102 = exception_value;
    exception_keeper_tb_102 = exception_tb;
    exception_keeper_lineno_102 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_34__bases_orig);
    tmp_class_creation_34__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_34__bases);
    tmp_class_creation_34__bases = NULL;
    Py_XDECREF(tmp_class_creation_34__class_decl_dict);
    tmp_class_creation_34__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_34__metaclass);
    tmp_class_creation_34__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_34__prepared);
    tmp_class_creation_34__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_102;
    exception_value = exception_keeper_value_102;
    exception_tb = exception_keeper_tb_102;
    exception_lineno = exception_keeper_lineno_102;

    goto frame_exception_exit_1;
    // End of try:
    try_end_34:;
    CHECK_OBJECT(tmp_class_creation_34__bases_orig);
    Py_DECREF(tmp_class_creation_34__bases_orig);
    tmp_class_creation_34__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_34__bases);
    Py_DECREF(tmp_class_creation_34__bases);
    tmp_class_creation_34__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
    Py_DECREF(tmp_class_creation_34__class_decl_dict);
    tmp_class_creation_34__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_34__metaclass);
    Py_DECREF(tmp_class_creation_34__metaclass);
    tmp_class_creation_34__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_34__prepared);
    Py_DECREF(tmp_class_creation_34__prepared);
    tmp_class_creation_34__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_279;
        PyObject *tmp_tuple_element_136;
        tmp_tuple_element_136 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_136 == NULL)) {
            tmp_tuple_element_136 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_136 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 343;

            goto try_except_handler_103;
        }
        tmp_assign_source_279 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_279, 0, tmp_tuple_element_136);
        assert(tmp_class_creation_35__bases_orig == NULL);
        tmp_class_creation_35__bases_orig = tmp_assign_source_279;
    }
    {
        PyObject *tmp_assign_source_280;
        PyObject *tmp_dircall_arg1_35;
        CHECK_OBJECT(tmp_class_creation_35__bases_orig);
        tmp_dircall_arg1_35 = tmp_class_creation_35__bases_orig;
        Py_INCREF(tmp_dircall_arg1_35);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_35};
            tmp_assign_source_280 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_280 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 343;

            goto try_except_handler_103;
        }
        assert(tmp_class_creation_35__bases == NULL);
        tmp_class_creation_35__bases = tmp_assign_source_280;
    }
    {
        PyObject *tmp_assign_source_281;
        tmp_assign_source_281 = PyDict_New();
        assert(tmp_class_creation_35__class_decl_dict == NULL);
        tmp_class_creation_35__class_decl_dict = tmp_assign_source_281;
    }
    {
        PyObject *tmp_assign_source_282;
        PyObject *tmp_metaclass_value_35;
        bool tmp_condition_result_205;
        PyObject *tmp_key_value_103;
        PyObject *tmp_dict_arg_value_103;
        PyObject *tmp_dict_arg_value_104;
        PyObject *tmp_key_value_104;
        nuitka_bool tmp_condition_result_206;
        int tmp_truth_name_35;
        PyObject *tmp_type_arg_69;
        PyObject *tmp_expression_value_181;
        PyObject *tmp_subscript_value_35;
        PyObject *tmp_bases_value_35;
        tmp_key_value_103 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
        tmp_dict_arg_value_103 = tmp_class_creation_35__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_103, tmp_key_value_103);
        assert(!(tmp_res == -1));
        tmp_condition_result_205 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_205 != false) {
            goto condexpr_true_69;
        } else {
            goto condexpr_false_69;
        }
        condexpr_true_69:;
        CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
        tmp_dict_arg_value_104 = tmp_class_creation_35__class_decl_dict;
        tmp_key_value_104 = mod_consts[43];
        tmp_metaclass_value_35 = DICT_GET_ITEM0(tmp_dict_arg_value_104, tmp_key_value_104);
        if (tmp_metaclass_value_35 == NULL) {
            tmp_metaclass_value_35 = Py_None;
        }
        assert(!(tmp_metaclass_value_35 == NULL));
        Py_INCREF(tmp_metaclass_value_35);
        goto condexpr_end_69;
        condexpr_false_69:;
        CHECK_OBJECT(tmp_class_creation_35__bases);
        tmp_truth_name_35 = CHECK_IF_TRUE(tmp_class_creation_35__bases);
        if (tmp_truth_name_35 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 343;

            goto try_except_handler_103;
        }
        tmp_condition_result_206 = tmp_truth_name_35 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_206 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_70;
        } else {
            goto condexpr_false_70;
        }
        condexpr_true_70:;
        CHECK_OBJECT(tmp_class_creation_35__bases);
        tmp_expression_value_181 = tmp_class_creation_35__bases;
        tmp_subscript_value_35 = mod_consts[36];
        tmp_type_arg_69 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_181, tmp_subscript_value_35, 0);
        if (tmp_type_arg_69 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 343;

            goto try_except_handler_103;
        }
        tmp_metaclass_value_35 = BUILTIN_TYPE1(tmp_type_arg_69);
        Py_DECREF(tmp_type_arg_69);
        if (tmp_metaclass_value_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 343;

            goto try_except_handler_103;
        }
        goto condexpr_end_70;
        condexpr_false_70:;
        tmp_metaclass_value_35 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_35);
        condexpr_end_70:;
        condexpr_end_69:;
        CHECK_OBJECT(tmp_class_creation_35__bases);
        tmp_bases_value_35 = tmp_class_creation_35__bases;
        tmp_assign_source_282 = SELECT_METACLASS(tmp_metaclass_value_35, tmp_bases_value_35);
        Py_DECREF(tmp_metaclass_value_35);
        if (tmp_assign_source_282 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 343;

            goto try_except_handler_103;
        }
        assert(tmp_class_creation_35__metaclass == NULL);
        tmp_class_creation_35__metaclass = tmp_assign_source_282;
    }
    {
        bool tmp_condition_result_207;
        PyObject *tmp_key_value_105;
        PyObject *tmp_dict_arg_value_105;
        tmp_key_value_105 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
        tmp_dict_arg_value_105 = tmp_class_creation_35__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_105, tmp_key_value_105);
        assert(!(tmp_res == -1));
        tmp_condition_result_207 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_207 != false) {
            goto branch_yes_137;
        } else {
            goto branch_no_137;
        }
    }
    branch_yes_137:;
    CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_35__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 343;

        goto try_except_handler_103;
    }
    branch_no_137:;
    {
        nuitka_bool tmp_condition_result_208;
        PyObject *tmp_expression_value_182;
        CHECK_OBJECT(tmp_class_creation_35__metaclass);
        tmp_expression_value_182 = tmp_class_creation_35__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_182, mod_consts[44]);
        tmp_condition_result_208 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_208 == NUITKA_BOOL_TRUE) {
            goto branch_yes_138;
        } else {
            goto branch_no_138;
        }
    }
    branch_yes_138:;
    {
        PyObject *tmp_assign_source_283;
        PyObject *tmp_called_value_69;
        PyObject *tmp_expression_value_183;
        PyObject *tmp_args_value_69;
        PyObject *tmp_tuple_element_137;
        PyObject *tmp_kwargs_value_69;
        CHECK_OBJECT(tmp_class_creation_35__metaclass);
        tmp_expression_value_183 = tmp_class_creation_35__metaclass;
        tmp_called_value_69 = LOOKUP_ATTRIBUTE(tmp_expression_value_183, mod_consts[44]);
        if (tmp_called_value_69 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 343;

            goto try_except_handler_103;
        }
        tmp_tuple_element_137 = mod_consts[151];
        tmp_args_value_69 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_69, 0, tmp_tuple_element_137);
        CHECK_OBJECT(tmp_class_creation_35__bases);
        tmp_tuple_element_137 = tmp_class_creation_35__bases;
        PyTuple_SET_ITEM0(tmp_args_value_69, 1, tmp_tuple_element_137);
        CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
        tmp_kwargs_value_69 = tmp_class_creation_35__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 343;
        tmp_assign_source_283 = CALL_FUNCTION(tmp_called_value_69, tmp_args_value_69, tmp_kwargs_value_69);
        Py_DECREF(tmp_called_value_69);
        Py_DECREF(tmp_args_value_69);
        if (tmp_assign_source_283 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 343;

            goto try_except_handler_103;
        }
        assert(tmp_class_creation_35__prepared == NULL);
        tmp_class_creation_35__prepared = tmp_assign_source_283;
    }
    {
        bool tmp_condition_result_209;
        PyObject *tmp_operand_value_35;
        PyObject *tmp_expression_value_184;
        CHECK_OBJECT(tmp_class_creation_35__prepared);
        tmp_expression_value_184 = tmp_class_creation_35__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_184, mod_consts[46]);
        tmp_operand_value_35 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_35);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 343;

            goto try_except_handler_103;
        }
        tmp_condition_result_209 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_209 != false) {
            goto branch_yes_139;
        } else {
            goto branch_no_139;
        }
    }
    branch_yes_139:;
    {
        PyObject *tmp_raise_type_35;
        PyObject *tmp_raise_value_35;
        PyObject *tmp_left_value_35;
        PyObject *tmp_right_value_35;
        PyObject *tmp_tuple_element_138;
        PyObject *tmp_getattr_target_35;
        PyObject *tmp_getattr_attr_35;
        PyObject *tmp_getattr_default_35;
        tmp_raise_type_35 = PyExc_TypeError;
        tmp_left_value_35 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_35__metaclass);
        tmp_getattr_target_35 = tmp_class_creation_35__metaclass;
        tmp_getattr_attr_35 = mod_consts[48];
        tmp_getattr_default_35 = mod_consts[49];
        tmp_tuple_element_138 = BUILTIN_GETATTR(tmp_getattr_target_35, tmp_getattr_attr_35, tmp_getattr_default_35);
        if (tmp_tuple_element_138 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 343;

            goto try_except_handler_103;
        }
        tmp_right_value_35 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_185;
            PyObject *tmp_type_arg_70;
            PyTuple_SET_ITEM(tmp_right_value_35, 0, tmp_tuple_element_138);
            CHECK_OBJECT(tmp_class_creation_35__prepared);
            tmp_type_arg_70 = tmp_class_creation_35__prepared;
            tmp_expression_value_185 = BUILTIN_TYPE1(tmp_type_arg_70);
            assert(!(tmp_expression_value_185 == NULL));
            tmp_tuple_element_138 = LOOKUP_ATTRIBUTE(tmp_expression_value_185, mod_consts[48]);
            Py_DECREF(tmp_expression_value_185);
            if (tmp_tuple_element_138 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 343;

                goto tuple_build_exception_39;
            }
            PyTuple_SET_ITEM(tmp_right_value_35, 1, tmp_tuple_element_138);
        }
        goto tuple_build_noexception_39;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_39:;
        Py_DECREF(tmp_right_value_35);
        goto try_except_handler_103;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_39:;
        tmp_raise_value_35 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_35, tmp_right_value_35);
        Py_DECREF(tmp_right_value_35);
        if (tmp_raise_value_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 343;

            goto try_except_handler_103;
        }
        exception_type = tmp_raise_type_35;
        Py_INCREF(tmp_raise_type_35);
        exception_value = tmp_raise_value_35;
        exception_lineno = 343;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_103;
    }
    branch_no_139:;
    goto branch_end_138;
    branch_no_138:;
    {
        PyObject *tmp_assign_source_284;
        tmp_assign_source_284 = PyDict_New();
        assert(tmp_class_creation_35__prepared == NULL);
        tmp_class_creation_35__prepared = tmp_assign_source_284;
    }
    branch_end_138:;
    {
        PyObject *tmp_assign_source_285;
        {
            PyObject *tmp_set_locals_35;
            CHECK_OBJECT(tmp_class_creation_35__prepared);
            tmp_set_locals_35 = tmp_class_creation_35__prepared;
            locals_botocore$exceptions$$$class__35_OperationNotPageableError_343 = tmp_set_locals_35;
            Py_INCREF(tmp_set_locals_35);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__35_OperationNotPageableError_343, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 343;

            goto try_except_handler_105;
        }
        tmp_dictset_value = mod_consts[151];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__35_OperationNotPageableError_343, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 343;

            goto try_except_handler_105;
        }
        if (isFrameUnusable(cache_frame_a72d0e59ff98038a11af02fdf245dbaa_35)) {
            Py_XDECREF(cache_frame_a72d0e59ff98038a11af02fdf245dbaa_35);

#if _DEBUG_REFCOUNTS
            if (cache_frame_a72d0e59ff98038a11af02fdf245dbaa_35 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_a72d0e59ff98038a11af02fdf245dbaa_35 = MAKE_FUNCTION_FRAME(codeobj_a72d0e59ff98038a11af02fdf245dbaa, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_a72d0e59ff98038a11af02fdf245dbaa_35->m_type_description == NULL);
        frame_a72d0e59ff98038a11af02fdf245dbaa_35 = cache_frame_a72d0e59ff98038a11af02fdf245dbaa_35;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_a72d0e59ff98038a11af02fdf245dbaa_35);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_a72d0e59ff98038a11af02fdf245dbaa_35) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[152];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__35_OperationNotPageableError_343, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 344;
            type_description_2 = "o";
            goto frame_exception_exit_35;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a72d0e59ff98038a11af02fdf245dbaa_35);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_34;

        frame_exception_exit_35:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a72d0e59ff98038a11af02fdf245dbaa_35);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_a72d0e59ff98038a11af02fdf245dbaa_35, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_a72d0e59ff98038a11af02fdf245dbaa_35->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_a72d0e59ff98038a11af02fdf245dbaa_35, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_a72d0e59ff98038a11af02fdf245dbaa_35,
            type_description_2,
            outline_34_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_a72d0e59ff98038a11af02fdf245dbaa_35 == cache_frame_a72d0e59ff98038a11af02fdf245dbaa_35) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_a72d0e59ff98038a11af02fdf245dbaa_35);
            cache_frame_a72d0e59ff98038a11af02fdf245dbaa_35 = NULL;
        }

        assertFrameObject(frame_a72d0e59ff98038a11af02fdf245dbaa_35);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_34;

        frame_no_exception_34:;
        goto skip_nested_handling_34;
        nested_frame_exit_34:;

        goto try_except_handler_105;
        skip_nested_handling_34:;
        {
            nuitka_bool tmp_condition_result_210;
            PyObject *tmp_cmp_expr_left_35;
            PyObject *tmp_cmp_expr_right_35;
            CHECK_OBJECT(tmp_class_creation_35__bases);
            tmp_cmp_expr_left_35 = tmp_class_creation_35__bases;
            CHECK_OBJECT(tmp_class_creation_35__bases_orig);
            tmp_cmp_expr_right_35 = tmp_class_creation_35__bases_orig;
            tmp_condition_result_210 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_35, tmp_cmp_expr_right_35);
            if (tmp_condition_result_210 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 343;

                goto try_except_handler_105;
            }
            if (tmp_condition_result_210 == NUITKA_BOOL_TRUE) {
                goto branch_yes_140;
            } else {
                goto branch_no_140;
            }
            assert(tmp_condition_result_210 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_140:;
        CHECK_OBJECT(tmp_class_creation_35__bases_orig);
        tmp_dictset_value = tmp_class_creation_35__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__35_OperationNotPageableError_343, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 343;

            goto try_except_handler_105;
        }
        branch_no_140:;
        {
            PyObject *tmp_assign_source_286;
            PyObject *tmp_called_value_70;
            PyObject *tmp_args_value_70;
            PyObject *tmp_tuple_element_139;
            PyObject *tmp_kwargs_value_70;
            CHECK_OBJECT(tmp_class_creation_35__metaclass);
            tmp_called_value_70 = tmp_class_creation_35__metaclass;
            tmp_tuple_element_139 = mod_consts[151];
            tmp_args_value_70 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_70, 0, tmp_tuple_element_139);
            CHECK_OBJECT(tmp_class_creation_35__bases);
            tmp_tuple_element_139 = tmp_class_creation_35__bases;
            PyTuple_SET_ITEM0(tmp_args_value_70, 1, tmp_tuple_element_139);
            tmp_tuple_element_139 = locals_botocore$exceptions$$$class__35_OperationNotPageableError_343;
            PyTuple_SET_ITEM0(tmp_args_value_70, 2, tmp_tuple_element_139);
            CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
            tmp_kwargs_value_70 = tmp_class_creation_35__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 343;
            tmp_assign_source_286 = CALL_FUNCTION(tmp_called_value_70, tmp_args_value_70, tmp_kwargs_value_70);
            Py_DECREF(tmp_args_value_70);
            if (tmp_assign_source_286 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 343;

                goto try_except_handler_105;
            }
            assert(outline_34_var___class__ == NULL);
            outline_34_var___class__ = tmp_assign_source_286;
        }
        CHECK_OBJECT(outline_34_var___class__);
        tmp_assign_source_285 = outline_34_var___class__;
        Py_INCREF(tmp_assign_source_285);
        goto try_return_handler_105;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_105:;
        Py_DECREF(locals_botocore$exceptions$$$class__35_OperationNotPageableError_343);
        locals_botocore$exceptions$$$class__35_OperationNotPageableError_343 = NULL;
        goto try_return_handler_104;
        // Exception handler code:
        try_except_handler_105:;
        exception_keeper_type_103 = exception_type;
        exception_keeper_value_103 = exception_value;
        exception_keeper_tb_103 = exception_tb;
        exception_keeper_lineno_103 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__35_OperationNotPageableError_343);
        locals_botocore$exceptions$$$class__35_OperationNotPageableError_343 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_103;
        exception_value = exception_keeper_value_103;
        exception_tb = exception_keeper_tb_103;
        exception_lineno = exception_keeper_lineno_103;

        goto try_except_handler_104;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_104:;
        CHECK_OBJECT(outline_34_var___class__);
        Py_DECREF(outline_34_var___class__);
        outline_34_var___class__ = NULL;
        goto outline_result_35;
        // Exception handler code:
        try_except_handler_104:;
        exception_keeper_type_104 = exception_type;
        exception_keeper_value_104 = exception_value;
        exception_keeper_tb_104 = exception_tb;
        exception_keeper_lineno_104 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_104;
        exception_value = exception_keeper_value_104;
        exception_tb = exception_keeper_tb_104;
        exception_lineno = exception_keeper_lineno_104;

        goto outline_exception_35;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_35:;
        exception_lineno = 343;
        goto try_except_handler_103;
        outline_result_35:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[151], tmp_assign_source_285);
    }
    goto try_end_35;
    // Exception handler code:
    try_except_handler_103:;
    exception_keeper_type_105 = exception_type;
    exception_keeper_value_105 = exception_value;
    exception_keeper_tb_105 = exception_tb;
    exception_keeper_lineno_105 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_35__bases_orig);
    tmp_class_creation_35__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_35__bases);
    tmp_class_creation_35__bases = NULL;
    Py_XDECREF(tmp_class_creation_35__class_decl_dict);
    tmp_class_creation_35__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_35__metaclass);
    tmp_class_creation_35__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_35__prepared);
    tmp_class_creation_35__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_105;
    exception_value = exception_keeper_value_105;
    exception_tb = exception_keeper_tb_105;
    exception_lineno = exception_keeper_lineno_105;

    goto frame_exception_exit_1;
    // End of try:
    try_end_35:;
    CHECK_OBJECT(tmp_class_creation_35__bases_orig);
    Py_DECREF(tmp_class_creation_35__bases_orig);
    tmp_class_creation_35__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_35__bases);
    Py_DECREF(tmp_class_creation_35__bases);
    tmp_class_creation_35__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
    Py_DECREF(tmp_class_creation_35__class_decl_dict);
    tmp_class_creation_35__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_35__metaclass);
    Py_DECREF(tmp_class_creation_35__metaclass);
    tmp_class_creation_35__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_35__prepared);
    Py_DECREF(tmp_class_creation_35__prepared);
    tmp_class_creation_35__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_287;
        PyObject *tmp_tuple_element_140;
        tmp_tuple_element_140 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_140 == NULL)) {
            tmp_tuple_element_140 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_140 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 347;

            goto try_except_handler_106;
        }
        tmp_assign_source_287 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_287, 0, tmp_tuple_element_140);
        assert(tmp_class_creation_36__bases_orig == NULL);
        tmp_class_creation_36__bases_orig = tmp_assign_source_287;
    }
    {
        PyObject *tmp_assign_source_288;
        PyObject *tmp_dircall_arg1_36;
        CHECK_OBJECT(tmp_class_creation_36__bases_orig);
        tmp_dircall_arg1_36 = tmp_class_creation_36__bases_orig;
        Py_INCREF(tmp_dircall_arg1_36);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_36};
            tmp_assign_source_288 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_288 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 347;

            goto try_except_handler_106;
        }
        assert(tmp_class_creation_36__bases == NULL);
        tmp_class_creation_36__bases = tmp_assign_source_288;
    }
    {
        PyObject *tmp_assign_source_289;
        tmp_assign_source_289 = PyDict_New();
        assert(tmp_class_creation_36__class_decl_dict == NULL);
        tmp_class_creation_36__class_decl_dict = tmp_assign_source_289;
    }
    {
        PyObject *tmp_assign_source_290;
        PyObject *tmp_metaclass_value_36;
        bool tmp_condition_result_211;
        PyObject *tmp_key_value_106;
        PyObject *tmp_dict_arg_value_106;
        PyObject *tmp_dict_arg_value_107;
        PyObject *tmp_key_value_107;
        nuitka_bool tmp_condition_result_212;
        int tmp_truth_name_36;
        PyObject *tmp_type_arg_71;
        PyObject *tmp_expression_value_186;
        PyObject *tmp_subscript_value_36;
        PyObject *tmp_bases_value_36;
        tmp_key_value_106 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
        tmp_dict_arg_value_106 = tmp_class_creation_36__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_106, tmp_key_value_106);
        assert(!(tmp_res == -1));
        tmp_condition_result_211 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_211 != false) {
            goto condexpr_true_71;
        } else {
            goto condexpr_false_71;
        }
        condexpr_true_71:;
        CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
        tmp_dict_arg_value_107 = tmp_class_creation_36__class_decl_dict;
        tmp_key_value_107 = mod_consts[43];
        tmp_metaclass_value_36 = DICT_GET_ITEM0(tmp_dict_arg_value_107, tmp_key_value_107);
        if (tmp_metaclass_value_36 == NULL) {
            tmp_metaclass_value_36 = Py_None;
        }
        assert(!(tmp_metaclass_value_36 == NULL));
        Py_INCREF(tmp_metaclass_value_36);
        goto condexpr_end_71;
        condexpr_false_71:;
        CHECK_OBJECT(tmp_class_creation_36__bases);
        tmp_truth_name_36 = CHECK_IF_TRUE(tmp_class_creation_36__bases);
        if (tmp_truth_name_36 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 347;

            goto try_except_handler_106;
        }
        tmp_condition_result_212 = tmp_truth_name_36 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_212 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_72;
        } else {
            goto condexpr_false_72;
        }
        condexpr_true_72:;
        CHECK_OBJECT(tmp_class_creation_36__bases);
        tmp_expression_value_186 = tmp_class_creation_36__bases;
        tmp_subscript_value_36 = mod_consts[36];
        tmp_type_arg_71 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_186, tmp_subscript_value_36, 0);
        if (tmp_type_arg_71 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 347;

            goto try_except_handler_106;
        }
        tmp_metaclass_value_36 = BUILTIN_TYPE1(tmp_type_arg_71);
        Py_DECREF(tmp_type_arg_71);
        if (tmp_metaclass_value_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 347;

            goto try_except_handler_106;
        }
        goto condexpr_end_72;
        condexpr_false_72:;
        tmp_metaclass_value_36 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_36);
        condexpr_end_72:;
        condexpr_end_71:;
        CHECK_OBJECT(tmp_class_creation_36__bases);
        tmp_bases_value_36 = tmp_class_creation_36__bases;
        tmp_assign_source_290 = SELECT_METACLASS(tmp_metaclass_value_36, tmp_bases_value_36);
        Py_DECREF(tmp_metaclass_value_36);
        if (tmp_assign_source_290 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 347;

            goto try_except_handler_106;
        }
        assert(tmp_class_creation_36__metaclass == NULL);
        tmp_class_creation_36__metaclass = tmp_assign_source_290;
    }
    {
        bool tmp_condition_result_213;
        PyObject *tmp_key_value_108;
        PyObject *tmp_dict_arg_value_108;
        tmp_key_value_108 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
        tmp_dict_arg_value_108 = tmp_class_creation_36__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_108, tmp_key_value_108);
        assert(!(tmp_res == -1));
        tmp_condition_result_213 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_213 != false) {
            goto branch_yes_141;
        } else {
            goto branch_no_141;
        }
    }
    branch_yes_141:;
    CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_36__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 347;

        goto try_except_handler_106;
    }
    branch_no_141:;
    {
        nuitka_bool tmp_condition_result_214;
        PyObject *tmp_expression_value_187;
        CHECK_OBJECT(tmp_class_creation_36__metaclass);
        tmp_expression_value_187 = tmp_class_creation_36__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_187, mod_consts[44]);
        tmp_condition_result_214 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_214 == NUITKA_BOOL_TRUE) {
            goto branch_yes_142;
        } else {
            goto branch_no_142;
        }
    }
    branch_yes_142:;
    {
        PyObject *tmp_assign_source_291;
        PyObject *tmp_called_value_71;
        PyObject *tmp_expression_value_188;
        PyObject *tmp_args_value_71;
        PyObject *tmp_tuple_element_141;
        PyObject *tmp_kwargs_value_71;
        CHECK_OBJECT(tmp_class_creation_36__metaclass);
        tmp_expression_value_188 = tmp_class_creation_36__metaclass;
        tmp_called_value_71 = LOOKUP_ATTRIBUTE(tmp_expression_value_188, mod_consts[44]);
        if (tmp_called_value_71 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 347;

            goto try_except_handler_106;
        }
        tmp_tuple_element_141 = mod_consts[153];
        tmp_args_value_71 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_71, 0, tmp_tuple_element_141);
        CHECK_OBJECT(tmp_class_creation_36__bases);
        tmp_tuple_element_141 = tmp_class_creation_36__bases;
        PyTuple_SET_ITEM0(tmp_args_value_71, 1, tmp_tuple_element_141);
        CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
        tmp_kwargs_value_71 = tmp_class_creation_36__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 347;
        tmp_assign_source_291 = CALL_FUNCTION(tmp_called_value_71, tmp_args_value_71, tmp_kwargs_value_71);
        Py_DECREF(tmp_called_value_71);
        Py_DECREF(tmp_args_value_71);
        if (tmp_assign_source_291 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 347;

            goto try_except_handler_106;
        }
        assert(tmp_class_creation_36__prepared == NULL);
        tmp_class_creation_36__prepared = tmp_assign_source_291;
    }
    {
        bool tmp_condition_result_215;
        PyObject *tmp_operand_value_36;
        PyObject *tmp_expression_value_189;
        CHECK_OBJECT(tmp_class_creation_36__prepared);
        tmp_expression_value_189 = tmp_class_creation_36__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_189, mod_consts[46]);
        tmp_operand_value_36 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_36);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 347;

            goto try_except_handler_106;
        }
        tmp_condition_result_215 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_215 != false) {
            goto branch_yes_143;
        } else {
            goto branch_no_143;
        }
    }
    branch_yes_143:;
    {
        PyObject *tmp_raise_type_36;
        PyObject *tmp_raise_value_36;
        PyObject *tmp_left_value_36;
        PyObject *tmp_right_value_36;
        PyObject *tmp_tuple_element_142;
        PyObject *tmp_getattr_target_36;
        PyObject *tmp_getattr_attr_36;
        PyObject *tmp_getattr_default_36;
        tmp_raise_type_36 = PyExc_TypeError;
        tmp_left_value_36 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_36__metaclass);
        tmp_getattr_target_36 = tmp_class_creation_36__metaclass;
        tmp_getattr_attr_36 = mod_consts[48];
        tmp_getattr_default_36 = mod_consts[49];
        tmp_tuple_element_142 = BUILTIN_GETATTR(tmp_getattr_target_36, tmp_getattr_attr_36, tmp_getattr_default_36);
        if (tmp_tuple_element_142 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 347;

            goto try_except_handler_106;
        }
        tmp_right_value_36 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_190;
            PyObject *tmp_type_arg_72;
            PyTuple_SET_ITEM(tmp_right_value_36, 0, tmp_tuple_element_142);
            CHECK_OBJECT(tmp_class_creation_36__prepared);
            tmp_type_arg_72 = tmp_class_creation_36__prepared;
            tmp_expression_value_190 = BUILTIN_TYPE1(tmp_type_arg_72);
            assert(!(tmp_expression_value_190 == NULL));
            tmp_tuple_element_142 = LOOKUP_ATTRIBUTE(tmp_expression_value_190, mod_consts[48]);
            Py_DECREF(tmp_expression_value_190);
            if (tmp_tuple_element_142 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 347;

                goto tuple_build_exception_40;
            }
            PyTuple_SET_ITEM(tmp_right_value_36, 1, tmp_tuple_element_142);
        }
        goto tuple_build_noexception_40;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_40:;
        Py_DECREF(tmp_right_value_36);
        goto try_except_handler_106;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_40:;
        tmp_raise_value_36 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_36, tmp_right_value_36);
        Py_DECREF(tmp_right_value_36);
        if (tmp_raise_value_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 347;

            goto try_except_handler_106;
        }
        exception_type = tmp_raise_type_36;
        Py_INCREF(tmp_raise_type_36);
        exception_value = tmp_raise_value_36;
        exception_lineno = 347;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_106;
    }
    branch_no_143:;
    goto branch_end_142;
    branch_no_142:;
    {
        PyObject *tmp_assign_source_292;
        tmp_assign_source_292 = PyDict_New();
        assert(tmp_class_creation_36__prepared == NULL);
        tmp_class_creation_36__prepared = tmp_assign_source_292;
    }
    branch_end_142:;
    {
        PyObject *tmp_assign_source_293;
        {
            PyObject *tmp_set_locals_36;
            CHECK_OBJECT(tmp_class_creation_36__prepared);
            tmp_set_locals_36 = tmp_class_creation_36__prepared;
            locals_botocore$exceptions$$$class__36_ChecksumError_347 = tmp_set_locals_36;
            Py_INCREF(tmp_set_locals_36);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__36_ChecksumError_347, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 347;

            goto try_except_handler_108;
        }
        tmp_dictset_value = mod_consts[154];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__36_ChecksumError_347, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 347;

            goto try_except_handler_108;
        }
        tmp_dictset_value = mod_consts[153];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__36_ChecksumError_347, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 347;

            goto try_except_handler_108;
        }
        if (isFrameUnusable(cache_frame_86bd8a784d25ff9b97e0a5eef286a755_36)) {
            Py_XDECREF(cache_frame_86bd8a784d25ff9b97e0a5eef286a755_36);

#if _DEBUG_REFCOUNTS
            if (cache_frame_86bd8a784d25ff9b97e0a5eef286a755_36 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_86bd8a784d25ff9b97e0a5eef286a755_36 = MAKE_FUNCTION_FRAME(codeobj_86bd8a784d25ff9b97e0a5eef286a755, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_86bd8a784d25ff9b97e0a5eef286a755_36->m_type_description == NULL);
        frame_86bd8a784d25ff9b97e0a5eef286a755_36 = cache_frame_86bd8a784d25ff9b97e0a5eef286a755_36;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_86bd8a784d25ff9b97e0a5eef286a755_36);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_86bd8a784d25ff9b97e0a5eef286a755_36) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[155];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__36_ChecksumError_347, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 351;
            type_description_2 = "o";
            goto frame_exception_exit_36;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_86bd8a784d25ff9b97e0a5eef286a755_36);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_35;

        frame_exception_exit_36:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_86bd8a784d25ff9b97e0a5eef286a755_36);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_86bd8a784d25ff9b97e0a5eef286a755_36, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_86bd8a784d25ff9b97e0a5eef286a755_36->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_86bd8a784d25ff9b97e0a5eef286a755_36, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_86bd8a784d25ff9b97e0a5eef286a755_36,
            type_description_2,
            outline_35_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_86bd8a784d25ff9b97e0a5eef286a755_36 == cache_frame_86bd8a784d25ff9b97e0a5eef286a755_36) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_86bd8a784d25ff9b97e0a5eef286a755_36);
            cache_frame_86bd8a784d25ff9b97e0a5eef286a755_36 = NULL;
        }

        assertFrameObject(frame_86bd8a784d25ff9b97e0a5eef286a755_36);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_35;

        frame_no_exception_35:;
        goto skip_nested_handling_35;
        nested_frame_exit_35:;

        goto try_except_handler_108;
        skip_nested_handling_35:;
        {
            nuitka_bool tmp_condition_result_216;
            PyObject *tmp_cmp_expr_left_36;
            PyObject *tmp_cmp_expr_right_36;
            CHECK_OBJECT(tmp_class_creation_36__bases);
            tmp_cmp_expr_left_36 = tmp_class_creation_36__bases;
            CHECK_OBJECT(tmp_class_creation_36__bases_orig);
            tmp_cmp_expr_right_36 = tmp_class_creation_36__bases_orig;
            tmp_condition_result_216 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_36, tmp_cmp_expr_right_36);
            if (tmp_condition_result_216 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 347;

                goto try_except_handler_108;
            }
            if (tmp_condition_result_216 == NUITKA_BOOL_TRUE) {
                goto branch_yes_144;
            } else {
                goto branch_no_144;
            }
            assert(tmp_condition_result_216 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_144:;
        CHECK_OBJECT(tmp_class_creation_36__bases_orig);
        tmp_dictset_value = tmp_class_creation_36__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__36_ChecksumError_347, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 347;

            goto try_except_handler_108;
        }
        branch_no_144:;
        {
            PyObject *tmp_assign_source_294;
            PyObject *tmp_called_value_72;
            PyObject *tmp_args_value_72;
            PyObject *tmp_tuple_element_143;
            PyObject *tmp_kwargs_value_72;
            CHECK_OBJECT(tmp_class_creation_36__metaclass);
            tmp_called_value_72 = tmp_class_creation_36__metaclass;
            tmp_tuple_element_143 = mod_consts[153];
            tmp_args_value_72 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_72, 0, tmp_tuple_element_143);
            CHECK_OBJECT(tmp_class_creation_36__bases);
            tmp_tuple_element_143 = tmp_class_creation_36__bases;
            PyTuple_SET_ITEM0(tmp_args_value_72, 1, tmp_tuple_element_143);
            tmp_tuple_element_143 = locals_botocore$exceptions$$$class__36_ChecksumError_347;
            PyTuple_SET_ITEM0(tmp_args_value_72, 2, tmp_tuple_element_143);
            CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
            tmp_kwargs_value_72 = tmp_class_creation_36__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 347;
            tmp_assign_source_294 = CALL_FUNCTION(tmp_called_value_72, tmp_args_value_72, tmp_kwargs_value_72);
            Py_DECREF(tmp_args_value_72);
            if (tmp_assign_source_294 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 347;

                goto try_except_handler_108;
            }
            assert(outline_35_var___class__ == NULL);
            outline_35_var___class__ = tmp_assign_source_294;
        }
        CHECK_OBJECT(outline_35_var___class__);
        tmp_assign_source_293 = outline_35_var___class__;
        Py_INCREF(tmp_assign_source_293);
        goto try_return_handler_108;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_108:;
        Py_DECREF(locals_botocore$exceptions$$$class__36_ChecksumError_347);
        locals_botocore$exceptions$$$class__36_ChecksumError_347 = NULL;
        goto try_return_handler_107;
        // Exception handler code:
        try_except_handler_108:;
        exception_keeper_type_106 = exception_type;
        exception_keeper_value_106 = exception_value;
        exception_keeper_tb_106 = exception_tb;
        exception_keeper_lineno_106 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__36_ChecksumError_347);
        locals_botocore$exceptions$$$class__36_ChecksumError_347 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_106;
        exception_value = exception_keeper_value_106;
        exception_tb = exception_keeper_tb_106;
        exception_lineno = exception_keeper_lineno_106;

        goto try_except_handler_107;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_107:;
        CHECK_OBJECT(outline_35_var___class__);
        Py_DECREF(outline_35_var___class__);
        outline_35_var___class__ = NULL;
        goto outline_result_36;
        // Exception handler code:
        try_except_handler_107:;
        exception_keeper_type_107 = exception_type;
        exception_keeper_value_107 = exception_value;
        exception_keeper_tb_107 = exception_tb;
        exception_keeper_lineno_107 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_107;
        exception_value = exception_keeper_value_107;
        exception_tb = exception_keeper_tb_107;
        exception_lineno = exception_keeper_lineno_107;

        goto outline_exception_36;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_36:;
        exception_lineno = 347;
        goto try_except_handler_106;
        outline_result_36:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[153], tmp_assign_source_293);
    }
    goto try_end_36;
    // Exception handler code:
    try_except_handler_106:;
    exception_keeper_type_108 = exception_type;
    exception_keeper_value_108 = exception_value;
    exception_keeper_tb_108 = exception_tb;
    exception_keeper_lineno_108 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_36__bases_orig);
    tmp_class_creation_36__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_36__bases);
    tmp_class_creation_36__bases = NULL;
    Py_XDECREF(tmp_class_creation_36__class_decl_dict);
    tmp_class_creation_36__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_36__metaclass);
    tmp_class_creation_36__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_36__prepared);
    tmp_class_creation_36__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_108;
    exception_value = exception_keeper_value_108;
    exception_tb = exception_keeper_tb_108;
    exception_lineno = exception_keeper_lineno_108;

    goto frame_exception_exit_1;
    // End of try:
    try_end_36:;
    CHECK_OBJECT(tmp_class_creation_36__bases_orig);
    Py_DECREF(tmp_class_creation_36__bases_orig);
    tmp_class_creation_36__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_36__bases);
    Py_DECREF(tmp_class_creation_36__bases);
    tmp_class_creation_36__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
    Py_DECREF(tmp_class_creation_36__class_decl_dict);
    tmp_class_creation_36__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_36__metaclass);
    Py_DECREF(tmp_class_creation_36__metaclass);
    tmp_class_creation_36__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_36__prepared);
    Py_DECREF(tmp_class_creation_36__prepared);
    tmp_class_creation_36__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_295;
        PyObject *tmp_tuple_element_144;
        tmp_tuple_element_144 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_144 == NULL)) {
            tmp_tuple_element_144 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_144 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_109;
        }
        tmp_assign_source_295 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_295, 0, tmp_tuple_element_144);
        assert(tmp_class_creation_37__bases_orig == NULL);
        tmp_class_creation_37__bases_orig = tmp_assign_source_295;
    }
    {
        PyObject *tmp_assign_source_296;
        PyObject *tmp_dircall_arg1_37;
        CHECK_OBJECT(tmp_class_creation_37__bases_orig);
        tmp_dircall_arg1_37 = tmp_class_creation_37__bases_orig;
        Py_INCREF(tmp_dircall_arg1_37);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_37};
            tmp_assign_source_296 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_296 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_109;
        }
        assert(tmp_class_creation_37__bases == NULL);
        tmp_class_creation_37__bases = tmp_assign_source_296;
    }
    {
        PyObject *tmp_assign_source_297;
        tmp_assign_source_297 = PyDict_New();
        assert(tmp_class_creation_37__class_decl_dict == NULL);
        tmp_class_creation_37__class_decl_dict = tmp_assign_source_297;
    }
    {
        PyObject *tmp_assign_source_298;
        PyObject *tmp_metaclass_value_37;
        bool tmp_condition_result_217;
        PyObject *tmp_key_value_109;
        PyObject *tmp_dict_arg_value_109;
        PyObject *tmp_dict_arg_value_110;
        PyObject *tmp_key_value_110;
        nuitka_bool tmp_condition_result_218;
        int tmp_truth_name_37;
        PyObject *tmp_type_arg_73;
        PyObject *tmp_expression_value_191;
        PyObject *tmp_subscript_value_37;
        PyObject *tmp_bases_value_37;
        tmp_key_value_109 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
        tmp_dict_arg_value_109 = tmp_class_creation_37__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_109, tmp_key_value_109);
        assert(!(tmp_res == -1));
        tmp_condition_result_217 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_217 != false) {
            goto condexpr_true_73;
        } else {
            goto condexpr_false_73;
        }
        condexpr_true_73:;
        CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
        tmp_dict_arg_value_110 = tmp_class_creation_37__class_decl_dict;
        tmp_key_value_110 = mod_consts[43];
        tmp_metaclass_value_37 = DICT_GET_ITEM0(tmp_dict_arg_value_110, tmp_key_value_110);
        if (tmp_metaclass_value_37 == NULL) {
            tmp_metaclass_value_37 = Py_None;
        }
        assert(!(tmp_metaclass_value_37 == NULL));
        Py_INCREF(tmp_metaclass_value_37);
        goto condexpr_end_73;
        condexpr_false_73:;
        CHECK_OBJECT(tmp_class_creation_37__bases);
        tmp_truth_name_37 = CHECK_IF_TRUE(tmp_class_creation_37__bases);
        if (tmp_truth_name_37 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_109;
        }
        tmp_condition_result_218 = tmp_truth_name_37 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_218 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_74;
        } else {
            goto condexpr_false_74;
        }
        condexpr_true_74:;
        CHECK_OBJECT(tmp_class_creation_37__bases);
        tmp_expression_value_191 = tmp_class_creation_37__bases;
        tmp_subscript_value_37 = mod_consts[36];
        tmp_type_arg_73 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_191, tmp_subscript_value_37, 0);
        if (tmp_type_arg_73 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_109;
        }
        tmp_metaclass_value_37 = BUILTIN_TYPE1(tmp_type_arg_73);
        Py_DECREF(tmp_type_arg_73);
        if (tmp_metaclass_value_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_109;
        }
        goto condexpr_end_74;
        condexpr_false_74:;
        tmp_metaclass_value_37 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_37);
        condexpr_end_74:;
        condexpr_end_73:;
        CHECK_OBJECT(tmp_class_creation_37__bases);
        tmp_bases_value_37 = tmp_class_creation_37__bases;
        tmp_assign_source_298 = SELECT_METACLASS(tmp_metaclass_value_37, tmp_bases_value_37);
        Py_DECREF(tmp_metaclass_value_37);
        if (tmp_assign_source_298 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_109;
        }
        assert(tmp_class_creation_37__metaclass == NULL);
        tmp_class_creation_37__metaclass = tmp_assign_source_298;
    }
    {
        bool tmp_condition_result_219;
        PyObject *tmp_key_value_111;
        PyObject *tmp_dict_arg_value_111;
        tmp_key_value_111 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
        tmp_dict_arg_value_111 = tmp_class_creation_37__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_111, tmp_key_value_111);
        assert(!(tmp_res == -1));
        tmp_condition_result_219 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_219 != false) {
            goto branch_yes_145;
        } else {
            goto branch_no_145;
        }
    }
    branch_yes_145:;
    CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_37__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 356;

        goto try_except_handler_109;
    }
    branch_no_145:;
    {
        nuitka_bool tmp_condition_result_220;
        PyObject *tmp_expression_value_192;
        CHECK_OBJECT(tmp_class_creation_37__metaclass);
        tmp_expression_value_192 = tmp_class_creation_37__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_192, mod_consts[44]);
        tmp_condition_result_220 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_220 == NUITKA_BOOL_TRUE) {
            goto branch_yes_146;
        } else {
            goto branch_no_146;
        }
    }
    branch_yes_146:;
    {
        PyObject *tmp_assign_source_299;
        PyObject *tmp_called_value_73;
        PyObject *tmp_expression_value_193;
        PyObject *tmp_args_value_73;
        PyObject *tmp_tuple_element_145;
        PyObject *tmp_kwargs_value_73;
        CHECK_OBJECT(tmp_class_creation_37__metaclass);
        tmp_expression_value_193 = tmp_class_creation_37__metaclass;
        tmp_called_value_73 = LOOKUP_ATTRIBUTE(tmp_expression_value_193, mod_consts[44]);
        if (tmp_called_value_73 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_109;
        }
        tmp_tuple_element_145 = mod_consts[156];
        tmp_args_value_73 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_73, 0, tmp_tuple_element_145);
        CHECK_OBJECT(tmp_class_creation_37__bases);
        tmp_tuple_element_145 = tmp_class_creation_37__bases;
        PyTuple_SET_ITEM0(tmp_args_value_73, 1, tmp_tuple_element_145);
        CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
        tmp_kwargs_value_73 = tmp_class_creation_37__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 356;
        tmp_assign_source_299 = CALL_FUNCTION(tmp_called_value_73, tmp_args_value_73, tmp_kwargs_value_73);
        Py_DECREF(tmp_called_value_73);
        Py_DECREF(tmp_args_value_73);
        if (tmp_assign_source_299 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_109;
        }
        assert(tmp_class_creation_37__prepared == NULL);
        tmp_class_creation_37__prepared = tmp_assign_source_299;
    }
    {
        bool tmp_condition_result_221;
        PyObject *tmp_operand_value_37;
        PyObject *tmp_expression_value_194;
        CHECK_OBJECT(tmp_class_creation_37__prepared);
        tmp_expression_value_194 = tmp_class_creation_37__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_194, mod_consts[46]);
        tmp_operand_value_37 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_37);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_109;
        }
        tmp_condition_result_221 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_221 != false) {
            goto branch_yes_147;
        } else {
            goto branch_no_147;
        }
    }
    branch_yes_147:;
    {
        PyObject *tmp_raise_type_37;
        PyObject *tmp_raise_value_37;
        PyObject *tmp_left_value_37;
        PyObject *tmp_right_value_37;
        PyObject *tmp_tuple_element_146;
        PyObject *tmp_getattr_target_37;
        PyObject *tmp_getattr_attr_37;
        PyObject *tmp_getattr_default_37;
        tmp_raise_type_37 = PyExc_TypeError;
        tmp_left_value_37 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_37__metaclass);
        tmp_getattr_target_37 = tmp_class_creation_37__metaclass;
        tmp_getattr_attr_37 = mod_consts[48];
        tmp_getattr_default_37 = mod_consts[49];
        tmp_tuple_element_146 = BUILTIN_GETATTR(tmp_getattr_target_37, tmp_getattr_attr_37, tmp_getattr_default_37);
        if (tmp_tuple_element_146 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_109;
        }
        tmp_right_value_37 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_195;
            PyObject *tmp_type_arg_74;
            PyTuple_SET_ITEM(tmp_right_value_37, 0, tmp_tuple_element_146);
            CHECK_OBJECT(tmp_class_creation_37__prepared);
            tmp_type_arg_74 = tmp_class_creation_37__prepared;
            tmp_expression_value_195 = BUILTIN_TYPE1(tmp_type_arg_74);
            assert(!(tmp_expression_value_195 == NULL));
            tmp_tuple_element_146 = LOOKUP_ATTRIBUTE(tmp_expression_value_195, mod_consts[48]);
            Py_DECREF(tmp_expression_value_195);
            if (tmp_tuple_element_146 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 356;

                goto tuple_build_exception_41;
            }
            PyTuple_SET_ITEM(tmp_right_value_37, 1, tmp_tuple_element_146);
        }
        goto tuple_build_noexception_41;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_41:;
        Py_DECREF(tmp_right_value_37);
        goto try_except_handler_109;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_41:;
        tmp_raise_value_37 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_37, tmp_right_value_37);
        Py_DECREF(tmp_right_value_37);
        if (tmp_raise_value_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_109;
        }
        exception_type = tmp_raise_type_37;
        Py_INCREF(tmp_raise_type_37);
        exception_value = tmp_raise_value_37;
        exception_lineno = 356;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_109;
    }
    branch_no_147:;
    goto branch_end_146;
    branch_no_146:;
    {
        PyObject *tmp_assign_source_300;
        tmp_assign_source_300 = PyDict_New();
        assert(tmp_class_creation_37__prepared == NULL);
        tmp_class_creation_37__prepared = tmp_assign_source_300;
    }
    branch_end_146:;
    {
        PyObject *tmp_assign_source_301;
        {
            PyObject *tmp_set_locals_37;
            CHECK_OBJECT(tmp_class_creation_37__prepared);
            tmp_set_locals_37 = tmp_class_creation_37__prepared;
            locals_botocore$exceptions$$$class__37_UnseekableStreamError_356 = tmp_set_locals_37;
            Py_INCREF(tmp_set_locals_37);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__37_UnseekableStreamError_356, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_111;
        }
        tmp_dictset_value = mod_consts[157];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__37_UnseekableStreamError_356, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_111;
        }
        tmp_dictset_value = mod_consts[156];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__37_UnseekableStreamError_356, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_111;
        }
        if (isFrameUnusable(cache_frame_ff7f1c57167b122361e2ae00ec68ed30_37)) {
            Py_XDECREF(cache_frame_ff7f1c57167b122361e2ae00ec68ed30_37);

#if _DEBUG_REFCOUNTS
            if (cache_frame_ff7f1c57167b122361e2ae00ec68ed30_37 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_ff7f1c57167b122361e2ae00ec68ed30_37 = MAKE_FUNCTION_FRAME(codeobj_ff7f1c57167b122361e2ae00ec68ed30, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_ff7f1c57167b122361e2ae00ec68ed30_37->m_type_description == NULL);
        frame_ff7f1c57167b122361e2ae00ec68ed30_37 = cache_frame_ff7f1c57167b122361e2ae00ec68ed30_37;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_ff7f1c57167b122361e2ae00ec68ed30_37);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_ff7f1c57167b122361e2ae00ec68ed30_37) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[158];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__37_UnseekableStreamError_356, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 360;
            type_description_2 = "o";
            goto frame_exception_exit_37;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_ff7f1c57167b122361e2ae00ec68ed30_37);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_36;

        frame_exception_exit_37:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_ff7f1c57167b122361e2ae00ec68ed30_37);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_ff7f1c57167b122361e2ae00ec68ed30_37, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_ff7f1c57167b122361e2ae00ec68ed30_37->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_ff7f1c57167b122361e2ae00ec68ed30_37, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_ff7f1c57167b122361e2ae00ec68ed30_37,
            type_description_2,
            outline_36_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_ff7f1c57167b122361e2ae00ec68ed30_37 == cache_frame_ff7f1c57167b122361e2ae00ec68ed30_37) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_ff7f1c57167b122361e2ae00ec68ed30_37);
            cache_frame_ff7f1c57167b122361e2ae00ec68ed30_37 = NULL;
        }

        assertFrameObject(frame_ff7f1c57167b122361e2ae00ec68ed30_37);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_36;

        frame_no_exception_36:;
        goto skip_nested_handling_36;
        nested_frame_exit_36:;

        goto try_except_handler_111;
        skip_nested_handling_36:;
        {
            nuitka_bool tmp_condition_result_222;
            PyObject *tmp_cmp_expr_left_37;
            PyObject *tmp_cmp_expr_right_37;
            CHECK_OBJECT(tmp_class_creation_37__bases);
            tmp_cmp_expr_left_37 = tmp_class_creation_37__bases;
            CHECK_OBJECT(tmp_class_creation_37__bases_orig);
            tmp_cmp_expr_right_37 = tmp_class_creation_37__bases_orig;
            tmp_condition_result_222 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_37, tmp_cmp_expr_right_37);
            if (tmp_condition_result_222 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 356;

                goto try_except_handler_111;
            }
            if (tmp_condition_result_222 == NUITKA_BOOL_TRUE) {
                goto branch_yes_148;
            } else {
                goto branch_no_148;
            }
            assert(tmp_condition_result_222 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_148:;
        CHECK_OBJECT(tmp_class_creation_37__bases_orig);
        tmp_dictset_value = tmp_class_creation_37__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__37_UnseekableStreamError_356, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_111;
        }
        branch_no_148:;
        {
            PyObject *tmp_assign_source_302;
            PyObject *tmp_called_value_74;
            PyObject *tmp_args_value_74;
            PyObject *tmp_tuple_element_147;
            PyObject *tmp_kwargs_value_74;
            CHECK_OBJECT(tmp_class_creation_37__metaclass);
            tmp_called_value_74 = tmp_class_creation_37__metaclass;
            tmp_tuple_element_147 = mod_consts[156];
            tmp_args_value_74 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_74, 0, tmp_tuple_element_147);
            CHECK_OBJECT(tmp_class_creation_37__bases);
            tmp_tuple_element_147 = tmp_class_creation_37__bases;
            PyTuple_SET_ITEM0(tmp_args_value_74, 1, tmp_tuple_element_147);
            tmp_tuple_element_147 = locals_botocore$exceptions$$$class__37_UnseekableStreamError_356;
            PyTuple_SET_ITEM0(tmp_args_value_74, 2, tmp_tuple_element_147);
            CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
            tmp_kwargs_value_74 = tmp_class_creation_37__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 356;
            tmp_assign_source_302 = CALL_FUNCTION(tmp_called_value_74, tmp_args_value_74, tmp_kwargs_value_74);
            Py_DECREF(tmp_args_value_74);
            if (tmp_assign_source_302 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 356;

                goto try_except_handler_111;
            }
            assert(outline_36_var___class__ == NULL);
            outline_36_var___class__ = tmp_assign_source_302;
        }
        CHECK_OBJECT(outline_36_var___class__);
        tmp_assign_source_301 = outline_36_var___class__;
        Py_INCREF(tmp_assign_source_301);
        goto try_return_handler_111;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_111:;
        Py_DECREF(locals_botocore$exceptions$$$class__37_UnseekableStreamError_356);
        locals_botocore$exceptions$$$class__37_UnseekableStreamError_356 = NULL;
        goto try_return_handler_110;
        // Exception handler code:
        try_except_handler_111:;
        exception_keeper_type_109 = exception_type;
        exception_keeper_value_109 = exception_value;
        exception_keeper_tb_109 = exception_tb;
        exception_keeper_lineno_109 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__37_UnseekableStreamError_356);
        locals_botocore$exceptions$$$class__37_UnseekableStreamError_356 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_109;
        exception_value = exception_keeper_value_109;
        exception_tb = exception_keeper_tb_109;
        exception_lineno = exception_keeper_lineno_109;

        goto try_except_handler_110;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_110:;
        CHECK_OBJECT(outline_36_var___class__);
        Py_DECREF(outline_36_var___class__);
        outline_36_var___class__ = NULL;
        goto outline_result_37;
        // Exception handler code:
        try_except_handler_110:;
        exception_keeper_type_110 = exception_type;
        exception_keeper_value_110 = exception_value;
        exception_keeper_tb_110 = exception_tb;
        exception_keeper_lineno_110 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_110;
        exception_value = exception_keeper_value_110;
        exception_tb = exception_keeper_tb_110;
        exception_lineno = exception_keeper_lineno_110;

        goto outline_exception_37;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_37:;
        exception_lineno = 356;
        goto try_except_handler_109;
        outline_result_37:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[156], tmp_assign_source_301);
    }
    goto try_end_37;
    // Exception handler code:
    try_except_handler_109:;
    exception_keeper_type_111 = exception_type;
    exception_keeper_value_111 = exception_value;
    exception_keeper_tb_111 = exception_tb;
    exception_keeper_lineno_111 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_37__bases_orig);
    tmp_class_creation_37__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_37__bases);
    tmp_class_creation_37__bases = NULL;
    Py_XDECREF(tmp_class_creation_37__class_decl_dict);
    tmp_class_creation_37__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_37__metaclass);
    tmp_class_creation_37__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_37__prepared);
    tmp_class_creation_37__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_111;
    exception_value = exception_keeper_value_111;
    exception_tb = exception_keeper_tb_111;
    exception_lineno = exception_keeper_lineno_111;

    goto frame_exception_exit_1;
    // End of try:
    try_end_37:;
    CHECK_OBJECT(tmp_class_creation_37__bases_orig);
    Py_DECREF(tmp_class_creation_37__bases_orig);
    tmp_class_creation_37__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_37__bases);
    Py_DECREF(tmp_class_creation_37__bases);
    tmp_class_creation_37__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
    Py_DECREF(tmp_class_creation_37__class_decl_dict);
    tmp_class_creation_37__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_37__metaclass);
    Py_DECREF(tmp_class_creation_37__metaclass);
    tmp_class_creation_37__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_37__prepared);
    Py_DECREF(tmp_class_creation_37__prepared);
    tmp_class_creation_37__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_303;
        PyObject *tmp_tuple_element_148;
        tmp_tuple_element_148 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_148 == NULL)) {
            tmp_tuple_element_148 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_148 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_112;
        }
        tmp_assign_source_303 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_303, 0, tmp_tuple_element_148);
        assert(tmp_class_creation_38__bases_orig == NULL);
        tmp_class_creation_38__bases_orig = tmp_assign_source_303;
    }
    {
        PyObject *tmp_assign_source_304;
        PyObject *tmp_dircall_arg1_38;
        CHECK_OBJECT(tmp_class_creation_38__bases_orig);
        tmp_dircall_arg1_38 = tmp_class_creation_38__bases_orig;
        Py_INCREF(tmp_dircall_arg1_38);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_38};
            tmp_assign_source_304 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_304 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_112;
        }
        assert(tmp_class_creation_38__bases == NULL);
        tmp_class_creation_38__bases = tmp_assign_source_304;
    }
    {
        PyObject *tmp_assign_source_305;
        tmp_assign_source_305 = PyDict_New();
        assert(tmp_class_creation_38__class_decl_dict == NULL);
        tmp_class_creation_38__class_decl_dict = tmp_assign_source_305;
    }
    {
        PyObject *tmp_assign_source_306;
        PyObject *tmp_metaclass_value_38;
        bool tmp_condition_result_223;
        PyObject *tmp_key_value_112;
        PyObject *tmp_dict_arg_value_112;
        PyObject *tmp_dict_arg_value_113;
        PyObject *tmp_key_value_113;
        nuitka_bool tmp_condition_result_224;
        int tmp_truth_name_38;
        PyObject *tmp_type_arg_75;
        PyObject *tmp_expression_value_196;
        PyObject *tmp_subscript_value_38;
        PyObject *tmp_bases_value_38;
        tmp_key_value_112 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
        tmp_dict_arg_value_112 = tmp_class_creation_38__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_112, tmp_key_value_112);
        assert(!(tmp_res == -1));
        tmp_condition_result_223 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_223 != false) {
            goto condexpr_true_75;
        } else {
            goto condexpr_false_75;
        }
        condexpr_true_75:;
        CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
        tmp_dict_arg_value_113 = tmp_class_creation_38__class_decl_dict;
        tmp_key_value_113 = mod_consts[43];
        tmp_metaclass_value_38 = DICT_GET_ITEM0(tmp_dict_arg_value_113, tmp_key_value_113);
        if (tmp_metaclass_value_38 == NULL) {
            tmp_metaclass_value_38 = Py_None;
        }
        assert(!(tmp_metaclass_value_38 == NULL));
        Py_INCREF(tmp_metaclass_value_38);
        goto condexpr_end_75;
        condexpr_false_75:;
        CHECK_OBJECT(tmp_class_creation_38__bases);
        tmp_truth_name_38 = CHECK_IF_TRUE(tmp_class_creation_38__bases);
        if (tmp_truth_name_38 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_112;
        }
        tmp_condition_result_224 = tmp_truth_name_38 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_224 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_76;
        } else {
            goto condexpr_false_76;
        }
        condexpr_true_76:;
        CHECK_OBJECT(tmp_class_creation_38__bases);
        tmp_expression_value_196 = tmp_class_creation_38__bases;
        tmp_subscript_value_38 = mod_consts[36];
        tmp_type_arg_75 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_196, tmp_subscript_value_38, 0);
        if (tmp_type_arg_75 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_112;
        }
        tmp_metaclass_value_38 = BUILTIN_TYPE1(tmp_type_arg_75);
        Py_DECREF(tmp_type_arg_75);
        if (tmp_metaclass_value_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_112;
        }
        goto condexpr_end_76;
        condexpr_false_76:;
        tmp_metaclass_value_38 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_38);
        condexpr_end_76:;
        condexpr_end_75:;
        CHECK_OBJECT(tmp_class_creation_38__bases);
        tmp_bases_value_38 = tmp_class_creation_38__bases;
        tmp_assign_source_306 = SELECT_METACLASS(tmp_metaclass_value_38, tmp_bases_value_38);
        Py_DECREF(tmp_metaclass_value_38);
        if (tmp_assign_source_306 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_112;
        }
        assert(tmp_class_creation_38__metaclass == NULL);
        tmp_class_creation_38__metaclass = tmp_assign_source_306;
    }
    {
        bool tmp_condition_result_225;
        PyObject *tmp_key_value_114;
        PyObject *tmp_dict_arg_value_114;
        tmp_key_value_114 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
        tmp_dict_arg_value_114 = tmp_class_creation_38__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_114, tmp_key_value_114);
        assert(!(tmp_res == -1));
        tmp_condition_result_225 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_225 != false) {
            goto branch_yes_149;
        } else {
            goto branch_no_149;
        }
    }
    branch_yes_149:;
    CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_38__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 364;

        goto try_except_handler_112;
    }
    branch_no_149:;
    {
        nuitka_bool tmp_condition_result_226;
        PyObject *tmp_expression_value_197;
        CHECK_OBJECT(tmp_class_creation_38__metaclass);
        tmp_expression_value_197 = tmp_class_creation_38__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_197, mod_consts[44]);
        tmp_condition_result_226 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_226 == NUITKA_BOOL_TRUE) {
            goto branch_yes_150;
        } else {
            goto branch_no_150;
        }
    }
    branch_yes_150:;
    {
        PyObject *tmp_assign_source_307;
        PyObject *tmp_called_value_75;
        PyObject *tmp_expression_value_198;
        PyObject *tmp_args_value_75;
        PyObject *tmp_tuple_element_149;
        PyObject *tmp_kwargs_value_75;
        CHECK_OBJECT(tmp_class_creation_38__metaclass);
        tmp_expression_value_198 = tmp_class_creation_38__metaclass;
        tmp_called_value_75 = LOOKUP_ATTRIBUTE(tmp_expression_value_198, mod_consts[44]);
        if (tmp_called_value_75 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_112;
        }
        tmp_tuple_element_149 = mod_consts[9];
        tmp_args_value_75 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_75, 0, tmp_tuple_element_149);
        CHECK_OBJECT(tmp_class_creation_38__bases);
        tmp_tuple_element_149 = tmp_class_creation_38__bases;
        PyTuple_SET_ITEM0(tmp_args_value_75, 1, tmp_tuple_element_149);
        CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
        tmp_kwargs_value_75 = tmp_class_creation_38__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 364;
        tmp_assign_source_307 = CALL_FUNCTION(tmp_called_value_75, tmp_args_value_75, tmp_kwargs_value_75);
        Py_DECREF(tmp_called_value_75);
        Py_DECREF(tmp_args_value_75);
        if (tmp_assign_source_307 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_112;
        }
        assert(tmp_class_creation_38__prepared == NULL);
        tmp_class_creation_38__prepared = tmp_assign_source_307;
    }
    {
        bool tmp_condition_result_227;
        PyObject *tmp_operand_value_38;
        PyObject *tmp_expression_value_199;
        CHECK_OBJECT(tmp_class_creation_38__prepared);
        tmp_expression_value_199 = tmp_class_creation_38__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_199, mod_consts[46]);
        tmp_operand_value_38 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_38);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_112;
        }
        tmp_condition_result_227 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_227 != false) {
            goto branch_yes_151;
        } else {
            goto branch_no_151;
        }
    }
    branch_yes_151:;
    {
        PyObject *tmp_raise_type_38;
        PyObject *tmp_raise_value_38;
        PyObject *tmp_left_value_38;
        PyObject *tmp_right_value_38;
        PyObject *tmp_tuple_element_150;
        PyObject *tmp_getattr_target_38;
        PyObject *tmp_getattr_attr_38;
        PyObject *tmp_getattr_default_38;
        tmp_raise_type_38 = PyExc_TypeError;
        tmp_left_value_38 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_38__metaclass);
        tmp_getattr_target_38 = tmp_class_creation_38__metaclass;
        tmp_getattr_attr_38 = mod_consts[48];
        tmp_getattr_default_38 = mod_consts[49];
        tmp_tuple_element_150 = BUILTIN_GETATTR(tmp_getattr_target_38, tmp_getattr_attr_38, tmp_getattr_default_38);
        if (tmp_tuple_element_150 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_112;
        }
        tmp_right_value_38 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_200;
            PyObject *tmp_type_arg_76;
            PyTuple_SET_ITEM(tmp_right_value_38, 0, tmp_tuple_element_150);
            CHECK_OBJECT(tmp_class_creation_38__prepared);
            tmp_type_arg_76 = tmp_class_creation_38__prepared;
            tmp_expression_value_200 = BUILTIN_TYPE1(tmp_type_arg_76);
            assert(!(tmp_expression_value_200 == NULL));
            tmp_tuple_element_150 = LOOKUP_ATTRIBUTE(tmp_expression_value_200, mod_consts[48]);
            Py_DECREF(tmp_expression_value_200);
            if (tmp_tuple_element_150 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 364;

                goto tuple_build_exception_42;
            }
            PyTuple_SET_ITEM(tmp_right_value_38, 1, tmp_tuple_element_150);
        }
        goto tuple_build_noexception_42;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_42:;
        Py_DECREF(tmp_right_value_38);
        goto try_except_handler_112;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_42:;
        tmp_raise_value_38 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_38, tmp_right_value_38);
        Py_DECREF(tmp_right_value_38);
        if (tmp_raise_value_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_112;
        }
        exception_type = tmp_raise_type_38;
        Py_INCREF(tmp_raise_type_38);
        exception_value = tmp_raise_value_38;
        exception_lineno = 364;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_112;
    }
    branch_no_151:;
    goto branch_end_150;
    branch_no_150:;
    {
        PyObject *tmp_assign_source_308;
        tmp_assign_source_308 = PyDict_New();
        assert(tmp_class_creation_38__prepared == NULL);
        tmp_class_creation_38__prepared = tmp_assign_source_308;
    }
    branch_end_150:;
    {
        PyObject *tmp_assign_source_309;
        {
            PyObject *tmp_set_locals_38;
            CHECK_OBJECT(tmp_class_creation_38__prepared);
            tmp_set_locals_38 = tmp_class_creation_38__prepared;
            locals_botocore$exceptions$$$class__38_WaiterError_364 = tmp_set_locals_38;
            Py_INCREF(tmp_set_locals_38);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__38_WaiterError_364, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_114;
        }
        tmp_dictset_value = mod_consts[159];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__38_WaiterError_364, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_114;
        }
        tmp_dictset_value = mod_consts[9];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__38_WaiterError_364, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_114;
        }
        if (isFrameUnusable(cache_frame_2317f3473d9f05a719acd520900b593e_38)) {
            Py_XDECREF(cache_frame_2317f3473d9f05a719acd520900b593e_38);

#if _DEBUG_REFCOUNTS
            if (cache_frame_2317f3473d9f05a719acd520900b593e_38 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_2317f3473d9f05a719acd520900b593e_38 = MAKE_FUNCTION_FRAME(codeobj_2317f3473d9f05a719acd520900b593e, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_2317f3473d9f05a719acd520900b593e_38->m_type_description == NULL);
        frame_2317f3473d9f05a719acd520900b593e_38 = cache_frame_2317f3473d9f05a719acd520900b593e_38;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_2317f3473d9f05a719acd520900b593e_38);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_2317f3473d9f05a719acd520900b593e_38) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[160];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__38_WaiterError_364, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 366;
            type_description_2 = "o";
            goto frame_exception_exit_38;
        }


        tmp_dictset_value = MAKE_FUNCTION_botocore$exceptions$$$function__6___init__();

        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__38_WaiterError_364, mod_consts[3], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 368;
            type_description_2 = "o";
            goto frame_exception_exit_38;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_2317f3473d9f05a719acd520900b593e_38);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_37;

        frame_exception_exit_38:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_2317f3473d9f05a719acd520900b593e_38);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_2317f3473d9f05a719acd520900b593e_38, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_2317f3473d9f05a719acd520900b593e_38->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_2317f3473d9f05a719acd520900b593e_38, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_2317f3473d9f05a719acd520900b593e_38,
            type_description_2,
            outline_37_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_2317f3473d9f05a719acd520900b593e_38 == cache_frame_2317f3473d9f05a719acd520900b593e_38) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_2317f3473d9f05a719acd520900b593e_38);
            cache_frame_2317f3473d9f05a719acd520900b593e_38 = NULL;
        }

        assertFrameObject(frame_2317f3473d9f05a719acd520900b593e_38);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_37;

        frame_no_exception_37:;
        goto skip_nested_handling_37;
        nested_frame_exit_37:;

        goto try_except_handler_114;
        skip_nested_handling_37:;
        {
            nuitka_bool tmp_condition_result_228;
            PyObject *tmp_cmp_expr_left_38;
            PyObject *tmp_cmp_expr_right_38;
            CHECK_OBJECT(tmp_class_creation_38__bases);
            tmp_cmp_expr_left_38 = tmp_class_creation_38__bases;
            CHECK_OBJECT(tmp_class_creation_38__bases_orig);
            tmp_cmp_expr_right_38 = tmp_class_creation_38__bases_orig;
            tmp_condition_result_228 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_38, tmp_cmp_expr_right_38);
            if (tmp_condition_result_228 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 364;

                goto try_except_handler_114;
            }
            if (tmp_condition_result_228 == NUITKA_BOOL_TRUE) {
                goto branch_yes_152;
            } else {
                goto branch_no_152;
            }
            assert(tmp_condition_result_228 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_152:;
        CHECK_OBJECT(tmp_class_creation_38__bases_orig);
        tmp_dictset_value = tmp_class_creation_38__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__38_WaiterError_364, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;

            goto try_except_handler_114;
        }
        branch_no_152:;
        {
            PyObject *tmp_assign_source_310;
            PyObject *tmp_called_value_76;
            PyObject *tmp_args_value_76;
            PyObject *tmp_tuple_element_151;
            PyObject *tmp_kwargs_value_76;
            CHECK_OBJECT(tmp_class_creation_38__metaclass);
            tmp_called_value_76 = tmp_class_creation_38__metaclass;
            tmp_tuple_element_151 = mod_consts[9];
            tmp_args_value_76 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_76, 0, tmp_tuple_element_151);
            CHECK_OBJECT(tmp_class_creation_38__bases);
            tmp_tuple_element_151 = tmp_class_creation_38__bases;
            PyTuple_SET_ITEM0(tmp_args_value_76, 1, tmp_tuple_element_151);
            tmp_tuple_element_151 = locals_botocore$exceptions$$$class__38_WaiterError_364;
            PyTuple_SET_ITEM0(tmp_args_value_76, 2, tmp_tuple_element_151);
            CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
            tmp_kwargs_value_76 = tmp_class_creation_38__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 364;
            tmp_assign_source_310 = CALL_FUNCTION(tmp_called_value_76, tmp_args_value_76, tmp_kwargs_value_76);
            Py_DECREF(tmp_args_value_76);
            if (tmp_assign_source_310 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 364;

                goto try_except_handler_114;
            }
            assert(outline_37_var___class__ == NULL);
            outline_37_var___class__ = tmp_assign_source_310;
        }
        CHECK_OBJECT(outline_37_var___class__);
        tmp_assign_source_309 = outline_37_var___class__;
        Py_INCREF(tmp_assign_source_309);
        goto try_return_handler_114;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_114:;
        Py_DECREF(locals_botocore$exceptions$$$class__38_WaiterError_364);
        locals_botocore$exceptions$$$class__38_WaiterError_364 = NULL;
        goto try_return_handler_113;
        // Exception handler code:
        try_except_handler_114:;
        exception_keeper_type_112 = exception_type;
        exception_keeper_value_112 = exception_value;
        exception_keeper_tb_112 = exception_tb;
        exception_keeper_lineno_112 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__38_WaiterError_364);
        locals_botocore$exceptions$$$class__38_WaiterError_364 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_112;
        exception_value = exception_keeper_value_112;
        exception_tb = exception_keeper_tb_112;
        exception_lineno = exception_keeper_lineno_112;

        goto try_except_handler_113;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_113:;
        CHECK_OBJECT(outline_37_var___class__);
        Py_DECREF(outline_37_var___class__);
        outline_37_var___class__ = NULL;
        goto outline_result_38;
        // Exception handler code:
        try_except_handler_113:;
        exception_keeper_type_113 = exception_type;
        exception_keeper_value_113 = exception_value;
        exception_keeper_tb_113 = exception_tb;
        exception_keeper_lineno_113 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_113;
        exception_value = exception_keeper_value_113;
        exception_tb = exception_keeper_tb_113;
        exception_lineno = exception_keeper_lineno_113;

        goto outline_exception_38;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_38:;
        exception_lineno = 364;
        goto try_except_handler_112;
        outline_result_38:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[9], tmp_assign_source_309);
    }
    goto try_end_38;
    // Exception handler code:
    try_except_handler_112:;
    exception_keeper_type_114 = exception_type;
    exception_keeper_value_114 = exception_value;
    exception_keeper_tb_114 = exception_tb;
    exception_keeper_lineno_114 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_38__bases_orig);
    tmp_class_creation_38__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_38__bases);
    tmp_class_creation_38__bases = NULL;
    Py_XDECREF(tmp_class_creation_38__class_decl_dict);
    tmp_class_creation_38__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_38__metaclass);
    tmp_class_creation_38__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_38__prepared);
    tmp_class_creation_38__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_114;
    exception_value = exception_keeper_value_114;
    exception_tb = exception_keeper_tb_114;
    exception_lineno = exception_keeper_lineno_114;

    goto frame_exception_exit_1;
    // End of try:
    try_end_38:;
    CHECK_OBJECT(tmp_class_creation_38__bases_orig);
    Py_DECREF(tmp_class_creation_38__bases_orig);
    tmp_class_creation_38__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_38__bases);
    Py_DECREF(tmp_class_creation_38__bases);
    tmp_class_creation_38__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
    Py_DECREF(tmp_class_creation_38__class_decl_dict);
    tmp_class_creation_38__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_38__metaclass);
    Py_DECREF(tmp_class_creation_38__metaclass);
    tmp_class_creation_38__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_38__prepared);
    Py_DECREF(tmp_class_creation_38__prepared);
    tmp_class_creation_38__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_311;
        PyObject *tmp_tuple_element_152;
        tmp_tuple_element_152 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_152 == NULL)) {
            tmp_tuple_element_152 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_152 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 373;

            goto try_except_handler_115;
        }
        tmp_assign_source_311 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_311, 0, tmp_tuple_element_152);
        assert(tmp_class_creation_39__bases_orig == NULL);
        tmp_class_creation_39__bases_orig = tmp_assign_source_311;
    }
    {
        PyObject *tmp_assign_source_312;
        PyObject *tmp_dircall_arg1_39;
        CHECK_OBJECT(tmp_class_creation_39__bases_orig);
        tmp_dircall_arg1_39 = tmp_class_creation_39__bases_orig;
        Py_INCREF(tmp_dircall_arg1_39);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_39};
            tmp_assign_source_312 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_312 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 373;

            goto try_except_handler_115;
        }
        assert(tmp_class_creation_39__bases == NULL);
        tmp_class_creation_39__bases = tmp_assign_source_312;
    }
    {
        PyObject *tmp_assign_source_313;
        tmp_assign_source_313 = PyDict_New();
        assert(tmp_class_creation_39__class_decl_dict == NULL);
        tmp_class_creation_39__class_decl_dict = tmp_assign_source_313;
    }
    {
        PyObject *tmp_assign_source_314;
        PyObject *tmp_metaclass_value_39;
        bool tmp_condition_result_229;
        PyObject *tmp_key_value_115;
        PyObject *tmp_dict_arg_value_115;
        PyObject *tmp_dict_arg_value_116;
        PyObject *tmp_key_value_116;
        nuitka_bool tmp_condition_result_230;
        int tmp_truth_name_39;
        PyObject *tmp_type_arg_77;
        PyObject *tmp_expression_value_201;
        PyObject *tmp_subscript_value_39;
        PyObject *tmp_bases_value_39;
        tmp_key_value_115 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
        tmp_dict_arg_value_115 = tmp_class_creation_39__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_115, tmp_key_value_115);
        assert(!(tmp_res == -1));
        tmp_condition_result_229 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_229 != false) {
            goto condexpr_true_77;
        } else {
            goto condexpr_false_77;
        }
        condexpr_true_77:;
        CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
        tmp_dict_arg_value_116 = tmp_class_creation_39__class_decl_dict;
        tmp_key_value_116 = mod_consts[43];
        tmp_metaclass_value_39 = DICT_GET_ITEM0(tmp_dict_arg_value_116, tmp_key_value_116);
        if (tmp_metaclass_value_39 == NULL) {
            tmp_metaclass_value_39 = Py_None;
        }
        assert(!(tmp_metaclass_value_39 == NULL));
        Py_INCREF(tmp_metaclass_value_39);
        goto condexpr_end_77;
        condexpr_false_77:;
        CHECK_OBJECT(tmp_class_creation_39__bases);
        tmp_truth_name_39 = CHECK_IF_TRUE(tmp_class_creation_39__bases);
        if (tmp_truth_name_39 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 373;

            goto try_except_handler_115;
        }
        tmp_condition_result_230 = tmp_truth_name_39 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_230 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_78;
        } else {
            goto condexpr_false_78;
        }
        condexpr_true_78:;
        CHECK_OBJECT(tmp_class_creation_39__bases);
        tmp_expression_value_201 = tmp_class_creation_39__bases;
        tmp_subscript_value_39 = mod_consts[36];
        tmp_type_arg_77 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_201, tmp_subscript_value_39, 0);
        if (tmp_type_arg_77 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 373;

            goto try_except_handler_115;
        }
        tmp_metaclass_value_39 = BUILTIN_TYPE1(tmp_type_arg_77);
        Py_DECREF(tmp_type_arg_77);
        if (tmp_metaclass_value_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 373;

            goto try_except_handler_115;
        }
        goto condexpr_end_78;
        condexpr_false_78:;
        tmp_metaclass_value_39 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_39);
        condexpr_end_78:;
        condexpr_end_77:;
        CHECK_OBJECT(tmp_class_creation_39__bases);
        tmp_bases_value_39 = tmp_class_creation_39__bases;
        tmp_assign_source_314 = SELECT_METACLASS(tmp_metaclass_value_39, tmp_bases_value_39);
        Py_DECREF(tmp_metaclass_value_39);
        if (tmp_assign_source_314 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 373;

            goto try_except_handler_115;
        }
        assert(tmp_class_creation_39__metaclass == NULL);
        tmp_class_creation_39__metaclass = tmp_assign_source_314;
    }
    {
        bool tmp_condition_result_231;
        PyObject *tmp_key_value_117;
        PyObject *tmp_dict_arg_value_117;
        tmp_key_value_117 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
        tmp_dict_arg_value_117 = tmp_class_creation_39__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_117, tmp_key_value_117);
        assert(!(tmp_res == -1));
        tmp_condition_result_231 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_231 != false) {
            goto branch_yes_153;
        } else {
            goto branch_no_153;
        }
    }
    branch_yes_153:;
    CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_39__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 373;

        goto try_except_handler_115;
    }
    branch_no_153:;
    {
        nuitka_bool tmp_condition_result_232;
        PyObject *tmp_expression_value_202;
        CHECK_OBJECT(tmp_class_creation_39__metaclass);
        tmp_expression_value_202 = tmp_class_creation_39__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_202, mod_consts[44]);
        tmp_condition_result_232 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_232 == NUITKA_BOOL_TRUE) {
            goto branch_yes_154;
        } else {
            goto branch_no_154;
        }
    }
    branch_yes_154:;
    {
        PyObject *tmp_assign_source_315;
        PyObject *tmp_called_value_77;
        PyObject *tmp_expression_value_203;
        PyObject *tmp_args_value_77;
        PyObject *tmp_tuple_element_153;
        PyObject *tmp_kwargs_value_77;
        CHECK_OBJECT(tmp_class_creation_39__metaclass);
        tmp_expression_value_203 = tmp_class_creation_39__metaclass;
        tmp_called_value_77 = LOOKUP_ATTRIBUTE(tmp_expression_value_203, mod_consts[44]);
        if (tmp_called_value_77 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 373;

            goto try_except_handler_115;
        }
        tmp_tuple_element_153 = mod_consts[162];
        tmp_args_value_77 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_77, 0, tmp_tuple_element_153);
        CHECK_OBJECT(tmp_class_creation_39__bases);
        tmp_tuple_element_153 = tmp_class_creation_39__bases;
        PyTuple_SET_ITEM0(tmp_args_value_77, 1, tmp_tuple_element_153);
        CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
        tmp_kwargs_value_77 = tmp_class_creation_39__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 373;
        tmp_assign_source_315 = CALL_FUNCTION(tmp_called_value_77, tmp_args_value_77, tmp_kwargs_value_77);
        Py_DECREF(tmp_called_value_77);
        Py_DECREF(tmp_args_value_77);
        if (tmp_assign_source_315 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 373;

            goto try_except_handler_115;
        }
        assert(tmp_class_creation_39__prepared == NULL);
        tmp_class_creation_39__prepared = tmp_assign_source_315;
    }
    {
        bool tmp_condition_result_233;
        PyObject *tmp_operand_value_39;
        PyObject *tmp_expression_value_204;
        CHECK_OBJECT(tmp_class_creation_39__prepared);
        tmp_expression_value_204 = tmp_class_creation_39__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_204, mod_consts[46]);
        tmp_operand_value_39 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_39);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 373;

            goto try_except_handler_115;
        }
        tmp_condition_result_233 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_233 != false) {
            goto branch_yes_155;
        } else {
            goto branch_no_155;
        }
    }
    branch_yes_155:;
    {
        PyObject *tmp_raise_type_39;
        PyObject *tmp_raise_value_39;
        PyObject *tmp_left_value_39;
        PyObject *tmp_right_value_39;
        PyObject *tmp_tuple_element_154;
        PyObject *tmp_getattr_target_39;
        PyObject *tmp_getattr_attr_39;
        PyObject *tmp_getattr_default_39;
        tmp_raise_type_39 = PyExc_TypeError;
        tmp_left_value_39 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_39__metaclass);
        tmp_getattr_target_39 = tmp_class_creation_39__metaclass;
        tmp_getattr_attr_39 = mod_consts[48];
        tmp_getattr_default_39 = mod_consts[49];
        tmp_tuple_element_154 = BUILTIN_GETATTR(tmp_getattr_target_39, tmp_getattr_attr_39, tmp_getattr_default_39);
        if (tmp_tuple_element_154 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 373;

            goto try_except_handler_115;
        }
        tmp_right_value_39 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_205;
            PyObject *tmp_type_arg_78;
            PyTuple_SET_ITEM(tmp_right_value_39, 0, tmp_tuple_element_154);
            CHECK_OBJECT(tmp_class_creation_39__prepared);
            tmp_type_arg_78 = tmp_class_creation_39__prepared;
            tmp_expression_value_205 = BUILTIN_TYPE1(tmp_type_arg_78);
            assert(!(tmp_expression_value_205 == NULL));
            tmp_tuple_element_154 = LOOKUP_ATTRIBUTE(tmp_expression_value_205, mod_consts[48]);
            Py_DECREF(tmp_expression_value_205);
            if (tmp_tuple_element_154 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 373;

                goto tuple_build_exception_43;
            }
            PyTuple_SET_ITEM(tmp_right_value_39, 1, tmp_tuple_element_154);
        }
        goto tuple_build_noexception_43;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_43:;
        Py_DECREF(tmp_right_value_39);
        goto try_except_handler_115;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_43:;
        tmp_raise_value_39 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_39, tmp_right_value_39);
        Py_DECREF(tmp_right_value_39);
        if (tmp_raise_value_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 373;

            goto try_except_handler_115;
        }
        exception_type = tmp_raise_type_39;
        Py_INCREF(tmp_raise_type_39);
        exception_value = tmp_raise_value_39;
        exception_lineno = 373;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_115;
    }
    branch_no_155:;
    goto branch_end_154;
    branch_no_154:;
    {
        PyObject *tmp_assign_source_316;
        tmp_assign_source_316 = PyDict_New();
        assert(tmp_class_creation_39__prepared == NULL);
        tmp_class_creation_39__prepared = tmp_assign_source_316;
    }
    branch_end_154:;
    {
        PyObject *tmp_assign_source_317;
        {
            PyObject *tmp_set_locals_39;
            CHECK_OBJECT(tmp_class_creation_39__prepared);
            tmp_set_locals_39 = tmp_class_creation_39__prepared;
            locals_botocore$exceptions$$$class__39_IncompleteReadError_373 = tmp_set_locals_39;
            Py_INCREF(tmp_set_locals_39);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__39_IncompleteReadError_373, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 373;

            goto try_except_handler_117;
        }
        tmp_dictset_value = mod_consts[163];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__39_IncompleteReadError_373, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 373;

            goto try_except_handler_117;
        }
        tmp_dictset_value = mod_consts[162];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__39_IncompleteReadError_373, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 373;

            goto try_except_handler_117;
        }
        if (isFrameUnusable(cache_frame_8ec45afd7350545a21bd2381898ac1cc_39)) {
            Py_XDECREF(cache_frame_8ec45afd7350545a21bd2381898ac1cc_39);

#if _DEBUG_REFCOUNTS
            if (cache_frame_8ec45afd7350545a21bd2381898ac1cc_39 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_8ec45afd7350545a21bd2381898ac1cc_39 = MAKE_FUNCTION_FRAME(codeobj_8ec45afd7350545a21bd2381898ac1cc, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_8ec45afd7350545a21bd2381898ac1cc_39->m_type_description == NULL);
        frame_8ec45afd7350545a21bd2381898ac1cc_39 = cache_frame_8ec45afd7350545a21bd2381898ac1cc_39;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_8ec45afd7350545a21bd2381898ac1cc_39);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_8ec45afd7350545a21bd2381898ac1cc_39) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[164];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__39_IncompleteReadError_373, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 375;
            type_description_2 = "o";
            goto frame_exception_exit_39;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_8ec45afd7350545a21bd2381898ac1cc_39);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_38;

        frame_exception_exit_39:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_8ec45afd7350545a21bd2381898ac1cc_39);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_8ec45afd7350545a21bd2381898ac1cc_39, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_8ec45afd7350545a21bd2381898ac1cc_39->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_8ec45afd7350545a21bd2381898ac1cc_39, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_8ec45afd7350545a21bd2381898ac1cc_39,
            type_description_2,
            outline_38_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_8ec45afd7350545a21bd2381898ac1cc_39 == cache_frame_8ec45afd7350545a21bd2381898ac1cc_39) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_8ec45afd7350545a21bd2381898ac1cc_39);
            cache_frame_8ec45afd7350545a21bd2381898ac1cc_39 = NULL;
        }

        assertFrameObject(frame_8ec45afd7350545a21bd2381898ac1cc_39);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_38;

        frame_no_exception_38:;
        goto skip_nested_handling_38;
        nested_frame_exit_38:;

        goto try_except_handler_117;
        skip_nested_handling_38:;
        {
            nuitka_bool tmp_condition_result_234;
            PyObject *tmp_cmp_expr_left_39;
            PyObject *tmp_cmp_expr_right_39;
            CHECK_OBJECT(tmp_class_creation_39__bases);
            tmp_cmp_expr_left_39 = tmp_class_creation_39__bases;
            CHECK_OBJECT(tmp_class_creation_39__bases_orig);
            tmp_cmp_expr_right_39 = tmp_class_creation_39__bases_orig;
            tmp_condition_result_234 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_39, tmp_cmp_expr_right_39);
            if (tmp_condition_result_234 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 373;

                goto try_except_handler_117;
            }
            if (tmp_condition_result_234 == NUITKA_BOOL_TRUE) {
                goto branch_yes_156;
            } else {
                goto branch_no_156;
            }
            assert(tmp_condition_result_234 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_156:;
        CHECK_OBJECT(tmp_class_creation_39__bases_orig);
        tmp_dictset_value = tmp_class_creation_39__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__39_IncompleteReadError_373, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 373;

            goto try_except_handler_117;
        }
        branch_no_156:;
        {
            PyObject *tmp_assign_source_318;
            PyObject *tmp_called_value_78;
            PyObject *tmp_args_value_78;
            PyObject *tmp_tuple_element_155;
            PyObject *tmp_kwargs_value_78;
            CHECK_OBJECT(tmp_class_creation_39__metaclass);
            tmp_called_value_78 = tmp_class_creation_39__metaclass;
            tmp_tuple_element_155 = mod_consts[162];
            tmp_args_value_78 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_78, 0, tmp_tuple_element_155);
            CHECK_OBJECT(tmp_class_creation_39__bases);
            tmp_tuple_element_155 = tmp_class_creation_39__bases;
            PyTuple_SET_ITEM0(tmp_args_value_78, 1, tmp_tuple_element_155);
            tmp_tuple_element_155 = locals_botocore$exceptions$$$class__39_IncompleteReadError_373;
            PyTuple_SET_ITEM0(tmp_args_value_78, 2, tmp_tuple_element_155);
            CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
            tmp_kwargs_value_78 = tmp_class_creation_39__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 373;
            tmp_assign_source_318 = CALL_FUNCTION(tmp_called_value_78, tmp_args_value_78, tmp_kwargs_value_78);
            Py_DECREF(tmp_args_value_78);
            if (tmp_assign_source_318 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 373;

                goto try_except_handler_117;
            }
            assert(outline_38_var___class__ == NULL);
            outline_38_var___class__ = tmp_assign_source_318;
        }
        CHECK_OBJECT(outline_38_var___class__);
        tmp_assign_source_317 = outline_38_var___class__;
        Py_INCREF(tmp_assign_source_317);
        goto try_return_handler_117;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_117:;
        Py_DECREF(locals_botocore$exceptions$$$class__39_IncompleteReadError_373);
        locals_botocore$exceptions$$$class__39_IncompleteReadError_373 = NULL;
        goto try_return_handler_116;
        // Exception handler code:
        try_except_handler_117:;
        exception_keeper_type_115 = exception_type;
        exception_keeper_value_115 = exception_value;
        exception_keeper_tb_115 = exception_tb;
        exception_keeper_lineno_115 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__39_IncompleteReadError_373);
        locals_botocore$exceptions$$$class__39_IncompleteReadError_373 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_115;
        exception_value = exception_keeper_value_115;
        exception_tb = exception_keeper_tb_115;
        exception_lineno = exception_keeper_lineno_115;

        goto try_except_handler_116;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_116:;
        CHECK_OBJECT(outline_38_var___class__);
        Py_DECREF(outline_38_var___class__);
        outline_38_var___class__ = NULL;
        goto outline_result_39;
        // Exception handler code:
        try_except_handler_116:;
        exception_keeper_type_116 = exception_type;
        exception_keeper_value_116 = exception_value;
        exception_keeper_tb_116 = exception_tb;
        exception_keeper_lineno_116 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_116;
        exception_value = exception_keeper_value_116;
        exception_tb = exception_keeper_tb_116;
        exception_lineno = exception_keeper_lineno_116;

        goto outline_exception_39;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_39:;
        exception_lineno = 373;
        goto try_except_handler_115;
        outline_result_39:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[162], tmp_assign_source_317);
    }
    goto try_end_39;
    // Exception handler code:
    try_except_handler_115:;
    exception_keeper_type_117 = exception_type;
    exception_keeper_value_117 = exception_value;
    exception_keeper_tb_117 = exception_tb;
    exception_keeper_lineno_117 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_39__bases_orig);
    tmp_class_creation_39__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_39__bases);
    tmp_class_creation_39__bases = NULL;
    Py_XDECREF(tmp_class_creation_39__class_decl_dict);
    tmp_class_creation_39__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_39__metaclass);
    tmp_class_creation_39__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_39__prepared);
    tmp_class_creation_39__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_117;
    exception_value = exception_keeper_value_117;
    exception_tb = exception_keeper_tb_117;
    exception_lineno = exception_keeper_lineno_117;

    goto frame_exception_exit_1;
    // End of try:
    try_end_39:;
    CHECK_OBJECT(tmp_class_creation_39__bases_orig);
    Py_DECREF(tmp_class_creation_39__bases_orig);
    tmp_class_creation_39__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_39__bases);
    Py_DECREF(tmp_class_creation_39__bases);
    tmp_class_creation_39__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
    Py_DECREF(tmp_class_creation_39__class_decl_dict);
    tmp_class_creation_39__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_39__metaclass);
    Py_DECREF(tmp_class_creation_39__metaclass);
    tmp_class_creation_39__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_39__prepared);
    Py_DECREF(tmp_class_creation_39__prepared);
    tmp_class_creation_39__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_319;
        PyObject *tmp_tuple_element_156;
        tmp_tuple_element_156 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_156 == NULL)) {
            tmp_tuple_element_156 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_156 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 379;

            goto try_except_handler_118;
        }
        tmp_assign_source_319 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_319, 0, tmp_tuple_element_156);
        assert(tmp_class_creation_40__bases_orig == NULL);
        tmp_class_creation_40__bases_orig = tmp_assign_source_319;
    }
    {
        PyObject *tmp_assign_source_320;
        PyObject *tmp_dircall_arg1_40;
        CHECK_OBJECT(tmp_class_creation_40__bases_orig);
        tmp_dircall_arg1_40 = tmp_class_creation_40__bases_orig;
        Py_INCREF(tmp_dircall_arg1_40);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_40};
            tmp_assign_source_320 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_320 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 379;

            goto try_except_handler_118;
        }
        assert(tmp_class_creation_40__bases == NULL);
        tmp_class_creation_40__bases = tmp_assign_source_320;
    }
    {
        PyObject *tmp_assign_source_321;
        tmp_assign_source_321 = PyDict_New();
        assert(tmp_class_creation_40__class_decl_dict == NULL);
        tmp_class_creation_40__class_decl_dict = tmp_assign_source_321;
    }
    {
        PyObject *tmp_assign_source_322;
        PyObject *tmp_metaclass_value_40;
        bool tmp_condition_result_235;
        PyObject *tmp_key_value_118;
        PyObject *tmp_dict_arg_value_118;
        PyObject *tmp_dict_arg_value_119;
        PyObject *tmp_key_value_119;
        nuitka_bool tmp_condition_result_236;
        int tmp_truth_name_40;
        PyObject *tmp_type_arg_79;
        PyObject *tmp_expression_value_206;
        PyObject *tmp_subscript_value_40;
        PyObject *tmp_bases_value_40;
        tmp_key_value_118 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
        tmp_dict_arg_value_118 = tmp_class_creation_40__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_118, tmp_key_value_118);
        assert(!(tmp_res == -1));
        tmp_condition_result_235 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_235 != false) {
            goto condexpr_true_79;
        } else {
            goto condexpr_false_79;
        }
        condexpr_true_79:;
        CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
        tmp_dict_arg_value_119 = tmp_class_creation_40__class_decl_dict;
        tmp_key_value_119 = mod_consts[43];
        tmp_metaclass_value_40 = DICT_GET_ITEM0(tmp_dict_arg_value_119, tmp_key_value_119);
        if (tmp_metaclass_value_40 == NULL) {
            tmp_metaclass_value_40 = Py_None;
        }
        assert(!(tmp_metaclass_value_40 == NULL));
        Py_INCREF(tmp_metaclass_value_40);
        goto condexpr_end_79;
        condexpr_false_79:;
        CHECK_OBJECT(tmp_class_creation_40__bases);
        tmp_truth_name_40 = CHECK_IF_TRUE(tmp_class_creation_40__bases);
        if (tmp_truth_name_40 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 379;

            goto try_except_handler_118;
        }
        tmp_condition_result_236 = tmp_truth_name_40 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_236 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_80;
        } else {
            goto condexpr_false_80;
        }
        condexpr_true_80:;
        CHECK_OBJECT(tmp_class_creation_40__bases);
        tmp_expression_value_206 = tmp_class_creation_40__bases;
        tmp_subscript_value_40 = mod_consts[36];
        tmp_type_arg_79 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_206, tmp_subscript_value_40, 0);
        if (tmp_type_arg_79 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 379;

            goto try_except_handler_118;
        }
        tmp_metaclass_value_40 = BUILTIN_TYPE1(tmp_type_arg_79);
        Py_DECREF(tmp_type_arg_79);
        if (tmp_metaclass_value_40 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 379;

            goto try_except_handler_118;
        }
        goto condexpr_end_80;
        condexpr_false_80:;
        tmp_metaclass_value_40 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_40);
        condexpr_end_80:;
        condexpr_end_79:;
        CHECK_OBJECT(tmp_class_creation_40__bases);
        tmp_bases_value_40 = tmp_class_creation_40__bases;
        tmp_assign_source_322 = SELECT_METACLASS(tmp_metaclass_value_40, tmp_bases_value_40);
        Py_DECREF(tmp_metaclass_value_40);
        if (tmp_assign_source_322 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 379;

            goto try_except_handler_118;
        }
        assert(tmp_class_creation_40__metaclass == NULL);
        tmp_class_creation_40__metaclass = tmp_assign_source_322;
    }
    {
        bool tmp_condition_result_237;
        PyObject *tmp_key_value_120;
        PyObject *tmp_dict_arg_value_120;
        tmp_key_value_120 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
        tmp_dict_arg_value_120 = tmp_class_creation_40__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_120, tmp_key_value_120);
        assert(!(tmp_res == -1));
        tmp_condition_result_237 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_237 != false) {
            goto branch_yes_157;
        } else {
            goto branch_no_157;
        }
    }
    branch_yes_157:;
    CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_40__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 379;

        goto try_except_handler_118;
    }
    branch_no_157:;
    {
        nuitka_bool tmp_condition_result_238;
        PyObject *tmp_expression_value_207;
        CHECK_OBJECT(tmp_class_creation_40__metaclass);
        tmp_expression_value_207 = tmp_class_creation_40__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_207, mod_consts[44]);
        tmp_condition_result_238 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_238 == NUITKA_BOOL_TRUE) {
            goto branch_yes_158;
        } else {
            goto branch_no_158;
        }
    }
    branch_yes_158:;
    {
        PyObject *tmp_assign_source_323;
        PyObject *tmp_called_value_79;
        PyObject *tmp_expression_value_208;
        PyObject *tmp_args_value_79;
        PyObject *tmp_tuple_element_157;
        PyObject *tmp_kwargs_value_79;
        CHECK_OBJECT(tmp_class_creation_40__metaclass);
        tmp_expression_value_208 = tmp_class_creation_40__metaclass;
        tmp_called_value_79 = LOOKUP_ATTRIBUTE(tmp_expression_value_208, mod_consts[44]);
        if (tmp_called_value_79 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 379;

            goto try_except_handler_118;
        }
        tmp_tuple_element_157 = mod_consts[165];
        tmp_args_value_79 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_79, 0, tmp_tuple_element_157);
        CHECK_OBJECT(tmp_class_creation_40__bases);
        tmp_tuple_element_157 = tmp_class_creation_40__bases;
        PyTuple_SET_ITEM0(tmp_args_value_79, 1, tmp_tuple_element_157);
        CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
        tmp_kwargs_value_79 = tmp_class_creation_40__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 379;
        tmp_assign_source_323 = CALL_FUNCTION(tmp_called_value_79, tmp_args_value_79, tmp_kwargs_value_79);
        Py_DECREF(tmp_called_value_79);
        Py_DECREF(tmp_args_value_79);
        if (tmp_assign_source_323 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 379;

            goto try_except_handler_118;
        }
        assert(tmp_class_creation_40__prepared == NULL);
        tmp_class_creation_40__prepared = tmp_assign_source_323;
    }
    {
        bool tmp_condition_result_239;
        PyObject *tmp_operand_value_40;
        PyObject *tmp_expression_value_209;
        CHECK_OBJECT(tmp_class_creation_40__prepared);
        tmp_expression_value_209 = tmp_class_creation_40__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_209, mod_consts[46]);
        tmp_operand_value_40 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_40);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 379;

            goto try_except_handler_118;
        }
        tmp_condition_result_239 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_239 != false) {
            goto branch_yes_159;
        } else {
            goto branch_no_159;
        }
    }
    branch_yes_159:;
    {
        PyObject *tmp_raise_type_40;
        PyObject *tmp_raise_value_40;
        PyObject *tmp_left_value_40;
        PyObject *tmp_right_value_40;
        PyObject *tmp_tuple_element_158;
        PyObject *tmp_getattr_target_40;
        PyObject *tmp_getattr_attr_40;
        PyObject *tmp_getattr_default_40;
        tmp_raise_type_40 = PyExc_TypeError;
        tmp_left_value_40 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_40__metaclass);
        tmp_getattr_target_40 = tmp_class_creation_40__metaclass;
        tmp_getattr_attr_40 = mod_consts[48];
        tmp_getattr_default_40 = mod_consts[49];
        tmp_tuple_element_158 = BUILTIN_GETATTR(tmp_getattr_target_40, tmp_getattr_attr_40, tmp_getattr_default_40);
        if (tmp_tuple_element_158 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 379;

            goto try_except_handler_118;
        }
        tmp_right_value_40 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_210;
            PyObject *tmp_type_arg_80;
            PyTuple_SET_ITEM(tmp_right_value_40, 0, tmp_tuple_element_158);
            CHECK_OBJECT(tmp_class_creation_40__prepared);
            tmp_type_arg_80 = tmp_class_creation_40__prepared;
            tmp_expression_value_210 = BUILTIN_TYPE1(tmp_type_arg_80);
            assert(!(tmp_expression_value_210 == NULL));
            tmp_tuple_element_158 = LOOKUP_ATTRIBUTE(tmp_expression_value_210, mod_consts[48]);
            Py_DECREF(tmp_expression_value_210);
            if (tmp_tuple_element_158 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 379;

                goto tuple_build_exception_44;
            }
            PyTuple_SET_ITEM(tmp_right_value_40, 1, tmp_tuple_element_158);
        }
        goto tuple_build_noexception_44;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_44:;
        Py_DECREF(tmp_right_value_40);
        goto try_except_handler_118;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_44:;
        tmp_raise_value_40 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_40, tmp_right_value_40);
        Py_DECREF(tmp_right_value_40);
        if (tmp_raise_value_40 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 379;

            goto try_except_handler_118;
        }
        exception_type = tmp_raise_type_40;
        Py_INCREF(tmp_raise_type_40);
        exception_value = tmp_raise_value_40;
        exception_lineno = 379;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_118;
    }
    branch_no_159:;
    goto branch_end_158;
    branch_no_158:;
    {
        PyObject *tmp_assign_source_324;
        tmp_assign_source_324 = PyDict_New();
        assert(tmp_class_creation_40__prepared == NULL);
        tmp_class_creation_40__prepared = tmp_assign_source_324;
    }
    branch_end_158:;
    {
        PyObject *tmp_assign_source_325;
        {
            PyObject *tmp_set_locals_40;
            CHECK_OBJECT(tmp_class_creation_40__prepared);
            tmp_set_locals_40 = tmp_class_creation_40__prepared;
            locals_botocore$exceptions$$$class__40_InvalidExpressionError_379 = tmp_set_locals_40;
            Py_INCREF(tmp_set_locals_40);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__40_InvalidExpressionError_379, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 379;

            goto try_except_handler_120;
        }
        tmp_dictset_value = mod_consts[166];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__40_InvalidExpressionError_379, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 379;

            goto try_except_handler_120;
        }
        tmp_dictset_value = mod_consts[165];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__40_InvalidExpressionError_379, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 379;

            goto try_except_handler_120;
        }
        if (isFrameUnusable(cache_frame_58c793da95e1d980e6a91041dc9a8e79_40)) {
            Py_XDECREF(cache_frame_58c793da95e1d980e6a91041dc9a8e79_40);

#if _DEBUG_REFCOUNTS
            if (cache_frame_58c793da95e1d980e6a91041dc9a8e79_40 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_58c793da95e1d980e6a91041dc9a8e79_40 = MAKE_FUNCTION_FRAME(codeobj_58c793da95e1d980e6a91041dc9a8e79, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_58c793da95e1d980e6a91041dc9a8e79_40->m_type_description == NULL);
        frame_58c793da95e1d980e6a91041dc9a8e79_40 = cache_frame_58c793da95e1d980e6a91041dc9a8e79_40;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_58c793da95e1d980e6a91041dc9a8e79_40);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_58c793da95e1d980e6a91041dc9a8e79_40) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[167];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__40_InvalidExpressionError_379, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 381;
            type_description_2 = "o";
            goto frame_exception_exit_40;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_58c793da95e1d980e6a91041dc9a8e79_40);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_39;

        frame_exception_exit_40:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_58c793da95e1d980e6a91041dc9a8e79_40);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_58c793da95e1d980e6a91041dc9a8e79_40, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_58c793da95e1d980e6a91041dc9a8e79_40->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_58c793da95e1d980e6a91041dc9a8e79_40, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_58c793da95e1d980e6a91041dc9a8e79_40,
            type_description_2,
            outline_39_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_58c793da95e1d980e6a91041dc9a8e79_40 == cache_frame_58c793da95e1d980e6a91041dc9a8e79_40) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_58c793da95e1d980e6a91041dc9a8e79_40);
            cache_frame_58c793da95e1d980e6a91041dc9a8e79_40 = NULL;
        }

        assertFrameObject(frame_58c793da95e1d980e6a91041dc9a8e79_40);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_39;

        frame_no_exception_39:;
        goto skip_nested_handling_39;
        nested_frame_exit_39:;

        goto try_except_handler_120;
        skip_nested_handling_39:;
        {
            nuitka_bool tmp_condition_result_240;
            PyObject *tmp_cmp_expr_left_40;
            PyObject *tmp_cmp_expr_right_40;
            CHECK_OBJECT(tmp_class_creation_40__bases);
            tmp_cmp_expr_left_40 = tmp_class_creation_40__bases;
            CHECK_OBJECT(tmp_class_creation_40__bases_orig);
            tmp_cmp_expr_right_40 = tmp_class_creation_40__bases_orig;
            tmp_condition_result_240 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_40, tmp_cmp_expr_right_40);
            if (tmp_condition_result_240 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 379;

                goto try_except_handler_120;
            }
            if (tmp_condition_result_240 == NUITKA_BOOL_TRUE) {
                goto branch_yes_160;
            } else {
                goto branch_no_160;
            }
            assert(tmp_condition_result_240 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_160:;
        CHECK_OBJECT(tmp_class_creation_40__bases_orig);
        tmp_dictset_value = tmp_class_creation_40__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__40_InvalidExpressionError_379, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 379;

            goto try_except_handler_120;
        }
        branch_no_160:;
        {
            PyObject *tmp_assign_source_326;
            PyObject *tmp_called_value_80;
            PyObject *tmp_args_value_80;
            PyObject *tmp_tuple_element_159;
            PyObject *tmp_kwargs_value_80;
            CHECK_OBJECT(tmp_class_creation_40__metaclass);
            tmp_called_value_80 = tmp_class_creation_40__metaclass;
            tmp_tuple_element_159 = mod_consts[165];
            tmp_args_value_80 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_80, 0, tmp_tuple_element_159);
            CHECK_OBJECT(tmp_class_creation_40__bases);
            tmp_tuple_element_159 = tmp_class_creation_40__bases;
            PyTuple_SET_ITEM0(tmp_args_value_80, 1, tmp_tuple_element_159);
            tmp_tuple_element_159 = locals_botocore$exceptions$$$class__40_InvalidExpressionError_379;
            PyTuple_SET_ITEM0(tmp_args_value_80, 2, tmp_tuple_element_159);
            CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
            tmp_kwargs_value_80 = tmp_class_creation_40__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 379;
            tmp_assign_source_326 = CALL_FUNCTION(tmp_called_value_80, tmp_args_value_80, tmp_kwargs_value_80);
            Py_DECREF(tmp_args_value_80);
            if (tmp_assign_source_326 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 379;

                goto try_except_handler_120;
            }
            assert(outline_39_var___class__ == NULL);
            outline_39_var___class__ = tmp_assign_source_326;
        }
        CHECK_OBJECT(outline_39_var___class__);
        tmp_assign_source_325 = outline_39_var___class__;
        Py_INCREF(tmp_assign_source_325);
        goto try_return_handler_120;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_120:;
        Py_DECREF(locals_botocore$exceptions$$$class__40_InvalidExpressionError_379);
        locals_botocore$exceptions$$$class__40_InvalidExpressionError_379 = NULL;
        goto try_return_handler_119;
        // Exception handler code:
        try_except_handler_120:;
        exception_keeper_type_118 = exception_type;
        exception_keeper_value_118 = exception_value;
        exception_keeper_tb_118 = exception_tb;
        exception_keeper_lineno_118 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__40_InvalidExpressionError_379);
        locals_botocore$exceptions$$$class__40_InvalidExpressionError_379 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_118;
        exception_value = exception_keeper_value_118;
        exception_tb = exception_keeper_tb_118;
        exception_lineno = exception_keeper_lineno_118;

        goto try_except_handler_119;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_119:;
        CHECK_OBJECT(outline_39_var___class__);
        Py_DECREF(outline_39_var___class__);
        outline_39_var___class__ = NULL;
        goto outline_result_40;
        // Exception handler code:
        try_except_handler_119:;
        exception_keeper_type_119 = exception_type;
        exception_keeper_value_119 = exception_value;
        exception_keeper_tb_119 = exception_tb;
        exception_keeper_lineno_119 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_119;
        exception_value = exception_keeper_value_119;
        exception_tb = exception_keeper_tb_119;
        exception_lineno = exception_keeper_lineno_119;

        goto outline_exception_40;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_40:;
        exception_lineno = 379;
        goto try_except_handler_118;
        outline_result_40:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[165], tmp_assign_source_325);
    }
    goto try_end_40;
    // Exception handler code:
    try_except_handler_118:;
    exception_keeper_type_120 = exception_type;
    exception_keeper_value_120 = exception_value;
    exception_keeper_tb_120 = exception_tb;
    exception_keeper_lineno_120 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_40__bases_orig);
    tmp_class_creation_40__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_40__bases);
    tmp_class_creation_40__bases = NULL;
    Py_XDECREF(tmp_class_creation_40__class_decl_dict);
    tmp_class_creation_40__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_40__metaclass);
    tmp_class_creation_40__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_40__prepared);
    tmp_class_creation_40__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_120;
    exception_value = exception_keeper_value_120;
    exception_tb = exception_keeper_tb_120;
    exception_lineno = exception_keeper_lineno_120;

    goto frame_exception_exit_1;
    // End of try:
    try_end_40:;
    CHECK_OBJECT(tmp_class_creation_40__bases_orig);
    Py_DECREF(tmp_class_creation_40__bases_orig);
    tmp_class_creation_40__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_40__bases);
    Py_DECREF(tmp_class_creation_40__bases);
    tmp_class_creation_40__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
    Py_DECREF(tmp_class_creation_40__class_decl_dict);
    tmp_class_creation_40__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_40__metaclass);
    Py_DECREF(tmp_class_creation_40__metaclass);
    tmp_class_creation_40__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_40__prepared);
    Py_DECREF(tmp_class_creation_40__prepared);
    tmp_class_creation_40__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_327;
        PyObject *tmp_tuple_element_160;
        tmp_tuple_element_160 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_160 == NULL)) {
            tmp_tuple_element_160 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_160 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 384;

            goto try_except_handler_121;
        }
        tmp_assign_source_327 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_327, 0, tmp_tuple_element_160);
        assert(tmp_class_creation_41__bases_orig == NULL);
        tmp_class_creation_41__bases_orig = tmp_assign_source_327;
    }
    {
        PyObject *tmp_assign_source_328;
        PyObject *tmp_dircall_arg1_41;
        CHECK_OBJECT(tmp_class_creation_41__bases_orig);
        tmp_dircall_arg1_41 = tmp_class_creation_41__bases_orig;
        Py_INCREF(tmp_dircall_arg1_41);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_41};
            tmp_assign_source_328 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_328 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 384;

            goto try_except_handler_121;
        }
        assert(tmp_class_creation_41__bases == NULL);
        tmp_class_creation_41__bases = tmp_assign_source_328;
    }
    {
        PyObject *tmp_assign_source_329;
        tmp_assign_source_329 = PyDict_New();
        assert(tmp_class_creation_41__class_decl_dict == NULL);
        tmp_class_creation_41__class_decl_dict = tmp_assign_source_329;
    }
    {
        PyObject *tmp_assign_source_330;
        PyObject *tmp_metaclass_value_41;
        bool tmp_condition_result_241;
        PyObject *tmp_key_value_121;
        PyObject *tmp_dict_arg_value_121;
        PyObject *tmp_dict_arg_value_122;
        PyObject *tmp_key_value_122;
        nuitka_bool tmp_condition_result_242;
        int tmp_truth_name_41;
        PyObject *tmp_type_arg_81;
        PyObject *tmp_expression_value_211;
        PyObject *tmp_subscript_value_41;
        PyObject *tmp_bases_value_41;
        tmp_key_value_121 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_41__class_decl_dict);
        tmp_dict_arg_value_121 = tmp_class_creation_41__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_121, tmp_key_value_121);
        assert(!(tmp_res == -1));
        tmp_condition_result_241 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_241 != false) {
            goto condexpr_true_81;
        } else {
            goto condexpr_false_81;
        }
        condexpr_true_81:;
        CHECK_OBJECT(tmp_class_creation_41__class_decl_dict);
        tmp_dict_arg_value_122 = tmp_class_creation_41__class_decl_dict;
        tmp_key_value_122 = mod_consts[43];
        tmp_metaclass_value_41 = DICT_GET_ITEM0(tmp_dict_arg_value_122, tmp_key_value_122);
        if (tmp_metaclass_value_41 == NULL) {
            tmp_metaclass_value_41 = Py_None;
        }
        assert(!(tmp_metaclass_value_41 == NULL));
        Py_INCREF(tmp_metaclass_value_41);
        goto condexpr_end_81;
        condexpr_false_81:;
        CHECK_OBJECT(tmp_class_creation_41__bases);
        tmp_truth_name_41 = CHECK_IF_TRUE(tmp_class_creation_41__bases);
        if (tmp_truth_name_41 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 384;

            goto try_except_handler_121;
        }
        tmp_condition_result_242 = tmp_truth_name_41 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_242 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_82;
        } else {
            goto condexpr_false_82;
        }
        condexpr_true_82:;
        CHECK_OBJECT(tmp_class_creation_41__bases);
        tmp_expression_value_211 = tmp_class_creation_41__bases;
        tmp_subscript_value_41 = mod_consts[36];
        tmp_type_arg_81 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_211, tmp_subscript_value_41, 0);
        if (tmp_type_arg_81 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 384;

            goto try_except_handler_121;
        }
        tmp_metaclass_value_41 = BUILTIN_TYPE1(tmp_type_arg_81);
        Py_DECREF(tmp_type_arg_81);
        if (tmp_metaclass_value_41 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 384;

            goto try_except_handler_121;
        }
        goto condexpr_end_82;
        condexpr_false_82:;
        tmp_metaclass_value_41 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_41);
        condexpr_end_82:;
        condexpr_end_81:;
        CHECK_OBJECT(tmp_class_creation_41__bases);
        tmp_bases_value_41 = tmp_class_creation_41__bases;
        tmp_assign_source_330 = SELECT_METACLASS(tmp_metaclass_value_41, tmp_bases_value_41);
        Py_DECREF(tmp_metaclass_value_41);
        if (tmp_assign_source_330 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 384;

            goto try_except_handler_121;
        }
        assert(tmp_class_creation_41__metaclass == NULL);
        tmp_class_creation_41__metaclass = tmp_assign_source_330;
    }
    {
        bool tmp_condition_result_243;
        PyObject *tmp_key_value_123;
        PyObject *tmp_dict_arg_value_123;
        tmp_key_value_123 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_41__class_decl_dict);
        tmp_dict_arg_value_123 = tmp_class_creation_41__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_123, tmp_key_value_123);
        assert(!(tmp_res == -1));
        tmp_condition_result_243 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_243 != false) {
            goto branch_yes_161;
        } else {
            goto branch_no_161;
        }
    }
    branch_yes_161:;
    CHECK_OBJECT(tmp_class_creation_41__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_41__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 384;

        goto try_except_handler_121;
    }
    branch_no_161:;
    {
        nuitka_bool tmp_condition_result_244;
        PyObject *tmp_expression_value_212;
        CHECK_OBJECT(tmp_class_creation_41__metaclass);
        tmp_expression_value_212 = tmp_class_creation_41__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_212, mod_consts[44]);
        tmp_condition_result_244 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_244 == NUITKA_BOOL_TRUE) {
            goto branch_yes_162;
        } else {
            goto branch_no_162;
        }
    }
    branch_yes_162:;
    {
        PyObject *tmp_assign_source_331;
        PyObject *tmp_called_value_81;
        PyObject *tmp_expression_value_213;
        PyObject *tmp_args_value_81;
        PyObject *tmp_tuple_element_161;
        PyObject *tmp_kwargs_value_81;
        CHECK_OBJECT(tmp_class_creation_41__metaclass);
        tmp_expression_value_213 = tmp_class_creation_41__metaclass;
        tmp_called_value_81 = LOOKUP_ATTRIBUTE(tmp_expression_value_213, mod_consts[44]);
        if (tmp_called_value_81 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 384;

            goto try_except_handler_121;
        }
        tmp_tuple_element_161 = mod_consts[168];
        tmp_args_value_81 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_81, 0, tmp_tuple_element_161);
        CHECK_OBJECT(tmp_class_creation_41__bases);
        tmp_tuple_element_161 = tmp_class_creation_41__bases;
        PyTuple_SET_ITEM0(tmp_args_value_81, 1, tmp_tuple_element_161);
        CHECK_OBJECT(tmp_class_creation_41__class_decl_dict);
        tmp_kwargs_value_81 = tmp_class_creation_41__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 384;
        tmp_assign_source_331 = CALL_FUNCTION(tmp_called_value_81, tmp_args_value_81, tmp_kwargs_value_81);
        Py_DECREF(tmp_called_value_81);
        Py_DECREF(tmp_args_value_81);
        if (tmp_assign_source_331 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 384;

            goto try_except_handler_121;
        }
        assert(tmp_class_creation_41__prepared == NULL);
        tmp_class_creation_41__prepared = tmp_assign_source_331;
    }
    {
        bool tmp_condition_result_245;
        PyObject *tmp_operand_value_41;
        PyObject *tmp_expression_value_214;
        CHECK_OBJECT(tmp_class_creation_41__prepared);
        tmp_expression_value_214 = tmp_class_creation_41__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_214, mod_consts[46]);
        tmp_operand_value_41 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_41);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 384;

            goto try_except_handler_121;
        }
        tmp_condition_result_245 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_245 != false) {
            goto branch_yes_163;
        } else {
            goto branch_no_163;
        }
    }
    branch_yes_163:;
    {
        PyObject *tmp_raise_type_41;
        PyObject *tmp_raise_value_41;
        PyObject *tmp_left_value_41;
        PyObject *tmp_right_value_41;
        PyObject *tmp_tuple_element_162;
        PyObject *tmp_getattr_target_41;
        PyObject *tmp_getattr_attr_41;
        PyObject *tmp_getattr_default_41;
        tmp_raise_type_41 = PyExc_TypeError;
        tmp_left_value_41 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_41__metaclass);
        tmp_getattr_target_41 = tmp_class_creation_41__metaclass;
        tmp_getattr_attr_41 = mod_consts[48];
        tmp_getattr_default_41 = mod_consts[49];
        tmp_tuple_element_162 = BUILTIN_GETATTR(tmp_getattr_target_41, tmp_getattr_attr_41, tmp_getattr_default_41);
        if (tmp_tuple_element_162 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 384;

            goto try_except_handler_121;
        }
        tmp_right_value_41 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_215;
            PyObject *tmp_type_arg_82;
            PyTuple_SET_ITEM(tmp_right_value_41, 0, tmp_tuple_element_162);
            CHECK_OBJECT(tmp_class_creation_41__prepared);
            tmp_type_arg_82 = tmp_class_creation_41__prepared;
            tmp_expression_value_215 = BUILTIN_TYPE1(tmp_type_arg_82);
            assert(!(tmp_expression_value_215 == NULL));
            tmp_tuple_element_162 = LOOKUP_ATTRIBUTE(tmp_expression_value_215, mod_consts[48]);
            Py_DECREF(tmp_expression_value_215);
            if (tmp_tuple_element_162 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 384;

                goto tuple_build_exception_45;
            }
            PyTuple_SET_ITEM(tmp_right_value_41, 1, tmp_tuple_element_162);
        }
        goto tuple_build_noexception_45;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_45:;
        Py_DECREF(tmp_right_value_41);
        goto try_except_handler_121;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_45:;
        tmp_raise_value_41 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_41, tmp_right_value_41);
        Py_DECREF(tmp_right_value_41);
        if (tmp_raise_value_41 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 384;

            goto try_except_handler_121;
        }
        exception_type = tmp_raise_type_41;
        Py_INCREF(tmp_raise_type_41);
        exception_value = tmp_raise_value_41;
        exception_lineno = 384;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_121;
    }
    branch_no_163:;
    goto branch_end_162;
    branch_no_162:;
    {
        PyObject *tmp_assign_source_332;
        tmp_assign_source_332 = PyDict_New();
        assert(tmp_class_creation_41__prepared == NULL);
        tmp_class_creation_41__prepared = tmp_assign_source_332;
    }
    branch_end_162:;
    {
        PyObject *tmp_assign_source_333;
        {
            PyObject *tmp_set_locals_41;
            CHECK_OBJECT(tmp_class_creation_41__prepared);
            tmp_set_locals_41 = tmp_class_creation_41__prepared;
            locals_botocore$exceptions$$$class__41_UnknownCredentialError_384 = tmp_set_locals_41;
            Py_INCREF(tmp_set_locals_41);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__41_UnknownCredentialError_384, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 384;

            goto try_except_handler_123;
        }
        tmp_dictset_value = mod_consts[169];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__41_UnknownCredentialError_384, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 384;

            goto try_except_handler_123;
        }
        tmp_dictset_value = mod_consts[168];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__41_UnknownCredentialError_384, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 384;

            goto try_except_handler_123;
        }
        if (isFrameUnusable(cache_frame_5afbdbc4a235063970771fea8e50e684_41)) {
            Py_XDECREF(cache_frame_5afbdbc4a235063970771fea8e50e684_41);

#if _DEBUG_REFCOUNTS
            if (cache_frame_5afbdbc4a235063970771fea8e50e684_41 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_5afbdbc4a235063970771fea8e50e684_41 = MAKE_FUNCTION_FRAME(codeobj_5afbdbc4a235063970771fea8e50e684, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_5afbdbc4a235063970771fea8e50e684_41->m_type_description == NULL);
        frame_5afbdbc4a235063970771fea8e50e684_41 = cache_frame_5afbdbc4a235063970771fea8e50e684_41;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_5afbdbc4a235063970771fea8e50e684_41);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_5afbdbc4a235063970771fea8e50e684_41) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[170];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__41_UnknownCredentialError_384, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 386;
            type_description_2 = "o";
            goto frame_exception_exit_41;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_5afbdbc4a235063970771fea8e50e684_41);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_40;

        frame_exception_exit_41:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_5afbdbc4a235063970771fea8e50e684_41);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_5afbdbc4a235063970771fea8e50e684_41, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_5afbdbc4a235063970771fea8e50e684_41->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_5afbdbc4a235063970771fea8e50e684_41, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_5afbdbc4a235063970771fea8e50e684_41,
            type_description_2,
            outline_40_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_5afbdbc4a235063970771fea8e50e684_41 == cache_frame_5afbdbc4a235063970771fea8e50e684_41) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_5afbdbc4a235063970771fea8e50e684_41);
            cache_frame_5afbdbc4a235063970771fea8e50e684_41 = NULL;
        }

        assertFrameObject(frame_5afbdbc4a235063970771fea8e50e684_41);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_40;

        frame_no_exception_40:;
        goto skip_nested_handling_40;
        nested_frame_exit_40:;

        goto try_except_handler_123;
        skip_nested_handling_40:;
        {
            nuitka_bool tmp_condition_result_246;
            PyObject *tmp_cmp_expr_left_41;
            PyObject *tmp_cmp_expr_right_41;
            CHECK_OBJECT(tmp_class_creation_41__bases);
            tmp_cmp_expr_left_41 = tmp_class_creation_41__bases;
            CHECK_OBJECT(tmp_class_creation_41__bases_orig);
            tmp_cmp_expr_right_41 = tmp_class_creation_41__bases_orig;
            tmp_condition_result_246 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_41, tmp_cmp_expr_right_41);
            if (tmp_condition_result_246 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 384;

                goto try_except_handler_123;
            }
            if (tmp_condition_result_246 == NUITKA_BOOL_TRUE) {
                goto branch_yes_164;
            } else {
                goto branch_no_164;
            }
            assert(tmp_condition_result_246 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_164:;
        CHECK_OBJECT(tmp_class_creation_41__bases_orig);
        tmp_dictset_value = tmp_class_creation_41__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__41_UnknownCredentialError_384, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 384;

            goto try_except_handler_123;
        }
        branch_no_164:;
        {
            PyObject *tmp_assign_source_334;
            PyObject *tmp_called_value_82;
            PyObject *tmp_args_value_82;
            PyObject *tmp_tuple_element_163;
            PyObject *tmp_kwargs_value_82;
            CHECK_OBJECT(tmp_class_creation_41__metaclass);
            tmp_called_value_82 = tmp_class_creation_41__metaclass;
            tmp_tuple_element_163 = mod_consts[168];
            tmp_args_value_82 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_82, 0, tmp_tuple_element_163);
            CHECK_OBJECT(tmp_class_creation_41__bases);
            tmp_tuple_element_163 = tmp_class_creation_41__bases;
            PyTuple_SET_ITEM0(tmp_args_value_82, 1, tmp_tuple_element_163);
            tmp_tuple_element_163 = locals_botocore$exceptions$$$class__41_UnknownCredentialError_384;
            PyTuple_SET_ITEM0(tmp_args_value_82, 2, tmp_tuple_element_163);
            CHECK_OBJECT(tmp_class_creation_41__class_decl_dict);
            tmp_kwargs_value_82 = tmp_class_creation_41__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 384;
            tmp_assign_source_334 = CALL_FUNCTION(tmp_called_value_82, tmp_args_value_82, tmp_kwargs_value_82);
            Py_DECREF(tmp_args_value_82);
            if (tmp_assign_source_334 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 384;

                goto try_except_handler_123;
            }
            assert(outline_40_var___class__ == NULL);
            outline_40_var___class__ = tmp_assign_source_334;
        }
        CHECK_OBJECT(outline_40_var___class__);
        tmp_assign_source_333 = outline_40_var___class__;
        Py_INCREF(tmp_assign_source_333);
        goto try_return_handler_123;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_123:;
        Py_DECREF(locals_botocore$exceptions$$$class__41_UnknownCredentialError_384);
        locals_botocore$exceptions$$$class__41_UnknownCredentialError_384 = NULL;
        goto try_return_handler_122;
        // Exception handler code:
        try_except_handler_123:;
        exception_keeper_type_121 = exception_type;
        exception_keeper_value_121 = exception_value;
        exception_keeper_tb_121 = exception_tb;
        exception_keeper_lineno_121 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__41_UnknownCredentialError_384);
        locals_botocore$exceptions$$$class__41_UnknownCredentialError_384 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_121;
        exception_value = exception_keeper_value_121;
        exception_tb = exception_keeper_tb_121;
        exception_lineno = exception_keeper_lineno_121;

        goto try_except_handler_122;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_122:;
        CHECK_OBJECT(outline_40_var___class__);
        Py_DECREF(outline_40_var___class__);
        outline_40_var___class__ = NULL;
        goto outline_result_41;
        // Exception handler code:
        try_except_handler_122:;
        exception_keeper_type_122 = exception_type;
        exception_keeper_value_122 = exception_value;
        exception_keeper_tb_122 = exception_tb;
        exception_keeper_lineno_122 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_122;
        exception_value = exception_keeper_value_122;
        exception_tb = exception_keeper_tb_122;
        exception_lineno = exception_keeper_lineno_122;

        goto outline_exception_41;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_41:;
        exception_lineno = 384;
        goto try_except_handler_121;
        outline_result_41:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[168], tmp_assign_source_333);
    }
    goto try_end_41;
    // Exception handler code:
    try_except_handler_121:;
    exception_keeper_type_123 = exception_type;
    exception_keeper_value_123 = exception_value;
    exception_keeper_tb_123 = exception_tb;
    exception_keeper_lineno_123 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_41__bases_orig);
    tmp_class_creation_41__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_41__bases);
    tmp_class_creation_41__bases = NULL;
    Py_XDECREF(tmp_class_creation_41__class_decl_dict);
    tmp_class_creation_41__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_41__metaclass);
    tmp_class_creation_41__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_41__prepared);
    tmp_class_creation_41__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_123;
    exception_value = exception_keeper_value_123;
    exception_tb = exception_keeper_tb_123;
    exception_lineno = exception_keeper_lineno_123;

    goto frame_exception_exit_1;
    // End of try:
    try_end_41:;
    CHECK_OBJECT(tmp_class_creation_41__bases_orig);
    Py_DECREF(tmp_class_creation_41__bases_orig);
    tmp_class_creation_41__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_41__bases);
    Py_DECREF(tmp_class_creation_41__bases);
    tmp_class_creation_41__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_41__class_decl_dict);
    Py_DECREF(tmp_class_creation_41__class_decl_dict);
    tmp_class_creation_41__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_41__metaclass);
    Py_DECREF(tmp_class_creation_41__metaclass);
    tmp_class_creation_41__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_41__prepared);
    Py_DECREF(tmp_class_creation_41__prepared);
    tmp_class_creation_41__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_335;
        PyObject *tmp_tuple_element_164;
        tmp_tuple_element_164 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_164 == NULL)) {
            tmp_tuple_element_164 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_164 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 389;

            goto try_except_handler_124;
        }
        tmp_assign_source_335 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_335, 0, tmp_tuple_element_164);
        assert(tmp_class_creation_42__bases_orig == NULL);
        tmp_class_creation_42__bases_orig = tmp_assign_source_335;
    }
    {
        PyObject *tmp_assign_source_336;
        PyObject *tmp_dircall_arg1_42;
        CHECK_OBJECT(tmp_class_creation_42__bases_orig);
        tmp_dircall_arg1_42 = tmp_class_creation_42__bases_orig;
        Py_INCREF(tmp_dircall_arg1_42);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_42};
            tmp_assign_source_336 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_336 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 389;

            goto try_except_handler_124;
        }
        assert(tmp_class_creation_42__bases == NULL);
        tmp_class_creation_42__bases = tmp_assign_source_336;
    }
    {
        PyObject *tmp_assign_source_337;
        tmp_assign_source_337 = PyDict_New();
        assert(tmp_class_creation_42__class_decl_dict == NULL);
        tmp_class_creation_42__class_decl_dict = tmp_assign_source_337;
    }
    {
        PyObject *tmp_assign_source_338;
        PyObject *tmp_metaclass_value_42;
        bool tmp_condition_result_247;
        PyObject *tmp_key_value_124;
        PyObject *tmp_dict_arg_value_124;
        PyObject *tmp_dict_arg_value_125;
        PyObject *tmp_key_value_125;
        nuitka_bool tmp_condition_result_248;
        int tmp_truth_name_42;
        PyObject *tmp_type_arg_83;
        PyObject *tmp_expression_value_216;
        PyObject *tmp_subscript_value_42;
        PyObject *tmp_bases_value_42;
        tmp_key_value_124 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_42__class_decl_dict);
        tmp_dict_arg_value_124 = tmp_class_creation_42__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_124, tmp_key_value_124);
        assert(!(tmp_res == -1));
        tmp_condition_result_247 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_247 != false) {
            goto condexpr_true_83;
        } else {
            goto condexpr_false_83;
        }
        condexpr_true_83:;
        CHECK_OBJECT(tmp_class_creation_42__class_decl_dict);
        tmp_dict_arg_value_125 = tmp_class_creation_42__class_decl_dict;
        tmp_key_value_125 = mod_consts[43];
        tmp_metaclass_value_42 = DICT_GET_ITEM0(tmp_dict_arg_value_125, tmp_key_value_125);
        if (tmp_metaclass_value_42 == NULL) {
            tmp_metaclass_value_42 = Py_None;
        }
        assert(!(tmp_metaclass_value_42 == NULL));
        Py_INCREF(tmp_metaclass_value_42);
        goto condexpr_end_83;
        condexpr_false_83:;
        CHECK_OBJECT(tmp_class_creation_42__bases);
        tmp_truth_name_42 = CHECK_IF_TRUE(tmp_class_creation_42__bases);
        if (tmp_truth_name_42 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 389;

            goto try_except_handler_124;
        }
        tmp_condition_result_248 = tmp_truth_name_42 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_248 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_84;
        } else {
            goto condexpr_false_84;
        }
        condexpr_true_84:;
        CHECK_OBJECT(tmp_class_creation_42__bases);
        tmp_expression_value_216 = tmp_class_creation_42__bases;
        tmp_subscript_value_42 = mod_consts[36];
        tmp_type_arg_83 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_216, tmp_subscript_value_42, 0);
        if (tmp_type_arg_83 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 389;

            goto try_except_handler_124;
        }
        tmp_metaclass_value_42 = BUILTIN_TYPE1(tmp_type_arg_83);
        Py_DECREF(tmp_type_arg_83);
        if (tmp_metaclass_value_42 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 389;

            goto try_except_handler_124;
        }
        goto condexpr_end_84;
        condexpr_false_84:;
        tmp_metaclass_value_42 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_42);
        condexpr_end_84:;
        condexpr_end_83:;
        CHECK_OBJECT(tmp_class_creation_42__bases);
        tmp_bases_value_42 = tmp_class_creation_42__bases;
        tmp_assign_source_338 = SELECT_METACLASS(tmp_metaclass_value_42, tmp_bases_value_42);
        Py_DECREF(tmp_metaclass_value_42);
        if (tmp_assign_source_338 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 389;

            goto try_except_handler_124;
        }
        assert(tmp_class_creation_42__metaclass == NULL);
        tmp_class_creation_42__metaclass = tmp_assign_source_338;
    }
    {
        bool tmp_condition_result_249;
        PyObject *tmp_key_value_126;
        PyObject *tmp_dict_arg_value_126;
        tmp_key_value_126 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_42__class_decl_dict);
        tmp_dict_arg_value_126 = tmp_class_creation_42__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_126, tmp_key_value_126);
        assert(!(tmp_res == -1));
        tmp_condition_result_249 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_249 != false) {
            goto branch_yes_165;
        } else {
            goto branch_no_165;
        }
    }
    branch_yes_165:;
    CHECK_OBJECT(tmp_class_creation_42__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_42__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 389;

        goto try_except_handler_124;
    }
    branch_no_165:;
    {
        nuitka_bool tmp_condition_result_250;
        PyObject *tmp_expression_value_217;
        CHECK_OBJECT(tmp_class_creation_42__metaclass);
        tmp_expression_value_217 = tmp_class_creation_42__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_217, mod_consts[44]);
        tmp_condition_result_250 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_250 == NUITKA_BOOL_TRUE) {
            goto branch_yes_166;
        } else {
            goto branch_no_166;
        }
    }
    branch_yes_166:;
    {
        PyObject *tmp_assign_source_339;
        PyObject *tmp_called_value_83;
        PyObject *tmp_expression_value_218;
        PyObject *tmp_args_value_83;
        PyObject *tmp_tuple_element_165;
        PyObject *tmp_kwargs_value_83;
        CHECK_OBJECT(tmp_class_creation_42__metaclass);
        tmp_expression_value_218 = tmp_class_creation_42__metaclass;
        tmp_called_value_83 = LOOKUP_ATTRIBUTE(tmp_expression_value_218, mod_consts[44]);
        if (tmp_called_value_83 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 389;

            goto try_except_handler_124;
        }
        tmp_tuple_element_165 = mod_consts[171];
        tmp_args_value_83 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_83, 0, tmp_tuple_element_165);
        CHECK_OBJECT(tmp_class_creation_42__bases);
        tmp_tuple_element_165 = tmp_class_creation_42__bases;
        PyTuple_SET_ITEM0(tmp_args_value_83, 1, tmp_tuple_element_165);
        CHECK_OBJECT(tmp_class_creation_42__class_decl_dict);
        tmp_kwargs_value_83 = tmp_class_creation_42__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 389;
        tmp_assign_source_339 = CALL_FUNCTION(tmp_called_value_83, tmp_args_value_83, tmp_kwargs_value_83);
        Py_DECREF(tmp_called_value_83);
        Py_DECREF(tmp_args_value_83);
        if (tmp_assign_source_339 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 389;

            goto try_except_handler_124;
        }
        assert(tmp_class_creation_42__prepared == NULL);
        tmp_class_creation_42__prepared = tmp_assign_source_339;
    }
    {
        bool tmp_condition_result_251;
        PyObject *tmp_operand_value_42;
        PyObject *tmp_expression_value_219;
        CHECK_OBJECT(tmp_class_creation_42__prepared);
        tmp_expression_value_219 = tmp_class_creation_42__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_219, mod_consts[46]);
        tmp_operand_value_42 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_42);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 389;

            goto try_except_handler_124;
        }
        tmp_condition_result_251 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_251 != false) {
            goto branch_yes_167;
        } else {
            goto branch_no_167;
        }
    }
    branch_yes_167:;
    {
        PyObject *tmp_raise_type_42;
        PyObject *tmp_raise_value_42;
        PyObject *tmp_left_value_42;
        PyObject *tmp_right_value_42;
        PyObject *tmp_tuple_element_166;
        PyObject *tmp_getattr_target_42;
        PyObject *tmp_getattr_attr_42;
        PyObject *tmp_getattr_default_42;
        tmp_raise_type_42 = PyExc_TypeError;
        tmp_left_value_42 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_42__metaclass);
        tmp_getattr_target_42 = tmp_class_creation_42__metaclass;
        tmp_getattr_attr_42 = mod_consts[48];
        tmp_getattr_default_42 = mod_consts[49];
        tmp_tuple_element_166 = BUILTIN_GETATTR(tmp_getattr_target_42, tmp_getattr_attr_42, tmp_getattr_default_42);
        if (tmp_tuple_element_166 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 389;

            goto try_except_handler_124;
        }
        tmp_right_value_42 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_220;
            PyObject *tmp_type_arg_84;
            PyTuple_SET_ITEM(tmp_right_value_42, 0, tmp_tuple_element_166);
            CHECK_OBJECT(tmp_class_creation_42__prepared);
            tmp_type_arg_84 = tmp_class_creation_42__prepared;
            tmp_expression_value_220 = BUILTIN_TYPE1(tmp_type_arg_84);
            assert(!(tmp_expression_value_220 == NULL));
            tmp_tuple_element_166 = LOOKUP_ATTRIBUTE(tmp_expression_value_220, mod_consts[48]);
            Py_DECREF(tmp_expression_value_220);
            if (tmp_tuple_element_166 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 389;

                goto tuple_build_exception_46;
            }
            PyTuple_SET_ITEM(tmp_right_value_42, 1, tmp_tuple_element_166);
        }
        goto tuple_build_noexception_46;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_46:;
        Py_DECREF(tmp_right_value_42);
        goto try_except_handler_124;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_46:;
        tmp_raise_value_42 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_42, tmp_right_value_42);
        Py_DECREF(tmp_right_value_42);
        if (tmp_raise_value_42 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 389;

            goto try_except_handler_124;
        }
        exception_type = tmp_raise_type_42;
        Py_INCREF(tmp_raise_type_42);
        exception_value = tmp_raise_value_42;
        exception_lineno = 389;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_124;
    }
    branch_no_167:;
    goto branch_end_166;
    branch_no_166:;
    {
        PyObject *tmp_assign_source_340;
        tmp_assign_source_340 = PyDict_New();
        assert(tmp_class_creation_42__prepared == NULL);
        tmp_class_creation_42__prepared = tmp_assign_source_340;
    }
    branch_end_166:;
    {
        PyObject *tmp_assign_source_341;
        {
            PyObject *tmp_set_locals_42;
            CHECK_OBJECT(tmp_class_creation_42__prepared);
            tmp_set_locals_42 = tmp_class_creation_42__prepared;
            locals_botocore$exceptions$$$class__42_WaiterConfigError_389 = tmp_set_locals_42;
            Py_INCREF(tmp_set_locals_42);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__42_WaiterConfigError_389, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 389;

            goto try_except_handler_126;
        }
        tmp_dictset_value = mod_consts[172];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__42_WaiterConfigError_389, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 389;

            goto try_except_handler_126;
        }
        tmp_dictset_value = mod_consts[171];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__42_WaiterConfigError_389, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 389;

            goto try_except_handler_126;
        }
        if (isFrameUnusable(cache_frame_40a276ce738d53235a378f54b7fea973_42)) {
            Py_XDECREF(cache_frame_40a276ce738d53235a378f54b7fea973_42);

#if _DEBUG_REFCOUNTS
            if (cache_frame_40a276ce738d53235a378f54b7fea973_42 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_40a276ce738d53235a378f54b7fea973_42 = MAKE_FUNCTION_FRAME(codeobj_40a276ce738d53235a378f54b7fea973, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_40a276ce738d53235a378f54b7fea973_42->m_type_description == NULL);
        frame_40a276ce738d53235a378f54b7fea973_42 = cache_frame_40a276ce738d53235a378f54b7fea973_42;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_40a276ce738d53235a378f54b7fea973_42);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_40a276ce738d53235a378f54b7fea973_42) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[173];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__42_WaiterConfigError_389, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 391;
            type_description_2 = "o";
            goto frame_exception_exit_42;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_40a276ce738d53235a378f54b7fea973_42);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_41;

        frame_exception_exit_42:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_40a276ce738d53235a378f54b7fea973_42);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_40a276ce738d53235a378f54b7fea973_42, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_40a276ce738d53235a378f54b7fea973_42->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_40a276ce738d53235a378f54b7fea973_42, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_40a276ce738d53235a378f54b7fea973_42,
            type_description_2,
            outline_41_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_40a276ce738d53235a378f54b7fea973_42 == cache_frame_40a276ce738d53235a378f54b7fea973_42) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_40a276ce738d53235a378f54b7fea973_42);
            cache_frame_40a276ce738d53235a378f54b7fea973_42 = NULL;
        }

        assertFrameObject(frame_40a276ce738d53235a378f54b7fea973_42);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_41;

        frame_no_exception_41:;
        goto skip_nested_handling_41;
        nested_frame_exit_41:;

        goto try_except_handler_126;
        skip_nested_handling_41:;
        {
            nuitka_bool tmp_condition_result_252;
            PyObject *tmp_cmp_expr_left_42;
            PyObject *tmp_cmp_expr_right_42;
            CHECK_OBJECT(tmp_class_creation_42__bases);
            tmp_cmp_expr_left_42 = tmp_class_creation_42__bases;
            CHECK_OBJECT(tmp_class_creation_42__bases_orig);
            tmp_cmp_expr_right_42 = tmp_class_creation_42__bases_orig;
            tmp_condition_result_252 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_42, tmp_cmp_expr_right_42);
            if (tmp_condition_result_252 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 389;

                goto try_except_handler_126;
            }
            if (tmp_condition_result_252 == NUITKA_BOOL_TRUE) {
                goto branch_yes_168;
            } else {
                goto branch_no_168;
            }
            assert(tmp_condition_result_252 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_168:;
        CHECK_OBJECT(tmp_class_creation_42__bases_orig);
        tmp_dictset_value = tmp_class_creation_42__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__42_WaiterConfigError_389, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 389;

            goto try_except_handler_126;
        }
        branch_no_168:;
        {
            PyObject *tmp_assign_source_342;
            PyObject *tmp_called_value_84;
            PyObject *tmp_args_value_84;
            PyObject *tmp_tuple_element_167;
            PyObject *tmp_kwargs_value_84;
            CHECK_OBJECT(tmp_class_creation_42__metaclass);
            tmp_called_value_84 = tmp_class_creation_42__metaclass;
            tmp_tuple_element_167 = mod_consts[171];
            tmp_args_value_84 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_84, 0, tmp_tuple_element_167);
            CHECK_OBJECT(tmp_class_creation_42__bases);
            tmp_tuple_element_167 = tmp_class_creation_42__bases;
            PyTuple_SET_ITEM0(tmp_args_value_84, 1, tmp_tuple_element_167);
            tmp_tuple_element_167 = locals_botocore$exceptions$$$class__42_WaiterConfigError_389;
            PyTuple_SET_ITEM0(tmp_args_value_84, 2, tmp_tuple_element_167);
            CHECK_OBJECT(tmp_class_creation_42__class_decl_dict);
            tmp_kwargs_value_84 = tmp_class_creation_42__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 389;
            tmp_assign_source_342 = CALL_FUNCTION(tmp_called_value_84, tmp_args_value_84, tmp_kwargs_value_84);
            Py_DECREF(tmp_args_value_84);
            if (tmp_assign_source_342 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 389;

                goto try_except_handler_126;
            }
            assert(outline_41_var___class__ == NULL);
            outline_41_var___class__ = tmp_assign_source_342;
        }
        CHECK_OBJECT(outline_41_var___class__);
        tmp_assign_source_341 = outline_41_var___class__;
        Py_INCREF(tmp_assign_source_341);
        goto try_return_handler_126;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_126:;
        Py_DECREF(locals_botocore$exceptions$$$class__42_WaiterConfigError_389);
        locals_botocore$exceptions$$$class__42_WaiterConfigError_389 = NULL;
        goto try_return_handler_125;
        // Exception handler code:
        try_except_handler_126:;
        exception_keeper_type_124 = exception_type;
        exception_keeper_value_124 = exception_value;
        exception_keeper_tb_124 = exception_tb;
        exception_keeper_lineno_124 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__42_WaiterConfigError_389);
        locals_botocore$exceptions$$$class__42_WaiterConfigError_389 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_124;
        exception_value = exception_keeper_value_124;
        exception_tb = exception_keeper_tb_124;
        exception_lineno = exception_keeper_lineno_124;

        goto try_except_handler_125;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_125:;
        CHECK_OBJECT(outline_41_var___class__);
        Py_DECREF(outline_41_var___class__);
        outline_41_var___class__ = NULL;
        goto outline_result_42;
        // Exception handler code:
        try_except_handler_125:;
        exception_keeper_type_125 = exception_type;
        exception_keeper_value_125 = exception_value;
        exception_keeper_tb_125 = exception_tb;
        exception_keeper_lineno_125 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_125;
        exception_value = exception_keeper_value_125;
        exception_tb = exception_keeper_tb_125;
        exception_lineno = exception_keeper_lineno_125;

        goto outline_exception_42;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_42:;
        exception_lineno = 389;
        goto try_except_handler_124;
        outline_result_42:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[171], tmp_assign_source_341);
    }
    goto try_end_42;
    // Exception handler code:
    try_except_handler_124:;
    exception_keeper_type_126 = exception_type;
    exception_keeper_value_126 = exception_value;
    exception_keeper_tb_126 = exception_tb;
    exception_keeper_lineno_126 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_42__bases_orig);
    tmp_class_creation_42__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_42__bases);
    tmp_class_creation_42__bases = NULL;
    Py_XDECREF(tmp_class_creation_42__class_decl_dict);
    tmp_class_creation_42__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_42__metaclass);
    tmp_class_creation_42__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_42__prepared);
    tmp_class_creation_42__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_126;
    exception_value = exception_keeper_value_126;
    exception_tb = exception_keeper_tb_126;
    exception_lineno = exception_keeper_lineno_126;

    goto frame_exception_exit_1;
    // End of try:
    try_end_42:;
    CHECK_OBJECT(tmp_class_creation_42__bases_orig);
    Py_DECREF(tmp_class_creation_42__bases_orig);
    tmp_class_creation_42__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_42__bases);
    Py_DECREF(tmp_class_creation_42__bases);
    tmp_class_creation_42__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_42__class_decl_dict);
    Py_DECREF(tmp_class_creation_42__class_decl_dict);
    tmp_class_creation_42__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_42__metaclass);
    Py_DECREF(tmp_class_creation_42__metaclass);
    tmp_class_creation_42__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_42__prepared);
    Py_DECREF(tmp_class_creation_42__prepared);
    tmp_class_creation_42__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_343;
        PyObject *tmp_tuple_element_168;
        tmp_tuple_element_168 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_168 == NULL)) {
            tmp_tuple_element_168 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_168 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 394;

            goto try_except_handler_127;
        }
        tmp_assign_source_343 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_343, 0, tmp_tuple_element_168);
        assert(tmp_class_creation_43__bases_orig == NULL);
        tmp_class_creation_43__bases_orig = tmp_assign_source_343;
    }
    {
        PyObject *tmp_assign_source_344;
        PyObject *tmp_dircall_arg1_43;
        CHECK_OBJECT(tmp_class_creation_43__bases_orig);
        tmp_dircall_arg1_43 = tmp_class_creation_43__bases_orig;
        Py_INCREF(tmp_dircall_arg1_43);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_43};
            tmp_assign_source_344 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_344 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 394;

            goto try_except_handler_127;
        }
        assert(tmp_class_creation_43__bases == NULL);
        tmp_class_creation_43__bases = tmp_assign_source_344;
    }
    {
        PyObject *tmp_assign_source_345;
        tmp_assign_source_345 = PyDict_New();
        assert(tmp_class_creation_43__class_decl_dict == NULL);
        tmp_class_creation_43__class_decl_dict = tmp_assign_source_345;
    }
    {
        PyObject *tmp_assign_source_346;
        PyObject *tmp_metaclass_value_43;
        bool tmp_condition_result_253;
        PyObject *tmp_key_value_127;
        PyObject *tmp_dict_arg_value_127;
        PyObject *tmp_dict_arg_value_128;
        PyObject *tmp_key_value_128;
        nuitka_bool tmp_condition_result_254;
        int tmp_truth_name_43;
        PyObject *tmp_type_arg_85;
        PyObject *tmp_expression_value_221;
        PyObject *tmp_subscript_value_43;
        PyObject *tmp_bases_value_43;
        tmp_key_value_127 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_43__class_decl_dict);
        tmp_dict_arg_value_127 = tmp_class_creation_43__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_127, tmp_key_value_127);
        assert(!(tmp_res == -1));
        tmp_condition_result_253 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_253 != false) {
            goto condexpr_true_85;
        } else {
            goto condexpr_false_85;
        }
        condexpr_true_85:;
        CHECK_OBJECT(tmp_class_creation_43__class_decl_dict);
        tmp_dict_arg_value_128 = tmp_class_creation_43__class_decl_dict;
        tmp_key_value_128 = mod_consts[43];
        tmp_metaclass_value_43 = DICT_GET_ITEM0(tmp_dict_arg_value_128, tmp_key_value_128);
        if (tmp_metaclass_value_43 == NULL) {
            tmp_metaclass_value_43 = Py_None;
        }
        assert(!(tmp_metaclass_value_43 == NULL));
        Py_INCREF(tmp_metaclass_value_43);
        goto condexpr_end_85;
        condexpr_false_85:;
        CHECK_OBJECT(tmp_class_creation_43__bases);
        tmp_truth_name_43 = CHECK_IF_TRUE(tmp_class_creation_43__bases);
        if (tmp_truth_name_43 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 394;

            goto try_except_handler_127;
        }
        tmp_condition_result_254 = tmp_truth_name_43 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_254 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_86;
        } else {
            goto condexpr_false_86;
        }
        condexpr_true_86:;
        CHECK_OBJECT(tmp_class_creation_43__bases);
        tmp_expression_value_221 = tmp_class_creation_43__bases;
        tmp_subscript_value_43 = mod_consts[36];
        tmp_type_arg_85 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_221, tmp_subscript_value_43, 0);
        if (tmp_type_arg_85 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 394;

            goto try_except_handler_127;
        }
        tmp_metaclass_value_43 = BUILTIN_TYPE1(tmp_type_arg_85);
        Py_DECREF(tmp_type_arg_85);
        if (tmp_metaclass_value_43 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 394;

            goto try_except_handler_127;
        }
        goto condexpr_end_86;
        condexpr_false_86:;
        tmp_metaclass_value_43 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_43);
        condexpr_end_86:;
        condexpr_end_85:;
        CHECK_OBJECT(tmp_class_creation_43__bases);
        tmp_bases_value_43 = tmp_class_creation_43__bases;
        tmp_assign_source_346 = SELECT_METACLASS(tmp_metaclass_value_43, tmp_bases_value_43);
        Py_DECREF(tmp_metaclass_value_43);
        if (tmp_assign_source_346 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 394;

            goto try_except_handler_127;
        }
        assert(tmp_class_creation_43__metaclass == NULL);
        tmp_class_creation_43__metaclass = tmp_assign_source_346;
    }
    {
        bool tmp_condition_result_255;
        PyObject *tmp_key_value_129;
        PyObject *tmp_dict_arg_value_129;
        tmp_key_value_129 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_43__class_decl_dict);
        tmp_dict_arg_value_129 = tmp_class_creation_43__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_129, tmp_key_value_129);
        assert(!(tmp_res == -1));
        tmp_condition_result_255 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_255 != false) {
            goto branch_yes_169;
        } else {
            goto branch_no_169;
        }
    }
    branch_yes_169:;
    CHECK_OBJECT(tmp_class_creation_43__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_43__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 394;

        goto try_except_handler_127;
    }
    branch_no_169:;
    {
        nuitka_bool tmp_condition_result_256;
        PyObject *tmp_expression_value_222;
        CHECK_OBJECT(tmp_class_creation_43__metaclass);
        tmp_expression_value_222 = tmp_class_creation_43__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_222, mod_consts[44]);
        tmp_condition_result_256 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_256 == NUITKA_BOOL_TRUE) {
            goto branch_yes_170;
        } else {
            goto branch_no_170;
        }
    }
    branch_yes_170:;
    {
        PyObject *tmp_assign_source_347;
        PyObject *tmp_called_value_85;
        PyObject *tmp_expression_value_223;
        PyObject *tmp_args_value_85;
        PyObject *tmp_tuple_element_169;
        PyObject *tmp_kwargs_value_85;
        CHECK_OBJECT(tmp_class_creation_43__metaclass);
        tmp_expression_value_223 = tmp_class_creation_43__metaclass;
        tmp_called_value_85 = LOOKUP_ATTRIBUTE(tmp_expression_value_223, mod_consts[44]);
        if (tmp_called_value_85 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 394;

            goto try_except_handler_127;
        }
        tmp_tuple_element_169 = mod_consts[174];
        tmp_args_value_85 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_85, 0, tmp_tuple_element_169);
        CHECK_OBJECT(tmp_class_creation_43__bases);
        tmp_tuple_element_169 = tmp_class_creation_43__bases;
        PyTuple_SET_ITEM0(tmp_args_value_85, 1, tmp_tuple_element_169);
        CHECK_OBJECT(tmp_class_creation_43__class_decl_dict);
        tmp_kwargs_value_85 = tmp_class_creation_43__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 394;
        tmp_assign_source_347 = CALL_FUNCTION(tmp_called_value_85, tmp_args_value_85, tmp_kwargs_value_85);
        Py_DECREF(tmp_called_value_85);
        Py_DECREF(tmp_args_value_85);
        if (tmp_assign_source_347 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 394;

            goto try_except_handler_127;
        }
        assert(tmp_class_creation_43__prepared == NULL);
        tmp_class_creation_43__prepared = tmp_assign_source_347;
    }
    {
        bool tmp_condition_result_257;
        PyObject *tmp_operand_value_43;
        PyObject *tmp_expression_value_224;
        CHECK_OBJECT(tmp_class_creation_43__prepared);
        tmp_expression_value_224 = tmp_class_creation_43__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_224, mod_consts[46]);
        tmp_operand_value_43 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_43);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 394;

            goto try_except_handler_127;
        }
        tmp_condition_result_257 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_257 != false) {
            goto branch_yes_171;
        } else {
            goto branch_no_171;
        }
    }
    branch_yes_171:;
    {
        PyObject *tmp_raise_type_43;
        PyObject *tmp_raise_value_43;
        PyObject *tmp_left_value_43;
        PyObject *tmp_right_value_43;
        PyObject *tmp_tuple_element_170;
        PyObject *tmp_getattr_target_43;
        PyObject *tmp_getattr_attr_43;
        PyObject *tmp_getattr_default_43;
        tmp_raise_type_43 = PyExc_TypeError;
        tmp_left_value_43 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_43__metaclass);
        tmp_getattr_target_43 = tmp_class_creation_43__metaclass;
        tmp_getattr_attr_43 = mod_consts[48];
        tmp_getattr_default_43 = mod_consts[49];
        tmp_tuple_element_170 = BUILTIN_GETATTR(tmp_getattr_target_43, tmp_getattr_attr_43, tmp_getattr_default_43);
        if (tmp_tuple_element_170 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 394;

            goto try_except_handler_127;
        }
        tmp_right_value_43 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_225;
            PyObject *tmp_type_arg_86;
            PyTuple_SET_ITEM(tmp_right_value_43, 0, tmp_tuple_element_170);
            CHECK_OBJECT(tmp_class_creation_43__prepared);
            tmp_type_arg_86 = tmp_class_creation_43__prepared;
            tmp_expression_value_225 = BUILTIN_TYPE1(tmp_type_arg_86);
            assert(!(tmp_expression_value_225 == NULL));
            tmp_tuple_element_170 = LOOKUP_ATTRIBUTE(tmp_expression_value_225, mod_consts[48]);
            Py_DECREF(tmp_expression_value_225);
            if (tmp_tuple_element_170 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 394;

                goto tuple_build_exception_47;
            }
            PyTuple_SET_ITEM(tmp_right_value_43, 1, tmp_tuple_element_170);
        }
        goto tuple_build_noexception_47;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_47:;
        Py_DECREF(tmp_right_value_43);
        goto try_except_handler_127;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_47:;
        tmp_raise_value_43 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_43, tmp_right_value_43);
        Py_DECREF(tmp_right_value_43);
        if (tmp_raise_value_43 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 394;

            goto try_except_handler_127;
        }
        exception_type = tmp_raise_type_43;
        Py_INCREF(tmp_raise_type_43);
        exception_value = tmp_raise_value_43;
        exception_lineno = 394;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_127;
    }
    branch_no_171:;
    goto branch_end_170;
    branch_no_170:;
    {
        PyObject *tmp_assign_source_348;
        tmp_assign_source_348 = PyDict_New();
        assert(tmp_class_creation_43__prepared == NULL);
        tmp_class_creation_43__prepared = tmp_assign_source_348;
    }
    branch_end_170:;
    {
        PyObject *tmp_assign_source_349;
        {
            PyObject *tmp_set_locals_43;
            CHECK_OBJECT(tmp_class_creation_43__prepared);
            tmp_set_locals_43 = tmp_class_creation_43__prepared;
            locals_botocore$exceptions$$$class__43_UnknownClientMethodError_394 = tmp_set_locals_43;
            Py_INCREF(tmp_set_locals_43);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__43_UnknownClientMethodError_394, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 394;

            goto try_except_handler_129;
        }
        tmp_dictset_value = mod_consts[175];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__43_UnknownClientMethodError_394, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 394;

            goto try_except_handler_129;
        }
        tmp_dictset_value = mod_consts[174];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__43_UnknownClientMethodError_394, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 394;

            goto try_except_handler_129;
        }
        if (isFrameUnusable(cache_frame_cc3dfd1c0604e11e3e45bc93ea9997cf_43)) {
            Py_XDECREF(cache_frame_cc3dfd1c0604e11e3e45bc93ea9997cf_43);

#if _DEBUG_REFCOUNTS
            if (cache_frame_cc3dfd1c0604e11e3e45bc93ea9997cf_43 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_cc3dfd1c0604e11e3e45bc93ea9997cf_43 = MAKE_FUNCTION_FRAME(codeobj_cc3dfd1c0604e11e3e45bc93ea9997cf, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_cc3dfd1c0604e11e3e45bc93ea9997cf_43->m_type_description == NULL);
        frame_cc3dfd1c0604e11e3e45bc93ea9997cf_43 = cache_frame_cc3dfd1c0604e11e3e45bc93ea9997cf_43;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_cc3dfd1c0604e11e3e45bc93ea9997cf_43);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_cc3dfd1c0604e11e3e45bc93ea9997cf_43) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[176];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__43_UnknownClientMethodError_394, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 396;
            type_description_2 = "o";
            goto frame_exception_exit_43;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_cc3dfd1c0604e11e3e45bc93ea9997cf_43);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_42;

        frame_exception_exit_43:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_cc3dfd1c0604e11e3e45bc93ea9997cf_43);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_cc3dfd1c0604e11e3e45bc93ea9997cf_43, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_cc3dfd1c0604e11e3e45bc93ea9997cf_43->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_cc3dfd1c0604e11e3e45bc93ea9997cf_43, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_cc3dfd1c0604e11e3e45bc93ea9997cf_43,
            type_description_2,
            outline_42_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_cc3dfd1c0604e11e3e45bc93ea9997cf_43 == cache_frame_cc3dfd1c0604e11e3e45bc93ea9997cf_43) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_cc3dfd1c0604e11e3e45bc93ea9997cf_43);
            cache_frame_cc3dfd1c0604e11e3e45bc93ea9997cf_43 = NULL;
        }

        assertFrameObject(frame_cc3dfd1c0604e11e3e45bc93ea9997cf_43);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_42;

        frame_no_exception_42:;
        goto skip_nested_handling_42;
        nested_frame_exit_42:;

        goto try_except_handler_129;
        skip_nested_handling_42:;
        {
            nuitka_bool tmp_condition_result_258;
            PyObject *tmp_cmp_expr_left_43;
            PyObject *tmp_cmp_expr_right_43;
            CHECK_OBJECT(tmp_class_creation_43__bases);
            tmp_cmp_expr_left_43 = tmp_class_creation_43__bases;
            CHECK_OBJECT(tmp_class_creation_43__bases_orig);
            tmp_cmp_expr_right_43 = tmp_class_creation_43__bases_orig;
            tmp_condition_result_258 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_43, tmp_cmp_expr_right_43);
            if (tmp_condition_result_258 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 394;

                goto try_except_handler_129;
            }
            if (tmp_condition_result_258 == NUITKA_BOOL_TRUE) {
                goto branch_yes_172;
            } else {
                goto branch_no_172;
            }
            assert(tmp_condition_result_258 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_172:;
        CHECK_OBJECT(tmp_class_creation_43__bases_orig);
        tmp_dictset_value = tmp_class_creation_43__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__43_UnknownClientMethodError_394, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 394;

            goto try_except_handler_129;
        }
        branch_no_172:;
        {
            PyObject *tmp_assign_source_350;
            PyObject *tmp_called_value_86;
            PyObject *tmp_args_value_86;
            PyObject *tmp_tuple_element_171;
            PyObject *tmp_kwargs_value_86;
            CHECK_OBJECT(tmp_class_creation_43__metaclass);
            tmp_called_value_86 = tmp_class_creation_43__metaclass;
            tmp_tuple_element_171 = mod_consts[174];
            tmp_args_value_86 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_86, 0, tmp_tuple_element_171);
            CHECK_OBJECT(tmp_class_creation_43__bases);
            tmp_tuple_element_171 = tmp_class_creation_43__bases;
            PyTuple_SET_ITEM0(tmp_args_value_86, 1, tmp_tuple_element_171);
            tmp_tuple_element_171 = locals_botocore$exceptions$$$class__43_UnknownClientMethodError_394;
            PyTuple_SET_ITEM0(tmp_args_value_86, 2, tmp_tuple_element_171);
            CHECK_OBJECT(tmp_class_creation_43__class_decl_dict);
            tmp_kwargs_value_86 = tmp_class_creation_43__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 394;
            tmp_assign_source_350 = CALL_FUNCTION(tmp_called_value_86, tmp_args_value_86, tmp_kwargs_value_86);
            Py_DECREF(tmp_args_value_86);
            if (tmp_assign_source_350 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 394;

                goto try_except_handler_129;
            }
            assert(outline_42_var___class__ == NULL);
            outline_42_var___class__ = tmp_assign_source_350;
        }
        CHECK_OBJECT(outline_42_var___class__);
        tmp_assign_source_349 = outline_42_var___class__;
        Py_INCREF(tmp_assign_source_349);
        goto try_return_handler_129;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_129:;
        Py_DECREF(locals_botocore$exceptions$$$class__43_UnknownClientMethodError_394);
        locals_botocore$exceptions$$$class__43_UnknownClientMethodError_394 = NULL;
        goto try_return_handler_128;
        // Exception handler code:
        try_except_handler_129:;
        exception_keeper_type_127 = exception_type;
        exception_keeper_value_127 = exception_value;
        exception_keeper_tb_127 = exception_tb;
        exception_keeper_lineno_127 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__43_UnknownClientMethodError_394);
        locals_botocore$exceptions$$$class__43_UnknownClientMethodError_394 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_127;
        exception_value = exception_keeper_value_127;
        exception_tb = exception_keeper_tb_127;
        exception_lineno = exception_keeper_lineno_127;

        goto try_except_handler_128;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_128:;
        CHECK_OBJECT(outline_42_var___class__);
        Py_DECREF(outline_42_var___class__);
        outline_42_var___class__ = NULL;
        goto outline_result_43;
        // Exception handler code:
        try_except_handler_128:;
        exception_keeper_type_128 = exception_type;
        exception_keeper_value_128 = exception_value;
        exception_keeper_tb_128 = exception_tb;
        exception_keeper_lineno_128 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_128;
        exception_value = exception_keeper_value_128;
        exception_tb = exception_keeper_tb_128;
        exception_lineno = exception_keeper_lineno_128;

        goto outline_exception_43;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_43:;
        exception_lineno = 394;
        goto try_except_handler_127;
        outline_result_43:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[174], tmp_assign_source_349);
    }
    goto try_end_43;
    // Exception handler code:
    try_except_handler_127:;
    exception_keeper_type_129 = exception_type;
    exception_keeper_value_129 = exception_value;
    exception_keeper_tb_129 = exception_tb;
    exception_keeper_lineno_129 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_43__bases_orig);
    tmp_class_creation_43__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_43__bases);
    tmp_class_creation_43__bases = NULL;
    Py_XDECREF(tmp_class_creation_43__class_decl_dict);
    tmp_class_creation_43__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_43__metaclass);
    tmp_class_creation_43__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_43__prepared);
    tmp_class_creation_43__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_129;
    exception_value = exception_keeper_value_129;
    exception_tb = exception_keeper_tb_129;
    exception_lineno = exception_keeper_lineno_129;

    goto frame_exception_exit_1;
    // End of try:
    try_end_43:;
    CHECK_OBJECT(tmp_class_creation_43__bases_orig);
    Py_DECREF(tmp_class_creation_43__bases_orig);
    tmp_class_creation_43__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_43__bases);
    Py_DECREF(tmp_class_creation_43__bases);
    tmp_class_creation_43__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_43__class_decl_dict);
    Py_DECREF(tmp_class_creation_43__class_decl_dict);
    tmp_class_creation_43__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_43__metaclass);
    Py_DECREF(tmp_class_creation_43__metaclass);
    tmp_class_creation_43__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_43__prepared);
    Py_DECREF(tmp_class_creation_43__prepared);
    tmp_class_creation_43__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_351;
        PyObject *tmp_tuple_element_172;
        tmp_tuple_element_172 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_172 == NULL)) {
            tmp_tuple_element_172 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_172 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 399;

            goto try_except_handler_130;
        }
        tmp_assign_source_351 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_351, 0, tmp_tuple_element_172);
        assert(tmp_class_creation_44__bases_orig == NULL);
        tmp_class_creation_44__bases_orig = tmp_assign_source_351;
    }
    {
        PyObject *tmp_assign_source_352;
        PyObject *tmp_dircall_arg1_44;
        CHECK_OBJECT(tmp_class_creation_44__bases_orig);
        tmp_dircall_arg1_44 = tmp_class_creation_44__bases_orig;
        Py_INCREF(tmp_dircall_arg1_44);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_44};
            tmp_assign_source_352 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_352 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 399;

            goto try_except_handler_130;
        }
        assert(tmp_class_creation_44__bases == NULL);
        tmp_class_creation_44__bases = tmp_assign_source_352;
    }
    {
        PyObject *tmp_assign_source_353;
        tmp_assign_source_353 = PyDict_New();
        assert(tmp_class_creation_44__class_decl_dict == NULL);
        tmp_class_creation_44__class_decl_dict = tmp_assign_source_353;
    }
    {
        PyObject *tmp_assign_source_354;
        PyObject *tmp_metaclass_value_44;
        bool tmp_condition_result_259;
        PyObject *tmp_key_value_130;
        PyObject *tmp_dict_arg_value_130;
        PyObject *tmp_dict_arg_value_131;
        PyObject *tmp_key_value_131;
        nuitka_bool tmp_condition_result_260;
        int tmp_truth_name_44;
        PyObject *tmp_type_arg_87;
        PyObject *tmp_expression_value_226;
        PyObject *tmp_subscript_value_44;
        PyObject *tmp_bases_value_44;
        tmp_key_value_130 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_44__class_decl_dict);
        tmp_dict_arg_value_130 = tmp_class_creation_44__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_130, tmp_key_value_130);
        assert(!(tmp_res == -1));
        tmp_condition_result_259 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_259 != false) {
            goto condexpr_true_87;
        } else {
            goto condexpr_false_87;
        }
        condexpr_true_87:;
        CHECK_OBJECT(tmp_class_creation_44__class_decl_dict);
        tmp_dict_arg_value_131 = tmp_class_creation_44__class_decl_dict;
        tmp_key_value_131 = mod_consts[43];
        tmp_metaclass_value_44 = DICT_GET_ITEM0(tmp_dict_arg_value_131, tmp_key_value_131);
        if (tmp_metaclass_value_44 == NULL) {
            tmp_metaclass_value_44 = Py_None;
        }
        assert(!(tmp_metaclass_value_44 == NULL));
        Py_INCREF(tmp_metaclass_value_44);
        goto condexpr_end_87;
        condexpr_false_87:;
        CHECK_OBJECT(tmp_class_creation_44__bases);
        tmp_truth_name_44 = CHECK_IF_TRUE(tmp_class_creation_44__bases);
        if (tmp_truth_name_44 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 399;

            goto try_except_handler_130;
        }
        tmp_condition_result_260 = tmp_truth_name_44 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_260 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_88;
        } else {
            goto condexpr_false_88;
        }
        condexpr_true_88:;
        CHECK_OBJECT(tmp_class_creation_44__bases);
        tmp_expression_value_226 = tmp_class_creation_44__bases;
        tmp_subscript_value_44 = mod_consts[36];
        tmp_type_arg_87 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_226, tmp_subscript_value_44, 0);
        if (tmp_type_arg_87 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 399;

            goto try_except_handler_130;
        }
        tmp_metaclass_value_44 = BUILTIN_TYPE1(tmp_type_arg_87);
        Py_DECREF(tmp_type_arg_87);
        if (tmp_metaclass_value_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 399;

            goto try_except_handler_130;
        }
        goto condexpr_end_88;
        condexpr_false_88:;
        tmp_metaclass_value_44 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_44);
        condexpr_end_88:;
        condexpr_end_87:;
        CHECK_OBJECT(tmp_class_creation_44__bases);
        tmp_bases_value_44 = tmp_class_creation_44__bases;
        tmp_assign_source_354 = SELECT_METACLASS(tmp_metaclass_value_44, tmp_bases_value_44);
        Py_DECREF(tmp_metaclass_value_44);
        if (tmp_assign_source_354 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 399;

            goto try_except_handler_130;
        }
        assert(tmp_class_creation_44__metaclass == NULL);
        tmp_class_creation_44__metaclass = tmp_assign_source_354;
    }
    {
        bool tmp_condition_result_261;
        PyObject *tmp_key_value_132;
        PyObject *tmp_dict_arg_value_132;
        tmp_key_value_132 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_44__class_decl_dict);
        tmp_dict_arg_value_132 = tmp_class_creation_44__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_132, tmp_key_value_132);
        assert(!(tmp_res == -1));
        tmp_condition_result_261 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_261 != false) {
            goto branch_yes_173;
        } else {
            goto branch_no_173;
        }
    }
    branch_yes_173:;
    CHECK_OBJECT(tmp_class_creation_44__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_44__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 399;

        goto try_except_handler_130;
    }
    branch_no_173:;
    {
        nuitka_bool tmp_condition_result_262;
        PyObject *tmp_expression_value_227;
        CHECK_OBJECT(tmp_class_creation_44__metaclass);
        tmp_expression_value_227 = tmp_class_creation_44__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_227, mod_consts[44]);
        tmp_condition_result_262 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_262 == NUITKA_BOOL_TRUE) {
            goto branch_yes_174;
        } else {
            goto branch_no_174;
        }
    }
    branch_yes_174:;
    {
        PyObject *tmp_assign_source_355;
        PyObject *tmp_called_value_87;
        PyObject *tmp_expression_value_228;
        PyObject *tmp_args_value_87;
        PyObject *tmp_tuple_element_173;
        PyObject *tmp_kwargs_value_87;
        CHECK_OBJECT(tmp_class_creation_44__metaclass);
        tmp_expression_value_228 = tmp_class_creation_44__metaclass;
        tmp_called_value_87 = LOOKUP_ATTRIBUTE(tmp_expression_value_228, mod_consts[44]);
        if (tmp_called_value_87 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 399;

            goto try_except_handler_130;
        }
        tmp_tuple_element_173 = mod_consts[177];
        tmp_args_value_87 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_87, 0, tmp_tuple_element_173);
        CHECK_OBJECT(tmp_class_creation_44__bases);
        tmp_tuple_element_173 = tmp_class_creation_44__bases;
        PyTuple_SET_ITEM0(tmp_args_value_87, 1, tmp_tuple_element_173);
        CHECK_OBJECT(tmp_class_creation_44__class_decl_dict);
        tmp_kwargs_value_87 = tmp_class_creation_44__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 399;
        tmp_assign_source_355 = CALL_FUNCTION(tmp_called_value_87, tmp_args_value_87, tmp_kwargs_value_87);
        Py_DECREF(tmp_called_value_87);
        Py_DECREF(tmp_args_value_87);
        if (tmp_assign_source_355 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 399;

            goto try_except_handler_130;
        }
        assert(tmp_class_creation_44__prepared == NULL);
        tmp_class_creation_44__prepared = tmp_assign_source_355;
    }
    {
        bool tmp_condition_result_263;
        PyObject *tmp_operand_value_44;
        PyObject *tmp_expression_value_229;
        CHECK_OBJECT(tmp_class_creation_44__prepared);
        tmp_expression_value_229 = tmp_class_creation_44__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_229, mod_consts[46]);
        tmp_operand_value_44 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_44);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 399;

            goto try_except_handler_130;
        }
        tmp_condition_result_263 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_263 != false) {
            goto branch_yes_175;
        } else {
            goto branch_no_175;
        }
    }
    branch_yes_175:;
    {
        PyObject *tmp_raise_type_44;
        PyObject *tmp_raise_value_44;
        PyObject *tmp_left_value_44;
        PyObject *tmp_right_value_44;
        PyObject *tmp_tuple_element_174;
        PyObject *tmp_getattr_target_44;
        PyObject *tmp_getattr_attr_44;
        PyObject *tmp_getattr_default_44;
        tmp_raise_type_44 = PyExc_TypeError;
        tmp_left_value_44 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_44__metaclass);
        tmp_getattr_target_44 = tmp_class_creation_44__metaclass;
        tmp_getattr_attr_44 = mod_consts[48];
        tmp_getattr_default_44 = mod_consts[49];
        tmp_tuple_element_174 = BUILTIN_GETATTR(tmp_getattr_target_44, tmp_getattr_attr_44, tmp_getattr_default_44);
        if (tmp_tuple_element_174 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 399;

            goto try_except_handler_130;
        }
        tmp_right_value_44 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_230;
            PyObject *tmp_type_arg_88;
            PyTuple_SET_ITEM(tmp_right_value_44, 0, tmp_tuple_element_174);
            CHECK_OBJECT(tmp_class_creation_44__prepared);
            tmp_type_arg_88 = tmp_class_creation_44__prepared;
            tmp_expression_value_230 = BUILTIN_TYPE1(tmp_type_arg_88);
            assert(!(tmp_expression_value_230 == NULL));
            tmp_tuple_element_174 = LOOKUP_ATTRIBUTE(tmp_expression_value_230, mod_consts[48]);
            Py_DECREF(tmp_expression_value_230);
            if (tmp_tuple_element_174 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 399;

                goto tuple_build_exception_48;
            }
            PyTuple_SET_ITEM(tmp_right_value_44, 1, tmp_tuple_element_174);
        }
        goto tuple_build_noexception_48;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_48:;
        Py_DECREF(tmp_right_value_44);
        goto try_except_handler_130;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_48:;
        tmp_raise_value_44 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_44, tmp_right_value_44);
        Py_DECREF(tmp_right_value_44);
        if (tmp_raise_value_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 399;

            goto try_except_handler_130;
        }
        exception_type = tmp_raise_type_44;
        Py_INCREF(tmp_raise_type_44);
        exception_value = tmp_raise_value_44;
        exception_lineno = 399;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_130;
    }
    branch_no_175:;
    goto branch_end_174;
    branch_no_174:;
    {
        PyObject *tmp_assign_source_356;
        tmp_assign_source_356 = PyDict_New();
        assert(tmp_class_creation_44__prepared == NULL);
        tmp_class_creation_44__prepared = tmp_assign_source_356;
    }
    branch_end_174:;
    {
        PyObject *tmp_assign_source_357;
        {
            PyObject *tmp_set_locals_44;
            CHECK_OBJECT(tmp_class_creation_44__prepared);
            tmp_set_locals_44 = tmp_class_creation_44__prepared;
            locals_botocore$exceptions$$$class__44_UnsupportedSignatureVersionError_399 = tmp_set_locals_44;
            Py_INCREF(tmp_set_locals_44);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__44_UnsupportedSignatureVersionError_399, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 399;

            goto try_except_handler_132;
        }
        tmp_dictset_value = mod_consts[178];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__44_UnsupportedSignatureVersionError_399, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 399;

            goto try_except_handler_132;
        }
        tmp_dictset_value = mod_consts[177];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__44_UnsupportedSignatureVersionError_399, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 399;

            goto try_except_handler_132;
        }
        if (isFrameUnusable(cache_frame_bae2d5ca9bd4d3c2347f71ec402708ba_44)) {
            Py_XDECREF(cache_frame_bae2d5ca9bd4d3c2347f71ec402708ba_44);

#if _DEBUG_REFCOUNTS
            if (cache_frame_bae2d5ca9bd4d3c2347f71ec402708ba_44 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_bae2d5ca9bd4d3c2347f71ec402708ba_44 = MAKE_FUNCTION_FRAME(codeobj_bae2d5ca9bd4d3c2347f71ec402708ba, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_bae2d5ca9bd4d3c2347f71ec402708ba_44->m_type_description == NULL);
        frame_bae2d5ca9bd4d3c2347f71ec402708ba_44 = cache_frame_bae2d5ca9bd4d3c2347f71ec402708ba_44;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_bae2d5ca9bd4d3c2347f71ec402708ba_44);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_bae2d5ca9bd4d3c2347f71ec402708ba_44) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[179];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__44_UnsupportedSignatureVersionError_399, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 401;
            type_description_2 = "o";
            goto frame_exception_exit_44;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_bae2d5ca9bd4d3c2347f71ec402708ba_44);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_43;

        frame_exception_exit_44:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_bae2d5ca9bd4d3c2347f71ec402708ba_44);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_bae2d5ca9bd4d3c2347f71ec402708ba_44, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_bae2d5ca9bd4d3c2347f71ec402708ba_44->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_bae2d5ca9bd4d3c2347f71ec402708ba_44, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_bae2d5ca9bd4d3c2347f71ec402708ba_44,
            type_description_2,
            outline_43_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_bae2d5ca9bd4d3c2347f71ec402708ba_44 == cache_frame_bae2d5ca9bd4d3c2347f71ec402708ba_44) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_bae2d5ca9bd4d3c2347f71ec402708ba_44);
            cache_frame_bae2d5ca9bd4d3c2347f71ec402708ba_44 = NULL;
        }

        assertFrameObject(frame_bae2d5ca9bd4d3c2347f71ec402708ba_44);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_43;

        frame_no_exception_43:;
        goto skip_nested_handling_43;
        nested_frame_exit_43:;

        goto try_except_handler_132;
        skip_nested_handling_43:;
        {
            nuitka_bool tmp_condition_result_264;
            PyObject *tmp_cmp_expr_left_44;
            PyObject *tmp_cmp_expr_right_44;
            CHECK_OBJECT(tmp_class_creation_44__bases);
            tmp_cmp_expr_left_44 = tmp_class_creation_44__bases;
            CHECK_OBJECT(tmp_class_creation_44__bases_orig);
            tmp_cmp_expr_right_44 = tmp_class_creation_44__bases_orig;
            tmp_condition_result_264 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_44, tmp_cmp_expr_right_44);
            if (tmp_condition_result_264 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 399;

                goto try_except_handler_132;
            }
            if (tmp_condition_result_264 == NUITKA_BOOL_TRUE) {
                goto branch_yes_176;
            } else {
                goto branch_no_176;
            }
            assert(tmp_condition_result_264 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_176:;
        CHECK_OBJECT(tmp_class_creation_44__bases_orig);
        tmp_dictset_value = tmp_class_creation_44__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__44_UnsupportedSignatureVersionError_399, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 399;

            goto try_except_handler_132;
        }
        branch_no_176:;
        {
            PyObject *tmp_assign_source_358;
            PyObject *tmp_called_value_88;
            PyObject *tmp_args_value_88;
            PyObject *tmp_tuple_element_175;
            PyObject *tmp_kwargs_value_88;
            CHECK_OBJECT(tmp_class_creation_44__metaclass);
            tmp_called_value_88 = tmp_class_creation_44__metaclass;
            tmp_tuple_element_175 = mod_consts[177];
            tmp_args_value_88 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_88, 0, tmp_tuple_element_175);
            CHECK_OBJECT(tmp_class_creation_44__bases);
            tmp_tuple_element_175 = tmp_class_creation_44__bases;
            PyTuple_SET_ITEM0(tmp_args_value_88, 1, tmp_tuple_element_175);
            tmp_tuple_element_175 = locals_botocore$exceptions$$$class__44_UnsupportedSignatureVersionError_399;
            PyTuple_SET_ITEM0(tmp_args_value_88, 2, tmp_tuple_element_175);
            CHECK_OBJECT(tmp_class_creation_44__class_decl_dict);
            tmp_kwargs_value_88 = tmp_class_creation_44__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 399;
            tmp_assign_source_358 = CALL_FUNCTION(tmp_called_value_88, tmp_args_value_88, tmp_kwargs_value_88);
            Py_DECREF(tmp_args_value_88);
            if (tmp_assign_source_358 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 399;

                goto try_except_handler_132;
            }
            assert(outline_43_var___class__ == NULL);
            outline_43_var___class__ = tmp_assign_source_358;
        }
        CHECK_OBJECT(outline_43_var___class__);
        tmp_assign_source_357 = outline_43_var___class__;
        Py_INCREF(tmp_assign_source_357);
        goto try_return_handler_132;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_132:;
        Py_DECREF(locals_botocore$exceptions$$$class__44_UnsupportedSignatureVersionError_399);
        locals_botocore$exceptions$$$class__44_UnsupportedSignatureVersionError_399 = NULL;
        goto try_return_handler_131;
        // Exception handler code:
        try_except_handler_132:;
        exception_keeper_type_130 = exception_type;
        exception_keeper_value_130 = exception_value;
        exception_keeper_tb_130 = exception_tb;
        exception_keeper_lineno_130 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__44_UnsupportedSignatureVersionError_399);
        locals_botocore$exceptions$$$class__44_UnsupportedSignatureVersionError_399 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_130;
        exception_value = exception_keeper_value_130;
        exception_tb = exception_keeper_tb_130;
        exception_lineno = exception_keeper_lineno_130;

        goto try_except_handler_131;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_131:;
        CHECK_OBJECT(outline_43_var___class__);
        Py_DECREF(outline_43_var___class__);
        outline_43_var___class__ = NULL;
        goto outline_result_44;
        // Exception handler code:
        try_except_handler_131:;
        exception_keeper_type_131 = exception_type;
        exception_keeper_value_131 = exception_value;
        exception_keeper_tb_131 = exception_tb;
        exception_keeper_lineno_131 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_131;
        exception_value = exception_keeper_value_131;
        exception_tb = exception_keeper_tb_131;
        exception_lineno = exception_keeper_lineno_131;

        goto outline_exception_44;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_44:;
        exception_lineno = 399;
        goto try_except_handler_130;
        outline_result_44:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[177], tmp_assign_source_357);
    }
    goto try_end_44;
    // Exception handler code:
    try_except_handler_130:;
    exception_keeper_type_132 = exception_type;
    exception_keeper_value_132 = exception_value;
    exception_keeper_tb_132 = exception_tb;
    exception_keeper_lineno_132 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_44__bases_orig);
    tmp_class_creation_44__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_44__bases);
    tmp_class_creation_44__bases = NULL;
    Py_XDECREF(tmp_class_creation_44__class_decl_dict);
    tmp_class_creation_44__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_44__metaclass);
    tmp_class_creation_44__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_44__prepared);
    tmp_class_creation_44__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_132;
    exception_value = exception_keeper_value_132;
    exception_tb = exception_keeper_tb_132;
    exception_lineno = exception_keeper_lineno_132;

    goto frame_exception_exit_1;
    // End of try:
    try_end_44:;
    CHECK_OBJECT(tmp_class_creation_44__bases_orig);
    Py_DECREF(tmp_class_creation_44__bases_orig);
    tmp_class_creation_44__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_44__bases);
    Py_DECREF(tmp_class_creation_44__bases);
    tmp_class_creation_44__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_44__class_decl_dict);
    Py_DECREF(tmp_class_creation_44__class_decl_dict);
    tmp_class_creation_44__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_44__metaclass);
    Py_DECREF(tmp_class_creation_44__metaclass);
    tmp_class_creation_44__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_44__prepared);
    Py_DECREF(tmp_class_creation_44__prepared);
    tmp_class_creation_44__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_359;
        PyObject *tmp_dircall_arg1_45;
        tmp_dircall_arg1_45 = mod_consts[42];
        Py_INCREF(tmp_dircall_arg1_45);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_45};
            tmp_assign_source_359 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_359 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;

            goto try_except_handler_133;
        }
        assert(tmp_class_creation_45__bases == NULL);
        tmp_class_creation_45__bases = tmp_assign_source_359;
    }
    {
        PyObject *tmp_assign_source_360;
        tmp_assign_source_360 = PyDict_New();
        assert(tmp_class_creation_45__class_decl_dict == NULL);
        tmp_class_creation_45__class_decl_dict = tmp_assign_source_360;
    }
    {
        PyObject *tmp_assign_source_361;
        PyObject *tmp_metaclass_value_45;
        bool tmp_condition_result_265;
        PyObject *tmp_key_value_133;
        PyObject *tmp_dict_arg_value_133;
        PyObject *tmp_dict_arg_value_134;
        PyObject *tmp_key_value_134;
        nuitka_bool tmp_condition_result_266;
        int tmp_truth_name_45;
        PyObject *tmp_type_arg_89;
        PyObject *tmp_expression_value_231;
        PyObject *tmp_subscript_value_45;
        PyObject *tmp_bases_value_45;
        tmp_key_value_133 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_45__class_decl_dict);
        tmp_dict_arg_value_133 = tmp_class_creation_45__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_133, tmp_key_value_133);
        assert(!(tmp_res == -1));
        tmp_condition_result_265 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_265 != false) {
            goto condexpr_true_89;
        } else {
            goto condexpr_false_89;
        }
        condexpr_true_89:;
        CHECK_OBJECT(tmp_class_creation_45__class_decl_dict);
        tmp_dict_arg_value_134 = tmp_class_creation_45__class_decl_dict;
        tmp_key_value_134 = mod_consts[43];
        tmp_metaclass_value_45 = DICT_GET_ITEM0(tmp_dict_arg_value_134, tmp_key_value_134);
        if (tmp_metaclass_value_45 == NULL) {
            tmp_metaclass_value_45 = Py_None;
        }
        assert(!(tmp_metaclass_value_45 == NULL));
        Py_INCREF(tmp_metaclass_value_45);
        goto condexpr_end_89;
        condexpr_false_89:;
        CHECK_OBJECT(tmp_class_creation_45__bases);
        tmp_truth_name_45 = CHECK_IF_TRUE(tmp_class_creation_45__bases);
        if (tmp_truth_name_45 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;

            goto try_except_handler_133;
        }
        tmp_condition_result_266 = tmp_truth_name_45 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_266 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_90;
        } else {
            goto condexpr_false_90;
        }
        condexpr_true_90:;
        CHECK_OBJECT(tmp_class_creation_45__bases);
        tmp_expression_value_231 = tmp_class_creation_45__bases;
        tmp_subscript_value_45 = mod_consts[36];
        tmp_type_arg_89 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_231, tmp_subscript_value_45, 0);
        if (tmp_type_arg_89 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;

            goto try_except_handler_133;
        }
        tmp_metaclass_value_45 = BUILTIN_TYPE1(tmp_type_arg_89);
        Py_DECREF(tmp_type_arg_89);
        if (tmp_metaclass_value_45 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;

            goto try_except_handler_133;
        }
        goto condexpr_end_90;
        condexpr_false_90:;
        tmp_metaclass_value_45 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_45);
        condexpr_end_90:;
        condexpr_end_89:;
        CHECK_OBJECT(tmp_class_creation_45__bases);
        tmp_bases_value_45 = tmp_class_creation_45__bases;
        tmp_assign_source_361 = SELECT_METACLASS(tmp_metaclass_value_45, tmp_bases_value_45);
        Py_DECREF(tmp_metaclass_value_45);
        if (tmp_assign_source_361 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;

            goto try_except_handler_133;
        }
        assert(tmp_class_creation_45__metaclass == NULL);
        tmp_class_creation_45__metaclass = tmp_assign_source_361;
    }
    {
        bool tmp_condition_result_267;
        PyObject *tmp_key_value_135;
        PyObject *tmp_dict_arg_value_135;
        tmp_key_value_135 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_45__class_decl_dict);
        tmp_dict_arg_value_135 = tmp_class_creation_45__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_135, tmp_key_value_135);
        assert(!(tmp_res == -1));
        tmp_condition_result_267 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_267 != false) {
            goto branch_yes_177;
        } else {
            goto branch_no_177;
        }
    }
    branch_yes_177:;
    CHECK_OBJECT(tmp_class_creation_45__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_45__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 404;

        goto try_except_handler_133;
    }
    branch_no_177:;
    {
        nuitka_bool tmp_condition_result_268;
        PyObject *tmp_expression_value_232;
        CHECK_OBJECT(tmp_class_creation_45__metaclass);
        tmp_expression_value_232 = tmp_class_creation_45__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_232, mod_consts[44]);
        tmp_condition_result_268 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_268 == NUITKA_BOOL_TRUE) {
            goto branch_yes_178;
        } else {
            goto branch_no_178;
        }
    }
    branch_yes_178:;
    {
        PyObject *tmp_assign_source_362;
        PyObject *tmp_called_value_89;
        PyObject *tmp_expression_value_233;
        PyObject *tmp_args_value_89;
        PyObject *tmp_tuple_element_176;
        PyObject *tmp_kwargs_value_89;
        CHECK_OBJECT(tmp_class_creation_45__metaclass);
        tmp_expression_value_233 = tmp_class_creation_45__metaclass;
        tmp_called_value_89 = LOOKUP_ATTRIBUTE(tmp_expression_value_233, mod_consts[44]);
        if (tmp_called_value_89 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;

            goto try_except_handler_133;
        }
        tmp_tuple_element_176 = mod_consts[19];
        tmp_args_value_89 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_89, 0, tmp_tuple_element_176);
        CHECK_OBJECT(tmp_class_creation_45__bases);
        tmp_tuple_element_176 = tmp_class_creation_45__bases;
        PyTuple_SET_ITEM0(tmp_args_value_89, 1, tmp_tuple_element_176);
        CHECK_OBJECT(tmp_class_creation_45__class_decl_dict);
        tmp_kwargs_value_89 = tmp_class_creation_45__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 404;
        tmp_assign_source_362 = CALL_FUNCTION(tmp_called_value_89, tmp_args_value_89, tmp_kwargs_value_89);
        Py_DECREF(tmp_called_value_89);
        Py_DECREF(tmp_args_value_89);
        if (tmp_assign_source_362 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;

            goto try_except_handler_133;
        }
        assert(tmp_class_creation_45__prepared == NULL);
        tmp_class_creation_45__prepared = tmp_assign_source_362;
    }
    {
        bool tmp_condition_result_269;
        PyObject *tmp_operand_value_45;
        PyObject *tmp_expression_value_234;
        CHECK_OBJECT(tmp_class_creation_45__prepared);
        tmp_expression_value_234 = tmp_class_creation_45__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_234, mod_consts[46]);
        tmp_operand_value_45 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_45);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;

            goto try_except_handler_133;
        }
        tmp_condition_result_269 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_269 != false) {
            goto branch_yes_179;
        } else {
            goto branch_no_179;
        }
    }
    branch_yes_179:;
    {
        PyObject *tmp_raise_type_45;
        PyObject *tmp_raise_value_45;
        PyObject *tmp_left_value_45;
        PyObject *tmp_right_value_45;
        PyObject *tmp_tuple_element_177;
        PyObject *tmp_getattr_target_45;
        PyObject *tmp_getattr_attr_45;
        PyObject *tmp_getattr_default_45;
        tmp_raise_type_45 = PyExc_TypeError;
        tmp_left_value_45 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_45__metaclass);
        tmp_getattr_target_45 = tmp_class_creation_45__metaclass;
        tmp_getattr_attr_45 = mod_consts[48];
        tmp_getattr_default_45 = mod_consts[49];
        tmp_tuple_element_177 = BUILTIN_GETATTR(tmp_getattr_target_45, tmp_getattr_attr_45, tmp_getattr_default_45);
        if (tmp_tuple_element_177 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;

            goto try_except_handler_133;
        }
        tmp_right_value_45 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_235;
            PyObject *tmp_type_arg_90;
            PyTuple_SET_ITEM(tmp_right_value_45, 0, tmp_tuple_element_177);
            CHECK_OBJECT(tmp_class_creation_45__prepared);
            tmp_type_arg_90 = tmp_class_creation_45__prepared;
            tmp_expression_value_235 = BUILTIN_TYPE1(tmp_type_arg_90);
            assert(!(tmp_expression_value_235 == NULL));
            tmp_tuple_element_177 = LOOKUP_ATTRIBUTE(tmp_expression_value_235, mod_consts[48]);
            Py_DECREF(tmp_expression_value_235);
            if (tmp_tuple_element_177 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 404;

                goto tuple_build_exception_49;
            }
            PyTuple_SET_ITEM(tmp_right_value_45, 1, tmp_tuple_element_177);
        }
        goto tuple_build_noexception_49;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_49:;
        Py_DECREF(tmp_right_value_45);
        goto try_except_handler_133;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_49:;
        tmp_raise_value_45 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_45, tmp_right_value_45);
        Py_DECREF(tmp_right_value_45);
        if (tmp_raise_value_45 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;

            goto try_except_handler_133;
        }
        exception_type = tmp_raise_type_45;
        Py_INCREF(tmp_raise_type_45);
        exception_value = tmp_raise_value_45;
        exception_lineno = 404;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_133;
    }
    branch_no_179:;
    goto branch_end_178;
    branch_no_178:;
    {
        PyObject *tmp_assign_source_363;
        tmp_assign_source_363 = PyDict_New();
        assert(tmp_class_creation_45__prepared == NULL);
        tmp_class_creation_45__prepared = tmp_assign_source_363;
    }
    branch_end_178:;
    {
        PyObject *tmp_assign_source_364;
        {
            PyObject *tmp_set_locals_45;
            CHECK_OBJECT(tmp_class_creation_45__prepared);
            tmp_set_locals_45 = tmp_class_creation_45__prepared;
            locals_botocore$exceptions$$$class__45_ClientError_404 = tmp_set_locals_45;
            Py_INCREF(tmp_set_locals_45);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__45_ClientError_404, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;

            goto try_except_handler_135;
        }
        tmp_dictset_value = mod_consts[19];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__45_ClientError_404, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;

            goto try_except_handler_135;
        }
        if (isFrameUnusable(cache_frame_0dbac56e1690ceff521c6ecc75691544_45)) {
            Py_XDECREF(cache_frame_0dbac56e1690ceff521c6ecc75691544_45);

#if _DEBUG_REFCOUNTS
            if (cache_frame_0dbac56e1690ceff521c6ecc75691544_45 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_0dbac56e1690ceff521c6ecc75691544_45 = MAKE_FUNCTION_FRAME(codeobj_0dbac56e1690ceff521c6ecc75691544, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_0dbac56e1690ceff521c6ecc75691544_45->m_type_description == NULL);
        frame_0dbac56e1690ceff521c6ecc75691544_45 = cache_frame_0dbac56e1690ceff521c6ecc75691544_45;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_0dbac56e1690ceff521c6ecc75691544_45);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_0dbac56e1690ceff521c6ecc75691544_45) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[180];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__45_ClientError_404, mod_consts[15], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 405;
            type_description_2 = "o";
            goto frame_exception_exit_45;
        }


        tmp_dictset_value = MAKE_FUNCTION_botocore$exceptions$$$function__7___init__();

        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__45_ClientError_404, mod_consts[3], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 409;
            type_description_2 = "o";
            goto frame_exception_exit_45;
        }


        tmp_dictset_value = MAKE_FUNCTION_botocore$exceptions$$$function__8__get_retry_info();

        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__45_ClientError_404, mod_consts[12], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 422;
            type_description_2 = "o";
            goto frame_exception_exit_45;
        }


        tmp_dictset_value = MAKE_FUNCTION_botocore$exceptions$$$function__9___reduce__();

        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__45_ClientError_404, mod_consts[56], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 432;
            type_description_2 = "o";
            goto frame_exception_exit_45;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_0dbac56e1690ceff521c6ecc75691544_45);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_44;

        frame_exception_exit_45:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_0dbac56e1690ceff521c6ecc75691544_45);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_0dbac56e1690ceff521c6ecc75691544_45, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_0dbac56e1690ceff521c6ecc75691544_45->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_0dbac56e1690ceff521c6ecc75691544_45, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_0dbac56e1690ceff521c6ecc75691544_45,
            type_description_2,
            outline_44_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_0dbac56e1690ceff521c6ecc75691544_45 == cache_frame_0dbac56e1690ceff521c6ecc75691544_45) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_0dbac56e1690ceff521c6ecc75691544_45);
            cache_frame_0dbac56e1690ceff521c6ecc75691544_45 = NULL;
        }

        assertFrameObject(frame_0dbac56e1690ceff521c6ecc75691544_45);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_44;

        frame_no_exception_44:;
        goto skip_nested_handling_44;
        nested_frame_exit_44:;

        goto try_except_handler_135;
        skip_nested_handling_44:;
        {
            nuitka_bool tmp_condition_result_270;
            PyObject *tmp_cmp_expr_left_45;
            PyObject *tmp_cmp_expr_right_45;
            CHECK_OBJECT(tmp_class_creation_45__bases);
            tmp_cmp_expr_left_45 = tmp_class_creation_45__bases;
            tmp_cmp_expr_right_45 = mod_consts[42];
            tmp_condition_result_270 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_45, tmp_cmp_expr_right_45);
            if (tmp_condition_result_270 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 404;

                goto try_except_handler_135;
            }
            if (tmp_condition_result_270 == NUITKA_BOOL_TRUE) {
                goto branch_yes_180;
            } else {
                goto branch_no_180;
            }
            assert(tmp_condition_result_270 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_180:;
        tmp_dictset_value = mod_consts[42];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__45_ClientError_404, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;

            goto try_except_handler_135;
        }
        branch_no_180:;
        {
            PyObject *tmp_assign_source_365;
            PyObject *tmp_called_value_90;
            PyObject *tmp_args_value_90;
            PyObject *tmp_tuple_element_178;
            PyObject *tmp_kwargs_value_90;
            CHECK_OBJECT(tmp_class_creation_45__metaclass);
            tmp_called_value_90 = tmp_class_creation_45__metaclass;
            tmp_tuple_element_178 = mod_consts[19];
            tmp_args_value_90 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_90, 0, tmp_tuple_element_178);
            CHECK_OBJECT(tmp_class_creation_45__bases);
            tmp_tuple_element_178 = tmp_class_creation_45__bases;
            PyTuple_SET_ITEM0(tmp_args_value_90, 1, tmp_tuple_element_178);
            tmp_tuple_element_178 = locals_botocore$exceptions$$$class__45_ClientError_404;
            PyTuple_SET_ITEM0(tmp_args_value_90, 2, tmp_tuple_element_178);
            CHECK_OBJECT(tmp_class_creation_45__class_decl_dict);
            tmp_kwargs_value_90 = tmp_class_creation_45__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 404;
            tmp_assign_source_365 = CALL_FUNCTION(tmp_called_value_90, tmp_args_value_90, tmp_kwargs_value_90);
            Py_DECREF(tmp_args_value_90);
            if (tmp_assign_source_365 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 404;

                goto try_except_handler_135;
            }
            assert(outline_44_var___class__ == NULL);
            outline_44_var___class__ = tmp_assign_source_365;
        }
        CHECK_OBJECT(outline_44_var___class__);
        tmp_assign_source_364 = outline_44_var___class__;
        Py_INCREF(tmp_assign_source_364);
        goto try_return_handler_135;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_135:;
        Py_DECREF(locals_botocore$exceptions$$$class__45_ClientError_404);
        locals_botocore$exceptions$$$class__45_ClientError_404 = NULL;
        goto try_return_handler_134;
        // Exception handler code:
        try_except_handler_135:;
        exception_keeper_type_133 = exception_type;
        exception_keeper_value_133 = exception_value;
        exception_keeper_tb_133 = exception_tb;
        exception_keeper_lineno_133 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__45_ClientError_404);
        locals_botocore$exceptions$$$class__45_ClientError_404 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_133;
        exception_value = exception_keeper_value_133;
        exception_tb = exception_keeper_tb_133;
        exception_lineno = exception_keeper_lineno_133;

        goto try_except_handler_134;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_134:;
        CHECK_OBJECT(outline_44_var___class__);
        Py_DECREF(outline_44_var___class__);
        outline_44_var___class__ = NULL;
        goto outline_result_45;
        // Exception handler code:
        try_except_handler_134:;
        exception_keeper_type_134 = exception_type;
        exception_keeper_value_134 = exception_value;
        exception_keeper_tb_134 = exception_tb;
        exception_keeper_lineno_134 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_134;
        exception_value = exception_keeper_value_134;
        exception_tb = exception_keeper_tb_134;
        exception_lineno = exception_keeper_lineno_134;

        goto outline_exception_45;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_45:;
        exception_lineno = 404;
        goto try_except_handler_133;
        outline_result_45:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[19], tmp_assign_source_364);
    }
    goto try_end_45;
    // Exception handler code:
    try_except_handler_133:;
    exception_keeper_type_135 = exception_type;
    exception_keeper_value_135 = exception_value;
    exception_keeper_tb_135 = exception_tb;
    exception_keeper_lineno_135 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_45__bases);
    tmp_class_creation_45__bases = NULL;
    Py_XDECREF(tmp_class_creation_45__class_decl_dict);
    tmp_class_creation_45__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_45__metaclass);
    tmp_class_creation_45__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_45__prepared);
    tmp_class_creation_45__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_135;
    exception_value = exception_keeper_value_135;
    exception_tb = exception_keeper_tb_135;
    exception_lineno = exception_keeper_lineno_135;

    goto frame_exception_exit_1;
    // End of try:
    try_end_45:;
    CHECK_OBJECT(tmp_class_creation_45__bases);
    Py_DECREF(tmp_class_creation_45__bases);
    tmp_class_creation_45__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_45__class_decl_dict);
    Py_DECREF(tmp_class_creation_45__class_decl_dict);
    tmp_class_creation_45__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_45__metaclass);
    Py_DECREF(tmp_class_creation_45__metaclass);
    tmp_class_creation_45__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_45__prepared);
    Py_DECREF(tmp_class_creation_45__prepared);
    tmp_class_creation_45__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_366;
        PyObject *tmp_tuple_element_179;
        tmp_tuple_element_179 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[19]);

        if (unlikely(tmp_tuple_element_179 == NULL)) {
            tmp_tuple_element_179 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[19]);
        }

        if (tmp_tuple_element_179 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 439;

            goto try_except_handler_136;
        }
        tmp_assign_source_366 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_366, 0, tmp_tuple_element_179);
        assert(tmp_class_creation_46__bases_orig == NULL);
        tmp_class_creation_46__bases_orig = tmp_assign_source_366;
    }
    {
        PyObject *tmp_assign_source_367;
        PyObject *tmp_dircall_arg1_46;
        CHECK_OBJECT(tmp_class_creation_46__bases_orig);
        tmp_dircall_arg1_46 = tmp_class_creation_46__bases_orig;
        Py_INCREF(tmp_dircall_arg1_46);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_46};
            tmp_assign_source_367 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_367 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 439;

            goto try_except_handler_136;
        }
        assert(tmp_class_creation_46__bases == NULL);
        tmp_class_creation_46__bases = tmp_assign_source_367;
    }
    {
        PyObject *tmp_assign_source_368;
        tmp_assign_source_368 = PyDict_New();
        assert(tmp_class_creation_46__class_decl_dict == NULL);
        tmp_class_creation_46__class_decl_dict = tmp_assign_source_368;
    }
    {
        PyObject *tmp_assign_source_369;
        PyObject *tmp_metaclass_value_46;
        bool tmp_condition_result_271;
        PyObject *tmp_key_value_136;
        PyObject *tmp_dict_arg_value_136;
        PyObject *tmp_dict_arg_value_137;
        PyObject *tmp_key_value_137;
        nuitka_bool tmp_condition_result_272;
        int tmp_truth_name_46;
        PyObject *tmp_type_arg_91;
        PyObject *tmp_expression_value_236;
        PyObject *tmp_subscript_value_46;
        PyObject *tmp_bases_value_46;
        tmp_key_value_136 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_46__class_decl_dict);
        tmp_dict_arg_value_136 = tmp_class_creation_46__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_136, tmp_key_value_136);
        assert(!(tmp_res == -1));
        tmp_condition_result_271 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_271 != false) {
            goto condexpr_true_91;
        } else {
            goto condexpr_false_91;
        }
        condexpr_true_91:;
        CHECK_OBJECT(tmp_class_creation_46__class_decl_dict);
        tmp_dict_arg_value_137 = tmp_class_creation_46__class_decl_dict;
        tmp_key_value_137 = mod_consts[43];
        tmp_metaclass_value_46 = DICT_GET_ITEM0(tmp_dict_arg_value_137, tmp_key_value_137);
        if (tmp_metaclass_value_46 == NULL) {
            tmp_metaclass_value_46 = Py_None;
        }
        assert(!(tmp_metaclass_value_46 == NULL));
        Py_INCREF(tmp_metaclass_value_46);
        goto condexpr_end_91;
        condexpr_false_91:;
        CHECK_OBJECT(tmp_class_creation_46__bases);
        tmp_truth_name_46 = CHECK_IF_TRUE(tmp_class_creation_46__bases);
        if (tmp_truth_name_46 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 439;

            goto try_except_handler_136;
        }
        tmp_condition_result_272 = tmp_truth_name_46 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_272 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_92;
        } else {
            goto condexpr_false_92;
        }
        condexpr_true_92:;
        CHECK_OBJECT(tmp_class_creation_46__bases);
        tmp_expression_value_236 = tmp_class_creation_46__bases;
        tmp_subscript_value_46 = mod_consts[36];
        tmp_type_arg_91 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_236, tmp_subscript_value_46, 0);
        if (tmp_type_arg_91 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 439;

            goto try_except_handler_136;
        }
        tmp_metaclass_value_46 = BUILTIN_TYPE1(tmp_type_arg_91);
        Py_DECREF(tmp_type_arg_91);
        if (tmp_metaclass_value_46 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 439;

            goto try_except_handler_136;
        }
        goto condexpr_end_92;
        condexpr_false_92:;
        tmp_metaclass_value_46 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_46);
        condexpr_end_92:;
        condexpr_end_91:;
        CHECK_OBJECT(tmp_class_creation_46__bases);
        tmp_bases_value_46 = tmp_class_creation_46__bases;
        tmp_assign_source_369 = SELECT_METACLASS(tmp_metaclass_value_46, tmp_bases_value_46);
        Py_DECREF(tmp_metaclass_value_46);
        if (tmp_assign_source_369 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 439;

            goto try_except_handler_136;
        }
        assert(tmp_class_creation_46__metaclass == NULL);
        tmp_class_creation_46__metaclass = tmp_assign_source_369;
    }
    {
        bool tmp_condition_result_273;
        PyObject *tmp_key_value_138;
        PyObject *tmp_dict_arg_value_138;
        tmp_key_value_138 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_46__class_decl_dict);
        tmp_dict_arg_value_138 = tmp_class_creation_46__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_138, tmp_key_value_138);
        assert(!(tmp_res == -1));
        tmp_condition_result_273 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_273 != false) {
            goto branch_yes_181;
        } else {
            goto branch_no_181;
        }
    }
    branch_yes_181:;
    CHECK_OBJECT(tmp_class_creation_46__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_46__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 439;

        goto try_except_handler_136;
    }
    branch_no_181:;
    {
        nuitka_bool tmp_condition_result_274;
        PyObject *tmp_expression_value_237;
        CHECK_OBJECT(tmp_class_creation_46__metaclass);
        tmp_expression_value_237 = tmp_class_creation_46__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_237, mod_consts[44]);
        tmp_condition_result_274 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_274 == NUITKA_BOOL_TRUE) {
            goto branch_yes_182;
        } else {
            goto branch_no_182;
        }
    }
    branch_yes_182:;
    {
        PyObject *tmp_assign_source_370;
        PyObject *tmp_called_value_91;
        PyObject *tmp_expression_value_238;
        PyObject *tmp_args_value_91;
        PyObject *tmp_tuple_element_180;
        PyObject *tmp_kwargs_value_91;
        CHECK_OBJECT(tmp_class_creation_46__metaclass);
        tmp_expression_value_238 = tmp_class_creation_46__metaclass;
        tmp_called_value_91 = LOOKUP_ATTRIBUTE(tmp_expression_value_238, mod_consts[44]);
        if (tmp_called_value_91 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 439;

            goto try_except_handler_136;
        }
        tmp_tuple_element_180 = mod_consts[184];
        tmp_args_value_91 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_91, 0, tmp_tuple_element_180);
        CHECK_OBJECT(tmp_class_creation_46__bases);
        tmp_tuple_element_180 = tmp_class_creation_46__bases;
        PyTuple_SET_ITEM0(tmp_args_value_91, 1, tmp_tuple_element_180);
        CHECK_OBJECT(tmp_class_creation_46__class_decl_dict);
        tmp_kwargs_value_91 = tmp_class_creation_46__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 439;
        tmp_assign_source_370 = CALL_FUNCTION(tmp_called_value_91, tmp_args_value_91, tmp_kwargs_value_91);
        Py_DECREF(tmp_called_value_91);
        Py_DECREF(tmp_args_value_91);
        if (tmp_assign_source_370 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 439;

            goto try_except_handler_136;
        }
        assert(tmp_class_creation_46__prepared == NULL);
        tmp_class_creation_46__prepared = tmp_assign_source_370;
    }
    {
        bool tmp_condition_result_275;
        PyObject *tmp_operand_value_46;
        PyObject *tmp_expression_value_239;
        CHECK_OBJECT(tmp_class_creation_46__prepared);
        tmp_expression_value_239 = tmp_class_creation_46__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_239, mod_consts[46]);
        tmp_operand_value_46 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_46);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 439;

            goto try_except_handler_136;
        }
        tmp_condition_result_275 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_275 != false) {
            goto branch_yes_183;
        } else {
            goto branch_no_183;
        }
    }
    branch_yes_183:;
    {
        PyObject *tmp_raise_type_46;
        PyObject *tmp_raise_value_46;
        PyObject *tmp_left_value_46;
        PyObject *tmp_right_value_46;
        PyObject *tmp_tuple_element_181;
        PyObject *tmp_getattr_target_46;
        PyObject *tmp_getattr_attr_46;
        PyObject *tmp_getattr_default_46;
        tmp_raise_type_46 = PyExc_TypeError;
        tmp_left_value_46 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_46__metaclass);
        tmp_getattr_target_46 = tmp_class_creation_46__metaclass;
        tmp_getattr_attr_46 = mod_consts[48];
        tmp_getattr_default_46 = mod_consts[49];
        tmp_tuple_element_181 = BUILTIN_GETATTR(tmp_getattr_target_46, tmp_getattr_attr_46, tmp_getattr_default_46);
        if (tmp_tuple_element_181 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 439;

            goto try_except_handler_136;
        }
        tmp_right_value_46 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_240;
            PyObject *tmp_type_arg_92;
            PyTuple_SET_ITEM(tmp_right_value_46, 0, tmp_tuple_element_181);
            CHECK_OBJECT(tmp_class_creation_46__prepared);
            tmp_type_arg_92 = tmp_class_creation_46__prepared;
            tmp_expression_value_240 = BUILTIN_TYPE1(tmp_type_arg_92);
            assert(!(tmp_expression_value_240 == NULL));
            tmp_tuple_element_181 = LOOKUP_ATTRIBUTE(tmp_expression_value_240, mod_consts[48]);
            Py_DECREF(tmp_expression_value_240);
            if (tmp_tuple_element_181 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 439;

                goto tuple_build_exception_50;
            }
            PyTuple_SET_ITEM(tmp_right_value_46, 1, tmp_tuple_element_181);
        }
        goto tuple_build_noexception_50;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_50:;
        Py_DECREF(tmp_right_value_46);
        goto try_except_handler_136;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_50:;
        tmp_raise_value_46 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_46, tmp_right_value_46);
        Py_DECREF(tmp_right_value_46);
        if (tmp_raise_value_46 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 439;

            goto try_except_handler_136;
        }
        exception_type = tmp_raise_type_46;
        Py_INCREF(tmp_raise_type_46);
        exception_value = tmp_raise_value_46;
        exception_lineno = 439;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_136;
    }
    branch_no_183:;
    goto branch_end_182;
    branch_no_182:;
    {
        PyObject *tmp_assign_source_371;
        tmp_assign_source_371 = PyDict_New();
        assert(tmp_class_creation_46__prepared == NULL);
        tmp_class_creation_46__prepared = tmp_assign_source_371;
    }
    branch_end_182:;
    {
        PyObject *tmp_assign_source_372;
        {
            PyObject *tmp_set_locals_46;
            CHECK_OBJECT(tmp_class_creation_46__prepared);
            tmp_set_locals_46 = tmp_class_creation_46__prepared;
            locals_botocore$exceptions$$$class__46_EventStreamError_439 = tmp_set_locals_46;
            Py_INCREF(tmp_set_locals_46);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__46_EventStreamError_439, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 439;

            goto try_except_handler_138;
        }
        tmp_dictset_value = mod_consts[184];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__46_EventStreamError_439, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 439;

            goto try_except_handler_138;
        }
        {
            nuitka_bool tmp_condition_result_276;
            PyObject *tmp_cmp_expr_left_46;
            PyObject *tmp_cmp_expr_right_46;
            CHECK_OBJECT(tmp_class_creation_46__bases);
            tmp_cmp_expr_left_46 = tmp_class_creation_46__bases;
            CHECK_OBJECT(tmp_class_creation_46__bases_orig);
            tmp_cmp_expr_right_46 = tmp_class_creation_46__bases_orig;
            tmp_condition_result_276 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_46, tmp_cmp_expr_right_46);
            if (tmp_condition_result_276 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 439;

                goto try_except_handler_138;
            }
            if (tmp_condition_result_276 == NUITKA_BOOL_TRUE) {
                goto branch_yes_184;
            } else {
                goto branch_no_184;
            }
            assert(tmp_condition_result_276 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_184:;
        CHECK_OBJECT(tmp_class_creation_46__bases_orig);
        tmp_dictset_value = tmp_class_creation_46__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__46_EventStreamError_439, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 439;

            goto try_except_handler_138;
        }
        branch_no_184:;
        {
            PyObject *tmp_assign_source_373;
            PyObject *tmp_called_value_92;
            PyObject *tmp_args_value_92;
            PyObject *tmp_tuple_element_182;
            PyObject *tmp_kwargs_value_92;
            CHECK_OBJECT(tmp_class_creation_46__metaclass);
            tmp_called_value_92 = tmp_class_creation_46__metaclass;
            tmp_tuple_element_182 = mod_consts[184];
            tmp_args_value_92 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_92, 0, tmp_tuple_element_182);
            CHECK_OBJECT(tmp_class_creation_46__bases);
            tmp_tuple_element_182 = tmp_class_creation_46__bases;
            PyTuple_SET_ITEM0(tmp_args_value_92, 1, tmp_tuple_element_182);
            tmp_tuple_element_182 = locals_botocore$exceptions$$$class__46_EventStreamError_439;
            PyTuple_SET_ITEM0(tmp_args_value_92, 2, tmp_tuple_element_182);
            CHECK_OBJECT(tmp_class_creation_46__class_decl_dict);
            tmp_kwargs_value_92 = tmp_class_creation_46__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 439;
            tmp_assign_source_373 = CALL_FUNCTION(tmp_called_value_92, tmp_args_value_92, tmp_kwargs_value_92);
            Py_DECREF(tmp_args_value_92);
            if (tmp_assign_source_373 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 439;

                goto try_except_handler_138;
            }
            assert(outline_45_var___class__ == NULL);
            outline_45_var___class__ = tmp_assign_source_373;
        }
        CHECK_OBJECT(outline_45_var___class__);
        tmp_assign_source_372 = outline_45_var___class__;
        Py_INCREF(tmp_assign_source_372);
        goto try_return_handler_138;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_138:;
        Py_DECREF(locals_botocore$exceptions$$$class__46_EventStreamError_439);
        locals_botocore$exceptions$$$class__46_EventStreamError_439 = NULL;
        goto try_return_handler_137;
        // Exception handler code:
        try_except_handler_138:;
        exception_keeper_type_136 = exception_type;
        exception_keeper_value_136 = exception_value;
        exception_keeper_tb_136 = exception_tb;
        exception_keeper_lineno_136 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__46_EventStreamError_439);
        locals_botocore$exceptions$$$class__46_EventStreamError_439 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_136;
        exception_value = exception_keeper_value_136;
        exception_tb = exception_keeper_tb_136;
        exception_lineno = exception_keeper_lineno_136;

        goto try_except_handler_137;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_137:;
        CHECK_OBJECT(outline_45_var___class__);
        Py_DECREF(outline_45_var___class__);
        outline_45_var___class__ = NULL;
        goto outline_result_46;
        // Exception handler code:
        try_except_handler_137:;
        exception_keeper_type_137 = exception_type;
        exception_keeper_value_137 = exception_value;
        exception_keeper_tb_137 = exception_tb;
        exception_keeper_lineno_137 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_137;
        exception_value = exception_keeper_value_137;
        exception_tb = exception_keeper_tb_137;
        exception_lineno = exception_keeper_lineno_137;

        goto outline_exception_46;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_46:;
        exception_lineno = 439;
        goto try_except_handler_136;
        outline_result_46:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[184], tmp_assign_source_372);
    }
    goto try_end_46;
    // Exception handler code:
    try_except_handler_136:;
    exception_keeper_type_138 = exception_type;
    exception_keeper_value_138 = exception_value;
    exception_keeper_tb_138 = exception_tb;
    exception_keeper_lineno_138 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_46__bases_orig);
    tmp_class_creation_46__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_46__bases);
    tmp_class_creation_46__bases = NULL;
    Py_XDECREF(tmp_class_creation_46__class_decl_dict);
    tmp_class_creation_46__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_46__metaclass);
    tmp_class_creation_46__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_46__prepared);
    tmp_class_creation_46__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_138;
    exception_value = exception_keeper_value_138;
    exception_tb = exception_keeper_tb_138;
    exception_lineno = exception_keeper_lineno_138;

    goto frame_exception_exit_1;
    // End of try:
    try_end_46:;
    CHECK_OBJECT(tmp_class_creation_46__bases_orig);
    Py_DECREF(tmp_class_creation_46__bases_orig);
    tmp_class_creation_46__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_46__bases);
    Py_DECREF(tmp_class_creation_46__bases);
    tmp_class_creation_46__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_46__class_decl_dict);
    Py_DECREF(tmp_class_creation_46__class_decl_dict);
    tmp_class_creation_46__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_46__metaclass);
    Py_DECREF(tmp_class_creation_46__metaclass);
    tmp_class_creation_46__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_46__prepared);
    Py_DECREF(tmp_class_creation_46__prepared);
    tmp_class_creation_46__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_374;
        PyObject *tmp_tuple_element_183;
        tmp_tuple_element_183 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[185]);

        if (unlikely(tmp_tuple_element_183 == NULL)) {
            tmp_tuple_element_183 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[185]);
        }

        if (tmp_tuple_element_183 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 443;

            goto try_except_handler_139;
        }
        tmp_assign_source_374 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_374, 0, tmp_tuple_element_183);
        assert(tmp_class_creation_47__bases_orig == NULL);
        tmp_class_creation_47__bases_orig = tmp_assign_source_374;
    }
    {
        PyObject *tmp_assign_source_375;
        PyObject *tmp_dircall_arg1_47;
        CHECK_OBJECT(tmp_class_creation_47__bases_orig);
        tmp_dircall_arg1_47 = tmp_class_creation_47__bases_orig;
        Py_INCREF(tmp_dircall_arg1_47);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_47};
            tmp_assign_source_375 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_375 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 443;

            goto try_except_handler_139;
        }
        assert(tmp_class_creation_47__bases == NULL);
        tmp_class_creation_47__bases = tmp_assign_source_375;
    }
    {
        PyObject *tmp_assign_source_376;
        tmp_assign_source_376 = PyDict_New();
        assert(tmp_class_creation_47__class_decl_dict == NULL);
        tmp_class_creation_47__class_decl_dict = tmp_assign_source_376;
    }
    {
        PyObject *tmp_assign_source_377;
        PyObject *tmp_metaclass_value_47;
        bool tmp_condition_result_277;
        PyObject *tmp_key_value_139;
        PyObject *tmp_dict_arg_value_139;
        PyObject *tmp_dict_arg_value_140;
        PyObject *tmp_key_value_140;
        nuitka_bool tmp_condition_result_278;
        int tmp_truth_name_47;
        PyObject *tmp_type_arg_93;
        PyObject *tmp_expression_value_241;
        PyObject *tmp_subscript_value_47;
        PyObject *tmp_bases_value_47;
        tmp_key_value_139 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_47__class_decl_dict);
        tmp_dict_arg_value_139 = tmp_class_creation_47__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_139, tmp_key_value_139);
        assert(!(tmp_res == -1));
        tmp_condition_result_277 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_277 != false) {
            goto condexpr_true_93;
        } else {
            goto condexpr_false_93;
        }
        condexpr_true_93:;
        CHECK_OBJECT(tmp_class_creation_47__class_decl_dict);
        tmp_dict_arg_value_140 = tmp_class_creation_47__class_decl_dict;
        tmp_key_value_140 = mod_consts[43];
        tmp_metaclass_value_47 = DICT_GET_ITEM0(tmp_dict_arg_value_140, tmp_key_value_140);
        if (tmp_metaclass_value_47 == NULL) {
            tmp_metaclass_value_47 = Py_None;
        }
        assert(!(tmp_metaclass_value_47 == NULL));
        Py_INCREF(tmp_metaclass_value_47);
        goto condexpr_end_93;
        condexpr_false_93:;
        CHECK_OBJECT(tmp_class_creation_47__bases);
        tmp_truth_name_47 = CHECK_IF_TRUE(tmp_class_creation_47__bases);
        if (tmp_truth_name_47 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 443;

            goto try_except_handler_139;
        }
        tmp_condition_result_278 = tmp_truth_name_47 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_278 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_94;
        } else {
            goto condexpr_false_94;
        }
        condexpr_true_94:;
        CHECK_OBJECT(tmp_class_creation_47__bases);
        tmp_expression_value_241 = tmp_class_creation_47__bases;
        tmp_subscript_value_47 = mod_consts[36];
        tmp_type_arg_93 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_241, tmp_subscript_value_47, 0);
        if (tmp_type_arg_93 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 443;

            goto try_except_handler_139;
        }
        tmp_metaclass_value_47 = BUILTIN_TYPE1(tmp_type_arg_93);
        Py_DECREF(tmp_type_arg_93);
        if (tmp_metaclass_value_47 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 443;

            goto try_except_handler_139;
        }
        goto condexpr_end_94;
        condexpr_false_94:;
        tmp_metaclass_value_47 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_47);
        condexpr_end_94:;
        condexpr_end_93:;
        CHECK_OBJECT(tmp_class_creation_47__bases);
        tmp_bases_value_47 = tmp_class_creation_47__bases;
        tmp_assign_source_377 = SELECT_METACLASS(tmp_metaclass_value_47, tmp_bases_value_47);
        Py_DECREF(tmp_metaclass_value_47);
        if (tmp_assign_source_377 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 443;

            goto try_except_handler_139;
        }
        assert(tmp_class_creation_47__metaclass == NULL);
        tmp_class_creation_47__metaclass = tmp_assign_source_377;
    }
    {
        bool tmp_condition_result_279;
        PyObject *tmp_key_value_141;
        PyObject *tmp_dict_arg_value_141;
        tmp_key_value_141 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_47__class_decl_dict);
        tmp_dict_arg_value_141 = tmp_class_creation_47__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_141, tmp_key_value_141);
        assert(!(tmp_res == -1));
        tmp_condition_result_279 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_279 != false) {
            goto branch_yes_185;
        } else {
            goto branch_no_185;
        }
    }
    branch_yes_185:;
    CHECK_OBJECT(tmp_class_creation_47__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_47__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 443;

        goto try_except_handler_139;
    }
    branch_no_185:;
    {
        nuitka_bool tmp_condition_result_280;
        PyObject *tmp_expression_value_242;
        CHECK_OBJECT(tmp_class_creation_47__metaclass);
        tmp_expression_value_242 = tmp_class_creation_47__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_242, mod_consts[44]);
        tmp_condition_result_280 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_280 == NUITKA_BOOL_TRUE) {
            goto branch_yes_186;
        } else {
            goto branch_no_186;
        }
    }
    branch_yes_186:;
    {
        PyObject *tmp_assign_source_378;
        PyObject *tmp_called_value_93;
        PyObject *tmp_expression_value_243;
        PyObject *tmp_args_value_93;
        PyObject *tmp_tuple_element_184;
        PyObject *tmp_kwargs_value_93;
        CHECK_OBJECT(tmp_class_creation_47__metaclass);
        tmp_expression_value_243 = tmp_class_creation_47__metaclass;
        tmp_called_value_93 = LOOKUP_ATTRIBUTE(tmp_expression_value_243, mod_consts[44]);
        if (tmp_called_value_93 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 443;

            goto try_except_handler_139;
        }
        tmp_tuple_element_184 = mod_consts[186];
        tmp_args_value_93 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_93, 0, tmp_tuple_element_184);
        CHECK_OBJECT(tmp_class_creation_47__bases);
        tmp_tuple_element_184 = tmp_class_creation_47__bases;
        PyTuple_SET_ITEM0(tmp_args_value_93, 1, tmp_tuple_element_184);
        CHECK_OBJECT(tmp_class_creation_47__class_decl_dict);
        tmp_kwargs_value_93 = tmp_class_creation_47__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 443;
        tmp_assign_source_378 = CALL_FUNCTION(tmp_called_value_93, tmp_args_value_93, tmp_kwargs_value_93);
        Py_DECREF(tmp_called_value_93);
        Py_DECREF(tmp_args_value_93);
        if (tmp_assign_source_378 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 443;

            goto try_except_handler_139;
        }
        assert(tmp_class_creation_47__prepared == NULL);
        tmp_class_creation_47__prepared = tmp_assign_source_378;
    }
    {
        bool tmp_condition_result_281;
        PyObject *tmp_operand_value_47;
        PyObject *tmp_expression_value_244;
        CHECK_OBJECT(tmp_class_creation_47__prepared);
        tmp_expression_value_244 = tmp_class_creation_47__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_244, mod_consts[46]);
        tmp_operand_value_47 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_47);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 443;

            goto try_except_handler_139;
        }
        tmp_condition_result_281 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_281 != false) {
            goto branch_yes_187;
        } else {
            goto branch_no_187;
        }
    }
    branch_yes_187:;
    {
        PyObject *tmp_raise_type_47;
        PyObject *tmp_raise_value_47;
        PyObject *tmp_left_value_47;
        PyObject *tmp_right_value_47;
        PyObject *tmp_tuple_element_185;
        PyObject *tmp_getattr_target_47;
        PyObject *tmp_getattr_attr_47;
        PyObject *tmp_getattr_default_47;
        tmp_raise_type_47 = PyExc_TypeError;
        tmp_left_value_47 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_47__metaclass);
        tmp_getattr_target_47 = tmp_class_creation_47__metaclass;
        tmp_getattr_attr_47 = mod_consts[48];
        tmp_getattr_default_47 = mod_consts[49];
        tmp_tuple_element_185 = BUILTIN_GETATTR(tmp_getattr_target_47, tmp_getattr_attr_47, tmp_getattr_default_47);
        if (tmp_tuple_element_185 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 443;

            goto try_except_handler_139;
        }
        tmp_right_value_47 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_245;
            PyObject *tmp_type_arg_94;
            PyTuple_SET_ITEM(tmp_right_value_47, 0, tmp_tuple_element_185);
            CHECK_OBJECT(tmp_class_creation_47__prepared);
            tmp_type_arg_94 = tmp_class_creation_47__prepared;
            tmp_expression_value_245 = BUILTIN_TYPE1(tmp_type_arg_94);
            assert(!(tmp_expression_value_245 == NULL));
            tmp_tuple_element_185 = LOOKUP_ATTRIBUTE(tmp_expression_value_245, mod_consts[48]);
            Py_DECREF(tmp_expression_value_245);
            if (tmp_tuple_element_185 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 443;

                goto tuple_build_exception_51;
            }
            PyTuple_SET_ITEM(tmp_right_value_47, 1, tmp_tuple_element_185);
        }
        goto tuple_build_noexception_51;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_51:;
        Py_DECREF(tmp_right_value_47);
        goto try_except_handler_139;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_51:;
        tmp_raise_value_47 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_47, tmp_right_value_47);
        Py_DECREF(tmp_right_value_47);
        if (tmp_raise_value_47 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 443;

            goto try_except_handler_139;
        }
        exception_type = tmp_raise_type_47;
        Py_INCREF(tmp_raise_type_47);
        exception_value = tmp_raise_value_47;
        exception_lineno = 443;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_139;
    }
    branch_no_187:;
    goto branch_end_186;
    branch_no_186:;
    {
        PyObject *tmp_assign_source_379;
        tmp_assign_source_379 = PyDict_New();
        assert(tmp_class_creation_47__prepared == NULL);
        tmp_class_creation_47__prepared = tmp_assign_source_379;
    }
    branch_end_186:;
    {
        PyObject *tmp_assign_source_380;
        {
            PyObject *tmp_set_locals_47;
            CHECK_OBJECT(tmp_class_creation_47__prepared);
            tmp_set_locals_47 = tmp_class_creation_47__prepared;
            locals_botocore$exceptions$$$class__47_UnsupportedTLSVersionWarning_443 = tmp_set_locals_47;
            Py_INCREF(tmp_set_locals_47);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__47_UnsupportedTLSVersionWarning_443, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 443;

            goto try_except_handler_141;
        }
        tmp_dictset_value = mod_consts[187];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__47_UnsupportedTLSVersionWarning_443, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 443;

            goto try_except_handler_141;
        }
        tmp_dictset_value = mod_consts[186];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__47_UnsupportedTLSVersionWarning_443, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 443;

            goto try_except_handler_141;
        }
        {
            nuitka_bool tmp_condition_result_282;
            PyObject *tmp_cmp_expr_left_47;
            PyObject *tmp_cmp_expr_right_47;
            CHECK_OBJECT(tmp_class_creation_47__bases);
            tmp_cmp_expr_left_47 = tmp_class_creation_47__bases;
            CHECK_OBJECT(tmp_class_creation_47__bases_orig);
            tmp_cmp_expr_right_47 = tmp_class_creation_47__bases_orig;
            tmp_condition_result_282 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_47, tmp_cmp_expr_right_47);
            if (tmp_condition_result_282 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 443;

                goto try_except_handler_141;
            }
            if (tmp_condition_result_282 == NUITKA_BOOL_TRUE) {
                goto branch_yes_188;
            } else {
                goto branch_no_188;
            }
            assert(tmp_condition_result_282 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_188:;
        CHECK_OBJECT(tmp_class_creation_47__bases_orig);
        tmp_dictset_value = tmp_class_creation_47__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__47_UnsupportedTLSVersionWarning_443, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 443;

            goto try_except_handler_141;
        }
        branch_no_188:;
        {
            PyObject *tmp_assign_source_381;
            PyObject *tmp_called_value_94;
            PyObject *tmp_args_value_94;
            PyObject *tmp_tuple_element_186;
            PyObject *tmp_kwargs_value_94;
            CHECK_OBJECT(tmp_class_creation_47__metaclass);
            tmp_called_value_94 = tmp_class_creation_47__metaclass;
            tmp_tuple_element_186 = mod_consts[186];
            tmp_args_value_94 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_94, 0, tmp_tuple_element_186);
            CHECK_OBJECT(tmp_class_creation_47__bases);
            tmp_tuple_element_186 = tmp_class_creation_47__bases;
            PyTuple_SET_ITEM0(tmp_args_value_94, 1, tmp_tuple_element_186);
            tmp_tuple_element_186 = locals_botocore$exceptions$$$class__47_UnsupportedTLSVersionWarning_443;
            PyTuple_SET_ITEM0(tmp_args_value_94, 2, tmp_tuple_element_186);
            CHECK_OBJECT(tmp_class_creation_47__class_decl_dict);
            tmp_kwargs_value_94 = tmp_class_creation_47__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 443;
            tmp_assign_source_381 = CALL_FUNCTION(tmp_called_value_94, tmp_args_value_94, tmp_kwargs_value_94);
            Py_DECREF(tmp_args_value_94);
            if (tmp_assign_source_381 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 443;

                goto try_except_handler_141;
            }
            assert(outline_46_var___class__ == NULL);
            outline_46_var___class__ = tmp_assign_source_381;
        }
        CHECK_OBJECT(outline_46_var___class__);
        tmp_assign_source_380 = outline_46_var___class__;
        Py_INCREF(tmp_assign_source_380);
        goto try_return_handler_141;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_141:;
        Py_DECREF(locals_botocore$exceptions$$$class__47_UnsupportedTLSVersionWarning_443);
        locals_botocore$exceptions$$$class__47_UnsupportedTLSVersionWarning_443 = NULL;
        goto try_return_handler_140;
        // Exception handler code:
        try_except_handler_141:;
        exception_keeper_type_139 = exception_type;
        exception_keeper_value_139 = exception_value;
        exception_keeper_tb_139 = exception_tb;
        exception_keeper_lineno_139 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__47_UnsupportedTLSVersionWarning_443);
        locals_botocore$exceptions$$$class__47_UnsupportedTLSVersionWarning_443 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_139;
        exception_value = exception_keeper_value_139;
        exception_tb = exception_keeper_tb_139;
        exception_lineno = exception_keeper_lineno_139;

        goto try_except_handler_140;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_140:;
        CHECK_OBJECT(outline_46_var___class__);
        Py_DECREF(outline_46_var___class__);
        outline_46_var___class__ = NULL;
        goto outline_result_47;
        // Exception handler code:
        try_except_handler_140:;
        exception_keeper_type_140 = exception_type;
        exception_keeper_value_140 = exception_value;
        exception_keeper_tb_140 = exception_tb;
        exception_keeper_lineno_140 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_140;
        exception_value = exception_keeper_value_140;
        exception_tb = exception_keeper_tb_140;
        exception_lineno = exception_keeper_lineno_140;

        goto outline_exception_47;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_47:;
        exception_lineno = 443;
        goto try_except_handler_139;
        outline_result_47:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[186], tmp_assign_source_380);
    }
    goto try_end_47;
    // Exception handler code:
    try_except_handler_139:;
    exception_keeper_type_141 = exception_type;
    exception_keeper_value_141 = exception_value;
    exception_keeper_tb_141 = exception_tb;
    exception_keeper_lineno_141 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_47__bases_orig);
    tmp_class_creation_47__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_47__bases);
    tmp_class_creation_47__bases = NULL;
    Py_XDECREF(tmp_class_creation_47__class_decl_dict);
    tmp_class_creation_47__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_47__metaclass);
    tmp_class_creation_47__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_47__prepared);
    tmp_class_creation_47__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_141;
    exception_value = exception_keeper_value_141;
    exception_tb = exception_keeper_tb_141;
    exception_lineno = exception_keeper_lineno_141;

    goto frame_exception_exit_1;
    // End of try:
    try_end_47:;
    CHECK_OBJECT(tmp_class_creation_47__bases_orig);
    Py_DECREF(tmp_class_creation_47__bases_orig);
    tmp_class_creation_47__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_47__bases);
    Py_DECREF(tmp_class_creation_47__bases);
    tmp_class_creation_47__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_47__class_decl_dict);
    Py_DECREF(tmp_class_creation_47__class_decl_dict);
    tmp_class_creation_47__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_47__metaclass);
    Py_DECREF(tmp_class_creation_47__metaclass);
    tmp_class_creation_47__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_47__prepared);
    Py_DECREF(tmp_class_creation_47__prepared);
    tmp_class_creation_47__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_382;
        PyObject *tmp_tuple_element_187;
        tmp_tuple_element_187 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[185]);

        if (unlikely(tmp_tuple_element_187 == NULL)) {
            tmp_tuple_element_187 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[185]);
        }

        if (tmp_tuple_element_187 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 448;

            goto try_except_handler_142;
        }
        tmp_assign_source_382 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_382, 0, tmp_tuple_element_187);
        assert(tmp_class_creation_48__bases_orig == NULL);
        tmp_class_creation_48__bases_orig = tmp_assign_source_382;
    }
    {
        PyObject *tmp_assign_source_383;
        PyObject *tmp_dircall_arg1_48;
        CHECK_OBJECT(tmp_class_creation_48__bases_orig);
        tmp_dircall_arg1_48 = tmp_class_creation_48__bases_orig;
        Py_INCREF(tmp_dircall_arg1_48);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_48};
            tmp_assign_source_383 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_383 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 448;

            goto try_except_handler_142;
        }
        assert(tmp_class_creation_48__bases == NULL);
        tmp_class_creation_48__bases = tmp_assign_source_383;
    }
    {
        PyObject *tmp_assign_source_384;
        tmp_assign_source_384 = PyDict_New();
        assert(tmp_class_creation_48__class_decl_dict == NULL);
        tmp_class_creation_48__class_decl_dict = tmp_assign_source_384;
    }
    {
        PyObject *tmp_assign_source_385;
        PyObject *tmp_metaclass_value_48;
        bool tmp_condition_result_283;
        PyObject *tmp_key_value_142;
        PyObject *tmp_dict_arg_value_142;
        PyObject *tmp_dict_arg_value_143;
        PyObject *tmp_key_value_143;
        nuitka_bool tmp_condition_result_284;
        int tmp_truth_name_48;
        PyObject *tmp_type_arg_95;
        PyObject *tmp_expression_value_246;
        PyObject *tmp_subscript_value_48;
        PyObject *tmp_bases_value_48;
        tmp_key_value_142 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_48__class_decl_dict);
        tmp_dict_arg_value_142 = tmp_class_creation_48__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_142, tmp_key_value_142);
        assert(!(tmp_res == -1));
        tmp_condition_result_283 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_283 != false) {
            goto condexpr_true_95;
        } else {
            goto condexpr_false_95;
        }
        condexpr_true_95:;
        CHECK_OBJECT(tmp_class_creation_48__class_decl_dict);
        tmp_dict_arg_value_143 = tmp_class_creation_48__class_decl_dict;
        tmp_key_value_143 = mod_consts[43];
        tmp_metaclass_value_48 = DICT_GET_ITEM0(tmp_dict_arg_value_143, tmp_key_value_143);
        if (tmp_metaclass_value_48 == NULL) {
            tmp_metaclass_value_48 = Py_None;
        }
        assert(!(tmp_metaclass_value_48 == NULL));
        Py_INCREF(tmp_metaclass_value_48);
        goto condexpr_end_95;
        condexpr_false_95:;
        CHECK_OBJECT(tmp_class_creation_48__bases);
        tmp_truth_name_48 = CHECK_IF_TRUE(tmp_class_creation_48__bases);
        if (tmp_truth_name_48 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 448;

            goto try_except_handler_142;
        }
        tmp_condition_result_284 = tmp_truth_name_48 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_284 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_96;
        } else {
            goto condexpr_false_96;
        }
        condexpr_true_96:;
        CHECK_OBJECT(tmp_class_creation_48__bases);
        tmp_expression_value_246 = tmp_class_creation_48__bases;
        tmp_subscript_value_48 = mod_consts[36];
        tmp_type_arg_95 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_246, tmp_subscript_value_48, 0);
        if (tmp_type_arg_95 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 448;

            goto try_except_handler_142;
        }
        tmp_metaclass_value_48 = BUILTIN_TYPE1(tmp_type_arg_95);
        Py_DECREF(tmp_type_arg_95);
        if (tmp_metaclass_value_48 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 448;

            goto try_except_handler_142;
        }
        goto condexpr_end_96;
        condexpr_false_96:;
        tmp_metaclass_value_48 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_48);
        condexpr_end_96:;
        condexpr_end_95:;
        CHECK_OBJECT(tmp_class_creation_48__bases);
        tmp_bases_value_48 = tmp_class_creation_48__bases;
        tmp_assign_source_385 = SELECT_METACLASS(tmp_metaclass_value_48, tmp_bases_value_48);
        Py_DECREF(tmp_metaclass_value_48);
        if (tmp_assign_source_385 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 448;

            goto try_except_handler_142;
        }
        assert(tmp_class_creation_48__metaclass == NULL);
        tmp_class_creation_48__metaclass = tmp_assign_source_385;
    }
    {
        bool tmp_condition_result_285;
        PyObject *tmp_key_value_144;
        PyObject *tmp_dict_arg_value_144;
        tmp_key_value_144 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_48__class_decl_dict);
        tmp_dict_arg_value_144 = tmp_class_creation_48__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_144, tmp_key_value_144);
        assert(!(tmp_res == -1));
        tmp_condition_result_285 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_285 != false) {
            goto branch_yes_189;
        } else {
            goto branch_no_189;
        }
    }
    branch_yes_189:;
    CHECK_OBJECT(tmp_class_creation_48__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_48__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 448;

        goto try_except_handler_142;
    }
    branch_no_189:;
    {
        nuitka_bool tmp_condition_result_286;
        PyObject *tmp_expression_value_247;
        CHECK_OBJECT(tmp_class_creation_48__metaclass);
        tmp_expression_value_247 = tmp_class_creation_48__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_247, mod_consts[44]);
        tmp_condition_result_286 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_286 == NUITKA_BOOL_TRUE) {
            goto branch_yes_190;
        } else {
            goto branch_no_190;
        }
    }
    branch_yes_190:;
    {
        PyObject *tmp_assign_source_386;
        PyObject *tmp_called_value_95;
        PyObject *tmp_expression_value_248;
        PyObject *tmp_args_value_95;
        PyObject *tmp_tuple_element_188;
        PyObject *tmp_kwargs_value_95;
        CHECK_OBJECT(tmp_class_creation_48__metaclass);
        tmp_expression_value_248 = tmp_class_creation_48__metaclass;
        tmp_called_value_95 = LOOKUP_ATTRIBUTE(tmp_expression_value_248, mod_consts[44]);
        if (tmp_called_value_95 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 448;

            goto try_except_handler_142;
        }
        tmp_tuple_element_188 = mod_consts[188];
        tmp_args_value_95 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_95, 0, tmp_tuple_element_188);
        CHECK_OBJECT(tmp_class_creation_48__bases);
        tmp_tuple_element_188 = tmp_class_creation_48__bases;
        PyTuple_SET_ITEM0(tmp_args_value_95, 1, tmp_tuple_element_188);
        CHECK_OBJECT(tmp_class_creation_48__class_decl_dict);
        tmp_kwargs_value_95 = tmp_class_creation_48__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 448;
        tmp_assign_source_386 = CALL_FUNCTION(tmp_called_value_95, tmp_args_value_95, tmp_kwargs_value_95);
        Py_DECREF(tmp_called_value_95);
        Py_DECREF(tmp_args_value_95);
        if (tmp_assign_source_386 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 448;

            goto try_except_handler_142;
        }
        assert(tmp_class_creation_48__prepared == NULL);
        tmp_class_creation_48__prepared = tmp_assign_source_386;
    }
    {
        bool tmp_condition_result_287;
        PyObject *tmp_operand_value_48;
        PyObject *tmp_expression_value_249;
        CHECK_OBJECT(tmp_class_creation_48__prepared);
        tmp_expression_value_249 = tmp_class_creation_48__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_249, mod_consts[46]);
        tmp_operand_value_48 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_48);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 448;

            goto try_except_handler_142;
        }
        tmp_condition_result_287 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_287 != false) {
            goto branch_yes_191;
        } else {
            goto branch_no_191;
        }
    }
    branch_yes_191:;
    {
        PyObject *tmp_raise_type_48;
        PyObject *tmp_raise_value_48;
        PyObject *tmp_left_value_48;
        PyObject *tmp_right_value_48;
        PyObject *tmp_tuple_element_189;
        PyObject *tmp_getattr_target_48;
        PyObject *tmp_getattr_attr_48;
        PyObject *tmp_getattr_default_48;
        tmp_raise_type_48 = PyExc_TypeError;
        tmp_left_value_48 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_48__metaclass);
        tmp_getattr_target_48 = tmp_class_creation_48__metaclass;
        tmp_getattr_attr_48 = mod_consts[48];
        tmp_getattr_default_48 = mod_consts[49];
        tmp_tuple_element_189 = BUILTIN_GETATTR(tmp_getattr_target_48, tmp_getattr_attr_48, tmp_getattr_default_48);
        if (tmp_tuple_element_189 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 448;

            goto try_except_handler_142;
        }
        tmp_right_value_48 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_250;
            PyObject *tmp_type_arg_96;
            PyTuple_SET_ITEM(tmp_right_value_48, 0, tmp_tuple_element_189);
            CHECK_OBJECT(tmp_class_creation_48__prepared);
            tmp_type_arg_96 = tmp_class_creation_48__prepared;
            tmp_expression_value_250 = BUILTIN_TYPE1(tmp_type_arg_96);
            assert(!(tmp_expression_value_250 == NULL));
            tmp_tuple_element_189 = LOOKUP_ATTRIBUTE(tmp_expression_value_250, mod_consts[48]);
            Py_DECREF(tmp_expression_value_250);
            if (tmp_tuple_element_189 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 448;

                goto tuple_build_exception_52;
            }
            PyTuple_SET_ITEM(tmp_right_value_48, 1, tmp_tuple_element_189);
        }
        goto tuple_build_noexception_52;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_52:;
        Py_DECREF(tmp_right_value_48);
        goto try_except_handler_142;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_52:;
        tmp_raise_value_48 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_48, tmp_right_value_48);
        Py_DECREF(tmp_right_value_48);
        if (tmp_raise_value_48 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 448;

            goto try_except_handler_142;
        }
        exception_type = tmp_raise_type_48;
        Py_INCREF(tmp_raise_type_48);
        exception_value = tmp_raise_value_48;
        exception_lineno = 448;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_142;
    }
    branch_no_191:;
    goto branch_end_190;
    branch_no_190:;
    {
        PyObject *tmp_assign_source_387;
        tmp_assign_source_387 = PyDict_New();
        assert(tmp_class_creation_48__prepared == NULL);
        tmp_class_creation_48__prepared = tmp_assign_source_387;
    }
    branch_end_190:;
    {
        PyObject *tmp_assign_source_388;
        {
            PyObject *tmp_set_locals_48;
            CHECK_OBJECT(tmp_class_creation_48__prepared);
            tmp_set_locals_48 = tmp_class_creation_48__prepared;
            locals_botocore$exceptions$$$class__48_ImminentRemovalWarning_448 = tmp_set_locals_48;
            Py_INCREF(tmp_set_locals_48);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__48_ImminentRemovalWarning_448, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 448;

            goto try_except_handler_144;
        }
        tmp_dictset_value = mod_consts[188];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__48_ImminentRemovalWarning_448, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 448;

            goto try_except_handler_144;
        }
        {
            nuitka_bool tmp_condition_result_288;
            PyObject *tmp_cmp_expr_left_48;
            PyObject *tmp_cmp_expr_right_48;
            CHECK_OBJECT(tmp_class_creation_48__bases);
            tmp_cmp_expr_left_48 = tmp_class_creation_48__bases;
            CHECK_OBJECT(tmp_class_creation_48__bases_orig);
            tmp_cmp_expr_right_48 = tmp_class_creation_48__bases_orig;
            tmp_condition_result_288 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_48, tmp_cmp_expr_right_48);
            if (tmp_condition_result_288 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 448;

                goto try_except_handler_144;
            }
            if (tmp_condition_result_288 == NUITKA_BOOL_TRUE) {
                goto branch_yes_192;
            } else {
                goto branch_no_192;
            }
            assert(tmp_condition_result_288 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_192:;
        CHECK_OBJECT(tmp_class_creation_48__bases_orig);
        tmp_dictset_value = tmp_class_creation_48__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__48_ImminentRemovalWarning_448, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 448;

            goto try_except_handler_144;
        }
        branch_no_192:;
        {
            PyObject *tmp_assign_source_389;
            PyObject *tmp_called_value_96;
            PyObject *tmp_args_value_96;
            PyObject *tmp_tuple_element_190;
            PyObject *tmp_kwargs_value_96;
            CHECK_OBJECT(tmp_class_creation_48__metaclass);
            tmp_called_value_96 = tmp_class_creation_48__metaclass;
            tmp_tuple_element_190 = mod_consts[188];
            tmp_args_value_96 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_96, 0, tmp_tuple_element_190);
            CHECK_OBJECT(tmp_class_creation_48__bases);
            tmp_tuple_element_190 = tmp_class_creation_48__bases;
            PyTuple_SET_ITEM0(tmp_args_value_96, 1, tmp_tuple_element_190);
            tmp_tuple_element_190 = locals_botocore$exceptions$$$class__48_ImminentRemovalWarning_448;
            PyTuple_SET_ITEM0(tmp_args_value_96, 2, tmp_tuple_element_190);
            CHECK_OBJECT(tmp_class_creation_48__class_decl_dict);
            tmp_kwargs_value_96 = tmp_class_creation_48__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 448;
            tmp_assign_source_389 = CALL_FUNCTION(tmp_called_value_96, tmp_args_value_96, tmp_kwargs_value_96);
            Py_DECREF(tmp_args_value_96);
            if (tmp_assign_source_389 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 448;

                goto try_except_handler_144;
            }
            assert(outline_47_var___class__ == NULL);
            outline_47_var___class__ = tmp_assign_source_389;
        }
        CHECK_OBJECT(outline_47_var___class__);
        tmp_assign_source_388 = outline_47_var___class__;
        Py_INCREF(tmp_assign_source_388);
        goto try_return_handler_144;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_144:;
        Py_DECREF(locals_botocore$exceptions$$$class__48_ImminentRemovalWarning_448);
        locals_botocore$exceptions$$$class__48_ImminentRemovalWarning_448 = NULL;
        goto try_return_handler_143;
        // Exception handler code:
        try_except_handler_144:;
        exception_keeper_type_142 = exception_type;
        exception_keeper_value_142 = exception_value;
        exception_keeper_tb_142 = exception_tb;
        exception_keeper_lineno_142 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__48_ImminentRemovalWarning_448);
        locals_botocore$exceptions$$$class__48_ImminentRemovalWarning_448 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_142;
        exception_value = exception_keeper_value_142;
        exception_tb = exception_keeper_tb_142;
        exception_lineno = exception_keeper_lineno_142;

        goto try_except_handler_143;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_143:;
        CHECK_OBJECT(outline_47_var___class__);
        Py_DECREF(outline_47_var___class__);
        outline_47_var___class__ = NULL;
        goto outline_result_48;
        // Exception handler code:
        try_except_handler_143:;
        exception_keeper_type_143 = exception_type;
        exception_keeper_value_143 = exception_value;
        exception_keeper_tb_143 = exception_tb;
        exception_keeper_lineno_143 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_143;
        exception_value = exception_keeper_value_143;
        exception_tb = exception_keeper_tb_143;
        exception_lineno = exception_keeper_lineno_143;

        goto outline_exception_48;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_48:;
        exception_lineno = 448;
        goto try_except_handler_142;
        outline_result_48:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[188], tmp_assign_source_388);
    }
    goto try_end_48;
    // Exception handler code:
    try_except_handler_142:;
    exception_keeper_type_144 = exception_type;
    exception_keeper_value_144 = exception_value;
    exception_keeper_tb_144 = exception_tb;
    exception_keeper_lineno_144 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_48__bases_orig);
    tmp_class_creation_48__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_48__bases);
    tmp_class_creation_48__bases = NULL;
    Py_XDECREF(tmp_class_creation_48__class_decl_dict);
    tmp_class_creation_48__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_48__metaclass);
    tmp_class_creation_48__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_48__prepared);
    tmp_class_creation_48__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_144;
    exception_value = exception_keeper_value_144;
    exception_tb = exception_keeper_tb_144;
    exception_lineno = exception_keeper_lineno_144;

    goto frame_exception_exit_1;
    // End of try:
    try_end_48:;
    CHECK_OBJECT(tmp_class_creation_48__bases_orig);
    Py_DECREF(tmp_class_creation_48__bases_orig);
    tmp_class_creation_48__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_48__bases);
    Py_DECREF(tmp_class_creation_48__bases);
    tmp_class_creation_48__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_48__class_decl_dict);
    Py_DECREF(tmp_class_creation_48__class_decl_dict);
    tmp_class_creation_48__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_48__metaclass);
    Py_DECREF(tmp_class_creation_48__metaclass);
    tmp_class_creation_48__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_48__prepared);
    Py_DECREF(tmp_class_creation_48__prepared);
    tmp_class_creation_48__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_390;
        PyObject *tmp_tuple_element_191;
        tmp_tuple_element_191 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_191 == NULL)) {
            tmp_tuple_element_191 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_191 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 452;

            goto try_except_handler_145;
        }
        tmp_assign_source_390 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_390, 0, tmp_tuple_element_191);
        assert(tmp_class_creation_49__bases_orig == NULL);
        tmp_class_creation_49__bases_orig = tmp_assign_source_390;
    }
    {
        PyObject *tmp_assign_source_391;
        PyObject *tmp_dircall_arg1_49;
        CHECK_OBJECT(tmp_class_creation_49__bases_orig);
        tmp_dircall_arg1_49 = tmp_class_creation_49__bases_orig;
        Py_INCREF(tmp_dircall_arg1_49);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_49};
            tmp_assign_source_391 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_391 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 452;

            goto try_except_handler_145;
        }
        assert(tmp_class_creation_49__bases == NULL);
        tmp_class_creation_49__bases = tmp_assign_source_391;
    }
    {
        PyObject *tmp_assign_source_392;
        tmp_assign_source_392 = PyDict_New();
        assert(tmp_class_creation_49__class_decl_dict == NULL);
        tmp_class_creation_49__class_decl_dict = tmp_assign_source_392;
    }
    {
        PyObject *tmp_assign_source_393;
        PyObject *tmp_metaclass_value_49;
        bool tmp_condition_result_289;
        PyObject *tmp_key_value_145;
        PyObject *tmp_dict_arg_value_145;
        PyObject *tmp_dict_arg_value_146;
        PyObject *tmp_key_value_146;
        nuitka_bool tmp_condition_result_290;
        int tmp_truth_name_49;
        PyObject *tmp_type_arg_97;
        PyObject *tmp_expression_value_251;
        PyObject *tmp_subscript_value_49;
        PyObject *tmp_bases_value_49;
        tmp_key_value_145 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_49__class_decl_dict);
        tmp_dict_arg_value_145 = tmp_class_creation_49__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_145, tmp_key_value_145);
        assert(!(tmp_res == -1));
        tmp_condition_result_289 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_289 != false) {
            goto condexpr_true_97;
        } else {
            goto condexpr_false_97;
        }
        condexpr_true_97:;
        CHECK_OBJECT(tmp_class_creation_49__class_decl_dict);
        tmp_dict_arg_value_146 = tmp_class_creation_49__class_decl_dict;
        tmp_key_value_146 = mod_consts[43];
        tmp_metaclass_value_49 = DICT_GET_ITEM0(tmp_dict_arg_value_146, tmp_key_value_146);
        if (tmp_metaclass_value_49 == NULL) {
            tmp_metaclass_value_49 = Py_None;
        }
        assert(!(tmp_metaclass_value_49 == NULL));
        Py_INCREF(tmp_metaclass_value_49);
        goto condexpr_end_97;
        condexpr_false_97:;
        CHECK_OBJECT(tmp_class_creation_49__bases);
        tmp_truth_name_49 = CHECK_IF_TRUE(tmp_class_creation_49__bases);
        if (tmp_truth_name_49 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 452;

            goto try_except_handler_145;
        }
        tmp_condition_result_290 = tmp_truth_name_49 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_290 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_98;
        } else {
            goto condexpr_false_98;
        }
        condexpr_true_98:;
        CHECK_OBJECT(tmp_class_creation_49__bases);
        tmp_expression_value_251 = tmp_class_creation_49__bases;
        tmp_subscript_value_49 = mod_consts[36];
        tmp_type_arg_97 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_251, tmp_subscript_value_49, 0);
        if (tmp_type_arg_97 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 452;

            goto try_except_handler_145;
        }
        tmp_metaclass_value_49 = BUILTIN_TYPE1(tmp_type_arg_97);
        Py_DECREF(tmp_type_arg_97);
        if (tmp_metaclass_value_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 452;

            goto try_except_handler_145;
        }
        goto condexpr_end_98;
        condexpr_false_98:;
        tmp_metaclass_value_49 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_49);
        condexpr_end_98:;
        condexpr_end_97:;
        CHECK_OBJECT(tmp_class_creation_49__bases);
        tmp_bases_value_49 = tmp_class_creation_49__bases;
        tmp_assign_source_393 = SELECT_METACLASS(tmp_metaclass_value_49, tmp_bases_value_49);
        Py_DECREF(tmp_metaclass_value_49);
        if (tmp_assign_source_393 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 452;

            goto try_except_handler_145;
        }
        assert(tmp_class_creation_49__metaclass == NULL);
        tmp_class_creation_49__metaclass = tmp_assign_source_393;
    }
    {
        bool tmp_condition_result_291;
        PyObject *tmp_key_value_147;
        PyObject *tmp_dict_arg_value_147;
        tmp_key_value_147 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_49__class_decl_dict);
        tmp_dict_arg_value_147 = tmp_class_creation_49__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_147, tmp_key_value_147);
        assert(!(tmp_res == -1));
        tmp_condition_result_291 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_291 != false) {
            goto branch_yes_193;
        } else {
            goto branch_no_193;
        }
    }
    branch_yes_193:;
    CHECK_OBJECT(tmp_class_creation_49__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_49__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 452;

        goto try_except_handler_145;
    }
    branch_no_193:;
    {
        nuitka_bool tmp_condition_result_292;
        PyObject *tmp_expression_value_252;
        CHECK_OBJECT(tmp_class_creation_49__metaclass);
        tmp_expression_value_252 = tmp_class_creation_49__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_252, mod_consts[44]);
        tmp_condition_result_292 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_292 == NUITKA_BOOL_TRUE) {
            goto branch_yes_194;
        } else {
            goto branch_no_194;
        }
    }
    branch_yes_194:;
    {
        PyObject *tmp_assign_source_394;
        PyObject *tmp_called_value_97;
        PyObject *tmp_expression_value_253;
        PyObject *tmp_args_value_97;
        PyObject *tmp_tuple_element_192;
        PyObject *tmp_kwargs_value_97;
        CHECK_OBJECT(tmp_class_creation_49__metaclass);
        tmp_expression_value_253 = tmp_class_creation_49__metaclass;
        tmp_called_value_97 = LOOKUP_ATTRIBUTE(tmp_expression_value_253, mod_consts[44]);
        if (tmp_called_value_97 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 452;

            goto try_except_handler_145;
        }
        tmp_tuple_element_192 = mod_consts[189];
        tmp_args_value_97 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_97, 0, tmp_tuple_element_192);
        CHECK_OBJECT(tmp_class_creation_49__bases);
        tmp_tuple_element_192 = tmp_class_creation_49__bases;
        PyTuple_SET_ITEM0(tmp_args_value_97, 1, tmp_tuple_element_192);
        CHECK_OBJECT(tmp_class_creation_49__class_decl_dict);
        tmp_kwargs_value_97 = tmp_class_creation_49__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 452;
        tmp_assign_source_394 = CALL_FUNCTION(tmp_called_value_97, tmp_args_value_97, tmp_kwargs_value_97);
        Py_DECREF(tmp_called_value_97);
        Py_DECREF(tmp_args_value_97);
        if (tmp_assign_source_394 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 452;

            goto try_except_handler_145;
        }
        assert(tmp_class_creation_49__prepared == NULL);
        tmp_class_creation_49__prepared = tmp_assign_source_394;
    }
    {
        bool tmp_condition_result_293;
        PyObject *tmp_operand_value_49;
        PyObject *tmp_expression_value_254;
        CHECK_OBJECT(tmp_class_creation_49__prepared);
        tmp_expression_value_254 = tmp_class_creation_49__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_254, mod_consts[46]);
        tmp_operand_value_49 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_49);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 452;

            goto try_except_handler_145;
        }
        tmp_condition_result_293 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_293 != false) {
            goto branch_yes_195;
        } else {
            goto branch_no_195;
        }
    }
    branch_yes_195:;
    {
        PyObject *tmp_raise_type_49;
        PyObject *tmp_raise_value_49;
        PyObject *tmp_left_value_49;
        PyObject *tmp_right_value_49;
        PyObject *tmp_tuple_element_193;
        PyObject *tmp_getattr_target_49;
        PyObject *tmp_getattr_attr_49;
        PyObject *tmp_getattr_default_49;
        tmp_raise_type_49 = PyExc_TypeError;
        tmp_left_value_49 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_49__metaclass);
        tmp_getattr_target_49 = tmp_class_creation_49__metaclass;
        tmp_getattr_attr_49 = mod_consts[48];
        tmp_getattr_default_49 = mod_consts[49];
        tmp_tuple_element_193 = BUILTIN_GETATTR(tmp_getattr_target_49, tmp_getattr_attr_49, tmp_getattr_default_49);
        if (tmp_tuple_element_193 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 452;

            goto try_except_handler_145;
        }
        tmp_right_value_49 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_255;
            PyObject *tmp_type_arg_98;
            PyTuple_SET_ITEM(tmp_right_value_49, 0, tmp_tuple_element_193);
            CHECK_OBJECT(tmp_class_creation_49__prepared);
            tmp_type_arg_98 = tmp_class_creation_49__prepared;
            tmp_expression_value_255 = BUILTIN_TYPE1(tmp_type_arg_98);
            assert(!(tmp_expression_value_255 == NULL));
            tmp_tuple_element_193 = LOOKUP_ATTRIBUTE(tmp_expression_value_255, mod_consts[48]);
            Py_DECREF(tmp_expression_value_255);
            if (tmp_tuple_element_193 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 452;

                goto tuple_build_exception_53;
            }
            PyTuple_SET_ITEM(tmp_right_value_49, 1, tmp_tuple_element_193);
        }
        goto tuple_build_noexception_53;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_53:;
        Py_DECREF(tmp_right_value_49);
        goto try_except_handler_145;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_53:;
        tmp_raise_value_49 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_49, tmp_right_value_49);
        Py_DECREF(tmp_right_value_49);
        if (tmp_raise_value_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 452;

            goto try_except_handler_145;
        }
        exception_type = tmp_raise_type_49;
        Py_INCREF(tmp_raise_type_49);
        exception_value = tmp_raise_value_49;
        exception_lineno = 452;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_145;
    }
    branch_no_195:;
    goto branch_end_194;
    branch_no_194:;
    {
        PyObject *tmp_assign_source_395;
        tmp_assign_source_395 = PyDict_New();
        assert(tmp_class_creation_49__prepared == NULL);
        tmp_class_creation_49__prepared = tmp_assign_source_395;
    }
    branch_end_194:;
    {
        PyObject *tmp_assign_source_396;
        {
            PyObject *tmp_set_locals_49;
            CHECK_OBJECT(tmp_class_creation_49__prepared);
            tmp_set_locals_49 = tmp_class_creation_49__prepared;
            locals_botocore$exceptions$$$class__49_InvalidDNSNameError_452 = tmp_set_locals_49;
            Py_INCREF(tmp_set_locals_49);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__49_InvalidDNSNameError_452, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 452;

            goto try_except_handler_147;
        }
        tmp_dictset_value = mod_consts[190];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__49_InvalidDNSNameError_452, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 452;

            goto try_except_handler_147;
        }
        tmp_dictset_value = mod_consts[189];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__49_InvalidDNSNameError_452, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 452;

            goto try_except_handler_147;
        }
        if (isFrameUnusable(cache_frame_bdf37c8d25be648e28e98e50775f3cc7_46)) {
            Py_XDECREF(cache_frame_bdf37c8d25be648e28e98e50775f3cc7_46);

#if _DEBUG_REFCOUNTS
            if (cache_frame_bdf37c8d25be648e28e98e50775f3cc7_46 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_bdf37c8d25be648e28e98e50775f3cc7_46 = MAKE_FUNCTION_FRAME(codeobj_bdf37c8d25be648e28e98e50775f3cc7, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_bdf37c8d25be648e28e98e50775f3cc7_46->m_type_description == NULL);
        frame_bdf37c8d25be648e28e98e50775f3cc7_46 = cache_frame_bdf37c8d25be648e28e98e50775f3cc7_46;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_bdf37c8d25be648e28e98e50775f3cc7_46);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_bdf37c8d25be648e28e98e50775f3cc7_46) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[191];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__49_InvalidDNSNameError_452, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 454;
            type_description_2 = "o";
            goto frame_exception_exit_46;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_bdf37c8d25be648e28e98e50775f3cc7_46);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_45;

        frame_exception_exit_46:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_bdf37c8d25be648e28e98e50775f3cc7_46);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_bdf37c8d25be648e28e98e50775f3cc7_46, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_bdf37c8d25be648e28e98e50775f3cc7_46->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_bdf37c8d25be648e28e98e50775f3cc7_46, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_bdf37c8d25be648e28e98e50775f3cc7_46,
            type_description_2,
            outline_48_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_bdf37c8d25be648e28e98e50775f3cc7_46 == cache_frame_bdf37c8d25be648e28e98e50775f3cc7_46) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_bdf37c8d25be648e28e98e50775f3cc7_46);
            cache_frame_bdf37c8d25be648e28e98e50775f3cc7_46 = NULL;
        }

        assertFrameObject(frame_bdf37c8d25be648e28e98e50775f3cc7_46);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_45;

        frame_no_exception_45:;
        goto skip_nested_handling_45;
        nested_frame_exit_45:;

        goto try_except_handler_147;
        skip_nested_handling_45:;
        {
            nuitka_bool tmp_condition_result_294;
            PyObject *tmp_cmp_expr_left_49;
            PyObject *tmp_cmp_expr_right_49;
            CHECK_OBJECT(tmp_class_creation_49__bases);
            tmp_cmp_expr_left_49 = tmp_class_creation_49__bases;
            CHECK_OBJECT(tmp_class_creation_49__bases_orig);
            tmp_cmp_expr_right_49 = tmp_class_creation_49__bases_orig;
            tmp_condition_result_294 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_49, tmp_cmp_expr_right_49);
            if (tmp_condition_result_294 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 452;

                goto try_except_handler_147;
            }
            if (tmp_condition_result_294 == NUITKA_BOOL_TRUE) {
                goto branch_yes_196;
            } else {
                goto branch_no_196;
            }
            assert(tmp_condition_result_294 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_196:;
        CHECK_OBJECT(tmp_class_creation_49__bases_orig);
        tmp_dictset_value = tmp_class_creation_49__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__49_InvalidDNSNameError_452, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 452;

            goto try_except_handler_147;
        }
        branch_no_196:;
        {
            PyObject *tmp_assign_source_397;
            PyObject *tmp_called_value_98;
            PyObject *tmp_args_value_98;
            PyObject *tmp_tuple_element_194;
            PyObject *tmp_kwargs_value_98;
            CHECK_OBJECT(tmp_class_creation_49__metaclass);
            tmp_called_value_98 = tmp_class_creation_49__metaclass;
            tmp_tuple_element_194 = mod_consts[189];
            tmp_args_value_98 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_98, 0, tmp_tuple_element_194);
            CHECK_OBJECT(tmp_class_creation_49__bases);
            tmp_tuple_element_194 = tmp_class_creation_49__bases;
            PyTuple_SET_ITEM0(tmp_args_value_98, 1, tmp_tuple_element_194);
            tmp_tuple_element_194 = locals_botocore$exceptions$$$class__49_InvalidDNSNameError_452;
            PyTuple_SET_ITEM0(tmp_args_value_98, 2, tmp_tuple_element_194);
            CHECK_OBJECT(tmp_class_creation_49__class_decl_dict);
            tmp_kwargs_value_98 = tmp_class_creation_49__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 452;
            tmp_assign_source_397 = CALL_FUNCTION(tmp_called_value_98, tmp_args_value_98, tmp_kwargs_value_98);
            Py_DECREF(tmp_args_value_98);
            if (tmp_assign_source_397 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 452;

                goto try_except_handler_147;
            }
            assert(outline_48_var___class__ == NULL);
            outline_48_var___class__ = tmp_assign_source_397;
        }
        CHECK_OBJECT(outline_48_var___class__);
        tmp_assign_source_396 = outline_48_var___class__;
        Py_INCREF(tmp_assign_source_396);
        goto try_return_handler_147;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_147:;
        Py_DECREF(locals_botocore$exceptions$$$class__49_InvalidDNSNameError_452);
        locals_botocore$exceptions$$$class__49_InvalidDNSNameError_452 = NULL;
        goto try_return_handler_146;
        // Exception handler code:
        try_except_handler_147:;
        exception_keeper_type_145 = exception_type;
        exception_keeper_value_145 = exception_value;
        exception_keeper_tb_145 = exception_tb;
        exception_keeper_lineno_145 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__49_InvalidDNSNameError_452);
        locals_botocore$exceptions$$$class__49_InvalidDNSNameError_452 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_145;
        exception_value = exception_keeper_value_145;
        exception_tb = exception_keeper_tb_145;
        exception_lineno = exception_keeper_lineno_145;

        goto try_except_handler_146;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_146:;
        CHECK_OBJECT(outline_48_var___class__);
        Py_DECREF(outline_48_var___class__);
        outline_48_var___class__ = NULL;
        goto outline_result_49;
        // Exception handler code:
        try_except_handler_146:;
        exception_keeper_type_146 = exception_type;
        exception_keeper_value_146 = exception_value;
        exception_keeper_tb_146 = exception_tb;
        exception_keeper_lineno_146 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_146;
        exception_value = exception_keeper_value_146;
        exception_tb = exception_keeper_tb_146;
        exception_lineno = exception_keeper_lineno_146;

        goto outline_exception_49;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_49:;
        exception_lineno = 452;
        goto try_except_handler_145;
        outline_result_49:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[189], tmp_assign_source_396);
    }
    goto try_end_49;
    // Exception handler code:
    try_except_handler_145:;
    exception_keeper_type_147 = exception_type;
    exception_keeper_value_147 = exception_value;
    exception_keeper_tb_147 = exception_tb;
    exception_keeper_lineno_147 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_49__bases_orig);
    tmp_class_creation_49__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_49__bases);
    tmp_class_creation_49__bases = NULL;
    Py_XDECREF(tmp_class_creation_49__class_decl_dict);
    tmp_class_creation_49__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_49__metaclass);
    tmp_class_creation_49__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_49__prepared);
    tmp_class_creation_49__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_147;
    exception_value = exception_keeper_value_147;
    exception_tb = exception_keeper_tb_147;
    exception_lineno = exception_keeper_lineno_147;

    goto frame_exception_exit_1;
    // End of try:
    try_end_49:;
    CHECK_OBJECT(tmp_class_creation_49__bases_orig);
    Py_DECREF(tmp_class_creation_49__bases_orig);
    tmp_class_creation_49__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_49__bases);
    Py_DECREF(tmp_class_creation_49__bases);
    tmp_class_creation_49__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_49__class_decl_dict);
    Py_DECREF(tmp_class_creation_49__class_decl_dict);
    tmp_class_creation_49__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_49__metaclass);
    Py_DECREF(tmp_class_creation_49__metaclass);
    tmp_class_creation_49__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_49__prepared);
    Py_DECREF(tmp_class_creation_49__prepared);
    tmp_class_creation_49__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_398;
        PyObject *tmp_tuple_element_195;
        tmp_tuple_element_195 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_195 == NULL)) {
            tmp_tuple_element_195 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_195 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 463;

            goto try_except_handler_148;
        }
        tmp_assign_source_398 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_398, 0, tmp_tuple_element_195);
        assert(tmp_class_creation_50__bases_orig == NULL);
        tmp_class_creation_50__bases_orig = tmp_assign_source_398;
    }
    {
        PyObject *tmp_assign_source_399;
        PyObject *tmp_dircall_arg1_50;
        CHECK_OBJECT(tmp_class_creation_50__bases_orig);
        tmp_dircall_arg1_50 = tmp_class_creation_50__bases_orig;
        Py_INCREF(tmp_dircall_arg1_50);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_50};
            tmp_assign_source_399 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_399 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 463;

            goto try_except_handler_148;
        }
        assert(tmp_class_creation_50__bases == NULL);
        tmp_class_creation_50__bases = tmp_assign_source_399;
    }
    {
        PyObject *tmp_assign_source_400;
        tmp_assign_source_400 = PyDict_New();
        assert(tmp_class_creation_50__class_decl_dict == NULL);
        tmp_class_creation_50__class_decl_dict = tmp_assign_source_400;
    }
    {
        PyObject *tmp_assign_source_401;
        PyObject *tmp_metaclass_value_50;
        bool tmp_condition_result_295;
        PyObject *tmp_key_value_148;
        PyObject *tmp_dict_arg_value_148;
        PyObject *tmp_dict_arg_value_149;
        PyObject *tmp_key_value_149;
        nuitka_bool tmp_condition_result_296;
        int tmp_truth_name_50;
        PyObject *tmp_type_arg_99;
        PyObject *tmp_expression_value_256;
        PyObject *tmp_subscript_value_50;
        PyObject *tmp_bases_value_50;
        tmp_key_value_148 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_50__class_decl_dict);
        tmp_dict_arg_value_148 = tmp_class_creation_50__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_148, tmp_key_value_148);
        assert(!(tmp_res == -1));
        tmp_condition_result_295 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_295 != false) {
            goto condexpr_true_99;
        } else {
            goto condexpr_false_99;
        }
        condexpr_true_99:;
        CHECK_OBJECT(tmp_class_creation_50__class_decl_dict);
        tmp_dict_arg_value_149 = tmp_class_creation_50__class_decl_dict;
        tmp_key_value_149 = mod_consts[43];
        tmp_metaclass_value_50 = DICT_GET_ITEM0(tmp_dict_arg_value_149, tmp_key_value_149);
        if (tmp_metaclass_value_50 == NULL) {
            tmp_metaclass_value_50 = Py_None;
        }
        assert(!(tmp_metaclass_value_50 == NULL));
        Py_INCREF(tmp_metaclass_value_50);
        goto condexpr_end_99;
        condexpr_false_99:;
        CHECK_OBJECT(tmp_class_creation_50__bases);
        tmp_truth_name_50 = CHECK_IF_TRUE(tmp_class_creation_50__bases);
        if (tmp_truth_name_50 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 463;

            goto try_except_handler_148;
        }
        tmp_condition_result_296 = tmp_truth_name_50 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_296 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_100;
        } else {
            goto condexpr_false_100;
        }
        condexpr_true_100:;
        CHECK_OBJECT(tmp_class_creation_50__bases);
        tmp_expression_value_256 = tmp_class_creation_50__bases;
        tmp_subscript_value_50 = mod_consts[36];
        tmp_type_arg_99 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_256, tmp_subscript_value_50, 0);
        if (tmp_type_arg_99 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 463;

            goto try_except_handler_148;
        }
        tmp_metaclass_value_50 = BUILTIN_TYPE1(tmp_type_arg_99);
        Py_DECREF(tmp_type_arg_99);
        if (tmp_metaclass_value_50 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 463;

            goto try_except_handler_148;
        }
        goto condexpr_end_100;
        condexpr_false_100:;
        tmp_metaclass_value_50 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_50);
        condexpr_end_100:;
        condexpr_end_99:;
        CHECK_OBJECT(tmp_class_creation_50__bases);
        tmp_bases_value_50 = tmp_class_creation_50__bases;
        tmp_assign_source_401 = SELECT_METACLASS(tmp_metaclass_value_50, tmp_bases_value_50);
        Py_DECREF(tmp_metaclass_value_50);
        if (tmp_assign_source_401 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 463;

            goto try_except_handler_148;
        }
        assert(tmp_class_creation_50__metaclass == NULL);
        tmp_class_creation_50__metaclass = tmp_assign_source_401;
    }
    {
        bool tmp_condition_result_297;
        PyObject *tmp_key_value_150;
        PyObject *tmp_dict_arg_value_150;
        tmp_key_value_150 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_50__class_decl_dict);
        tmp_dict_arg_value_150 = tmp_class_creation_50__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_150, tmp_key_value_150);
        assert(!(tmp_res == -1));
        tmp_condition_result_297 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_297 != false) {
            goto branch_yes_197;
        } else {
            goto branch_no_197;
        }
    }
    branch_yes_197:;
    CHECK_OBJECT(tmp_class_creation_50__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_50__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 463;

        goto try_except_handler_148;
    }
    branch_no_197:;
    {
        nuitka_bool tmp_condition_result_298;
        PyObject *tmp_expression_value_257;
        CHECK_OBJECT(tmp_class_creation_50__metaclass);
        tmp_expression_value_257 = tmp_class_creation_50__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_257, mod_consts[44]);
        tmp_condition_result_298 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_298 == NUITKA_BOOL_TRUE) {
            goto branch_yes_198;
        } else {
            goto branch_no_198;
        }
    }
    branch_yes_198:;
    {
        PyObject *tmp_assign_source_402;
        PyObject *tmp_called_value_99;
        PyObject *tmp_expression_value_258;
        PyObject *tmp_args_value_99;
        PyObject *tmp_tuple_element_196;
        PyObject *tmp_kwargs_value_99;
        CHECK_OBJECT(tmp_class_creation_50__metaclass);
        tmp_expression_value_258 = tmp_class_creation_50__metaclass;
        tmp_called_value_99 = LOOKUP_ATTRIBUTE(tmp_expression_value_258, mod_consts[44]);
        if (tmp_called_value_99 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 463;

            goto try_except_handler_148;
        }
        tmp_tuple_element_196 = mod_consts[192];
        tmp_args_value_99 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_99, 0, tmp_tuple_element_196);
        CHECK_OBJECT(tmp_class_creation_50__bases);
        tmp_tuple_element_196 = tmp_class_creation_50__bases;
        PyTuple_SET_ITEM0(tmp_args_value_99, 1, tmp_tuple_element_196);
        CHECK_OBJECT(tmp_class_creation_50__class_decl_dict);
        tmp_kwargs_value_99 = tmp_class_creation_50__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 463;
        tmp_assign_source_402 = CALL_FUNCTION(tmp_called_value_99, tmp_args_value_99, tmp_kwargs_value_99);
        Py_DECREF(tmp_called_value_99);
        Py_DECREF(tmp_args_value_99);
        if (tmp_assign_source_402 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 463;

            goto try_except_handler_148;
        }
        assert(tmp_class_creation_50__prepared == NULL);
        tmp_class_creation_50__prepared = tmp_assign_source_402;
    }
    {
        bool tmp_condition_result_299;
        PyObject *tmp_operand_value_50;
        PyObject *tmp_expression_value_259;
        CHECK_OBJECT(tmp_class_creation_50__prepared);
        tmp_expression_value_259 = tmp_class_creation_50__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_259, mod_consts[46]);
        tmp_operand_value_50 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_50);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 463;

            goto try_except_handler_148;
        }
        tmp_condition_result_299 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_299 != false) {
            goto branch_yes_199;
        } else {
            goto branch_no_199;
        }
    }
    branch_yes_199:;
    {
        PyObject *tmp_raise_type_50;
        PyObject *tmp_raise_value_50;
        PyObject *tmp_left_value_50;
        PyObject *tmp_right_value_50;
        PyObject *tmp_tuple_element_197;
        PyObject *tmp_getattr_target_50;
        PyObject *tmp_getattr_attr_50;
        PyObject *tmp_getattr_default_50;
        tmp_raise_type_50 = PyExc_TypeError;
        tmp_left_value_50 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_50__metaclass);
        tmp_getattr_target_50 = tmp_class_creation_50__metaclass;
        tmp_getattr_attr_50 = mod_consts[48];
        tmp_getattr_default_50 = mod_consts[49];
        tmp_tuple_element_197 = BUILTIN_GETATTR(tmp_getattr_target_50, tmp_getattr_attr_50, tmp_getattr_default_50);
        if (tmp_tuple_element_197 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 463;

            goto try_except_handler_148;
        }
        tmp_right_value_50 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_260;
            PyObject *tmp_type_arg_100;
            PyTuple_SET_ITEM(tmp_right_value_50, 0, tmp_tuple_element_197);
            CHECK_OBJECT(tmp_class_creation_50__prepared);
            tmp_type_arg_100 = tmp_class_creation_50__prepared;
            tmp_expression_value_260 = BUILTIN_TYPE1(tmp_type_arg_100);
            assert(!(tmp_expression_value_260 == NULL));
            tmp_tuple_element_197 = LOOKUP_ATTRIBUTE(tmp_expression_value_260, mod_consts[48]);
            Py_DECREF(tmp_expression_value_260);
            if (tmp_tuple_element_197 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 463;

                goto tuple_build_exception_54;
            }
            PyTuple_SET_ITEM(tmp_right_value_50, 1, tmp_tuple_element_197);
        }
        goto tuple_build_noexception_54;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_54:;
        Py_DECREF(tmp_right_value_50);
        goto try_except_handler_148;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_54:;
        tmp_raise_value_50 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_50, tmp_right_value_50);
        Py_DECREF(tmp_right_value_50);
        if (tmp_raise_value_50 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 463;

            goto try_except_handler_148;
        }
        exception_type = tmp_raise_type_50;
        Py_INCREF(tmp_raise_type_50);
        exception_value = tmp_raise_value_50;
        exception_lineno = 463;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_148;
    }
    branch_no_199:;
    goto branch_end_198;
    branch_no_198:;
    {
        PyObject *tmp_assign_source_403;
        tmp_assign_source_403 = PyDict_New();
        assert(tmp_class_creation_50__prepared == NULL);
        tmp_class_creation_50__prepared = tmp_assign_source_403;
    }
    branch_end_198:;
    {
        PyObject *tmp_assign_source_404;
        {
            PyObject *tmp_set_locals_50;
            CHECK_OBJECT(tmp_class_creation_50__prepared);
            tmp_set_locals_50 = tmp_class_creation_50__prepared;
            locals_botocore$exceptions$$$class__50_InvalidS3AddressingStyleError_463 = tmp_set_locals_50;
            Py_INCREF(tmp_set_locals_50);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__50_InvalidS3AddressingStyleError_463, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 463;

            goto try_except_handler_150;
        }
        tmp_dictset_value = mod_consts[193];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__50_InvalidS3AddressingStyleError_463, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 463;

            goto try_except_handler_150;
        }
        tmp_dictset_value = mod_consts[192];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__50_InvalidS3AddressingStyleError_463, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 463;

            goto try_except_handler_150;
        }
        if (isFrameUnusable(cache_frame_3d165ac0cfadd83deb25ea8760705966_47)) {
            Py_XDECREF(cache_frame_3d165ac0cfadd83deb25ea8760705966_47);

#if _DEBUG_REFCOUNTS
            if (cache_frame_3d165ac0cfadd83deb25ea8760705966_47 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_3d165ac0cfadd83deb25ea8760705966_47 = MAKE_FUNCTION_FRAME(codeobj_3d165ac0cfadd83deb25ea8760705966, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_3d165ac0cfadd83deb25ea8760705966_47->m_type_description == NULL);
        frame_3d165ac0cfadd83deb25ea8760705966_47 = cache_frame_3d165ac0cfadd83deb25ea8760705966_47;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_3d165ac0cfadd83deb25ea8760705966_47);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_3d165ac0cfadd83deb25ea8760705966_47) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[194];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__50_InvalidS3AddressingStyleError_463, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 465;
            type_description_2 = "o";
            goto frame_exception_exit_47;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_3d165ac0cfadd83deb25ea8760705966_47);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_46;

        frame_exception_exit_47:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_3d165ac0cfadd83deb25ea8760705966_47);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_3d165ac0cfadd83deb25ea8760705966_47, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_3d165ac0cfadd83deb25ea8760705966_47->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_3d165ac0cfadd83deb25ea8760705966_47, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_3d165ac0cfadd83deb25ea8760705966_47,
            type_description_2,
            outline_49_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_3d165ac0cfadd83deb25ea8760705966_47 == cache_frame_3d165ac0cfadd83deb25ea8760705966_47) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_3d165ac0cfadd83deb25ea8760705966_47);
            cache_frame_3d165ac0cfadd83deb25ea8760705966_47 = NULL;
        }

        assertFrameObject(frame_3d165ac0cfadd83deb25ea8760705966_47);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_46;

        frame_no_exception_46:;
        goto skip_nested_handling_46;
        nested_frame_exit_46:;

        goto try_except_handler_150;
        skip_nested_handling_46:;
        {
            nuitka_bool tmp_condition_result_300;
            PyObject *tmp_cmp_expr_left_50;
            PyObject *tmp_cmp_expr_right_50;
            CHECK_OBJECT(tmp_class_creation_50__bases);
            tmp_cmp_expr_left_50 = tmp_class_creation_50__bases;
            CHECK_OBJECT(tmp_class_creation_50__bases_orig);
            tmp_cmp_expr_right_50 = tmp_class_creation_50__bases_orig;
            tmp_condition_result_300 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_50, tmp_cmp_expr_right_50);
            if (tmp_condition_result_300 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 463;

                goto try_except_handler_150;
            }
            if (tmp_condition_result_300 == NUITKA_BOOL_TRUE) {
                goto branch_yes_200;
            } else {
                goto branch_no_200;
            }
            assert(tmp_condition_result_300 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_200:;
        CHECK_OBJECT(tmp_class_creation_50__bases_orig);
        tmp_dictset_value = tmp_class_creation_50__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__50_InvalidS3AddressingStyleError_463, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 463;

            goto try_except_handler_150;
        }
        branch_no_200:;
        {
            PyObject *tmp_assign_source_405;
            PyObject *tmp_called_value_100;
            PyObject *tmp_args_value_100;
            PyObject *tmp_tuple_element_198;
            PyObject *tmp_kwargs_value_100;
            CHECK_OBJECT(tmp_class_creation_50__metaclass);
            tmp_called_value_100 = tmp_class_creation_50__metaclass;
            tmp_tuple_element_198 = mod_consts[192];
            tmp_args_value_100 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_100, 0, tmp_tuple_element_198);
            CHECK_OBJECT(tmp_class_creation_50__bases);
            tmp_tuple_element_198 = tmp_class_creation_50__bases;
            PyTuple_SET_ITEM0(tmp_args_value_100, 1, tmp_tuple_element_198);
            tmp_tuple_element_198 = locals_botocore$exceptions$$$class__50_InvalidS3AddressingStyleError_463;
            PyTuple_SET_ITEM0(tmp_args_value_100, 2, tmp_tuple_element_198);
            CHECK_OBJECT(tmp_class_creation_50__class_decl_dict);
            tmp_kwargs_value_100 = tmp_class_creation_50__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 463;
            tmp_assign_source_405 = CALL_FUNCTION(tmp_called_value_100, tmp_args_value_100, tmp_kwargs_value_100);
            Py_DECREF(tmp_args_value_100);
            if (tmp_assign_source_405 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 463;

                goto try_except_handler_150;
            }
            assert(outline_49_var___class__ == NULL);
            outline_49_var___class__ = tmp_assign_source_405;
        }
        CHECK_OBJECT(outline_49_var___class__);
        tmp_assign_source_404 = outline_49_var___class__;
        Py_INCREF(tmp_assign_source_404);
        goto try_return_handler_150;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_150:;
        Py_DECREF(locals_botocore$exceptions$$$class__50_InvalidS3AddressingStyleError_463);
        locals_botocore$exceptions$$$class__50_InvalidS3AddressingStyleError_463 = NULL;
        goto try_return_handler_149;
        // Exception handler code:
        try_except_handler_150:;
        exception_keeper_type_148 = exception_type;
        exception_keeper_value_148 = exception_value;
        exception_keeper_tb_148 = exception_tb;
        exception_keeper_lineno_148 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__50_InvalidS3AddressingStyleError_463);
        locals_botocore$exceptions$$$class__50_InvalidS3AddressingStyleError_463 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_148;
        exception_value = exception_keeper_value_148;
        exception_tb = exception_keeper_tb_148;
        exception_lineno = exception_keeper_lineno_148;

        goto try_except_handler_149;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_149:;
        CHECK_OBJECT(outline_49_var___class__);
        Py_DECREF(outline_49_var___class__);
        outline_49_var___class__ = NULL;
        goto outline_result_50;
        // Exception handler code:
        try_except_handler_149:;
        exception_keeper_type_149 = exception_type;
        exception_keeper_value_149 = exception_value;
        exception_keeper_tb_149 = exception_tb;
        exception_keeper_lineno_149 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_149;
        exception_value = exception_keeper_value_149;
        exception_tb = exception_keeper_tb_149;
        exception_lineno = exception_keeper_lineno_149;

        goto outline_exception_50;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_50:;
        exception_lineno = 463;
        goto try_except_handler_148;
        outline_result_50:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[192], tmp_assign_source_404);
    }
    goto try_end_50;
    // Exception handler code:
    try_except_handler_148:;
    exception_keeper_type_150 = exception_type;
    exception_keeper_value_150 = exception_value;
    exception_keeper_tb_150 = exception_tb;
    exception_keeper_lineno_150 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_50__bases_orig);
    tmp_class_creation_50__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_50__bases);
    tmp_class_creation_50__bases = NULL;
    Py_XDECREF(tmp_class_creation_50__class_decl_dict);
    tmp_class_creation_50__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_50__metaclass);
    tmp_class_creation_50__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_50__prepared);
    tmp_class_creation_50__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_150;
    exception_value = exception_keeper_value_150;
    exception_tb = exception_keeper_tb_150;
    exception_lineno = exception_keeper_lineno_150;

    goto frame_exception_exit_1;
    // End of try:
    try_end_50:;
    CHECK_OBJECT(tmp_class_creation_50__bases_orig);
    Py_DECREF(tmp_class_creation_50__bases_orig);
    tmp_class_creation_50__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_50__bases);
    Py_DECREF(tmp_class_creation_50__bases);
    tmp_class_creation_50__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_50__class_decl_dict);
    Py_DECREF(tmp_class_creation_50__class_decl_dict);
    tmp_class_creation_50__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_50__metaclass);
    Py_DECREF(tmp_class_creation_50__metaclass);
    tmp_class_creation_50__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_50__prepared);
    Py_DECREF(tmp_class_creation_50__prepared);
    tmp_class_creation_50__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_406;
        PyObject *tmp_tuple_element_199;
        tmp_tuple_element_199 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_199 == NULL)) {
            tmp_tuple_element_199 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_199 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 471;

            goto try_except_handler_151;
        }
        tmp_assign_source_406 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_406, 0, tmp_tuple_element_199);
        assert(tmp_class_creation_51__bases_orig == NULL);
        tmp_class_creation_51__bases_orig = tmp_assign_source_406;
    }
    {
        PyObject *tmp_assign_source_407;
        PyObject *tmp_dircall_arg1_51;
        CHECK_OBJECT(tmp_class_creation_51__bases_orig);
        tmp_dircall_arg1_51 = tmp_class_creation_51__bases_orig;
        Py_INCREF(tmp_dircall_arg1_51);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_51};
            tmp_assign_source_407 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_407 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 471;

            goto try_except_handler_151;
        }
        assert(tmp_class_creation_51__bases == NULL);
        tmp_class_creation_51__bases = tmp_assign_source_407;
    }
    {
        PyObject *tmp_assign_source_408;
        tmp_assign_source_408 = PyDict_New();
        assert(tmp_class_creation_51__class_decl_dict == NULL);
        tmp_class_creation_51__class_decl_dict = tmp_assign_source_408;
    }
    {
        PyObject *tmp_assign_source_409;
        PyObject *tmp_metaclass_value_51;
        bool tmp_condition_result_301;
        PyObject *tmp_key_value_151;
        PyObject *tmp_dict_arg_value_151;
        PyObject *tmp_dict_arg_value_152;
        PyObject *tmp_key_value_152;
        nuitka_bool tmp_condition_result_302;
        int tmp_truth_name_51;
        PyObject *tmp_type_arg_101;
        PyObject *tmp_expression_value_261;
        PyObject *tmp_subscript_value_51;
        PyObject *tmp_bases_value_51;
        tmp_key_value_151 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_51__class_decl_dict);
        tmp_dict_arg_value_151 = tmp_class_creation_51__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_151, tmp_key_value_151);
        assert(!(tmp_res == -1));
        tmp_condition_result_301 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_301 != false) {
            goto condexpr_true_101;
        } else {
            goto condexpr_false_101;
        }
        condexpr_true_101:;
        CHECK_OBJECT(tmp_class_creation_51__class_decl_dict);
        tmp_dict_arg_value_152 = tmp_class_creation_51__class_decl_dict;
        tmp_key_value_152 = mod_consts[43];
        tmp_metaclass_value_51 = DICT_GET_ITEM0(tmp_dict_arg_value_152, tmp_key_value_152);
        if (tmp_metaclass_value_51 == NULL) {
            tmp_metaclass_value_51 = Py_None;
        }
        assert(!(tmp_metaclass_value_51 == NULL));
        Py_INCREF(tmp_metaclass_value_51);
        goto condexpr_end_101;
        condexpr_false_101:;
        CHECK_OBJECT(tmp_class_creation_51__bases);
        tmp_truth_name_51 = CHECK_IF_TRUE(tmp_class_creation_51__bases);
        if (tmp_truth_name_51 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 471;

            goto try_except_handler_151;
        }
        tmp_condition_result_302 = tmp_truth_name_51 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_302 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_102;
        } else {
            goto condexpr_false_102;
        }
        condexpr_true_102:;
        CHECK_OBJECT(tmp_class_creation_51__bases);
        tmp_expression_value_261 = tmp_class_creation_51__bases;
        tmp_subscript_value_51 = mod_consts[36];
        tmp_type_arg_101 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_261, tmp_subscript_value_51, 0);
        if (tmp_type_arg_101 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 471;

            goto try_except_handler_151;
        }
        tmp_metaclass_value_51 = BUILTIN_TYPE1(tmp_type_arg_101);
        Py_DECREF(tmp_type_arg_101);
        if (tmp_metaclass_value_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 471;

            goto try_except_handler_151;
        }
        goto condexpr_end_102;
        condexpr_false_102:;
        tmp_metaclass_value_51 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_51);
        condexpr_end_102:;
        condexpr_end_101:;
        CHECK_OBJECT(tmp_class_creation_51__bases);
        tmp_bases_value_51 = tmp_class_creation_51__bases;
        tmp_assign_source_409 = SELECT_METACLASS(tmp_metaclass_value_51, tmp_bases_value_51);
        Py_DECREF(tmp_metaclass_value_51);
        if (tmp_assign_source_409 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 471;

            goto try_except_handler_151;
        }
        assert(tmp_class_creation_51__metaclass == NULL);
        tmp_class_creation_51__metaclass = tmp_assign_source_409;
    }
    {
        bool tmp_condition_result_303;
        PyObject *tmp_key_value_153;
        PyObject *tmp_dict_arg_value_153;
        tmp_key_value_153 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_51__class_decl_dict);
        tmp_dict_arg_value_153 = tmp_class_creation_51__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_153, tmp_key_value_153);
        assert(!(tmp_res == -1));
        tmp_condition_result_303 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_303 != false) {
            goto branch_yes_201;
        } else {
            goto branch_no_201;
        }
    }
    branch_yes_201:;
    CHECK_OBJECT(tmp_class_creation_51__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_51__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 471;

        goto try_except_handler_151;
    }
    branch_no_201:;
    {
        nuitka_bool tmp_condition_result_304;
        PyObject *tmp_expression_value_262;
        CHECK_OBJECT(tmp_class_creation_51__metaclass);
        tmp_expression_value_262 = tmp_class_creation_51__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_262, mod_consts[44]);
        tmp_condition_result_304 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_304 == NUITKA_BOOL_TRUE) {
            goto branch_yes_202;
        } else {
            goto branch_no_202;
        }
    }
    branch_yes_202:;
    {
        PyObject *tmp_assign_source_410;
        PyObject *tmp_called_value_101;
        PyObject *tmp_expression_value_263;
        PyObject *tmp_args_value_101;
        PyObject *tmp_tuple_element_200;
        PyObject *tmp_kwargs_value_101;
        CHECK_OBJECT(tmp_class_creation_51__metaclass);
        tmp_expression_value_263 = tmp_class_creation_51__metaclass;
        tmp_called_value_101 = LOOKUP_ATTRIBUTE(tmp_expression_value_263, mod_consts[44]);
        if (tmp_called_value_101 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 471;

            goto try_except_handler_151;
        }
        tmp_tuple_element_200 = mod_consts[195];
        tmp_args_value_101 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_101, 0, tmp_tuple_element_200);
        CHECK_OBJECT(tmp_class_creation_51__bases);
        tmp_tuple_element_200 = tmp_class_creation_51__bases;
        PyTuple_SET_ITEM0(tmp_args_value_101, 1, tmp_tuple_element_200);
        CHECK_OBJECT(tmp_class_creation_51__class_decl_dict);
        tmp_kwargs_value_101 = tmp_class_creation_51__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 471;
        tmp_assign_source_410 = CALL_FUNCTION(tmp_called_value_101, tmp_args_value_101, tmp_kwargs_value_101);
        Py_DECREF(tmp_called_value_101);
        Py_DECREF(tmp_args_value_101);
        if (tmp_assign_source_410 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 471;

            goto try_except_handler_151;
        }
        assert(tmp_class_creation_51__prepared == NULL);
        tmp_class_creation_51__prepared = tmp_assign_source_410;
    }
    {
        bool tmp_condition_result_305;
        PyObject *tmp_operand_value_51;
        PyObject *tmp_expression_value_264;
        CHECK_OBJECT(tmp_class_creation_51__prepared);
        tmp_expression_value_264 = tmp_class_creation_51__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_264, mod_consts[46]);
        tmp_operand_value_51 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_51);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 471;

            goto try_except_handler_151;
        }
        tmp_condition_result_305 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_305 != false) {
            goto branch_yes_203;
        } else {
            goto branch_no_203;
        }
    }
    branch_yes_203:;
    {
        PyObject *tmp_raise_type_51;
        PyObject *tmp_raise_value_51;
        PyObject *tmp_left_value_51;
        PyObject *tmp_right_value_51;
        PyObject *tmp_tuple_element_201;
        PyObject *tmp_getattr_target_51;
        PyObject *tmp_getattr_attr_51;
        PyObject *tmp_getattr_default_51;
        tmp_raise_type_51 = PyExc_TypeError;
        tmp_left_value_51 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_51__metaclass);
        tmp_getattr_target_51 = tmp_class_creation_51__metaclass;
        tmp_getattr_attr_51 = mod_consts[48];
        tmp_getattr_default_51 = mod_consts[49];
        tmp_tuple_element_201 = BUILTIN_GETATTR(tmp_getattr_target_51, tmp_getattr_attr_51, tmp_getattr_default_51);
        if (tmp_tuple_element_201 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 471;

            goto try_except_handler_151;
        }
        tmp_right_value_51 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_265;
            PyObject *tmp_type_arg_102;
            PyTuple_SET_ITEM(tmp_right_value_51, 0, tmp_tuple_element_201);
            CHECK_OBJECT(tmp_class_creation_51__prepared);
            tmp_type_arg_102 = tmp_class_creation_51__prepared;
            tmp_expression_value_265 = BUILTIN_TYPE1(tmp_type_arg_102);
            assert(!(tmp_expression_value_265 == NULL));
            tmp_tuple_element_201 = LOOKUP_ATTRIBUTE(tmp_expression_value_265, mod_consts[48]);
            Py_DECREF(tmp_expression_value_265);
            if (tmp_tuple_element_201 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 471;

                goto tuple_build_exception_55;
            }
            PyTuple_SET_ITEM(tmp_right_value_51, 1, tmp_tuple_element_201);
        }
        goto tuple_build_noexception_55;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_55:;
        Py_DECREF(tmp_right_value_51);
        goto try_except_handler_151;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_55:;
        tmp_raise_value_51 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_51, tmp_right_value_51);
        Py_DECREF(tmp_right_value_51);
        if (tmp_raise_value_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 471;

            goto try_except_handler_151;
        }
        exception_type = tmp_raise_type_51;
        Py_INCREF(tmp_raise_type_51);
        exception_value = tmp_raise_value_51;
        exception_lineno = 471;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_151;
    }
    branch_no_203:;
    goto branch_end_202;
    branch_no_202:;
    {
        PyObject *tmp_assign_source_411;
        tmp_assign_source_411 = PyDict_New();
        assert(tmp_class_creation_51__prepared == NULL);
        tmp_class_creation_51__prepared = tmp_assign_source_411;
    }
    branch_end_202:;
    {
        PyObject *tmp_assign_source_412;
        {
            PyObject *tmp_set_locals_51;
            CHECK_OBJECT(tmp_class_creation_51__prepared);
            tmp_set_locals_51 = tmp_class_creation_51__prepared;
            locals_botocore$exceptions$$$class__51_UnsupportedS3ArnError_471 = tmp_set_locals_51;
            Py_INCREF(tmp_set_locals_51);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__51_UnsupportedS3ArnError_471, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 471;

            goto try_except_handler_153;
        }
        tmp_dictset_value = mod_consts[196];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__51_UnsupportedS3ArnError_471, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 471;

            goto try_except_handler_153;
        }
        tmp_dictset_value = mod_consts[195];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__51_UnsupportedS3ArnError_471, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 471;

            goto try_except_handler_153;
        }
        if (isFrameUnusable(cache_frame_3c40020e5af5cd24df47c8c13d685018_48)) {
            Py_XDECREF(cache_frame_3c40020e5af5cd24df47c8c13d685018_48);

#if _DEBUG_REFCOUNTS
            if (cache_frame_3c40020e5af5cd24df47c8c13d685018_48 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_3c40020e5af5cd24df47c8c13d685018_48 = MAKE_FUNCTION_FRAME(codeobj_3c40020e5af5cd24df47c8c13d685018, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_3c40020e5af5cd24df47c8c13d685018_48->m_type_description == NULL);
        frame_3c40020e5af5cd24df47c8c13d685018_48 = cache_frame_3c40020e5af5cd24df47c8c13d685018_48;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_3c40020e5af5cd24df47c8c13d685018_48);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_3c40020e5af5cd24df47c8c13d685018_48) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[197];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__51_UnsupportedS3ArnError_471, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 473;
            type_description_2 = "o";
            goto frame_exception_exit_48;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_3c40020e5af5cd24df47c8c13d685018_48);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_47;

        frame_exception_exit_48:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_3c40020e5af5cd24df47c8c13d685018_48);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_3c40020e5af5cd24df47c8c13d685018_48, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_3c40020e5af5cd24df47c8c13d685018_48->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_3c40020e5af5cd24df47c8c13d685018_48, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_3c40020e5af5cd24df47c8c13d685018_48,
            type_description_2,
            outline_50_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_3c40020e5af5cd24df47c8c13d685018_48 == cache_frame_3c40020e5af5cd24df47c8c13d685018_48) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_3c40020e5af5cd24df47c8c13d685018_48);
            cache_frame_3c40020e5af5cd24df47c8c13d685018_48 = NULL;
        }

        assertFrameObject(frame_3c40020e5af5cd24df47c8c13d685018_48);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_47;

        frame_no_exception_47:;
        goto skip_nested_handling_47;
        nested_frame_exit_47:;

        goto try_except_handler_153;
        skip_nested_handling_47:;
        {
            nuitka_bool tmp_condition_result_306;
            PyObject *tmp_cmp_expr_left_51;
            PyObject *tmp_cmp_expr_right_51;
            CHECK_OBJECT(tmp_class_creation_51__bases);
            tmp_cmp_expr_left_51 = tmp_class_creation_51__bases;
            CHECK_OBJECT(tmp_class_creation_51__bases_orig);
            tmp_cmp_expr_right_51 = tmp_class_creation_51__bases_orig;
            tmp_condition_result_306 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_51, tmp_cmp_expr_right_51);
            if (tmp_condition_result_306 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 471;

                goto try_except_handler_153;
            }
            if (tmp_condition_result_306 == NUITKA_BOOL_TRUE) {
                goto branch_yes_204;
            } else {
                goto branch_no_204;
            }
            assert(tmp_condition_result_306 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_204:;
        CHECK_OBJECT(tmp_class_creation_51__bases_orig);
        tmp_dictset_value = tmp_class_creation_51__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__51_UnsupportedS3ArnError_471, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 471;

            goto try_except_handler_153;
        }
        branch_no_204:;
        {
            PyObject *tmp_assign_source_413;
            PyObject *tmp_called_value_102;
            PyObject *tmp_args_value_102;
            PyObject *tmp_tuple_element_202;
            PyObject *tmp_kwargs_value_102;
            CHECK_OBJECT(tmp_class_creation_51__metaclass);
            tmp_called_value_102 = tmp_class_creation_51__metaclass;
            tmp_tuple_element_202 = mod_consts[195];
            tmp_args_value_102 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_102, 0, tmp_tuple_element_202);
            CHECK_OBJECT(tmp_class_creation_51__bases);
            tmp_tuple_element_202 = tmp_class_creation_51__bases;
            PyTuple_SET_ITEM0(tmp_args_value_102, 1, tmp_tuple_element_202);
            tmp_tuple_element_202 = locals_botocore$exceptions$$$class__51_UnsupportedS3ArnError_471;
            PyTuple_SET_ITEM0(tmp_args_value_102, 2, tmp_tuple_element_202);
            CHECK_OBJECT(tmp_class_creation_51__class_decl_dict);
            tmp_kwargs_value_102 = tmp_class_creation_51__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 471;
            tmp_assign_source_413 = CALL_FUNCTION(tmp_called_value_102, tmp_args_value_102, tmp_kwargs_value_102);
            Py_DECREF(tmp_args_value_102);
            if (tmp_assign_source_413 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 471;

                goto try_except_handler_153;
            }
            assert(outline_50_var___class__ == NULL);
            outline_50_var___class__ = tmp_assign_source_413;
        }
        CHECK_OBJECT(outline_50_var___class__);
        tmp_assign_source_412 = outline_50_var___class__;
        Py_INCREF(tmp_assign_source_412);
        goto try_return_handler_153;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_153:;
        Py_DECREF(locals_botocore$exceptions$$$class__51_UnsupportedS3ArnError_471);
        locals_botocore$exceptions$$$class__51_UnsupportedS3ArnError_471 = NULL;
        goto try_return_handler_152;
        // Exception handler code:
        try_except_handler_153:;
        exception_keeper_type_151 = exception_type;
        exception_keeper_value_151 = exception_value;
        exception_keeper_tb_151 = exception_tb;
        exception_keeper_lineno_151 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__51_UnsupportedS3ArnError_471);
        locals_botocore$exceptions$$$class__51_UnsupportedS3ArnError_471 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_151;
        exception_value = exception_keeper_value_151;
        exception_tb = exception_keeper_tb_151;
        exception_lineno = exception_keeper_lineno_151;

        goto try_except_handler_152;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_152:;
        CHECK_OBJECT(outline_50_var___class__);
        Py_DECREF(outline_50_var___class__);
        outline_50_var___class__ = NULL;
        goto outline_result_51;
        // Exception handler code:
        try_except_handler_152:;
        exception_keeper_type_152 = exception_type;
        exception_keeper_value_152 = exception_value;
        exception_keeper_tb_152 = exception_tb;
        exception_keeper_lineno_152 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_152;
        exception_value = exception_keeper_value_152;
        exception_tb = exception_keeper_tb_152;
        exception_lineno = exception_keeper_lineno_152;

        goto outline_exception_51;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_51:;
        exception_lineno = 471;
        goto try_except_handler_151;
        outline_result_51:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[195], tmp_assign_source_412);
    }
    goto try_end_51;
    // Exception handler code:
    try_except_handler_151:;
    exception_keeper_type_153 = exception_type;
    exception_keeper_value_153 = exception_value;
    exception_keeper_tb_153 = exception_tb;
    exception_keeper_lineno_153 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_51__bases_orig);
    tmp_class_creation_51__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_51__bases);
    tmp_class_creation_51__bases = NULL;
    Py_XDECREF(tmp_class_creation_51__class_decl_dict);
    tmp_class_creation_51__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_51__metaclass);
    tmp_class_creation_51__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_51__prepared);
    tmp_class_creation_51__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_153;
    exception_value = exception_keeper_value_153;
    exception_tb = exception_keeper_tb_153;
    exception_lineno = exception_keeper_lineno_153;

    goto frame_exception_exit_1;
    // End of try:
    try_end_51:;
    CHECK_OBJECT(tmp_class_creation_51__bases_orig);
    Py_DECREF(tmp_class_creation_51__bases_orig);
    tmp_class_creation_51__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_51__bases);
    Py_DECREF(tmp_class_creation_51__bases);
    tmp_class_creation_51__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_51__class_decl_dict);
    Py_DECREF(tmp_class_creation_51__class_decl_dict);
    tmp_class_creation_51__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_51__metaclass);
    Py_DECREF(tmp_class_creation_51__metaclass);
    tmp_class_creation_51__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_51__prepared);
    Py_DECREF(tmp_class_creation_51__prepared);
    tmp_class_creation_51__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_414;
        PyObject *tmp_tuple_element_203;
        tmp_tuple_element_203 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_203 == NULL)) {
            tmp_tuple_element_203 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_203 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 479;

            goto try_except_handler_154;
        }
        tmp_assign_source_414 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_414, 0, tmp_tuple_element_203);
        assert(tmp_class_creation_52__bases_orig == NULL);
        tmp_class_creation_52__bases_orig = tmp_assign_source_414;
    }
    {
        PyObject *tmp_assign_source_415;
        PyObject *tmp_dircall_arg1_52;
        CHECK_OBJECT(tmp_class_creation_52__bases_orig);
        tmp_dircall_arg1_52 = tmp_class_creation_52__bases_orig;
        Py_INCREF(tmp_dircall_arg1_52);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_52};
            tmp_assign_source_415 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_415 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 479;

            goto try_except_handler_154;
        }
        assert(tmp_class_creation_52__bases == NULL);
        tmp_class_creation_52__bases = tmp_assign_source_415;
    }
    {
        PyObject *tmp_assign_source_416;
        tmp_assign_source_416 = PyDict_New();
        assert(tmp_class_creation_52__class_decl_dict == NULL);
        tmp_class_creation_52__class_decl_dict = tmp_assign_source_416;
    }
    {
        PyObject *tmp_assign_source_417;
        PyObject *tmp_metaclass_value_52;
        bool tmp_condition_result_307;
        PyObject *tmp_key_value_154;
        PyObject *tmp_dict_arg_value_154;
        PyObject *tmp_dict_arg_value_155;
        PyObject *tmp_key_value_155;
        nuitka_bool tmp_condition_result_308;
        int tmp_truth_name_52;
        PyObject *tmp_type_arg_103;
        PyObject *tmp_expression_value_266;
        PyObject *tmp_subscript_value_52;
        PyObject *tmp_bases_value_52;
        tmp_key_value_154 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_52__class_decl_dict);
        tmp_dict_arg_value_154 = tmp_class_creation_52__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_154, tmp_key_value_154);
        assert(!(tmp_res == -1));
        tmp_condition_result_307 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_307 != false) {
            goto condexpr_true_103;
        } else {
            goto condexpr_false_103;
        }
        condexpr_true_103:;
        CHECK_OBJECT(tmp_class_creation_52__class_decl_dict);
        tmp_dict_arg_value_155 = tmp_class_creation_52__class_decl_dict;
        tmp_key_value_155 = mod_consts[43];
        tmp_metaclass_value_52 = DICT_GET_ITEM0(tmp_dict_arg_value_155, tmp_key_value_155);
        if (tmp_metaclass_value_52 == NULL) {
            tmp_metaclass_value_52 = Py_None;
        }
        assert(!(tmp_metaclass_value_52 == NULL));
        Py_INCREF(tmp_metaclass_value_52);
        goto condexpr_end_103;
        condexpr_false_103:;
        CHECK_OBJECT(tmp_class_creation_52__bases);
        tmp_truth_name_52 = CHECK_IF_TRUE(tmp_class_creation_52__bases);
        if (tmp_truth_name_52 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 479;

            goto try_except_handler_154;
        }
        tmp_condition_result_308 = tmp_truth_name_52 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_308 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_104;
        } else {
            goto condexpr_false_104;
        }
        condexpr_true_104:;
        CHECK_OBJECT(tmp_class_creation_52__bases);
        tmp_expression_value_266 = tmp_class_creation_52__bases;
        tmp_subscript_value_52 = mod_consts[36];
        tmp_type_arg_103 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_266, tmp_subscript_value_52, 0);
        if (tmp_type_arg_103 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 479;

            goto try_except_handler_154;
        }
        tmp_metaclass_value_52 = BUILTIN_TYPE1(tmp_type_arg_103);
        Py_DECREF(tmp_type_arg_103);
        if (tmp_metaclass_value_52 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 479;

            goto try_except_handler_154;
        }
        goto condexpr_end_104;
        condexpr_false_104:;
        tmp_metaclass_value_52 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_52);
        condexpr_end_104:;
        condexpr_end_103:;
        CHECK_OBJECT(tmp_class_creation_52__bases);
        tmp_bases_value_52 = tmp_class_creation_52__bases;
        tmp_assign_source_417 = SELECT_METACLASS(tmp_metaclass_value_52, tmp_bases_value_52);
        Py_DECREF(tmp_metaclass_value_52);
        if (tmp_assign_source_417 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 479;

            goto try_except_handler_154;
        }
        assert(tmp_class_creation_52__metaclass == NULL);
        tmp_class_creation_52__metaclass = tmp_assign_source_417;
    }
    {
        bool tmp_condition_result_309;
        PyObject *tmp_key_value_156;
        PyObject *tmp_dict_arg_value_156;
        tmp_key_value_156 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_52__class_decl_dict);
        tmp_dict_arg_value_156 = tmp_class_creation_52__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_156, tmp_key_value_156);
        assert(!(tmp_res == -1));
        tmp_condition_result_309 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_309 != false) {
            goto branch_yes_205;
        } else {
            goto branch_no_205;
        }
    }
    branch_yes_205:;
    CHECK_OBJECT(tmp_class_creation_52__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_52__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 479;

        goto try_except_handler_154;
    }
    branch_no_205:;
    {
        nuitka_bool tmp_condition_result_310;
        PyObject *tmp_expression_value_267;
        CHECK_OBJECT(tmp_class_creation_52__metaclass);
        tmp_expression_value_267 = tmp_class_creation_52__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_267, mod_consts[44]);
        tmp_condition_result_310 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_310 == NUITKA_BOOL_TRUE) {
            goto branch_yes_206;
        } else {
            goto branch_no_206;
        }
    }
    branch_yes_206:;
    {
        PyObject *tmp_assign_source_418;
        PyObject *tmp_called_value_103;
        PyObject *tmp_expression_value_268;
        PyObject *tmp_args_value_103;
        PyObject *tmp_tuple_element_204;
        PyObject *tmp_kwargs_value_103;
        CHECK_OBJECT(tmp_class_creation_52__metaclass);
        tmp_expression_value_268 = tmp_class_creation_52__metaclass;
        tmp_called_value_103 = LOOKUP_ATTRIBUTE(tmp_expression_value_268, mod_consts[44]);
        if (tmp_called_value_103 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 479;

            goto try_except_handler_154;
        }
        tmp_tuple_element_204 = mod_consts[198];
        tmp_args_value_103 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_103, 0, tmp_tuple_element_204);
        CHECK_OBJECT(tmp_class_creation_52__bases);
        tmp_tuple_element_204 = tmp_class_creation_52__bases;
        PyTuple_SET_ITEM0(tmp_args_value_103, 1, tmp_tuple_element_204);
        CHECK_OBJECT(tmp_class_creation_52__class_decl_dict);
        tmp_kwargs_value_103 = tmp_class_creation_52__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 479;
        tmp_assign_source_418 = CALL_FUNCTION(tmp_called_value_103, tmp_args_value_103, tmp_kwargs_value_103);
        Py_DECREF(tmp_called_value_103);
        Py_DECREF(tmp_args_value_103);
        if (tmp_assign_source_418 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 479;

            goto try_except_handler_154;
        }
        assert(tmp_class_creation_52__prepared == NULL);
        tmp_class_creation_52__prepared = tmp_assign_source_418;
    }
    {
        bool tmp_condition_result_311;
        PyObject *tmp_operand_value_52;
        PyObject *tmp_expression_value_269;
        CHECK_OBJECT(tmp_class_creation_52__prepared);
        tmp_expression_value_269 = tmp_class_creation_52__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_269, mod_consts[46]);
        tmp_operand_value_52 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_52);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 479;

            goto try_except_handler_154;
        }
        tmp_condition_result_311 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_311 != false) {
            goto branch_yes_207;
        } else {
            goto branch_no_207;
        }
    }
    branch_yes_207:;
    {
        PyObject *tmp_raise_type_52;
        PyObject *tmp_raise_value_52;
        PyObject *tmp_left_value_52;
        PyObject *tmp_right_value_52;
        PyObject *tmp_tuple_element_205;
        PyObject *tmp_getattr_target_52;
        PyObject *tmp_getattr_attr_52;
        PyObject *tmp_getattr_default_52;
        tmp_raise_type_52 = PyExc_TypeError;
        tmp_left_value_52 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_52__metaclass);
        tmp_getattr_target_52 = tmp_class_creation_52__metaclass;
        tmp_getattr_attr_52 = mod_consts[48];
        tmp_getattr_default_52 = mod_consts[49];
        tmp_tuple_element_205 = BUILTIN_GETATTR(tmp_getattr_target_52, tmp_getattr_attr_52, tmp_getattr_default_52);
        if (tmp_tuple_element_205 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 479;

            goto try_except_handler_154;
        }
        tmp_right_value_52 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_270;
            PyObject *tmp_type_arg_104;
            PyTuple_SET_ITEM(tmp_right_value_52, 0, tmp_tuple_element_205);
            CHECK_OBJECT(tmp_class_creation_52__prepared);
            tmp_type_arg_104 = tmp_class_creation_52__prepared;
            tmp_expression_value_270 = BUILTIN_TYPE1(tmp_type_arg_104);
            assert(!(tmp_expression_value_270 == NULL));
            tmp_tuple_element_205 = LOOKUP_ATTRIBUTE(tmp_expression_value_270, mod_consts[48]);
            Py_DECREF(tmp_expression_value_270);
            if (tmp_tuple_element_205 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 479;

                goto tuple_build_exception_56;
            }
            PyTuple_SET_ITEM(tmp_right_value_52, 1, tmp_tuple_element_205);
        }
        goto tuple_build_noexception_56;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_56:;
        Py_DECREF(tmp_right_value_52);
        goto try_except_handler_154;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_56:;
        tmp_raise_value_52 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_52, tmp_right_value_52);
        Py_DECREF(tmp_right_value_52);
        if (tmp_raise_value_52 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 479;

            goto try_except_handler_154;
        }
        exception_type = tmp_raise_type_52;
        Py_INCREF(tmp_raise_type_52);
        exception_value = tmp_raise_value_52;
        exception_lineno = 479;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_154;
    }
    branch_no_207:;
    goto branch_end_206;
    branch_no_206:;
    {
        PyObject *tmp_assign_source_419;
        tmp_assign_source_419 = PyDict_New();
        assert(tmp_class_creation_52__prepared == NULL);
        tmp_class_creation_52__prepared = tmp_assign_source_419;
    }
    branch_end_206:;
    {
        PyObject *tmp_assign_source_420;
        {
            PyObject *tmp_set_locals_52;
            CHECK_OBJECT(tmp_class_creation_52__prepared);
            tmp_set_locals_52 = tmp_class_creation_52__prepared;
            locals_botocore$exceptions$$$class__52_UnsupportedS3ControlArnError_479 = tmp_set_locals_52;
            Py_INCREF(tmp_set_locals_52);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__52_UnsupportedS3ControlArnError_479, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 479;

            goto try_except_handler_156;
        }
        tmp_dictset_value = mod_consts[199];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__52_UnsupportedS3ControlArnError_479, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 479;

            goto try_except_handler_156;
        }
        tmp_dictset_value = mod_consts[198];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__52_UnsupportedS3ControlArnError_479, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 479;

            goto try_except_handler_156;
        }
        if (isFrameUnusable(cache_frame_25cd7700e62e83506a4a2c3a68a02743_49)) {
            Py_XDECREF(cache_frame_25cd7700e62e83506a4a2c3a68a02743_49);

#if _DEBUG_REFCOUNTS
            if (cache_frame_25cd7700e62e83506a4a2c3a68a02743_49 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_25cd7700e62e83506a4a2c3a68a02743_49 = MAKE_FUNCTION_FRAME(codeobj_25cd7700e62e83506a4a2c3a68a02743, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_25cd7700e62e83506a4a2c3a68a02743_49->m_type_description == NULL);
        frame_25cd7700e62e83506a4a2c3a68a02743_49 = cache_frame_25cd7700e62e83506a4a2c3a68a02743_49;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_25cd7700e62e83506a4a2c3a68a02743_49);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_25cd7700e62e83506a4a2c3a68a02743_49) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[200];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__52_UnsupportedS3ControlArnError_479, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 481;
            type_description_2 = "o";
            goto frame_exception_exit_49;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_25cd7700e62e83506a4a2c3a68a02743_49);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_48;

        frame_exception_exit_49:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_25cd7700e62e83506a4a2c3a68a02743_49);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_25cd7700e62e83506a4a2c3a68a02743_49, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_25cd7700e62e83506a4a2c3a68a02743_49->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_25cd7700e62e83506a4a2c3a68a02743_49, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_25cd7700e62e83506a4a2c3a68a02743_49,
            type_description_2,
            outline_51_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_25cd7700e62e83506a4a2c3a68a02743_49 == cache_frame_25cd7700e62e83506a4a2c3a68a02743_49) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_25cd7700e62e83506a4a2c3a68a02743_49);
            cache_frame_25cd7700e62e83506a4a2c3a68a02743_49 = NULL;
        }

        assertFrameObject(frame_25cd7700e62e83506a4a2c3a68a02743_49);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_48;

        frame_no_exception_48:;
        goto skip_nested_handling_48;
        nested_frame_exit_48:;

        goto try_except_handler_156;
        skip_nested_handling_48:;
        {
            nuitka_bool tmp_condition_result_312;
            PyObject *tmp_cmp_expr_left_52;
            PyObject *tmp_cmp_expr_right_52;
            CHECK_OBJECT(tmp_class_creation_52__bases);
            tmp_cmp_expr_left_52 = tmp_class_creation_52__bases;
            CHECK_OBJECT(tmp_class_creation_52__bases_orig);
            tmp_cmp_expr_right_52 = tmp_class_creation_52__bases_orig;
            tmp_condition_result_312 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_52, tmp_cmp_expr_right_52);
            if (tmp_condition_result_312 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 479;

                goto try_except_handler_156;
            }
            if (tmp_condition_result_312 == NUITKA_BOOL_TRUE) {
                goto branch_yes_208;
            } else {
                goto branch_no_208;
            }
            assert(tmp_condition_result_312 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_208:;
        CHECK_OBJECT(tmp_class_creation_52__bases_orig);
        tmp_dictset_value = tmp_class_creation_52__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__52_UnsupportedS3ControlArnError_479, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 479;

            goto try_except_handler_156;
        }
        branch_no_208:;
        {
            PyObject *tmp_assign_source_421;
            PyObject *tmp_called_value_104;
            PyObject *tmp_args_value_104;
            PyObject *tmp_tuple_element_206;
            PyObject *tmp_kwargs_value_104;
            CHECK_OBJECT(tmp_class_creation_52__metaclass);
            tmp_called_value_104 = tmp_class_creation_52__metaclass;
            tmp_tuple_element_206 = mod_consts[198];
            tmp_args_value_104 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_104, 0, tmp_tuple_element_206);
            CHECK_OBJECT(tmp_class_creation_52__bases);
            tmp_tuple_element_206 = tmp_class_creation_52__bases;
            PyTuple_SET_ITEM0(tmp_args_value_104, 1, tmp_tuple_element_206);
            tmp_tuple_element_206 = locals_botocore$exceptions$$$class__52_UnsupportedS3ControlArnError_479;
            PyTuple_SET_ITEM0(tmp_args_value_104, 2, tmp_tuple_element_206);
            CHECK_OBJECT(tmp_class_creation_52__class_decl_dict);
            tmp_kwargs_value_104 = tmp_class_creation_52__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 479;
            tmp_assign_source_421 = CALL_FUNCTION(tmp_called_value_104, tmp_args_value_104, tmp_kwargs_value_104);
            Py_DECREF(tmp_args_value_104);
            if (tmp_assign_source_421 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 479;

                goto try_except_handler_156;
            }
            assert(outline_51_var___class__ == NULL);
            outline_51_var___class__ = tmp_assign_source_421;
        }
        CHECK_OBJECT(outline_51_var___class__);
        tmp_assign_source_420 = outline_51_var___class__;
        Py_INCREF(tmp_assign_source_420);
        goto try_return_handler_156;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_156:;
        Py_DECREF(locals_botocore$exceptions$$$class__52_UnsupportedS3ControlArnError_479);
        locals_botocore$exceptions$$$class__52_UnsupportedS3ControlArnError_479 = NULL;
        goto try_return_handler_155;
        // Exception handler code:
        try_except_handler_156:;
        exception_keeper_type_154 = exception_type;
        exception_keeper_value_154 = exception_value;
        exception_keeper_tb_154 = exception_tb;
        exception_keeper_lineno_154 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__52_UnsupportedS3ControlArnError_479);
        locals_botocore$exceptions$$$class__52_UnsupportedS3ControlArnError_479 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_154;
        exception_value = exception_keeper_value_154;
        exception_tb = exception_keeper_tb_154;
        exception_lineno = exception_keeper_lineno_154;

        goto try_except_handler_155;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_155:;
        CHECK_OBJECT(outline_51_var___class__);
        Py_DECREF(outline_51_var___class__);
        outline_51_var___class__ = NULL;
        goto outline_result_52;
        // Exception handler code:
        try_except_handler_155:;
        exception_keeper_type_155 = exception_type;
        exception_keeper_value_155 = exception_value;
        exception_keeper_tb_155 = exception_tb;
        exception_keeper_lineno_155 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_155;
        exception_value = exception_keeper_value_155;
        exception_tb = exception_keeper_tb_155;
        exception_lineno = exception_keeper_lineno_155;

        goto outline_exception_52;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_52:;
        exception_lineno = 479;
        goto try_except_handler_154;
        outline_result_52:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[198], tmp_assign_source_420);
    }
    goto try_end_52;
    // Exception handler code:
    try_except_handler_154:;
    exception_keeper_type_156 = exception_type;
    exception_keeper_value_156 = exception_value;
    exception_keeper_tb_156 = exception_tb;
    exception_keeper_lineno_156 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_52__bases_orig);
    tmp_class_creation_52__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_52__bases);
    tmp_class_creation_52__bases = NULL;
    Py_XDECREF(tmp_class_creation_52__class_decl_dict);
    tmp_class_creation_52__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_52__metaclass);
    tmp_class_creation_52__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_52__prepared);
    tmp_class_creation_52__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_156;
    exception_value = exception_keeper_value_156;
    exception_tb = exception_keeper_tb_156;
    exception_lineno = exception_keeper_lineno_156;

    goto frame_exception_exit_1;
    // End of try:
    try_end_52:;
    CHECK_OBJECT(tmp_class_creation_52__bases_orig);
    Py_DECREF(tmp_class_creation_52__bases_orig);
    tmp_class_creation_52__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_52__bases);
    Py_DECREF(tmp_class_creation_52__bases);
    tmp_class_creation_52__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_52__class_decl_dict);
    Py_DECREF(tmp_class_creation_52__class_decl_dict);
    tmp_class_creation_52__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_52__metaclass);
    Py_DECREF(tmp_class_creation_52__metaclass);
    tmp_class_creation_52__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_52__prepared);
    Py_DECREF(tmp_class_creation_52__prepared);
    tmp_class_creation_52__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_422;
        PyObject *tmp_tuple_element_207;
        tmp_tuple_element_207 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_207 == NULL)) {
            tmp_tuple_element_207 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_207 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 486;

            goto try_except_handler_157;
        }
        tmp_assign_source_422 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_422, 0, tmp_tuple_element_207);
        assert(tmp_class_creation_53__bases_orig == NULL);
        tmp_class_creation_53__bases_orig = tmp_assign_source_422;
    }
    {
        PyObject *tmp_assign_source_423;
        PyObject *tmp_dircall_arg1_53;
        CHECK_OBJECT(tmp_class_creation_53__bases_orig);
        tmp_dircall_arg1_53 = tmp_class_creation_53__bases_orig;
        Py_INCREF(tmp_dircall_arg1_53);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_53};
            tmp_assign_source_423 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_423 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 486;

            goto try_except_handler_157;
        }
        assert(tmp_class_creation_53__bases == NULL);
        tmp_class_creation_53__bases = tmp_assign_source_423;
    }
    {
        PyObject *tmp_assign_source_424;
        tmp_assign_source_424 = PyDict_New();
        assert(tmp_class_creation_53__class_decl_dict == NULL);
        tmp_class_creation_53__class_decl_dict = tmp_assign_source_424;
    }
    {
        PyObject *tmp_assign_source_425;
        PyObject *tmp_metaclass_value_53;
        bool tmp_condition_result_313;
        PyObject *tmp_key_value_157;
        PyObject *tmp_dict_arg_value_157;
        PyObject *tmp_dict_arg_value_158;
        PyObject *tmp_key_value_158;
        nuitka_bool tmp_condition_result_314;
        int tmp_truth_name_53;
        PyObject *tmp_type_arg_105;
        PyObject *tmp_expression_value_271;
        PyObject *tmp_subscript_value_53;
        PyObject *tmp_bases_value_53;
        tmp_key_value_157 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_53__class_decl_dict);
        tmp_dict_arg_value_157 = tmp_class_creation_53__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_157, tmp_key_value_157);
        assert(!(tmp_res == -1));
        tmp_condition_result_313 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_313 != false) {
            goto condexpr_true_105;
        } else {
            goto condexpr_false_105;
        }
        condexpr_true_105:;
        CHECK_OBJECT(tmp_class_creation_53__class_decl_dict);
        tmp_dict_arg_value_158 = tmp_class_creation_53__class_decl_dict;
        tmp_key_value_158 = mod_consts[43];
        tmp_metaclass_value_53 = DICT_GET_ITEM0(tmp_dict_arg_value_158, tmp_key_value_158);
        if (tmp_metaclass_value_53 == NULL) {
            tmp_metaclass_value_53 = Py_None;
        }
        assert(!(tmp_metaclass_value_53 == NULL));
        Py_INCREF(tmp_metaclass_value_53);
        goto condexpr_end_105;
        condexpr_false_105:;
        CHECK_OBJECT(tmp_class_creation_53__bases);
        tmp_truth_name_53 = CHECK_IF_TRUE(tmp_class_creation_53__bases);
        if (tmp_truth_name_53 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 486;

            goto try_except_handler_157;
        }
        tmp_condition_result_314 = tmp_truth_name_53 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_314 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_106;
        } else {
            goto condexpr_false_106;
        }
        condexpr_true_106:;
        CHECK_OBJECT(tmp_class_creation_53__bases);
        tmp_expression_value_271 = tmp_class_creation_53__bases;
        tmp_subscript_value_53 = mod_consts[36];
        tmp_type_arg_105 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_271, tmp_subscript_value_53, 0);
        if (tmp_type_arg_105 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 486;

            goto try_except_handler_157;
        }
        tmp_metaclass_value_53 = BUILTIN_TYPE1(tmp_type_arg_105);
        Py_DECREF(tmp_type_arg_105);
        if (tmp_metaclass_value_53 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 486;

            goto try_except_handler_157;
        }
        goto condexpr_end_106;
        condexpr_false_106:;
        tmp_metaclass_value_53 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_53);
        condexpr_end_106:;
        condexpr_end_105:;
        CHECK_OBJECT(tmp_class_creation_53__bases);
        tmp_bases_value_53 = tmp_class_creation_53__bases;
        tmp_assign_source_425 = SELECT_METACLASS(tmp_metaclass_value_53, tmp_bases_value_53);
        Py_DECREF(tmp_metaclass_value_53);
        if (tmp_assign_source_425 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 486;

            goto try_except_handler_157;
        }
        assert(tmp_class_creation_53__metaclass == NULL);
        tmp_class_creation_53__metaclass = tmp_assign_source_425;
    }
    {
        bool tmp_condition_result_315;
        PyObject *tmp_key_value_159;
        PyObject *tmp_dict_arg_value_159;
        tmp_key_value_159 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_53__class_decl_dict);
        tmp_dict_arg_value_159 = tmp_class_creation_53__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_159, tmp_key_value_159);
        assert(!(tmp_res == -1));
        tmp_condition_result_315 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_315 != false) {
            goto branch_yes_209;
        } else {
            goto branch_no_209;
        }
    }
    branch_yes_209:;
    CHECK_OBJECT(tmp_class_creation_53__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_53__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 486;

        goto try_except_handler_157;
    }
    branch_no_209:;
    {
        nuitka_bool tmp_condition_result_316;
        PyObject *tmp_expression_value_272;
        CHECK_OBJECT(tmp_class_creation_53__metaclass);
        tmp_expression_value_272 = tmp_class_creation_53__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_272, mod_consts[44]);
        tmp_condition_result_316 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_316 == NUITKA_BOOL_TRUE) {
            goto branch_yes_210;
        } else {
            goto branch_no_210;
        }
    }
    branch_yes_210:;
    {
        PyObject *tmp_assign_source_426;
        PyObject *tmp_called_value_105;
        PyObject *tmp_expression_value_273;
        PyObject *tmp_args_value_105;
        PyObject *tmp_tuple_element_208;
        PyObject *tmp_kwargs_value_105;
        CHECK_OBJECT(tmp_class_creation_53__metaclass);
        tmp_expression_value_273 = tmp_class_creation_53__metaclass;
        tmp_called_value_105 = LOOKUP_ATTRIBUTE(tmp_expression_value_273, mod_consts[44]);
        if (tmp_called_value_105 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 486;

            goto try_except_handler_157;
        }
        tmp_tuple_element_208 = mod_consts[201];
        tmp_args_value_105 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_105, 0, tmp_tuple_element_208);
        CHECK_OBJECT(tmp_class_creation_53__bases);
        tmp_tuple_element_208 = tmp_class_creation_53__bases;
        PyTuple_SET_ITEM0(tmp_args_value_105, 1, tmp_tuple_element_208);
        CHECK_OBJECT(tmp_class_creation_53__class_decl_dict);
        tmp_kwargs_value_105 = tmp_class_creation_53__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 486;
        tmp_assign_source_426 = CALL_FUNCTION(tmp_called_value_105, tmp_args_value_105, tmp_kwargs_value_105);
        Py_DECREF(tmp_called_value_105);
        Py_DECREF(tmp_args_value_105);
        if (tmp_assign_source_426 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 486;

            goto try_except_handler_157;
        }
        assert(tmp_class_creation_53__prepared == NULL);
        tmp_class_creation_53__prepared = tmp_assign_source_426;
    }
    {
        bool tmp_condition_result_317;
        PyObject *tmp_operand_value_53;
        PyObject *tmp_expression_value_274;
        CHECK_OBJECT(tmp_class_creation_53__prepared);
        tmp_expression_value_274 = tmp_class_creation_53__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_274, mod_consts[46]);
        tmp_operand_value_53 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_53);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 486;

            goto try_except_handler_157;
        }
        tmp_condition_result_317 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_317 != false) {
            goto branch_yes_211;
        } else {
            goto branch_no_211;
        }
    }
    branch_yes_211:;
    {
        PyObject *tmp_raise_type_53;
        PyObject *tmp_raise_value_53;
        PyObject *tmp_left_value_53;
        PyObject *tmp_right_value_53;
        PyObject *tmp_tuple_element_209;
        PyObject *tmp_getattr_target_53;
        PyObject *tmp_getattr_attr_53;
        PyObject *tmp_getattr_default_53;
        tmp_raise_type_53 = PyExc_TypeError;
        tmp_left_value_53 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_53__metaclass);
        tmp_getattr_target_53 = tmp_class_creation_53__metaclass;
        tmp_getattr_attr_53 = mod_consts[48];
        tmp_getattr_default_53 = mod_consts[49];
        tmp_tuple_element_209 = BUILTIN_GETATTR(tmp_getattr_target_53, tmp_getattr_attr_53, tmp_getattr_default_53);
        if (tmp_tuple_element_209 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 486;

            goto try_except_handler_157;
        }
        tmp_right_value_53 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_275;
            PyObject *tmp_type_arg_106;
            PyTuple_SET_ITEM(tmp_right_value_53, 0, tmp_tuple_element_209);
            CHECK_OBJECT(tmp_class_creation_53__prepared);
            tmp_type_arg_106 = tmp_class_creation_53__prepared;
            tmp_expression_value_275 = BUILTIN_TYPE1(tmp_type_arg_106);
            assert(!(tmp_expression_value_275 == NULL));
            tmp_tuple_element_209 = LOOKUP_ATTRIBUTE(tmp_expression_value_275, mod_consts[48]);
            Py_DECREF(tmp_expression_value_275);
            if (tmp_tuple_element_209 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 486;

                goto tuple_build_exception_57;
            }
            PyTuple_SET_ITEM(tmp_right_value_53, 1, tmp_tuple_element_209);
        }
        goto tuple_build_noexception_57;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_57:;
        Py_DECREF(tmp_right_value_53);
        goto try_except_handler_157;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_57:;
        tmp_raise_value_53 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_53, tmp_right_value_53);
        Py_DECREF(tmp_right_value_53);
        if (tmp_raise_value_53 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 486;

            goto try_except_handler_157;
        }
        exception_type = tmp_raise_type_53;
        Py_INCREF(tmp_raise_type_53);
        exception_value = tmp_raise_value_53;
        exception_lineno = 486;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_157;
    }
    branch_no_211:;
    goto branch_end_210;
    branch_no_210:;
    {
        PyObject *tmp_assign_source_427;
        tmp_assign_source_427 = PyDict_New();
        assert(tmp_class_creation_53__prepared == NULL);
        tmp_class_creation_53__prepared = tmp_assign_source_427;
    }
    branch_end_210:;
    {
        PyObject *tmp_assign_source_428;
        {
            PyObject *tmp_set_locals_53;
            CHECK_OBJECT(tmp_class_creation_53__prepared);
            tmp_set_locals_53 = tmp_class_creation_53__prepared;
            locals_botocore$exceptions$$$class__53_InvalidHostLabelError_486 = tmp_set_locals_53;
            Py_INCREF(tmp_set_locals_53);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__53_InvalidHostLabelError_486, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 486;

            goto try_except_handler_159;
        }
        tmp_dictset_value = mod_consts[202];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__53_InvalidHostLabelError_486, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 486;

            goto try_except_handler_159;
        }
        tmp_dictset_value = mod_consts[201];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__53_InvalidHostLabelError_486, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 486;

            goto try_except_handler_159;
        }
        if (isFrameUnusable(cache_frame_5975bf4559f6a1446c99f93868536ae2_50)) {
            Py_XDECREF(cache_frame_5975bf4559f6a1446c99f93868536ae2_50);

#if _DEBUG_REFCOUNTS
            if (cache_frame_5975bf4559f6a1446c99f93868536ae2_50 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_5975bf4559f6a1446c99f93868536ae2_50 = MAKE_FUNCTION_FRAME(codeobj_5975bf4559f6a1446c99f93868536ae2, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_5975bf4559f6a1446c99f93868536ae2_50->m_type_description == NULL);
        frame_5975bf4559f6a1446c99f93868536ae2_50 = cache_frame_5975bf4559f6a1446c99f93868536ae2_50;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_5975bf4559f6a1446c99f93868536ae2_50);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_5975bf4559f6a1446c99f93868536ae2_50) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[203];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__53_InvalidHostLabelError_486, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 488;
            type_description_2 = "o";
            goto frame_exception_exit_50;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_5975bf4559f6a1446c99f93868536ae2_50);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_49;

        frame_exception_exit_50:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_5975bf4559f6a1446c99f93868536ae2_50);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_5975bf4559f6a1446c99f93868536ae2_50, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_5975bf4559f6a1446c99f93868536ae2_50->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_5975bf4559f6a1446c99f93868536ae2_50, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_5975bf4559f6a1446c99f93868536ae2_50,
            type_description_2,
            outline_52_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_5975bf4559f6a1446c99f93868536ae2_50 == cache_frame_5975bf4559f6a1446c99f93868536ae2_50) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_5975bf4559f6a1446c99f93868536ae2_50);
            cache_frame_5975bf4559f6a1446c99f93868536ae2_50 = NULL;
        }

        assertFrameObject(frame_5975bf4559f6a1446c99f93868536ae2_50);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_49;

        frame_no_exception_49:;
        goto skip_nested_handling_49;
        nested_frame_exit_49:;

        goto try_except_handler_159;
        skip_nested_handling_49:;
        {
            nuitka_bool tmp_condition_result_318;
            PyObject *tmp_cmp_expr_left_53;
            PyObject *tmp_cmp_expr_right_53;
            CHECK_OBJECT(tmp_class_creation_53__bases);
            tmp_cmp_expr_left_53 = tmp_class_creation_53__bases;
            CHECK_OBJECT(tmp_class_creation_53__bases_orig);
            tmp_cmp_expr_right_53 = tmp_class_creation_53__bases_orig;
            tmp_condition_result_318 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_53, tmp_cmp_expr_right_53);
            if (tmp_condition_result_318 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 486;

                goto try_except_handler_159;
            }
            if (tmp_condition_result_318 == NUITKA_BOOL_TRUE) {
                goto branch_yes_212;
            } else {
                goto branch_no_212;
            }
            assert(tmp_condition_result_318 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_212:;
        CHECK_OBJECT(tmp_class_creation_53__bases_orig);
        tmp_dictset_value = tmp_class_creation_53__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__53_InvalidHostLabelError_486, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 486;

            goto try_except_handler_159;
        }
        branch_no_212:;
        {
            PyObject *tmp_assign_source_429;
            PyObject *tmp_called_value_106;
            PyObject *tmp_args_value_106;
            PyObject *tmp_tuple_element_210;
            PyObject *tmp_kwargs_value_106;
            CHECK_OBJECT(tmp_class_creation_53__metaclass);
            tmp_called_value_106 = tmp_class_creation_53__metaclass;
            tmp_tuple_element_210 = mod_consts[201];
            tmp_args_value_106 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_106, 0, tmp_tuple_element_210);
            CHECK_OBJECT(tmp_class_creation_53__bases);
            tmp_tuple_element_210 = tmp_class_creation_53__bases;
            PyTuple_SET_ITEM0(tmp_args_value_106, 1, tmp_tuple_element_210);
            tmp_tuple_element_210 = locals_botocore$exceptions$$$class__53_InvalidHostLabelError_486;
            PyTuple_SET_ITEM0(tmp_args_value_106, 2, tmp_tuple_element_210);
            CHECK_OBJECT(tmp_class_creation_53__class_decl_dict);
            tmp_kwargs_value_106 = tmp_class_creation_53__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 486;
            tmp_assign_source_429 = CALL_FUNCTION(tmp_called_value_106, tmp_args_value_106, tmp_kwargs_value_106);
            Py_DECREF(tmp_args_value_106);
            if (tmp_assign_source_429 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 486;

                goto try_except_handler_159;
            }
            assert(outline_52_var___class__ == NULL);
            outline_52_var___class__ = tmp_assign_source_429;
        }
        CHECK_OBJECT(outline_52_var___class__);
        tmp_assign_source_428 = outline_52_var___class__;
        Py_INCREF(tmp_assign_source_428);
        goto try_return_handler_159;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_159:;
        Py_DECREF(locals_botocore$exceptions$$$class__53_InvalidHostLabelError_486);
        locals_botocore$exceptions$$$class__53_InvalidHostLabelError_486 = NULL;
        goto try_return_handler_158;
        // Exception handler code:
        try_except_handler_159:;
        exception_keeper_type_157 = exception_type;
        exception_keeper_value_157 = exception_value;
        exception_keeper_tb_157 = exception_tb;
        exception_keeper_lineno_157 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__53_InvalidHostLabelError_486);
        locals_botocore$exceptions$$$class__53_InvalidHostLabelError_486 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_157;
        exception_value = exception_keeper_value_157;
        exception_tb = exception_keeper_tb_157;
        exception_lineno = exception_keeper_lineno_157;

        goto try_except_handler_158;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_158:;
        CHECK_OBJECT(outline_52_var___class__);
        Py_DECREF(outline_52_var___class__);
        outline_52_var___class__ = NULL;
        goto outline_result_53;
        // Exception handler code:
        try_except_handler_158:;
        exception_keeper_type_158 = exception_type;
        exception_keeper_value_158 = exception_value;
        exception_keeper_tb_158 = exception_tb;
        exception_keeper_lineno_158 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_158;
        exception_value = exception_keeper_value_158;
        exception_tb = exception_keeper_tb_158;
        exception_lineno = exception_keeper_lineno_158;

        goto outline_exception_53;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_53:;
        exception_lineno = 486;
        goto try_except_handler_157;
        outline_result_53:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[201], tmp_assign_source_428);
    }
    goto try_end_53;
    // Exception handler code:
    try_except_handler_157:;
    exception_keeper_type_159 = exception_type;
    exception_keeper_value_159 = exception_value;
    exception_keeper_tb_159 = exception_tb;
    exception_keeper_lineno_159 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_53__bases_orig);
    tmp_class_creation_53__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_53__bases);
    tmp_class_creation_53__bases = NULL;
    Py_XDECREF(tmp_class_creation_53__class_decl_dict);
    tmp_class_creation_53__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_53__metaclass);
    tmp_class_creation_53__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_53__prepared);
    tmp_class_creation_53__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_159;
    exception_value = exception_keeper_value_159;
    exception_tb = exception_keeper_tb_159;
    exception_lineno = exception_keeper_lineno_159;

    goto frame_exception_exit_1;
    // End of try:
    try_end_53:;
    CHECK_OBJECT(tmp_class_creation_53__bases_orig);
    Py_DECREF(tmp_class_creation_53__bases_orig);
    tmp_class_creation_53__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_53__bases);
    Py_DECREF(tmp_class_creation_53__bases);
    tmp_class_creation_53__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_53__class_decl_dict);
    Py_DECREF(tmp_class_creation_53__class_decl_dict);
    tmp_class_creation_53__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_53__metaclass);
    Py_DECREF(tmp_class_creation_53__metaclass);
    tmp_class_creation_53__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_53__prepared);
    Py_DECREF(tmp_class_creation_53__prepared);
    tmp_class_creation_53__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_430;
        PyObject *tmp_tuple_element_211;
        tmp_tuple_element_211 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_211 == NULL)) {
            tmp_tuple_element_211 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_211 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 494;

            goto try_except_handler_160;
        }
        tmp_assign_source_430 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_430, 0, tmp_tuple_element_211);
        assert(tmp_class_creation_54__bases_orig == NULL);
        tmp_class_creation_54__bases_orig = tmp_assign_source_430;
    }
    {
        PyObject *tmp_assign_source_431;
        PyObject *tmp_dircall_arg1_54;
        CHECK_OBJECT(tmp_class_creation_54__bases_orig);
        tmp_dircall_arg1_54 = tmp_class_creation_54__bases_orig;
        Py_INCREF(tmp_dircall_arg1_54);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_54};
            tmp_assign_source_431 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_431 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 494;

            goto try_except_handler_160;
        }
        assert(tmp_class_creation_54__bases == NULL);
        tmp_class_creation_54__bases = tmp_assign_source_431;
    }
    {
        PyObject *tmp_assign_source_432;
        tmp_assign_source_432 = PyDict_New();
        assert(tmp_class_creation_54__class_decl_dict == NULL);
        tmp_class_creation_54__class_decl_dict = tmp_assign_source_432;
    }
    {
        PyObject *tmp_assign_source_433;
        PyObject *tmp_metaclass_value_54;
        bool tmp_condition_result_319;
        PyObject *tmp_key_value_160;
        PyObject *tmp_dict_arg_value_160;
        PyObject *tmp_dict_arg_value_161;
        PyObject *tmp_key_value_161;
        nuitka_bool tmp_condition_result_320;
        int tmp_truth_name_54;
        PyObject *tmp_type_arg_107;
        PyObject *tmp_expression_value_276;
        PyObject *tmp_subscript_value_54;
        PyObject *tmp_bases_value_54;
        tmp_key_value_160 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_54__class_decl_dict);
        tmp_dict_arg_value_160 = tmp_class_creation_54__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_160, tmp_key_value_160);
        assert(!(tmp_res == -1));
        tmp_condition_result_319 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_319 != false) {
            goto condexpr_true_107;
        } else {
            goto condexpr_false_107;
        }
        condexpr_true_107:;
        CHECK_OBJECT(tmp_class_creation_54__class_decl_dict);
        tmp_dict_arg_value_161 = tmp_class_creation_54__class_decl_dict;
        tmp_key_value_161 = mod_consts[43];
        tmp_metaclass_value_54 = DICT_GET_ITEM0(tmp_dict_arg_value_161, tmp_key_value_161);
        if (tmp_metaclass_value_54 == NULL) {
            tmp_metaclass_value_54 = Py_None;
        }
        assert(!(tmp_metaclass_value_54 == NULL));
        Py_INCREF(tmp_metaclass_value_54);
        goto condexpr_end_107;
        condexpr_false_107:;
        CHECK_OBJECT(tmp_class_creation_54__bases);
        tmp_truth_name_54 = CHECK_IF_TRUE(tmp_class_creation_54__bases);
        if (tmp_truth_name_54 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 494;

            goto try_except_handler_160;
        }
        tmp_condition_result_320 = tmp_truth_name_54 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_320 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_108;
        } else {
            goto condexpr_false_108;
        }
        condexpr_true_108:;
        CHECK_OBJECT(tmp_class_creation_54__bases);
        tmp_expression_value_276 = tmp_class_creation_54__bases;
        tmp_subscript_value_54 = mod_consts[36];
        tmp_type_arg_107 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_276, tmp_subscript_value_54, 0);
        if (tmp_type_arg_107 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 494;

            goto try_except_handler_160;
        }
        tmp_metaclass_value_54 = BUILTIN_TYPE1(tmp_type_arg_107);
        Py_DECREF(tmp_type_arg_107);
        if (tmp_metaclass_value_54 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 494;

            goto try_except_handler_160;
        }
        goto condexpr_end_108;
        condexpr_false_108:;
        tmp_metaclass_value_54 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_54);
        condexpr_end_108:;
        condexpr_end_107:;
        CHECK_OBJECT(tmp_class_creation_54__bases);
        tmp_bases_value_54 = tmp_class_creation_54__bases;
        tmp_assign_source_433 = SELECT_METACLASS(tmp_metaclass_value_54, tmp_bases_value_54);
        Py_DECREF(tmp_metaclass_value_54);
        if (tmp_assign_source_433 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 494;

            goto try_except_handler_160;
        }
        assert(tmp_class_creation_54__metaclass == NULL);
        tmp_class_creation_54__metaclass = tmp_assign_source_433;
    }
    {
        bool tmp_condition_result_321;
        PyObject *tmp_key_value_162;
        PyObject *tmp_dict_arg_value_162;
        tmp_key_value_162 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_54__class_decl_dict);
        tmp_dict_arg_value_162 = tmp_class_creation_54__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_162, tmp_key_value_162);
        assert(!(tmp_res == -1));
        tmp_condition_result_321 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_321 != false) {
            goto branch_yes_213;
        } else {
            goto branch_no_213;
        }
    }
    branch_yes_213:;
    CHECK_OBJECT(tmp_class_creation_54__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_54__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 494;

        goto try_except_handler_160;
    }
    branch_no_213:;
    {
        nuitka_bool tmp_condition_result_322;
        PyObject *tmp_expression_value_277;
        CHECK_OBJECT(tmp_class_creation_54__metaclass);
        tmp_expression_value_277 = tmp_class_creation_54__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_277, mod_consts[44]);
        tmp_condition_result_322 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_322 == NUITKA_BOOL_TRUE) {
            goto branch_yes_214;
        } else {
            goto branch_no_214;
        }
    }
    branch_yes_214:;
    {
        PyObject *tmp_assign_source_434;
        PyObject *tmp_called_value_107;
        PyObject *tmp_expression_value_278;
        PyObject *tmp_args_value_107;
        PyObject *tmp_tuple_element_212;
        PyObject *tmp_kwargs_value_107;
        CHECK_OBJECT(tmp_class_creation_54__metaclass);
        tmp_expression_value_278 = tmp_class_creation_54__metaclass;
        tmp_called_value_107 = LOOKUP_ATTRIBUTE(tmp_expression_value_278, mod_consts[44]);
        if (tmp_called_value_107 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 494;

            goto try_except_handler_160;
        }
        tmp_tuple_element_212 = mod_consts[204];
        tmp_args_value_107 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_107, 0, tmp_tuple_element_212);
        CHECK_OBJECT(tmp_class_creation_54__bases);
        tmp_tuple_element_212 = tmp_class_creation_54__bases;
        PyTuple_SET_ITEM0(tmp_args_value_107, 1, tmp_tuple_element_212);
        CHECK_OBJECT(tmp_class_creation_54__class_decl_dict);
        tmp_kwargs_value_107 = tmp_class_creation_54__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 494;
        tmp_assign_source_434 = CALL_FUNCTION(tmp_called_value_107, tmp_args_value_107, tmp_kwargs_value_107);
        Py_DECREF(tmp_called_value_107);
        Py_DECREF(tmp_args_value_107);
        if (tmp_assign_source_434 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 494;

            goto try_except_handler_160;
        }
        assert(tmp_class_creation_54__prepared == NULL);
        tmp_class_creation_54__prepared = tmp_assign_source_434;
    }
    {
        bool tmp_condition_result_323;
        PyObject *tmp_operand_value_54;
        PyObject *tmp_expression_value_279;
        CHECK_OBJECT(tmp_class_creation_54__prepared);
        tmp_expression_value_279 = tmp_class_creation_54__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_279, mod_consts[46]);
        tmp_operand_value_54 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_54);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 494;

            goto try_except_handler_160;
        }
        tmp_condition_result_323 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_323 != false) {
            goto branch_yes_215;
        } else {
            goto branch_no_215;
        }
    }
    branch_yes_215:;
    {
        PyObject *tmp_raise_type_54;
        PyObject *tmp_raise_value_54;
        PyObject *tmp_left_value_54;
        PyObject *tmp_right_value_54;
        PyObject *tmp_tuple_element_213;
        PyObject *tmp_getattr_target_54;
        PyObject *tmp_getattr_attr_54;
        PyObject *tmp_getattr_default_54;
        tmp_raise_type_54 = PyExc_TypeError;
        tmp_left_value_54 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_54__metaclass);
        tmp_getattr_target_54 = tmp_class_creation_54__metaclass;
        tmp_getattr_attr_54 = mod_consts[48];
        tmp_getattr_default_54 = mod_consts[49];
        tmp_tuple_element_213 = BUILTIN_GETATTR(tmp_getattr_target_54, tmp_getattr_attr_54, tmp_getattr_default_54);
        if (tmp_tuple_element_213 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 494;

            goto try_except_handler_160;
        }
        tmp_right_value_54 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_280;
            PyObject *tmp_type_arg_108;
            PyTuple_SET_ITEM(tmp_right_value_54, 0, tmp_tuple_element_213);
            CHECK_OBJECT(tmp_class_creation_54__prepared);
            tmp_type_arg_108 = tmp_class_creation_54__prepared;
            tmp_expression_value_280 = BUILTIN_TYPE1(tmp_type_arg_108);
            assert(!(tmp_expression_value_280 == NULL));
            tmp_tuple_element_213 = LOOKUP_ATTRIBUTE(tmp_expression_value_280, mod_consts[48]);
            Py_DECREF(tmp_expression_value_280);
            if (tmp_tuple_element_213 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 494;

                goto tuple_build_exception_58;
            }
            PyTuple_SET_ITEM(tmp_right_value_54, 1, tmp_tuple_element_213);
        }
        goto tuple_build_noexception_58;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_58:;
        Py_DECREF(tmp_right_value_54);
        goto try_except_handler_160;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_58:;
        tmp_raise_value_54 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_54, tmp_right_value_54);
        Py_DECREF(tmp_right_value_54);
        if (tmp_raise_value_54 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 494;

            goto try_except_handler_160;
        }
        exception_type = tmp_raise_type_54;
        Py_INCREF(tmp_raise_type_54);
        exception_value = tmp_raise_value_54;
        exception_lineno = 494;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_160;
    }
    branch_no_215:;
    goto branch_end_214;
    branch_no_214:;
    {
        PyObject *tmp_assign_source_435;
        tmp_assign_source_435 = PyDict_New();
        assert(tmp_class_creation_54__prepared == NULL);
        tmp_class_creation_54__prepared = tmp_assign_source_435;
    }
    branch_end_214:;
    {
        PyObject *tmp_assign_source_436;
        {
            PyObject *tmp_set_locals_54;
            CHECK_OBJECT(tmp_class_creation_54__prepared);
            tmp_set_locals_54 = tmp_class_creation_54__prepared;
            locals_botocore$exceptions$$$class__54_UnsupportedOutpostResourceError_494 = tmp_set_locals_54;
            Py_INCREF(tmp_set_locals_54);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__54_UnsupportedOutpostResourceError_494, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 494;

            goto try_except_handler_162;
        }
        tmp_dictset_value = mod_consts[205];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__54_UnsupportedOutpostResourceError_494, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 494;

            goto try_except_handler_162;
        }
        tmp_dictset_value = mod_consts[204];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__54_UnsupportedOutpostResourceError_494, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 494;

            goto try_except_handler_162;
        }
        if (isFrameUnusable(cache_frame_928984019de852157f2f6ed7d404e8b0_51)) {
            Py_XDECREF(cache_frame_928984019de852157f2f6ed7d404e8b0_51);

#if _DEBUG_REFCOUNTS
            if (cache_frame_928984019de852157f2f6ed7d404e8b0_51 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_928984019de852157f2f6ed7d404e8b0_51 = MAKE_FUNCTION_FRAME(codeobj_928984019de852157f2f6ed7d404e8b0, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_928984019de852157f2f6ed7d404e8b0_51->m_type_description == NULL);
        frame_928984019de852157f2f6ed7d404e8b0_51 = cache_frame_928984019de852157f2f6ed7d404e8b0_51;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_928984019de852157f2f6ed7d404e8b0_51);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_928984019de852157f2f6ed7d404e8b0_51) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[206];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__54_UnsupportedOutpostResourceError_494, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 496;
            type_description_2 = "o";
            goto frame_exception_exit_51;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_928984019de852157f2f6ed7d404e8b0_51);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_50;

        frame_exception_exit_51:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_928984019de852157f2f6ed7d404e8b0_51);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_928984019de852157f2f6ed7d404e8b0_51, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_928984019de852157f2f6ed7d404e8b0_51->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_928984019de852157f2f6ed7d404e8b0_51, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_928984019de852157f2f6ed7d404e8b0_51,
            type_description_2,
            outline_53_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_928984019de852157f2f6ed7d404e8b0_51 == cache_frame_928984019de852157f2f6ed7d404e8b0_51) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_928984019de852157f2f6ed7d404e8b0_51);
            cache_frame_928984019de852157f2f6ed7d404e8b0_51 = NULL;
        }

        assertFrameObject(frame_928984019de852157f2f6ed7d404e8b0_51);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_50;

        frame_no_exception_50:;
        goto skip_nested_handling_50;
        nested_frame_exit_50:;

        goto try_except_handler_162;
        skip_nested_handling_50:;
        {
            nuitka_bool tmp_condition_result_324;
            PyObject *tmp_cmp_expr_left_54;
            PyObject *tmp_cmp_expr_right_54;
            CHECK_OBJECT(tmp_class_creation_54__bases);
            tmp_cmp_expr_left_54 = tmp_class_creation_54__bases;
            CHECK_OBJECT(tmp_class_creation_54__bases_orig);
            tmp_cmp_expr_right_54 = tmp_class_creation_54__bases_orig;
            tmp_condition_result_324 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_54, tmp_cmp_expr_right_54);
            if (tmp_condition_result_324 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 494;

                goto try_except_handler_162;
            }
            if (tmp_condition_result_324 == NUITKA_BOOL_TRUE) {
                goto branch_yes_216;
            } else {
                goto branch_no_216;
            }
            assert(tmp_condition_result_324 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_216:;
        CHECK_OBJECT(tmp_class_creation_54__bases_orig);
        tmp_dictset_value = tmp_class_creation_54__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__54_UnsupportedOutpostResourceError_494, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 494;

            goto try_except_handler_162;
        }
        branch_no_216:;
        {
            PyObject *tmp_assign_source_437;
            PyObject *tmp_called_value_108;
            PyObject *tmp_args_value_108;
            PyObject *tmp_tuple_element_214;
            PyObject *tmp_kwargs_value_108;
            CHECK_OBJECT(tmp_class_creation_54__metaclass);
            tmp_called_value_108 = tmp_class_creation_54__metaclass;
            tmp_tuple_element_214 = mod_consts[204];
            tmp_args_value_108 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_108, 0, tmp_tuple_element_214);
            CHECK_OBJECT(tmp_class_creation_54__bases);
            tmp_tuple_element_214 = tmp_class_creation_54__bases;
            PyTuple_SET_ITEM0(tmp_args_value_108, 1, tmp_tuple_element_214);
            tmp_tuple_element_214 = locals_botocore$exceptions$$$class__54_UnsupportedOutpostResourceError_494;
            PyTuple_SET_ITEM0(tmp_args_value_108, 2, tmp_tuple_element_214);
            CHECK_OBJECT(tmp_class_creation_54__class_decl_dict);
            tmp_kwargs_value_108 = tmp_class_creation_54__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 494;
            tmp_assign_source_437 = CALL_FUNCTION(tmp_called_value_108, tmp_args_value_108, tmp_kwargs_value_108);
            Py_DECREF(tmp_args_value_108);
            if (tmp_assign_source_437 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 494;

                goto try_except_handler_162;
            }
            assert(outline_53_var___class__ == NULL);
            outline_53_var___class__ = tmp_assign_source_437;
        }
        CHECK_OBJECT(outline_53_var___class__);
        tmp_assign_source_436 = outline_53_var___class__;
        Py_INCREF(tmp_assign_source_436);
        goto try_return_handler_162;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_162:;
        Py_DECREF(locals_botocore$exceptions$$$class__54_UnsupportedOutpostResourceError_494);
        locals_botocore$exceptions$$$class__54_UnsupportedOutpostResourceError_494 = NULL;
        goto try_return_handler_161;
        // Exception handler code:
        try_except_handler_162:;
        exception_keeper_type_160 = exception_type;
        exception_keeper_value_160 = exception_value;
        exception_keeper_tb_160 = exception_tb;
        exception_keeper_lineno_160 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__54_UnsupportedOutpostResourceError_494);
        locals_botocore$exceptions$$$class__54_UnsupportedOutpostResourceError_494 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_160;
        exception_value = exception_keeper_value_160;
        exception_tb = exception_keeper_tb_160;
        exception_lineno = exception_keeper_lineno_160;

        goto try_except_handler_161;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_161:;
        CHECK_OBJECT(outline_53_var___class__);
        Py_DECREF(outline_53_var___class__);
        outline_53_var___class__ = NULL;
        goto outline_result_54;
        // Exception handler code:
        try_except_handler_161:;
        exception_keeper_type_161 = exception_type;
        exception_keeper_value_161 = exception_value;
        exception_keeper_tb_161 = exception_tb;
        exception_keeper_lineno_161 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_161;
        exception_value = exception_keeper_value_161;
        exception_tb = exception_keeper_tb_161;
        exception_lineno = exception_keeper_lineno_161;

        goto outline_exception_54;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_54:;
        exception_lineno = 494;
        goto try_except_handler_160;
        outline_result_54:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[204], tmp_assign_source_436);
    }
    goto try_end_54;
    // Exception handler code:
    try_except_handler_160:;
    exception_keeper_type_162 = exception_type;
    exception_keeper_value_162 = exception_value;
    exception_keeper_tb_162 = exception_tb;
    exception_keeper_lineno_162 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_54__bases_orig);
    tmp_class_creation_54__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_54__bases);
    tmp_class_creation_54__bases = NULL;
    Py_XDECREF(tmp_class_creation_54__class_decl_dict);
    tmp_class_creation_54__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_54__metaclass);
    tmp_class_creation_54__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_54__prepared);
    tmp_class_creation_54__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_162;
    exception_value = exception_keeper_value_162;
    exception_tb = exception_keeper_tb_162;
    exception_lineno = exception_keeper_lineno_162;

    goto frame_exception_exit_1;
    // End of try:
    try_end_54:;
    CHECK_OBJECT(tmp_class_creation_54__bases_orig);
    Py_DECREF(tmp_class_creation_54__bases_orig);
    tmp_class_creation_54__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_54__bases);
    Py_DECREF(tmp_class_creation_54__bases);
    tmp_class_creation_54__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_54__class_decl_dict);
    Py_DECREF(tmp_class_creation_54__class_decl_dict);
    tmp_class_creation_54__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_54__metaclass);
    Py_DECREF(tmp_class_creation_54__metaclass);
    tmp_class_creation_54__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_54__prepared);
    Py_DECREF(tmp_class_creation_54__prepared);
    tmp_class_creation_54__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_438;
        PyObject *tmp_tuple_element_215;
        tmp_tuple_element_215 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_215 == NULL)) {
            tmp_tuple_element_215 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_215 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 503;

            goto try_except_handler_163;
        }
        tmp_assign_source_438 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_438, 0, tmp_tuple_element_215);
        assert(tmp_class_creation_55__bases_orig == NULL);
        tmp_class_creation_55__bases_orig = tmp_assign_source_438;
    }
    {
        PyObject *tmp_assign_source_439;
        PyObject *tmp_dircall_arg1_55;
        CHECK_OBJECT(tmp_class_creation_55__bases_orig);
        tmp_dircall_arg1_55 = tmp_class_creation_55__bases_orig;
        Py_INCREF(tmp_dircall_arg1_55);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_55};
            tmp_assign_source_439 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_439 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 503;

            goto try_except_handler_163;
        }
        assert(tmp_class_creation_55__bases == NULL);
        tmp_class_creation_55__bases = tmp_assign_source_439;
    }
    {
        PyObject *tmp_assign_source_440;
        tmp_assign_source_440 = PyDict_New();
        assert(tmp_class_creation_55__class_decl_dict == NULL);
        tmp_class_creation_55__class_decl_dict = tmp_assign_source_440;
    }
    {
        PyObject *tmp_assign_source_441;
        PyObject *tmp_metaclass_value_55;
        bool tmp_condition_result_325;
        PyObject *tmp_key_value_163;
        PyObject *tmp_dict_arg_value_163;
        PyObject *tmp_dict_arg_value_164;
        PyObject *tmp_key_value_164;
        nuitka_bool tmp_condition_result_326;
        int tmp_truth_name_55;
        PyObject *tmp_type_arg_109;
        PyObject *tmp_expression_value_281;
        PyObject *tmp_subscript_value_55;
        PyObject *tmp_bases_value_55;
        tmp_key_value_163 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_55__class_decl_dict);
        tmp_dict_arg_value_163 = tmp_class_creation_55__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_163, tmp_key_value_163);
        assert(!(tmp_res == -1));
        tmp_condition_result_325 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_325 != false) {
            goto condexpr_true_109;
        } else {
            goto condexpr_false_109;
        }
        condexpr_true_109:;
        CHECK_OBJECT(tmp_class_creation_55__class_decl_dict);
        tmp_dict_arg_value_164 = tmp_class_creation_55__class_decl_dict;
        tmp_key_value_164 = mod_consts[43];
        tmp_metaclass_value_55 = DICT_GET_ITEM0(tmp_dict_arg_value_164, tmp_key_value_164);
        if (tmp_metaclass_value_55 == NULL) {
            tmp_metaclass_value_55 = Py_None;
        }
        assert(!(tmp_metaclass_value_55 == NULL));
        Py_INCREF(tmp_metaclass_value_55);
        goto condexpr_end_109;
        condexpr_false_109:;
        CHECK_OBJECT(tmp_class_creation_55__bases);
        tmp_truth_name_55 = CHECK_IF_TRUE(tmp_class_creation_55__bases);
        if (tmp_truth_name_55 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 503;

            goto try_except_handler_163;
        }
        tmp_condition_result_326 = tmp_truth_name_55 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_326 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_110;
        } else {
            goto condexpr_false_110;
        }
        condexpr_true_110:;
        CHECK_OBJECT(tmp_class_creation_55__bases);
        tmp_expression_value_281 = tmp_class_creation_55__bases;
        tmp_subscript_value_55 = mod_consts[36];
        tmp_type_arg_109 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_281, tmp_subscript_value_55, 0);
        if (tmp_type_arg_109 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 503;

            goto try_except_handler_163;
        }
        tmp_metaclass_value_55 = BUILTIN_TYPE1(tmp_type_arg_109);
        Py_DECREF(tmp_type_arg_109);
        if (tmp_metaclass_value_55 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 503;

            goto try_except_handler_163;
        }
        goto condexpr_end_110;
        condexpr_false_110:;
        tmp_metaclass_value_55 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_55);
        condexpr_end_110:;
        condexpr_end_109:;
        CHECK_OBJECT(tmp_class_creation_55__bases);
        tmp_bases_value_55 = tmp_class_creation_55__bases;
        tmp_assign_source_441 = SELECT_METACLASS(tmp_metaclass_value_55, tmp_bases_value_55);
        Py_DECREF(tmp_metaclass_value_55);
        if (tmp_assign_source_441 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 503;

            goto try_except_handler_163;
        }
        assert(tmp_class_creation_55__metaclass == NULL);
        tmp_class_creation_55__metaclass = tmp_assign_source_441;
    }
    {
        bool tmp_condition_result_327;
        PyObject *tmp_key_value_165;
        PyObject *tmp_dict_arg_value_165;
        tmp_key_value_165 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_55__class_decl_dict);
        tmp_dict_arg_value_165 = tmp_class_creation_55__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_165, tmp_key_value_165);
        assert(!(tmp_res == -1));
        tmp_condition_result_327 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_327 != false) {
            goto branch_yes_217;
        } else {
            goto branch_no_217;
        }
    }
    branch_yes_217:;
    CHECK_OBJECT(tmp_class_creation_55__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_55__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 503;

        goto try_except_handler_163;
    }
    branch_no_217:;
    {
        nuitka_bool tmp_condition_result_328;
        PyObject *tmp_expression_value_282;
        CHECK_OBJECT(tmp_class_creation_55__metaclass);
        tmp_expression_value_282 = tmp_class_creation_55__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_282, mod_consts[44]);
        tmp_condition_result_328 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_328 == NUITKA_BOOL_TRUE) {
            goto branch_yes_218;
        } else {
            goto branch_no_218;
        }
    }
    branch_yes_218:;
    {
        PyObject *tmp_assign_source_442;
        PyObject *tmp_called_value_109;
        PyObject *tmp_expression_value_283;
        PyObject *tmp_args_value_109;
        PyObject *tmp_tuple_element_216;
        PyObject *tmp_kwargs_value_109;
        CHECK_OBJECT(tmp_class_creation_55__metaclass);
        tmp_expression_value_283 = tmp_class_creation_55__metaclass;
        tmp_called_value_109 = LOOKUP_ATTRIBUTE(tmp_expression_value_283, mod_consts[44]);
        if (tmp_called_value_109 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 503;

            goto try_except_handler_163;
        }
        tmp_tuple_element_216 = mod_consts[207];
        tmp_args_value_109 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_109, 0, tmp_tuple_element_216);
        CHECK_OBJECT(tmp_class_creation_55__bases);
        tmp_tuple_element_216 = tmp_class_creation_55__bases;
        PyTuple_SET_ITEM0(tmp_args_value_109, 1, tmp_tuple_element_216);
        CHECK_OBJECT(tmp_class_creation_55__class_decl_dict);
        tmp_kwargs_value_109 = tmp_class_creation_55__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 503;
        tmp_assign_source_442 = CALL_FUNCTION(tmp_called_value_109, tmp_args_value_109, tmp_kwargs_value_109);
        Py_DECREF(tmp_called_value_109);
        Py_DECREF(tmp_args_value_109);
        if (tmp_assign_source_442 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 503;

            goto try_except_handler_163;
        }
        assert(tmp_class_creation_55__prepared == NULL);
        tmp_class_creation_55__prepared = tmp_assign_source_442;
    }
    {
        bool tmp_condition_result_329;
        PyObject *tmp_operand_value_55;
        PyObject *tmp_expression_value_284;
        CHECK_OBJECT(tmp_class_creation_55__prepared);
        tmp_expression_value_284 = tmp_class_creation_55__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_284, mod_consts[46]);
        tmp_operand_value_55 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_55);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 503;

            goto try_except_handler_163;
        }
        tmp_condition_result_329 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_329 != false) {
            goto branch_yes_219;
        } else {
            goto branch_no_219;
        }
    }
    branch_yes_219:;
    {
        PyObject *tmp_raise_type_55;
        PyObject *tmp_raise_value_55;
        PyObject *tmp_left_value_55;
        PyObject *tmp_right_value_55;
        PyObject *tmp_tuple_element_217;
        PyObject *tmp_getattr_target_55;
        PyObject *tmp_getattr_attr_55;
        PyObject *tmp_getattr_default_55;
        tmp_raise_type_55 = PyExc_TypeError;
        tmp_left_value_55 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_55__metaclass);
        tmp_getattr_target_55 = tmp_class_creation_55__metaclass;
        tmp_getattr_attr_55 = mod_consts[48];
        tmp_getattr_default_55 = mod_consts[49];
        tmp_tuple_element_217 = BUILTIN_GETATTR(tmp_getattr_target_55, tmp_getattr_attr_55, tmp_getattr_default_55);
        if (tmp_tuple_element_217 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 503;

            goto try_except_handler_163;
        }
        tmp_right_value_55 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_285;
            PyObject *tmp_type_arg_110;
            PyTuple_SET_ITEM(tmp_right_value_55, 0, tmp_tuple_element_217);
            CHECK_OBJECT(tmp_class_creation_55__prepared);
            tmp_type_arg_110 = tmp_class_creation_55__prepared;
            tmp_expression_value_285 = BUILTIN_TYPE1(tmp_type_arg_110);
            assert(!(tmp_expression_value_285 == NULL));
            tmp_tuple_element_217 = LOOKUP_ATTRIBUTE(tmp_expression_value_285, mod_consts[48]);
            Py_DECREF(tmp_expression_value_285);
            if (tmp_tuple_element_217 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 503;

                goto tuple_build_exception_59;
            }
            PyTuple_SET_ITEM(tmp_right_value_55, 1, tmp_tuple_element_217);
        }
        goto tuple_build_noexception_59;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_59:;
        Py_DECREF(tmp_right_value_55);
        goto try_except_handler_163;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_59:;
        tmp_raise_value_55 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_55, tmp_right_value_55);
        Py_DECREF(tmp_right_value_55);
        if (tmp_raise_value_55 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 503;

            goto try_except_handler_163;
        }
        exception_type = tmp_raise_type_55;
        Py_INCREF(tmp_raise_type_55);
        exception_value = tmp_raise_value_55;
        exception_lineno = 503;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_163;
    }
    branch_no_219:;
    goto branch_end_218;
    branch_no_218:;
    {
        PyObject *tmp_assign_source_443;
        tmp_assign_source_443 = PyDict_New();
        assert(tmp_class_creation_55__prepared == NULL);
        tmp_class_creation_55__prepared = tmp_assign_source_443;
    }
    branch_end_218:;
    {
        PyObject *tmp_assign_source_444;
        {
            PyObject *tmp_set_locals_55;
            CHECK_OBJECT(tmp_class_creation_55__prepared);
            tmp_set_locals_55 = tmp_class_creation_55__prepared;
            locals_botocore$exceptions$$$class__55_UnsupportedS3ConfigurationError_503 = tmp_set_locals_55;
            Py_INCREF(tmp_set_locals_55);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__55_UnsupportedS3ConfigurationError_503, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 503;

            goto try_except_handler_165;
        }
        tmp_dictset_value = mod_consts[208];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__55_UnsupportedS3ConfigurationError_503, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 503;

            goto try_except_handler_165;
        }
        tmp_dictset_value = mod_consts[207];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__55_UnsupportedS3ConfigurationError_503, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 503;

            goto try_except_handler_165;
        }
        if (isFrameUnusable(cache_frame_2516b4116953e20c4679d08aba3fb9eb_52)) {
            Py_XDECREF(cache_frame_2516b4116953e20c4679d08aba3fb9eb_52);

#if _DEBUG_REFCOUNTS
            if (cache_frame_2516b4116953e20c4679d08aba3fb9eb_52 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_2516b4116953e20c4679d08aba3fb9eb_52 = MAKE_FUNCTION_FRAME(codeobj_2516b4116953e20c4679d08aba3fb9eb, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_2516b4116953e20c4679d08aba3fb9eb_52->m_type_description == NULL);
        frame_2516b4116953e20c4679d08aba3fb9eb_52 = cache_frame_2516b4116953e20c4679d08aba3fb9eb_52;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_2516b4116953e20c4679d08aba3fb9eb_52);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_2516b4116953e20c4679d08aba3fb9eb_52) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[209];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__55_UnsupportedS3ConfigurationError_503, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 505;
            type_description_2 = "o";
            goto frame_exception_exit_52;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_2516b4116953e20c4679d08aba3fb9eb_52);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_51;

        frame_exception_exit_52:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_2516b4116953e20c4679d08aba3fb9eb_52);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_2516b4116953e20c4679d08aba3fb9eb_52, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_2516b4116953e20c4679d08aba3fb9eb_52->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_2516b4116953e20c4679d08aba3fb9eb_52, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_2516b4116953e20c4679d08aba3fb9eb_52,
            type_description_2,
            outline_54_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_2516b4116953e20c4679d08aba3fb9eb_52 == cache_frame_2516b4116953e20c4679d08aba3fb9eb_52) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_2516b4116953e20c4679d08aba3fb9eb_52);
            cache_frame_2516b4116953e20c4679d08aba3fb9eb_52 = NULL;
        }

        assertFrameObject(frame_2516b4116953e20c4679d08aba3fb9eb_52);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_51;

        frame_no_exception_51:;
        goto skip_nested_handling_51;
        nested_frame_exit_51:;

        goto try_except_handler_165;
        skip_nested_handling_51:;
        {
            nuitka_bool tmp_condition_result_330;
            PyObject *tmp_cmp_expr_left_55;
            PyObject *tmp_cmp_expr_right_55;
            CHECK_OBJECT(tmp_class_creation_55__bases);
            tmp_cmp_expr_left_55 = tmp_class_creation_55__bases;
            CHECK_OBJECT(tmp_class_creation_55__bases_orig);
            tmp_cmp_expr_right_55 = tmp_class_creation_55__bases_orig;
            tmp_condition_result_330 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_55, tmp_cmp_expr_right_55);
            if (tmp_condition_result_330 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 503;

                goto try_except_handler_165;
            }
            if (tmp_condition_result_330 == NUITKA_BOOL_TRUE) {
                goto branch_yes_220;
            } else {
                goto branch_no_220;
            }
            assert(tmp_condition_result_330 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_220:;
        CHECK_OBJECT(tmp_class_creation_55__bases_orig);
        tmp_dictset_value = tmp_class_creation_55__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__55_UnsupportedS3ConfigurationError_503, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 503;

            goto try_except_handler_165;
        }
        branch_no_220:;
        {
            PyObject *tmp_assign_source_445;
            PyObject *tmp_called_value_110;
            PyObject *tmp_args_value_110;
            PyObject *tmp_tuple_element_218;
            PyObject *tmp_kwargs_value_110;
            CHECK_OBJECT(tmp_class_creation_55__metaclass);
            tmp_called_value_110 = tmp_class_creation_55__metaclass;
            tmp_tuple_element_218 = mod_consts[207];
            tmp_args_value_110 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_110, 0, tmp_tuple_element_218);
            CHECK_OBJECT(tmp_class_creation_55__bases);
            tmp_tuple_element_218 = tmp_class_creation_55__bases;
            PyTuple_SET_ITEM0(tmp_args_value_110, 1, tmp_tuple_element_218);
            tmp_tuple_element_218 = locals_botocore$exceptions$$$class__55_UnsupportedS3ConfigurationError_503;
            PyTuple_SET_ITEM0(tmp_args_value_110, 2, tmp_tuple_element_218);
            CHECK_OBJECT(tmp_class_creation_55__class_decl_dict);
            tmp_kwargs_value_110 = tmp_class_creation_55__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 503;
            tmp_assign_source_445 = CALL_FUNCTION(tmp_called_value_110, tmp_args_value_110, tmp_kwargs_value_110);
            Py_DECREF(tmp_args_value_110);
            if (tmp_assign_source_445 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 503;

                goto try_except_handler_165;
            }
            assert(outline_54_var___class__ == NULL);
            outline_54_var___class__ = tmp_assign_source_445;
        }
        CHECK_OBJECT(outline_54_var___class__);
        tmp_assign_source_444 = outline_54_var___class__;
        Py_INCREF(tmp_assign_source_444);
        goto try_return_handler_165;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_165:;
        Py_DECREF(locals_botocore$exceptions$$$class__55_UnsupportedS3ConfigurationError_503);
        locals_botocore$exceptions$$$class__55_UnsupportedS3ConfigurationError_503 = NULL;
        goto try_return_handler_164;
        // Exception handler code:
        try_except_handler_165:;
        exception_keeper_type_163 = exception_type;
        exception_keeper_value_163 = exception_value;
        exception_keeper_tb_163 = exception_tb;
        exception_keeper_lineno_163 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__55_UnsupportedS3ConfigurationError_503);
        locals_botocore$exceptions$$$class__55_UnsupportedS3ConfigurationError_503 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_163;
        exception_value = exception_keeper_value_163;
        exception_tb = exception_keeper_tb_163;
        exception_lineno = exception_keeper_lineno_163;

        goto try_except_handler_164;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_164:;
        CHECK_OBJECT(outline_54_var___class__);
        Py_DECREF(outline_54_var___class__);
        outline_54_var___class__ = NULL;
        goto outline_result_55;
        // Exception handler code:
        try_except_handler_164:;
        exception_keeper_type_164 = exception_type;
        exception_keeper_value_164 = exception_value;
        exception_keeper_tb_164 = exception_tb;
        exception_keeper_lineno_164 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_164;
        exception_value = exception_keeper_value_164;
        exception_tb = exception_keeper_tb_164;
        exception_lineno = exception_keeper_lineno_164;

        goto outline_exception_55;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_55:;
        exception_lineno = 503;
        goto try_except_handler_163;
        outline_result_55:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[207], tmp_assign_source_444);
    }
    goto try_end_55;
    // Exception handler code:
    try_except_handler_163:;
    exception_keeper_type_165 = exception_type;
    exception_keeper_value_165 = exception_value;
    exception_keeper_tb_165 = exception_tb;
    exception_keeper_lineno_165 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_55__bases_orig);
    tmp_class_creation_55__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_55__bases);
    tmp_class_creation_55__bases = NULL;
    Py_XDECREF(tmp_class_creation_55__class_decl_dict);
    tmp_class_creation_55__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_55__metaclass);
    tmp_class_creation_55__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_55__prepared);
    tmp_class_creation_55__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_165;
    exception_value = exception_keeper_value_165;
    exception_tb = exception_keeper_tb_165;
    exception_lineno = exception_keeper_lineno_165;

    goto frame_exception_exit_1;
    // End of try:
    try_end_55:;
    CHECK_OBJECT(tmp_class_creation_55__bases_orig);
    Py_DECREF(tmp_class_creation_55__bases_orig);
    tmp_class_creation_55__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_55__bases);
    Py_DECREF(tmp_class_creation_55__bases);
    tmp_class_creation_55__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_55__class_decl_dict);
    Py_DECREF(tmp_class_creation_55__class_decl_dict);
    tmp_class_creation_55__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_55__metaclass);
    Py_DECREF(tmp_class_creation_55__metaclass);
    tmp_class_creation_55__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_55__prepared);
    Py_DECREF(tmp_class_creation_55__prepared);
    tmp_class_creation_55__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_446;
        PyObject *tmp_tuple_element_219;
        tmp_tuple_element_219 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_219 == NULL)) {
            tmp_tuple_element_219 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_219 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 510;

            goto try_except_handler_166;
        }
        tmp_assign_source_446 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_446, 0, tmp_tuple_element_219);
        assert(tmp_class_creation_56__bases_orig == NULL);
        tmp_class_creation_56__bases_orig = tmp_assign_source_446;
    }
    {
        PyObject *tmp_assign_source_447;
        PyObject *tmp_dircall_arg1_56;
        CHECK_OBJECT(tmp_class_creation_56__bases_orig);
        tmp_dircall_arg1_56 = tmp_class_creation_56__bases_orig;
        Py_INCREF(tmp_dircall_arg1_56);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_56};
            tmp_assign_source_447 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_447 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 510;

            goto try_except_handler_166;
        }
        assert(tmp_class_creation_56__bases == NULL);
        tmp_class_creation_56__bases = tmp_assign_source_447;
    }
    {
        PyObject *tmp_assign_source_448;
        tmp_assign_source_448 = PyDict_New();
        assert(tmp_class_creation_56__class_decl_dict == NULL);
        tmp_class_creation_56__class_decl_dict = tmp_assign_source_448;
    }
    {
        PyObject *tmp_assign_source_449;
        PyObject *tmp_metaclass_value_56;
        bool tmp_condition_result_331;
        PyObject *tmp_key_value_166;
        PyObject *tmp_dict_arg_value_166;
        PyObject *tmp_dict_arg_value_167;
        PyObject *tmp_key_value_167;
        nuitka_bool tmp_condition_result_332;
        int tmp_truth_name_56;
        PyObject *tmp_type_arg_111;
        PyObject *tmp_expression_value_286;
        PyObject *tmp_subscript_value_56;
        PyObject *tmp_bases_value_56;
        tmp_key_value_166 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_56__class_decl_dict);
        tmp_dict_arg_value_166 = tmp_class_creation_56__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_166, tmp_key_value_166);
        assert(!(tmp_res == -1));
        tmp_condition_result_331 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_331 != false) {
            goto condexpr_true_111;
        } else {
            goto condexpr_false_111;
        }
        condexpr_true_111:;
        CHECK_OBJECT(tmp_class_creation_56__class_decl_dict);
        tmp_dict_arg_value_167 = tmp_class_creation_56__class_decl_dict;
        tmp_key_value_167 = mod_consts[43];
        tmp_metaclass_value_56 = DICT_GET_ITEM0(tmp_dict_arg_value_167, tmp_key_value_167);
        if (tmp_metaclass_value_56 == NULL) {
            tmp_metaclass_value_56 = Py_None;
        }
        assert(!(tmp_metaclass_value_56 == NULL));
        Py_INCREF(tmp_metaclass_value_56);
        goto condexpr_end_111;
        condexpr_false_111:;
        CHECK_OBJECT(tmp_class_creation_56__bases);
        tmp_truth_name_56 = CHECK_IF_TRUE(tmp_class_creation_56__bases);
        if (tmp_truth_name_56 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 510;

            goto try_except_handler_166;
        }
        tmp_condition_result_332 = tmp_truth_name_56 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_332 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_112;
        } else {
            goto condexpr_false_112;
        }
        condexpr_true_112:;
        CHECK_OBJECT(tmp_class_creation_56__bases);
        tmp_expression_value_286 = tmp_class_creation_56__bases;
        tmp_subscript_value_56 = mod_consts[36];
        tmp_type_arg_111 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_286, tmp_subscript_value_56, 0);
        if (tmp_type_arg_111 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 510;

            goto try_except_handler_166;
        }
        tmp_metaclass_value_56 = BUILTIN_TYPE1(tmp_type_arg_111);
        Py_DECREF(tmp_type_arg_111);
        if (tmp_metaclass_value_56 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 510;

            goto try_except_handler_166;
        }
        goto condexpr_end_112;
        condexpr_false_112:;
        tmp_metaclass_value_56 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_56);
        condexpr_end_112:;
        condexpr_end_111:;
        CHECK_OBJECT(tmp_class_creation_56__bases);
        tmp_bases_value_56 = tmp_class_creation_56__bases;
        tmp_assign_source_449 = SELECT_METACLASS(tmp_metaclass_value_56, tmp_bases_value_56);
        Py_DECREF(tmp_metaclass_value_56);
        if (tmp_assign_source_449 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 510;

            goto try_except_handler_166;
        }
        assert(tmp_class_creation_56__metaclass == NULL);
        tmp_class_creation_56__metaclass = tmp_assign_source_449;
    }
    {
        bool tmp_condition_result_333;
        PyObject *tmp_key_value_168;
        PyObject *tmp_dict_arg_value_168;
        tmp_key_value_168 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_56__class_decl_dict);
        tmp_dict_arg_value_168 = tmp_class_creation_56__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_168, tmp_key_value_168);
        assert(!(tmp_res == -1));
        tmp_condition_result_333 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_333 != false) {
            goto branch_yes_221;
        } else {
            goto branch_no_221;
        }
    }
    branch_yes_221:;
    CHECK_OBJECT(tmp_class_creation_56__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_56__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 510;

        goto try_except_handler_166;
    }
    branch_no_221:;
    {
        nuitka_bool tmp_condition_result_334;
        PyObject *tmp_expression_value_287;
        CHECK_OBJECT(tmp_class_creation_56__metaclass);
        tmp_expression_value_287 = tmp_class_creation_56__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_287, mod_consts[44]);
        tmp_condition_result_334 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_334 == NUITKA_BOOL_TRUE) {
            goto branch_yes_222;
        } else {
            goto branch_no_222;
        }
    }
    branch_yes_222:;
    {
        PyObject *tmp_assign_source_450;
        PyObject *tmp_called_value_111;
        PyObject *tmp_expression_value_288;
        PyObject *tmp_args_value_111;
        PyObject *tmp_tuple_element_220;
        PyObject *tmp_kwargs_value_111;
        CHECK_OBJECT(tmp_class_creation_56__metaclass);
        tmp_expression_value_288 = tmp_class_creation_56__metaclass;
        tmp_called_value_111 = LOOKUP_ATTRIBUTE(tmp_expression_value_288, mod_consts[44]);
        if (tmp_called_value_111 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 510;

            goto try_except_handler_166;
        }
        tmp_tuple_element_220 = mod_consts[210];
        tmp_args_value_111 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_111, 0, tmp_tuple_element_220);
        CHECK_OBJECT(tmp_class_creation_56__bases);
        tmp_tuple_element_220 = tmp_class_creation_56__bases;
        PyTuple_SET_ITEM0(tmp_args_value_111, 1, tmp_tuple_element_220);
        CHECK_OBJECT(tmp_class_creation_56__class_decl_dict);
        tmp_kwargs_value_111 = tmp_class_creation_56__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 510;
        tmp_assign_source_450 = CALL_FUNCTION(tmp_called_value_111, tmp_args_value_111, tmp_kwargs_value_111);
        Py_DECREF(tmp_called_value_111);
        Py_DECREF(tmp_args_value_111);
        if (tmp_assign_source_450 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 510;

            goto try_except_handler_166;
        }
        assert(tmp_class_creation_56__prepared == NULL);
        tmp_class_creation_56__prepared = tmp_assign_source_450;
    }
    {
        bool tmp_condition_result_335;
        PyObject *tmp_operand_value_56;
        PyObject *tmp_expression_value_289;
        CHECK_OBJECT(tmp_class_creation_56__prepared);
        tmp_expression_value_289 = tmp_class_creation_56__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_289, mod_consts[46]);
        tmp_operand_value_56 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_56);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 510;

            goto try_except_handler_166;
        }
        tmp_condition_result_335 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_335 != false) {
            goto branch_yes_223;
        } else {
            goto branch_no_223;
        }
    }
    branch_yes_223:;
    {
        PyObject *tmp_raise_type_56;
        PyObject *tmp_raise_value_56;
        PyObject *tmp_left_value_56;
        PyObject *tmp_right_value_56;
        PyObject *tmp_tuple_element_221;
        PyObject *tmp_getattr_target_56;
        PyObject *tmp_getattr_attr_56;
        PyObject *tmp_getattr_default_56;
        tmp_raise_type_56 = PyExc_TypeError;
        tmp_left_value_56 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_56__metaclass);
        tmp_getattr_target_56 = tmp_class_creation_56__metaclass;
        tmp_getattr_attr_56 = mod_consts[48];
        tmp_getattr_default_56 = mod_consts[49];
        tmp_tuple_element_221 = BUILTIN_GETATTR(tmp_getattr_target_56, tmp_getattr_attr_56, tmp_getattr_default_56);
        if (tmp_tuple_element_221 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 510;

            goto try_except_handler_166;
        }
        tmp_right_value_56 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_290;
            PyObject *tmp_type_arg_112;
            PyTuple_SET_ITEM(tmp_right_value_56, 0, tmp_tuple_element_221);
            CHECK_OBJECT(tmp_class_creation_56__prepared);
            tmp_type_arg_112 = tmp_class_creation_56__prepared;
            tmp_expression_value_290 = BUILTIN_TYPE1(tmp_type_arg_112);
            assert(!(tmp_expression_value_290 == NULL));
            tmp_tuple_element_221 = LOOKUP_ATTRIBUTE(tmp_expression_value_290, mod_consts[48]);
            Py_DECREF(tmp_expression_value_290);
            if (tmp_tuple_element_221 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 510;

                goto tuple_build_exception_60;
            }
            PyTuple_SET_ITEM(tmp_right_value_56, 1, tmp_tuple_element_221);
        }
        goto tuple_build_noexception_60;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_60:;
        Py_DECREF(tmp_right_value_56);
        goto try_except_handler_166;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_60:;
        tmp_raise_value_56 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_56, tmp_right_value_56);
        Py_DECREF(tmp_right_value_56);
        if (tmp_raise_value_56 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 510;

            goto try_except_handler_166;
        }
        exception_type = tmp_raise_type_56;
        Py_INCREF(tmp_raise_type_56);
        exception_value = tmp_raise_value_56;
        exception_lineno = 510;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_166;
    }
    branch_no_223:;
    goto branch_end_222;
    branch_no_222:;
    {
        PyObject *tmp_assign_source_451;
        tmp_assign_source_451 = PyDict_New();
        assert(tmp_class_creation_56__prepared == NULL);
        tmp_class_creation_56__prepared = tmp_assign_source_451;
    }
    branch_end_222:;
    {
        PyObject *tmp_assign_source_452;
        {
            PyObject *tmp_set_locals_56;
            CHECK_OBJECT(tmp_class_creation_56__prepared);
            tmp_set_locals_56 = tmp_class_creation_56__prepared;
            locals_botocore$exceptions$$$class__56_UnsupportedS3AccesspointConfigurationError_510 = tmp_set_locals_56;
            Py_INCREF(tmp_set_locals_56);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__56_UnsupportedS3AccesspointConfigurationError_510, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 510;

            goto try_except_handler_168;
        }
        tmp_dictset_value = mod_consts[208];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__56_UnsupportedS3AccesspointConfigurationError_510, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 510;

            goto try_except_handler_168;
        }
        tmp_dictset_value = mod_consts[210];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__56_UnsupportedS3AccesspointConfigurationError_510, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 510;

            goto try_except_handler_168;
        }
        if (isFrameUnusable(cache_frame_b449e2438bb5d5e1407d0a0c4cb65d49_53)) {
            Py_XDECREF(cache_frame_b449e2438bb5d5e1407d0a0c4cb65d49_53);

#if _DEBUG_REFCOUNTS
            if (cache_frame_b449e2438bb5d5e1407d0a0c4cb65d49_53 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_b449e2438bb5d5e1407d0a0c4cb65d49_53 = MAKE_FUNCTION_FRAME(codeobj_b449e2438bb5d5e1407d0a0c4cb65d49, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_b449e2438bb5d5e1407d0a0c4cb65d49_53->m_type_description == NULL);
        frame_b449e2438bb5d5e1407d0a0c4cb65d49_53 = cache_frame_b449e2438bb5d5e1407d0a0c4cb65d49_53;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_b449e2438bb5d5e1407d0a0c4cb65d49_53);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_b449e2438bb5d5e1407d0a0c4cb65d49_53) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[211];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__56_UnsupportedS3AccesspointConfigurationError_510, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 512;
            type_description_2 = "o";
            goto frame_exception_exit_53;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_b449e2438bb5d5e1407d0a0c4cb65d49_53);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_52;

        frame_exception_exit_53:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_b449e2438bb5d5e1407d0a0c4cb65d49_53);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_b449e2438bb5d5e1407d0a0c4cb65d49_53, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_b449e2438bb5d5e1407d0a0c4cb65d49_53->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_b449e2438bb5d5e1407d0a0c4cb65d49_53, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_b449e2438bb5d5e1407d0a0c4cb65d49_53,
            type_description_2,
            outline_55_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_b449e2438bb5d5e1407d0a0c4cb65d49_53 == cache_frame_b449e2438bb5d5e1407d0a0c4cb65d49_53) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_b449e2438bb5d5e1407d0a0c4cb65d49_53);
            cache_frame_b449e2438bb5d5e1407d0a0c4cb65d49_53 = NULL;
        }

        assertFrameObject(frame_b449e2438bb5d5e1407d0a0c4cb65d49_53);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_52;

        frame_no_exception_52:;
        goto skip_nested_handling_52;
        nested_frame_exit_52:;

        goto try_except_handler_168;
        skip_nested_handling_52:;
        {
            nuitka_bool tmp_condition_result_336;
            PyObject *tmp_cmp_expr_left_56;
            PyObject *tmp_cmp_expr_right_56;
            CHECK_OBJECT(tmp_class_creation_56__bases);
            tmp_cmp_expr_left_56 = tmp_class_creation_56__bases;
            CHECK_OBJECT(tmp_class_creation_56__bases_orig);
            tmp_cmp_expr_right_56 = tmp_class_creation_56__bases_orig;
            tmp_condition_result_336 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_56, tmp_cmp_expr_right_56);
            if (tmp_condition_result_336 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 510;

                goto try_except_handler_168;
            }
            if (tmp_condition_result_336 == NUITKA_BOOL_TRUE) {
                goto branch_yes_224;
            } else {
                goto branch_no_224;
            }
            assert(tmp_condition_result_336 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_224:;
        CHECK_OBJECT(tmp_class_creation_56__bases_orig);
        tmp_dictset_value = tmp_class_creation_56__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__56_UnsupportedS3AccesspointConfigurationError_510, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 510;

            goto try_except_handler_168;
        }
        branch_no_224:;
        {
            PyObject *tmp_assign_source_453;
            PyObject *tmp_called_value_112;
            PyObject *tmp_args_value_112;
            PyObject *tmp_tuple_element_222;
            PyObject *tmp_kwargs_value_112;
            CHECK_OBJECT(tmp_class_creation_56__metaclass);
            tmp_called_value_112 = tmp_class_creation_56__metaclass;
            tmp_tuple_element_222 = mod_consts[210];
            tmp_args_value_112 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_112, 0, tmp_tuple_element_222);
            CHECK_OBJECT(tmp_class_creation_56__bases);
            tmp_tuple_element_222 = tmp_class_creation_56__bases;
            PyTuple_SET_ITEM0(tmp_args_value_112, 1, tmp_tuple_element_222);
            tmp_tuple_element_222 = locals_botocore$exceptions$$$class__56_UnsupportedS3AccesspointConfigurationError_510;
            PyTuple_SET_ITEM0(tmp_args_value_112, 2, tmp_tuple_element_222);
            CHECK_OBJECT(tmp_class_creation_56__class_decl_dict);
            tmp_kwargs_value_112 = tmp_class_creation_56__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 510;
            tmp_assign_source_453 = CALL_FUNCTION(tmp_called_value_112, tmp_args_value_112, tmp_kwargs_value_112);
            Py_DECREF(tmp_args_value_112);
            if (tmp_assign_source_453 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 510;

                goto try_except_handler_168;
            }
            assert(outline_55_var___class__ == NULL);
            outline_55_var___class__ = tmp_assign_source_453;
        }
        CHECK_OBJECT(outline_55_var___class__);
        tmp_assign_source_452 = outline_55_var___class__;
        Py_INCREF(tmp_assign_source_452);
        goto try_return_handler_168;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_168:;
        Py_DECREF(locals_botocore$exceptions$$$class__56_UnsupportedS3AccesspointConfigurationError_510);
        locals_botocore$exceptions$$$class__56_UnsupportedS3AccesspointConfigurationError_510 = NULL;
        goto try_return_handler_167;
        // Exception handler code:
        try_except_handler_168:;
        exception_keeper_type_166 = exception_type;
        exception_keeper_value_166 = exception_value;
        exception_keeper_tb_166 = exception_tb;
        exception_keeper_lineno_166 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__56_UnsupportedS3AccesspointConfigurationError_510);
        locals_botocore$exceptions$$$class__56_UnsupportedS3AccesspointConfigurationError_510 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_166;
        exception_value = exception_keeper_value_166;
        exception_tb = exception_keeper_tb_166;
        exception_lineno = exception_keeper_lineno_166;

        goto try_except_handler_167;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_167:;
        CHECK_OBJECT(outline_55_var___class__);
        Py_DECREF(outline_55_var___class__);
        outline_55_var___class__ = NULL;
        goto outline_result_56;
        // Exception handler code:
        try_except_handler_167:;
        exception_keeper_type_167 = exception_type;
        exception_keeper_value_167 = exception_value;
        exception_keeper_tb_167 = exception_tb;
        exception_keeper_lineno_167 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_167;
        exception_value = exception_keeper_value_167;
        exception_tb = exception_keeper_tb_167;
        exception_lineno = exception_keeper_lineno_167;

        goto outline_exception_56;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_56:;
        exception_lineno = 510;
        goto try_except_handler_166;
        outline_result_56:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[210], tmp_assign_source_452);
    }
    goto try_end_56;
    // Exception handler code:
    try_except_handler_166:;
    exception_keeper_type_168 = exception_type;
    exception_keeper_value_168 = exception_value;
    exception_keeper_tb_168 = exception_tb;
    exception_keeper_lineno_168 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_56__bases_orig);
    tmp_class_creation_56__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_56__bases);
    tmp_class_creation_56__bases = NULL;
    Py_XDECREF(tmp_class_creation_56__class_decl_dict);
    tmp_class_creation_56__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_56__metaclass);
    tmp_class_creation_56__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_56__prepared);
    tmp_class_creation_56__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_168;
    exception_value = exception_keeper_value_168;
    exception_tb = exception_keeper_tb_168;
    exception_lineno = exception_keeper_lineno_168;

    goto frame_exception_exit_1;
    // End of try:
    try_end_56:;
    CHECK_OBJECT(tmp_class_creation_56__bases_orig);
    Py_DECREF(tmp_class_creation_56__bases_orig);
    tmp_class_creation_56__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_56__bases);
    Py_DECREF(tmp_class_creation_56__bases);
    tmp_class_creation_56__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_56__class_decl_dict);
    Py_DECREF(tmp_class_creation_56__class_decl_dict);
    tmp_class_creation_56__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_56__metaclass);
    Py_DECREF(tmp_class_creation_56__metaclass);
    tmp_class_creation_56__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_56__prepared);
    Py_DECREF(tmp_class_creation_56__prepared);
    tmp_class_creation_56__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_454;
        PyObject *tmp_tuple_element_223;
        tmp_tuple_element_223 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_223 == NULL)) {
            tmp_tuple_element_223 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_223 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 517;

            goto try_except_handler_169;
        }
        tmp_assign_source_454 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_454, 0, tmp_tuple_element_223);
        assert(tmp_class_creation_57__bases_orig == NULL);
        tmp_class_creation_57__bases_orig = tmp_assign_source_454;
    }
    {
        PyObject *tmp_assign_source_455;
        PyObject *tmp_dircall_arg1_57;
        CHECK_OBJECT(tmp_class_creation_57__bases_orig);
        tmp_dircall_arg1_57 = tmp_class_creation_57__bases_orig;
        Py_INCREF(tmp_dircall_arg1_57);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_57};
            tmp_assign_source_455 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_455 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 517;

            goto try_except_handler_169;
        }
        assert(tmp_class_creation_57__bases == NULL);
        tmp_class_creation_57__bases = tmp_assign_source_455;
    }
    {
        PyObject *tmp_assign_source_456;
        tmp_assign_source_456 = PyDict_New();
        assert(tmp_class_creation_57__class_decl_dict == NULL);
        tmp_class_creation_57__class_decl_dict = tmp_assign_source_456;
    }
    {
        PyObject *tmp_assign_source_457;
        PyObject *tmp_metaclass_value_57;
        bool tmp_condition_result_337;
        PyObject *tmp_key_value_169;
        PyObject *tmp_dict_arg_value_169;
        PyObject *tmp_dict_arg_value_170;
        PyObject *tmp_key_value_170;
        nuitka_bool tmp_condition_result_338;
        int tmp_truth_name_57;
        PyObject *tmp_type_arg_113;
        PyObject *tmp_expression_value_291;
        PyObject *tmp_subscript_value_57;
        PyObject *tmp_bases_value_57;
        tmp_key_value_169 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_57__class_decl_dict);
        tmp_dict_arg_value_169 = tmp_class_creation_57__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_169, tmp_key_value_169);
        assert(!(tmp_res == -1));
        tmp_condition_result_337 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_337 != false) {
            goto condexpr_true_113;
        } else {
            goto condexpr_false_113;
        }
        condexpr_true_113:;
        CHECK_OBJECT(tmp_class_creation_57__class_decl_dict);
        tmp_dict_arg_value_170 = tmp_class_creation_57__class_decl_dict;
        tmp_key_value_170 = mod_consts[43];
        tmp_metaclass_value_57 = DICT_GET_ITEM0(tmp_dict_arg_value_170, tmp_key_value_170);
        if (tmp_metaclass_value_57 == NULL) {
            tmp_metaclass_value_57 = Py_None;
        }
        assert(!(tmp_metaclass_value_57 == NULL));
        Py_INCREF(tmp_metaclass_value_57);
        goto condexpr_end_113;
        condexpr_false_113:;
        CHECK_OBJECT(tmp_class_creation_57__bases);
        tmp_truth_name_57 = CHECK_IF_TRUE(tmp_class_creation_57__bases);
        if (tmp_truth_name_57 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 517;

            goto try_except_handler_169;
        }
        tmp_condition_result_338 = tmp_truth_name_57 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_338 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_114;
        } else {
            goto condexpr_false_114;
        }
        condexpr_true_114:;
        CHECK_OBJECT(tmp_class_creation_57__bases);
        tmp_expression_value_291 = tmp_class_creation_57__bases;
        tmp_subscript_value_57 = mod_consts[36];
        tmp_type_arg_113 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_291, tmp_subscript_value_57, 0);
        if (tmp_type_arg_113 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 517;

            goto try_except_handler_169;
        }
        tmp_metaclass_value_57 = BUILTIN_TYPE1(tmp_type_arg_113);
        Py_DECREF(tmp_type_arg_113);
        if (tmp_metaclass_value_57 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 517;

            goto try_except_handler_169;
        }
        goto condexpr_end_114;
        condexpr_false_114:;
        tmp_metaclass_value_57 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_57);
        condexpr_end_114:;
        condexpr_end_113:;
        CHECK_OBJECT(tmp_class_creation_57__bases);
        tmp_bases_value_57 = tmp_class_creation_57__bases;
        tmp_assign_source_457 = SELECT_METACLASS(tmp_metaclass_value_57, tmp_bases_value_57);
        Py_DECREF(tmp_metaclass_value_57);
        if (tmp_assign_source_457 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 517;

            goto try_except_handler_169;
        }
        assert(tmp_class_creation_57__metaclass == NULL);
        tmp_class_creation_57__metaclass = tmp_assign_source_457;
    }
    {
        bool tmp_condition_result_339;
        PyObject *tmp_key_value_171;
        PyObject *tmp_dict_arg_value_171;
        tmp_key_value_171 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_57__class_decl_dict);
        tmp_dict_arg_value_171 = tmp_class_creation_57__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_171, tmp_key_value_171);
        assert(!(tmp_res == -1));
        tmp_condition_result_339 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_339 != false) {
            goto branch_yes_225;
        } else {
            goto branch_no_225;
        }
    }
    branch_yes_225:;
    CHECK_OBJECT(tmp_class_creation_57__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_57__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 517;

        goto try_except_handler_169;
    }
    branch_no_225:;
    {
        nuitka_bool tmp_condition_result_340;
        PyObject *tmp_expression_value_292;
        CHECK_OBJECT(tmp_class_creation_57__metaclass);
        tmp_expression_value_292 = tmp_class_creation_57__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_292, mod_consts[44]);
        tmp_condition_result_340 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_340 == NUITKA_BOOL_TRUE) {
            goto branch_yes_226;
        } else {
            goto branch_no_226;
        }
    }
    branch_yes_226:;
    {
        PyObject *tmp_assign_source_458;
        PyObject *tmp_called_value_113;
        PyObject *tmp_expression_value_293;
        PyObject *tmp_args_value_113;
        PyObject *tmp_tuple_element_224;
        PyObject *tmp_kwargs_value_113;
        CHECK_OBJECT(tmp_class_creation_57__metaclass);
        tmp_expression_value_293 = tmp_class_creation_57__metaclass;
        tmp_called_value_113 = LOOKUP_ATTRIBUTE(tmp_expression_value_293, mod_consts[44]);
        if (tmp_called_value_113 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 517;

            goto try_except_handler_169;
        }
        tmp_tuple_element_224 = mod_consts[212];
        tmp_args_value_113 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_113, 0, tmp_tuple_element_224);
        CHECK_OBJECT(tmp_class_creation_57__bases);
        tmp_tuple_element_224 = tmp_class_creation_57__bases;
        PyTuple_SET_ITEM0(tmp_args_value_113, 1, tmp_tuple_element_224);
        CHECK_OBJECT(tmp_class_creation_57__class_decl_dict);
        tmp_kwargs_value_113 = tmp_class_creation_57__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 517;
        tmp_assign_source_458 = CALL_FUNCTION(tmp_called_value_113, tmp_args_value_113, tmp_kwargs_value_113);
        Py_DECREF(tmp_called_value_113);
        Py_DECREF(tmp_args_value_113);
        if (tmp_assign_source_458 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 517;

            goto try_except_handler_169;
        }
        assert(tmp_class_creation_57__prepared == NULL);
        tmp_class_creation_57__prepared = tmp_assign_source_458;
    }
    {
        bool tmp_condition_result_341;
        PyObject *tmp_operand_value_57;
        PyObject *tmp_expression_value_294;
        CHECK_OBJECT(tmp_class_creation_57__prepared);
        tmp_expression_value_294 = tmp_class_creation_57__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_294, mod_consts[46]);
        tmp_operand_value_57 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_57);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 517;

            goto try_except_handler_169;
        }
        tmp_condition_result_341 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_341 != false) {
            goto branch_yes_227;
        } else {
            goto branch_no_227;
        }
    }
    branch_yes_227:;
    {
        PyObject *tmp_raise_type_57;
        PyObject *tmp_raise_value_57;
        PyObject *tmp_left_value_57;
        PyObject *tmp_right_value_57;
        PyObject *tmp_tuple_element_225;
        PyObject *tmp_getattr_target_57;
        PyObject *tmp_getattr_attr_57;
        PyObject *tmp_getattr_default_57;
        tmp_raise_type_57 = PyExc_TypeError;
        tmp_left_value_57 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_57__metaclass);
        tmp_getattr_target_57 = tmp_class_creation_57__metaclass;
        tmp_getattr_attr_57 = mod_consts[48];
        tmp_getattr_default_57 = mod_consts[49];
        tmp_tuple_element_225 = BUILTIN_GETATTR(tmp_getattr_target_57, tmp_getattr_attr_57, tmp_getattr_default_57);
        if (tmp_tuple_element_225 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 517;

            goto try_except_handler_169;
        }
        tmp_right_value_57 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_295;
            PyObject *tmp_type_arg_114;
            PyTuple_SET_ITEM(tmp_right_value_57, 0, tmp_tuple_element_225);
            CHECK_OBJECT(tmp_class_creation_57__prepared);
            tmp_type_arg_114 = tmp_class_creation_57__prepared;
            tmp_expression_value_295 = BUILTIN_TYPE1(tmp_type_arg_114);
            assert(!(tmp_expression_value_295 == NULL));
            tmp_tuple_element_225 = LOOKUP_ATTRIBUTE(tmp_expression_value_295, mod_consts[48]);
            Py_DECREF(tmp_expression_value_295);
            if (tmp_tuple_element_225 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 517;

                goto tuple_build_exception_61;
            }
            PyTuple_SET_ITEM(tmp_right_value_57, 1, tmp_tuple_element_225);
        }
        goto tuple_build_noexception_61;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_61:;
        Py_DECREF(tmp_right_value_57);
        goto try_except_handler_169;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_61:;
        tmp_raise_value_57 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_57, tmp_right_value_57);
        Py_DECREF(tmp_right_value_57);
        if (tmp_raise_value_57 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 517;

            goto try_except_handler_169;
        }
        exception_type = tmp_raise_type_57;
        Py_INCREF(tmp_raise_type_57);
        exception_value = tmp_raise_value_57;
        exception_lineno = 517;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_169;
    }
    branch_no_227:;
    goto branch_end_226;
    branch_no_226:;
    {
        PyObject *tmp_assign_source_459;
        tmp_assign_source_459 = PyDict_New();
        assert(tmp_class_creation_57__prepared == NULL);
        tmp_class_creation_57__prepared = tmp_assign_source_459;
    }
    branch_end_226:;
    {
        PyObject *tmp_assign_source_460;
        {
            PyObject *tmp_set_locals_57;
            CHECK_OBJECT(tmp_class_creation_57__prepared);
            tmp_set_locals_57 = tmp_class_creation_57__prepared;
            locals_botocore$exceptions$$$class__57_InvalidEndpointDiscoveryConfigurationError_517 = tmp_set_locals_57;
            Py_INCREF(tmp_set_locals_57);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__57_InvalidEndpointDiscoveryConfigurationError_517, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 517;

            goto try_except_handler_171;
        }
        tmp_dictset_value = mod_consts[213];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__57_InvalidEndpointDiscoveryConfigurationError_517, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 517;

            goto try_except_handler_171;
        }
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__57_InvalidEndpointDiscoveryConfigurationError_517, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 517;

            goto try_except_handler_171;
        }
        if (isFrameUnusable(cache_frame_528123f3b88a399219363b7e3e1b52bc_54)) {
            Py_XDECREF(cache_frame_528123f3b88a399219363b7e3e1b52bc_54);

#if _DEBUG_REFCOUNTS
            if (cache_frame_528123f3b88a399219363b7e3e1b52bc_54 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_528123f3b88a399219363b7e3e1b52bc_54 = MAKE_FUNCTION_FRAME(codeobj_528123f3b88a399219363b7e3e1b52bc, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_528123f3b88a399219363b7e3e1b52bc_54->m_type_description == NULL);
        frame_528123f3b88a399219363b7e3e1b52bc_54 = cache_frame_528123f3b88a399219363b7e3e1b52bc_54;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_528123f3b88a399219363b7e3e1b52bc_54);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_528123f3b88a399219363b7e3e1b52bc_54) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[214];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__57_InvalidEndpointDiscoveryConfigurationError_517, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 519;
            type_description_2 = "o";
            goto frame_exception_exit_54;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_528123f3b88a399219363b7e3e1b52bc_54);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_53;

        frame_exception_exit_54:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_528123f3b88a399219363b7e3e1b52bc_54);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_528123f3b88a399219363b7e3e1b52bc_54, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_528123f3b88a399219363b7e3e1b52bc_54->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_528123f3b88a399219363b7e3e1b52bc_54, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_528123f3b88a399219363b7e3e1b52bc_54,
            type_description_2,
            outline_56_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_528123f3b88a399219363b7e3e1b52bc_54 == cache_frame_528123f3b88a399219363b7e3e1b52bc_54) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_528123f3b88a399219363b7e3e1b52bc_54);
            cache_frame_528123f3b88a399219363b7e3e1b52bc_54 = NULL;
        }

        assertFrameObject(frame_528123f3b88a399219363b7e3e1b52bc_54);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_53;

        frame_no_exception_53:;
        goto skip_nested_handling_53;
        nested_frame_exit_53:;

        goto try_except_handler_171;
        skip_nested_handling_53:;
        {
            nuitka_bool tmp_condition_result_342;
            PyObject *tmp_cmp_expr_left_57;
            PyObject *tmp_cmp_expr_right_57;
            CHECK_OBJECT(tmp_class_creation_57__bases);
            tmp_cmp_expr_left_57 = tmp_class_creation_57__bases;
            CHECK_OBJECT(tmp_class_creation_57__bases_orig);
            tmp_cmp_expr_right_57 = tmp_class_creation_57__bases_orig;
            tmp_condition_result_342 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_57, tmp_cmp_expr_right_57);
            if (tmp_condition_result_342 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 517;

                goto try_except_handler_171;
            }
            if (tmp_condition_result_342 == NUITKA_BOOL_TRUE) {
                goto branch_yes_228;
            } else {
                goto branch_no_228;
            }
            assert(tmp_condition_result_342 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_228:;
        CHECK_OBJECT(tmp_class_creation_57__bases_orig);
        tmp_dictset_value = tmp_class_creation_57__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__57_InvalidEndpointDiscoveryConfigurationError_517, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 517;

            goto try_except_handler_171;
        }
        branch_no_228:;
        {
            PyObject *tmp_assign_source_461;
            PyObject *tmp_called_value_114;
            PyObject *tmp_args_value_114;
            PyObject *tmp_tuple_element_226;
            PyObject *tmp_kwargs_value_114;
            CHECK_OBJECT(tmp_class_creation_57__metaclass);
            tmp_called_value_114 = tmp_class_creation_57__metaclass;
            tmp_tuple_element_226 = mod_consts[212];
            tmp_args_value_114 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_114, 0, tmp_tuple_element_226);
            CHECK_OBJECT(tmp_class_creation_57__bases);
            tmp_tuple_element_226 = tmp_class_creation_57__bases;
            PyTuple_SET_ITEM0(tmp_args_value_114, 1, tmp_tuple_element_226);
            tmp_tuple_element_226 = locals_botocore$exceptions$$$class__57_InvalidEndpointDiscoveryConfigurationError_517;
            PyTuple_SET_ITEM0(tmp_args_value_114, 2, tmp_tuple_element_226);
            CHECK_OBJECT(tmp_class_creation_57__class_decl_dict);
            tmp_kwargs_value_114 = tmp_class_creation_57__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 517;
            tmp_assign_source_461 = CALL_FUNCTION(tmp_called_value_114, tmp_args_value_114, tmp_kwargs_value_114);
            Py_DECREF(tmp_args_value_114);
            if (tmp_assign_source_461 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 517;

                goto try_except_handler_171;
            }
            assert(outline_56_var___class__ == NULL);
            outline_56_var___class__ = tmp_assign_source_461;
        }
        CHECK_OBJECT(outline_56_var___class__);
        tmp_assign_source_460 = outline_56_var___class__;
        Py_INCREF(tmp_assign_source_460);
        goto try_return_handler_171;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_171:;
        Py_DECREF(locals_botocore$exceptions$$$class__57_InvalidEndpointDiscoveryConfigurationError_517);
        locals_botocore$exceptions$$$class__57_InvalidEndpointDiscoveryConfigurationError_517 = NULL;
        goto try_return_handler_170;
        // Exception handler code:
        try_except_handler_171:;
        exception_keeper_type_169 = exception_type;
        exception_keeper_value_169 = exception_value;
        exception_keeper_tb_169 = exception_tb;
        exception_keeper_lineno_169 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__57_InvalidEndpointDiscoveryConfigurationError_517);
        locals_botocore$exceptions$$$class__57_InvalidEndpointDiscoveryConfigurationError_517 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_169;
        exception_value = exception_keeper_value_169;
        exception_tb = exception_keeper_tb_169;
        exception_lineno = exception_keeper_lineno_169;

        goto try_except_handler_170;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_170:;
        CHECK_OBJECT(outline_56_var___class__);
        Py_DECREF(outline_56_var___class__);
        outline_56_var___class__ = NULL;
        goto outline_result_57;
        // Exception handler code:
        try_except_handler_170:;
        exception_keeper_type_170 = exception_type;
        exception_keeper_value_170 = exception_value;
        exception_keeper_tb_170 = exception_tb;
        exception_keeper_lineno_170 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_170;
        exception_value = exception_keeper_value_170;
        exception_tb = exception_keeper_tb_170;
        exception_lineno = exception_keeper_lineno_170;

        goto outline_exception_57;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_57:;
        exception_lineno = 517;
        goto try_except_handler_169;
        outline_result_57:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[212], tmp_assign_source_460);
    }
    goto try_end_57;
    // Exception handler code:
    try_except_handler_169:;
    exception_keeper_type_171 = exception_type;
    exception_keeper_value_171 = exception_value;
    exception_keeper_tb_171 = exception_tb;
    exception_keeper_lineno_171 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_57__bases_orig);
    tmp_class_creation_57__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_57__bases);
    tmp_class_creation_57__bases = NULL;
    Py_XDECREF(tmp_class_creation_57__class_decl_dict);
    tmp_class_creation_57__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_57__metaclass);
    tmp_class_creation_57__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_57__prepared);
    tmp_class_creation_57__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_171;
    exception_value = exception_keeper_value_171;
    exception_tb = exception_keeper_tb_171;
    exception_lineno = exception_keeper_lineno_171;

    goto frame_exception_exit_1;
    // End of try:
    try_end_57:;
    CHECK_OBJECT(tmp_class_creation_57__bases_orig);
    Py_DECREF(tmp_class_creation_57__bases_orig);
    tmp_class_creation_57__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_57__bases);
    Py_DECREF(tmp_class_creation_57__bases);
    tmp_class_creation_57__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_57__class_decl_dict);
    Py_DECREF(tmp_class_creation_57__class_decl_dict);
    tmp_class_creation_57__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_57__metaclass);
    Py_DECREF(tmp_class_creation_57__metaclass);
    tmp_class_creation_57__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_57__prepared);
    Py_DECREF(tmp_class_creation_57__prepared);
    tmp_class_creation_57__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_462;
        PyObject *tmp_tuple_element_227;
        tmp_tuple_element_227 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_227 == NULL)) {
            tmp_tuple_element_227 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_227 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 525;

            goto try_except_handler_172;
        }
        tmp_assign_source_462 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_462, 0, tmp_tuple_element_227);
        assert(tmp_class_creation_58__bases_orig == NULL);
        tmp_class_creation_58__bases_orig = tmp_assign_source_462;
    }
    {
        PyObject *tmp_assign_source_463;
        PyObject *tmp_dircall_arg1_58;
        CHECK_OBJECT(tmp_class_creation_58__bases_orig);
        tmp_dircall_arg1_58 = tmp_class_creation_58__bases_orig;
        Py_INCREF(tmp_dircall_arg1_58);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_58};
            tmp_assign_source_463 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_463 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 525;

            goto try_except_handler_172;
        }
        assert(tmp_class_creation_58__bases == NULL);
        tmp_class_creation_58__bases = tmp_assign_source_463;
    }
    {
        PyObject *tmp_assign_source_464;
        tmp_assign_source_464 = PyDict_New();
        assert(tmp_class_creation_58__class_decl_dict == NULL);
        tmp_class_creation_58__class_decl_dict = tmp_assign_source_464;
    }
    {
        PyObject *tmp_assign_source_465;
        PyObject *tmp_metaclass_value_58;
        bool tmp_condition_result_343;
        PyObject *tmp_key_value_172;
        PyObject *tmp_dict_arg_value_172;
        PyObject *tmp_dict_arg_value_173;
        PyObject *tmp_key_value_173;
        nuitka_bool tmp_condition_result_344;
        int tmp_truth_name_58;
        PyObject *tmp_type_arg_115;
        PyObject *tmp_expression_value_296;
        PyObject *tmp_subscript_value_58;
        PyObject *tmp_bases_value_58;
        tmp_key_value_172 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_58__class_decl_dict);
        tmp_dict_arg_value_172 = tmp_class_creation_58__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_172, tmp_key_value_172);
        assert(!(tmp_res == -1));
        tmp_condition_result_343 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_343 != false) {
            goto condexpr_true_115;
        } else {
            goto condexpr_false_115;
        }
        condexpr_true_115:;
        CHECK_OBJECT(tmp_class_creation_58__class_decl_dict);
        tmp_dict_arg_value_173 = tmp_class_creation_58__class_decl_dict;
        tmp_key_value_173 = mod_consts[43];
        tmp_metaclass_value_58 = DICT_GET_ITEM0(tmp_dict_arg_value_173, tmp_key_value_173);
        if (tmp_metaclass_value_58 == NULL) {
            tmp_metaclass_value_58 = Py_None;
        }
        assert(!(tmp_metaclass_value_58 == NULL));
        Py_INCREF(tmp_metaclass_value_58);
        goto condexpr_end_115;
        condexpr_false_115:;
        CHECK_OBJECT(tmp_class_creation_58__bases);
        tmp_truth_name_58 = CHECK_IF_TRUE(tmp_class_creation_58__bases);
        if (tmp_truth_name_58 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 525;

            goto try_except_handler_172;
        }
        tmp_condition_result_344 = tmp_truth_name_58 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_344 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_116;
        } else {
            goto condexpr_false_116;
        }
        condexpr_true_116:;
        CHECK_OBJECT(tmp_class_creation_58__bases);
        tmp_expression_value_296 = tmp_class_creation_58__bases;
        tmp_subscript_value_58 = mod_consts[36];
        tmp_type_arg_115 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_296, tmp_subscript_value_58, 0);
        if (tmp_type_arg_115 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 525;

            goto try_except_handler_172;
        }
        tmp_metaclass_value_58 = BUILTIN_TYPE1(tmp_type_arg_115);
        Py_DECREF(tmp_type_arg_115);
        if (tmp_metaclass_value_58 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 525;

            goto try_except_handler_172;
        }
        goto condexpr_end_116;
        condexpr_false_116:;
        tmp_metaclass_value_58 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_58);
        condexpr_end_116:;
        condexpr_end_115:;
        CHECK_OBJECT(tmp_class_creation_58__bases);
        tmp_bases_value_58 = tmp_class_creation_58__bases;
        tmp_assign_source_465 = SELECT_METACLASS(tmp_metaclass_value_58, tmp_bases_value_58);
        Py_DECREF(tmp_metaclass_value_58);
        if (tmp_assign_source_465 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 525;

            goto try_except_handler_172;
        }
        assert(tmp_class_creation_58__metaclass == NULL);
        tmp_class_creation_58__metaclass = tmp_assign_source_465;
    }
    {
        bool tmp_condition_result_345;
        PyObject *tmp_key_value_174;
        PyObject *tmp_dict_arg_value_174;
        tmp_key_value_174 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_58__class_decl_dict);
        tmp_dict_arg_value_174 = tmp_class_creation_58__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_174, tmp_key_value_174);
        assert(!(tmp_res == -1));
        tmp_condition_result_345 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_345 != false) {
            goto branch_yes_229;
        } else {
            goto branch_no_229;
        }
    }
    branch_yes_229:;
    CHECK_OBJECT(tmp_class_creation_58__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_58__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 525;

        goto try_except_handler_172;
    }
    branch_no_229:;
    {
        nuitka_bool tmp_condition_result_346;
        PyObject *tmp_expression_value_297;
        CHECK_OBJECT(tmp_class_creation_58__metaclass);
        tmp_expression_value_297 = tmp_class_creation_58__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_297, mod_consts[44]);
        tmp_condition_result_346 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_346 == NUITKA_BOOL_TRUE) {
            goto branch_yes_230;
        } else {
            goto branch_no_230;
        }
    }
    branch_yes_230:;
    {
        PyObject *tmp_assign_source_466;
        PyObject *tmp_called_value_115;
        PyObject *tmp_expression_value_298;
        PyObject *tmp_args_value_115;
        PyObject *tmp_tuple_element_228;
        PyObject *tmp_kwargs_value_115;
        CHECK_OBJECT(tmp_class_creation_58__metaclass);
        tmp_expression_value_298 = tmp_class_creation_58__metaclass;
        tmp_called_value_115 = LOOKUP_ATTRIBUTE(tmp_expression_value_298, mod_consts[44]);
        if (tmp_called_value_115 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 525;

            goto try_except_handler_172;
        }
        tmp_tuple_element_228 = mod_consts[215];
        tmp_args_value_115 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_115, 0, tmp_tuple_element_228);
        CHECK_OBJECT(tmp_class_creation_58__bases);
        tmp_tuple_element_228 = tmp_class_creation_58__bases;
        PyTuple_SET_ITEM0(tmp_args_value_115, 1, tmp_tuple_element_228);
        CHECK_OBJECT(tmp_class_creation_58__class_decl_dict);
        tmp_kwargs_value_115 = tmp_class_creation_58__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 525;
        tmp_assign_source_466 = CALL_FUNCTION(tmp_called_value_115, tmp_args_value_115, tmp_kwargs_value_115);
        Py_DECREF(tmp_called_value_115);
        Py_DECREF(tmp_args_value_115);
        if (tmp_assign_source_466 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 525;

            goto try_except_handler_172;
        }
        assert(tmp_class_creation_58__prepared == NULL);
        tmp_class_creation_58__prepared = tmp_assign_source_466;
    }
    {
        bool tmp_condition_result_347;
        PyObject *tmp_operand_value_58;
        PyObject *tmp_expression_value_299;
        CHECK_OBJECT(tmp_class_creation_58__prepared);
        tmp_expression_value_299 = tmp_class_creation_58__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_299, mod_consts[46]);
        tmp_operand_value_58 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_58);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 525;

            goto try_except_handler_172;
        }
        tmp_condition_result_347 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_347 != false) {
            goto branch_yes_231;
        } else {
            goto branch_no_231;
        }
    }
    branch_yes_231:;
    {
        PyObject *tmp_raise_type_58;
        PyObject *tmp_raise_value_58;
        PyObject *tmp_left_value_58;
        PyObject *tmp_right_value_58;
        PyObject *tmp_tuple_element_229;
        PyObject *tmp_getattr_target_58;
        PyObject *tmp_getattr_attr_58;
        PyObject *tmp_getattr_default_58;
        tmp_raise_type_58 = PyExc_TypeError;
        tmp_left_value_58 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_58__metaclass);
        tmp_getattr_target_58 = tmp_class_creation_58__metaclass;
        tmp_getattr_attr_58 = mod_consts[48];
        tmp_getattr_default_58 = mod_consts[49];
        tmp_tuple_element_229 = BUILTIN_GETATTR(tmp_getattr_target_58, tmp_getattr_attr_58, tmp_getattr_default_58);
        if (tmp_tuple_element_229 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 525;

            goto try_except_handler_172;
        }
        tmp_right_value_58 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_300;
            PyObject *tmp_type_arg_116;
            PyTuple_SET_ITEM(tmp_right_value_58, 0, tmp_tuple_element_229);
            CHECK_OBJECT(tmp_class_creation_58__prepared);
            tmp_type_arg_116 = tmp_class_creation_58__prepared;
            tmp_expression_value_300 = BUILTIN_TYPE1(tmp_type_arg_116);
            assert(!(tmp_expression_value_300 == NULL));
            tmp_tuple_element_229 = LOOKUP_ATTRIBUTE(tmp_expression_value_300, mod_consts[48]);
            Py_DECREF(tmp_expression_value_300);
            if (tmp_tuple_element_229 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 525;

                goto tuple_build_exception_62;
            }
            PyTuple_SET_ITEM(tmp_right_value_58, 1, tmp_tuple_element_229);
        }
        goto tuple_build_noexception_62;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_62:;
        Py_DECREF(tmp_right_value_58);
        goto try_except_handler_172;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_62:;
        tmp_raise_value_58 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_58, tmp_right_value_58);
        Py_DECREF(tmp_right_value_58);
        if (tmp_raise_value_58 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 525;

            goto try_except_handler_172;
        }
        exception_type = tmp_raise_type_58;
        Py_INCREF(tmp_raise_type_58);
        exception_value = tmp_raise_value_58;
        exception_lineno = 525;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_172;
    }
    branch_no_231:;
    goto branch_end_230;
    branch_no_230:;
    {
        PyObject *tmp_assign_source_467;
        tmp_assign_source_467 = PyDict_New();
        assert(tmp_class_creation_58__prepared == NULL);
        tmp_class_creation_58__prepared = tmp_assign_source_467;
    }
    branch_end_230:;
    {
        PyObject *tmp_assign_source_468;
        {
            PyObject *tmp_set_locals_58;
            CHECK_OBJECT(tmp_class_creation_58__prepared);
            tmp_set_locals_58 = tmp_class_creation_58__prepared;
            locals_botocore$exceptions$$$class__58_UnsupportedS3ControlConfigurationError_525 = tmp_set_locals_58;
            Py_INCREF(tmp_set_locals_58);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__58_UnsupportedS3ControlConfigurationError_525, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 525;

            goto try_except_handler_174;
        }
        tmp_dictset_value = mod_consts[216];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__58_UnsupportedS3ControlConfigurationError_525, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 525;

            goto try_except_handler_174;
        }
        tmp_dictset_value = mod_consts[215];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__58_UnsupportedS3ControlConfigurationError_525, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 525;

            goto try_except_handler_174;
        }
        if (isFrameUnusable(cache_frame_c1b075a3448a97e50e64d8c99c49e125_55)) {
            Py_XDECREF(cache_frame_c1b075a3448a97e50e64d8c99c49e125_55);

#if _DEBUG_REFCOUNTS
            if (cache_frame_c1b075a3448a97e50e64d8c99c49e125_55 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_c1b075a3448a97e50e64d8c99c49e125_55 = MAKE_FUNCTION_FRAME(codeobj_c1b075a3448a97e50e64d8c99c49e125, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_c1b075a3448a97e50e64d8c99c49e125_55->m_type_description == NULL);
        frame_c1b075a3448a97e50e64d8c99c49e125_55 = cache_frame_c1b075a3448a97e50e64d8c99c49e125_55;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_c1b075a3448a97e50e64d8c99c49e125_55);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_c1b075a3448a97e50e64d8c99c49e125_55) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[217];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__58_UnsupportedS3ControlConfigurationError_525, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 527;
            type_description_2 = "o";
            goto frame_exception_exit_55;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_c1b075a3448a97e50e64d8c99c49e125_55);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_54;

        frame_exception_exit_55:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_c1b075a3448a97e50e64d8c99c49e125_55);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_c1b075a3448a97e50e64d8c99c49e125_55, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_c1b075a3448a97e50e64d8c99c49e125_55->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_c1b075a3448a97e50e64d8c99c49e125_55, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_c1b075a3448a97e50e64d8c99c49e125_55,
            type_description_2,
            outline_57_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_c1b075a3448a97e50e64d8c99c49e125_55 == cache_frame_c1b075a3448a97e50e64d8c99c49e125_55) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_c1b075a3448a97e50e64d8c99c49e125_55);
            cache_frame_c1b075a3448a97e50e64d8c99c49e125_55 = NULL;
        }

        assertFrameObject(frame_c1b075a3448a97e50e64d8c99c49e125_55);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_54;

        frame_no_exception_54:;
        goto skip_nested_handling_54;
        nested_frame_exit_54:;

        goto try_except_handler_174;
        skip_nested_handling_54:;
        {
            nuitka_bool tmp_condition_result_348;
            PyObject *tmp_cmp_expr_left_58;
            PyObject *tmp_cmp_expr_right_58;
            CHECK_OBJECT(tmp_class_creation_58__bases);
            tmp_cmp_expr_left_58 = tmp_class_creation_58__bases;
            CHECK_OBJECT(tmp_class_creation_58__bases_orig);
            tmp_cmp_expr_right_58 = tmp_class_creation_58__bases_orig;
            tmp_condition_result_348 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_58, tmp_cmp_expr_right_58);
            if (tmp_condition_result_348 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 525;

                goto try_except_handler_174;
            }
            if (tmp_condition_result_348 == NUITKA_BOOL_TRUE) {
                goto branch_yes_232;
            } else {
                goto branch_no_232;
            }
            assert(tmp_condition_result_348 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_232:;
        CHECK_OBJECT(tmp_class_creation_58__bases_orig);
        tmp_dictset_value = tmp_class_creation_58__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__58_UnsupportedS3ControlConfigurationError_525, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 525;

            goto try_except_handler_174;
        }
        branch_no_232:;
        {
            PyObject *tmp_assign_source_469;
            PyObject *tmp_called_value_116;
            PyObject *tmp_args_value_116;
            PyObject *tmp_tuple_element_230;
            PyObject *tmp_kwargs_value_116;
            CHECK_OBJECT(tmp_class_creation_58__metaclass);
            tmp_called_value_116 = tmp_class_creation_58__metaclass;
            tmp_tuple_element_230 = mod_consts[215];
            tmp_args_value_116 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_116, 0, tmp_tuple_element_230);
            CHECK_OBJECT(tmp_class_creation_58__bases);
            tmp_tuple_element_230 = tmp_class_creation_58__bases;
            PyTuple_SET_ITEM0(tmp_args_value_116, 1, tmp_tuple_element_230);
            tmp_tuple_element_230 = locals_botocore$exceptions$$$class__58_UnsupportedS3ControlConfigurationError_525;
            PyTuple_SET_ITEM0(tmp_args_value_116, 2, tmp_tuple_element_230);
            CHECK_OBJECT(tmp_class_creation_58__class_decl_dict);
            tmp_kwargs_value_116 = tmp_class_creation_58__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 525;
            tmp_assign_source_469 = CALL_FUNCTION(tmp_called_value_116, tmp_args_value_116, tmp_kwargs_value_116);
            Py_DECREF(tmp_args_value_116);
            if (tmp_assign_source_469 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 525;

                goto try_except_handler_174;
            }
            assert(outline_57_var___class__ == NULL);
            outline_57_var___class__ = tmp_assign_source_469;
        }
        CHECK_OBJECT(outline_57_var___class__);
        tmp_assign_source_468 = outline_57_var___class__;
        Py_INCREF(tmp_assign_source_468);
        goto try_return_handler_174;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_174:;
        Py_DECREF(locals_botocore$exceptions$$$class__58_UnsupportedS3ControlConfigurationError_525);
        locals_botocore$exceptions$$$class__58_UnsupportedS3ControlConfigurationError_525 = NULL;
        goto try_return_handler_173;
        // Exception handler code:
        try_except_handler_174:;
        exception_keeper_type_172 = exception_type;
        exception_keeper_value_172 = exception_value;
        exception_keeper_tb_172 = exception_tb;
        exception_keeper_lineno_172 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__58_UnsupportedS3ControlConfigurationError_525);
        locals_botocore$exceptions$$$class__58_UnsupportedS3ControlConfigurationError_525 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_172;
        exception_value = exception_keeper_value_172;
        exception_tb = exception_keeper_tb_172;
        exception_lineno = exception_keeper_lineno_172;

        goto try_except_handler_173;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_173:;
        CHECK_OBJECT(outline_57_var___class__);
        Py_DECREF(outline_57_var___class__);
        outline_57_var___class__ = NULL;
        goto outline_result_58;
        // Exception handler code:
        try_except_handler_173:;
        exception_keeper_type_173 = exception_type;
        exception_keeper_value_173 = exception_value;
        exception_keeper_tb_173 = exception_tb;
        exception_keeper_lineno_173 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_173;
        exception_value = exception_keeper_value_173;
        exception_tb = exception_keeper_tb_173;
        exception_lineno = exception_keeper_lineno_173;

        goto outline_exception_58;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_58:;
        exception_lineno = 525;
        goto try_except_handler_172;
        outline_result_58:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[215], tmp_assign_source_468);
    }
    goto try_end_58;
    // Exception handler code:
    try_except_handler_172:;
    exception_keeper_type_174 = exception_type;
    exception_keeper_value_174 = exception_value;
    exception_keeper_tb_174 = exception_tb;
    exception_keeper_lineno_174 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_58__bases_orig);
    tmp_class_creation_58__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_58__bases);
    tmp_class_creation_58__bases = NULL;
    Py_XDECREF(tmp_class_creation_58__class_decl_dict);
    tmp_class_creation_58__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_58__metaclass);
    tmp_class_creation_58__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_58__prepared);
    tmp_class_creation_58__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_174;
    exception_value = exception_keeper_value_174;
    exception_tb = exception_keeper_tb_174;
    exception_lineno = exception_keeper_lineno_174;

    goto frame_exception_exit_1;
    // End of try:
    try_end_58:;
    CHECK_OBJECT(tmp_class_creation_58__bases_orig);
    Py_DECREF(tmp_class_creation_58__bases_orig);
    tmp_class_creation_58__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_58__bases);
    Py_DECREF(tmp_class_creation_58__bases);
    tmp_class_creation_58__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_58__class_decl_dict);
    Py_DECREF(tmp_class_creation_58__class_decl_dict);
    tmp_class_creation_58__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_58__metaclass);
    Py_DECREF(tmp_class_creation_58__metaclass);
    tmp_class_creation_58__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_58__prepared);
    Py_DECREF(tmp_class_creation_58__prepared);
    tmp_class_creation_58__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_470;
        PyObject *tmp_tuple_element_231;
        tmp_tuple_element_231 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_231 == NULL)) {
            tmp_tuple_element_231 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_231 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 532;

            goto try_except_handler_175;
        }
        tmp_assign_source_470 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_470, 0, tmp_tuple_element_231);
        assert(tmp_class_creation_59__bases_orig == NULL);
        tmp_class_creation_59__bases_orig = tmp_assign_source_470;
    }
    {
        PyObject *tmp_assign_source_471;
        PyObject *tmp_dircall_arg1_59;
        CHECK_OBJECT(tmp_class_creation_59__bases_orig);
        tmp_dircall_arg1_59 = tmp_class_creation_59__bases_orig;
        Py_INCREF(tmp_dircall_arg1_59);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_59};
            tmp_assign_source_471 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_471 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 532;

            goto try_except_handler_175;
        }
        assert(tmp_class_creation_59__bases == NULL);
        tmp_class_creation_59__bases = tmp_assign_source_471;
    }
    {
        PyObject *tmp_assign_source_472;
        tmp_assign_source_472 = PyDict_New();
        assert(tmp_class_creation_59__class_decl_dict == NULL);
        tmp_class_creation_59__class_decl_dict = tmp_assign_source_472;
    }
    {
        PyObject *tmp_assign_source_473;
        PyObject *tmp_metaclass_value_59;
        bool tmp_condition_result_349;
        PyObject *tmp_key_value_175;
        PyObject *tmp_dict_arg_value_175;
        PyObject *tmp_dict_arg_value_176;
        PyObject *tmp_key_value_176;
        nuitka_bool tmp_condition_result_350;
        int tmp_truth_name_59;
        PyObject *tmp_type_arg_117;
        PyObject *tmp_expression_value_301;
        PyObject *tmp_subscript_value_59;
        PyObject *tmp_bases_value_59;
        tmp_key_value_175 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_59__class_decl_dict);
        tmp_dict_arg_value_175 = tmp_class_creation_59__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_175, tmp_key_value_175);
        assert(!(tmp_res == -1));
        tmp_condition_result_349 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_349 != false) {
            goto condexpr_true_117;
        } else {
            goto condexpr_false_117;
        }
        condexpr_true_117:;
        CHECK_OBJECT(tmp_class_creation_59__class_decl_dict);
        tmp_dict_arg_value_176 = tmp_class_creation_59__class_decl_dict;
        tmp_key_value_176 = mod_consts[43];
        tmp_metaclass_value_59 = DICT_GET_ITEM0(tmp_dict_arg_value_176, tmp_key_value_176);
        if (tmp_metaclass_value_59 == NULL) {
            tmp_metaclass_value_59 = Py_None;
        }
        assert(!(tmp_metaclass_value_59 == NULL));
        Py_INCREF(tmp_metaclass_value_59);
        goto condexpr_end_117;
        condexpr_false_117:;
        CHECK_OBJECT(tmp_class_creation_59__bases);
        tmp_truth_name_59 = CHECK_IF_TRUE(tmp_class_creation_59__bases);
        if (tmp_truth_name_59 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 532;

            goto try_except_handler_175;
        }
        tmp_condition_result_350 = tmp_truth_name_59 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_350 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_118;
        } else {
            goto condexpr_false_118;
        }
        condexpr_true_118:;
        CHECK_OBJECT(tmp_class_creation_59__bases);
        tmp_expression_value_301 = tmp_class_creation_59__bases;
        tmp_subscript_value_59 = mod_consts[36];
        tmp_type_arg_117 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_301, tmp_subscript_value_59, 0);
        if (tmp_type_arg_117 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 532;

            goto try_except_handler_175;
        }
        tmp_metaclass_value_59 = BUILTIN_TYPE1(tmp_type_arg_117);
        Py_DECREF(tmp_type_arg_117);
        if (tmp_metaclass_value_59 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 532;

            goto try_except_handler_175;
        }
        goto condexpr_end_118;
        condexpr_false_118:;
        tmp_metaclass_value_59 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_59);
        condexpr_end_118:;
        condexpr_end_117:;
        CHECK_OBJECT(tmp_class_creation_59__bases);
        tmp_bases_value_59 = tmp_class_creation_59__bases;
        tmp_assign_source_473 = SELECT_METACLASS(tmp_metaclass_value_59, tmp_bases_value_59);
        Py_DECREF(tmp_metaclass_value_59);
        if (tmp_assign_source_473 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 532;

            goto try_except_handler_175;
        }
        assert(tmp_class_creation_59__metaclass == NULL);
        tmp_class_creation_59__metaclass = tmp_assign_source_473;
    }
    {
        bool tmp_condition_result_351;
        PyObject *tmp_key_value_177;
        PyObject *tmp_dict_arg_value_177;
        tmp_key_value_177 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_59__class_decl_dict);
        tmp_dict_arg_value_177 = tmp_class_creation_59__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_177, tmp_key_value_177);
        assert(!(tmp_res == -1));
        tmp_condition_result_351 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_351 != false) {
            goto branch_yes_233;
        } else {
            goto branch_no_233;
        }
    }
    branch_yes_233:;
    CHECK_OBJECT(tmp_class_creation_59__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_59__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 532;

        goto try_except_handler_175;
    }
    branch_no_233:;
    {
        nuitka_bool tmp_condition_result_352;
        PyObject *tmp_expression_value_302;
        CHECK_OBJECT(tmp_class_creation_59__metaclass);
        tmp_expression_value_302 = tmp_class_creation_59__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_302, mod_consts[44]);
        tmp_condition_result_352 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_352 == NUITKA_BOOL_TRUE) {
            goto branch_yes_234;
        } else {
            goto branch_no_234;
        }
    }
    branch_yes_234:;
    {
        PyObject *tmp_assign_source_474;
        PyObject *tmp_called_value_117;
        PyObject *tmp_expression_value_303;
        PyObject *tmp_args_value_117;
        PyObject *tmp_tuple_element_232;
        PyObject *tmp_kwargs_value_117;
        CHECK_OBJECT(tmp_class_creation_59__metaclass);
        tmp_expression_value_303 = tmp_class_creation_59__metaclass;
        tmp_called_value_117 = LOOKUP_ATTRIBUTE(tmp_expression_value_303, mod_consts[44]);
        if (tmp_called_value_117 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 532;

            goto try_except_handler_175;
        }
        tmp_tuple_element_232 = mod_consts[218];
        tmp_args_value_117 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_117, 0, tmp_tuple_element_232);
        CHECK_OBJECT(tmp_class_creation_59__bases);
        tmp_tuple_element_232 = tmp_class_creation_59__bases;
        PyTuple_SET_ITEM0(tmp_args_value_117, 1, tmp_tuple_element_232);
        CHECK_OBJECT(tmp_class_creation_59__class_decl_dict);
        tmp_kwargs_value_117 = tmp_class_creation_59__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 532;
        tmp_assign_source_474 = CALL_FUNCTION(tmp_called_value_117, tmp_args_value_117, tmp_kwargs_value_117);
        Py_DECREF(tmp_called_value_117);
        Py_DECREF(tmp_args_value_117);
        if (tmp_assign_source_474 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 532;

            goto try_except_handler_175;
        }
        assert(tmp_class_creation_59__prepared == NULL);
        tmp_class_creation_59__prepared = tmp_assign_source_474;
    }
    {
        bool tmp_condition_result_353;
        PyObject *tmp_operand_value_59;
        PyObject *tmp_expression_value_304;
        CHECK_OBJECT(tmp_class_creation_59__prepared);
        tmp_expression_value_304 = tmp_class_creation_59__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_304, mod_consts[46]);
        tmp_operand_value_59 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_59);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 532;

            goto try_except_handler_175;
        }
        tmp_condition_result_353 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_353 != false) {
            goto branch_yes_235;
        } else {
            goto branch_no_235;
        }
    }
    branch_yes_235:;
    {
        PyObject *tmp_raise_type_59;
        PyObject *tmp_raise_value_59;
        PyObject *tmp_left_value_59;
        PyObject *tmp_right_value_59;
        PyObject *tmp_tuple_element_233;
        PyObject *tmp_getattr_target_59;
        PyObject *tmp_getattr_attr_59;
        PyObject *tmp_getattr_default_59;
        tmp_raise_type_59 = PyExc_TypeError;
        tmp_left_value_59 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_59__metaclass);
        tmp_getattr_target_59 = tmp_class_creation_59__metaclass;
        tmp_getattr_attr_59 = mod_consts[48];
        tmp_getattr_default_59 = mod_consts[49];
        tmp_tuple_element_233 = BUILTIN_GETATTR(tmp_getattr_target_59, tmp_getattr_attr_59, tmp_getattr_default_59);
        if (tmp_tuple_element_233 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 532;

            goto try_except_handler_175;
        }
        tmp_right_value_59 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_305;
            PyObject *tmp_type_arg_118;
            PyTuple_SET_ITEM(tmp_right_value_59, 0, tmp_tuple_element_233);
            CHECK_OBJECT(tmp_class_creation_59__prepared);
            tmp_type_arg_118 = tmp_class_creation_59__prepared;
            tmp_expression_value_305 = BUILTIN_TYPE1(tmp_type_arg_118);
            assert(!(tmp_expression_value_305 == NULL));
            tmp_tuple_element_233 = LOOKUP_ATTRIBUTE(tmp_expression_value_305, mod_consts[48]);
            Py_DECREF(tmp_expression_value_305);
            if (tmp_tuple_element_233 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 532;

                goto tuple_build_exception_63;
            }
            PyTuple_SET_ITEM(tmp_right_value_59, 1, tmp_tuple_element_233);
        }
        goto tuple_build_noexception_63;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_63:;
        Py_DECREF(tmp_right_value_59);
        goto try_except_handler_175;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_63:;
        tmp_raise_value_59 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_59, tmp_right_value_59);
        Py_DECREF(tmp_right_value_59);
        if (tmp_raise_value_59 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 532;

            goto try_except_handler_175;
        }
        exception_type = tmp_raise_type_59;
        Py_INCREF(tmp_raise_type_59);
        exception_value = tmp_raise_value_59;
        exception_lineno = 532;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_175;
    }
    branch_no_235:;
    goto branch_end_234;
    branch_no_234:;
    {
        PyObject *tmp_assign_source_475;
        tmp_assign_source_475 = PyDict_New();
        assert(tmp_class_creation_59__prepared == NULL);
        tmp_class_creation_59__prepared = tmp_assign_source_475;
    }
    branch_end_234:;
    {
        PyObject *tmp_assign_source_476;
        {
            PyObject *tmp_set_locals_59;
            CHECK_OBJECT(tmp_class_creation_59__prepared);
            tmp_set_locals_59 = tmp_class_creation_59__prepared;
            locals_botocore$exceptions$$$class__59_InvalidRetryConfigurationError_532 = tmp_set_locals_59;
            Py_INCREF(tmp_set_locals_59);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__59_InvalidRetryConfigurationError_532, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 532;

            goto try_except_handler_177;
        }
        tmp_dictset_value = mod_consts[219];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__59_InvalidRetryConfigurationError_532, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 532;

            goto try_except_handler_177;
        }
        tmp_dictset_value = mod_consts[218];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__59_InvalidRetryConfigurationError_532, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 532;

            goto try_except_handler_177;
        }
        if (isFrameUnusable(cache_frame_df9b2633f611616815dfaac59767af68_56)) {
            Py_XDECREF(cache_frame_df9b2633f611616815dfaac59767af68_56);

#if _DEBUG_REFCOUNTS
            if (cache_frame_df9b2633f611616815dfaac59767af68_56 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_df9b2633f611616815dfaac59767af68_56 = MAKE_FUNCTION_FRAME(codeobj_df9b2633f611616815dfaac59767af68, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_df9b2633f611616815dfaac59767af68_56->m_type_description == NULL);
        frame_df9b2633f611616815dfaac59767af68_56 = cache_frame_df9b2633f611616815dfaac59767af68_56;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_df9b2633f611616815dfaac59767af68_56);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_df9b2633f611616815dfaac59767af68_56) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[220];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__59_InvalidRetryConfigurationError_532, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 534;
            type_description_2 = "o";
            goto frame_exception_exit_56;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_df9b2633f611616815dfaac59767af68_56);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_55;

        frame_exception_exit_56:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_df9b2633f611616815dfaac59767af68_56);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_df9b2633f611616815dfaac59767af68_56, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_df9b2633f611616815dfaac59767af68_56->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_df9b2633f611616815dfaac59767af68_56, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_df9b2633f611616815dfaac59767af68_56,
            type_description_2,
            outline_58_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_df9b2633f611616815dfaac59767af68_56 == cache_frame_df9b2633f611616815dfaac59767af68_56) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_df9b2633f611616815dfaac59767af68_56);
            cache_frame_df9b2633f611616815dfaac59767af68_56 = NULL;
        }

        assertFrameObject(frame_df9b2633f611616815dfaac59767af68_56);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_55;

        frame_no_exception_55:;
        goto skip_nested_handling_55;
        nested_frame_exit_55:;

        goto try_except_handler_177;
        skip_nested_handling_55:;
        {
            nuitka_bool tmp_condition_result_354;
            PyObject *tmp_cmp_expr_left_59;
            PyObject *tmp_cmp_expr_right_59;
            CHECK_OBJECT(tmp_class_creation_59__bases);
            tmp_cmp_expr_left_59 = tmp_class_creation_59__bases;
            CHECK_OBJECT(tmp_class_creation_59__bases_orig);
            tmp_cmp_expr_right_59 = tmp_class_creation_59__bases_orig;
            tmp_condition_result_354 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_59, tmp_cmp_expr_right_59);
            if (tmp_condition_result_354 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 532;

                goto try_except_handler_177;
            }
            if (tmp_condition_result_354 == NUITKA_BOOL_TRUE) {
                goto branch_yes_236;
            } else {
                goto branch_no_236;
            }
            assert(tmp_condition_result_354 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_236:;
        CHECK_OBJECT(tmp_class_creation_59__bases_orig);
        tmp_dictset_value = tmp_class_creation_59__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__59_InvalidRetryConfigurationError_532, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 532;

            goto try_except_handler_177;
        }
        branch_no_236:;
        {
            PyObject *tmp_assign_source_477;
            PyObject *tmp_called_value_118;
            PyObject *tmp_args_value_118;
            PyObject *tmp_tuple_element_234;
            PyObject *tmp_kwargs_value_118;
            CHECK_OBJECT(tmp_class_creation_59__metaclass);
            tmp_called_value_118 = tmp_class_creation_59__metaclass;
            tmp_tuple_element_234 = mod_consts[218];
            tmp_args_value_118 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_118, 0, tmp_tuple_element_234);
            CHECK_OBJECT(tmp_class_creation_59__bases);
            tmp_tuple_element_234 = tmp_class_creation_59__bases;
            PyTuple_SET_ITEM0(tmp_args_value_118, 1, tmp_tuple_element_234);
            tmp_tuple_element_234 = locals_botocore$exceptions$$$class__59_InvalidRetryConfigurationError_532;
            PyTuple_SET_ITEM0(tmp_args_value_118, 2, tmp_tuple_element_234);
            CHECK_OBJECT(tmp_class_creation_59__class_decl_dict);
            tmp_kwargs_value_118 = tmp_class_creation_59__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 532;
            tmp_assign_source_477 = CALL_FUNCTION(tmp_called_value_118, tmp_args_value_118, tmp_kwargs_value_118);
            Py_DECREF(tmp_args_value_118);
            if (tmp_assign_source_477 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 532;

                goto try_except_handler_177;
            }
            assert(outline_58_var___class__ == NULL);
            outline_58_var___class__ = tmp_assign_source_477;
        }
        CHECK_OBJECT(outline_58_var___class__);
        tmp_assign_source_476 = outline_58_var___class__;
        Py_INCREF(tmp_assign_source_476);
        goto try_return_handler_177;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_177:;
        Py_DECREF(locals_botocore$exceptions$$$class__59_InvalidRetryConfigurationError_532);
        locals_botocore$exceptions$$$class__59_InvalidRetryConfigurationError_532 = NULL;
        goto try_return_handler_176;
        // Exception handler code:
        try_except_handler_177:;
        exception_keeper_type_175 = exception_type;
        exception_keeper_value_175 = exception_value;
        exception_keeper_tb_175 = exception_tb;
        exception_keeper_lineno_175 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__59_InvalidRetryConfigurationError_532);
        locals_botocore$exceptions$$$class__59_InvalidRetryConfigurationError_532 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_175;
        exception_value = exception_keeper_value_175;
        exception_tb = exception_keeper_tb_175;
        exception_lineno = exception_keeper_lineno_175;

        goto try_except_handler_176;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_176:;
        CHECK_OBJECT(outline_58_var___class__);
        Py_DECREF(outline_58_var___class__);
        outline_58_var___class__ = NULL;
        goto outline_result_59;
        // Exception handler code:
        try_except_handler_176:;
        exception_keeper_type_176 = exception_type;
        exception_keeper_value_176 = exception_value;
        exception_keeper_tb_176 = exception_tb;
        exception_keeper_lineno_176 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_176;
        exception_value = exception_keeper_value_176;
        exception_tb = exception_keeper_tb_176;
        exception_lineno = exception_keeper_lineno_176;

        goto outline_exception_59;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_59:;
        exception_lineno = 532;
        goto try_except_handler_175;
        outline_result_59:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[218], tmp_assign_source_476);
    }
    goto try_end_59;
    // Exception handler code:
    try_except_handler_175:;
    exception_keeper_type_177 = exception_type;
    exception_keeper_value_177 = exception_value;
    exception_keeper_tb_177 = exception_tb;
    exception_keeper_lineno_177 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_59__bases_orig);
    tmp_class_creation_59__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_59__bases);
    tmp_class_creation_59__bases = NULL;
    Py_XDECREF(tmp_class_creation_59__class_decl_dict);
    tmp_class_creation_59__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_59__metaclass);
    tmp_class_creation_59__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_59__prepared);
    tmp_class_creation_59__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_177;
    exception_value = exception_keeper_value_177;
    exception_tb = exception_keeper_tb_177;
    exception_lineno = exception_keeper_lineno_177;

    goto frame_exception_exit_1;
    // End of try:
    try_end_59:;
    CHECK_OBJECT(tmp_class_creation_59__bases_orig);
    Py_DECREF(tmp_class_creation_59__bases_orig);
    tmp_class_creation_59__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_59__bases);
    Py_DECREF(tmp_class_creation_59__bases);
    tmp_class_creation_59__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_59__class_decl_dict);
    Py_DECREF(tmp_class_creation_59__class_decl_dict);
    tmp_class_creation_59__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_59__metaclass);
    Py_DECREF(tmp_class_creation_59__metaclass);
    tmp_class_creation_59__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_59__prepared);
    Py_DECREF(tmp_class_creation_59__prepared);
    tmp_class_creation_59__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_478;
        PyObject *tmp_tuple_element_235;
        tmp_tuple_element_235 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[218]);

        if (unlikely(tmp_tuple_element_235 == NULL)) {
            tmp_tuple_element_235 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[218]);
        }

        if (tmp_tuple_element_235 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 540;

            goto try_except_handler_178;
        }
        tmp_assign_source_478 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_478, 0, tmp_tuple_element_235);
        assert(tmp_class_creation_60__bases_orig == NULL);
        tmp_class_creation_60__bases_orig = tmp_assign_source_478;
    }
    {
        PyObject *tmp_assign_source_479;
        PyObject *tmp_dircall_arg1_60;
        CHECK_OBJECT(tmp_class_creation_60__bases_orig);
        tmp_dircall_arg1_60 = tmp_class_creation_60__bases_orig;
        Py_INCREF(tmp_dircall_arg1_60);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_60};
            tmp_assign_source_479 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_479 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 540;

            goto try_except_handler_178;
        }
        assert(tmp_class_creation_60__bases == NULL);
        tmp_class_creation_60__bases = tmp_assign_source_479;
    }
    {
        PyObject *tmp_assign_source_480;
        tmp_assign_source_480 = PyDict_New();
        assert(tmp_class_creation_60__class_decl_dict == NULL);
        tmp_class_creation_60__class_decl_dict = tmp_assign_source_480;
    }
    {
        PyObject *tmp_assign_source_481;
        PyObject *tmp_metaclass_value_60;
        bool tmp_condition_result_355;
        PyObject *tmp_key_value_178;
        PyObject *tmp_dict_arg_value_178;
        PyObject *tmp_dict_arg_value_179;
        PyObject *tmp_key_value_179;
        nuitka_bool tmp_condition_result_356;
        int tmp_truth_name_60;
        PyObject *tmp_type_arg_119;
        PyObject *tmp_expression_value_306;
        PyObject *tmp_subscript_value_60;
        PyObject *tmp_bases_value_60;
        tmp_key_value_178 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_60__class_decl_dict);
        tmp_dict_arg_value_178 = tmp_class_creation_60__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_178, tmp_key_value_178);
        assert(!(tmp_res == -1));
        tmp_condition_result_355 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_355 != false) {
            goto condexpr_true_119;
        } else {
            goto condexpr_false_119;
        }
        condexpr_true_119:;
        CHECK_OBJECT(tmp_class_creation_60__class_decl_dict);
        tmp_dict_arg_value_179 = tmp_class_creation_60__class_decl_dict;
        tmp_key_value_179 = mod_consts[43];
        tmp_metaclass_value_60 = DICT_GET_ITEM0(tmp_dict_arg_value_179, tmp_key_value_179);
        if (tmp_metaclass_value_60 == NULL) {
            tmp_metaclass_value_60 = Py_None;
        }
        assert(!(tmp_metaclass_value_60 == NULL));
        Py_INCREF(tmp_metaclass_value_60);
        goto condexpr_end_119;
        condexpr_false_119:;
        CHECK_OBJECT(tmp_class_creation_60__bases);
        tmp_truth_name_60 = CHECK_IF_TRUE(tmp_class_creation_60__bases);
        if (tmp_truth_name_60 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 540;

            goto try_except_handler_178;
        }
        tmp_condition_result_356 = tmp_truth_name_60 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_356 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_120;
        } else {
            goto condexpr_false_120;
        }
        condexpr_true_120:;
        CHECK_OBJECT(tmp_class_creation_60__bases);
        tmp_expression_value_306 = tmp_class_creation_60__bases;
        tmp_subscript_value_60 = mod_consts[36];
        tmp_type_arg_119 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_306, tmp_subscript_value_60, 0);
        if (tmp_type_arg_119 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 540;

            goto try_except_handler_178;
        }
        tmp_metaclass_value_60 = BUILTIN_TYPE1(tmp_type_arg_119);
        Py_DECREF(tmp_type_arg_119);
        if (tmp_metaclass_value_60 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 540;

            goto try_except_handler_178;
        }
        goto condexpr_end_120;
        condexpr_false_120:;
        tmp_metaclass_value_60 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_60);
        condexpr_end_120:;
        condexpr_end_119:;
        CHECK_OBJECT(tmp_class_creation_60__bases);
        tmp_bases_value_60 = tmp_class_creation_60__bases;
        tmp_assign_source_481 = SELECT_METACLASS(tmp_metaclass_value_60, tmp_bases_value_60);
        Py_DECREF(tmp_metaclass_value_60);
        if (tmp_assign_source_481 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 540;

            goto try_except_handler_178;
        }
        assert(tmp_class_creation_60__metaclass == NULL);
        tmp_class_creation_60__metaclass = tmp_assign_source_481;
    }
    {
        bool tmp_condition_result_357;
        PyObject *tmp_key_value_180;
        PyObject *tmp_dict_arg_value_180;
        tmp_key_value_180 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_60__class_decl_dict);
        tmp_dict_arg_value_180 = tmp_class_creation_60__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_180, tmp_key_value_180);
        assert(!(tmp_res == -1));
        tmp_condition_result_357 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_357 != false) {
            goto branch_yes_237;
        } else {
            goto branch_no_237;
        }
    }
    branch_yes_237:;
    CHECK_OBJECT(tmp_class_creation_60__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_60__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 540;

        goto try_except_handler_178;
    }
    branch_no_237:;
    {
        nuitka_bool tmp_condition_result_358;
        PyObject *tmp_expression_value_307;
        CHECK_OBJECT(tmp_class_creation_60__metaclass);
        tmp_expression_value_307 = tmp_class_creation_60__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_307, mod_consts[44]);
        tmp_condition_result_358 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_358 == NUITKA_BOOL_TRUE) {
            goto branch_yes_238;
        } else {
            goto branch_no_238;
        }
    }
    branch_yes_238:;
    {
        PyObject *tmp_assign_source_482;
        PyObject *tmp_called_value_119;
        PyObject *tmp_expression_value_308;
        PyObject *tmp_args_value_119;
        PyObject *tmp_tuple_element_236;
        PyObject *tmp_kwargs_value_119;
        CHECK_OBJECT(tmp_class_creation_60__metaclass);
        tmp_expression_value_308 = tmp_class_creation_60__metaclass;
        tmp_called_value_119 = LOOKUP_ATTRIBUTE(tmp_expression_value_308, mod_consts[44]);
        if (tmp_called_value_119 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 540;

            goto try_except_handler_178;
        }
        tmp_tuple_element_236 = mod_consts[221];
        tmp_args_value_119 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_119, 0, tmp_tuple_element_236);
        CHECK_OBJECT(tmp_class_creation_60__bases);
        tmp_tuple_element_236 = tmp_class_creation_60__bases;
        PyTuple_SET_ITEM0(tmp_args_value_119, 1, tmp_tuple_element_236);
        CHECK_OBJECT(tmp_class_creation_60__class_decl_dict);
        tmp_kwargs_value_119 = tmp_class_creation_60__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 540;
        tmp_assign_source_482 = CALL_FUNCTION(tmp_called_value_119, tmp_args_value_119, tmp_kwargs_value_119);
        Py_DECREF(tmp_called_value_119);
        Py_DECREF(tmp_args_value_119);
        if (tmp_assign_source_482 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 540;

            goto try_except_handler_178;
        }
        assert(tmp_class_creation_60__prepared == NULL);
        tmp_class_creation_60__prepared = tmp_assign_source_482;
    }
    {
        bool tmp_condition_result_359;
        PyObject *tmp_operand_value_60;
        PyObject *tmp_expression_value_309;
        CHECK_OBJECT(tmp_class_creation_60__prepared);
        tmp_expression_value_309 = tmp_class_creation_60__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_309, mod_consts[46]);
        tmp_operand_value_60 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_60);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 540;

            goto try_except_handler_178;
        }
        tmp_condition_result_359 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_359 != false) {
            goto branch_yes_239;
        } else {
            goto branch_no_239;
        }
    }
    branch_yes_239:;
    {
        PyObject *tmp_raise_type_60;
        PyObject *tmp_raise_value_60;
        PyObject *tmp_left_value_60;
        PyObject *tmp_right_value_60;
        PyObject *tmp_tuple_element_237;
        PyObject *tmp_getattr_target_60;
        PyObject *tmp_getattr_attr_60;
        PyObject *tmp_getattr_default_60;
        tmp_raise_type_60 = PyExc_TypeError;
        tmp_left_value_60 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_60__metaclass);
        tmp_getattr_target_60 = tmp_class_creation_60__metaclass;
        tmp_getattr_attr_60 = mod_consts[48];
        tmp_getattr_default_60 = mod_consts[49];
        tmp_tuple_element_237 = BUILTIN_GETATTR(tmp_getattr_target_60, tmp_getattr_attr_60, tmp_getattr_default_60);
        if (tmp_tuple_element_237 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 540;

            goto try_except_handler_178;
        }
        tmp_right_value_60 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_310;
            PyObject *tmp_type_arg_120;
            PyTuple_SET_ITEM(tmp_right_value_60, 0, tmp_tuple_element_237);
            CHECK_OBJECT(tmp_class_creation_60__prepared);
            tmp_type_arg_120 = tmp_class_creation_60__prepared;
            tmp_expression_value_310 = BUILTIN_TYPE1(tmp_type_arg_120);
            assert(!(tmp_expression_value_310 == NULL));
            tmp_tuple_element_237 = LOOKUP_ATTRIBUTE(tmp_expression_value_310, mod_consts[48]);
            Py_DECREF(tmp_expression_value_310);
            if (tmp_tuple_element_237 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 540;

                goto tuple_build_exception_64;
            }
            PyTuple_SET_ITEM(tmp_right_value_60, 1, tmp_tuple_element_237);
        }
        goto tuple_build_noexception_64;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_64:;
        Py_DECREF(tmp_right_value_60);
        goto try_except_handler_178;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_64:;
        tmp_raise_value_60 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_60, tmp_right_value_60);
        Py_DECREF(tmp_right_value_60);
        if (tmp_raise_value_60 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 540;

            goto try_except_handler_178;
        }
        exception_type = tmp_raise_type_60;
        Py_INCREF(tmp_raise_type_60);
        exception_value = tmp_raise_value_60;
        exception_lineno = 540;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_178;
    }
    branch_no_239:;
    goto branch_end_238;
    branch_no_238:;
    {
        PyObject *tmp_assign_source_483;
        tmp_assign_source_483 = PyDict_New();
        assert(tmp_class_creation_60__prepared == NULL);
        tmp_class_creation_60__prepared = tmp_assign_source_483;
    }
    branch_end_238:;
    {
        PyObject *tmp_assign_source_484;
        {
            PyObject *tmp_set_locals_60;
            CHECK_OBJECT(tmp_class_creation_60__prepared);
            tmp_set_locals_60 = tmp_class_creation_60__prepared;
            locals_botocore$exceptions$$$class__60_InvalidMaxRetryAttemptsError_540 = tmp_set_locals_60;
            Py_INCREF(tmp_set_locals_60);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__60_InvalidMaxRetryAttemptsError_540, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 540;

            goto try_except_handler_180;
        }
        tmp_dictset_value = mod_consts[219];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__60_InvalidMaxRetryAttemptsError_540, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 540;

            goto try_except_handler_180;
        }
        tmp_dictset_value = mod_consts[221];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__60_InvalidMaxRetryAttemptsError_540, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 540;

            goto try_except_handler_180;
        }
        if (isFrameUnusable(cache_frame_8d3d0dac09d6748bba182d1e4df1063d_57)) {
            Py_XDECREF(cache_frame_8d3d0dac09d6748bba182d1e4df1063d_57);

#if _DEBUG_REFCOUNTS
            if (cache_frame_8d3d0dac09d6748bba182d1e4df1063d_57 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_8d3d0dac09d6748bba182d1e4df1063d_57 = MAKE_FUNCTION_FRAME(codeobj_8d3d0dac09d6748bba182d1e4df1063d, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_8d3d0dac09d6748bba182d1e4df1063d_57->m_type_description == NULL);
        frame_8d3d0dac09d6748bba182d1e4df1063d_57 = cache_frame_8d3d0dac09d6748bba182d1e4df1063d_57;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_8d3d0dac09d6748bba182d1e4df1063d_57);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_8d3d0dac09d6748bba182d1e4df1063d_57) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[222];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__60_InvalidMaxRetryAttemptsError_540, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 542;
            type_description_2 = "o";
            goto frame_exception_exit_57;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_8d3d0dac09d6748bba182d1e4df1063d_57);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_56;

        frame_exception_exit_57:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_8d3d0dac09d6748bba182d1e4df1063d_57);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_8d3d0dac09d6748bba182d1e4df1063d_57, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_8d3d0dac09d6748bba182d1e4df1063d_57->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_8d3d0dac09d6748bba182d1e4df1063d_57, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_8d3d0dac09d6748bba182d1e4df1063d_57,
            type_description_2,
            outline_59_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_8d3d0dac09d6748bba182d1e4df1063d_57 == cache_frame_8d3d0dac09d6748bba182d1e4df1063d_57) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_8d3d0dac09d6748bba182d1e4df1063d_57);
            cache_frame_8d3d0dac09d6748bba182d1e4df1063d_57 = NULL;
        }

        assertFrameObject(frame_8d3d0dac09d6748bba182d1e4df1063d_57);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_56;

        frame_no_exception_56:;
        goto skip_nested_handling_56;
        nested_frame_exit_56:;

        goto try_except_handler_180;
        skip_nested_handling_56:;
        {
            nuitka_bool tmp_condition_result_360;
            PyObject *tmp_cmp_expr_left_60;
            PyObject *tmp_cmp_expr_right_60;
            CHECK_OBJECT(tmp_class_creation_60__bases);
            tmp_cmp_expr_left_60 = tmp_class_creation_60__bases;
            CHECK_OBJECT(tmp_class_creation_60__bases_orig);
            tmp_cmp_expr_right_60 = tmp_class_creation_60__bases_orig;
            tmp_condition_result_360 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_60, tmp_cmp_expr_right_60);
            if (tmp_condition_result_360 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 540;

                goto try_except_handler_180;
            }
            if (tmp_condition_result_360 == NUITKA_BOOL_TRUE) {
                goto branch_yes_240;
            } else {
                goto branch_no_240;
            }
            assert(tmp_condition_result_360 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_240:;
        CHECK_OBJECT(tmp_class_creation_60__bases_orig);
        tmp_dictset_value = tmp_class_creation_60__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__60_InvalidMaxRetryAttemptsError_540, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 540;

            goto try_except_handler_180;
        }
        branch_no_240:;
        {
            PyObject *tmp_assign_source_485;
            PyObject *tmp_called_value_120;
            PyObject *tmp_args_value_120;
            PyObject *tmp_tuple_element_238;
            PyObject *tmp_kwargs_value_120;
            CHECK_OBJECT(tmp_class_creation_60__metaclass);
            tmp_called_value_120 = tmp_class_creation_60__metaclass;
            tmp_tuple_element_238 = mod_consts[221];
            tmp_args_value_120 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_120, 0, tmp_tuple_element_238);
            CHECK_OBJECT(tmp_class_creation_60__bases);
            tmp_tuple_element_238 = tmp_class_creation_60__bases;
            PyTuple_SET_ITEM0(tmp_args_value_120, 1, tmp_tuple_element_238);
            tmp_tuple_element_238 = locals_botocore$exceptions$$$class__60_InvalidMaxRetryAttemptsError_540;
            PyTuple_SET_ITEM0(tmp_args_value_120, 2, tmp_tuple_element_238);
            CHECK_OBJECT(tmp_class_creation_60__class_decl_dict);
            tmp_kwargs_value_120 = tmp_class_creation_60__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 540;
            tmp_assign_source_485 = CALL_FUNCTION(tmp_called_value_120, tmp_args_value_120, tmp_kwargs_value_120);
            Py_DECREF(tmp_args_value_120);
            if (tmp_assign_source_485 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 540;

                goto try_except_handler_180;
            }
            assert(outline_59_var___class__ == NULL);
            outline_59_var___class__ = tmp_assign_source_485;
        }
        CHECK_OBJECT(outline_59_var___class__);
        tmp_assign_source_484 = outline_59_var___class__;
        Py_INCREF(tmp_assign_source_484);
        goto try_return_handler_180;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_180:;
        Py_DECREF(locals_botocore$exceptions$$$class__60_InvalidMaxRetryAttemptsError_540);
        locals_botocore$exceptions$$$class__60_InvalidMaxRetryAttemptsError_540 = NULL;
        goto try_return_handler_179;
        // Exception handler code:
        try_except_handler_180:;
        exception_keeper_type_178 = exception_type;
        exception_keeper_value_178 = exception_value;
        exception_keeper_tb_178 = exception_tb;
        exception_keeper_lineno_178 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__60_InvalidMaxRetryAttemptsError_540);
        locals_botocore$exceptions$$$class__60_InvalidMaxRetryAttemptsError_540 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_178;
        exception_value = exception_keeper_value_178;
        exception_tb = exception_keeper_tb_178;
        exception_lineno = exception_keeper_lineno_178;

        goto try_except_handler_179;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_179:;
        CHECK_OBJECT(outline_59_var___class__);
        Py_DECREF(outline_59_var___class__);
        outline_59_var___class__ = NULL;
        goto outline_result_60;
        // Exception handler code:
        try_except_handler_179:;
        exception_keeper_type_179 = exception_type;
        exception_keeper_value_179 = exception_value;
        exception_keeper_tb_179 = exception_tb;
        exception_keeper_lineno_179 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_179;
        exception_value = exception_keeper_value_179;
        exception_tb = exception_keeper_tb_179;
        exception_lineno = exception_keeper_lineno_179;

        goto outline_exception_60;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_60:;
        exception_lineno = 540;
        goto try_except_handler_178;
        outline_result_60:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[221], tmp_assign_source_484);
    }
    goto try_end_60;
    // Exception handler code:
    try_except_handler_178:;
    exception_keeper_type_180 = exception_type;
    exception_keeper_value_180 = exception_value;
    exception_keeper_tb_180 = exception_tb;
    exception_keeper_lineno_180 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_60__bases_orig);
    tmp_class_creation_60__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_60__bases);
    tmp_class_creation_60__bases = NULL;
    Py_XDECREF(tmp_class_creation_60__class_decl_dict);
    tmp_class_creation_60__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_60__metaclass);
    tmp_class_creation_60__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_60__prepared);
    tmp_class_creation_60__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_180;
    exception_value = exception_keeper_value_180;
    exception_tb = exception_keeper_tb_180;
    exception_lineno = exception_keeper_lineno_180;

    goto frame_exception_exit_1;
    // End of try:
    try_end_60:;
    CHECK_OBJECT(tmp_class_creation_60__bases_orig);
    Py_DECREF(tmp_class_creation_60__bases_orig);
    tmp_class_creation_60__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_60__bases);
    Py_DECREF(tmp_class_creation_60__bases);
    tmp_class_creation_60__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_60__class_decl_dict);
    Py_DECREF(tmp_class_creation_60__class_decl_dict);
    tmp_class_creation_60__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_60__metaclass);
    Py_DECREF(tmp_class_creation_60__metaclass);
    tmp_class_creation_60__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_60__prepared);
    Py_DECREF(tmp_class_creation_60__prepared);
    tmp_class_creation_60__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_486;
        PyObject *tmp_tuple_element_239;
        tmp_tuple_element_239 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[218]);

        if (unlikely(tmp_tuple_element_239 == NULL)) {
            tmp_tuple_element_239 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[218]);
        }

        if (tmp_tuple_element_239 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 548;

            goto try_except_handler_181;
        }
        tmp_assign_source_486 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_486, 0, tmp_tuple_element_239);
        assert(tmp_class_creation_61__bases_orig == NULL);
        tmp_class_creation_61__bases_orig = tmp_assign_source_486;
    }
    {
        PyObject *tmp_assign_source_487;
        PyObject *tmp_dircall_arg1_61;
        CHECK_OBJECT(tmp_class_creation_61__bases_orig);
        tmp_dircall_arg1_61 = tmp_class_creation_61__bases_orig;
        Py_INCREF(tmp_dircall_arg1_61);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_61};
            tmp_assign_source_487 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_487 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 548;

            goto try_except_handler_181;
        }
        assert(tmp_class_creation_61__bases == NULL);
        tmp_class_creation_61__bases = tmp_assign_source_487;
    }
    {
        PyObject *tmp_assign_source_488;
        tmp_assign_source_488 = PyDict_New();
        assert(tmp_class_creation_61__class_decl_dict == NULL);
        tmp_class_creation_61__class_decl_dict = tmp_assign_source_488;
    }
    {
        PyObject *tmp_assign_source_489;
        PyObject *tmp_metaclass_value_61;
        bool tmp_condition_result_361;
        PyObject *tmp_key_value_181;
        PyObject *tmp_dict_arg_value_181;
        PyObject *tmp_dict_arg_value_182;
        PyObject *tmp_key_value_182;
        nuitka_bool tmp_condition_result_362;
        int tmp_truth_name_61;
        PyObject *tmp_type_arg_121;
        PyObject *tmp_expression_value_311;
        PyObject *tmp_subscript_value_61;
        PyObject *tmp_bases_value_61;
        tmp_key_value_181 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_61__class_decl_dict);
        tmp_dict_arg_value_181 = tmp_class_creation_61__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_181, tmp_key_value_181);
        assert(!(tmp_res == -1));
        tmp_condition_result_361 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_361 != false) {
            goto condexpr_true_121;
        } else {
            goto condexpr_false_121;
        }
        condexpr_true_121:;
        CHECK_OBJECT(tmp_class_creation_61__class_decl_dict);
        tmp_dict_arg_value_182 = tmp_class_creation_61__class_decl_dict;
        tmp_key_value_182 = mod_consts[43];
        tmp_metaclass_value_61 = DICT_GET_ITEM0(tmp_dict_arg_value_182, tmp_key_value_182);
        if (tmp_metaclass_value_61 == NULL) {
            tmp_metaclass_value_61 = Py_None;
        }
        assert(!(tmp_metaclass_value_61 == NULL));
        Py_INCREF(tmp_metaclass_value_61);
        goto condexpr_end_121;
        condexpr_false_121:;
        CHECK_OBJECT(tmp_class_creation_61__bases);
        tmp_truth_name_61 = CHECK_IF_TRUE(tmp_class_creation_61__bases);
        if (tmp_truth_name_61 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 548;

            goto try_except_handler_181;
        }
        tmp_condition_result_362 = tmp_truth_name_61 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_362 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_122;
        } else {
            goto condexpr_false_122;
        }
        condexpr_true_122:;
        CHECK_OBJECT(tmp_class_creation_61__bases);
        tmp_expression_value_311 = tmp_class_creation_61__bases;
        tmp_subscript_value_61 = mod_consts[36];
        tmp_type_arg_121 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_311, tmp_subscript_value_61, 0);
        if (tmp_type_arg_121 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 548;

            goto try_except_handler_181;
        }
        tmp_metaclass_value_61 = BUILTIN_TYPE1(tmp_type_arg_121);
        Py_DECREF(tmp_type_arg_121);
        if (tmp_metaclass_value_61 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 548;

            goto try_except_handler_181;
        }
        goto condexpr_end_122;
        condexpr_false_122:;
        tmp_metaclass_value_61 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_61);
        condexpr_end_122:;
        condexpr_end_121:;
        CHECK_OBJECT(tmp_class_creation_61__bases);
        tmp_bases_value_61 = tmp_class_creation_61__bases;
        tmp_assign_source_489 = SELECT_METACLASS(tmp_metaclass_value_61, tmp_bases_value_61);
        Py_DECREF(tmp_metaclass_value_61);
        if (tmp_assign_source_489 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 548;

            goto try_except_handler_181;
        }
        assert(tmp_class_creation_61__metaclass == NULL);
        tmp_class_creation_61__metaclass = tmp_assign_source_489;
    }
    {
        bool tmp_condition_result_363;
        PyObject *tmp_key_value_183;
        PyObject *tmp_dict_arg_value_183;
        tmp_key_value_183 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_61__class_decl_dict);
        tmp_dict_arg_value_183 = tmp_class_creation_61__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_183, tmp_key_value_183);
        assert(!(tmp_res == -1));
        tmp_condition_result_363 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_363 != false) {
            goto branch_yes_241;
        } else {
            goto branch_no_241;
        }
    }
    branch_yes_241:;
    CHECK_OBJECT(tmp_class_creation_61__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_61__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 548;

        goto try_except_handler_181;
    }
    branch_no_241:;
    {
        nuitka_bool tmp_condition_result_364;
        PyObject *tmp_expression_value_312;
        CHECK_OBJECT(tmp_class_creation_61__metaclass);
        tmp_expression_value_312 = tmp_class_creation_61__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_312, mod_consts[44]);
        tmp_condition_result_364 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_364 == NUITKA_BOOL_TRUE) {
            goto branch_yes_242;
        } else {
            goto branch_no_242;
        }
    }
    branch_yes_242:;
    {
        PyObject *tmp_assign_source_490;
        PyObject *tmp_called_value_121;
        PyObject *tmp_expression_value_313;
        PyObject *tmp_args_value_121;
        PyObject *tmp_tuple_element_240;
        PyObject *tmp_kwargs_value_121;
        CHECK_OBJECT(tmp_class_creation_61__metaclass);
        tmp_expression_value_313 = tmp_class_creation_61__metaclass;
        tmp_called_value_121 = LOOKUP_ATTRIBUTE(tmp_expression_value_313, mod_consts[44]);
        if (tmp_called_value_121 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 548;

            goto try_except_handler_181;
        }
        tmp_tuple_element_240 = mod_consts[223];
        tmp_args_value_121 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_121, 0, tmp_tuple_element_240);
        CHECK_OBJECT(tmp_class_creation_61__bases);
        tmp_tuple_element_240 = tmp_class_creation_61__bases;
        PyTuple_SET_ITEM0(tmp_args_value_121, 1, tmp_tuple_element_240);
        CHECK_OBJECT(tmp_class_creation_61__class_decl_dict);
        tmp_kwargs_value_121 = tmp_class_creation_61__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 548;
        tmp_assign_source_490 = CALL_FUNCTION(tmp_called_value_121, tmp_args_value_121, tmp_kwargs_value_121);
        Py_DECREF(tmp_called_value_121);
        Py_DECREF(tmp_args_value_121);
        if (tmp_assign_source_490 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 548;

            goto try_except_handler_181;
        }
        assert(tmp_class_creation_61__prepared == NULL);
        tmp_class_creation_61__prepared = tmp_assign_source_490;
    }
    {
        bool tmp_condition_result_365;
        PyObject *tmp_operand_value_61;
        PyObject *tmp_expression_value_314;
        CHECK_OBJECT(tmp_class_creation_61__prepared);
        tmp_expression_value_314 = tmp_class_creation_61__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_314, mod_consts[46]);
        tmp_operand_value_61 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_61);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 548;

            goto try_except_handler_181;
        }
        tmp_condition_result_365 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_365 != false) {
            goto branch_yes_243;
        } else {
            goto branch_no_243;
        }
    }
    branch_yes_243:;
    {
        PyObject *tmp_raise_type_61;
        PyObject *tmp_raise_value_61;
        PyObject *tmp_left_value_61;
        PyObject *tmp_right_value_61;
        PyObject *tmp_tuple_element_241;
        PyObject *tmp_getattr_target_61;
        PyObject *tmp_getattr_attr_61;
        PyObject *tmp_getattr_default_61;
        tmp_raise_type_61 = PyExc_TypeError;
        tmp_left_value_61 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_61__metaclass);
        tmp_getattr_target_61 = tmp_class_creation_61__metaclass;
        tmp_getattr_attr_61 = mod_consts[48];
        tmp_getattr_default_61 = mod_consts[49];
        tmp_tuple_element_241 = BUILTIN_GETATTR(tmp_getattr_target_61, tmp_getattr_attr_61, tmp_getattr_default_61);
        if (tmp_tuple_element_241 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 548;

            goto try_except_handler_181;
        }
        tmp_right_value_61 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_315;
            PyObject *tmp_type_arg_122;
            PyTuple_SET_ITEM(tmp_right_value_61, 0, tmp_tuple_element_241);
            CHECK_OBJECT(tmp_class_creation_61__prepared);
            tmp_type_arg_122 = tmp_class_creation_61__prepared;
            tmp_expression_value_315 = BUILTIN_TYPE1(tmp_type_arg_122);
            assert(!(tmp_expression_value_315 == NULL));
            tmp_tuple_element_241 = LOOKUP_ATTRIBUTE(tmp_expression_value_315, mod_consts[48]);
            Py_DECREF(tmp_expression_value_315);
            if (tmp_tuple_element_241 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 548;

                goto tuple_build_exception_65;
            }
            PyTuple_SET_ITEM(tmp_right_value_61, 1, tmp_tuple_element_241);
        }
        goto tuple_build_noexception_65;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_65:;
        Py_DECREF(tmp_right_value_61);
        goto try_except_handler_181;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_65:;
        tmp_raise_value_61 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_61, tmp_right_value_61);
        Py_DECREF(tmp_right_value_61);
        if (tmp_raise_value_61 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 548;

            goto try_except_handler_181;
        }
        exception_type = tmp_raise_type_61;
        Py_INCREF(tmp_raise_type_61);
        exception_value = tmp_raise_value_61;
        exception_lineno = 548;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_181;
    }
    branch_no_243:;
    goto branch_end_242;
    branch_no_242:;
    {
        PyObject *tmp_assign_source_491;
        tmp_assign_source_491 = PyDict_New();
        assert(tmp_class_creation_61__prepared == NULL);
        tmp_class_creation_61__prepared = tmp_assign_source_491;
    }
    branch_end_242:;
    {
        PyObject *tmp_assign_source_492;
        {
            PyObject *tmp_set_locals_61;
            CHECK_OBJECT(tmp_class_creation_61__prepared);
            tmp_set_locals_61 = tmp_class_creation_61__prepared;
            locals_botocore$exceptions$$$class__61_InvalidRetryModeError_548 = tmp_set_locals_61;
            Py_INCREF(tmp_set_locals_61);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__61_InvalidRetryModeError_548, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 548;

            goto try_except_handler_183;
        }
        tmp_dictset_value = mod_consts[224];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__61_InvalidRetryModeError_548, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 548;

            goto try_except_handler_183;
        }
        tmp_dictset_value = mod_consts[223];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__61_InvalidRetryModeError_548, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 548;

            goto try_except_handler_183;
        }
        if (isFrameUnusable(cache_frame_93800b78e5b211ff5d16bceff2024e78_58)) {
            Py_XDECREF(cache_frame_93800b78e5b211ff5d16bceff2024e78_58);

#if _DEBUG_REFCOUNTS
            if (cache_frame_93800b78e5b211ff5d16bceff2024e78_58 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_93800b78e5b211ff5d16bceff2024e78_58 = MAKE_FUNCTION_FRAME(codeobj_93800b78e5b211ff5d16bceff2024e78, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_93800b78e5b211ff5d16bceff2024e78_58->m_type_description == NULL);
        frame_93800b78e5b211ff5d16bceff2024e78_58 = cache_frame_93800b78e5b211ff5d16bceff2024e78_58;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_93800b78e5b211ff5d16bceff2024e78_58);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_93800b78e5b211ff5d16bceff2024e78_58) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[225];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__61_InvalidRetryModeError_548, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 550;
            type_description_2 = "o";
            goto frame_exception_exit_58;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_93800b78e5b211ff5d16bceff2024e78_58);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_57;

        frame_exception_exit_58:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_93800b78e5b211ff5d16bceff2024e78_58);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_93800b78e5b211ff5d16bceff2024e78_58, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_93800b78e5b211ff5d16bceff2024e78_58->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_93800b78e5b211ff5d16bceff2024e78_58, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_93800b78e5b211ff5d16bceff2024e78_58,
            type_description_2,
            outline_60_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_93800b78e5b211ff5d16bceff2024e78_58 == cache_frame_93800b78e5b211ff5d16bceff2024e78_58) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_93800b78e5b211ff5d16bceff2024e78_58);
            cache_frame_93800b78e5b211ff5d16bceff2024e78_58 = NULL;
        }

        assertFrameObject(frame_93800b78e5b211ff5d16bceff2024e78_58);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_57;

        frame_no_exception_57:;
        goto skip_nested_handling_57;
        nested_frame_exit_57:;

        goto try_except_handler_183;
        skip_nested_handling_57:;
        {
            nuitka_bool tmp_condition_result_366;
            PyObject *tmp_cmp_expr_left_61;
            PyObject *tmp_cmp_expr_right_61;
            CHECK_OBJECT(tmp_class_creation_61__bases);
            tmp_cmp_expr_left_61 = tmp_class_creation_61__bases;
            CHECK_OBJECT(tmp_class_creation_61__bases_orig);
            tmp_cmp_expr_right_61 = tmp_class_creation_61__bases_orig;
            tmp_condition_result_366 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_61, tmp_cmp_expr_right_61);
            if (tmp_condition_result_366 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 548;

                goto try_except_handler_183;
            }
            if (tmp_condition_result_366 == NUITKA_BOOL_TRUE) {
                goto branch_yes_244;
            } else {
                goto branch_no_244;
            }
            assert(tmp_condition_result_366 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_244:;
        CHECK_OBJECT(tmp_class_creation_61__bases_orig);
        tmp_dictset_value = tmp_class_creation_61__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__61_InvalidRetryModeError_548, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 548;

            goto try_except_handler_183;
        }
        branch_no_244:;
        {
            PyObject *tmp_assign_source_493;
            PyObject *tmp_called_value_122;
            PyObject *tmp_args_value_122;
            PyObject *tmp_tuple_element_242;
            PyObject *tmp_kwargs_value_122;
            CHECK_OBJECT(tmp_class_creation_61__metaclass);
            tmp_called_value_122 = tmp_class_creation_61__metaclass;
            tmp_tuple_element_242 = mod_consts[223];
            tmp_args_value_122 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_122, 0, tmp_tuple_element_242);
            CHECK_OBJECT(tmp_class_creation_61__bases);
            tmp_tuple_element_242 = tmp_class_creation_61__bases;
            PyTuple_SET_ITEM0(tmp_args_value_122, 1, tmp_tuple_element_242);
            tmp_tuple_element_242 = locals_botocore$exceptions$$$class__61_InvalidRetryModeError_548;
            PyTuple_SET_ITEM0(tmp_args_value_122, 2, tmp_tuple_element_242);
            CHECK_OBJECT(tmp_class_creation_61__class_decl_dict);
            tmp_kwargs_value_122 = tmp_class_creation_61__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 548;
            tmp_assign_source_493 = CALL_FUNCTION(tmp_called_value_122, tmp_args_value_122, tmp_kwargs_value_122);
            Py_DECREF(tmp_args_value_122);
            if (tmp_assign_source_493 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 548;

                goto try_except_handler_183;
            }
            assert(outline_60_var___class__ == NULL);
            outline_60_var___class__ = tmp_assign_source_493;
        }
        CHECK_OBJECT(outline_60_var___class__);
        tmp_assign_source_492 = outline_60_var___class__;
        Py_INCREF(tmp_assign_source_492);
        goto try_return_handler_183;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_183:;
        Py_DECREF(locals_botocore$exceptions$$$class__61_InvalidRetryModeError_548);
        locals_botocore$exceptions$$$class__61_InvalidRetryModeError_548 = NULL;
        goto try_return_handler_182;
        // Exception handler code:
        try_except_handler_183:;
        exception_keeper_type_181 = exception_type;
        exception_keeper_value_181 = exception_value;
        exception_keeper_tb_181 = exception_tb;
        exception_keeper_lineno_181 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__61_InvalidRetryModeError_548);
        locals_botocore$exceptions$$$class__61_InvalidRetryModeError_548 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_181;
        exception_value = exception_keeper_value_181;
        exception_tb = exception_keeper_tb_181;
        exception_lineno = exception_keeper_lineno_181;

        goto try_except_handler_182;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_182:;
        CHECK_OBJECT(outline_60_var___class__);
        Py_DECREF(outline_60_var___class__);
        outline_60_var___class__ = NULL;
        goto outline_result_61;
        // Exception handler code:
        try_except_handler_182:;
        exception_keeper_type_182 = exception_type;
        exception_keeper_value_182 = exception_value;
        exception_keeper_tb_182 = exception_tb;
        exception_keeper_lineno_182 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_182;
        exception_value = exception_keeper_value_182;
        exception_tb = exception_keeper_tb_182;
        exception_lineno = exception_keeper_lineno_182;

        goto outline_exception_61;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_61:;
        exception_lineno = 548;
        goto try_except_handler_181;
        outline_result_61:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[223], tmp_assign_source_492);
    }
    goto try_end_61;
    // Exception handler code:
    try_except_handler_181:;
    exception_keeper_type_183 = exception_type;
    exception_keeper_value_183 = exception_value;
    exception_keeper_tb_183 = exception_tb;
    exception_keeper_lineno_183 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_61__bases_orig);
    tmp_class_creation_61__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_61__bases);
    tmp_class_creation_61__bases = NULL;
    Py_XDECREF(tmp_class_creation_61__class_decl_dict);
    tmp_class_creation_61__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_61__metaclass);
    tmp_class_creation_61__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_61__prepared);
    tmp_class_creation_61__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_183;
    exception_value = exception_keeper_value_183;
    exception_tb = exception_keeper_tb_183;
    exception_lineno = exception_keeper_lineno_183;

    goto frame_exception_exit_1;
    // End of try:
    try_end_61:;
    CHECK_OBJECT(tmp_class_creation_61__bases_orig);
    Py_DECREF(tmp_class_creation_61__bases_orig);
    tmp_class_creation_61__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_61__bases);
    Py_DECREF(tmp_class_creation_61__bases);
    tmp_class_creation_61__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_61__class_decl_dict);
    Py_DECREF(tmp_class_creation_61__class_decl_dict);
    tmp_class_creation_61__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_61__metaclass);
    Py_DECREF(tmp_class_creation_61__metaclass);
    tmp_class_creation_61__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_61__prepared);
    Py_DECREF(tmp_class_creation_61__prepared);
    tmp_class_creation_61__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_494;
        PyObject *tmp_tuple_element_243;
        tmp_tuple_element_243 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_243 == NULL)) {
            tmp_tuple_element_243 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_243 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 556;

            goto try_except_handler_184;
        }
        tmp_assign_source_494 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_494, 0, tmp_tuple_element_243);
        assert(tmp_class_creation_62__bases_orig == NULL);
        tmp_class_creation_62__bases_orig = tmp_assign_source_494;
    }
    {
        PyObject *tmp_assign_source_495;
        PyObject *tmp_dircall_arg1_62;
        CHECK_OBJECT(tmp_class_creation_62__bases_orig);
        tmp_dircall_arg1_62 = tmp_class_creation_62__bases_orig;
        Py_INCREF(tmp_dircall_arg1_62);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_62};
            tmp_assign_source_495 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_495 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 556;

            goto try_except_handler_184;
        }
        assert(tmp_class_creation_62__bases == NULL);
        tmp_class_creation_62__bases = tmp_assign_source_495;
    }
    {
        PyObject *tmp_assign_source_496;
        tmp_assign_source_496 = PyDict_New();
        assert(tmp_class_creation_62__class_decl_dict == NULL);
        tmp_class_creation_62__class_decl_dict = tmp_assign_source_496;
    }
    {
        PyObject *tmp_assign_source_497;
        PyObject *tmp_metaclass_value_62;
        bool tmp_condition_result_367;
        PyObject *tmp_key_value_184;
        PyObject *tmp_dict_arg_value_184;
        PyObject *tmp_dict_arg_value_185;
        PyObject *tmp_key_value_185;
        nuitka_bool tmp_condition_result_368;
        int tmp_truth_name_62;
        PyObject *tmp_type_arg_123;
        PyObject *tmp_expression_value_316;
        PyObject *tmp_subscript_value_62;
        PyObject *tmp_bases_value_62;
        tmp_key_value_184 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_62__class_decl_dict);
        tmp_dict_arg_value_184 = tmp_class_creation_62__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_184, tmp_key_value_184);
        assert(!(tmp_res == -1));
        tmp_condition_result_367 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_367 != false) {
            goto condexpr_true_123;
        } else {
            goto condexpr_false_123;
        }
        condexpr_true_123:;
        CHECK_OBJECT(tmp_class_creation_62__class_decl_dict);
        tmp_dict_arg_value_185 = tmp_class_creation_62__class_decl_dict;
        tmp_key_value_185 = mod_consts[43];
        tmp_metaclass_value_62 = DICT_GET_ITEM0(tmp_dict_arg_value_185, tmp_key_value_185);
        if (tmp_metaclass_value_62 == NULL) {
            tmp_metaclass_value_62 = Py_None;
        }
        assert(!(tmp_metaclass_value_62 == NULL));
        Py_INCREF(tmp_metaclass_value_62);
        goto condexpr_end_123;
        condexpr_false_123:;
        CHECK_OBJECT(tmp_class_creation_62__bases);
        tmp_truth_name_62 = CHECK_IF_TRUE(tmp_class_creation_62__bases);
        if (tmp_truth_name_62 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 556;

            goto try_except_handler_184;
        }
        tmp_condition_result_368 = tmp_truth_name_62 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_368 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_124;
        } else {
            goto condexpr_false_124;
        }
        condexpr_true_124:;
        CHECK_OBJECT(tmp_class_creation_62__bases);
        tmp_expression_value_316 = tmp_class_creation_62__bases;
        tmp_subscript_value_62 = mod_consts[36];
        tmp_type_arg_123 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_316, tmp_subscript_value_62, 0);
        if (tmp_type_arg_123 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 556;

            goto try_except_handler_184;
        }
        tmp_metaclass_value_62 = BUILTIN_TYPE1(tmp_type_arg_123);
        Py_DECREF(tmp_type_arg_123);
        if (tmp_metaclass_value_62 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 556;

            goto try_except_handler_184;
        }
        goto condexpr_end_124;
        condexpr_false_124:;
        tmp_metaclass_value_62 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_62);
        condexpr_end_124:;
        condexpr_end_123:;
        CHECK_OBJECT(tmp_class_creation_62__bases);
        tmp_bases_value_62 = tmp_class_creation_62__bases;
        tmp_assign_source_497 = SELECT_METACLASS(tmp_metaclass_value_62, tmp_bases_value_62);
        Py_DECREF(tmp_metaclass_value_62);
        if (tmp_assign_source_497 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 556;

            goto try_except_handler_184;
        }
        assert(tmp_class_creation_62__metaclass == NULL);
        tmp_class_creation_62__metaclass = tmp_assign_source_497;
    }
    {
        bool tmp_condition_result_369;
        PyObject *tmp_key_value_186;
        PyObject *tmp_dict_arg_value_186;
        tmp_key_value_186 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_62__class_decl_dict);
        tmp_dict_arg_value_186 = tmp_class_creation_62__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_186, tmp_key_value_186);
        assert(!(tmp_res == -1));
        tmp_condition_result_369 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_369 != false) {
            goto branch_yes_245;
        } else {
            goto branch_no_245;
        }
    }
    branch_yes_245:;
    CHECK_OBJECT(tmp_class_creation_62__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_62__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 556;

        goto try_except_handler_184;
    }
    branch_no_245:;
    {
        nuitka_bool tmp_condition_result_370;
        PyObject *tmp_expression_value_317;
        CHECK_OBJECT(tmp_class_creation_62__metaclass);
        tmp_expression_value_317 = tmp_class_creation_62__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_317, mod_consts[44]);
        tmp_condition_result_370 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_370 == NUITKA_BOOL_TRUE) {
            goto branch_yes_246;
        } else {
            goto branch_no_246;
        }
    }
    branch_yes_246:;
    {
        PyObject *tmp_assign_source_498;
        PyObject *tmp_called_value_123;
        PyObject *tmp_expression_value_318;
        PyObject *tmp_args_value_123;
        PyObject *tmp_tuple_element_244;
        PyObject *tmp_kwargs_value_123;
        CHECK_OBJECT(tmp_class_creation_62__metaclass);
        tmp_expression_value_318 = tmp_class_creation_62__metaclass;
        tmp_called_value_123 = LOOKUP_ATTRIBUTE(tmp_expression_value_318, mod_consts[44]);
        if (tmp_called_value_123 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 556;

            goto try_except_handler_184;
        }
        tmp_tuple_element_244 = mod_consts[226];
        tmp_args_value_123 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_123, 0, tmp_tuple_element_244);
        CHECK_OBJECT(tmp_class_creation_62__bases);
        tmp_tuple_element_244 = tmp_class_creation_62__bases;
        PyTuple_SET_ITEM0(tmp_args_value_123, 1, tmp_tuple_element_244);
        CHECK_OBJECT(tmp_class_creation_62__class_decl_dict);
        tmp_kwargs_value_123 = tmp_class_creation_62__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 556;
        tmp_assign_source_498 = CALL_FUNCTION(tmp_called_value_123, tmp_args_value_123, tmp_kwargs_value_123);
        Py_DECREF(tmp_called_value_123);
        Py_DECREF(tmp_args_value_123);
        if (tmp_assign_source_498 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 556;

            goto try_except_handler_184;
        }
        assert(tmp_class_creation_62__prepared == NULL);
        tmp_class_creation_62__prepared = tmp_assign_source_498;
    }
    {
        bool tmp_condition_result_371;
        PyObject *tmp_operand_value_62;
        PyObject *tmp_expression_value_319;
        CHECK_OBJECT(tmp_class_creation_62__prepared);
        tmp_expression_value_319 = tmp_class_creation_62__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_319, mod_consts[46]);
        tmp_operand_value_62 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_62);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 556;

            goto try_except_handler_184;
        }
        tmp_condition_result_371 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_371 != false) {
            goto branch_yes_247;
        } else {
            goto branch_no_247;
        }
    }
    branch_yes_247:;
    {
        PyObject *tmp_raise_type_62;
        PyObject *tmp_raise_value_62;
        PyObject *tmp_left_value_62;
        PyObject *tmp_right_value_62;
        PyObject *tmp_tuple_element_245;
        PyObject *tmp_getattr_target_62;
        PyObject *tmp_getattr_attr_62;
        PyObject *tmp_getattr_default_62;
        tmp_raise_type_62 = PyExc_TypeError;
        tmp_left_value_62 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_62__metaclass);
        tmp_getattr_target_62 = tmp_class_creation_62__metaclass;
        tmp_getattr_attr_62 = mod_consts[48];
        tmp_getattr_default_62 = mod_consts[49];
        tmp_tuple_element_245 = BUILTIN_GETATTR(tmp_getattr_target_62, tmp_getattr_attr_62, tmp_getattr_default_62);
        if (tmp_tuple_element_245 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 556;

            goto try_except_handler_184;
        }
        tmp_right_value_62 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_320;
            PyObject *tmp_type_arg_124;
            PyTuple_SET_ITEM(tmp_right_value_62, 0, tmp_tuple_element_245);
            CHECK_OBJECT(tmp_class_creation_62__prepared);
            tmp_type_arg_124 = tmp_class_creation_62__prepared;
            tmp_expression_value_320 = BUILTIN_TYPE1(tmp_type_arg_124);
            assert(!(tmp_expression_value_320 == NULL));
            tmp_tuple_element_245 = LOOKUP_ATTRIBUTE(tmp_expression_value_320, mod_consts[48]);
            Py_DECREF(tmp_expression_value_320);
            if (tmp_tuple_element_245 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 556;

                goto tuple_build_exception_66;
            }
            PyTuple_SET_ITEM(tmp_right_value_62, 1, tmp_tuple_element_245);
        }
        goto tuple_build_noexception_66;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_66:;
        Py_DECREF(tmp_right_value_62);
        goto try_except_handler_184;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_66:;
        tmp_raise_value_62 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_62, tmp_right_value_62);
        Py_DECREF(tmp_right_value_62);
        if (tmp_raise_value_62 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 556;

            goto try_except_handler_184;
        }
        exception_type = tmp_raise_type_62;
        Py_INCREF(tmp_raise_type_62);
        exception_value = tmp_raise_value_62;
        exception_lineno = 556;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_184;
    }
    branch_no_247:;
    goto branch_end_246;
    branch_no_246:;
    {
        PyObject *tmp_assign_source_499;
        tmp_assign_source_499 = PyDict_New();
        assert(tmp_class_creation_62__prepared == NULL);
        tmp_class_creation_62__prepared = tmp_assign_source_499;
    }
    branch_end_246:;
    {
        PyObject *tmp_assign_source_500;
        {
            PyObject *tmp_set_locals_62;
            CHECK_OBJECT(tmp_class_creation_62__prepared);
            tmp_set_locals_62 = tmp_class_creation_62__prepared;
            locals_botocore$exceptions$$$class__62_InvalidS3UsEast1RegionalEndpointConfigError_556 = tmp_set_locals_62;
            Py_INCREF(tmp_set_locals_62);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__62_InvalidS3UsEast1RegionalEndpointConfigError_556, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 556;

            goto try_except_handler_186;
        }
        tmp_dictset_value = mod_consts[227];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__62_InvalidS3UsEast1RegionalEndpointConfigError_556, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 556;

            goto try_except_handler_186;
        }
        tmp_dictset_value = mod_consts[226];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__62_InvalidS3UsEast1RegionalEndpointConfigError_556, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 556;

            goto try_except_handler_186;
        }
        if (isFrameUnusable(cache_frame_c9b3d3c3deaa812b48c2ad3a73ae4856_59)) {
            Py_XDECREF(cache_frame_c9b3d3c3deaa812b48c2ad3a73ae4856_59);

#if _DEBUG_REFCOUNTS
            if (cache_frame_c9b3d3c3deaa812b48c2ad3a73ae4856_59 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_c9b3d3c3deaa812b48c2ad3a73ae4856_59 = MAKE_FUNCTION_FRAME(codeobj_c9b3d3c3deaa812b48c2ad3a73ae4856, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_c9b3d3c3deaa812b48c2ad3a73ae4856_59->m_type_description == NULL);
        frame_c9b3d3c3deaa812b48c2ad3a73ae4856_59 = cache_frame_c9b3d3c3deaa812b48c2ad3a73ae4856_59;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_c9b3d3c3deaa812b48c2ad3a73ae4856_59);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_c9b3d3c3deaa812b48c2ad3a73ae4856_59) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[228];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__62_InvalidS3UsEast1RegionalEndpointConfigError_556, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 558;
            type_description_2 = "o";
            goto frame_exception_exit_59;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_c9b3d3c3deaa812b48c2ad3a73ae4856_59);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_58;

        frame_exception_exit_59:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_c9b3d3c3deaa812b48c2ad3a73ae4856_59);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_c9b3d3c3deaa812b48c2ad3a73ae4856_59, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_c9b3d3c3deaa812b48c2ad3a73ae4856_59->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_c9b3d3c3deaa812b48c2ad3a73ae4856_59, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_c9b3d3c3deaa812b48c2ad3a73ae4856_59,
            type_description_2,
            outline_61_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_c9b3d3c3deaa812b48c2ad3a73ae4856_59 == cache_frame_c9b3d3c3deaa812b48c2ad3a73ae4856_59) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_c9b3d3c3deaa812b48c2ad3a73ae4856_59);
            cache_frame_c9b3d3c3deaa812b48c2ad3a73ae4856_59 = NULL;
        }

        assertFrameObject(frame_c9b3d3c3deaa812b48c2ad3a73ae4856_59);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_58;

        frame_no_exception_58:;
        goto skip_nested_handling_58;
        nested_frame_exit_58:;

        goto try_except_handler_186;
        skip_nested_handling_58:;
        {
            nuitka_bool tmp_condition_result_372;
            PyObject *tmp_cmp_expr_left_62;
            PyObject *tmp_cmp_expr_right_62;
            CHECK_OBJECT(tmp_class_creation_62__bases);
            tmp_cmp_expr_left_62 = tmp_class_creation_62__bases;
            CHECK_OBJECT(tmp_class_creation_62__bases_orig);
            tmp_cmp_expr_right_62 = tmp_class_creation_62__bases_orig;
            tmp_condition_result_372 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_62, tmp_cmp_expr_right_62);
            if (tmp_condition_result_372 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 556;

                goto try_except_handler_186;
            }
            if (tmp_condition_result_372 == NUITKA_BOOL_TRUE) {
                goto branch_yes_248;
            } else {
                goto branch_no_248;
            }
            assert(tmp_condition_result_372 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_248:;
        CHECK_OBJECT(tmp_class_creation_62__bases_orig);
        tmp_dictset_value = tmp_class_creation_62__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__62_InvalidS3UsEast1RegionalEndpointConfigError_556, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 556;

            goto try_except_handler_186;
        }
        branch_no_248:;
        {
            PyObject *tmp_assign_source_501;
            PyObject *tmp_called_value_124;
            PyObject *tmp_args_value_124;
            PyObject *tmp_tuple_element_246;
            PyObject *tmp_kwargs_value_124;
            CHECK_OBJECT(tmp_class_creation_62__metaclass);
            tmp_called_value_124 = tmp_class_creation_62__metaclass;
            tmp_tuple_element_246 = mod_consts[226];
            tmp_args_value_124 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_124, 0, tmp_tuple_element_246);
            CHECK_OBJECT(tmp_class_creation_62__bases);
            tmp_tuple_element_246 = tmp_class_creation_62__bases;
            PyTuple_SET_ITEM0(tmp_args_value_124, 1, tmp_tuple_element_246);
            tmp_tuple_element_246 = locals_botocore$exceptions$$$class__62_InvalidS3UsEast1RegionalEndpointConfigError_556;
            PyTuple_SET_ITEM0(tmp_args_value_124, 2, tmp_tuple_element_246);
            CHECK_OBJECT(tmp_class_creation_62__class_decl_dict);
            tmp_kwargs_value_124 = tmp_class_creation_62__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 556;
            tmp_assign_source_501 = CALL_FUNCTION(tmp_called_value_124, tmp_args_value_124, tmp_kwargs_value_124);
            Py_DECREF(tmp_args_value_124);
            if (tmp_assign_source_501 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 556;

                goto try_except_handler_186;
            }
            assert(outline_61_var___class__ == NULL);
            outline_61_var___class__ = tmp_assign_source_501;
        }
        CHECK_OBJECT(outline_61_var___class__);
        tmp_assign_source_500 = outline_61_var___class__;
        Py_INCREF(tmp_assign_source_500);
        goto try_return_handler_186;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_186:;
        Py_DECREF(locals_botocore$exceptions$$$class__62_InvalidS3UsEast1RegionalEndpointConfigError_556);
        locals_botocore$exceptions$$$class__62_InvalidS3UsEast1RegionalEndpointConfigError_556 = NULL;
        goto try_return_handler_185;
        // Exception handler code:
        try_except_handler_186:;
        exception_keeper_type_184 = exception_type;
        exception_keeper_value_184 = exception_value;
        exception_keeper_tb_184 = exception_tb;
        exception_keeper_lineno_184 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__62_InvalidS3UsEast1RegionalEndpointConfigError_556);
        locals_botocore$exceptions$$$class__62_InvalidS3UsEast1RegionalEndpointConfigError_556 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_184;
        exception_value = exception_keeper_value_184;
        exception_tb = exception_keeper_tb_184;
        exception_lineno = exception_keeper_lineno_184;

        goto try_except_handler_185;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_185:;
        CHECK_OBJECT(outline_61_var___class__);
        Py_DECREF(outline_61_var___class__);
        outline_61_var___class__ = NULL;
        goto outline_result_62;
        // Exception handler code:
        try_except_handler_185:;
        exception_keeper_type_185 = exception_type;
        exception_keeper_value_185 = exception_value;
        exception_keeper_tb_185 = exception_tb;
        exception_keeper_lineno_185 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_185;
        exception_value = exception_keeper_value_185;
        exception_tb = exception_keeper_tb_185;
        exception_lineno = exception_keeper_lineno_185;

        goto outline_exception_62;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_62:;
        exception_lineno = 556;
        goto try_except_handler_184;
        outline_result_62:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[226], tmp_assign_source_500);
    }
    goto try_end_62;
    // Exception handler code:
    try_except_handler_184:;
    exception_keeper_type_186 = exception_type;
    exception_keeper_value_186 = exception_value;
    exception_keeper_tb_186 = exception_tb;
    exception_keeper_lineno_186 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_62__bases_orig);
    tmp_class_creation_62__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_62__bases);
    tmp_class_creation_62__bases = NULL;
    Py_XDECREF(tmp_class_creation_62__class_decl_dict);
    tmp_class_creation_62__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_62__metaclass);
    tmp_class_creation_62__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_62__prepared);
    tmp_class_creation_62__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_186;
    exception_value = exception_keeper_value_186;
    exception_tb = exception_keeper_tb_186;
    exception_lineno = exception_keeper_lineno_186;

    goto frame_exception_exit_1;
    // End of try:
    try_end_62:;
    CHECK_OBJECT(tmp_class_creation_62__bases_orig);
    Py_DECREF(tmp_class_creation_62__bases_orig);
    tmp_class_creation_62__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_62__bases);
    Py_DECREF(tmp_class_creation_62__bases);
    tmp_class_creation_62__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_62__class_decl_dict);
    Py_DECREF(tmp_class_creation_62__class_decl_dict);
    tmp_class_creation_62__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_62__metaclass);
    Py_DECREF(tmp_class_creation_62__metaclass);
    tmp_class_creation_62__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_62__prepared);
    Py_DECREF(tmp_class_creation_62__prepared);
    tmp_class_creation_62__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_502;
        PyObject *tmp_tuple_element_247;
        tmp_tuple_element_247 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_247 == NULL)) {
            tmp_tuple_element_247 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_247 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 565;

            goto try_except_handler_187;
        }
        tmp_assign_source_502 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_502, 0, tmp_tuple_element_247);
        assert(tmp_class_creation_63__bases_orig == NULL);
        tmp_class_creation_63__bases_orig = tmp_assign_source_502;
    }
    {
        PyObject *tmp_assign_source_503;
        PyObject *tmp_dircall_arg1_63;
        CHECK_OBJECT(tmp_class_creation_63__bases_orig);
        tmp_dircall_arg1_63 = tmp_class_creation_63__bases_orig;
        Py_INCREF(tmp_dircall_arg1_63);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_63};
            tmp_assign_source_503 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_503 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 565;

            goto try_except_handler_187;
        }
        assert(tmp_class_creation_63__bases == NULL);
        tmp_class_creation_63__bases = tmp_assign_source_503;
    }
    {
        PyObject *tmp_assign_source_504;
        tmp_assign_source_504 = PyDict_New();
        assert(tmp_class_creation_63__class_decl_dict == NULL);
        tmp_class_creation_63__class_decl_dict = tmp_assign_source_504;
    }
    {
        PyObject *tmp_assign_source_505;
        PyObject *tmp_metaclass_value_63;
        bool tmp_condition_result_373;
        PyObject *tmp_key_value_187;
        PyObject *tmp_dict_arg_value_187;
        PyObject *tmp_dict_arg_value_188;
        PyObject *tmp_key_value_188;
        nuitka_bool tmp_condition_result_374;
        int tmp_truth_name_63;
        PyObject *tmp_type_arg_125;
        PyObject *tmp_expression_value_321;
        PyObject *tmp_subscript_value_63;
        PyObject *tmp_bases_value_63;
        tmp_key_value_187 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_63__class_decl_dict);
        tmp_dict_arg_value_187 = tmp_class_creation_63__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_187, tmp_key_value_187);
        assert(!(tmp_res == -1));
        tmp_condition_result_373 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_373 != false) {
            goto condexpr_true_125;
        } else {
            goto condexpr_false_125;
        }
        condexpr_true_125:;
        CHECK_OBJECT(tmp_class_creation_63__class_decl_dict);
        tmp_dict_arg_value_188 = tmp_class_creation_63__class_decl_dict;
        tmp_key_value_188 = mod_consts[43];
        tmp_metaclass_value_63 = DICT_GET_ITEM0(tmp_dict_arg_value_188, tmp_key_value_188);
        if (tmp_metaclass_value_63 == NULL) {
            tmp_metaclass_value_63 = Py_None;
        }
        assert(!(tmp_metaclass_value_63 == NULL));
        Py_INCREF(tmp_metaclass_value_63);
        goto condexpr_end_125;
        condexpr_false_125:;
        CHECK_OBJECT(tmp_class_creation_63__bases);
        tmp_truth_name_63 = CHECK_IF_TRUE(tmp_class_creation_63__bases);
        if (tmp_truth_name_63 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 565;

            goto try_except_handler_187;
        }
        tmp_condition_result_374 = tmp_truth_name_63 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_374 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_126;
        } else {
            goto condexpr_false_126;
        }
        condexpr_true_126:;
        CHECK_OBJECT(tmp_class_creation_63__bases);
        tmp_expression_value_321 = tmp_class_creation_63__bases;
        tmp_subscript_value_63 = mod_consts[36];
        tmp_type_arg_125 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_321, tmp_subscript_value_63, 0);
        if (tmp_type_arg_125 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 565;

            goto try_except_handler_187;
        }
        tmp_metaclass_value_63 = BUILTIN_TYPE1(tmp_type_arg_125);
        Py_DECREF(tmp_type_arg_125);
        if (tmp_metaclass_value_63 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 565;

            goto try_except_handler_187;
        }
        goto condexpr_end_126;
        condexpr_false_126:;
        tmp_metaclass_value_63 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_63);
        condexpr_end_126:;
        condexpr_end_125:;
        CHECK_OBJECT(tmp_class_creation_63__bases);
        tmp_bases_value_63 = tmp_class_creation_63__bases;
        tmp_assign_source_505 = SELECT_METACLASS(tmp_metaclass_value_63, tmp_bases_value_63);
        Py_DECREF(tmp_metaclass_value_63);
        if (tmp_assign_source_505 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 565;

            goto try_except_handler_187;
        }
        assert(tmp_class_creation_63__metaclass == NULL);
        tmp_class_creation_63__metaclass = tmp_assign_source_505;
    }
    {
        bool tmp_condition_result_375;
        PyObject *tmp_key_value_189;
        PyObject *tmp_dict_arg_value_189;
        tmp_key_value_189 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_63__class_decl_dict);
        tmp_dict_arg_value_189 = tmp_class_creation_63__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_189, tmp_key_value_189);
        assert(!(tmp_res == -1));
        tmp_condition_result_375 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_375 != false) {
            goto branch_yes_249;
        } else {
            goto branch_no_249;
        }
    }
    branch_yes_249:;
    CHECK_OBJECT(tmp_class_creation_63__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_63__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 565;

        goto try_except_handler_187;
    }
    branch_no_249:;
    {
        nuitka_bool tmp_condition_result_376;
        PyObject *tmp_expression_value_322;
        CHECK_OBJECT(tmp_class_creation_63__metaclass);
        tmp_expression_value_322 = tmp_class_creation_63__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_322, mod_consts[44]);
        tmp_condition_result_376 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_376 == NUITKA_BOOL_TRUE) {
            goto branch_yes_250;
        } else {
            goto branch_no_250;
        }
    }
    branch_yes_250:;
    {
        PyObject *tmp_assign_source_506;
        PyObject *tmp_called_value_125;
        PyObject *tmp_expression_value_323;
        PyObject *tmp_args_value_125;
        PyObject *tmp_tuple_element_248;
        PyObject *tmp_kwargs_value_125;
        CHECK_OBJECT(tmp_class_creation_63__metaclass);
        tmp_expression_value_323 = tmp_class_creation_63__metaclass;
        tmp_called_value_125 = LOOKUP_ATTRIBUTE(tmp_expression_value_323, mod_consts[44]);
        if (tmp_called_value_125 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 565;

            goto try_except_handler_187;
        }
        tmp_tuple_element_248 = mod_consts[229];
        tmp_args_value_125 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_125, 0, tmp_tuple_element_248);
        CHECK_OBJECT(tmp_class_creation_63__bases);
        tmp_tuple_element_248 = tmp_class_creation_63__bases;
        PyTuple_SET_ITEM0(tmp_args_value_125, 1, tmp_tuple_element_248);
        CHECK_OBJECT(tmp_class_creation_63__class_decl_dict);
        tmp_kwargs_value_125 = tmp_class_creation_63__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 565;
        tmp_assign_source_506 = CALL_FUNCTION(tmp_called_value_125, tmp_args_value_125, tmp_kwargs_value_125);
        Py_DECREF(tmp_called_value_125);
        Py_DECREF(tmp_args_value_125);
        if (tmp_assign_source_506 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 565;

            goto try_except_handler_187;
        }
        assert(tmp_class_creation_63__prepared == NULL);
        tmp_class_creation_63__prepared = tmp_assign_source_506;
    }
    {
        bool tmp_condition_result_377;
        PyObject *tmp_operand_value_63;
        PyObject *tmp_expression_value_324;
        CHECK_OBJECT(tmp_class_creation_63__prepared);
        tmp_expression_value_324 = tmp_class_creation_63__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_324, mod_consts[46]);
        tmp_operand_value_63 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_63);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 565;

            goto try_except_handler_187;
        }
        tmp_condition_result_377 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_377 != false) {
            goto branch_yes_251;
        } else {
            goto branch_no_251;
        }
    }
    branch_yes_251:;
    {
        PyObject *tmp_raise_type_63;
        PyObject *tmp_raise_value_63;
        PyObject *tmp_left_value_63;
        PyObject *tmp_right_value_63;
        PyObject *tmp_tuple_element_249;
        PyObject *tmp_getattr_target_63;
        PyObject *tmp_getattr_attr_63;
        PyObject *tmp_getattr_default_63;
        tmp_raise_type_63 = PyExc_TypeError;
        tmp_left_value_63 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_63__metaclass);
        tmp_getattr_target_63 = tmp_class_creation_63__metaclass;
        tmp_getattr_attr_63 = mod_consts[48];
        tmp_getattr_default_63 = mod_consts[49];
        tmp_tuple_element_249 = BUILTIN_GETATTR(tmp_getattr_target_63, tmp_getattr_attr_63, tmp_getattr_default_63);
        if (tmp_tuple_element_249 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 565;

            goto try_except_handler_187;
        }
        tmp_right_value_63 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_325;
            PyObject *tmp_type_arg_126;
            PyTuple_SET_ITEM(tmp_right_value_63, 0, tmp_tuple_element_249);
            CHECK_OBJECT(tmp_class_creation_63__prepared);
            tmp_type_arg_126 = tmp_class_creation_63__prepared;
            tmp_expression_value_325 = BUILTIN_TYPE1(tmp_type_arg_126);
            assert(!(tmp_expression_value_325 == NULL));
            tmp_tuple_element_249 = LOOKUP_ATTRIBUTE(tmp_expression_value_325, mod_consts[48]);
            Py_DECREF(tmp_expression_value_325);
            if (tmp_tuple_element_249 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 565;

                goto tuple_build_exception_67;
            }
            PyTuple_SET_ITEM(tmp_right_value_63, 1, tmp_tuple_element_249);
        }
        goto tuple_build_noexception_67;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_67:;
        Py_DECREF(tmp_right_value_63);
        goto try_except_handler_187;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_67:;
        tmp_raise_value_63 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_63, tmp_right_value_63);
        Py_DECREF(tmp_right_value_63);
        if (tmp_raise_value_63 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 565;

            goto try_except_handler_187;
        }
        exception_type = tmp_raise_type_63;
        Py_INCREF(tmp_raise_type_63);
        exception_value = tmp_raise_value_63;
        exception_lineno = 565;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_187;
    }
    branch_no_251:;
    goto branch_end_250;
    branch_no_250:;
    {
        PyObject *tmp_assign_source_507;
        tmp_assign_source_507 = PyDict_New();
        assert(tmp_class_creation_63__prepared == NULL);
        tmp_class_creation_63__prepared = tmp_assign_source_507;
    }
    branch_end_250:;
    {
        PyObject *tmp_assign_source_508;
        {
            PyObject *tmp_set_locals_63;
            CHECK_OBJECT(tmp_class_creation_63__prepared);
            tmp_set_locals_63 = tmp_class_creation_63__prepared;
            locals_botocore$exceptions$$$class__63_InvalidSTSRegionalEndpointsConfigError_565 = tmp_set_locals_63;
            Py_INCREF(tmp_set_locals_63);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__63_InvalidSTSRegionalEndpointsConfigError_565, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 565;

            goto try_except_handler_189;
        }
        tmp_dictset_value = mod_consts[230];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__63_InvalidSTSRegionalEndpointsConfigError_565, mod_consts[27], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 565;

            goto try_except_handler_189;
        }
        tmp_dictset_value = mod_consts[229];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__63_InvalidSTSRegionalEndpointsConfigError_565, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 565;

            goto try_except_handler_189;
        }
        if (isFrameUnusable(cache_frame_32971ab0fac478f7e727349fd857c775_60)) {
            Py_XDECREF(cache_frame_32971ab0fac478f7e727349fd857c775_60);

#if _DEBUG_REFCOUNTS
            if (cache_frame_32971ab0fac478f7e727349fd857c775_60 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_32971ab0fac478f7e727349fd857c775_60 = MAKE_FUNCTION_FRAME(codeobj_32971ab0fac478f7e727349fd857c775, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_32971ab0fac478f7e727349fd857c775_60->m_type_description == NULL);
        frame_32971ab0fac478f7e727349fd857c775_60 = cache_frame_32971ab0fac478f7e727349fd857c775_60;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_32971ab0fac478f7e727349fd857c775_60);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_32971ab0fac478f7e727349fd857c775_60) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[231];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__63_InvalidSTSRegionalEndpointsConfigError_565, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 567;
            type_description_2 = "o";
            goto frame_exception_exit_60;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_32971ab0fac478f7e727349fd857c775_60);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_59;

        frame_exception_exit_60:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_32971ab0fac478f7e727349fd857c775_60);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_32971ab0fac478f7e727349fd857c775_60, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_32971ab0fac478f7e727349fd857c775_60->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_32971ab0fac478f7e727349fd857c775_60, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_32971ab0fac478f7e727349fd857c775_60,
            type_description_2,
            outline_62_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_32971ab0fac478f7e727349fd857c775_60 == cache_frame_32971ab0fac478f7e727349fd857c775_60) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_32971ab0fac478f7e727349fd857c775_60);
            cache_frame_32971ab0fac478f7e727349fd857c775_60 = NULL;
        }

        assertFrameObject(frame_32971ab0fac478f7e727349fd857c775_60);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_59;

        frame_no_exception_59:;
        goto skip_nested_handling_59;
        nested_frame_exit_59:;

        goto try_except_handler_189;
        skip_nested_handling_59:;
        {
            nuitka_bool tmp_condition_result_378;
            PyObject *tmp_cmp_expr_left_63;
            PyObject *tmp_cmp_expr_right_63;
            CHECK_OBJECT(tmp_class_creation_63__bases);
            tmp_cmp_expr_left_63 = tmp_class_creation_63__bases;
            CHECK_OBJECT(tmp_class_creation_63__bases_orig);
            tmp_cmp_expr_right_63 = tmp_class_creation_63__bases_orig;
            tmp_condition_result_378 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_63, tmp_cmp_expr_right_63);
            if (tmp_condition_result_378 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 565;

                goto try_except_handler_189;
            }
            if (tmp_condition_result_378 == NUITKA_BOOL_TRUE) {
                goto branch_yes_252;
            } else {
                goto branch_no_252;
            }
            assert(tmp_condition_result_378 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_252:;
        CHECK_OBJECT(tmp_class_creation_63__bases_orig);
        tmp_dictset_value = tmp_class_creation_63__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__63_InvalidSTSRegionalEndpointsConfigError_565, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 565;

            goto try_except_handler_189;
        }
        branch_no_252:;
        {
            PyObject *tmp_assign_source_509;
            PyObject *tmp_called_value_126;
            PyObject *tmp_args_value_126;
            PyObject *tmp_tuple_element_250;
            PyObject *tmp_kwargs_value_126;
            CHECK_OBJECT(tmp_class_creation_63__metaclass);
            tmp_called_value_126 = tmp_class_creation_63__metaclass;
            tmp_tuple_element_250 = mod_consts[229];
            tmp_args_value_126 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_126, 0, tmp_tuple_element_250);
            CHECK_OBJECT(tmp_class_creation_63__bases);
            tmp_tuple_element_250 = tmp_class_creation_63__bases;
            PyTuple_SET_ITEM0(tmp_args_value_126, 1, tmp_tuple_element_250);
            tmp_tuple_element_250 = locals_botocore$exceptions$$$class__63_InvalidSTSRegionalEndpointsConfigError_565;
            PyTuple_SET_ITEM0(tmp_args_value_126, 2, tmp_tuple_element_250);
            CHECK_OBJECT(tmp_class_creation_63__class_decl_dict);
            tmp_kwargs_value_126 = tmp_class_creation_63__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 565;
            tmp_assign_source_509 = CALL_FUNCTION(tmp_called_value_126, tmp_args_value_126, tmp_kwargs_value_126);
            Py_DECREF(tmp_args_value_126);
            if (tmp_assign_source_509 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 565;

                goto try_except_handler_189;
            }
            assert(outline_62_var___class__ == NULL);
            outline_62_var___class__ = tmp_assign_source_509;
        }
        CHECK_OBJECT(outline_62_var___class__);
        tmp_assign_source_508 = outline_62_var___class__;
        Py_INCREF(tmp_assign_source_508);
        goto try_return_handler_189;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_189:;
        Py_DECREF(locals_botocore$exceptions$$$class__63_InvalidSTSRegionalEndpointsConfigError_565);
        locals_botocore$exceptions$$$class__63_InvalidSTSRegionalEndpointsConfigError_565 = NULL;
        goto try_return_handler_188;
        // Exception handler code:
        try_except_handler_189:;
        exception_keeper_type_187 = exception_type;
        exception_keeper_value_187 = exception_value;
        exception_keeper_tb_187 = exception_tb;
        exception_keeper_lineno_187 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__63_InvalidSTSRegionalEndpointsConfigError_565);
        locals_botocore$exceptions$$$class__63_InvalidSTSRegionalEndpointsConfigError_565 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_187;
        exception_value = exception_keeper_value_187;
        exception_tb = exception_keeper_tb_187;
        exception_lineno = exception_keeper_lineno_187;

        goto try_except_handler_188;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_188:;
        CHECK_OBJECT(outline_62_var___class__);
        Py_DECREF(outline_62_var___class__);
        outline_62_var___class__ = NULL;
        goto outline_result_63;
        // Exception handler code:
        try_except_handler_188:;
        exception_keeper_type_188 = exception_type;
        exception_keeper_value_188 = exception_value;
        exception_keeper_tb_188 = exception_tb;
        exception_keeper_lineno_188 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_188;
        exception_value = exception_keeper_value_188;
        exception_tb = exception_keeper_tb_188;
        exception_lineno = exception_keeper_lineno_188;

        goto outline_exception_63;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_63:;
        exception_lineno = 565;
        goto try_except_handler_187;
        outline_result_63:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[229], tmp_assign_source_508);
    }
    goto try_end_63;
    // Exception handler code:
    try_except_handler_187:;
    exception_keeper_type_189 = exception_type;
    exception_keeper_value_189 = exception_value;
    exception_keeper_tb_189 = exception_tb;
    exception_keeper_lineno_189 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_63__bases_orig);
    tmp_class_creation_63__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_63__bases);
    tmp_class_creation_63__bases = NULL;
    Py_XDECREF(tmp_class_creation_63__class_decl_dict);
    tmp_class_creation_63__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_63__metaclass);
    tmp_class_creation_63__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_63__prepared);
    tmp_class_creation_63__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_189;
    exception_value = exception_keeper_value_189;
    exception_tb = exception_keeper_tb_189;
    exception_lineno = exception_keeper_lineno_189;

    goto frame_exception_exit_1;
    // End of try:
    try_end_63:;
    CHECK_OBJECT(tmp_class_creation_63__bases_orig);
    Py_DECREF(tmp_class_creation_63__bases_orig);
    tmp_class_creation_63__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_63__bases);
    Py_DECREF(tmp_class_creation_63__bases);
    tmp_class_creation_63__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_63__class_decl_dict);
    Py_DECREF(tmp_class_creation_63__class_decl_dict);
    tmp_class_creation_63__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_63__metaclass);
    Py_DECREF(tmp_class_creation_63__metaclass);
    tmp_class_creation_63__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_63__prepared);
    Py_DECREF(tmp_class_creation_63__prepared);
    tmp_class_creation_63__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_510;
        PyObject *tmp_tuple_element_251;
        tmp_tuple_element_251 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_251 == NULL)) {
            tmp_tuple_element_251 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_251 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 573;

            goto try_except_handler_190;
        }
        tmp_assign_source_510 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_510, 0, tmp_tuple_element_251);
        assert(tmp_class_creation_64__bases_orig == NULL);
        tmp_class_creation_64__bases_orig = tmp_assign_source_510;
    }
    {
        PyObject *tmp_assign_source_511;
        PyObject *tmp_dircall_arg1_64;
        CHECK_OBJECT(tmp_class_creation_64__bases_orig);
        tmp_dircall_arg1_64 = tmp_class_creation_64__bases_orig;
        Py_INCREF(tmp_dircall_arg1_64);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_64};
            tmp_assign_source_511 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_511 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 573;

            goto try_except_handler_190;
        }
        assert(tmp_class_creation_64__bases == NULL);
        tmp_class_creation_64__bases = tmp_assign_source_511;
    }
    {
        PyObject *tmp_assign_source_512;
        tmp_assign_source_512 = PyDict_New();
        assert(tmp_class_creation_64__class_decl_dict == NULL);
        tmp_class_creation_64__class_decl_dict = tmp_assign_source_512;
    }
    {
        PyObject *tmp_assign_source_513;
        PyObject *tmp_metaclass_value_64;
        bool tmp_condition_result_379;
        PyObject *tmp_key_value_190;
        PyObject *tmp_dict_arg_value_190;
        PyObject *tmp_dict_arg_value_191;
        PyObject *tmp_key_value_191;
        nuitka_bool tmp_condition_result_380;
        int tmp_truth_name_64;
        PyObject *tmp_type_arg_127;
        PyObject *tmp_expression_value_326;
        PyObject *tmp_subscript_value_64;
        PyObject *tmp_bases_value_64;
        tmp_key_value_190 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_64__class_decl_dict);
        tmp_dict_arg_value_190 = tmp_class_creation_64__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_190, tmp_key_value_190);
        assert(!(tmp_res == -1));
        tmp_condition_result_379 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_379 != false) {
            goto condexpr_true_127;
        } else {
            goto condexpr_false_127;
        }
        condexpr_true_127:;
        CHECK_OBJECT(tmp_class_creation_64__class_decl_dict);
        tmp_dict_arg_value_191 = tmp_class_creation_64__class_decl_dict;
        tmp_key_value_191 = mod_consts[43];
        tmp_metaclass_value_64 = DICT_GET_ITEM0(tmp_dict_arg_value_191, tmp_key_value_191);
        if (tmp_metaclass_value_64 == NULL) {
            tmp_metaclass_value_64 = Py_None;
        }
        assert(!(tmp_metaclass_value_64 == NULL));
        Py_INCREF(tmp_metaclass_value_64);
        goto condexpr_end_127;
        condexpr_false_127:;
        CHECK_OBJECT(tmp_class_creation_64__bases);
        tmp_truth_name_64 = CHECK_IF_TRUE(tmp_class_creation_64__bases);
        if (tmp_truth_name_64 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 573;

            goto try_except_handler_190;
        }
        tmp_condition_result_380 = tmp_truth_name_64 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_380 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_128;
        } else {
            goto condexpr_false_128;
        }
        condexpr_true_128:;
        CHECK_OBJECT(tmp_class_creation_64__bases);
        tmp_expression_value_326 = tmp_class_creation_64__bases;
        tmp_subscript_value_64 = mod_consts[36];
        tmp_type_arg_127 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_326, tmp_subscript_value_64, 0);
        if (tmp_type_arg_127 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 573;

            goto try_except_handler_190;
        }
        tmp_metaclass_value_64 = BUILTIN_TYPE1(tmp_type_arg_127);
        Py_DECREF(tmp_type_arg_127);
        if (tmp_metaclass_value_64 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 573;

            goto try_except_handler_190;
        }
        goto condexpr_end_128;
        condexpr_false_128:;
        tmp_metaclass_value_64 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_64);
        condexpr_end_128:;
        condexpr_end_127:;
        CHECK_OBJECT(tmp_class_creation_64__bases);
        tmp_bases_value_64 = tmp_class_creation_64__bases;
        tmp_assign_source_513 = SELECT_METACLASS(tmp_metaclass_value_64, tmp_bases_value_64);
        Py_DECREF(tmp_metaclass_value_64);
        if (tmp_assign_source_513 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 573;

            goto try_except_handler_190;
        }
        assert(tmp_class_creation_64__metaclass == NULL);
        tmp_class_creation_64__metaclass = tmp_assign_source_513;
    }
    {
        bool tmp_condition_result_381;
        PyObject *tmp_key_value_192;
        PyObject *tmp_dict_arg_value_192;
        tmp_key_value_192 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_64__class_decl_dict);
        tmp_dict_arg_value_192 = tmp_class_creation_64__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_192, tmp_key_value_192);
        assert(!(tmp_res == -1));
        tmp_condition_result_381 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_381 != false) {
            goto branch_yes_253;
        } else {
            goto branch_no_253;
        }
    }
    branch_yes_253:;
    CHECK_OBJECT(tmp_class_creation_64__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_64__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 573;

        goto try_except_handler_190;
    }
    branch_no_253:;
    {
        nuitka_bool tmp_condition_result_382;
        PyObject *tmp_expression_value_327;
        CHECK_OBJECT(tmp_class_creation_64__metaclass);
        tmp_expression_value_327 = tmp_class_creation_64__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_327, mod_consts[44]);
        tmp_condition_result_382 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_382 == NUITKA_BOOL_TRUE) {
            goto branch_yes_254;
        } else {
            goto branch_no_254;
        }
    }
    branch_yes_254:;
    {
        PyObject *tmp_assign_source_514;
        PyObject *tmp_called_value_127;
        PyObject *tmp_expression_value_328;
        PyObject *tmp_args_value_127;
        PyObject *tmp_tuple_element_252;
        PyObject *tmp_kwargs_value_127;
        CHECK_OBJECT(tmp_class_creation_64__metaclass);
        tmp_expression_value_328 = tmp_class_creation_64__metaclass;
        tmp_called_value_127 = LOOKUP_ATTRIBUTE(tmp_expression_value_328, mod_consts[44]);
        if (tmp_called_value_127 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 573;

            goto try_except_handler_190;
        }
        tmp_tuple_element_252 = mod_consts[232];
        tmp_args_value_127 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_127, 0, tmp_tuple_element_252);
        CHECK_OBJECT(tmp_class_creation_64__bases);
        tmp_tuple_element_252 = tmp_class_creation_64__bases;
        PyTuple_SET_ITEM0(tmp_args_value_127, 1, tmp_tuple_element_252);
        CHECK_OBJECT(tmp_class_creation_64__class_decl_dict);
        tmp_kwargs_value_127 = tmp_class_creation_64__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 573;
        tmp_assign_source_514 = CALL_FUNCTION(tmp_called_value_127, tmp_args_value_127, tmp_kwargs_value_127);
        Py_DECREF(tmp_called_value_127);
        Py_DECREF(tmp_args_value_127);
        if (tmp_assign_source_514 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 573;

            goto try_except_handler_190;
        }
        assert(tmp_class_creation_64__prepared == NULL);
        tmp_class_creation_64__prepared = tmp_assign_source_514;
    }
    {
        bool tmp_condition_result_383;
        PyObject *tmp_operand_value_64;
        PyObject *tmp_expression_value_329;
        CHECK_OBJECT(tmp_class_creation_64__prepared);
        tmp_expression_value_329 = tmp_class_creation_64__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_329, mod_consts[46]);
        tmp_operand_value_64 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_64);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 573;

            goto try_except_handler_190;
        }
        tmp_condition_result_383 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_383 != false) {
            goto branch_yes_255;
        } else {
            goto branch_no_255;
        }
    }
    branch_yes_255:;
    {
        PyObject *tmp_raise_type_64;
        PyObject *tmp_raise_value_64;
        PyObject *tmp_left_value_64;
        PyObject *tmp_right_value_64;
        PyObject *tmp_tuple_element_253;
        PyObject *tmp_getattr_target_64;
        PyObject *tmp_getattr_attr_64;
        PyObject *tmp_getattr_default_64;
        tmp_raise_type_64 = PyExc_TypeError;
        tmp_left_value_64 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_64__metaclass);
        tmp_getattr_target_64 = tmp_class_creation_64__metaclass;
        tmp_getattr_attr_64 = mod_consts[48];
        tmp_getattr_default_64 = mod_consts[49];
        tmp_tuple_element_253 = BUILTIN_GETATTR(tmp_getattr_target_64, tmp_getattr_attr_64, tmp_getattr_default_64);
        if (tmp_tuple_element_253 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 573;

            goto try_except_handler_190;
        }
        tmp_right_value_64 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_330;
            PyObject *tmp_type_arg_128;
            PyTuple_SET_ITEM(tmp_right_value_64, 0, tmp_tuple_element_253);
            CHECK_OBJECT(tmp_class_creation_64__prepared);
            tmp_type_arg_128 = tmp_class_creation_64__prepared;
            tmp_expression_value_330 = BUILTIN_TYPE1(tmp_type_arg_128);
            assert(!(tmp_expression_value_330 == NULL));
            tmp_tuple_element_253 = LOOKUP_ATTRIBUTE(tmp_expression_value_330, mod_consts[48]);
            Py_DECREF(tmp_expression_value_330);
            if (tmp_tuple_element_253 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 573;

                goto tuple_build_exception_68;
            }
            PyTuple_SET_ITEM(tmp_right_value_64, 1, tmp_tuple_element_253);
        }
        goto tuple_build_noexception_68;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_68:;
        Py_DECREF(tmp_right_value_64);
        goto try_except_handler_190;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_68:;
        tmp_raise_value_64 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_64, tmp_right_value_64);
        Py_DECREF(tmp_right_value_64);
        if (tmp_raise_value_64 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 573;

            goto try_except_handler_190;
        }
        exception_type = tmp_raise_type_64;
        Py_INCREF(tmp_raise_type_64);
        exception_value = tmp_raise_value_64;
        exception_lineno = 573;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_190;
    }
    branch_no_255:;
    goto branch_end_254;
    branch_no_254:;
    {
        PyObject *tmp_assign_source_515;
        tmp_assign_source_515 = PyDict_New();
        assert(tmp_class_creation_64__prepared == NULL);
        tmp_class_creation_64__prepared = tmp_assign_source_515;
    }
    branch_end_254:;
    {
        PyObject *tmp_assign_source_516;
        {
            PyObject *tmp_set_locals_64;
            CHECK_OBJECT(tmp_class_creation_64__prepared);
            tmp_set_locals_64 = tmp_class_creation_64__prepared;
            locals_botocore$exceptions$$$class__64_StubResponseError_573 = tmp_set_locals_64;
            Py_INCREF(tmp_set_locals_64);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__64_StubResponseError_573, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 573;

            goto try_except_handler_192;
        }
        tmp_dictset_value = mod_consts[232];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__64_StubResponseError_573, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 573;

            goto try_except_handler_192;
        }
        if (isFrameUnusable(cache_frame_db1ed124efaccc318ea7e05a853c8733_61)) {
            Py_XDECREF(cache_frame_db1ed124efaccc318ea7e05a853c8733_61);

#if _DEBUG_REFCOUNTS
            if (cache_frame_db1ed124efaccc318ea7e05a853c8733_61 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_db1ed124efaccc318ea7e05a853c8733_61 = MAKE_FUNCTION_FRAME(codeobj_db1ed124efaccc318ea7e05a853c8733, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_db1ed124efaccc318ea7e05a853c8733_61->m_type_description == NULL);
        frame_db1ed124efaccc318ea7e05a853c8733_61 = cache_frame_db1ed124efaccc318ea7e05a853c8733_61;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_db1ed124efaccc318ea7e05a853c8733_61);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_db1ed124efaccc318ea7e05a853c8733_61) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[233];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__64_StubResponseError_573, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 574;
            type_description_2 = "o";
            goto frame_exception_exit_61;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_db1ed124efaccc318ea7e05a853c8733_61);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_60;

        frame_exception_exit_61:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_db1ed124efaccc318ea7e05a853c8733_61);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_db1ed124efaccc318ea7e05a853c8733_61, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_db1ed124efaccc318ea7e05a853c8733_61->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_db1ed124efaccc318ea7e05a853c8733_61, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_db1ed124efaccc318ea7e05a853c8733_61,
            type_description_2,
            outline_63_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_db1ed124efaccc318ea7e05a853c8733_61 == cache_frame_db1ed124efaccc318ea7e05a853c8733_61) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_db1ed124efaccc318ea7e05a853c8733_61);
            cache_frame_db1ed124efaccc318ea7e05a853c8733_61 = NULL;
        }

        assertFrameObject(frame_db1ed124efaccc318ea7e05a853c8733_61);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_60;

        frame_no_exception_60:;
        goto skip_nested_handling_60;
        nested_frame_exit_60:;

        goto try_except_handler_192;
        skip_nested_handling_60:;
        {
            nuitka_bool tmp_condition_result_384;
            PyObject *tmp_cmp_expr_left_64;
            PyObject *tmp_cmp_expr_right_64;
            CHECK_OBJECT(tmp_class_creation_64__bases);
            tmp_cmp_expr_left_64 = tmp_class_creation_64__bases;
            CHECK_OBJECT(tmp_class_creation_64__bases_orig);
            tmp_cmp_expr_right_64 = tmp_class_creation_64__bases_orig;
            tmp_condition_result_384 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_64, tmp_cmp_expr_right_64);
            if (tmp_condition_result_384 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 573;

                goto try_except_handler_192;
            }
            if (tmp_condition_result_384 == NUITKA_BOOL_TRUE) {
                goto branch_yes_256;
            } else {
                goto branch_no_256;
            }
            assert(tmp_condition_result_384 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_256:;
        CHECK_OBJECT(tmp_class_creation_64__bases_orig);
        tmp_dictset_value = tmp_class_creation_64__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__64_StubResponseError_573, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 573;

            goto try_except_handler_192;
        }
        branch_no_256:;
        {
            PyObject *tmp_assign_source_517;
            PyObject *tmp_called_value_128;
            PyObject *tmp_args_value_128;
            PyObject *tmp_tuple_element_254;
            PyObject *tmp_kwargs_value_128;
            CHECK_OBJECT(tmp_class_creation_64__metaclass);
            tmp_called_value_128 = tmp_class_creation_64__metaclass;
            tmp_tuple_element_254 = mod_consts[232];
            tmp_args_value_128 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_128, 0, tmp_tuple_element_254);
            CHECK_OBJECT(tmp_class_creation_64__bases);
            tmp_tuple_element_254 = tmp_class_creation_64__bases;
            PyTuple_SET_ITEM0(tmp_args_value_128, 1, tmp_tuple_element_254);
            tmp_tuple_element_254 = locals_botocore$exceptions$$$class__64_StubResponseError_573;
            PyTuple_SET_ITEM0(tmp_args_value_128, 2, tmp_tuple_element_254);
            CHECK_OBJECT(tmp_class_creation_64__class_decl_dict);
            tmp_kwargs_value_128 = tmp_class_creation_64__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 573;
            tmp_assign_source_517 = CALL_FUNCTION(tmp_called_value_128, tmp_args_value_128, tmp_kwargs_value_128);
            Py_DECREF(tmp_args_value_128);
            if (tmp_assign_source_517 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 573;

                goto try_except_handler_192;
            }
            assert(outline_63_var___class__ == NULL);
            outline_63_var___class__ = tmp_assign_source_517;
        }
        CHECK_OBJECT(outline_63_var___class__);
        tmp_assign_source_516 = outline_63_var___class__;
        Py_INCREF(tmp_assign_source_516);
        goto try_return_handler_192;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_192:;
        Py_DECREF(locals_botocore$exceptions$$$class__64_StubResponseError_573);
        locals_botocore$exceptions$$$class__64_StubResponseError_573 = NULL;
        goto try_return_handler_191;
        // Exception handler code:
        try_except_handler_192:;
        exception_keeper_type_190 = exception_type;
        exception_keeper_value_190 = exception_value;
        exception_keeper_tb_190 = exception_tb;
        exception_keeper_lineno_190 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__64_StubResponseError_573);
        locals_botocore$exceptions$$$class__64_StubResponseError_573 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_190;
        exception_value = exception_keeper_value_190;
        exception_tb = exception_keeper_tb_190;
        exception_lineno = exception_keeper_lineno_190;

        goto try_except_handler_191;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_191:;
        CHECK_OBJECT(outline_63_var___class__);
        Py_DECREF(outline_63_var___class__);
        outline_63_var___class__ = NULL;
        goto outline_result_64;
        // Exception handler code:
        try_except_handler_191:;
        exception_keeper_type_191 = exception_type;
        exception_keeper_value_191 = exception_value;
        exception_keeper_tb_191 = exception_tb;
        exception_keeper_lineno_191 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_191;
        exception_value = exception_keeper_value_191;
        exception_tb = exception_keeper_tb_191;
        exception_lineno = exception_keeper_lineno_191;

        goto outline_exception_64;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_64:;
        exception_lineno = 573;
        goto try_except_handler_190;
        outline_result_64:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[232], tmp_assign_source_516);
    }
    goto try_end_64;
    // Exception handler code:
    try_except_handler_190:;
    exception_keeper_type_192 = exception_type;
    exception_keeper_value_192 = exception_value;
    exception_keeper_tb_192 = exception_tb;
    exception_keeper_lineno_192 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_64__bases_orig);
    tmp_class_creation_64__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_64__bases);
    tmp_class_creation_64__bases = NULL;
    Py_XDECREF(tmp_class_creation_64__class_decl_dict);
    tmp_class_creation_64__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_64__metaclass);
    tmp_class_creation_64__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_64__prepared);
    tmp_class_creation_64__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_192;
    exception_value = exception_keeper_value_192;
    exception_tb = exception_keeper_tb_192;
    exception_lineno = exception_keeper_lineno_192;

    goto frame_exception_exit_1;
    // End of try:
    try_end_64:;
    CHECK_OBJECT(tmp_class_creation_64__bases_orig);
    Py_DECREF(tmp_class_creation_64__bases_orig);
    tmp_class_creation_64__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_64__bases);
    Py_DECREF(tmp_class_creation_64__bases);
    tmp_class_creation_64__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_64__class_decl_dict);
    Py_DECREF(tmp_class_creation_64__class_decl_dict);
    tmp_class_creation_64__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_64__metaclass);
    Py_DECREF(tmp_class_creation_64__metaclass);
    tmp_class_creation_64__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_64__prepared);
    Py_DECREF(tmp_class_creation_64__prepared);
    tmp_class_creation_64__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_518;
        PyObject *tmp_tuple_element_255;
        tmp_tuple_element_255 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[232]);

        if (unlikely(tmp_tuple_element_255 == NULL)) {
            tmp_tuple_element_255 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[232]);
        }

        if (tmp_tuple_element_255 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 577;

            goto try_except_handler_193;
        }
        tmp_assign_source_518 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_assign_source_518, 0, tmp_tuple_element_255);
        tmp_tuple_element_255 = PyExc_AssertionError;
        PyTuple_SET_ITEM0(tmp_assign_source_518, 1, tmp_tuple_element_255);
        assert(tmp_class_creation_65__bases_orig == NULL);
        tmp_class_creation_65__bases_orig = tmp_assign_source_518;
    }
    {
        PyObject *tmp_assign_source_519;
        PyObject *tmp_dircall_arg1_65;
        CHECK_OBJECT(tmp_class_creation_65__bases_orig);
        tmp_dircall_arg1_65 = tmp_class_creation_65__bases_orig;
        Py_INCREF(tmp_dircall_arg1_65);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_65};
            tmp_assign_source_519 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_519 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 577;

            goto try_except_handler_193;
        }
        assert(tmp_class_creation_65__bases == NULL);
        tmp_class_creation_65__bases = tmp_assign_source_519;
    }
    {
        PyObject *tmp_assign_source_520;
        tmp_assign_source_520 = PyDict_New();
        assert(tmp_class_creation_65__class_decl_dict == NULL);
        tmp_class_creation_65__class_decl_dict = tmp_assign_source_520;
    }
    {
        PyObject *tmp_assign_source_521;
        PyObject *tmp_metaclass_value_65;
        bool tmp_condition_result_385;
        PyObject *tmp_key_value_193;
        PyObject *tmp_dict_arg_value_193;
        PyObject *tmp_dict_arg_value_194;
        PyObject *tmp_key_value_194;
        nuitka_bool tmp_condition_result_386;
        int tmp_truth_name_65;
        PyObject *tmp_type_arg_129;
        PyObject *tmp_expression_value_331;
        PyObject *tmp_subscript_value_65;
        PyObject *tmp_bases_value_65;
        tmp_key_value_193 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_65__class_decl_dict);
        tmp_dict_arg_value_193 = tmp_class_creation_65__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_193, tmp_key_value_193);
        assert(!(tmp_res == -1));
        tmp_condition_result_385 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_385 != false) {
            goto condexpr_true_129;
        } else {
            goto condexpr_false_129;
        }
        condexpr_true_129:;
        CHECK_OBJECT(tmp_class_creation_65__class_decl_dict);
        tmp_dict_arg_value_194 = tmp_class_creation_65__class_decl_dict;
        tmp_key_value_194 = mod_consts[43];
        tmp_metaclass_value_65 = DICT_GET_ITEM0(tmp_dict_arg_value_194, tmp_key_value_194);
        if (tmp_metaclass_value_65 == NULL) {
            tmp_metaclass_value_65 = Py_None;
        }
        assert(!(tmp_metaclass_value_65 == NULL));
        Py_INCREF(tmp_metaclass_value_65);
        goto condexpr_end_129;
        condexpr_false_129:;
        CHECK_OBJECT(tmp_class_creation_65__bases);
        tmp_truth_name_65 = CHECK_IF_TRUE(tmp_class_creation_65__bases);
        if (tmp_truth_name_65 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 577;

            goto try_except_handler_193;
        }
        tmp_condition_result_386 = tmp_truth_name_65 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_386 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_130;
        } else {
            goto condexpr_false_130;
        }
        condexpr_true_130:;
        CHECK_OBJECT(tmp_class_creation_65__bases);
        tmp_expression_value_331 = tmp_class_creation_65__bases;
        tmp_subscript_value_65 = mod_consts[36];
        tmp_type_arg_129 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_331, tmp_subscript_value_65, 0);
        if (tmp_type_arg_129 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 577;

            goto try_except_handler_193;
        }
        tmp_metaclass_value_65 = BUILTIN_TYPE1(tmp_type_arg_129);
        Py_DECREF(tmp_type_arg_129);
        if (tmp_metaclass_value_65 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 577;

            goto try_except_handler_193;
        }
        goto condexpr_end_130;
        condexpr_false_130:;
        tmp_metaclass_value_65 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_65);
        condexpr_end_130:;
        condexpr_end_129:;
        CHECK_OBJECT(tmp_class_creation_65__bases);
        tmp_bases_value_65 = tmp_class_creation_65__bases;
        tmp_assign_source_521 = SELECT_METACLASS(tmp_metaclass_value_65, tmp_bases_value_65);
        Py_DECREF(tmp_metaclass_value_65);
        if (tmp_assign_source_521 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 577;

            goto try_except_handler_193;
        }
        assert(tmp_class_creation_65__metaclass == NULL);
        tmp_class_creation_65__metaclass = tmp_assign_source_521;
    }
    {
        bool tmp_condition_result_387;
        PyObject *tmp_key_value_195;
        PyObject *tmp_dict_arg_value_195;
        tmp_key_value_195 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_65__class_decl_dict);
        tmp_dict_arg_value_195 = tmp_class_creation_65__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_195, tmp_key_value_195);
        assert(!(tmp_res == -1));
        tmp_condition_result_387 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_387 != false) {
            goto branch_yes_257;
        } else {
            goto branch_no_257;
        }
    }
    branch_yes_257:;
    CHECK_OBJECT(tmp_class_creation_65__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_65__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 577;

        goto try_except_handler_193;
    }
    branch_no_257:;
    {
        nuitka_bool tmp_condition_result_388;
        PyObject *tmp_expression_value_332;
        CHECK_OBJECT(tmp_class_creation_65__metaclass);
        tmp_expression_value_332 = tmp_class_creation_65__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_332, mod_consts[44]);
        tmp_condition_result_388 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_388 == NUITKA_BOOL_TRUE) {
            goto branch_yes_258;
        } else {
            goto branch_no_258;
        }
    }
    branch_yes_258:;
    {
        PyObject *tmp_assign_source_522;
        PyObject *tmp_called_value_129;
        PyObject *tmp_expression_value_333;
        PyObject *tmp_args_value_129;
        PyObject *tmp_tuple_element_256;
        PyObject *tmp_kwargs_value_129;
        CHECK_OBJECT(tmp_class_creation_65__metaclass);
        tmp_expression_value_333 = tmp_class_creation_65__metaclass;
        tmp_called_value_129 = LOOKUP_ATTRIBUTE(tmp_expression_value_333, mod_consts[44]);
        if (tmp_called_value_129 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 577;

            goto try_except_handler_193;
        }
        tmp_tuple_element_256 = mod_consts[234];
        tmp_args_value_129 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_129, 0, tmp_tuple_element_256);
        CHECK_OBJECT(tmp_class_creation_65__bases);
        tmp_tuple_element_256 = tmp_class_creation_65__bases;
        PyTuple_SET_ITEM0(tmp_args_value_129, 1, tmp_tuple_element_256);
        CHECK_OBJECT(tmp_class_creation_65__class_decl_dict);
        tmp_kwargs_value_129 = tmp_class_creation_65__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 577;
        tmp_assign_source_522 = CALL_FUNCTION(tmp_called_value_129, tmp_args_value_129, tmp_kwargs_value_129);
        Py_DECREF(tmp_called_value_129);
        Py_DECREF(tmp_args_value_129);
        if (tmp_assign_source_522 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 577;

            goto try_except_handler_193;
        }
        assert(tmp_class_creation_65__prepared == NULL);
        tmp_class_creation_65__prepared = tmp_assign_source_522;
    }
    {
        bool tmp_condition_result_389;
        PyObject *tmp_operand_value_65;
        PyObject *tmp_expression_value_334;
        CHECK_OBJECT(tmp_class_creation_65__prepared);
        tmp_expression_value_334 = tmp_class_creation_65__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_334, mod_consts[46]);
        tmp_operand_value_65 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_65);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 577;

            goto try_except_handler_193;
        }
        tmp_condition_result_389 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_389 != false) {
            goto branch_yes_259;
        } else {
            goto branch_no_259;
        }
    }
    branch_yes_259:;
    {
        PyObject *tmp_raise_type_65;
        PyObject *tmp_raise_value_65;
        PyObject *tmp_left_value_65;
        PyObject *tmp_right_value_65;
        PyObject *tmp_tuple_element_257;
        PyObject *tmp_getattr_target_65;
        PyObject *tmp_getattr_attr_65;
        PyObject *tmp_getattr_default_65;
        tmp_raise_type_65 = PyExc_TypeError;
        tmp_left_value_65 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_65__metaclass);
        tmp_getattr_target_65 = tmp_class_creation_65__metaclass;
        tmp_getattr_attr_65 = mod_consts[48];
        tmp_getattr_default_65 = mod_consts[49];
        tmp_tuple_element_257 = BUILTIN_GETATTR(tmp_getattr_target_65, tmp_getattr_attr_65, tmp_getattr_default_65);
        if (tmp_tuple_element_257 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 577;

            goto try_except_handler_193;
        }
        tmp_right_value_65 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_335;
            PyObject *tmp_type_arg_130;
            PyTuple_SET_ITEM(tmp_right_value_65, 0, tmp_tuple_element_257);
            CHECK_OBJECT(tmp_class_creation_65__prepared);
            tmp_type_arg_130 = tmp_class_creation_65__prepared;
            tmp_expression_value_335 = BUILTIN_TYPE1(tmp_type_arg_130);
            assert(!(tmp_expression_value_335 == NULL));
            tmp_tuple_element_257 = LOOKUP_ATTRIBUTE(tmp_expression_value_335, mod_consts[48]);
            Py_DECREF(tmp_expression_value_335);
            if (tmp_tuple_element_257 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 577;

                goto tuple_build_exception_69;
            }
            PyTuple_SET_ITEM(tmp_right_value_65, 1, tmp_tuple_element_257);
        }
        goto tuple_build_noexception_69;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_69:;
        Py_DECREF(tmp_right_value_65);
        goto try_except_handler_193;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_69:;
        tmp_raise_value_65 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_65, tmp_right_value_65);
        Py_DECREF(tmp_right_value_65);
        if (tmp_raise_value_65 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 577;

            goto try_except_handler_193;
        }
        exception_type = tmp_raise_type_65;
        Py_INCREF(tmp_raise_type_65);
        exception_value = tmp_raise_value_65;
        exception_lineno = 577;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_193;
    }
    branch_no_259:;
    goto branch_end_258;
    branch_no_258:;
    {
        PyObject *tmp_assign_source_523;
        tmp_assign_source_523 = PyDict_New();
        assert(tmp_class_creation_65__prepared == NULL);
        tmp_class_creation_65__prepared = tmp_assign_source_523;
    }
    branch_end_258:;
    {
        PyObject *tmp_assign_source_524;
        {
            PyObject *tmp_set_locals_65;
            CHECK_OBJECT(tmp_class_creation_65__prepared);
            tmp_set_locals_65 = tmp_class_creation_65__prepared;
            locals_botocore$exceptions$$$class__65_StubAssertionError_577 = tmp_set_locals_65;
            Py_INCREF(tmp_set_locals_65);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__65_StubAssertionError_577, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 577;

            goto try_except_handler_195;
        }
        tmp_dictset_value = mod_consts[234];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__65_StubAssertionError_577, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 577;

            goto try_except_handler_195;
        }
        {
            nuitka_bool tmp_condition_result_390;
            PyObject *tmp_cmp_expr_left_65;
            PyObject *tmp_cmp_expr_right_65;
            CHECK_OBJECT(tmp_class_creation_65__bases);
            tmp_cmp_expr_left_65 = tmp_class_creation_65__bases;
            CHECK_OBJECT(tmp_class_creation_65__bases_orig);
            tmp_cmp_expr_right_65 = tmp_class_creation_65__bases_orig;
            tmp_condition_result_390 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_65, tmp_cmp_expr_right_65);
            if (tmp_condition_result_390 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 577;

                goto try_except_handler_195;
            }
            if (tmp_condition_result_390 == NUITKA_BOOL_TRUE) {
                goto branch_yes_260;
            } else {
                goto branch_no_260;
            }
            assert(tmp_condition_result_390 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_260:;
        CHECK_OBJECT(tmp_class_creation_65__bases_orig);
        tmp_dictset_value = tmp_class_creation_65__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__65_StubAssertionError_577, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 577;

            goto try_except_handler_195;
        }
        branch_no_260:;
        {
            PyObject *tmp_assign_source_525;
            PyObject *tmp_called_value_130;
            PyObject *tmp_args_value_130;
            PyObject *tmp_tuple_element_258;
            PyObject *tmp_kwargs_value_130;
            CHECK_OBJECT(tmp_class_creation_65__metaclass);
            tmp_called_value_130 = tmp_class_creation_65__metaclass;
            tmp_tuple_element_258 = mod_consts[234];
            tmp_args_value_130 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_130, 0, tmp_tuple_element_258);
            CHECK_OBJECT(tmp_class_creation_65__bases);
            tmp_tuple_element_258 = tmp_class_creation_65__bases;
            PyTuple_SET_ITEM0(tmp_args_value_130, 1, tmp_tuple_element_258);
            tmp_tuple_element_258 = locals_botocore$exceptions$$$class__65_StubAssertionError_577;
            PyTuple_SET_ITEM0(tmp_args_value_130, 2, tmp_tuple_element_258);
            CHECK_OBJECT(tmp_class_creation_65__class_decl_dict);
            tmp_kwargs_value_130 = tmp_class_creation_65__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 577;
            tmp_assign_source_525 = CALL_FUNCTION(tmp_called_value_130, tmp_args_value_130, tmp_kwargs_value_130);
            Py_DECREF(tmp_args_value_130);
            if (tmp_assign_source_525 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 577;

                goto try_except_handler_195;
            }
            assert(outline_64_var___class__ == NULL);
            outline_64_var___class__ = tmp_assign_source_525;
        }
        CHECK_OBJECT(outline_64_var___class__);
        tmp_assign_source_524 = outline_64_var___class__;
        Py_INCREF(tmp_assign_source_524);
        goto try_return_handler_195;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_195:;
        Py_DECREF(locals_botocore$exceptions$$$class__65_StubAssertionError_577);
        locals_botocore$exceptions$$$class__65_StubAssertionError_577 = NULL;
        goto try_return_handler_194;
        // Exception handler code:
        try_except_handler_195:;
        exception_keeper_type_193 = exception_type;
        exception_keeper_value_193 = exception_value;
        exception_keeper_tb_193 = exception_tb;
        exception_keeper_lineno_193 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__65_StubAssertionError_577);
        locals_botocore$exceptions$$$class__65_StubAssertionError_577 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_193;
        exception_value = exception_keeper_value_193;
        exception_tb = exception_keeper_tb_193;
        exception_lineno = exception_keeper_lineno_193;

        goto try_except_handler_194;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_194:;
        CHECK_OBJECT(outline_64_var___class__);
        Py_DECREF(outline_64_var___class__);
        outline_64_var___class__ = NULL;
        goto outline_result_65;
        // Exception handler code:
        try_except_handler_194:;
        exception_keeper_type_194 = exception_type;
        exception_keeper_value_194 = exception_value;
        exception_keeper_tb_194 = exception_tb;
        exception_keeper_lineno_194 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_194;
        exception_value = exception_keeper_value_194;
        exception_tb = exception_keeper_tb_194;
        exception_lineno = exception_keeper_lineno_194;

        goto outline_exception_65;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_65:;
        exception_lineno = 577;
        goto try_except_handler_193;
        outline_result_65:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[234], tmp_assign_source_524);
    }
    goto try_end_65;
    // Exception handler code:
    try_except_handler_193:;
    exception_keeper_type_195 = exception_type;
    exception_keeper_value_195 = exception_value;
    exception_keeper_tb_195 = exception_tb;
    exception_keeper_lineno_195 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_65__bases_orig);
    tmp_class_creation_65__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_65__bases);
    tmp_class_creation_65__bases = NULL;
    Py_XDECREF(tmp_class_creation_65__class_decl_dict);
    tmp_class_creation_65__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_65__metaclass);
    tmp_class_creation_65__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_65__prepared);
    tmp_class_creation_65__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_195;
    exception_value = exception_keeper_value_195;
    exception_tb = exception_keeper_tb_195;
    exception_lineno = exception_keeper_lineno_195;

    goto frame_exception_exit_1;
    // End of try:
    try_end_65:;
    CHECK_OBJECT(tmp_class_creation_65__bases_orig);
    Py_DECREF(tmp_class_creation_65__bases_orig);
    tmp_class_creation_65__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_65__bases);
    Py_DECREF(tmp_class_creation_65__bases);
    tmp_class_creation_65__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_65__class_decl_dict);
    Py_DECREF(tmp_class_creation_65__class_decl_dict);
    tmp_class_creation_65__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_65__metaclass);
    Py_DECREF(tmp_class_creation_65__metaclass);
    tmp_class_creation_65__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_65__prepared);
    Py_DECREF(tmp_class_creation_65__prepared);
    tmp_class_creation_65__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_526;
        PyObject *tmp_tuple_element_259;
        tmp_tuple_element_259 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[232]);

        if (unlikely(tmp_tuple_element_259 == NULL)) {
            tmp_tuple_element_259 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[232]);
        }

        if (tmp_tuple_element_259 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 581;

            goto try_except_handler_196;
        }
        tmp_assign_source_526 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_526, 0, tmp_tuple_element_259);
        assert(tmp_class_creation_66__bases_orig == NULL);
        tmp_class_creation_66__bases_orig = tmp_assign_source_526;
    }
    {
        PyObject *tmp_assign_source_527;
        PyObject *tmp_dircall_arg1_66;
        CHECK_OBJECT(tmp_class_creation_66__bases_orig);
        tmp_dircall_arg1_66 = tmp_class_creation_66__bases_orig;
        Py_INCREF(tmp_dircall_arg1_66);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_66};
            tmp_assign_source_527 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_527 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 581;

            goto try_except_handler_196;
        }
        assert(tmp_class_creation_66__bases == NULL);
        tmp_class_creation_66__bases = tmp_assign_source_527;
    }
    {
        PyObject *tmp_assign_source_528;
        tmp_assign_source_528 = PyDict_New();
        assert(tmp_class_creation_66__class_decl_dict == NULL);
        tmp_class_creation_66__class_decl_dict = tmp_assign_source_528;
    }
    {
        PyObject *tmp_assign_source_529;
        PyObject *tmp_metaclass_value_66;
        bool tmp_condition_result_391;
        PyObject *tmp_key_value_196;
        PyObject *tmp_dict_arg_value_196;
        PyObject *tmp_dict_arg_value_197;
        PyObject *tmp_key_value_197;
        nuitka_bool tmp_condition_result_392;
        int tmp_truth_name_66;
        PyObject *tmp_type_arg_131;
        PyObject *tmp_expression_value_336;
        PyObject *tmp_subscript_value_66;
        PyObject *tmp_bases_value_66;
        tmp_key_value_196 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_66__class_decl_dict);
        tmp_dict_arg_value_196 = tmp_class_creation_66__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_196, tmp_key_value_196);
        assert(!(tmp_res == -1));
        tmp_condition_result_391 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_391 != false) {
            goto condexpr_true_131;
        } else {
            goto condexpr_false_131;
        }
        condexpr_true_131:;
        CHECK_OBJECT(tmp_class_creation_66__class_decl_dict);
        tmp_dict_arg_value_197 = tmp_class_creation_66__class_decl_dict;
        tmp_key_value_197 = mod_consts[43];
        tmp_metaclass_value_66 = DICT_GET_ITEM0(tmp_dict_arg_value_197, tmp_key_value_197);
        if (tmp_metaclass_value_66 == NULL) {
            tmp_metaclass_value_66 = Py_None;
        }
        assert(!(tmp_metaclass_value_66 == NULL));
        Py_INCREF(tmp_metaclass_value_66);
        goto condexpr_end_131;
        condexpr_false_131:;
        CHECK_OBJECT(tmp_class_creation_66__bases);
        tmp_truth_name_66 = CHECK_IF_TRUE(tmp_class_creation_66__bases);
        if (tmp_truth_name_66 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 581;

            goto try_except_handler_196;
        }
        tmp_condition_result_392 = tmp_truth_name_66 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_392 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_132;
        } else {
            goto condexpr_false_132;
        }
        condexpr_true_132:;
        CHECK_OBJECT(tmp_class_creation_66__bases);
        tmp_expression_value_336 = tmp_class_creation_66__bases;
        tmp_subscript_value_66 = mod_consts[36];
        tmp_type_arg_131 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_336, tmp_subscript_value_66, 0);
        if (tmp_type_arg_131 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 581;

            goto try_except_handler_196;
        }
        tmp_metaclass_value_66 = BUILTIN_TYPE1(tmp_type_arg_131);
        Py_DECREF(tmp_type_arg_131);
        if (tmp_metaclass_value_66 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 581;

            goto try_except_handler_196;
        }
        goto condexpr_end_132;
        condexpr_false_132:;
        tmp_metaclass_value_66 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_66);
        condexpr_end_132:;
        condexpr_end_131:;
        CHECK_OBJECT(tmp_class_creation_66__bases);
        tmp_bases_value_66 = tmp_class_creation_66__bases;
        tmp_assign_source_529 = SELECT_METACLASS(tmp_metaclass_value_66, tmp_bases_value_66);
        Py_DECREF(tmp_metaclass_value_66);
        if (tmp_assign_source_529 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 581;

            goto try_except_handler_196;
        }
        assert(tmp_class_creation_66__metaclass == NULL);
        tmp_class_creation_66__metaclass = tmp_assign_source_529;
    }
    {
        bool tmp_condition_result_393;
        PyObject *tmp_key_value_198;
        PyObject *tmp_dict_arg_value_198;
        tmp_key_value_198 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_66__class_decl_dict);
        tmp_dict_arg_value_198 = tmp_class_creation_66__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_198, tmp_key_value_198);
        assert(!(tmp_res == -1));
        tmp_condition_result_393 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_393 != false) {
            goto branch_yes_261;
        } else {
            goto branch_no_261;
        }
    }
    branch_yes_261:;
    CHECK_OBJECT(tmp_class_creation_66__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_66__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 581;

        goto try_except_handler_196;
    }
    branch_no_261:;
    {
        nuitka_bool tmp_condition_result_394;
        PyObject *tmp_expression_value_337;
        CHECK_OBJECT(tmp_class_creation_66__metaclass);
        tmp_expression_value_337 = tmp_class_creation_66__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_337, mod_consts[44]);
        tmp_condition_result_394 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_394 == NUITKA_BOOL_TRUE) {
            goto branch_yes_262;
        } else {
            goto branch_no_262;
        }
    }
    branch_yes_262:;
    {
        PyObject *tmp_assign_source_530;
        PyObject *tmp_called_value_131;
        PyObject *tmp_expression_value_338;
        PyObject *tmp_args_value_131;
        PyObject *tmp_tuple_element_260;
        PyObject *tmp_kwargs_value_131;
        CHECK_OBJECT(tmp_class_creation_66__metaclass);
        tmp_expression_value_338 = tmp_class_creation_66__metaclass;
        tmp_called_value_131 = LOOKUP_ATTRIBUTE(tmp_expression_value_338, mod_consts[44]);
        if (tmp_called_value_131 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 581;

            goto try_except_handler_196;
        }
        tmp_tuple_element_260 = mod_consts[235];
        tmp_args_value_131 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_131, 0, tmp_tuple_element_260);
        CHECK_OBJECT(tmp_class_creation_66__bases);
        tmp_tuple_element_260 = tmp_class_creation_66__bases;
        PyTuple_SET_ITEM0(tmp_args_value_131, 1, tmp_tuple_element_260);
        CHECK_OBJECT(tmp_class_creation_66__class_decl_dict);
        tmp_kwargs_value_131 = tmp_class_creation_66__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 581;
        tmp_assign_source_530 = CALL_FUNCTION(tmp_called_value_131, tmp_args_value_131, tmp_kwargs_value_131);
        Py_DECREF(tmp_called_value_131);
        Py_DECREF(tmp_args_value_131);
        if (tmp_assign_source_530 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 581;

            goto try_except_handler_196;
        }
        assert(tmp_class_creation_66__prepared == NULL);
        tmp_class_creation_66__prepared = tmp_assign_source_530;
    }
    {
        bool tmp_condition_result_395;
        PyObject *tmp_operand_value_66;
        PyObject *tmp_expression_value_339;
        CHECK_OBJECT(tmp_class_creation_66__prepared);
        tmp_expression_value_339 = tmp_class_creation_66__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_339, mod_consts[46]);
        tmp_operand_value_66 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_66);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 581;

            goto try_except_handler_196;
        }
        tmp_condition_result_395 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_395 != false) {
            goto branch_yes_263;
        } else {
            goto branch_no_263;
        }
    }
    branch_yes_263:;
    {
        PyObject *tmp_raise_type_66;
        PyObject *tmp_raise_value_66;
        PyObject *tmp_left_value_66;
        PyObject *tmp_right_value_66;
        PyObject *tmp_tuple_element_261;
        PyObject *tmp_getattr_target_66;
        PyObject *tmp_getattr_attr_66;
        PyObject *tmp_getattr_default_66;
        tmp_raise_type_66 = PyExc_TypeError;
        tmp_left_value_66 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_66__metaclass);
        tmp_getattr_target_66 = tmp_class_creation_66__metaclass;
        tmp_getattr_attr_66 = mod_consts[48];
        tmp_getattr_default_66 = mod_consts[49];
        tmp_tuple_element_261 = BUILTIN_GETATTR(tmp_getattr_target_66, tmp_getattr_attr_66, tmp_getattr_default_66);
        if (tmp_tuple_element_261 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 581;

            goto try_except_handler_196;
        }
        tmp_right_value_66 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_340;
            PyObject *tmp_type_arg_132;
            PyTuple_SET_ITEM(tmp_right_value_66, 0, tmp_tuple_element_261);
            CHECK_OBJECT(tmp_class_creation_66__prepared);
            tmp_type_arg_132 = tmp_class_creation_66__prepared;
            tmp_expression_value_340 = BUILTIN_TYPE1(tmp_type_arg_132);
            assert(!(tmp_expression_value_340 == NULL));
            tmp_tuple_element_261 = LOOKUP_ATTRIBUTE(tmp_expression_value_340, mod_consts[48]);
            Py_DECREF(tmp_expression_value_340);
            if (tmp_tuple_element_261 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 581;

                goto tuple_build_exception_70;
            }
            PyTuple_SET_ITEM(tmp_right_value_66, 1, tmp_tuple_element_261);
        }
        goto tuple_build_noexception_70;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_70:;
        Py_DECREF(tmp_right_value_66);
        goto try_except_handler_196;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_70:;
        tmp_raise_value_66 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_66, tmp_right_value_66);
        Py_DECREF(tmp_right_value_66);
        if (tmp_raise_value_66 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 581;

            goto try_except_handler_196;
        }
        exception_type = tmp_raise_type_66;
        Py_INCREF(tmp_raise_type_66);
        exception_value = tmp_raise_value_66;
        exception_lineno = 581;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_196;
    }
    branch_no_263:;
    goto branch_end_262;
    branch_no_262:;
    {
        PyObject *tmp_assign_source_531;
        tmp_assign_source_531 = PyDict_New();
        assert(tmp_class_creation_66__prepared == NULL);
        tmp_class_creation_66__prepared = tmp_assign_source_531;
    }
    branch_end_262:;
    {
        PyObject *tmp_assign_source_532;
        {
            PyObject *tmp_set_locals_66;
            CHECK_OBJECT(tmp_class_creation_66__prepared);
            tmp_set_locals_66 = tmp_class_creation_66__prepared;
            locals_botocore$exceptions$$$class__66_UnStubbedResponseError_581 = tmp_set_locals_66;
            Py_INCREF(tmp_set_locals_66);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__66_UnStubbedResponseError_581, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 581;

            goto try_except_handler_198;
        }
        tmp_dictset_value = mod_consts[235];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__66_UnStubbedResponseError_581, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 581;

            goto try_except_handler_198;
        }
        {
            nuitka_bool tmp_condition_result_396;
            PyObject *tmp_cmp_expr_left_66;
            PyObject *tmp_cmp_expr_right_66;
            CHECK_OBJECT(tmp_class_creation_66__bases);
            tmp_cmp_expr_left_66 = tmp_class_creation_66__bases;
            CHECK_OBJECT(tmp_class_creation_66__bases_orig);
            tmp_cmp_expr_right_66 = tmp_class_creation_66__bases_orig;
            tmp_condition_result_396 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_66, tmp_cmp_expr_right_66);
            if (tmp_condition_result_396 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 581;

                goto try_except_handler_198;
            }
            if (tmp_condition_result_396 == NUITKA_BOOL_TRUE) {
                goto branch_yes_264;
            } else {
                goto branch_no_264;
            }
            assert(tmp_condition_result_396 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_264:;
        CHECK_OBJECT(tmp_class_creation_66__bases_orig);
        tmp_dictset_value = tmp_class_creation_66__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__66_UnStubbedResponseError_581, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 581;

            goto try_except_handler_198;
        }
        branch_no_264:;
        {
            PyObject *tmp_assign_source_533;
            PyObject *tmp_called_value_132;
            PyObject *tmp_args_value_132;
            PyObject *tmp_tuple_element_262;
            PyObject *tmp_kwargs_value_132;
            CHECK_OBJECT(tmp_class_creation_66__metaclass);
            tmp_called_value_132 = tmp_class_creation_66__metaclass;
            tmp_tuple_element_262 = mod_consts[235];
            tmp_args_value_132 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_132, 0, tmp_tuple_element_262);
            CHECK_OBJECT(tmp_class_creation_66__bases);
            tmp_tuple_element_262 = tmp_class_creation_66__bases;
            PyTuple_SET_ITEM0(tmp_args_value_132, 1, tmp_tuple_element_262);
            tmp_tuple_element_262 = locals_botocore$exceptions$$$class__66_UnStubbedResponseError_581;
            PyTuple_SET_ITEM0(tmp_args_value_132, 2, tmp_tuple_element_262);
            CHECK_OBJECT(tmp_class_creation_66__class_decl_dict);
            tmp_kwargs_value_132 = tmp_class_creation_66__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 581;
            tmp_assign_source_533 = CALL_FUNCTION(tmp_called_value_132, tmp_args_value_132, tmp_kwargs_value_132);
            Py_DECREF(tmp_args_value_132);
            if (tmp_assign_source_533 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 581;

                goto try_except_handler_198;
            }
            assert(outline_65_var___class__ == NULL);
            outline_65_var___class__ = tmp_assign_source_533;
        }
        CHECK_OBJECT(outline_65_var___class__);
        tmp_assign_source_532 = outline_65_var___class__;
        Py_INCREF(tmp_assign_source_532);
        goto try_return_handler_198;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_198:;
        Py_DECREF(locals_botocore$exceptions$$$class__66_UnStubbedResponseError_581);
        locals_botocore$exceptions$$$class__66_UnStubbedResponseError_581 = NULL;
        goto try_return_handler_197;
        // Exception handler code:
        try_except_handler_198:;
        exception_keeper_type_196 = exception_type;
        exception_keeper_value_196 = exception_value;
        exception_keeper_tb_196 = exception_tb;
        exception_keeper_lineno_196 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__66_UnStubbedResponseError_581);
        locals_botocore$exceptions$$$class__66_UnStubbedResponseError_581 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_196;
        exception_value = exception_keeper_value_196;
        exception_tb = exception_keeper_tb_196;
        exception_lineno = exception_keeper_lineno_196;

        goto try_except_handler_197;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_197:;
        CHECK_OBJECT(outline_65_var___class__);
        Py_DECREF(outline_65_var___class__);
        outline_65_var___class__ = NULL;
        goto outline_result_66;
        // Exception handler code:
        try_except_handler_197:;
        exception_keeper_type_197 = exception_type;
        exception_keeper_value_197 = exception_value;
        exception_keeper_tb_197 = exception_tb;
        exception_keeper_lineno_197 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_197;
        exception_value = exception_keeper_value_197;
        exception_tb = exception_keeper_tb_197;
        exception_lineno = exception_keeper_lineno_197;

        goto outline_exception_66;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_66:;
        exception_lineno = 581;
        goto try_except_handler_196;
        outline_result_66:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[235], tmp_assign_source_532);
    }
    goto try_end_66;
    // Exception handler code:
    try_except_handler_196:;
    exception_keeper_type_198 = exception_type;
    exception_keeper_value_198 = exception_value;
    exception_keeper_tb_198 = exception_tb;
    exception_keeper_lineno_198 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_66__bases_orig);
    tmp_class_creation_66__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_66__bases);
    tmp_class_creation_66__bases = NULL;
    Py_XDECREF(tmp_class_creation_66__class_decl_dict);
    tmp_class_creation_66__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_66__metaclass);
    tmp_class_creation_66__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_66__prepared);
    tmp_class_creation_66__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_198;
    exception_value = exception_keeper_value_198;
    exception_tb = exception_keeper_tb_198;
    exception_lineno = exception_keeper_lineno_198;

    goto frame_exception_exit_1;
    // End of try:
    try_end_66:;
    CHECK_OBJECT(tmp_class_creation_66__bases_orig);
    Py_DECREF(tmp_class_creation_66__bases_orig);
    tmp_class_creation_66__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_66__bases);
    Py_DECREF(tmp_class_creation_66__bases);
    tmp_class_creation_66__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_66__class_decl_dict);
    Py_DECREF(tmp_class_creation_66__class_decl_dict);
    tmp_class_creation_66__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_66__metaclass);
    Py_DECREF(tmp_class_creation_66__metaclass);
    tmp_class_creation_66__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_66__prepared);
    Py_DECREF(tmp_class_creation_66__prepared);
    tmp_class_creation_66__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_534;
        PyObject *tmp_tuple_element_263;
        tmp_tuple_element_263 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_263 == NULL)) {
            tmp_tuple_element_263 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_263 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 585;

            goto try_except_handler_199;
        }
        tmp_assign_source_534 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_534, 0, tmp_tuple_element_263);
        assert(tmp_class_creation_67__bases_orig == NULL);
        tmp_class_creation_67__bases_orig = tmp_assign_source_534;
    }
    {
        PyObject *tmp_assign_source_535;
        PyObject *tmp_dircall_arg1_67;
        CHECK_OBJECT(tmp_class_creation_67__bases_orig);
        tmp_dircall_arg1_67 = tmp_class_creation_67__bases_orig;
        Py_INCREF(tmp_dircall_arg1_67);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_67};
            tmp_assign_source_535 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_535 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 585;

            goto try_except_handler_199;
        }
        assert(tmp_class_creation_67__bases == NULL);
        tmp_class_creation_67__bases = tmp_assign_source_535;
    }
    {
        PyObject *tmp_assign_source_536;
        tmp_assign_source_536 = PyDict_New();
        assert(tmp_class_creation_67__class_decl_dict == NULL);
        tmp_class_creation_67__class_decl_dict = tmp_assign_source_536;
    }
    {
        PyObject *tmp_assign_source_537;
        PyObject *tmp_metaclass_value_67;
        bool tmp_condition_result_397;
        PyObject *tmp_key_value_199;
        PyObject *tmp_dict_arg_value_199;
        PyObject *tmp_dict_arg_value_200;
        PyObject *tmp_key_value_200;
        nuitka_bool tmp_condition_result_398;
        int tmp_truth_name_67;
        PyObject *tmp_type_arg_133;
        PyObject *tmp_expression_value_341;
        PyObject *tmp_subscript_value_67;
        PyObject *tmp_bases_value_67;
        tmp_key_value_199 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_67__class_decl_dict);
        tmp_dict_arg_value_199 = tmp_class_creation_67__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_199, tmp_key_value_199);
        assert(!(tmp_res == -1));
        tmp_condition_result_397 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_397 != false) {
            goto condexpr_true_133;
        } else {
            goto condexpr_false_133;
        }
        condexpr_true_133:;
        CHECK_OBJECT(tmp_class_creation_67__class_decl_dict);
        tmp_dict_arg_value_200 = tmp_class_creation_67__class_decl_dict;
        tmp_key_value_200 = mod_consts[43];
        tmp_metaclass_value_67 = DICT_GET_ITEM0(tmp_dict_arg_value_200, tmp_key_value_200);
        if (tmp_metaclass_value_67 == NULL) {
            tmp_metaclass_value_67 = Py_None;
        }
        assert(!(tmp_metaclass_value_67 == NULL));
        Py_INCREF(tmp_metaclass_value_67);
        goto condexpr_end_133;
        condexpr_false_133:;
        CHECK_OBJECT(tmp_class_creation_67__bases);
        tmp_truth_name_67 = CHECK_IF_TRUE(tmp_class_creation_67__bases);
        if (tmp_truth_name_67 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 585;

            goto try_except_handler_199;
        }
        tmp_condition_result_398 = tmp_truth_name_67 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_398 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_134;
        } else {
            goto condexpr_false_134;
        }
        condexpr_true_134:;
        CHECK_OBJECT(tmp_class_creation_67__bases);
        tmp_expression_value_341 = tmp_class_creation_67__bases;
        tmp_subscript_value_67 = mod_consts[36];
        tmp_type_arg_133 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_341, tmp_subscript_value_67, 0);
        if (tmp_type_arg_133 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 585;

            goto try_except_handler_199;
        }
        tmp_metaclass_value_67 = BUILTIN_TYPE1(tmp_type_arg_133);
        Py_DECREF(tmp_type_arg_133);
        if (tmp_metaclass_value_67 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 585;

            goto try_except_handler_199;
        }
        goto condexpr_end_134;
        condexpr_false_134:;
        tmp_metaclass_value_67 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_67);
        condexpr_end_134:;
        condexpr_end_133:;
        CHECK_OBJECT(tmp_class_creation_67__bases);
        tmp_bases_value_67 = tmp_class_creation_67__bases;
        tmp_assign_source_537 = SELECT_METACLASS(tmp_metaclass_value_67, tmp_bases_value_67);
        Py_DECREF(tmp_metaclass_value_67);
        if (tmp_assign_source_537 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 585;

            goto try_except_handler_199;
        }
        assert(tmp_class_creation_67__metaclass == NULL);
        tmp_class_creation_67__metaclass = tmp_assign_source_537;
    }
    {
        bool tmp_condition_result_399;
        PyObject *tmp_key_value_201;
        PyObject *tmp_dict_arg_value_201;
        tmp_key_value_201 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_67__class_decl_dict);
        tmp_dict_arg_value_201 = tmp_class_creation_67__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_201, tmp_key_value_201);
        assert(!(tmp_res == -1));
        tmp_condition_result_399 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_399 != false) {
            goto branch_yes_265;
        } else {
            goto branch_no_265;
        }
    }
    branch_yes_265:;
    CHECK_OBJECT(tmp_class_creation_67__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_67__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 585;

        goto try_except_handler_199;
    }
    branch_no_265:;
    {
        nuitka_bool tmp_condition_result_400;
        PyObject *tmp_expression_value_342;
        CHECK_OBJECT(tmp_class_creation_67__metaclass);
        tmp_expression_value_342 = tmp_class_creation_67__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_342, mod_consts[44]);
        tmp_condition_result_400 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_400 == NUITKA_BOOL_TRUE) {
            goto branch_yes_266;
        } else {
            goto branch_no_266;
        }
    }
    branch_yes_266:;
    {
        PyObject *tmp_assign_source_538;
        PyObject *tmp_called_value_133;
        PyObject *tmp_expression_value_343;
        PyObject *tmp_args_value_133;
        PyObject *tmp_tuple_element_264;
        PyObject *tmp_kwargs_value_133;
        CHECK_OBJECT(tmp_class_creation_67__metaclass);
        tmp_expression_value_343 = tmp_class_creation_67__metaclass;
        tmp_called_value_133 = LOOKUP_ATTRIBUTE(tmp_expression_value_343, mod_consts[44]);
        if (tmp_called_value_133 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 585;

            goto try_except_handler_199;
        }
        tmp_tuple_element_264 = mod_consts[236];
        tmp_args_value_133 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_133, 0, tmp_tuple_element_264);
        CHECK_OBJECT(tmp_class_creation_67__bases);
        tmp_tuple_element_264 = tmp_class_creation_67__bases;
        PyTuple_SET_ITEM0(tmp_args_value_133, 1, tmp_tuple_element_264);
        CHECK_OBJECT(tmp_class_creation_67__class_decl_dict);
        tmp_kwargs_value_133 = tmp_class_creation_67__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 585;
        tmp_assign_source_538 = CALL_FUNCTION(tmp_called_value_133, tmp_args_value_133, tmp_kwargs_value_133);
        Py_DECREF(tmp_called_value_133);
        Py_DECREF(tmp_args_value_133);
        if (tmp_assign_source_538 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 585;

            goto try_except_handler_199;
        }
        assert(tmp_class_creation_67__prepared == NULL);
        tmp_class_creation_67__prepared = tmp_assign_source_538;
    }
    {
        bool tmp_condition_result_401;
        PyObject *tmp_operand_value_67;
        PyObject *tmp_expression_value_344;
        CHECK_OBJECT(tmp_class_creation_67__prepared);
        tmp_expression_value_344 = tmp_class_creation_67__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_344, mod_consts[46]);
        tmp_operand_value_67 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_67);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 585;

            goto try_except_handler_199;
        }
        tmp_condition_result_401 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_401 != false) {
            goto branch_yes_267;
        } else {
            goto branch_no_267;
        }
    }
    branch_yes_267:;
    {
        PyObject *tmp_raise_type_67;
        PyObject *tmp_raise_value_67;
        PyObject *tmp_left_value_67;
        PyObject *tmp_right_value_67;
        PyObject *tmp_tuple_element_265;
        PyObject *tmp_getattr_target_67;
        PyObject *tmp_getattr_attr_67;
        PyObject *tmp_getattr_default_67;
        tmp_raise_type_67 = PyExc_TypeError;
        tmp_left_value_67 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_67__metaclass);
        tmp_getattr_target_67 = tmp_class_creation_67__metaclass;
        tmp_getattr_attr_67 = mod_consts[48];
        tmp_getattr_default_67 = mod_consts[49];
        tmp_tuple_element_265 = BUILTIN_GETATTR(tmp_getattr_target_67, tmp_getattr_attr_67, tmp_getattr_default_67);
        if (tmp_tuple_element_265 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 585;

            goto try_except_handler_199;
        }
        tmp_right_value_67 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_345;
            PyObject *tmp_type_arg_134;
            PyTuple_SET_ITEM(tmp_right_value_67, 0, tmp_tuple_element_265);
            CHECK_OBJECT(tmp_class_creation_67__prepared);
            tmp_type_arg_134 = tmp_class_creation_67__prepared;
            tmp_expression_value_345 = BUILTIN_TYPE1(tmp_type_arg_134);
            assert(!(tmp_expression_value_345 == NULL));
            tmp_tuple_element_265 = LOOKUP_ATTRIBUTE(tmp_expression_value_345, mod_consts[48]);
            Py_DECREF(tmp_expression_value_345);
            if (tmp_tuple_element_265 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 585;

                goto tuple_build_exception_71;
            }
            PyTuple_SET_ITEM(tmp_right_value_67, 1, tmp_tuple_element_265);
        }
        goto tuple_build_noexception_71;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_71:;
        Py_DECREF(tmp_right_value_67);
        goto try_except_handler_199;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_71:;
        tmp_raise_value_67 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_67, tmp_right_value_67);
        Py_DECREF(tmp_right_value_67);
        if (tmp_raise_value_67 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 585;

            goto try_except_handler_199;
        }
        exception_type = tmp_raise_type_67;
        Py_INCREF(tmp_raise_type_67);
        exception_value = tmp_raise_value_67;
        exception_lineno = 585;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_199;
    }
    branch_no_267:;
    goto branch_end_266;
    branch_no_266:;
    {
        PyObject *tmp_assign_source_539;
        tmp_assign_source_539 = PyDict_New();
        assert(tmp_class_creation_67__prepared == NULL);
        tmp_class_creation_67__prepared = tmp_assign_source_539;
    }
    branch_end_266:;
    {
        PyObject *tmp_assign_source_540;
        {
            PyObject *tmp_set_locals_67;
            CHECK_OBJECT(tmp_class_creation_67__prepared);
            tmp_set_locals_67 = tmp_class_creation_67__prepared;
            locals_botocore$exceptions$$$class__67_InvalidConfigError_585 = tmp_set_locals_67;
            Py_INCREF(tmp_set_locals_67);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__67_InvalidConfigError_585, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 585;

            goto try_except_handler_201;
        }
        tmp_dictset_value = mod_consts[236];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__67_InvalidConfigError_585, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 585;

            goto try_except_handler_201;
        }
        if (isFrameUnusable(cache_frame_589847e97a18897f85121dae593ee49e_62)) {
            Py_XDECREF(cache_frame_589847e97a18897f85121dae593ee49e_62);

#if _DEBUG_REFCOUNTS
            if (cache_frame_589847e97a18897f85121dae593ee49e_62 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_589847e97a18897f85121dae593ee49e_62 = MAKE_FUNCTION_FRAME(codeobj_589847e97a18897f85121dae593ee49e, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_589847e97a18897f85121dae593ee49e_62->m_type_description == NULL);
        frame_589847e97a18897f85121dae593ee49e_62 = cache_frame_589847e97a18897f85121dae593ee49e_62;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_589847e97a18897f85121dae593ee49e_62);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_589847e97a18897f85121dae593ee49e_62) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[237];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__67_InvalidConfigError_585, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 586;
            type_description_2 = "o";
            goto frame_exception_exit_62;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_589847e97a18897f85121dae593ee49e_62);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_61;

        frame_exception_exit_62:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_589847e97a18897f85121dae593ee49e_62);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_589847e97a18897f85121dae593ee49e_62, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_589847e97a18897f85121dae593ee49e_62->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_589847e97a18897f85121dae593ee49e_62, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_589847e97a18897f85121dae593ee49e_62,
            type_description_2,
            outline_66_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_589847e97a18897f85121dae593ee49e_62 == cache_frame_589847e97a18897f85121dae593ee49e_62) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_589847e97a18897f85121dae593ee49e_62);
            cache_frame_589847e97a18897f85121dae593ee49e_62 = NULL;
        }

        assertFrameObject(frame_589847e97a18897f85121dae593ee49e_62);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_61;

        frame_no_exception_61:;
        goto skip_nested_handling_61;
        nested_frame_exit_61:;

        goto try_except_handler_201;
        skip_nested_handling_61:;
        {
            nuitka_bool tmp_condition_result_402;
            PyObject *tmp_cmp_expr_left_67;
            PyObject *tmp_cmp_expr_right_67;
            CHECK_OBJECT(tmp_class_creation_67__bases);
            tmp_cmp_expr_left_67 = tmp_class_creation_67__bases;
            CHECK_OBJECT(tmp_class_creation_67__bases_orig);
            tmp_cmp_expr_right_67 = tmp_class_creation_67__bases_orig;
            tmp_condition_result_402 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_67, tmp_cmp_expr_right_67);
            if (tmp_condition_result_402 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 585;

                goto try_except_handler_201;
            }
            if (tmp_condition_result_402 == NUITKA_BOOL_TRUE) {
                goto branch_yes_268;
            } else {
                goto branch_no_268;
            }
            assert(tmp_condition_result_402 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_268:;
        CHECK_OBJECT(tmp_class_creation_67__bases_orig);
        tmp_dictset_value = tmp_class_creation_67__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__67_InvalidConfigError_585, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 585;

            goto try_except_handler_201;
        }
        branch_no_268:;
        {
            PyObject *tmp_assign_source_541;
            PyObject *tmp_called_value_134;
            PyObject *tmp_args_value_134;
            PyObject *tmp_tuple_element_266;
            PyObject *tmp_kwargs_value_134;
            CHECK_OBJECT(tmp_class_creation_67__metaclass);
            tmp_called_value_134 = tmp_class_creation_67__metaclass;
            tmp_tuple_element_266 = mod_consts[236];
            tmp_args_value_134 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_134, 0, tmp_tuple_element_266);
            CHECK_OBJECT(tmp_class_creation_67__bases);
            tmp_tuple_element_266 = tmp_class_creation_67__bases;
            PyTuple_SET_ITEM0(tmp_args_value_134, 1, tmp_tuple_element_266);
            tmp_tuple_element_266 = locals_botocore$exceptions$$$class__67_InvalidConfigError_585;
            PyTuple_SET_ITEM0(tmp_args_value_134, 2, tmp_tuple_element_266);
            CHECK_OBJECT(tmp_class_creation_67__class_decl_dict);
            tmp_kwargs_value_134 = tmp_class_creation_67__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 585;
            tmp_assign_source_541 = CALL_FUNCTION(tmp_called_value_134, tmp_args_value_134, tmp_kwargs_value_134);
            Py_DECREF(tmp_args_value_134);
            if (tmp_assign_source_541 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 585;

                goto try_except_handler_201;
            }
            assert(outline_66_var___class__ == NULL);
            outline_66_var___class__ = tmp_assign_source_541;
        }
        CHECK_OBJECT(outline_66_var___class__);
        tmp_assign_source_540 = outline_66_var___class__;
        Py_INCREF(tmp_assign_source_540);
        goto try_return_handler_201;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_201:;
        Py_DECREF(locals_botocore$exceptions$$$class__67_InvalidConfigError_585);
        locals_botocore$exceptions$$$class__67_InvalidConfigError_585 = NULL;
        goto try_return_handler_200;
        // Exception handler code:
        try_except_handler_201:;
        exception_keeper_type_199 = exception_type;
        exception_keeper_value_199 = exception_value;
        exception_keeper_tb_199 = exception_tb;
        exception_keeper_lineno_199 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__67_InvalidConfigError_585);
        locals_botocore$exceptions$$$class__67_InvalidConfigError_585 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_199;
        exception_value = exception_keeper_value_199;
        exception_tb = exception_keeper_tb_199;
        exception_lineno = exception_keeper_lineno_199;

        goto try_except_handler_200;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_200:;
        CHECK_OBJECT(outline_66_var___class__);
        Py_DECREF(outline_66_var___class__);
        outline_66_var___class__ = NULL;
        goto outline_result_67;
        // Exception handler code:
        try_except_handler_200:;
        exception_keeper_type_200 = exception_type;
        exception_keeper_value_200 = exception_value;
        exception_keeper_tb_200 = exception_tb;
        exception_keeper_lineno_200 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_200;
        exception_value = exception_keeper_value_200;
        exception_tb = exception_keeper_tb_200;
        exception_lineno = exception_keeper_lineno_200;

        goto outline_exception_67;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_67:;
        exception_lineno = 585;
        goto try_except_handler_199;
        outline_result_67:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[236], tmp_assign_source_540);
    }
    goto try_end_67;
    // Exception handler code:
    try_except_handler_199:;
    exception_keeper_type_201 = exception_type;
    exception_keeper_value_201 = exception_value;
    exception_keeper_tb_201 = exception_tb;
    exception_keeper_lineno_201 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_67__bases_orig);
    tmp_class_creation_67__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_67__bases);
    tmp_class_creation_67__bases = NULL;
    Py_XDECREF(tmp_class_creation_67__class_decl_dict);
    tmp_class_creation_67__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_67__metaclass);
    tmp_class_creation_67__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_67__prepared);
    tmp_class_creation_67__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_201;
    exception_value = exception_keeper_value_201;
    exception_tb = exception_keeper_tb_201;
    exception_lineno = exception_keeper_lineno_201;

    goto frame_exception_exit_1;
    // End of try:
    try_end_67:;
    CHECK_OBJECT(tmp_class_creation_67__bases_orig);
    Py_DECREF(tmp_class_creation_67__bases_orig);
    tmp_class_creation_67__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_67__bases);
    Py_DECREF(tmp_class_creation_67__bases);
    tmp_class_creation_67__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_67__class_decl_dict);
    Py_DECREF(tmp_class_creation_67__class_decl_dict);
    tmp_class_creation_67__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_67__metaclass);
    Py_DECREF(tmp_class_creation_67__metaclass);
    tmp_class_creation_67__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_67__prepared);
    Py_DECREF(tmp_class_creation_67__prepared);
    tmp_class_creation_67__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_542;
        PyObject *tmp_tuple_element_267;
        tmp_tuple_element_267 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_267 == NULL)) {
            tmp_tuple_element_267 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_267 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 589;

            goto try_except_handler_202;
        }
        tmp_assign_source_542 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_542, 0, tmp_tuple_element_267);
        assert(tmp_class_creation_68__bases_orig == NULL);
        tmp_class_creation_68__bases_orig = tmp_assign_source_542;
    }
    {
        PyObject *tmp_assign_source_543;
        PyObject *tmp_dircall_arg1_68;
        CHECK_OBJECT(tmp_class_creation_68__bases_orig);
        tmp_dircall_arg1_68 = tmp_class_creation_68__bases_orig;
        Py_INCREF(tmp_dircall_arg1_68);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_68};
            tmp_assign_source_543 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_543 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 589;

            goto try_except_handler_202;
        }
        assert(tmp_class_creation_68__bases == NULL);
        tmp_class_creation_68__bases = tmp_assign_source_543;
    }
    {
        PyObject *tmp_assign_source_544;
        tmp_assign_source_544 = PyDict_New();
        assert(tmp_class_creation_68__class_decl_dict == NULL);
        tmp_class_creation_68__class_decl_dict = tmp_assign_source_544;
    }
    {
        PyObject *tmp_assign_source_545;
        PyObject *tmp_metaclass_value_68;
        bool tmp_condition_result_403;
        PyObject *tmp_key_value_202;
        PyObject *tmp_dict_arg_value_202;
        PyObject *tmp_dict_arg_value_203;
        PyObject *tmp_key_value_203;
        nuitka_bool tmp_condition_result_404;
        int tmp_truth_name_68;
        PyObject *tmp_type_arg_135;
        PyObject *tmp_expression_value_346;
        PyObject *tmp_subscript_value_68;
        PyObject *tmp_bases_value_68;
        tmp_key_value_202 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_68__class_decl_dict);
        tmp_dict_arg_value_202 = tmp_class_creation_68__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_202, tmp_key_value_202);
        assert(!(tmp_res == -1));
        tmp_condition_result_403 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_403 != false) {
            goto condexpr_true_135;
        } else {
            goto condexpr_false_135;
        }
        condexpr_true_135:;
        CHECK_OBJECT(tmp_class_creation_68__class_decl_dict);
        tmp_dict_arg_value_203 = tmp_class_creation_68__class_decl_dict;
        tmp_key_value_203 = mod_consts[43];
        tmp_metaclass_value_68 = DICT_GET_ITEM0(tmp_dict_arg_value_203, tmp_key_value_203);
        if (tmp_metaclass_value_68 == NULL) {
            tmp_metaclass_value_68 = Py_None;
        }
        assert(!(tmp_metaclass_value_68 == NULL));
        Py_INCREF(tmp_metaclass_value_68);
        goto condexpr_end_135;
        condexpr_false_135:;
        CHECK_OBJECT(tmp_class_creation_68__bases);
        tmp_truth_name_68 = CHECK_IF_TRUE(tmp_class_creation_68__bases);
        if (tmp_truth_name_68 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 589;

            goto try_except_handler_202;
        }
        tmp_condition_result_404 = tmp_truth_name_68 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_404 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_136;
        } else {
            goto condexpr_false_136;
        }
        condexpr_true_136:;
        CHECK_OBJECT(tmp_class_creation_68__bases);
        tmp_expression_value_346 = tmp_class_creation_68__bases;
        tmp_subscript_value_68 = mod_consts[36];
        tmp_type_arg_135 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_346, tmp_subscript_value_68, 0);
        if (tmp_type_arg_135 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 589;

            goto try_except_handler_202;
        }
        tmp_metaclass_value_68 = BUILTIN_TYPE1(tmp_type_arg_135);
        Py_DECREF(tmp_type_arg_135);
        if (tmp_metaclass_value_68 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 589;

            goto try_except_handler_202;
        }
        goto condexpr_end_136;
        condexpr_false_136:;
        tmp_metaclass_value_68 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_68);
        condexpr_end_136:;
        condexpr_end_135:;
        CHECK_OBJECT(tmp_class_creation_68__bases);
        tmp_bases_value_68 = tmp_class_creation_68__bases;
        tmp_assign_source_545 = SELECT_METACLASS(tmp_metaclass_value_68, tmp_bases_value_68);
        Py_DECREF(tmp_metaclass_value_68);
        if (tmp_assign_source_545 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 589;

            goto try_except_handler_202;
        }
        assert(tmp_class_creation_68__metaclass == NULL);
        tmp_class_creation_68__metaclass = tmp_assign_source_545;
    }
    {
        bool tmp_condition_result_405;
        PyObject *tmp_key_value_204;
        PyObject *tmp_dict_arg_value_204;
        tmp_key_value_204 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_68__class_decl_dict);
        tmp_dict_arg_value_204 = tmp_class_creation_68__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_204, tmp_key_value_204);
        assert(!(tmp_res == -1));
        tmp_condition_result_405 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_405 != false) {
            goto branch_yes_269;
        } else {
            goto branch_no_269;
        }
    }
    branch_yes_269:;
    CHECK_OBJECT(tmp_class_creation_68__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_68__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 589;

        goto try_except_handler_202;
    }
    branch_no_269:;
    {
        nuitka_bool tmp_condition_result_406;
        PyObject *tmp_expression_value_347;
        CHECK_OBJECT(tmp_class_creation_68__metaclass);
        tmp_expression_value_347 = tmp_class_creation_68__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_347, mod_consts[44]);
        tmp_condition_result_406 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_406 == NUITKA_BOOL_TRUE) {
            goto branch_yes_270;
        } else {
            goto branch_no_270;
        }
    }
    branch_yes_270:;
    {
        PyObject *tmp_assign_source_546;
        PyObject *tmp_called_value_135;
        PyObject *tmp_expression_value_348;
        PyObject *tmp_args_value_135;
        PyObject *tmp_tuple_element_268;
        PyObject *tmp_kwargs_value_135;
        CHECK_OBJECT(tmp_class_creation_68__metaclass);
        tmp_expression_value_348 = tmp_class_creation_68__metaclass;
        tmp_called_value_135 = LOOKUP_ATTRIBUTE(tmp_expression_value_348, mod_consts[44]);
        if (tmp_called_value_135 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 589;

            goto try_except_handler_202;
        }
        tmp_tuple_element_268 = mod_consts[238];
        tmp_args_value_135 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_135, 0, tmp_tuple_element_268);
        CHECK_OBJECT(tmp_class_creation_68__bases);
        tmp_tuple_element_268 = tmp_class_creation_68__bases;
        PyTuple_SET_ITEM0(tmp_args_value_135, 1, tmp_tuple_element_268);
        CHECK_OBJECT(tmp_class_creation_68__class_decl_dict);
        tmp_kwargs_value_135 = tmp_class_creation_68__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 589;
        tmp_assign_source_546 = CALL_FUNCTION(tmp_called_value_135, tmp_args_value_135, tmp_kwargs_value_135);
        Py_DECREF(tmp_called_value_135);
        Py_DECREF(tmp_args_value_135);
        if (tmp_assign_source_546 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 589;

            goto try_except_handler_202;
        }
        assert(tmp_class_creation_68__prepared == NULL);
        tmp_class_creation_68__prepared = tmp_assign_source_546;
    }
    {
        bool tmp_condition_result_407;
        PyObject *tmp_operand_value_68;
        PyObject *tmp_expression_value_349;
        CHECK_OBJECT(tmp_class_creation_68__prepared);
        tmp_expression_value_349 = tmp_class_creation_68__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_349, mod_consts[46]);
        tmp_operand_value_68 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_68);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 589;

            goto try_except_handler_202;
        }
        tmp_condition_result_407 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_407 != false) {
            goto branch_yes_271;
        } else {
            goto branch_no_271;
        }
    }
    branch_yes_271:;
    {
        PyObject *tmp_raise_type_68;
        PyObject *tmp_raise_value_68;
        PyObject *tmp_left_value_68;
        PyObject *tmp_right_value_68;
        PyObject *tmp_tuple_element_269;
        PyObject *tmp_getattr_target_68;
        PyObject *tmp_getattr_attr_68;
        PyObject *tmp_getattr_default_68;
        tmp_raise_type_68 = PyExc_TypeError;
        tmp_left_value_68 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_68__metaclass);
        tmp_getattr_target_68 = tmp_class_creation_68__metaclass;
        tmp_getattr_attr_68 = mod_consts[48];
        tmp_getattr_default_68 = mod_consts[49];
        tmp_tuple_element_269 = BUILTIN_GETATTR(tmp_getattr_target_68, tmp_getattr_attr_68, tmp_getattr_default_68);
        if (tmp_tuple_element_269 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 589;

            goto try_except_handler_202;
        }
        tmp_right_value_68 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_350;
            PyObject *tmp_type_arg_136;
            PyTuple_SET_ITEM(tmp_right_value_68, 0, tmp_tuple_element_269);
            CHECK_OBJECT(tmp_class_creation_68__prepared);
            tmp_type_arg_136 = tmp_class_creation_68__prepared;
            tmp_expression_value_350 = BUILTIN_TYPE1(tmp_type_arg_136);
            assert(!(tmp_expression_value_350 == NULL));
            tmp_tuple_element_269 = LOOKUP_ATTRIBUTE(tmp_expression_value_350, mod_consts[48]);
            Py_DECREF(tmp_expression_value_350);
            if (tmp_tuple_element_269 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 589;

                goto tuple_build_exception_72;
            }
            PyTuple_SET_ITEM(tmp_right_value_68, 1, tmp_tuple_element_269);
        }
        goto tuple_build_noexception_72;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_72:;
        Py_DECREF(tmp_right_value_68);
        goto try_except_handler_202;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_72:;
        tmp_raise_value_68 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_68, tmp_right_value_68);
        Py_DECREF(tmp_right_value_68);
        if (tmp_raise_value_68 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 589;

            goto try_except_handler_202;
        }
        exception_type = tmp_raise_type_68;
        Py_INCREF(tmp_raise_type_68);
        exception_value = tmp_raise_value_68;
        exception_lineno = 589;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_202;
    }
    branch_no_271:;
    goto branch_end_270;
    branch_no_270:;
    {
        PyObject *tmp_assign_source_547;
        tmp_assign_source_547 = PyDict_New();
        assert(tmp_class_creation_68__prepared == NULL);
        tmp_class_creation_68__prepared = tmp_assign_source_547;
    }
    branch_end_270:;
    {
        PyObject *tmp_assign_source_548;
        {
            PyObject *tmp_set_locals_68;
            CHECK_OBJECT(tmp_class_creation_68__prepared);
            tmp_set_locals_68 = tmp_class_creation_68__prepared;
            locals_botocore$exceptions$$$class__68_InfiniteLoopConfigError_589 = tmp_set_locals_68;
            Py_INCREF(tmp_set_locals_68);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__68_InfiniteLoopConfigError_589, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 589;

            goto try_except_handler_204;
        }
        tmp_dictset_value = mod_consts[238];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__68_InfiniteLoopConfigError_589, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 589;

            goto try_except_handler_204;
        }
        if (isFrameUnusable(cache_frame_ef5deee12db344ed6cf0495b2d8b25c1_63)) {
            Py_XDECREF(cache_frame_ef5deee12db344ed6cf0495b2d8b25c1_63);

#if _DEBUG_REFCOUNTS
            if (cache_frame_ef5deee12db344ed6cf0495b2d8b25c1_63 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_ef5deee12db344ed6cf0495b2d8b25c1_63 = MAKE_FUNCTION_FRAME(codeobj_ef5deee12db344ed6cf0495b2d8b25c1, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_ef5deee12db344ed6cf0495b2d8b25c1_63->m_type_description == NULL);
        frame_ef5deee12db344ed6cf0495b2d8b25c1_63 = cache_frame_ef5deee12db344ed6cf0495b2d8b25c1_63;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_ef5deee12db344ed6cf0495b2d8b25c1_63);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_ef5deee12db344ed6cf0495b2d8b25c1_63) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[239];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__68_InfiniteLoopConfigError_589, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 590;
            type_description_2 = "o";
            goto frame_exception_exit_63;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_ef5deee12db344ed6cf0495b2d8b25c1_63);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_62;

        frame_exception_exit_63:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_ef5deee12db344ed6cf0495b2d8b25c1_63);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_ef5deee12db344ed6cf0495b2d8b25c1_63, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_ef5deee12db344ed6cf0495b2d8b25c1_63->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_ef5deee12db344ed6cf0495b2d8b25c1_63, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_ef5deee12db344ed6cf0495b2d8b25c1_63,
            type_description_2,
            outline_67_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_ef5deee12db344ed6cf0495b2d8b25c1_63 == cache_frame_ef5deee12db344ed6cf0495b2d8b25c1_63) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_ef5deee12db344ed6cf0495b2d8b25c1_63);
            cache_frame_ef5deee12db344ed6cf0495b2d8b25c1_63 = NULL;
        }

        assertFrameObject(frame_ef5deee12db344ed6cf0495b2d8b25c1_63);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_62;

        frame_no_exception_62:;
        goto skip_nested_handling_62;
        nested_frame_exit_62:;

        goto try_except_handler_204;
        skip_nested_handling_62:;
        {
            nuitka_bool tmp_condition_result_408;
            PyObject *tmp_cmp_expr_left_68;
            PyObject *tmp_cmp_expr_right_68;
            CHECK_OBJECT(tmp_class_creation_68__bases);
            tmp_cmp_expr_left_68 = tmp_class_creation_68__bases;
            CHECK_OBJECT(tmp_class_creation_68__bases_orig);
            tmp_cmp_expr_right_68 = tmp_class_creation_68__bases_orig;
            tmp_condition_result_408 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_68, tmp_cmp_expr_right_68);
            if (tmp_condition_result_408 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 589;

                goto try_except_handler_204;
            }
            if (tmp_condition_result_408 == NUITKA_BOOL_TRUE) {
                goto branch_yes_272;
            } else {
                goto branch_no_272;
            }
            assert(tmp_condition_result_408 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_272:;
        CHECK_OBJECT(tmp_class_creation_68__bases_orig);
        tmp_dictset_value = tmp_class_creation_68__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__68_InfiniteLoopConfigError_589, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 589;

            goto try_except_handler_204;
        }
        branch_no_272:;
        {
            PyObject *tmp_assign_source_549;
            PyObject *tmp_called_value_136;
            PyObject *tmp_args_value_136;
            PyObject *tmp_tuple_element_270;
            PyObject *tmp_kwargs_value_136;
            CHECK_OBJECT(tmp_class_creation_68__metaclass);
            tmp_called_value_136 = tmp_class_creation_68__metaclass;
            tmp_tuple_element_270 = mod_consts[238];
            tmp_args_value_136 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_136, 0, tmp_tuple_element_270);
            CHECK_OBJECT(tmp_class_creation_68__bases);
            tmp_tuple_element_270 = tmp_class_creation_68__bases;
            PyTuple_SET_ITEM0(tmp_args_value_136, 1, tmp_tuple_element_270);
            tmp_tuple_element_270 = locals_botocore$exceptions$$$class__68_InfiniteLoopConfigError_589;
            PyTuple_SET_ITEM0(tmp_args_value_136, 2, tmp_tuple_element_270);
            CHECK_OBJECT(tmp_class_creation_68__class_decl_dict);
            tmp_kwargs_value_136 = tmp_class_creation_68__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 589;
            tmp_assign_source_549 = CALL_FUNCTION(tmp_called_value_136, tmp_args_value_136, tmp_kwargs_value_136);
            Py_DECREF(tmp_args_value_136);
            if (tmp_assign_source_549 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 589;

                goto try_except_handler_204;
            }
            assert(outline_67_var___class__ == NULL);
            outline_67_var___class__ = tmp_assign_source_549;
        }
        CHECK_OBJECT(outline_67_var___class__);
        tmp_assign_source_548 = outline_67_var___class__;
        Py_INCREF(tmp_assign_source_548);
        goto try_return_handler_204;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_204:;
        Py_DECREF(locals_botocore$exceptions$$$class__68_InfiniteLoopConfigError_589);
        locals_botocore$exceptions$$$class__68_InfiniteLoopConfigError_589 = NULL;
        goto try_return_handler_203;
        // Exception handler code:
        try_except_handler_204:;
        exception_keeper_type_202 = exception_type;
        exception_keeper_value_202 = exception_value;
        exception_keeper_tb_202 = exception_tb;
        exception_keeper_lineno_202 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__68_InfiniteLoopConfigError_589);
        locals_botocore$exceptions$$$class__68_InfiniteLoopConfigError_589 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_202;
        exception_value = exception_keeper_value_202;
        exception_tb = exception_keeper_tb_202;
        exception_lineno = exception_keeper_lineno_202;

        goto try_except_handler_203;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_203:;
        CHECK_OBJECT(outline_67_var___class__);
        Py_DECREF(outline_67_var___class__);
        outline_67_var___class__ = NULL;
        goto outline_result_68;
        // Exception handler code:
        try_except_handler_203:;
        exception_keeper_type_203 = exception_type;
        exception_keeper_value_203 = exception_value;
        exception_keeper_tb_203 = exception_tb;
        exception_keeper_lineno_203 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_203;
        exception_value = exception_keeper_value_203;
        exception_tb = exception_keeper_tb_203;
        exception_lineno = exception_keeper_lineno_203;

        goto outline_exception_68;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_68:;
        exception_lineno = 589;
        goto try_except_handler_202;
        outline_result_68:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[238], tmp_assign_source_548);
    }
    goto try_end_68;
    // Exception handler code:
    try_except_handler_202:;
    exception_keeper_type_204 = exception_type;
    exception_keeper_value_204 = exception_value;
    exception_keeper_tb_204 = exception_tb;
    exception_keeper_lineno_204 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_68__bases_orig);
    tmp_class_creation_68__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_68__bases);
    tmp_class_creation_68__bases = NULL;
    Py_XDECREF(tmp_class_creation_68__class_decl_dict);
    tmp_class_creation_68__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_68__metaclass);
    tmp_class_creation_68__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_68__prepared);
    tmp_class_creation_68__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_204;
    exception_value = exception_keeper_value_204;
    exception_tb = exception_keeper_tb_204;
    exception_lineno = exception_keeper_lineno_204;

    goto frame_exception_exit_1;
    // End of try:
    try_end_68:;
    CHECK_OBJECT(tmp_class_creation_68__bases_orig);
    Py_DECREF(tmp_class_creation_68__bases_orig);
    tmp_class_creation_68__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_68__bases);
    Py_DECREF(tmp_class_creation_68__bases);
    tmp_class_creation_68__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_68__class_decl_dict);
    Py_DECREF(tmp_class_creation_68__class_decl_dict);
    tmp_class_creation_68__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_68__metaclass);
    Py_DECREF(tmp_class_creation_68__metaclass);
    tmp_class_creation_68__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_68__prepared);
    Py_DECREF(tmp_class_creation_68__prepared);
    tmp_class_creation_68__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_550;
        PyObject *tmp_tuple_element_271;
        tmp_tuple_element_271 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_271 == NULL)) {
            tmp_tuple_element_271 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_271 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 597;

            goto try_except_handler_205;
        }
        tmp_assign_source_550 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_550, 0, tmp_tuple_element_271);
        assert(tmp_class_creation_69__bases_orig == NULL);
        tmp_class_creation_69__bases_orig = tmp_assign_source_550;
    }
    {
        PyObject *tmp_assign_source_551;
        PyObject *tmp_dircall_arg1_69;
        CHECK_OBJECT(tmp_class_creation_69__bases_orig);
        tmp_dircall_arg1_69 = tmp_class_creation_69__bases_orig;
        Py_INCREF(tmp_dircall_arg1_69);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_69};
            tmp_assign_source_551 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_551 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 597;

            goto try_except_handler_205;
        }
        assert(tmp_class_creation_69__bases == NULL);
        tmp_class_creation_69__bases = tmp_assign_source_551;
    }
    {
        PyObject *tmp_assign_source_552;
        tmp_assign_source_552 = PyDict_New();
        assert(tmp_class_creation_69__class_decl_dict == NULL);
        tmp_class_creation_69__class_decl_dict = tmp_assign_source_552;
    }
    {
        PyObject *tmp_assign_source_553;
        PyObject *tmp_metaclass_value_69;
        bool tmp_condition_result_409;
        PyObject *tmp_key_value_205;
        PyObject *tmp_dict_arg_value_205;
        PyObject *tmp_dict_arg_value_206;
        PyObject *tmp_key_value_206;
        nuitka_bool tmp_condition_result_410;
        int tmp_truth_name_69;
        PyObject *tmp_type_arg_137;
        PyObject *tmp_expression_value_351;
        PyObject *tmp_subscript_value_69;
        PyObject *tmp_bases_value_69;
        tmp_key_value_205 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_69__class_decl_dict);
        tmp_dict_arg_value_205 = tmp_class_creation_69__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_205, tmp_key_value_205);
        assert(!(tmp_res == -1));
        tmp_condition_result_409 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_409 != false) {
            goto condexpr_true_137;
        } else {
            goto condexpr_false_137;
        }
        condexpr_true_137:;
        CHECK_OBJECT(tmp_class_creation_69__class_decl_dict);
        tmp_dict_arg_value_206 = tmp_class_creation_69__class_decl_dict;
        tmp_key_value_206 = mod_consts[43];
        tmp_metaclass_value_69 = DICT_GET_ITEM0(tmp_dict_arg_value_206, tmp_key_value_206);
        if (tmp_metaclass_value_69 == NULL) {
            tmp_metaclass_value_69 = Py_None;
        }
        assert(!(tmp_metaclass_value_69 == NULL));
        Py_INCREF(tmp_metaclass_value_69);
        goto condexpr_end_137;
        condexpr_false_137:;
        CHECK_OBJECT(tmp_class_creation_69__bases);
        tmp_truth_name_69 = CHECK_IF_TRUE(tmp_class_creation_69__bases);
        if (tmp_truth_name_69 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 597;

            goto try_except_handler_205;
        }
        tmp_condition_result_410 = tmp_truth_name_69 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_410 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_138;
        } else {
            goto condexpr_false_138;
        }
        condexpr_true_138:;
        CHECK_OBJECT(tmp_class_creation_69__bases);
        tmp_expression_value_351 = tmp_class_creation_69__bases;
        tmp_subscript_value_69 = mod_consts[36];
        tmp_type_arg_137 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_351, tmp_subscript_value_69, 0);
        if (tmp_type_arg_137 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 597;

            goto try_except_handler_205;
        }
        tmp_metaclass_value_69 = BUILTIN_TYPE1(tmp_type_arg_137);
        Py_DECREF(tmp_type_arg_137);
        if (tmp_metaclass_value_69 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 597;

            goto try_except_handler_205;
        }
        goto condexpr_end_138;
        condexpr_false_138:;
        tmp_metaclass_value_69 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_69);
        condexpr_end_138:;
        condexpr_end_137:;
        CHECK_OBJECT(tmp_class_creation_69__bases);
        tmp_bases_value_69 = tmp_class_creation_69__bases;
        tmp_assign_source_553 = SELECT_METACLASS(tmp_metaclass_value_69, tmp_bases_value_69);
        Py_DECREF(tmp_metaclass_value_69);
        if (tmp_assign_source_553 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 597;

            goto try_except_handler_205;
        }
        assert(tmp_class_creation_69__metaclass == NULL);
        tmp_class_creation_69__metaclass = tmp_assign_source_553;
    }
    {
        bool tmp_condition_result_411;
        PyObject *tmp_key_value_207;
        PyObject *tmp_dict_arg_value_207;
        tmp_key_value_207 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_69__class_decl_dict);
        tmp_dict_arg_value_207 = tmp_class_creation_69__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_207, tmp_key_value_207);
        assert(!(tmp_res == -1));
        tmp_condition_result_411 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_411 != false) {
            goto branch_yes_273;
        } else {
            goto branch_no_273;
        }
    }
    branch_yes_273:;
    CHECK_OBJECT(tmp_class_creation_69__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_69__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 597;

        goto try_except_handler_205;
    }
    branch_no_273:;
    {
        nuitka_bool tmp_condition_result_412;
        PyObject *tmp_expression_value_352;
        CHECK_OBJECT(tmp_class_creation_69__metaclass);
        tmp_expression_value_352 = tmp_class_creation_69__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_352, mod_consts[44]);
        tmp_condition_result_412 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_412 == NUITKA_BOOL_TRUE) {
            goto branch_yes_274;
        } else {
            goto branch_no_274;
        }
    }
    branch_yes_274:;
    {
        PyObject *tmp_assign_source_554;
        PyObject *tmp_called_value_137;
        PyObject *tmp_expression_value_353;
        PyObject *tmp_args_value_137;
        PyObject *tmp_tuple_element_272;
        PyObject *tmp_kwargs_value_137;
        CHECK_OBJECT(tmp_class_creation_69__metaclass);
        tmp_expression_value_353 = tmp_class_creation_69__metaclass;
        tmp_called_value_137 = LOOKUP_ATTRIBUTE(tmp_expression_value_353, mod_consts[44]);
        if (tmp_called_value_137 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 597;

            goto try_except_handler_205;
        }
        tmp_tuple_element_272 = mod_consts[240];
        tmp_args_value_137 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_137, 0, tmp_tuple_element_272);
        CHECK_OBJECT(tmp_class_creation_69__bases);
        tmp_tuple_element_272 = tmp_class_creation_69__bases;
        PyTuple_SET_ITEM0(tmp_args_value_137, 1, tmp_tuple_element_272);
        CHECK_OBJECT(tmp_class_creation_69__class_decl_dict);
        tmp_kwargs_value_137 = tmp_class_creation_69__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 597;
        tmp_assign_source_554 = CALL_FUNCTION(tmp_called_value_137, tmp_args_value_137, tmp_kwargs_value_137);
        Py_DECREF(tmp_called_value_137);
        Py_DECREF(tmp_args_value_137);
        if (tmp_assign_source_554 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 597;

            goto try_except_handler_205;
        }
        assert(tmp_class_creation_69__prepared == NULL);
        tmp_class_creation_69__prepared = tmp_assign_source_554;
    }
    {
        bool tmp_condition_result_413;
        PyObject *tmp_operand_value_69;
        PyObject *tmp_expression_value_354;
        CHECK_OBJECT(tmp_class_creation_69__prepared);
        tmp_expression_value_354 = tmp_class_creation_69__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_354, mod_consts[46]);
        tmp_operand_value_69 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_69);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 597;

            goto try_except_handler_205;
        }
        tmp_condition_result_413 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_413 != false) {
            goto branch_yes_275;
        } else {
            goto branch_no_275;
        }
    }
    branch_yes_275:;
    {
        PyObject *tmp_raise_type_69;
        PyObject *tmp_raise_value_69;
        PyObject *tmp_left_value_69;
        PyObject *tmp_right_value_69;
        PyObject *tmp_tuple_element_273;
        PyObject *tmp_getattr_target_69;
        PyObject *tmp_getattr_attr_69;
        PyObject *tmp_getattr_default_69;
        tmp_raise_type_69 = PyExc_TypeError;
        tmp_left_value_69 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_69__metaclass);
        tmp_getattr_target_69 = tmp_class_creation_69__metaclass;
        tmp_getattr_attr_69 = mod_consts[48];
        tmp_getattr_default_69 = mod_consts[49];
        tmp_tuple_element_273 = BUILTIN_GETATTR(tmp_getattr_target_69, tmp_getattr_attr_69, tmp_getattr_default_69);
        if (tmp_tuple_element_273 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 597;

            goto try_except_handler_205;
        }
        tmp_right_value_69 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_355;
            PyObject *tmp_type_arg_138;
            PyTuple_SET_ITEM(tmp_right_value_69, 0, tmp_tuple_element_273);
            CHECK_OBJECT(tmp_class_creation_69__prepared);
            tmp_type_arg_138 = tmp_class_creation_69__prepared;
            tmp_expression_value_355 = BUILTIN_TYPE1(tmp_type_arg_138);
            assert(!(tmp_expression_value_355 == NULL));
            tmp_tuple_element_273 = LOOKUP_ATTRIBUTE(tmp_expression_value_355, mod_consts[48]);
            Py_DECREF(tmp_expression_value_355);
            if (tmp_tuple_element_273 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 597;

                goto tuple_build_exception_73;
            }
            PyTuple_SET_ITEM(tmp_right_value_69, 1, tmp_tuple_element_273);
        }
        goto tuple_build_noexception_73;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_73:;
        Py_DECREF(tmp_right_value_69);
        goto try_except_handler_205;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_73:;
        tmp_raise_value_69 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_69, tmp_right_value_69);
        Py_DECREF(tmp_right_value_69);
        if (tmp_raise_value_69 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 597;

            goto try_except_handler_205;
        }
        exception_type = tmp_raise_type_69;
        Py_INCREF(tmp_raise_type_69);
        exception_value = tmp_raise_value_69;
        exception_lineno = 597;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_205;
    }
    branch_no_275:;
    goto branch_end_274;
    branch_no_274:;
    {
        PyObject *tmp_assign_source_555;
        tmp_assign_source_555 = PyDict_New();
        assert(tmp_class_creation_69__prepared == NULL);
        tmp_class_creation_69__prepared = tmp_assign_source_555;
    }
    branch_end_274:;
    {
        PyObject *tmp_assign_source_556;
        {
            PyObject *tmp_set_locals_69;
            CHECK_OBJECT(tmp_class_creation_69__prepared);
            tmp_set_locals_69 = tmp_class_creation_69__prepared;
            locals_botocore$exceptions$$$class__69_RefreshWithMFAUnsupportedError_597 = tmp_set_locals_69;
            Py_INCREF(tmp_set_locals_69);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__69_RefreshWithMFAUnsupportedError_597, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 597;

            goto try_except_handler_207;
        }
        tmp_dictset_value = mod_consts[240];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__69_RefreshWithMFAUnsupportedError_597, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 597;

            goto try_except_handler_207;
        }
        if (isFrameUnusable(cache_frame_79bf676b2417e28b36114a1b6e22056c_64)) {
            Py_XDECREF(cache_frame_79bf676b2417e28b36114a1b6e22056c_64);

#if _DEBUG_REFCOUNTS
            if (cache_frame_79bf676b2417e28b36114a1b6e22056c_64 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_79bf676b2417e28b36114a1b6e22056c_64 = MAKE_FUNCTION_FRAME(codeobj_79bf676b2417e28b36114a1b6e22056c, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_79bf676b2417e28b36114a1b6e22056c_64->m_type_description == NULL);
        frame_79bf676b2417e28b36114a1b6e22056c_64 = cache_frame_79bf676b2417e28b36114a1b6e22056c_64;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_79bf676b2417e28b36114a1b6e22056c_64);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_79bf676b2417e28b36114a1b6e22056c_64) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[241];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__69_RefreshWithMFAUnsupportedError_597, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 598;
            type_description_2 = "o";
            goto frame_exception_exit_64;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_79bf676b2417e28b36114a1b6e22056c_64);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_63;

        frame_exception_exit_64:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_79bf676b2417e28b36114a1b6e22056c_64);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_79bf676b2417e28b36114a1b6e22056c_64, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_79bf676b2417e28b36114a1b6e22056c_64->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_79bf676b2417e28b36114a1b6e22056c_64, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_79bf676b2417e28b36114a1b6e22056c_64,
            type_description_2,
            outline_68_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_79bf676b2417e28b36114a1b6e22056c_64 == cache_frame_79bf676b2417e28b36114a1b6e22056c_64) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_79bf676b2417e28b36114a1b6e22056c_64);
            cache_frame_79bf676b2417e28b36114a1b6e22056c_64 = NULL;
        }

        assertFrameObject(frame_79bf676b2417e28b36114a1b6e22056c_64);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_63;

        frame_no_exception_63:;
        goto skip_nested_handling_63;
        nested_frame_exit_63:;

        goto try_except_handler_207;
        skip_nested_handling_63:;
        {
            nuitka_bool tmp_condition_result_414;
            PyObject *tmp_cmp_expr_left_69;
            PyObject *tmp_cmp_expr_right_69;
            CHECK_OBJECT(tmp_class_creation_69__bases);
            tmp_cmp_expr_left_69 = tmp_class_creation_69__bases;
            CHECK_OBJECT(tmp_class_creation_69__bases_orig);
            tmp_cmp_expr_right_69 = tmp_class_creation_69__bases_orig;
            tmp_condition_result_414 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_69, tmp_cmp_expr_right_69);
            if (tmp_condition_result_414 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 597;

                goto try_except_handler_207;
            }
            if (tmp_condition_result_414 == NUITKA_BOOL_TRUE) {
                goto branch_yes_276;
            } else {
                goto branch_no_276;
            }
            assert(tmp_condition_result_414 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_276:;
        CHECK_OBJECT(tmp_class_creation_69__bases_orig);
        tmp_dictset_value = tmp_class_creation_69__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__69_RefreshWithMFAUnsupportedError_597, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 597;

            goto try_except_handler_207;
        }
        branch_no_276:;
        {
            PyObject *tmp_assign_source_557;
            PyObject *tmp_called_value_138;
            PyObject *tmp_args_value_138;
            PyObject *tmp_tuple_element_274;
            PyObject *tmp_kwargs_value_138;
            CHECK_OBJECT(tmp_class_creation_69__metaclass);
            tmp_called_value_138 = tmp_class_creation_69__metaclass;
            tmp_tuple_element_274 = mod_consts[240];
            tmp_args_value_138 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_138, 0, tmp_tuple_element_274);
            CHECK_OBJECT(tmp_class_creation_69__bases);
            tmp_tuple_element_274 = tmp_class_creation_69__bases;
            PyTuple_SET_ITEM0(tmp_args_value_138, 1, tmp_tuple_element_274);
            tmp_tuple_element_274 = locals_botocore$exceptions$$$class__69_RefreshWithMFAUnsupportedError_597;
            PyTuple_SET_ITEM0(tmp_args_value_138, 2, tmp_tuple_element_274);
            CHECK_OBJECT(tmp_class_creation_69__class_decl_dict);
            tmp_kwargs_value_138 = tmp_class_creation_69__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 597;
            tmp_assign_source_557 = CALL_FUNCTION(tmp_called_value_138, tmp_args_value_138, tmp_kwargs_value_138);
            Py_DECREF(tmp_args_value_138);
            if (tmp_assign_source_557 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 597;

                goto try_except_handler_207;
            }
            assert(outline_68_var___class__ == NULL);
            outline_68_var___class__ = tmp_assign_source_557;
        }
        CHECK_OBJECT(outline_68_var___class__);
        tmp_assign_source_556 = outline_68_var___class__;
        Py_INCREF(tmp_assign_source_556);
        goto try_return_handler_207;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_207:;
        Py_DECREF(locals_botocore$exceptions$$$class__69_RefreshWithMFAUnsupportedError_597);
        locals_botocore$exceptions$$$class__69_RefreshWithMFAUnsupportedError_597 = NULL;
        goto try_return_handler_206;
        // Exception handler code:
        try_except_handler_207:;
        exception_keeper_type_205 = exception_type;
        exception_keeper_value_205 = exception_value;
        exception_keeper_tb_205 = exception_tb;
        exception_keeper_lineno_205 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__69_RefreshWithMFAUnsupportedError_597);
        locals_botocore$exceptions$$$class__69_RefreshWithMFAUnsupportedError_597 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_205;
        exception_value = exception_keeper_value_205;
        exception_tb = exception_keeper_tb_205;
        exception_lineno = exception_keeper_lineno_205;

        goto try_except_handler_206;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_206:;
        CHECK_OBJECT(outline_68_var___class__);
        Py_DECREF(outline_68_var___class__);
        outline_68_var___class__ = NULL;
        goto outline_result_69;
        // Exception handler code:
        try_except_handler_206:;
        exception_keeper_type_206 = exception_type;
        exception_keeper_value_206 = exception_value;
        exception_keeper_tb_206 = exception_tb;
        exception_keeper_lineno_206 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_206;
        exception_value = exception_keeper_value_206;
        exception_tb = exception_keeper_tb_206;
        exception_lineno = exception_keeper_lineno_206;

        goto outline_exception_69;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_69:;
        exception_lineno = 597;
        goto try_except_handler_205;
        outline_result_69:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[240], tmp_assign_source_556);
    }
    goto try_end_69;
    // Exception handler code:
    try_except_handler_205:;
    exception_keeper_type_207 = exception_type;
    exception_keeper_value_207 = exception_value;
    exception_keeper_tb_207 = exception_tb;
    exception_keeper_lineno_207 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_69__bases_orig);
    tmp_class_creation_69__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_69__bases);
    tmp_class_creation_69__bases = NULL;
    Py_XDECREF(tmp_class_creation_69__class_decl_dict);
    tmp_class_creation_69__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_69__metaclass);
    tmp_class_creation_69__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_69__prepared);
    tmp_class_creation_69__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_207;
    exception_value = exception_keeper_value_207;
    exception_tb = exception_keeper_tb_207;
    exception_lineno = exception_keeper_lineno_207;

    goto frame_exception_exit_1;
    // End of try:
    try_end_69:;
    CHECK_OBJECT(tmp_class_creation_69__bases_orig);
    Py_DECREF(tmp_class_creation_69__bases_orig);
    tmp_class_creation_69__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_69__bases);
    Py_DECREF(tmp_class_creation_69__bases);
    tmp_class_creation_69__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_69__class_decl_dict);
    Py_DECREF(tmp_class_creation_69__class_decl_dict);
    tmp_class_creation_69__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_69__metaclass);
    Py_DECREF(tmp_class_creation_69__metaclass);
    tmp_class_creation_69__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_69__prepared);
    Py_DECREF(tmp_class_creation_69__prepared);
    tmp_class_creation_69__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_558;
        PyObject *tmp_tuple_element_275;
        tmp_tuple_element_275 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_275 == NULL)) {
            tmp_tuple_element_275 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_275 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 601;

            goto try_except_handler_208;
        }
        tmp_assign_source_558 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_558, 0, tmp_tuple_element_275);
        assert(tmp_class_creation_70__bases_orig == NULL);
        tmp_class_creation_70__bases_orig = tmp_assign_source_558;
    }
    {
        PyObject *tmp_assign_source_559;
        PyObject *tmp_dircall_arg1_70;
        CHECK_OBJECT(tmp_class_creation_70__bases_orig);
        tmp_dircall_arg1_70 = tmp_class_creation_70__bases_orig;
        Py_INCREF(tmp_dircall_arg1_70);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_70};
            tmp_assign_source_559 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_559 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 601;

            goto try_except_handler_208;
        }
        assert(tmp_class_creation_70__bases == NULL);
        tmp_class_creation_70__bases = tmp_assign_source_559;
    }
    {
        PyObject *tmp_assign_source_560;
        tmp_assign_source_560 = PyDict_New();
        assert(tmp_class_creation_70__class_decl_dict == NULL);
        tmp_class_creation_70__class_decl_dict = tmp_assign_source_560;
    }
    {
        PyObject *tmp_assign_source_561;
        PyObject *tmp_metaclass_value_70;
        bool tmp_condition_result_415;
        PyObject *tmp_key_value_208;
        PyObject *tmp_dict_arg_value_208;
        PyObject *tmp_dict_arg_value_209;
        PyObject *tmp_key_value_209;
        nuitka_bool tmp_condition_result_416;
        int tmp_truth_name_70;
        PyObject *tmp_type_arg_139;
        PyObject *tmp_expression_value_356;
        PyObject *tmp_subscript_value_70;
        PyObject *tmp_bases_value_70;
        tmp_key_value_208 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_70__class_decl_dict);
        tmp_dict_arg_value_208 = tmp_class_creation_70__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_208, tmp_key_value_208);
        assert(!(tmp_res == -1));
        tmp_condition_result_415 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_415 != false) {
            goto condexpr_true_139;
        } else {
            goto condexpr_false_139;
        }
        condexpr_true_139:;
        CHECK_OBJECT(tmp_class_creation_70__class_decl_dict);
        tmp_dict_arg_value_209 = tmp_class_creation_70__class_decl_dict;
        tmp_key_value_209 = mod_consts[43];
        tmp_metaclass_value_70 = DICT_GET_ITEM0(tmp_dict_arg_value_209, tmp_key_value_209);
        if (tmp_metaclass_value_70 == NULL) {
            tmp_metaclass_value_70 = Py_None;
        }
        assert(!(tmp_metaclass_value_70 == NULL));
        Py_INCREF(tmp_metaclass_value_70);
        goto condexpr_end_139;
        condexpr_false_139:;
        CHECK_OBJECT(tmp_class_creation_70__bases);
        tmp_truth_name_70 = CHECK_IF_TRUE(tmp_class_creation_70__bases);
        if (tmp_truth_name_70 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 601;

            goto try_except_handler_208;
        }
        tmp_condition_result_416 = tmp_truth_name_70 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_416 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_140;
        } else {
            goto condexpr_false_140;
        }
        condexpr_true_140:;
        CHECK_OBJECT(tmp_class_creation_70__bases);
        tmp_expression_value_356 = tmp_class_creation_70__bases;
        tmp_subscript_value_70 = mod_consts[36];
        tmp_type_arg_139 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_356, tmp_subscript_value_70, 0);
        if (tmp_type_arg_139 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 601;

            goto try_except_handler_208;
        }
        tmp_metaclass_value_70 = BUILTIN_TYPE1(tmp_type_arg_139);
        Py_DECREF(tmp_type_arg_139);
        if (tmp_metaclass_value_70 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 601;

            goto try_except_handler_208;
        }
        goto condexpr_end_140;
        condexpr_false_140:;
        tmp_metaclass_value_70 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_70);
        condexpr_end_140:;
        condexpr_end_139:;
        CHECK_OBJECT(tmp_class_creation_70__bases);
        tmp_bases_value_70 = tmp_class_creation_70__bases;
        tmp_assign_source_561 = SELECT_METACLASS(tmp_metaclass_value_70, tmp_bases_value_70);
        Py_DECREF(tmp_metaclass_value_70);
        if (tmp_assign_source_561 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 601;

            goto try_except_handler_208;
        }
        assert(tmp_class_creation_70__metaclass == NULL);
        tmp_class_creation_70__metaclass = tmp_assign_source_561;
    }
    {
        bool tmp_condition_result_417;
        PyObject *tmp_key_value_210;
        PyObject *tmp_dict_arg_value_210;
        tmp_key_value_210 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_70__class_decl_dict);
        tmp_dict_arg_value_210 = tmp_class_creation_70__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_210, tmp_key_value_210);
        assert(!(tmp_res == -1));
        tmp_condition_result_417 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_417 != false) {
            goto branch_yes_277;
        } else {
            goto branch_no_277;
        }
    }
    branch_yes_277:;
    CHECK_OBJECT(tmp_class_creation_70__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_70__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 601;

        goto try_except_handler_208;
    }
    branch_no_277:;
    {
        nuitka_bool tmp_condition_result_418;
        PyObject *tmp_expression_value_357;
        CHECK_OBJECT(tmp_class_creation_70__metaclass);
        tmp_expression_value_357 = tmp_class_creation_70__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_357, mod_consts[44]);
        tmp_condition_result_418 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_418 == NUITKA_BOOL_TRUE) {
            goto branch_yes_278;
        } else {
            goto branch_no_278;
        }
    }
    branch_yes_278:;
    {
        PyObject *tmp_assign_source_562;
        PyObject *tmp_called_value_139;
        PyObject *tmp_expression_value_358;
        PyObject *tmp_args_value_139;
        PyObject *tmp_tuple_element_276;
        PyObject *tmp_kwargs_value_139;
        CHECK_OBJECT(tmp_class_creation_70__metaclass);
        tmp_expression_value_358 = tmp_class_creation_70__metaclass;
        tmp_called_value_139 = LOOKUP_ATTRIBUTE(tmp_expression_value_358, mod_consts[44]);
        if (tmp_called_value_139 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 601;

            goto try_except_handler_208;
        }
        tmp_tuple_element_276 = mod_consts[242];
        tmp_args_value_139 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_139, 0, tmp_tuple_element_276);
        CHECK_OBJECT(tmp_class_creation_70__bases);
        tmp_tuple_element_276 = tmp_class_creation_70__bases;
        PyTuple_SET_ITEM0(tmp_args_value_139, 1, tmp_tuple_element_276);
        CHECK_OBJECT(tmp_class_creation_70__class_decl_dict);
        tmp_kwargs_value_139 = tmp_class_creation_70__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 601;
        tmp_assign_source_562 = CALL_FUNCTION(tmp_called_value_139, tmp_args_value_139, tmp_kwargs_value_139);
        Py_DECREF(tmp_called_value_139);
        Py_DECREF(tmp_args_value_139);
        if (tmp_assign_source_562 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 601;

            goto try_except_handler_208;
        }
        assert(tmp_class_creation_70__prepared == NULL);
        tmp_class_creation_70__prepared = tmp_assign_source_562;
    }
    {
        bool tmp_condition_result_419;
        PyObject *tmp_operand_value_70;
        PyObject *tmp_expression_value_359;
        CHECK_OBJECT(tmp_class_creation_70__prepared);
        tmp_expression_value_359 = tmp_class_creation_70__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_359, mod_consts[46]);
        tmp_operand_value_70 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_70);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 601;

            goto try_except_handler_208;
        }
        tmp_condition_result_419 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_419 != false) {
            goto branch_yes_279;
        } else {
            goto branch_no_279;
        }
    }
    branch_yes_279:;
    {
        PyObject *tmp_raise_type_70;
        PyObject *tmp_raise_value_70;
        PyObject *tmp_left_value_70;
        PyObject *tmp_right_value_70;
        PyObject *tmp_tuple_element_277;
        PyObject *tmp_getattr_target_70;
        PyObject *tmp_getattr_attr_70;
        PyObject *tmp_getattr_default_70;
        tmp_raise_type_70 = PyExc_TypeError;
        tmp_left_value_70 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_70__metaclass);
        tmp_getattr_target_70 = tmp_class_creation_70__metaclass;
        tmp_getattr_attr_70 = mod_consts[48];
        tmp_getattr_default_70 = mod_consts[49];
        tmp_tuple_element_277 = BUILTIN_GETATTR(tmp_getattr_target_70, tmp_getattr_attr_70, tmp_getattr_default_70);
        if (tmp_tuple_element_277 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 601;

            goto try_except_handler_208;
        }
        tmp_right_value_70 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_360;
            PyObject *tmp_type_arg_140;
            PyTuple_SET_ITEM(tmp_right_value_70, 0, tmp_tuple_element_277);
            CHECK_OBJECT(tmp_class_creation_70__prepared);
            tmp_type_arg_140 = tmp_class_creation_70__prepared;
            tmp_expression_value_360 = BUILTIN_TYPE1(tmp_type_arg_140);
            assert(!(tmp_expression_value_360 == NULL));
            tmp_tuple_element_277 = LOOKUP_ATTRIBUTE(tmp_expression_value_360, mod_consts[48]);
            Py_DECREF(tmp_expression_value_360);
            if (tmp_tuple_element_277 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 601;

                goto tuple_build_exception_74;
            }
            PyTuple_SET_ITEM(tmp_right_value_70, 1, tmp_tuple_element_277);
        }
        goto tuple_build_noexception_74;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_74:;
        Py_DECREF(tmp_right_value_70);
        goto try_except_handler_208;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_74:;
        tmp_raise_value_70 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_70, tmp_right_value_70);
        Py_DECREF(tmp_right_value_70);
        if (tmp_raise_value_70 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 601;

            goto try_except_handler_208;
        }
        exception_type = tmp_raise_type_70;
        Py_INCREF(tmp_raise_type_70);
        exception_value = tmp_raise_value_70;
        exception_lineno = 601;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_208;
    }
    branch_no_279:;
    goto branch_end_278;
    branch_no_278:;
    {
        PyObject *tmp_assign_source_563;
        tmp_assign_source_563 = PyDict_New();
        assert(tmp_class_creation_70__prepared == NULL);
        tmp_class_creation_70__prepared = tmp_assign_source_563;
    }
    branch_end_278:;
    {
        PyObject *tmp_assign_source_564;
        {
            PyObject *tmp_set_locals_70;
            CHECK_OBJECT(tmp_class_creation_70__prepared);
            tmp_set_locals_70 = tmp_class_creation_70__prepared;
            locals_botocore$exceptions$$$class__70_MD5UnavailableError_601 = tmp_set_locals_70;
            Py_INCREF(tmp_set_locals_70);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__70_MD5UnavailableError_601, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 601;

            goto try_except_handler_210;
        }
        tmp_dictset_value = mod_consts[242];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__70_MD5UnavailableError_601, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 601;

            goto try_except_handler_210;
        }
        if (isFrameUnusable(cache_frame_67e81db6c1222d1b0c3b676e07006b94_65)) {
            Py_XDECREF(cache_frame_67e81db6c1222d1b0c3b676e07006b94_65);

#if _DEBUG_REFCOUNTS
            if (cache_frame_67e81db6c1222d1b0c3b676e07006b94_65 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_67e81db6c1222d1b0c3b676e07006b94_65 = MAKE_FUNCTION_FRAME(codeobj_67e81db6c1222d1b0c3b676e07006b94, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_67e81db6c1222d1b0c3b676e07006b94_65->m_type_description == NULL);
        frame_67e81db6c1222d1b0c3b676e07006b94_65 = cache_frame_67e81db6c1222d1b0c3b676e07006b94_65;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_67e81db6c1222d1b0c3b676e07006b94_65);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_67e81db6c1222d1b0c3b676e07006b94_65) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[243];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__70_MD5UnavailableError_601, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 602;
            type_description_2 = "o";
            goto frame_exception_exit_65;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_67e81db6c1222d1b0c3b676e07006b94_65);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_64;

        frame_exception_exit_65:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_67e81db6c1222d1b0c3b676e07006b94_65);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_67e81db6c1222d1b0c3b676e07006b94_65, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_67e81db6c1222d1b0c3b676e07006b94_65->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_67e81db6c1222d1b0c3b676e07006b94_65, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_67e81db6c1222d1b0c3b676e07006b94_65,
            type_description_2,
            outline_69_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_67e81db6c1222d1b0c3b676e07006b94_65 == cache_frame_67e81db6c1222d1b0c3b676e07006b94_65) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_67e81db6c1222d1b0c3b676e07006b94_65);
            cache_frame_67e81db6c1222d1b0c3b676e07006b94_65 = NULL;
        }

        assertFrameObject(frame_67e81db6c1222d1b0c3b676e07006b94_65);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_64;

        frame_no_exception_64:;
        goto skip_nested_handling_64;
        nested_frame_exit_64:;

        goto try_except_handler_210;
        skip_nested_handling_64:;
        {
            nuitka_bool tmp_condition_result_420;
            PyObject *tmp_cmp_expr_left_70;
            PyObject *tmp_cmp_expr_right_70;
            CHECK_OBJECT(tmp_class_creation_70__bases);
            tmp_cmp_expr_left_70 = tmp_class_creation_70__bases;
            CHECK_OBJECT(tmp_class_creation_70__bases_orig);
            tmp_cmp_expr_right_70 = tmp_class_creation_70__bases_orig;
            tmp_condition_result_420 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_70, tmp_cmp_expr_right_70);
            if (tmp_condition_result_420 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 601;

                goto try_except_handler_210;
            }
            if (tmp_condition_result_420 == NUITKA_BOOL_TRUE) {
                goto branch_yes_280;
            } else {
                goto branch_no_280;
            }
            assert(tmp_condition_result_420 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_280:;
        CHECK_OBJECT(tmp_class_creation_70__bases_orig);
        tmp_dictset_value = tmp_class_creation_70__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__70_MD5UnavailableError_601, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 601;

            goto try_except_handler_210;
        }
        branch_no_280:;
        {
            PyObject *tmp_assign_source_565;
            PyObject *tmp_called_value_140;
            PyObject *tmp_args_value_140;
            PyObject *tmp_tuple_element_278;
            PyObject *tmp_kwargs_value_140;
            CHECK_OBJECT(tmp_class_creation_70__metaclass);
            tmp_called_value_140 = tmp_class_creation_70__metaclass;
            tmp_tuple_element_278 = mod_consts[242];
            tmp_args_value_140 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_140, 0, tmp_tuple_element_278);
            CHECK_OBJECT(tmp_class_creation_70__bases);
            tmp_tuple_element_278 = tmp_class_creation_70__bases;
            PyTuple_SET_ITEM0(tmp_args_value_140, 1, tmp_tuple_element_278);
            tmp_tuple_element_278 = locals_botocore$exceptions$$$class__70_MD5UnavailableError_601;
            PyTuple_SET_ITEM0(tmp_args_value_140, 2, tmp_tuple_element_278);
            CHECK_OBJECT(tmp_class_creation_70__class_decl_dict);
            tmp_kwargs_value_140 = tmp_class_creation_70__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 601;
            tmp_assign_source_565 = CALL_FUNCTION(tmp_called_value_140, tmp_args_value_140, tmp_kwargs_value_140);
            Py_DECREF(tmp_args_value_140);
            if (tmp_assign_source_565 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 601;

                goto try_except_handler_210;
            }
            assert(outline_69_var___class__ == NULL);
            outline_69_var___class__ = tmp_assign_source_565;
        }
        CHECK_OBJECT(outline_69_var___class__);
        tmp_assign_source_564 = outline_69_var___class__;
        Py_INCREF(tmp_assign_source_564);
        goto try_return_handler_210;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_210:;
        Py_DECREF(locals_botocore$exceptions$$$class__70_MD5UnavailableError_601);
        locals_botocore$exceptions$$$class__70_MD5UnavailableError_601 = NULL;
        goto try_return_handler_209;
        // Exception handler code:
        try_except_handler_210:;
        exception_keeper_type_208 = exception_type;
        exception_keeper_value_208 = exception_value;
        exception_keeper_tb_208 = exception_tb;
        exception_keeper_lineno_208 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__70_MD5UnavailableError_601);
        locals_botocore$exceptions$$$class__70_MD5UnavailableError_601 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_208;
        exception_value = exception_keeper_value_208;
        exception_tb = exception_keeper_tb_208;
        exception_lineno = exception_keeper_lineno_208;

        goto try_except_handler_209;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_209:;
        CHECK_OBJECT(outline_69_var___class__);
        Py_DECREF(outline_69_var___class__);
        outline_69_var___class__ = NULL;
        goto outline_result_70;
        // Exception handler code:
        try_except_handler_209:;
        exception_keeper_type_209 = exception_type;
        exception_keeper_value_209 = exception_value;
        exception_keeper_tb_209 = exception_tb;
        exception_keeper_lineno_209 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_209;
        exception_value = exception_keeper_value_209;
        exception_tb = exception_keeper_tb_209;
        exception_lineno = exception_keeper_lineno_209;

        goto outline_exception_70;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_70:;
        exception_lineno = 601;
        goto try_except_handler_208;
        outline_result_70:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[242], tmp_assign_source_564);
    }
    goto try_end_70;
    // Exception handler code:
    try_except_handler_208:;
    exception_keeper_type_210 = exception_type;
    exception_keeper_value_210 = exception_value;
    exception_keeper_tb_210 = exception_tb;
    exception_keeper_lineno_210 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_70__bases_orig);
    tmp_class_creation_70__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_70__bases);
    tmp_class_creation_70__bases = NULL;
    Py_XDECREF(tmp_class_creation_70__class_decl_dict);
    tmp_class_creation_70__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_70__metaclass);
    tmp_class_creation_70__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_70__prepared);
    tmp_class_creation_70__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_210;
    exception_value = exception_keeper_value_210;
    exception_tb = exception_keeper_tb_210;
    exception_lineno = exception_keeper_lineno_210;

    goto frame_exception_exit_1;
    // End of try:
    try_end_70:;
    CHECK_OBJECT(tmp_class_creation_70__bases_orig);
    Py_DECREF(tmp_class_creation_70__bases_orig);
    tmp_class_creation_70__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_70__bases);
    Py_DECREF(tmp_class_creation_70__bases);
    tmp_class_creation_70__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_70__class_decl_dict);
    Py_DECREF(tmp_class_creation_70__class_decl_dict);
    tmp_class_creation_70__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_70__metaclass);
    Py_DECREF(tmp_class_creation_70__metaclass);
    tmp_class_creation_70__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_70__prepared);
    Py_DECREF(tmp_class_creation_70__prepared);
    tmp_class_creation_70__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_566;
        PyObject *tmp_tuple_element_279;
        tmp_tuple_element_279 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_279 == NULL)) {
            tmp_tuple_element_279 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_279 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 605;

            goto try_except_handler_211;
        }
        tmp_assign_source_566 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_566, 0, tmp_tuple_element_279);
        assert(tmp_class_creation_71__bases_orig == NULL);
        tmp_class_creation_71__bases_orig = tmp_assign_source_566;
    }
    {
        PyObject *tmp_assign_source_567;
        PyObject *tmp_dircall_arg1_71;
        CHECK_OBJECT(tmp_class_creation_71__bases_orig);
        tmp_dircall_arg1_71 = tmp_class_creation_71__bases_orig;
        Py_INCREF(tmp_dircall_arg1_71);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_71};
            tmp_assign_source_567 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_567 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 605;

            goto try_except_handler_211;
        }
        assert(tmp_class_creation_71__bases == NULL);
        tmp_class_creation_71__bases = tmp_assign_source_567;
    }
    {
        PyObject *tmp_assign_source_568;
        tmp_assign_source_568 = PyDict_New();
        assert(tmp_class_creation_71__class_decl_dict == NULL);
        tmp_class_creation_71__class_decl_dict = tmp_assign_source_568;
    }
    {
        PyObject *tmp_assign_source_569;
        PyObject *tmp_metaclass_value_71;
        bool tmp_condition_result_421;
        PyObject *tmp_key_value_211;
        PyObject *tmp_dict_arg_value_211;
        PyObject *tmp_dict_arg_value_212;
        PyObject *tmp_key_value_212;
        nuitka_bool tmp_condition_result_422;
        int tmp_truth_name_71;
        PyObject *tmp_type_arg_141;
        PyObject *tmp_expression_value_361;
        PyObject *tmp_subscript_value_71;
        PyObject *tmp_bases_value_71;
        tmp_key_value_211 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_71__class_decl_dict);
        tmp_dict_arg_value_211 = tmp_class_creation_71__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_211, tmp_key_value_211);
        assert(!(tmp_res == -1));
        tmp_condition_result_421 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_421 != false) {
            goto condexpr_true_141;
        } else {
            goto condexpr_false_141;
        }
        condexpr_true_141:;
        CHECK_OBJECT(tmp_class_creation_71__class_decl_dict);
        tmp_dict_arg_value_212 = tmp_class_creation_71__class_decl_dict;
        tmp_key_value_212 = mod_consts[43];
        tmp_metaclass_value_71 = DICT_GET_ITEM0(tmp_dict_arg_value_212, tmp_key_value_212);
        if (tmp_metaclass_value_71 == NULL) {
            tmp_metaclass_value_71 = Py_None;
        }
        assert(!(tmp_metaclass_value_71 == NULL));
        Py_INCREF(tmp_metaclass_value_71);
        goto condexpr_end_141;
        condexpr_false_141:;
        CHECK_OBJECT(tmp_class_creation_71__bases);
        tmp_truth_name_71 = CHECK_IF_TRUE(tmp_class_creation_71__bases);
        if (tmp_truth_name_71 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 605;

            goto try_except_handler_211;
        }
        tmp_condition_result_422 = tmp_truth_name_71 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_422 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_142;
        } else {
            goto condexpr_false_142;
        }
        condexpr_true_142:;
        CHECK_OBJECT(tmp_class_creation_71__bases);
        tmp_expression_value_361 = tmp_class_creation_71__bases;
        tmp_subscript_value_71 = mod_consts[36];
        tmp_type_arg_141 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_361, tmp_subscript_value_71, 0);
        if (tmp_type_arg_141 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 605;

            goto try_except_handler_211;
        }
        tmp_metaclass_value_71 = BUILTIN_TYPE1(tmp_type_arg_141);
        Py_DECREF(tmp_type_arg_141);
        if (tmp_metaclass_value_71 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 605;

            goto try_except_handler_211;
        }
        goto condexpr_end_142;
        condexpr_false_142:;
        tmp_metaclass_value_71 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_71);
        condexpr_end_142:;
        condexpr_end_141:;
        CHECK_OBJECT(tmp_class_creation_71__bases);
        tmp_bases_value_71 = tmp_class_creation_71__bases;
        tmp_assign_source_569 = SELECT_METACLASS(tmp_metaclass_value_71, tmp_bases_value_71);
        Py_DECREF(tmp_metaclass_value_71);
        if (tmp_assign_source_569 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 605;

            goto try_except_handler_211;
        }
        assert(tmp_class_creation_71__metaclass == NULL);
        tmp_class_creation_71__metaclass = tmp_assign_source_569;
    }
    {
        bool tmp_condition_result_423;
        PyObject *tmp_key_value_213;
        PyObject *tmp_dict_arg_value_213;
        tmp_key_value_213 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_71__class_decl_dict);
        tmp_dict_arg_value_213 = tmp_class_creation_71__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_213, tmp_key_value_213);
        assert(!(tmp_res == -1));
        tmp_condition_result_423 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_423 != false) {
            goto branch_yes_281;
        } else {
            goto branch_no_281;
        }
    }
    branch_yes_281:;
    CHECK_OBJECT(tmp_class_creation_71__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_71__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 605;

        goto try_except_handler_211;
    }
    branch_no_281:;
    {
        nuitka_bool tmp_condition_result_424;
        PyObject *tmp_expression_value_362;
        CHECK_OBJECT(tmp_class_creation_71__metaclass);
        tmp_expression_value_362 = tmp_class_creation_71__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_362, mod_consts[44]);
        tmp_condition_result_424 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_424 == NUITKA_BOOL_TRUE) {
            goto branch_yes_282;
        } else {
            goto branch_no_282;
        }
    }
    branch_yes_282:;
    {
        PyObject *tmp_assign_source_570;
        PyObject *tmp_called_value_141;
        PyObject *tmp_expression_value_363;
        PyObject *tmp_args_value_141;
        PyObject *tmp_tuple_element_280;
        PyObject *tmp_kwargs_value_141;
        CHECK_OBJECT(tmp_class_creation_71__metaclass);
        tmp_expression_value_363 = tmp_class_creation_71__metaclass;
        tmp_called_value_141 = LOOKUP_ATTRIBUTE(tmp_expression_value_363, mod_consts[44]);
        if (tmp_called_value_141 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 605;

            goto try_except_handler_211;
        }
        tmp_tuple_element_280 = mod_consts[244];
        tmp_args_value_141 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_141, 0, tmp_tuple_element_280);
        CHECK_OBJECT(tmp_class_creation_71__bases);
        tmp_tuple_element_280 = tmp_class_creation_71__bases;
        PyTuple_SET_ITEM0(tmp_args_value_141, 1, tmp_tuple_element_280);
        CHECK_OBJECT(tmp_class_creation_71__class_decl_dict);
        tmp_kwargs_value_141 = tmp_class_creation_71__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 605;
        tmp_assign_source_570 = CALL_FUNCTION(tmp_called_value_141, tmp_args_value_141, tmp_kwargs_value_141);
        Py_DECREF(tmp_called_value_141);
        Py_DECREF(tmp_args_value_141);
        if (tmp_assign_source_570 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 605;

            goto try_except_handler_211;
        }
        assert(tmp_class_creation_71__prepared == NULL);
        tmp_class_creation_71__prepared = tmp_assign_source_570;
    }
    {
        bool tmp_condition_result_425;
        PyObject *tmp_operand_value_71;
        PyObject *tmp_expression_value_364;
        CHECK_OBJECT(tmp_class_creation_71__prepared);
        tmp_expression_value_364 = tmp_class_creation_71__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_364, mod_consts[46]);
        tmp_operand_value_71 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_71);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 605;

            goto try_except_handler_211;
        }
        tmp_condition_result_425 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_425 != false) {
            goto branch_yes_283;
        } else {
            goto branch_no_283;
        }
    }
    branch_yes_283:;
    {
        PyObject *tmp_raise_type_71;
        PyObject *tmp_raise_value_71;
        PyObject *tmp_left_value_71;
        PyObject *tmp_right_value_71;
        PyObject *tmp_tuple_element_281;
        PyObject *tmp_getattr_target_71;
        PyObject *tmp_getattr_attr_71;
        PyObject *tmp_getattr_default_71;
        tmp_raise_type_71 = PyExc_TypeError;
        tmp_left_value_71 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_71__metaclass);
        tmp_getattr_target_71 = tmp_class_creation_71__metaclass;
        tmp_getattr_attr_71 = mod_consts[48];
        tmp_getattr_default_71 = mod_consts[49];
        tmp_tuple_element_281 = BUILTIN_GETATTR(tmp_getattr_target_71, tmp_getattr_attr_71, tmp_getattr_default_71);
        if (tmp_tuple_element_281 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 605;

            goto try_except_handler_211;
        }
        tmp_right_value_71 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_365;
            PyObject *tmp_type_arg_142;
            PyTuple_SET_ITEM(tmp_right_value_71, 0, tmp_tuple_element_281);
            CHECK_OBJECT(tmp_class_creation_71__prepared);
            tmp_type_arg_142 = tmp_class_creation_71__prepared;
            tmp_expression_value_365 = BUILTIN_TYPE1(tmp_type_arg_142);
            assert(!(tmp_expression_value_365 == NULL));
            tmp_tuple_element_281 = LOOKUP_ATTRIBUTE(tmp_expression_value_365, mod_consts[48]);
            Py_DECREF(tmp_expression_value_365);
            if (tmp_tuple_element_281 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 605;

                goto tuple_build_exception_75;
            }
            PyTuple_SET_ITEM(tmp_right_value_71, 1, tmp_tuple_element_281);
        }
        goto tuple_build_noexception_75;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_75:;
        Py_DECREF(tmp_right_value_71);
        goto try_except_handler_211;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_75:;
        tmp_raise_value_71 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_71, tmp_right_value_71);
        Py_DECREF(tmp_right_value_71);
        if (tmp_raise_value_71 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 605;

            goto try_except_handler_211;
        }
        exception_type = tmp_raise_type_71;
        Py_INCREF(tmp_raise_type_71);
        exception_value = tmp_raise_value_71;
        exception_lineno = 605;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_211;
    }
    branch_no_283:;
    goto branch_end_282;
    branch_no_282:;
    {
        PyObject *tmp_assign_source_571;
        tmp_assign_source_571 = PyDict_New();
        assert(tmp_class_creation_71__prepared == NULL);
        tmp_class_creation_71__prepared = tmp_assign_source_571;
    }
    branch_end_282:;
    {
        PyObject *tmp_assign_source_572;
        {
            PyObject *tmp_set_locals_71;
            CHECK_OBJECT(tmp_class_creation_71__prepared);
            tmp_set_locals_71 = tmp_class_creation_71__prepared;
            locals_botocore$exceptions$$$class__71_MetadataRetrievalError_605 = tmp_set_locals_71;
            Py_INCREF(tmp_set_locals_71);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__71_MetadataRetrievalError_605, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 605;

            goto try_except_handler_213;
        }
        tmp_dictset_value = mod_consts[244];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__71_MetadataRetrievalError_605, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 605;

            goto try_except_handler_213;
        }
        if (isFrameUnusable(cache_frame_2e460197ddfd2b6c424f096b90dfad47_66)) {
            Py_XDECREF(cache_frame_2e460197ddfd2b6c424f096b90dfad47_66);

#if _DEBUG_REFCOUNTS
            if (cache_frame_2e460197ddfd2b6c424f096b90dfad47_66 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_2e460197ddfd2b6c424f096b90dfad47_66 = MAKE_FUNCTION_FRAME(codeobj_2e460197ddfd2b6c424f096b90dfad47, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_2e460197ddfd2b6c424f096b90dfad47_66->m_type_description == NULL);
        frame_2e460197ddfd2b6c424f096b90dfad47_66 = cache_frame_2e460197ddfd2b6c424f096b90dfad47_66;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_2e460197ddfd2b6c424f096b90dfad47_66);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_2e460197ddfd2b6c424f096b90dfad47_66) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[245];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__71_MetadataRetrievalError_605, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 606;
            type_description_2 = "o";
            goto frame_exception_exit_66;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_2e460197ddfd2b6c424f096b90dfad47_66);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_65;

        frame_exception_exit_66:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_2e460197ddfd2b6c424f096b90dfad47_66);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_2e460197ddfd2b6c424f096b90dfad47_66, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_2e460197ddfd2b6c424f096b90dfad47_66->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_2e460197ddfd2b6c424f096b90dfad47_66, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_2e460197ddfd2b6c424f096b90dfad47_66,
            type_description_2,
            outline_70_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_2e460197ddfd2b6c424f096b90dfad47_66 == cache_frame_2e460197ddfd2b6c424f096b90dfad47_66) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_2e460197ddfd2b6c424f096b90dfad47_66);
            cache_frame_2e460197ddfd2b6c424f096b90dfad47_66 = NULL;
        }

        assertFrameObject(frame_2e460197ddfd2b6c424f096b90dfad47_66);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_65;

        frame_no_exception_65:;
        goto skip_nested_handling_65;
        nested_frame_exit_65:;

        goto try_except_handler_213;
        skip_nested_handling_65:;
        {
            nuitka_bool tmp_condition_result_426;
            PyObject *tmp_cmp_expr_left_71;
            PyObject *tmp_cmp_expr_right_71;
            CHECK_OBJECT(tmp_class_creation_71__bases);
            tmp_cmp_expr_left_71 = tmp_class_creation_71__bases;
            CHECK_OBJECT(tmp_class_creation_71__bases_orig);
            tmp_cmp_expr_right_71 = tmp_class_creation_71__bases_orig;
            tmp_condition_result_426 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_71, tmp_cmp_expr_right_71);
            if (tmp_condition_result_426 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 605;

                goto try_except_handler_213;
            }
            if (tmp_condition_result_426 == NUITKA_BOOL_TRUE) {
                goto branch_yes_284;
            } else {
                goto branch_no_284;
            }
            assert(tmp_condition_result_426 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_284:;
        CHECK_OBJECT(tmp_class_creation_71__bases_orig);
        tmp_dictset_value = tmp_class_creation_71__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__71_MetadataRetrievalError_605, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 605;

            goto try_except_handler_213;
        }
        branch_no_284:;
        {
            PyObject *tmp_assign_source_573;
            PyObject *tmp_called_value_142;
            PyObject *tmp_args_value_142;
            PyObject *tmp_tuple_element_282;
            PyObject *tmp_kwargs_value_142;
            CHECK_OBJECT(tmp_class_creation_71__metaclass);
            tmp_called_value_142 = tmp_class_creation_71__metaclass;
            tmp_tuple_element_282 = mod_consts[244];
            tmp_args_value_142 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_142, 0, tmp_tuple_element_282);
            CHECK_OBJECT(tmp_class_creation_71__bases);
            tmp_tuple_element_282 = tmp_class_creation_71__bases;
            PyTuple_SET_ITEM0(tmp_args_value_142, 1, tmp_tuple_element_282);
            tmp_tuple_element_282 = locals_botocore$exceptions$$$class__71_MetadataRetrievalError_605;
            PyTuple_SET_ITEM0(tmp_args_value_142, 2, tmp_tuple_element_282);
            CHECK_OBJECT(tmp_class_creation_71__class_decl_dict);
            tmp_kwargs_value_142 = tmp_class_creation_71__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 605;
            tmp_assign_source_573 = CALL_FUNCTION(tmp_called_value_142, tmp_args_value_142, tmp_kwargs_value_142);
            Py_DECREF(tmp_args_value_142);
            if (tmp_assign_source_573 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 605;

                goto try_except_handler_213;
            }
            assert(outline_70_var___class__ == NULL);
            outline_70_var___class__ = tmp_assign_source_573;
        }
        CHECK_OBJECT(outline_70_var___class__);
        tmp_assign_source_572 = outline_70_var___class__;
        Py_INCREF(tmp_assign_source_572);
        goto try_return_handler_213;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_213:;
        Py_DECREF(locals_botocore$exceptions$$$class__71_MetadataRetrievalError_605);
        locals_botocore$exceptions$$$class__71_MetadataRetrievalError_605 = NULL;
        goto try_return_handler_212;
        // Exception handler code:
        try_except_handler_213:;
        exception_keeper_type_211 = exception_type;
        exception_keeper_value_211 = exception_value;
        exception_keeper_tb_211 = exception_tb;
        exception_keeper_lineno_211 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__71_MetadataRetrievalError_605);
        locals_botocore$exceptions$$$class__71_MetadataRetrievalError_605 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_211;
        exception_value = exception_keeper_value_211;
        exception_tb = exception_keeper_tb_211;
        exception_lineno = exception_keeper_lineno_211;

        goto try_except_handler_212;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_212:;
        CHECK_OBJECT(outline_70_var___class__);
        Py_DECREF(outline_70_var___class__);
        outline_70_var___class__ = NULL;
        goto outline_result_71;
        // Exception handler code:
        try_except_handler_212:;
        exception_keeper_type_212 = exception_type;
        exception_keeper_value_212 = exception_value;
        exception_keeper_tb_212 = exception_tb;
        exception_keeper_lineno_212 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_212;
        exception_value = exception_keeper_value_212;
        exception_tb = exception_keeper_tb_212;
        exception_lineno = exception_keeper_lineno_212;

        goto outline_exception_71;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_71:;
        exception_lineno = 605;
        goto try_except_handler_211;
        outline_result_71:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[244], tmp_assign_source_572);
    }
    goto try_end_71;
    // Exception handler code:
    try_except_handler_211:;
    exception_keeper_type_213 = exception_type;
    exception_keeper_value_213 = exception_value;
    exception_keeper_tb_213 = exception_tb;
    exception_keeper_lineno_213 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_71__bases_orig);
    tmp_class_creation_71__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_71__bases);
    tmp_class_creation_71__bases = NULL;
    Py_XDECREF(tmp_class_creation_71__class_decl_dict);
    tmp_class_creation_71__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_71__metaclass);
    tmp_class_creation_71__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_71__prepared);
    tmp_class_creation_71__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_213;
    exception_value = exception_keeper_value_213;
    exception_tb = exception_keeper_tb_213;
    exception_lineno = exception_keeper_lineno_213;

    goto frame_exception_exit_1;
    // End of try:
    try_end_71:;
    CHECK_OBJECT(tmp_class_creation_71__bases_orig);
    Py_DECREF(tmp_class_creation_71__bases_orig);
    tmp_class_creation_71__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_71__bases);
    Py_DECREF(tmp_class_creation_71__bases);
    tmp_class_creation_71__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_71__class_decl_dict);
    Py_DECREF(tmp_class_creation_71__class_decl_dict);
    tmp_class_creation_71__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_71__metaclass);
    Py_DECREF(tmp_class_creation_71__metaclass);
    tmp_class_creation_71__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_71__prepared);
    Py_DECREF(tmp_class_creation_71__prepared);
    tmp_class_creation_71__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_574;
        PyObject *tmp_dircall_arg1_72;
        tmp_dircall_arg1_72 = mod_consts[42];
        Py_INCREF(tmp_dircall_arg1_72);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_72};
            tmp_assign_source_574 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_574 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 609;

            goto try_except_handler_214;
        }
        assert(tmp_class_creation_72__bases == NULL);
        tmp_class_creation_72__bases = tmp_assign_source_574;
    }
    {
        PyObject *tmp_assign_source_575;
        tmp_assign_source_575 = PyDict_New();
        assert(tmp_class_creation_72__class_decl_dict == NULL);
        tmp_class_creation_72__class_decl_dict = tmp_assign_source_575;
    }
    {
        PyObject *tmp_assign_source_576;
        PyObject *tmp_metaclass_value_72;
        bool tmp_condition_result_427;
        PyObject *tmp_key_value_214;
        PyObject *tmp_dict_arg_value_214;
        PyObject *tmp_dict_arg_value_215;
        PyObject *tmp_key_value_215;
        nuitka_bool tmp_condition_result_428;
        int tmp_truth_name_72;
        PyObject *tmp_type_arg_143;
        PyObject *tmp_expression_value_366;
        PyObject *tmp_subscript_value_72;
        PyObject *tmp_bases_value_72;
        tmp_key_value_214 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_72__class_decl_dict);
        tmp_dict_arg_value_214 = tmp_class_creation_72__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_214, tmp_key_value_214);
        assert(!(tmp_res == -1));
        tmp_condition_result_427 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_427 != false) {
            goto condexpr_true_143;
        } else {
            goto condexpr_false_143;
        }
        condexpr_true_143:;
        CHECK_OBJECT(tmp_class_creation_72__class_decl_dict);
        tmp_dict_arg_value_215 = tmp_class_creation_72__class_decl_dict;
        tmp_key_value_215 = mod_consts[43];
        tmp_metaclass_value_72 = DICT_GET_ITEM0(tmp_dict_arg_value_215, tmp_key_value_215);
        if (tmp_metaclass_value_72 == NULL) {
            tmp_metaclass_value_72 = Py_None;
        }
        assert(!(tmp_metaclass_value_72 == NULL));
        Py_INCREF(tmp_metaclass_value_72);
        goto condexpr_end_143;
        condexpr_false_143:;
        CHECK_OBJECT(tmp_class_creation_72__bases);
        tmp_truth_name_72 = CHECK_IF_TRUE(tmp_class_creation_72__bases);
        if (tmp_truth_name_72 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 609;

            goto try_except_handler_214;
        }
        tmp_condition_result_428 = tmp_truth_name_72 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_428 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_144;
        } else {
            goto condexpr_false_144;
        }
        condexpr_true_144:;
        CHECK_OBJECT(tmp_class_creation_72__bases);
        tmp_expression_value_366 = tmp_class_creation_72__bases;
        tmp_subscript_value_72 = mod_consts[36];
        tmp_type_arg_143 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_366, tmp_subscript_value_72, 0);
        if (tmp_type_arg_143 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 609;

            goto try_except_handler_214;
        }
        tmp_metaclass_value_72 = BUILTIN_TYPE1(tmp_type_arg_143);
        Py_DECREF(tmp_type_arg_143);
        if (tmp_metaclass_value_72 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 609;

            goto try_except_handler_214;
        }
        goto condexpr_end_144;
        condexpr_false_144:;
        tmp_metaclass_value_72 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_72);
        condexpr_end_144:;
        condexpr_end_143:;
        CHECK_OBJECT(tmp_class_creation_72__bases);
        tmp_bases_value_72 = tmp_class_creation_72__bases;
        tmp_assign_source_576 = SELECT_METACLASS(tmp_metaclass_value_72, tmp_bases_value_72);
        Py_DECREF(tmp_metaclass_value_72);
        if (tmp_assign_source_576 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 609;

            goto try_except_handler_214;
        }
        assert(tmp_class_creation_72__metaclass == NULL);
        tmp_class_creation_72__metaclass = tmp_assign_source_576;
    }
    {
        bool tmp_condition_result_429;
        PyObject *tmp_key_value_216;
        PyObject *tmp_dict_arg_value_216;
        tmp_key_value_216 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_72__class_decl_dict);
        tmp_dict_arg_value_216 = tmp_class_creation_72__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_216, tmp_key_value_216);
        assert(!(tmp_res == -1));
        tmp_condition_result_429 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_429 != false) {
            goto branch_yes_285;
        } else {
            goto branch_no_285;
        }
    }
    branch_yes_285:;
    CHECK_OBJECT(tmp_class_creation_72__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_72__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 609;

        goto try_except_handler_214;
    }
    branch_no_285:;
    {
        nuitka_bool tmp_condition_result_430;
        PyObject *tmp_expression_value_367;
        CHECK_OBJECT(tmp_class_creation_72__metaclass);
        tmp_expression_value_367 = tmp_class_creation_72__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_367, mod_consts[44]);
        tmp_condition_result_430 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_430 == NUITKA_BOOL_TRUE) {
            goto branch_yes_286;
        } else {
            goto branch_no_286;
        }
    }
    branch_yes_286:;
    {
        PyObject *tmp_assign_source_577;
        PyObject *tmp_called_value_143;
        PyObject *tmp_expression_value_368;
        PyObject *tmp_args_value_143;
        PyObject *tmp_tuple_element_283;
        PyObject *tmp_kwargs_value_143;
        CHECK_OBJECT(tmp_class_creation_72__metaclass);
        tmp_expression_value_368 = tmp_class_creation_72__metaclass;
        tmp_called_value_143 = LOOKUP_ATTRIBUTE(tmp_expression_value_368, mod_consts[44]);
        if (tmp_called_value_143 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 609;

            goto try_except_handler_214;
        }
        tmp_tuple_element_283 = mod_consts[246];
        tmp_args_value_143 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_143, 0, tmp_tuple_element_283);
        CHECK_OBJECT(tmp_class_creation_72__bases);
        tmp_tuple_element_283 = tmp_class_creation_72__bases;
        PyTuple_SET_ITEM0(tmp_args_value_143, 1, tmp_tuple_element_283);
        CHECK_OBJECT(tmp_class_creation_72__class_decl_dict);
        tmp_kwargs_value_143 = tmp_class_creation_72__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 609;
        tmp_assign_source_577 = CALL_FUNCTION(tmp_called_value_143, tmp_args_value_143, tmp_kwargs_value_143);
        Py_DECREF(tmp_called_value_143);
        Py_DECREF(tmp_args_value_143);
        if (tmp_assign_source_577 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 609;

            goto try_except_handler_214;
        }
        assert(tmp_class_creation_72__prepared == NULL);
        tmp_class_creation_72__prepared = tmp_assign_source_577;
    }
    {
        bool tmp_condition_result_431;
        PyObject *tmp_operand_value_72;
        PyObject *tmp_expression_value_369;
        CHECK_OBJECT(tmp_class_creation_72__prepared);
        tmp_expression_value_369 = tmp_class_creation_72__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_369, mod_consts[46]);
        tmp_operand_value_72 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_72);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 609;

            goto try_except_handler_214;
        }
        tmp_condition_result_431 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_431 != false) {
            goto branch_yes_287;
        } else {
            goto branch_no_287;
        }
    }
    branch_yes_287:;
    {
        PyObject *tmp_raise_type_72;
        PyObject *tmp_raise_value_72;
        PyObject *tmp_left_value_72;
        PyObject *tmp_right_value_72;
        PyObject *tmp_tuple_element_284;
        PyObject *tmp_getattr_target_72;
        PyObject *tmp_getattr_attr_72;
        PyObject *tmp_getattr_default_72;
        tmp_raise_type_72 = PyExc_TypeError;
        tmp_left_value_72 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_72__metaclass);
        tmp_getattr_target_72 = tmp_class_creation_72__metaclass;
        tmp_getattr_attr_72 = mod_consts[48];
        tmp_getattr_default_72 = mod_consts[49];
        tmp_tuple_element_284 = BUILTIN_GETATTR(tmp_getattr_target_72, tmp_getattr_attr_72, tmp_getattr_default_72);
        if (tmp_tuple_element_284 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 609;

            goto try_except_handler_214;
        }
        tmp_right_value_72 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_370;
            PyObject *tmp_type_arg_144;
            PyTuple_SET_ITEM(tmp_right_value_72, 0, tmp_tuple_element_284);
            CHECK_OBJECT(tmp_class_creation_72__prepared);
            tmp_type_arg_144 = tmp_class_creation_72__prepared;
            tmp_expression_value_370 = BUILTIN_TYPE1(tmp_type_arg_144);
            assert(!(tmp_expression_value_370 == NULL));
            tmp_tuple_element_284 = LOOKUP_ATTRIBUTE(tmp_expression_value_370, mod_consts[48]);
            Py_DECREF(tmp_expression_value_370);
            if (tmp_tuple_element_284 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 609;

                goto tuple_build_exception_76;
            }
            PyTuple_SET_ITEM(tmp_right_value_72, 1, tmp_tuple_element_284);
        }
        goto tuple_build_noexception_76;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_76:;
        Py_DECREF(tmp_right_value_72);
        goto try_except_handler_214;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_76:;
        tmp_raise_value_72 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_72, tmp_right_value_72);
        Py_DECREF(tmp_right_value_72);
        if (tmp_raise_value_72 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 609;

            goto try_except_handler_214;
        }
        exception_type = tmp_raise_type_72;
        Py_INCREF(tmp_raise_type_72);
        exception_value = tmp_raise_value_72;
        exception_lineno = 609;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_214;
    }
    branch_no_287:;
    goto branch_end_286;
    branch_no_286:;
    {
        PyObject *tmp_assign_source_578;
        tmp_assign_source_578 = PyDict_New();
        assert(tmp_class_creation_72__prepared == NULL);
        tmp_class_creation_72__prepared = tmp_assign_source_578;
    }
    branch_end_286:;
    {
        PyObject *tmp_assign_source_579;
        {
            PyObject *tmp_set_locals_72;
            CHECK_OBJECT(tmp_class_creation_72__prepared);
            tmp_set_locals_72 = tmp_class_creation_72__prepared;
            locals_botocore$exceptions$$$class__72_UndefinedModelAttributeError_609 = tmp_set_locals_72;
            Py_INCREF(tmp_set_locals_72);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__72_UndefinedModelAttributeError_609, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 609;

            goto try_except_handler_216;
        }
        tmp_dictset_value = mod_consts[246];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__72_UndefinedModelAttributeError_609, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 609;

            goto try_except_handler_216;
        }
        {
            nuitka_bool tmp_condition_result_432;
            PyObject *tmp_cmp_expr_left_72;
            PyObject *tmp_cmp_expr_right_72;
            CHECK_OBJECT(tmp_class_creation_72__bases);
            tmp_cmp_expr_left_72 = tmp_class_creation_72__bases;
            tmp_cmp_expr_right_72 = mod_consts[42];
            tmp_condition_result_432 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_72, tmp_cmp_expr_right_72);
            if (tmp_condition_result_432 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 609;

                goto try_except_handler_216;
            }
            if (tmp_condition_result_432 == NUITKA_BOOL_TRUE) {
                goto branch_yes_288;
            } else {
                goto branch_no_288;
            }
            assert(tmp_condition_result_432 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_288:;
        tmp_dictset_value = mod_consts[42];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__72_UndefinedModelAttributeError_609, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 609;

            goto try_except_handler_216;
        }
        branch_no_288:;
        {
            PyObject *tmp_assign_source_580;
            PyObject *tmp_called_value_144;
            PyObject *tmp_args_value_144;
            PyObject *tmp_tuple_element_285;
            PyObject *tmp_kwargs_value_144;
            CHECK_OBJECT(tmp_class_creation_72__metaclass);
            tmp_called_value_144 = tmp_class_creation_72__metaclass;
            tmp_tuple_element_285 = mod_consts[246];
            tmp_args_value_144 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_144, 0, tmp_tuple_element_285);
            CHECK_OBJECT(tmp_class_creation_72__bases);
            tmp_tuple_element_285 = tmp_class_creation_72__bases;
            PyTuple_SET_ITEM0(tmp_args_value_144, 1, tmp_tuple_element_285);
            tmp_tuple_element_285 = locals_botocore$exceptions$$$class__72_UndefinedModelAttributeError_609;
            PyTuple_SET_ITEM0(tmp_args_value_144, 2, tmp_tuple_element_285);
            CHECK_OBJECT(tmp_class_creation_72__class_decl_dict);
            tmp_kwargs_value_144 = tmp_class_creation_72__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 609;
            tmp_assign_source_580 = CALL_FUNCTION(tmp_called_value_144, tmp_args_value_144, tmp_kwargs_value_144);
            Py_DECREF(tmp_args_value_144);
            if (tmp_assign_source_580 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 609;

                goto try_except_handler_216;
            }
            assert(outline_71_var___class__ == NULL);
            outline_71_var___class__ = tmp_assign_source_580;
        }
        CHECK_OBJECT(outline_71_var___class__);
        tmp_assign_source_579 = outline_71_var___class__;
        Py_INCREF(tmp_assign_source_579);
        goto try_return_handler_216;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_216:;
        Py_DECREF(locals_botocore$exceptions$$$class__72_UndefinedModelAttributeError_609);
        locals_botocore$exceptions$$$class__72_UndefinedModelAttributeError_609 = NULL;
        goto try_return_handler_215;
        // Exception handler code:
        try_except_handler_216:;
        exception_keeper_type_214 = exception_type;
        exception_keeper_value_214 = exception_value;
        exception_keeper_tb_214 = exception_tb;
        exception_keeper_lineno_214 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__72_UndefinedModelAttributeError_609);
        locals_botocore$exceptions$$$class__72_UndefinedModelAttributeError_609 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_214;
        exception_value = exception_keeper_value_214;
        exception_tb = exception_keeper_tb_214;
        exception_lineno = exception_keeper_lineno_214;

        goto try_except_handler_215;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_215:;
        CHECK_OBJECT(outline_71_var___class__);
        Py_DECREF(outline_71_var___class__);
        outline_71_var___class__ = NULL;
        goto outline_result_72;
        // Exception handler code:
        try_except_handler_215:;
        exception_keeper_type_215 = exception_type;
        exception_keeper_value_215 = exception_value;
        exception_keeper_tb_215 = exception_tb;
        exception_keeper_lineno_215 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_215;
        exception_value = exception_keeper_value_215;
        exception_tb = exception_keeper_tb_215;
        exception_lineno = exception_keeper_lineno_215;

        goto outline_exception_72;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_72:;
        exception_lineno = 609;
        goto try_except_handler_214;
        outline_result_72:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[246], tmp_assign_source_579);
    }
    goto try_end_72;
    // Exception handler code:
    try_except_handler_214:;
    exception_keeper_type_216 = exception_type;
    exception_keeper_value_216 = exception_value;
    exception_keeper_tb_216 = exception_tb;
    exception_keeper_lineno_216 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_72__bases);
    tmp_class_creation_72__bases = NULL;
    Py_XDECREF(tmp_class_creation_72__class_decl_dict);
    tmp_class_creation_72__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_72__metaclass);
    tmp_class_creation_72__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_72__prepared);
    tmp_class_creation_72__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_216;
    exception_value = exception_keeper_value_216;
    exception_tb = exception_keeper_tb_216;
    exception_lineno = exception_keeper_lineno_216;

    goto frame_exception_exit_1;
    // End of try:
    try_end_72:;
    CHECK_OBJECT(tmp_class_creation_72__bases);
    Py_DECREF(tmp_class_creation_72__bases);
    tmp_class_creation_72__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_72__class_decl_dict);
    Py_DECREF(tmp_class_creation_72__class_decl_dict);
    tmp_class_creation_72__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_72__metaclass);
    Py_DECREF(tmp_class_creation_72__metaclass);
    tmp_class_creation_72__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_72__prepared);
    Py_DECREF(tmp_class_creation_72__prepared);
    tmp_class_creation_72__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_581;
        PyObject *tmp_tuple_element_286;
        tmp_tuple_element_286 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[246]);

        if (unlikely(tmp_tuple_element_286 == NULL)) {
            tmp_tuple_element_286 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[246]);
        }

        if (tmp_tuple_element_286 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 613;

            goto try_except_handler_217;
        }
        tmp_assign_source_581 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_581, 0, tmp_tuple_element_286);
        assert(tmp_class_creation_73__bases_orig == NULL);
        tmp_class_creation_73__bases_orig = tmp_assign_source_581;
    }
    {
        PyObject *tmp_assign_source_582;
        PyObject *tmp_dircall_arg1_73;
        CHECK_OBJECT(tmp_class_creation_73__bases_orig);
        tmp_dircall_arg1_73 = tmp_class_creation_73__bases_orig;
        Py_INCREF(tmp_dircall_arg1_73);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_73};
            tmp_assign_source_582 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_582 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 613;

            goto try_except_handler_217;
        }
        assert(tmp_class_creation_73__bases == NULL);
        tmp_class_creation_73__bases = tmp_assign_source_582;
    }
    {
        PyObject *tmp_assign_source_583;
        tmp_assign_source_583 = PyDict_New();
        assert(tmp_class_creation_73__class_decl_dict == NULL);
        tmp_class_creation_73__class_decl_dict = tmp_assign_source_583;
    }
    {
        PyObject *tmp_assign_source_584;
        PyObject *tmp_metaclass_value_73;
        bool tmp_condition_result_433;
        PyObject *tmp_key_value_217;
        PyObject *tmp_dict_arg_value_217;
        PyObject *tmp_dict_arg_value_218;
        PyObject *tmp_key_value_218;
        nuitka_bool tmp_condition_result_434;
        int tmp_truth_name_73;
        PyObject *tmp_type_arg_145;
        PyObject *tmp_expression_value_371;
        PyObject *tmp_subscript_value_73;
        PyObject *tmp_bases_value_73;
        tmp_key_value_217 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_73__class_decl_dict);
        tmp_dict_arg_value_217 = tmp_class_creation_73__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_217, tmp_key_value_217);
        assert(!(tmp_res == -1));
        tmp_condition_result_433 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_433 != false) {
            goto condexpr_true_145;
        } else {
            goto condexpr_false_145;
        }
        condexpr_true_145:;
        CHECK_OBJECT(tmp_class_creation_73__class_decl_dict);
        tmp_dict_arg_value_218 = tmp_class_creation_73__class_decl_dict;
        tmp_key_value_218 = mod_consts[43];
        tmp_metaclass_value_73 = DICT_GET_ITEM0(tmp_dict_arg_value_218, tmp_key_value_218);
        if (tmp_metaclass_value_73 == NULL) {
            tmp_metaclass_value_73 = Py_None;
        }
        assert(!(tmp_metaclass_value_73 == NULL));
        Py_INCREF(tmp_metaclass_value_73);
        goto condexpr_end_145;
        condexpr_false_145:;
        CHECK_OBJECT(tmp_class_creation_73__bases);
        tmp_truth_name_73 = CHECK_IF_TRUE(tmp_class_creation_73__bases);
        if (tmp_truth_name_73 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 613;

            goto try_except_handler_217;
        }
        tmp_condition_result_434 = tmp_truth_name_73 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_434 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_146;
        } else {
            goto condexpr_false_146;
        }
        condexpr_true_146:;
        CHECK_OBJECT(tmp_class_creation_73__bases);
        tmp_expression_value_371 = tmp_class_creation_73__bases;
        tmp_subscript_value_73 = mod_consts[36];
        tmp_type_arg_145 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_371, tmp_subscript_value_73, 0);
        if (tmp_type_arg_145 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 613;

            goto try_except_handler_217;
        }
        tmp_metaclass_value_73 = BUILTIN_TYPE1(tmp_type_arg_145);
        Py_DECREF(tmp_type_arg_145);
        if (tmp_metaclass_value_73 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 613;

            goto try_except_handler_217;
        }
        goto condexpr_end_146;
        condexpr_false_146:;
        tmp_metaclass_value_73 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_73);
        condexpr_end_146:;
        condexpr_end_145:;
        CHECK_OBJECT(tmp_class_creation_73__bases);
        tmp_bases_value_73 = tmp_class_creation_73__bases;
        tmp_assign_source_584 = SELECT_METACLASS(tmp_metaclass_value_73, tmp_bases_value_73);
        Py_DECREF(tmp_metaclass_value_73);
        if (tmp_assign_source_584 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 613;

            goto try_except_handler_217;
        }
        assert(tmp_class_creation_73__metaclass == NULL);
        tmp_class_creation_73__metaclass = tmp_assign_source_584;
    }
    {
        bool tmp_condition_result_435;
        PyObject *tmp_key_value_219;
        PyObject *tmp_dict_arg_value_219;
        tmp_key_value_219 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_73__class_decl_dict);
        tmp_dict_arg_value_219 = tmp_class_creation_73__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_219, tmp_key_value_219);
        assert(!(tmp_res == -1));
        tmp_condition_result_435 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_435 != false) {
            goto branch_yes_289;
        } else {
            goto branch_no_289;
        }
    }
    branch_yes_289:;
    CHECK_OBJECT(tmp_class_creation_73__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_73__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 613;

        goto try_except_handler_217;
    }
    branch_no_289:;
    {
        nuitka_bool tmp_condition_result_436;
        PyObject *tmp_expression_value_372;
        CHECK_OBJECT(tmp_class_creation_73__metaclass);
        tmp_expression_value_372 = tmp_class_creation_73__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_372, mod_consts[44]);
        tmp_condition_result_436 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_436 == NUITKA_BOOL_TRUE) {
            goto branch_yes_290;
        } else {
            goto branch_no_290;
        }
    }
    branch_yes_290:;
    {
        PyObject *tmp_assign_source_585;
        PyObject *tmp_called_value_145;
        PyObject *tmp_expression_value_373;
        PyObject *tmp_args_value_145;
        PyObject *tmp_tuple_element_287;
        PyObject *tmp_kwargs_value_145;
        CHECK_OBJECT(tmp_class_creation_73__metaclass);
        tmp_expression_value_373 = tmp_class_creation_73__metaclass;
        tmp_called_value_145 = LOOKUP_ATTRIBUTE(tmp_expression_value_373, mod_consts[44]);
        if (tmp_called_value_145 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 613;

            goto try_except_handler_217;
        }
        tmp_tuple_element_287 = mod_consts[247];
        tmp_args_value_145 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_145, 0, tmp_tuple_element_287);
        CHECK_OBJECT(tmp_class_creation_73__bases);
        tmp_tuple_element_287 = tmp_class_creation_73__bases;
        PyTuple_SET_ITEM0(tmp_args_value_145, 1, tmp_tuple_element_287);
        CHECK_OBJECT(tmp_class_creation_73__class_decl_dict);
        tmp_kwargs_value_145 = tmp_class_creation_73__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 613;
        tmp_assign_source_585 = CALL_FUNCTION(tmp_called_value_145, tmp_args_value_145, tmp_kwargs_value_145);
        Py_DECREF(tmp_called_value_145);
        Py_DECREF(tmp_args_value_145);
        if (tmp_assign_source_585 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 613;

            goto try_except_handler_217;
        }
        assert(tmp_class_creation_73__prepared == NULL);
        tmp_class_creation_73__prepared = tmp_assign_source_585;
    }
    {
        bool tmp_condition_result_437;
        PyObject *tmp_operand_value_73;
        PyObject *tmp_expression_value_374;
        CHECK_OBJECT(tmp_class_creation_73__prepared);
        tmp_expression_value_374 = tmp_class_creation_73__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_374, mod_consts[46]);
        tmp_operand_value_73 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_73);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 613;

            goto try_except_handler_217;
        }
        tmp_condition_result_437 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_437 != false) {
            goto branch_yes_291;
        } else {
            goto branch_no_291;
        }
    }
    branch_yes_291:;
    {
        PyObject *tmp_raise_type_73;
        PyObject *tmp_raise_value_73;
        PyObject *tmp_left_value_73;
        PyObject *tmp_right_value_73;
        PyObject *tmp_tuple_element_288;
        PyObject *tmp_getattr_target_73;
        PyObject *tmp_getattr_attr_73;
        PyObject *tmp_getattr_default_73;
        tmp_raise_type_73 = PyExc_TypeError;
        tmp_left_value_73 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_73__metaclass);
        tmp_getattr_target_73 = tmp_class_creation_73__metaclass;
        tmp_getattr_attr_73 = mod_consts[48];
        tmp_getattr_default_73 = mod_consts[49];
        tmp_tuple_element_288 = BUILTIN_GETATTR(tmp_getattr_target_73, tmp_getattr_attr_73, tmp_getattr_default_73);
        if (tmp_tuple_element_288 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 613;

            goto try_except_handler_217;
        }
        tmp_right_value_73 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_375;
            PyObject *tmp_type_arg_146;
            PyTuple_SET_ITEM(tmp_right_value_73, 0, tmp_tuple_element_288);
            CHECK_OBJECT(tmp_class_creation_73__prepared);
            tmp_type_arg_146 = tmp_class_creation_73__prepared;
            tmp_expression_value_375 = BUILTIN_TYPE1(tmp_type_arg_146);
            assert(!(tmp_expression_value_375 == NULL));
            tmp_tuple_element_288 = LOOKUP_ATTRIBUTE(tmp_expression_value_375, mod_consts[48]);
            Py_DECREF(tmp_expression_value_375);
            if (tmp_tuple_element_288 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 613;

                goto tuple_build_exception_77;
            }
            PyTuple_SET_ITEM(tmp_right_value_73, 1, tmp_tuple_element_288);
        }
        goto tuple_build_noexception_77;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_77:;
        Py_DECREF(tmp_right_value_73);
        goto try_except_handler_217;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_77:;
        tmp_raise_value_73 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_73, tmp_right_value_73);
        Py_DECREF(tmp_right_value_73);
        if (tmp_raise_value_73 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 613;

            goto try_except_handler_217;
        }
        exception_type = tmp_raise_type_73;
        Py_INCREF(tmp_raise_type_73);
        exception_value = tmp_raise_value_73;
        exception_lineno = 613;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_217;
    }
    branch_no_291:;
    goto branch_end_290;
    branch_no_290:;
    {
        PyObject *tmp_assign_source_586;
        tmp_assign_source_586 = PyDict_New();
        assert(tmp_class_creation_73__prepared == NULL);
        tmp_class_creation_73__prepared = tmp_assign_source_586;
    }
    branch_end_290:;
    {
        PyObject *tmp_assign_source_587;
        {
            PyObject *tmp_set_locals_73;
            CHECK_OBJECT(tmp_class_creation_73__prepared);
            tmp_set_locals_73 = tmp_class_creation_73__prepared;
            locals_botocore$exceptions$$$class__73_MissingServiceIdError_613 = tmp_set_locals_73;
            Py_INCREF(tmp_set_locals_73);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__73_MissingServiceIdError_613, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 613;

            goto try_except_handler_219;
        }
        tmp_dictset_value = mod_consts[247];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__73_MissingServiceIdError_613, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 613;

            goto try_except_handler_219;
        }
        if (isFrameUnusable(cache_frame_43432ddae86353eb6ef768afd56166ca_67)) {
            Py_XDECREF(cache_frame_43432ddae86353eb6ef768afd56166ca_67);

#if _DEBUG_REFCOUNTS
            if (cache_frame_43432ddae86353eb6ef768afd56166ca_67 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_43432ddae86353eb6ef768afd56166ca_67 = MAKE_FUNCTION_FRAME(codeobj_43432ddae86353eb6ef768afd56166ca, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_43432ddae86353eb6ef768afd56166ca_67->m_type_description == NULL);
        frame_43432ddae86353eb6ef768afd56166ca_67 = cache_frame_43432ddae86353eb6ef768afd56166ca_67;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_43432ddae86353eb6ef768afd56166ca_67);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_43432ddae86353eb6ef768afd56166ca_67) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[248];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__73_MissingServiceIdError_613, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 614;
            type_description_2 = "o";
            goto frame_exception_exit_67;
        }


        tmp_dictset_value = MAKE_FUNCTION_botocore$exceptions$$$function__10___init__();

        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__73_MissingServiceIdError_613, mod_consts[3], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 619;
            type_description_2 = "o";
            goto frame_exception_exit_67;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_43432ddae86353eb6ef768afd56166ca_67);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_66;

        frame_exception_exit_67:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_43432ddae86353eb6ef768afd56166ca_67);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_43432ddae86353eb6ef768afd56166ca_67, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_43432ddae86353eb6ef768afd56166ca_67->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_43432ddae86353eb6ef768afd56166ca_67, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_43432ddae86353eb6ef768afd56166ca_67,
            type_description_2,
            outline_72_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_43432ddae86353eb6ef768afd56166ca_67 == cache_frame_43432ddae86353eb6ef768afd56166ca_67) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_43432ddae86353eb6ef768afd56166ca_67);
            cache_frame_43432ddae86353eb6ef768afd56166ca_67 = NULL;
        }

        assertFrameObject(frame_43432ddae86353eb6ef768afd56166ca_67);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_66;

        frame_no_exception_66:;
        goto skip_nested_handling_66;
        nested_frame_exit_66:;

        goto try_except_handler_219;
        skip_nested_handling_66:;
        {
            nuitka_bool tmp_condition_result_438;
            PyObject *tmp_cmp_expr_left_73;
            PyObject *tmp_cmp_expr_right_73;
            CHECK_OBJECT(tmp_class_creation_73__bases);
            tmp_cmp_expr_left_73 = tmp_class_creation_73__bases;
            CHECK_OBJECT(tmp_class_creation_73__bases_orig);
            tmp_cmp_expr_right_73 = tmp_class_creation_73__bases_orig;
            tmp_condition_result_438 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_73, tmp_cmp_expr_right_73);
            if (tmp_condition_result_438 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 613;

                goto try_except_handler_219;
            }
            if (tmp_condition_result_438 == NUITKA_BOOL_TRUE) {
                goto branch_yes_292;
            } else {
                goto branch_no_292;
            }
            assert(tmp_condition_result_438 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_292:;
        CHECK_OBJECT(tmp_class_creation_73__bases_orig);
        tmp_dictset_value = tmp_class_creation_73__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__73_MissingServiceIdError_613, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 613;

            goto try_except_handler_219;
        }
        branch_no_292:;
        {
            PyObject *tmp_assign_source_588;
            PyObject *tmp_called_value_146;
            PyObject *tmp_args_value_146;
            PyObject *tmp_tuple_element_289;
            PyObject *tmp_kwargs_value_146;
            CHECK_OBJECT(tmp_class_creation_73__metaclass);
            tmp_called_value_146 = tmp_class_creation_73__metaclass;
            tmp_tuple_element_289 = mod_consts[247];
            tmp_args_value_146 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_146, 0, tmp_tuple_element_289);
            CHECK_OBJECT(tmp_class_creation_73__bases);
            tmp_tuple_element_289 = tmp_class_creation_73__bases;
            PyTuple_SET_ITEM0(tmp_args_value_146, 1, tmp_tuple_element_289);
            tmp_tuple_element_289 = locals_botocore$exceptions$$$class__73_MissingServiceIdError_613;
            PyTuple_SET_ITEM0(tmp_args_value_146, 2, tmp_tuple_element_289);
            CHECK_OBJECT(tmp_class_creation_73__class_decl_dict);
            tmp_kwargs_value_146 = tmp_class_creation_73__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 613;
            tmp_assign_source_588 = CALL_FUNCTION(tmp_called_value_146, tmp_args_value_146, tmp_kwargs_value_146);
            Py_DECREF(tmp_args_value_146);
            if (tmp_assign_source_588 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 613;

                goto try_except_handler_219;
            }
            assert(outline_72_var___class__ == NULL);
            outline_72_var___class__ = tmp_assign_source_588;
        }
        CHECK_OBJECT(outline_72_var___class__);
        tmp_assign_source_587 = outline_72_var___class__;
        Py_INCREF(tmp_assign_source_587);
        goto try_return_handler_219;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_219:;
        Py_DECREF(locals_botocore$exceptions$$$class__73_MissingServiceIdError_613);
        locals_botocore$exceptions$$$class__73_MissingServiceIdError_613 = NULL;
        goto try_return_handler_218;
        // Exception handler code:
        try_except_handler_219:;
        exception_keeper_type_217 = exception_type;
        exception_keeper_value_217 = exception_value;
        exception_keeper_tb_217 = exception_tb;
        exception_keeper_lineno_217 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__73_MissingServiceIdError_613);
        locals_botocore$exceptions$$$class__73_MissingServiceIdError_613 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_217;
        exception_value = exception_keeper_value_217;
        exception_tb = exception_keeper_tb_217;
        exception_lineno = exception_keeper_lineno_217;

        goto try_except_handler_218;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_218:;
        CHECK_OBJECT(outline_72_var___class__);
        Py_DECREF(outline_72_var___class__);
        outline_72_var___class__ = NULL;
        goto outline_result_73;
        // Exception handler code:
        try_except_handler_218:;
        exception_keeper_type_218 = exception_type;
        exception_keeper_value_218 = exception_value;
        exception_keeper_tb_218 = exception_tb;
        exception_keeper_lineno_218 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_218;
        exception_value = exception_keeper_value_218;
        exception_tb = exception_keeper_tb_218;
        exception_lineno = exception_keeper_lineno_218;

        goto outline_exception_73;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_73:;
        exception_lineno = 613;
        goto try_except_handler_217;
        outline_result_73:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[247], tmp_assign_source_587);
    }
    goto try_end_73;
    // Exception handler code:
    try_except_handler_217:;
    exception_keeper_type_219 = exception_type;
    exception_keeper_value_219 = exception_value;
    exception_keeper_tb_219 = exception_tb;
    exception_keeper_lineno_219 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_73__bases_orig);
    tmp_class_creation_73__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_73__bases);
    tmp_class_creation_73__bases = NULL;
    Py_XDECREF(tmp_class_creation_73__class_decl_dict);
    tmp_class_creation_73__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_73__metaclass);
    tmp_class_creation_73__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_73__prepared);
    tmp_class_creation_73__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_219;
    exception_value = exception_keeper_value_219;
    exception_tb = exception_keeper_tb_219;
    exception_lineno = exception_keeper_lineno_219;

    goto frame_exception_exit_1;
    // End of try:
    try_end_73:;
    CHECK_OBJECT(tmp_class_creation_73__bases_orig);
    Py_DECREF(tmp_class_creation_73__bases_orig);
    tmp_class_creation_73__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_73__bases);
    Py_DECREF(tmp_class_creation_73__bases);
    tmp_class_creation_73__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_73__class_decl_dict);
    Py_DECREF(tmp_class_creation_73__class_decl_dict);
    tmp_class_creation_73__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_73__metaclass);
    Py_DECREF(tmp_class_creation_73__metaclass);
    tmp_class_creation_73__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_73__prepared);
    Py_DECREF(tmp_class_creation_73__prepared);
    tmp_class_creation_73__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_589;
        PyObject *tmp_tuple_element_290;
        tmp_tuple_element_290 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_290 == NULL)) {
            tmp_tuple_element_290 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_290 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 625;

            goto try_except_handler_220;
        }
        tmp_assign_source_589 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_589, 0, tmp_tuple_element_290);
        assert(tmp_class_creation_74__bases_orig == NULL);
        tmp_class_creation_74__bases_orig = tmp_assign_source_589;
    }
    {
        PyObject *tmp_assign_source_590;
        PyObject *tmp_dircall_arg1_74;
        CHECK_OBJECT(tmp_class_creation_74__bases_orig);
        tmp_dircall_arg1_74 = tmp_class_creation_74__bases_orig;
        Py_INCREF(tmp_dircall_arg1_74);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_74};
            tmp_assign_source_590 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_590 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 625;

            goto try_except_handler_220;
        }
        assert(tmp_class_creation_74__bases == NULL);
        tmp_class_creation_74__bases = tmp_assign_source_590;
    }
    {
        PyObject *tmp_assign_source_591;
        tmp_assign_source_591 = PyDict_New();
        assert(tmp_class_creation_74__class_decl_dict == NULL);
        tmp_class_creation_74__class_decl_dict = tmp_assign_source_591;
    }
    {
        PyObject *tmp_assign_source_592;
        PyObject *tmp_metaclass_value_74;
        bool tmp_condition_result_439;
        PyObject *tmp_key_value_220;
        PyObject *tmp_dict_arg_value_220;
        PyObject *tmp_dict_arg_value_221;
        PyObject *tmp_key_value_221;
        nuitka_bool tmp_condition_result_440;
        int tmp_truth_name_74;
        PyObject *tmp_type_arg_147;
        PyObject *tmp_expression_value_376;
        PyObject *tmp_subscript_value_74;
        PyObject *tmp_bases_value_74;
        tmp_key_value_220 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_74__class_decl_dict);
        tmp_dict_arg_value_220 = tmp_class_creation_74__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_220, tmp_key_value_220);
        assert(!(tmp_res == -1));
        tmp_condition_result_439 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_439 != false) {
            goto condexpr_true_147;
        } else {
            goto condexpr_false_147;
        }
        condexpr_true_147:;
        CHECK_OBJECT(tmp_class_creation_74__class_decl_dict);
        tmp_dict_arg_value_221 = tmp_class_creation_74__class_decl_dict;
        tmp_key_value_221 = mod_consts[43];
        tmp_metaclass_value_74 = DICT_GET_ITEM0(tmp_dict_arg_value_221, tmp_key_value_221);
        if (tmp_metaclass_value_74 == NULL) {
            tmp_metaclass_value_74 = Py_None;
        }
        assert(!(tmp_metaclass_value_74 == NULL));
        Py_INCREF(tmp_metaclass_value_74);
        goto condexpr_end_147;
        condexpr_false_147:;
        CHECK_OBJECT(tmp_class_creation_74__bases);
        tmp_truth_name_74 = CHECK_IF_TRUE(tmp_class_creation_74__bases);
        if (tmp_truth_name_74 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 625;

            goto try_except_handler_220;
        }
        tmp_condition_result_440 = tmp_truth_name_74 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_440 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_148;
        } else {
            goto condexpr_false_148;
        }
        condexpr_true_148:;
        CHECK_OBJECT(tmp_class_creation_74__bases);
        tmp_expression_value_376 = tmp_class_creation_74__bases;
        tmp_subscript_value_74 = mod_consts[36];
        tmp_type_arg_147 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_376, tmp_subscript_value_74, 0);
        if (tmp_type_arg_147 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 625;

            goto try_except_handler_220;
        }
        tmp_metaclass_value_74 = BUILTIN_TYPE1(tmp_type_arg_147);
        Py_DECREF(tmp_type_arg_147);
        if (tmp_metaclass_value_74 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 625;

            goto try_except_handler_220;
        }
        goto condexpr_end_148;
        condexpr_false_148:;
        tmp_metaclass_value_74 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_74);
        condexpr_end_148:;
        condexpr_end_147:;
        CHECK_OBJECT(tmp_class_creation_74__bases);
        tmp_bases_value_74 = tmp_class_creation_74__bases;
        tmp_assign_source_592 = SELECT_METACLASS(tmp_metaclass_value_74, tmp_bases_value_74);
        Py_DECREF(tmp_metaclass_value_74);
        if (tmp_assign_source_592 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 625;

            goto try_except_handler_220;
        }
        assert(tmp_class_creation_74__metaclass == NULL);
        tmp_class_creation_74__metaclass = tmp_assign_source_592;
    }
    {
        bool tmp_condition_result_441;
        PyObject *tmp_key_value_222;
        PyObject *tmp_dict_arg_value_222;
        tmp_key_value_222 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_74__class_decl_dict);
        tmp_dict_arg_value_222 = tmp_class_creation_74__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_222, tmp_key_value_222);
        assert(!(tmp_res == -1));
        tmp_condition_result_441 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_441 != false) {
            goto branch_yes_293;
        } else {
            goto branch_no_293;
        }
    }
    branch_yes_293:;
    CHECK_OBJECT(tmp_class_creation_74__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_74__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 625;

        goto try_except_handler_220;
    }
    branch_no_293:;
    {
        nuitka_bool tmp_condition_result_442;
        PyObject *tmp_expression_value_377;
        CHECK_OBJECT(tmp_class_creation_74__metaclass);
        tmp_expression_value_377 = tmp_class_creation_74__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_377, mod_consts[44]);
        tmp_condition_result_442 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_442 == NUITKA_BOOL_TRUE) {
            goto branch_yes_294;
        } else {
            goto branch_no_294;
        }
    }
    branch_yes_294:;
    {
        PyObject *tmp_assign_source_593;
        PyObject *tmp_called_value_147;
        PyObject *tmp_expression_value_378;
        PyObject *tmp_args_value_147;
        PyObject *tmp_tuple_element_291;
        PyObject *tmp_kwargs_value_147;
        CHECK_OBJECT(tmp_class_creation_74__metaclass);
        tmp_expression_value_378 = tmp_class_creation_74__metaclass;
        tmp_called_value_147 = LOOKUP_ATTRIBUTE(tmp_expression_value_378, mod_consts[44]);
        if (tmp_called_value_147 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 625;

            goto try_except_handler_220;
        }
        tmp_tuple_element_291 = mod_consts[250];
        tmp_args_value_147 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_147, 0, tmp_tuple_element_291);
        CHECK_OBJECT(tmp_class_creation_74__bases);
        tmp_tuple_element_291 = tmp_class_creation_74__bases;
        PyTuple_SET_ITEM0(tmp_args_value_147, 1, tmp_tuple_element_291);
        CHECK_OBJECT(tmp_class_creation_74__class_decl_dict);
        tmp_kwargs_value_147 = tmp_class_creation_74__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 625;
        tmp_assign_source_593 = CALL_FUNCTION(tmp_called_value_147, tmp_args_value_147, tmp_kwargs_value_147);
        Py_DECREF(tmp_called_value_147);
        Py_DECREF(tmp_args_value_147);
        if (tmp_assign_source_593 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 625;

            goto try_except_handler_220;
        }
        assert(tmp_class_creation_74__prepared == NULL);
        tmp_class_creation_74__prepared = tmp_assign_source_593;
    }
    {
        bool tmp_condition_result_443;
        PyObject *tmp_operand_value_74;
        PyObject *tmp_expression_value_379;
        CHECK_OBJECT(tmp_class_creation_74__prepared);
        tmp_expression_value_379 = tmp_class_creation_74__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_379, mod_consts[46]);
        tmp_operand_value_74 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_74);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 625;

            goto try_except_handler_220;
        }
        tmp_condition_result_443 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_443 != false) {
            goto branch_yes_295;
        } else {
            goto branch_no_295;
        }
    }
    branch_yes_295:;
    {
        PyObject *tmp_raise_type_74;
        PyObject *tmp_raise_value_74;
        PyObject *tmp_left_value_74;
        PyObject *tmp_right_value_74;
        PyObject *tmp_tuple_element_292;
        PyObject *tmp_getattr_target_74;
        PyObject *tmp_getattr_attr_74;
        PyObject *tmp_getattr_default_74;
        tmp_raise_type_74 = PyExc_TypeError;
        tmp_left_value_74 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_74__metaclass);
        tmp_getattr_target_74 = tmp_class_creation_74__metaclass;
        tmp_getattr_attr_74 = mod_consts[48];
        tmp_getattr_default_74 = mod_consts[49];
        tmp_tuple_element_292 = BUILTIN_GETATTR(tmp_getattr_target_74, tmp_getattr_attr_74, tmp_getattr_default_74);
        if (tmp_tuple_element_292 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 625;

            goto try_except_handler_220;
        }
        tmp_right_value_74 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_380;
            PyObject *tmp_type_arg_148;
            PyTuple_SET_ITEM(tmp_right_value_74, 0, tmp_tuple_element_292);
            CHECK_OBJECT(tmp_class_creation_74__prepared);
            tmp_type_arg_148 = tmp_class_creation_74__prepared;
            tmp_expression_value_380 = BUILTIN_TYPE1(tmp_type_arg_148);
            assert(!(tmp_expression_value_380 == NULL));
            tmp_tuple_element_292 = LOOKUP_ATTRIBUTE(tmp_expression_value_380, mod_consts[48]);
            Py_DECREF(tmp_expression_value_380);
            if (tmp_tuple_element_292 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 625;

                goto tuple_build_exception_78;
            }
            PyTuple_SET_ITEM(tmp_right_value_74, 1, tmp_tuple_element_292);
        }
        goto tuple_build_noexception_78;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_78:;
        Py_DECREF(tmp_right_value_74);
        goto try_except_handler_220;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_78:;
        tmp_raise_value_74 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_74, tmp_right_value_74);
        Py_DECREF(tmp_right_value_74);
        if (tmp_raise_value_74 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 625;

            goto try_except_handler_220;
        }
        exception_type = tmp_raise_type_74;
        Py_INCREF(tmp_raise_type_74);
        exception_value = tmp_raise_value_74;
        exception_lineno = 625;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_220;
    }
    branch_no_295:;
    goto branch_end_294;
    branch_no_294:;
    {
        PyObject *tmp_assign_source_594;
        tmp_assign_source_594 = PyDict_New();
        assert(tmp_class_creation_74__prepared == NULL);
        tmp_class_creation_74__prepared = tmp_assign_source_594;
    }
    branch_end_294:;
    {
        PyObject *tmp_assign_source_595;
        {
            PyObject *tmp_set_locals_74;
            CHECK_OBJECT(tmp_class_creation_74__prepared);
            tmp_set_locals_74 = tmp_class_creation_74__prepared;
            locals_botocore$exceptions$$$class__74_SSOError_625 = tmp_set_locals_74;
            Py_INCREF(tmp_set_locals_74);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__74_SSOError_625, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 625;

            goto try_except_handler_222;
        }
        tmp_dictset_value = mod_consts[250];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__74_SSOError_625, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 625;

            goto try_except_handler_222;
        }
        if (isFrameUnusable(cache_frame_fa16ea551b7dda4ad6b1c9626ca18308_68)) {
            Py_XDECREF(cache_frame_fa16ea551b7dda4ad6b1c9626ca18308_68);

#if _DEBUG_REFCOUNTS
            if (cache_frame_fa16ea551b7dda4ad6b1c9626ca18308_68 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_fa16ea551b7dda4ad6b1c9626ca18308_68 = MAKE_FUNCTION_FRAME(codeobj_fa16ea551b7dda4ad6b1c9626ca18308, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_fa16ea551b7dda4ad6b1c9626ca18308_68->m_type_description == NULL);
        frame_fa16ea551b7dda4ad6b1c9626ca18308_68 = cache_frame_fa16ea551b7dda4ad6b1c9626ca18308_68;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_fa16ea551b7dda4ad6b1c9626ca18308_68);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_fa16ea551b7dda4ad6b1c9626ca18308_68) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[251];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__74_SSOError_625, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 626;
            type_description_2 = "o";
            goto frame_exception_exit_68;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_fa16ea551b7dda4ad6b1c9626ca18308_68);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_67;

        frame_exception_exit_68:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_fa16ea551b7dda4ad6b1c9626ca18308_68);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_fa16ea551b7dda4ad6b1c9626ca18308_68, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_fa16ea551b7dda4ad6b1c9626ca18308_68->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_fa16ea551b7dda4ad6b1c9626ca18308_68, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_fa16ea551b7dda4ad6b1c9626ca18308_68,
            type_description_2,
            outline_73_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_fa16ea551b7dda4ad6b1c9626ca18308_68 == cache_frame_fa16ea551b7dda4ad6b1c9626ca18308_68) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_fa16ea551b7dda4ad6b1c9626ca18308_68);
            cache_frame_fa16ea551b7dda4ad6b1c9626ca18308_68 = NULL;
        }

        assertFrameObject(frame_fa16ea551b7dda4ad6b1c9626ca18308_68);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_67;

        frame_no_exception_67:;
        goto skip_nested_handling_67;
        nested_frame_exit_67:;

        goto try_except_handler_222;
        skip_nested_handling_67:;
        {
            nuitka_bool tmp_condition_result_444;
            PyObject *tmp_cmp_expr_left_74;
            PyObject *tmp_cmp_expr_right_74;
            CHECK_OBJECT(tmp_class_creation_74__bases);
            tmp_cmp_expr_left_74 = tmp_class_creation_74__bases;
            CHECK_OBJECT(tmp_class_creation_74__bases_orig);
            tmp_cmp_expr_right_74 = tmp_class_creation_74__bases_orig;
            tmp_condition_result_444 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_74, tmp_cmp_expr_right_74);
            if (tmp_condition_result_444 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 625;

                goto try_except_handler_222;
            }
            if (tmp_condition_result_444 == NUITKA_BOOL_TRUE) {
                goto branch_yes_296;
            } else {
                goto branch_no_296;
            }
            assert(tmp_condition_result_444 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_296:;
        CHECK_OBJECT(tmp_class_creation_74__bases_orig);
        tmp_dictset_value = tmp_class_creation_74__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__74_SSOError_625, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 625;

            goto try_except_handler_222;
        }
        branch_no_296:;
        {
            PyObject *tmp_assign_source_596;
            PyObject *tmp_called_value_148;
            PyObject *tmp_args_value_148;
            PyObject *tmp_tuple_element_293;
            PyObject *tmp_kwargs_value_148;
            CHECK_OBJECT(tmp_class_creation_74__metaclass);
            tmp_called_value_148 = tmp_class_creation_74__metaclass;
            tmp_tuple_element_293 = mod_consts[250];
            tmp_args_value_148 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_148, 0, tmp_tuple_element_293);
            CHECK_OBJECT(tmp_class_creation_74__bases);
            tmp_tuple_element_293 = tmp_class_creation_74__bases;
            PyTuple_SET_ITEM0(tmp_args_value_148, 1, tmp_tuple_element_293);
            tmp_tuple_element_293 = locals_botocore$exceptions$$$class__74_SSOError_625;
            PyTuple_SET_ITEM0(tmp_args_value_148, 2, tmp_tuple_element_293);
            CHECK_OBJECT(tmp_class_creation_74__class_decl_dict);
            tmp_kwargs_value_148 = tmp_class_creation_74__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 625;
            tmp_assign_source_596 = CALL_FUNCTION(tmp_called_value_148, tmp_args_value_148, tmp_kwargs_value_148);
            Py_DECREF(tmp_args_value_148);
            if (tmp_assign_source_596 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 625;

                goto try_except_handler_222;
            }
            assert(outline_73_var___class__ == NULL);
            outline_73_var___class__ = tmp_assign_source_596;
        }
        CHECK_OBJECT(outline_73_var___class__);
        tmp_assign_source_595 = outline_73_var___class__;
        Py_INCREF(tmp_assign_source_595);
        goto try_return_handler_222;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_222:;
        Py_DECREF(locals_botocore$exceptions$$$class__74_SSOError_625);
        locals_botocore$exceptions$$$class__74_SSOError_625 = NULL;
        goto try_return_handler_221;
        // Exception handler code:
        try_except_handler_222:;
        exception_keeper_type_220 = exception_type;
        exception_keeper_value_220 = exception_value;
        exception_keeper_tb_220 = exception_tb;
        exception_keeper_lineno_220 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__74_SSOError_625);
        locals_botocore$exceptions$$$class__74_SSOError_625 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_220;
        exception_value = exception_keeper_value_220;
        exception_tb = exception_keeper_tb_220;
        exception_lineno = exception_keeper_lineno_220;

        goto try_except_handler_221;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_221:;
        CHECK_OBJECT(outline_73_var___class__);
        Py_DECREF(outline_73_var___class__);
        outline_73_var___class__ = NULL;
        goto outline_result_74;
        // Exception handler code:
        try_except_handler_221:;
        exception_keeper_type_221 = exception_type;
        exception_keeper_value_221 = exception_value;
        exception_keeper_tb_221 = exception_tb;
        exception_keeper_lineno_221 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_221;
        exception_value = exception_keeper_value_221;
        exception_tb = exception_keeper_tb_221;
        exception_lineno = exception_keeper_lineno_221;

        goto outline_exception_74;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_74:;
        exception_lineno = 625;
        goto try_except_handler_220;
        outline_result_74:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[250], tmp_assign_source_595);
    }
    goto try_end_74;
    // Exception handler code:
    try_except_handler_220:;
    exception_keeper_type_222 = exception_type;
    exception_keeper_value_222 = exception_value;
    exception_keeper_tb_222 = exception_tb;
    exception_keeper_lineno_222 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_74__bases_orig);
    tmp_class_creation_74__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_74__bases);
    tmp_class_creation_74__bases = NULL;
    Py_XDECREF(tmp_class_creation_74__class_decl_dict);
    tmp_class_creation_74__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_74__metaclass);
    tmp_class_creation_74__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_74__prepared);
    tmp_class_creation_74__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_222;
    exception_value = exception_keeper_value_222;
    exception_tb = exception_keeper_tb_222;
    exception_lineno = exception_keeper_lineno_222;

    goto frame_exception_exit_1;
    // End of try:
    try_end_74:;
    CHECK_OBJECT(tmp_class_creation_74__bases_orig);
    Py_DECREF(tmp_class_creation_74__bases_orig);
    tmp_class_creation_74__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_74__bases);
    Py_DECREF(tmp_class_creation_74__bases);
    tmp_class_creation_74__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_74__class_decl_dict);
    Py_DECREF(tmp_class_creation_74__class_decl_dict);
    tmp_class_creation_74__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_74__metaclass);
    Py_DECREF(tmp_class_creation_74__metaclass);
    tmp_class_creation_74__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_74__prepared);
    Py_DECREF(tmp_class_creation_74__prepared);
    tmp_class_creation_74__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_597;
        PyObject *tmp_tuple_element_294;
        tmp_tuple_element_294 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[250]);

        if (unlikely(tmp_tuple_element_294 == NULL)) {
            tmp_tuple_element_294 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[250]);
        }

        if (tmp_tuple_element_294 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 629;

            goto try_except_handler_223;
        }
        tmp_assign_source_597 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_597, 0, tmp_tuple_element_294);
        assert(tmp_class_creation_75__bases_orig == NULL);
        tmp_class_creation_75__bases_orig = tmp_assign_source_597;
    }
    {
        PyObject *tmp_assign_source_598;
        PyObject *tmp_dircall_arg1_75;
        CHECK_OBJECT(tmp_class_creation_75__bases_orig);
        tmp_dircall_arg1_75 = tmp_class_creation_75__bases_orig;
        Py_INCREF(tmp_dircall_arg1_75);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_75};
            tmp_assign_source_598 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_598 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 629;

            goto try_except_handler_223;
        }
        assert(tmp_class_creation_75__bases == NULL);
        tmp_class_creation_75__bases = tmp_assign_source_598;
    }
    {
        PyObject *tmp_assign_source_599;
        tmp_assign_source_599 = PyDict_New();
        assert(tmp_class_creation_75__class_decl_dict == NULL);
        tmp_class_creation_75__class_decl_dict = tmp_assign_source_599;
    }
    {
        PyObject *tmp_assign_source_600;
        PyObject *tmp_metaclass_value_75;
        bool tmp_condition_result_445;
        PyObject *tmp_key_value_223;
        PyObject *tmp_dict_arg_value_223;
        PyObject *tmp_dict_arg_value_224;
        PyObject *tmp_key_value_224;
        nuitka_bool tmp_condition_result_446;
        int tmp_truth_name_75;
        PyObject *tmp_type_arg_149;
        PyObject *tmp_expression_value_381;
        PyObject *tmp_subscript_value_75;
        PyObject *tmp_bases_value_75;
        tmp_key_value_223 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_75__class_decl_dict);
        tmp_dict_arg_value_223 = tmp_class_creation_75__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_223, tmp_key_value_223);
        assert(!(tmp_res == -1));
        tmp_condition_result_445 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_445 != false) {
            goto condexpr_true_149;
        } else {
            goto condexpr_false_149;
        }
        condexpr_true_149:;
        CHECK_OBJECT(tmp_class_creation_75__class_decl_dict);
        tmp_dict_arg_value_224 = tmp_class_creation_75__class_decl_dict;
        tmp_key_value_224 = mod_consts[43];
        tmp_metaclass_value_75 = DICT_GET_ITEM0(tmp_dict_arg_value_224, tmp_key_value_224);
        if (tmp_metaclass_value_75 == NULL) {
            tmp_metaclass_value_75 = Py_None;
        }
        assert(!(tmp_metaclass_value_75 == NULL));
        Py_INCREF(tmp_metaclass_value_75);
        goto condexpr_end_149;
        condexpr_false_149:;
        CHECK_OBJECT(tmp_class_creation_75__bases);
        tmp_truth_name_75 = CHECK_IF_TRUE(tmp_class_creation_75__bases);
        if (tmp_truth_name_75 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 629;

            goto try_except_handler_223;
        }
        tmp_condition_result_446 = tmp_truth_name_75 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_446 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_150;
        } else {
            goto condexpr_false_150;
        }
        condexpr_true_150:;
        CHECK_OBJECT(tmp_class_creation_75__bases);
        tmp_expression_value_381 = tmp_class_creation_75__bases;
        tmp_subscript_value_75 = mod_consts[36];
        tmp_type_arg_149 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_381, tmp_subscript_value_75, 0);
        if (tmp_type_arg_149 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 629;

            goto try_except_handler_223;
        }
        tmp_metaclass_value_75 = BUILTIN_TYPE1(tmp_type_arg_149);
        Py_DECREF(tmp_type_arg_149);
        if (tmp_metaclass_value_75 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 629;

            goto try_except_handler_223;
        }
        goto condexpr_end_150;
        condexpr_false_150:;
        tmp_metaclass_value_75 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_75);
        condexpr_end_150:;
        condexpr_end_149:;
        CHECK_OBJECT(tmp_class_creation_75__bases);
        tmp_bases_value_75 = tmp_class_creation_75__bases;
        tmp_assign_source_600 = SELECT_METACLASS(tmp_metaclass_value_75, tmp_bases_value_75);
        Py_DECREF(tmp_metaclass_value_75);
        if (tmp_assign_source_600 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 629;

            goto try_except_handler_223;
        }
        assert(tmp_class_creation_75__metaclass == NULL);
        tmp_class_creation_75__metaclass = tmp_assign_source_600;
    }
    {
        bool tmp_condition_result_447;
        PyObject *tmp_key_value_225;
        PyObject *tmp_dict_arg_value_225;
        tmp_key_value_225 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_75__class_decl_dict);
        tmp_dict_arg_value_225 = tmp_class_creation_75__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_225, tmp_key_value_225);
        assert(!(tmp_res == -1));
        tmp_condition_result_447 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_447 != false) {
            goto branch_yes_297;
        } else {
            goto branch_no_297;
        }
    }
    branch_yes_297:;
    CHECK_OBJECT(tmp_class_creation_75__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_75__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 629;

        goto try_except_handler_223;
    }
    branch_no_297:;
    {
        nuitka_bool tmp_condition_result_448;
        PyObject *tmp_expression_value_382;
        CHECK_OBJECT(tmp_class_creation_75__metaclass);
        tmp_expression_value_382 = tmp_class_creation_75__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_382, mod_consts[44]);
        tmp_condition_result_448 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_448 == NUITKA_BOOL_TRUE) {
            goto branch_yes_298;
        } else {
            goto branch_no_298;
        }
    }
    branch_yes_298:;
    {
        PyObject *tmp_assign_source_601;
        PyObject *tmp_called_value_149;
        PyObject *tmp_expression_value_383;
        PyObject *tmp_args_value_149;
        PyObject *tmp_tuple_element_295;
        PyObject *tmp_kwargs_value_149;
        CHECK_OBJECT(tmp_class_creation_75__metaclass);
        tmp_expression_value_383 = tmp_class_creation_75__metaclass;
        tmp_called_value_149 = LOOKUP_ATTRIBUTE(tmp_expression_value_383, mod_consts[44]);
        if (tmp_called_value_149 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 629;

            goto try_except_handler_223;
        }
        tmp_tuple_element_295 = mod_consts[252];
        tmp_args_value_149 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_149, 0, tmp_tuple_element_295);
        CHECK_OBJECT(tmp_class_creation_75__bases);
        tmp_tuple_element_295 = tmp_class_creation_75__bases;
        PyTuple_SET_ITEM0(tmp_args_value_149, 1, tmp_tuple_element_295);
        CHECK_OBJECT(tmp_class_creation_75__class_decl_dict);
        tmp_kwargs_value_149 = tmp_class_creation_75__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 629;
        tmp_assign_source_601 = CALL_FUNCTION(tmp_called_value_149, tmp_args_value_149, tmp_kwargs_value_149);
        Py_DECREF(tmp_called_value_149);
        Py_DECREF(tmp_args_value_149);
        if (tmp_assign_source_601 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 629;

            goto try_except_handler_223;
        }
        assert(tmp_class_creation_75__prepared == NULL);
        tmp_class_creation_75__prepared = tmp_assign_source_601;
    }
    {
        bool tmp_condition_result_449;
        PyObject *tmp_operand_value_75;
        PyObject *tmp_expression_value_384;
        CHECK_OBJECT(tmp_class_creation_75__prepared);
        tmp_expression_value_384 = tmp_class_creation_75__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_384, mod_consts[46]);
        tmp_operand_value_75 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_75);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 629;

            goto try_except_handler_223;
        }
        tmp_condition_result_449 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_449 != false) {
            goto branch_yes_299;
        } else {
            goto branch_no_299;
        }
    }
    branch_yes_299:;
    {
        PyObject *tmp_raise_type_75;
        PyObject *tmp_raise_value_75;
        PyObject *tmp_left_value_75;
        PyObject *tmp_right_value_75;
        PyObject *tmp_tuple_element_296;
        PyObject *tmp_getattr_target_75;
        PyObject *tmp_getattr_attr_75;
        PyObject *tmp_getattr_default_75;
        tmp_raise_type_75 = PyExc_TypeError;
        tmp_left_value_75 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_75__metaclass);
        tmp_getattr_target_75 = tmp_class_creation_75__metaclass;
        tmp_getattr_attr_75 = mod_consts[48];
        tmp_getattr_default_75 = mod_consts[49];
        tmp_tuple_element_296 = BUILTIN_GETATTR(tmp_getattr_target_75, tmp_getattr_attr_75, tmp_getattr_default_75);
        if (tmp_tuple_element_296 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 629;

            goto try_except_handler_223;
        }
        tmp_right_value_75 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_385;
            PyObject *tmp_type_arg_150;
            PyTuple_SET_ITEM(tmp_right_value_75, 0, tmp_tuple_element_296);
            CHECK_OBJECT(tmp_class_creation_75__prepared);
            tmp_type_arg_150 = tmp_class_creation_75__prepared;
            tmp_expression_value_385 = BUILTIN_TYPE1(tmp_type_arg_150);
            assert(!(tmp_expression_value_385 == NULL));
            tmp_tuple_element_296 = LOOKUP_ATTRIBUTE(tmp_expression_value_385, mod_consts[48]);
            Py_DECREF(tmp_expression_value_385);
            if (tmp_tuple_element_296 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 629;

                goto tuple_build_exception_79;
            }
            PyTuple_SET_ITEM(tmp_right_value_75, 1, tmp_tuple_element_296);
        }
        goto tuple_build_noexception_79;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_79:;
        Py_DECREF(tmp_right_value_75);
        goto try_except_handler_223;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_79:;
        tmp_raise_value_75 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_75, tmp_right_value_75);
        Py_DECREF(tmp_right_value_75);
        if (tmp_raise_value_75 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 629;

            goto try_except_handler_223;
        }
        exception_type = tmp_raise_type_75;
        Py_INCREF(tmp_raise_type_75);
        exception_value = tmp_raise_value_75;
        exception_lineno = 629;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_223;
    }
    branch_no_299:;
    goto branch_end_298;
    branch_no_298:;
    {
        PyObject *tmp_assign_source_602;
        tmp_assign_source_602 = PyDict_New();
        assert(tmp_class_creation_75__prepared == NULL);
        tmp_class_creation_75__prepared = tmp_assign_source_602;
    }
    branch_end_298:;
    {
        PyObject *tmp_assign_source_603;
        {
            PyObject *tmp_set_locals_75;
            CHECK_OBJECT(tmp_class_creation_75__prepared);
            tmp_set_locals_75 = tmp_class_creation_75__prepared;
            locals_botocore$exceptions$$$class__75_SSOTokenLoadError_629 = tmp_set_locals_75;
            Py_INCREF(tmp_set_locals_75);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__75_SSOTokenLoadError_629, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 629;

            goto try_except_handler_225;
        }
        tmp_dictset_value = mod_consts[252];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__75_SSOTokenLoadError_629, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 629;

            goto try_except_handler_225;
        }
        if (isFrameUnusable(cache_frame_c2e1c09b78aa5299b3781c48626a546b_69)) {
            Py_XDECREF(cache_frame_c2e1c09b78aa5299b3781c48626a546b_69);

#if _DEBUG_REFCOUNTS
            if (cache_frame_c2e1c09b78aa5299b3781c48626a546b_69 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_c2e1c09b78aa5299b3781c48626a546b_69 = MAKE_FUNCTION_FRAME(codeobj_c2e1c09b78aa5299b3781c48626a546b, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_c2e1c09b78aa5299b3781c48626a546b_69->m_type_description == NULL);
        frame_c2e1c09b78aa5299b3781c48626a546b_69 = cache_frame_c2e1c09b78aa5299b3781c48626a546b_69;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_c2e1c09b78aa5299b3781c48626a546b_69);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_c2e1c09b78aa5299b3781c48626a546b_69) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[253];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__75_SSOTokenLoadError_629, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 630;
            type_description_2 = "o";
            goto frame_exception_exit_69;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_c2e1c09b78aa5299b3781c48626a546b_69);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_68;

        frame_exception_exit_69:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_c2e1c09b78aa5299b3781c48626a546b_69);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_c2e1c09b78aa5299b3781c48626a546b_69, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_c2e1c09b78aa5299b3781c48626a546b_69->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_c2e1c09b78aa5299b3781c48626a546b_69, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_c2e1c09b78aa5299b3781c48626a546b_69,
            type_description_2,
            outline_74_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_c2e1c09b78aa5299b3781c48626a546b_69 == cache_frame_c2e1c09b78aa5299b3781c48626a546b_69) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_c2e1c09b78aa5299b3781c48626a546b_69);
            cache_frame_c2e1c09b78aa5299b3781c48626a546b_69 = NULL;
        }

        assertFrameObject(frame_c2e1c09b78aa5299b3781c48626a546b_69);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_68;

        frame_no_exception_68:;
        goto skip_nested_handling_68;
        nested_frame_exit_68:;

        goto try_except_handler_225;
        skip_nested_handling_68:;
        {
            nuitka_bool tmp_condition_result_450;
            PyObject *tmp_cmp_expr_left_75;
            PyObject *tmp_cmp_expr_right_75;
            CHECK_OBJECT(tmp_class_creation_75__bases);
            tmp_cmp_expr_left_75 = tmp_class_creation_75__bases;
            CHECK_OBJECT(tmp_class_creation_75__bases_orig);
            tmp_cmp_expr_right_75 = tmp_class_creation_75__bases_orig;
            tmp_condition_result_450 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_75, tmp_cmp_expr_right_75);
            if (tmp_condition_result_450 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 629;

                goto try_except_handler_225;
            }
            if (tmp_condition_result_450 == NUITKA_BOOL_TRUE) {
                goto branch_yes_300;
            } else {
                goto branch_no_300;
            }
            assert(tmp_condition_result_450 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_300:;
        CHECK_OBJECT(tmp_class_creation_75__bases_orig);
        tmp_dictset_value = tmp_class_creation_75__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__75_SSOTokenLoadError_629, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 629;

            goto try_except_handler_225;
        }
        branch_no_300:;
        {
            PyObject *tmp_assign_source_604;
            PyObject *tmp_called_value_150;
            PyObject *tmp_args_value_150;
            PyObject *tmp_tuple_element_297;
            PyObject *tmp_kwargs_value_150;
            CHECK_OBJECT(tmp_class_creation_75__metaclass);
            tmp_called_value_150 = tmp_class_creation_75__metaclass;
            tmp_tuple_element_297 = mod_consts[252];
            tmp_args_value_150 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_150, 0, tmp_tuple_element_297);
            CHECK_OBJECT(tmp_class_creation_75__bases);
            tmp_tuple_element_297 = tmp_class_creation_75__bases;
            PyTuple_SET_ITEM0(tmp_args_value_150, 1, tmp_tuple_element_297);
            tmp_tuple_element_297 = locals_botocore$exceptions$$$class__75_SSOTokenLoadError_629;
            PyTuple_SET_ITEM0(tmp_args_value_150, 2, tmp_tuple_element_297);
            CHECK_OBJECT(tmp_class_creation_75__class_decl_dict);
            tmp_kwargs_value_150 = tmp_class_creation_75__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 629;
            tmp_assign_source_604 = CALL_FUNCTION(tmp_called_value_150, tmp_args_value_150, tmp_kwargs_value_150);
            Py_DECREF(tmp_args_value_150);
            if (tmp_assign_source_604 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 629;

                goto try_except_handler_225;
            }
            assert(outline_74_var___class__ == NULL);
            outline_74_var___class__ = tmp_assign_source_604;
        }
        CHECK_OBJECT(outline_74_var___class__);
        tmp_assign_source_603 = outline_74_var___class__;
        Py_INCREF(tmp_assign_source_603);
        goto try_return_handler_225;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_225:;
        Py_DECREF(locals_botocore$exceptions$$$class__75_SSOTokenLoadError_629);
        locals_botocore$exceptions$$$class__75_SSOTokenLoadError_629 = NULL;
        goto try_return_handler_224;
        // Exception handler code:
        try_except_handler_225:;
        exception_keeper_type_223 = exception_type;
        exception_keeper_value_223 = exception_value;
        exception_keeper_tb_223 = exception_tb;
        exception_keeper_lineno_223 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__75_SSOTokenLoadError_629);
        locals_botocore$exceptions$$$class__75_SSOTokenLoadError_629 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_223;
        exception_value = exception_keeper_value_223;
        exception_tb = exception_keeper_tb_223;
        exception_lineno = exception_keeper_lineno_223;

        goto try_except_handler_224;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_224:;
        CHECK_OBJECT(outline_74_var___class__);
        Py_DECREF(outline_74_var___class__);
        outline_74_var___class__ = NULL;
        goto outline_result_75;
        // Exception handler code:
        try_except_handler_224:;
        exception_keeper_type_224 = exception_type;
        exception_keeper_value_224 = exception_value;
        exception_keeper_tb_224 = exception_tb;
        exception_keeper_lineno_224 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_224;
        exception_value = exception_keeper_value_224;
        exception_tb = exception_keeper_tb_224;
        exception_lineno = exception_keeper_lineno_224;

        goto outline_exception_75;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_75:;
        exception_lineno = 629;
        goto try_except_handler_223;
        outline_result_75:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[252], tmp_assign_source_603);
    }
    goto try_end_75;
    // Exception handler code:
    try_except_handler_223:;
    exception_keeper_type_225 = exception_type;
    exception_keeper_value_225 = exception_value;
    exception_keeper_tb_225 = exception_tb;
    exception_keeper_lineno_225 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_75__bases_orig);
    tmp_class_creation_75__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_75__bases);
    tmp_class_creation_75__bases = NULL;
    Py_XDECREF(tmp_class_creation_75__class_decl_dict);
    tmp_class_creation_75__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_75__metaclass);
    tmp_class_creation_75__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_75__prepared);
    tmp_class_creation_75__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_225;
    exception_value = exception_keeper_value_225;
    exception_tb = exception_keeper_tb_225;
    exception_lineno = exception_keeper_lineno_225;

    goto frame_exception_exit_1;
    // End of try:
    try_end_75:;
    CHECK_OBJECT(tmp_class_creation_75__bases_orig);
    Py_DECREF(tmp_class_creation_75__bases_orig);
    tmp_class_creation_75__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_75__bases);
    Py_DECREF(tmp_class_creation_75__bases);
    tmp_class_creation_75__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_75__class_decl_dict);
    Py_DECREF(tmp_class_creation_75__class_decl_dict);
    tmp_class_creation_75__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_75__metaclass);
    Py_DECREF(tmp_class_creation_75__metaclass);
    tmp_class_creation_75__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_75__prepared);
    Py_DECREF(tmp_class_creation_75__prepared);
    tmp_class_creation_75__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_605;
        PyObject *tmp_tuple_element_298;
        tmp_tuple_element_298 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[250]);

        if (unlikely(tmp_tuple_element_298 == NULL)) {
            tmp_tuple_element_298 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[250]);
        }

        if (tmp_tuple_element_298 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 633;

            goto try_except_handler_226;
        }
        tmp_assign_source_605 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_605, 0, tmp_tuple_element_298);
        assert(tmp_class_creation_76__bases_orig == NULL);
        tmp_class_creation_76__bases_orig = tmp_assign_source_605;
    }
    {
        PyObject *tmp_assign_source_606;
        PyObject *tmp_dircall_arg1_76;
        CHECK_OBJECT(tmp_class_creation_76__bases_orig);
        tmp_dircall_arg1_76 = tmp_class_creation_76__bases_orig;
        Py_INCREF(tmp_dircall_arg1_76);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_76};
            tmp_assign_source_606 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_606 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 633;

            goto try_except_handler_226;
        }
        assert(tmp_class_creation_76__bases == NULL);
        tmp_class_creation_76__bases = tmp_assign_source_606;
    }
    {
        PyObject *tmp_assign_source_607;
        tmp_assign_source_607 = PyDict_New();
        assert(tmp_class_creation_76__class_decl_dict == NULL);
        tmp_class_creation_76__class_decl_dict = tmp_assign_source_607;
    }
    {
        PyObject *tmp_assign_source_608;
        PyObject *tmp_metaclass_value_76;
        bool tmp_condition_result_451;
        PyObject *tmp_key_value_226;
        PyObject *tmp_dict_arg_value_226;
        PyObject *tmp_dict_arg_value_227;
        PyObject *tmp_key_value_227;
        nuitka_bool tmp_condition_result_452;
        int tmp_truth_name_76;
        PyObject *tmp_type_arg_151;
        PyObject *tmp_expression_value_386;
        PyObject *tmp_subscript_value_76;
        PyObject *tmp_bases_value_76;
        tmp_key_value_226 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_76__class_decl_dict);
        tmp_dict_arg_value_226 = tmp_class_creation_76__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_226, tmp_key_value_226);
        assert(!(tmp_res == -1));
        tmp_condition_result_451 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_451 != false) {
            goto condexpr_true_151;
        } else {
            goto condexpr_false_151;
        }
        condexpr_true_151:;
        CHECK_OBJECT(tmp_class_creation_76__class_decl_dict);
        tmp_dict_arg_value_227 = tmp_class_creation_76__class_decl_dict;
        tmp_key_value_227 = mod_consts[43];
        tmp_metaclass_value_76 = DICT_GET_ITEM0(tmp_dict_arg_value_227, tmp_key_value_227);
        if (tmp_metaclass_value_76 == NULL) {
            tmp_metaclass_value_76 = Py_None;
        }
        assert(!(tmp_metaclass_value_76 == NULL));
        Py_INCREF(tmp_metaclass_value_76);
        goto condexpr_end_151;
        condexpr_false_151:;
        CHECK_OBJECT(tmp_class_creation_76__bases);
        tmp_truth_name_76 = CHECK_IF_TRUE(tmp_class_creation_76__bases);
        if (tmp_truth_name_76 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 633;

            goto try_except_handler_226;
        }
        tmp_condition_result_452 = tmp_truth_name_76 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_452 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_152;
        } else {
            goto condexpr_false_152;
        }
        condexpr_true_152:;
        CHECK_OBJECT(tmp_class_creation_76__bases);
        tmp_expression_value_386 = tmp_class_creation_76__bases;
        tmp_subscript_value_76 = mod_consts[36];
        tmp_type_arg_151 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_386, tmp_subscript_value_76, 0);
        if (tmp_type_arg_151 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 633;

            goto try_except_handler_226;
        }
        tmp_metaclass_value_76 = BUILTIN_TYPE1(tmp_type_arg_151);
        Py_DECREF(tmp_type_arg_151);
        if (tmp_metaclass_value_76 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 633;

            goto try_except_handler_226;
        }
        goto condexpr_end_152;
        condexpr_false_152:;
        tmp_metaclass_value_76 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_76);
        condexpr_end_152:;
        condexpr_end_151:;
        CHECK_OBJECT(tmp_class_creation_76__bases);
        tmp_bases_value_76 = tmp_class_creation_76__bases;
        tmp_assign_source_608 = SELECT_METACLASS(tmp_metaclass_value_76, tmp_bases_value_76);
        Py_DECREF(tmp_metaclass_value_76);
        if (tmp_assign_source_608 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 633;

            goto try_except_handler_226;
        }
        assert(tmp_class_creation_76__metaclass == NULL);
        tmp_class_creation_76__metaclass = tmp_assign_source_608;
    }
    {
        bool tmp_condition_result_453;
        PyObject *tmp_key_value_228;
        PyObject *tmp_dict_arg_value_228;
        tmp_key_value_228 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_76__class_decl_dict);
        tmp_dict_arg_value_228 = tmp_class_creation_76__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_228, tmp_key_value_228);
        assert(!(tmp_res == -1));
        tmp_condition_result_453 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_453 != false) {
            goto branch_yes_301;
        } else {
            goto branch_no_301;
        }
    }
    branch_yes_301:;
    CHECK_OBJECT(tmp_class_creation_76__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_76__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 633;

        goto try_except_handler_226;
    }
    branch_no_301:;
    {
        nuitka_bool tmp_condition_result_454;
        PyObject *tmp_expression_value_387;
        CHECK_OBJECT(tmp_class_creation_76__metaclass);
        tmp_expression_value_387 = tmp_class_creation_76__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_387, mod_consts[44]);
        tmp_condition_result_454 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_454 == NUITKA_BOOL_TRUE) {
            goto branch_yes_302;
        } else {
            goto branch_no_302;
        }
    }
    branch_yes_302:;
    {
        PyObject *tmp_assign_source_609;
        PyObject *tmp_called_value_151;
        PyObject *tmp_expression_value_388;
        PyObject *tmp_args_value_151;
        PyObject *tmp_tuple_element_299;
        PyObject *tmp_kwargs_value_151;
        CHECK_OBJECT(tmp_class_creation_76__metaclass);
        tmp_expression_value_388 = tmp_class_creation_76__metaclass;
        tmp_called_value_151 = LOOKUP_ATTRIBUTE(tmp_expression_value_388, mod_consts[44]);
        if (tmp_called_value_151 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 633;

            goto try_except_handler_226;
        }
        tmp_tuple_element_299 = mod_consts[254];
        tmp_args_value_151 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_151, 0, tmp_tuple_element_299);
        CHECK_OBJECT(tmp_class_creation_76__bases);
        tmp_tuple_element_299 = tmp_class_creation_76__bases;
        PyTuple_SET_ITEM0(tmp_args_value_151, 1, tmp_tuple_element_299);
        CHECK_OBJECT(tmp_class_creation_76__class_decl_dict);
        tmp_kwargs_value_151 = tmp_class_creation_76__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 633;
        tmp_assign_source_609 = CALL_FUNCTION(tmp_called_value_151, tmp_args_value_151, tmp_kwargs_value_151);
        Py_DECREF(tmp_called_value_151);
        Py_DECREF(tmp_args_value_151);
        if (tmp_assign_source_609 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 633;

            goto try_except_handler_226;
        }
        assert(tmp_class_creation_76__prepared == NULL);
        tmp_class_creation_76__prepared = tmp_assign_source_609;
    }
    {
        bool tmp_condition_result_455;
        PyObject *tmp_operand_value_76;
        PyObject *tmp_expression_value_389;
        CHECK_OBJECT(tmp_class_creation_76__prepared);
        tmp_expression_value_389 = tmp_class_creation_76__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_389, mod_consts[46]);
        tmp_operand_value_76 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_76);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 633;

            goto try_except_handler_226;
        }
        tmp_condition_result_455 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_455 != false) {
            goto branch_yes_303;
        } else {
            goto branch_no_303;
        }
    }
    branch_yes_303:;
    {
        PyObject *tmp_raise_type_76;
        PyObject *tmp_raise_value_76;
        PyObject *tmp_left_value_76;
        PyObject *tmp_right_value_76;
        PyObject *tmp_tuple_element_300;
        PyObject *tmp_getattr_target_76;
        PyObject *tmp_getattr_attr_76;
        PyObject *tmp_getattr_default_76;
        tmp_raise_type_76 = PyExc_TypeError;
        tmp_left_value_76 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_76__metaclass);
        tmp_getattr_target_76 = tmp_class_creation_76__metaclass;
        tmp_getattr_attr_76 = mod_consts[48];
        tmp_getattr_default_76 = mod_consts[49];
        tmp_tuple_element_300 = BUILTIN_GETATTR(tmp_getattr_target_76, tmp_getattr_attr_76, tmp_getattr_default_76);
        if (tmp_tuple_element_300 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 633;

            goto try_except_handler_226;
        }
        tmp_right_value_76 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_390;
            PyObject *tmp_type_arg_152;
            PyTuple_SET_ITEM(tmp_right_value_76, 0, tmp_tuple_element_300);
            CHECK_OBJECT(tmp_class_creation_76__prepared);
            tmp_type_arg_152 = tmp_class_creation_76__prepared;
            tmp_expression_value_390 = BUILTIN_TYPE1(tmp_type_arg_152);
            assert(!(tmp_expression_value_390 == NULL));
            tmp_tuple_element_300 = LOOKUP_ATTRIBUTE(tmp_expression_value_390, mod_consts[48]);
            Py_DECREF(tmp_expression_value_390);
            if (tmp_tuple_element_300 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 633;

                goto tuple_build_exception_80;
            }
            PyTuple_SET_ITEM(tmp_right_value_76, 1, tmp_tuple_element_300);
        }
        goto tuple_build_noexception_80;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_80:;
        Py_DECREF(tmp_right_value_76);
        goto try_except_handler_226;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_80:;
        tmp_raise_value_76 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_76, tmp_right_value_76);
        Py_DECREF(tmp_right_value_76);
        if (tmp_raise_value_76 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 633;

            goto try_except_handler_226;
        }
        exception_type = tmp_raise_type_76;
        Py_INCREF(tmp_raise_type_76);
        exception_value = tmp_raise_value_76;
        exception_lineno = 633;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_226;
    }
    branch_no_303:;
    goto branch_end_302;
    branch_no_302:;
    {
        PyObject *tmp_assign_source_610;
        tmp_assign_source_610 = PyDict_New();
        assert(tmp_class_creation_76__prepared == NULL);
        tmp_class_creation_76__prepared = tmp_assign_source_610;
    }
    branch_end_302:;
    {
        PyObject *tmp_assign_source_611;
        {
            PyObject *tmp_set_locals_76;
            CHECK_OBJECT(tmp_class_creation_76__prepared);
            tmp_set_locals_76 = tmp_class_creation_76__prepared;
            locals_botocore$exceptions$$$class__76_UnauthorizedSSOTokenError_633 = tmp_set_locals_76;
            Py_INCREF(tmp_set_locals_76);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__76_UnauthorizedSSOTokenError_633, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 633;

            goto try_except_handler_228;
        }
        tmp_dictset_value = mod_consts[254];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__76_UnauthorizedSSOTokenError_633, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 633;

            goto try_except_handler_228;
        }
        if (isFrameUnusable(cache_frame_e6660177ae6c191de8af8d07a1593cfb_70)) {
            Py_XDECREF(cache_frame_e6660177ae6c191de8af8d07a1593cfb_70);

#if _DEBUG_REFCOUNTS
            if (cache_frame_e6660177ae6c191de8af8d07a1593cfb_70 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_e6660177ae6c191de8af8d07a1593cfb_70 = MAKE_FUNCTION_FRAME(codeobj_e6660177ae6c191de8af8d07a1593cfb, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_e6660177ae6c191de8af8d07a1593cfb_70->m_type_description == NULL);
        frame_e6660177ae6c191de8af8d07a1593cfb_70 = cache_frame_e6660177ae6c191de8af8d07a1593cfb_70;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_e6660177ae6c191de8af8d07a1593cfb_70);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_e6660177ae6c191de8af8d07a1593cfb_70) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[255];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__76_UnauthorizedSSOTokenError_633, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 634;
            type_description_2 = "o";
            goto frame_exception_exit_70;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e6660177ae6c191de8af8d07a1593cfb_70);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_69;

        frame_exception_exit_70:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e6660177ae6c191de8af8d07a1593cfb_70);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_e6660177ae6c191de8af8d07a1593cfb_70, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_e6660177ae6c191de8af8d07a1593cfb_70->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_e6660177ae6c191de8af8d07a1593cfb_70, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_e6660177ae6c191de8af8d07a1593cfb_70,
            type_description_2,
            outline_75_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_e6660177ae6c191de8af8d07a1593cfb_70 == cache_frame_e6660177ae6c191de8af8d07a1593cfb_70) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_e6660177ae6c191de8af8d07a1593cfb_70);
            cache_frame_e6660177ae6c191de8af8d07a1593cfb_70 = NULL;
        }

        assertFrameObject(frame_e6660177ae6c191de8af8d07a1593cfb_70);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_69;

        frame_no_exception_69:;
        goto skip_nested_handling_69;
        nested_frame_exit_69:;

        goto try_except_handler_228;
        skip_nested_handling_69:;
        {
            nuitka_bool tmp_condition_result_456;
            PyObject *tmp_cmp_expr_left_76;
            PyObject *tmp_cmp_expr_right_76;
            CHECK_OBJECT(tmp_class_creation_76__bases);
            tmp_cmp_expr_left_76 = tmp_class_creation_76__bases;
            CHECK_OBJECT(tmp_class_creation_76__bases_orig);
            tmp_cmp_expr_right_76 = tmp_class_creation_76__bases_orig;
            tmp_condition_result_456 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_76, tmp_cmp_expr_right_76);
            if (tmp_condition_result_456 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 633;

                goto try_except_handler_228;
            }
            if (tmp_condition_result_456 == NUITKA_BOOL_TRUE) {
                goto branch_yes_304;
            } else {
                goto branch_no_304;
            }
            assert(tmp_condition_result_456 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_304:;
        CHECK_OBJECT(tmp_class_creation_76__bases_orig);
        tmp_dictset_value = tmp_class_creation_76__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__76_UnauthorizedSSOTokenError_633, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 633;

            goto try_except_handler_228;
        }
        branch_no_304:;
        {
            PyObject *tmp_assign_source_612;
            PyObject *tmp_called_value_152;
            PyObject *tmp_args_value_152;
            PyObject *tmp_tuple_element_301;
            PyObject *tmp_kwargs_value_152;
            CHECK_OBJECT(tmp_class_creation_76__metaclass);
            tmp_called_value_152 = tmp_class_creation_76__metaclass;
            tmp_tuple_element_301 = mod_consts[254];
            tmp_args_value_152 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_152, 0, tmp_tuple_element_301);
            CHECK_OBJECT(tmp_class_creation_76__bases);
            tmp_tuple_element_301 = tmp_class_creation_76__bases;
            PyTuple_SET_ITEM0(tmp_args_value_152, 1, tmp_tuple_element_301);
            tmp_tuple_element_301 = locals_botocore$exceptions$$$class__76_UnauthorizedSSOTokenError_633;
            PyTuple_SET_ITEM0(tmp_args_value_152, 2, tmp_tuple_element_301);
            CHECK_OBJECT(tmp_class_creation_76__class_decl_dict);
            tmp_kwargs_value_152 = tmp_class_creation_76__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 633;
            tmp_assign_source_612 = CALL_FUNCTION(tmp_called_value_152, tmp_args_value_152, tmp_kwargs_value_152);
            Py_DECREF(tmp_args_value_152);
            if (tmp_assign_source_612 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 633;

                goto try_except_handler_228;
            }
            assert(outline_75_var___class__ == NULL);
            outline_75_var___class__ = tmp_assign_source_612;
        }
        CHECK_OBJECT(outline_75_var___class__);
        tmp_assign_source_611 = outline_75_var___class__;
        Py_INCREF(tmp_assign_source_611);
        goto try_return_handler_228;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_228:;
        Py_DECREF(locals_botocore$exceptions$$$class__76_UnauthorizedSSOTokenError_633);
        locals_botocore$exceptions$$$class__76_UnauthorizedSSOTokenError_633 = NULL;
        goto try_return_handler_227;
        // Exception handler code:
        try_except_handler_228:;
        exception_keeper_type_226 = exception_type;
        exception_keeper_value_226 = exception_value;
        exception_keeper_tb_226 = exception_tb;
        exception_keeper_lineno_226 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__76_UnauthorizedSSOTokenError_633);
        locals_botocore$exceptions$$$class__76_UnauthorizedSSOTokenError_633 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_226;
        exception_value = exception_keeper_value_226;
        exception_tb = exception_keeper_tb_226;
        exception_lineno = exception_keeper_lineno_226;

        goto try_except_handler_227;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_227:;
        CHECK_OBJECT(outline_75_var___class__);
        Py_DECREF(outline_75_var___class__);
        outline_75_var___class__ = NULL;
        goto outline_result_76;
        // Exception handler code:
        try_except_handler_227:;
        exception_keeper_type_227 = exception_type;
        exception_keeper_value_227 = exception_value;
        exception_keeper_tb_227 = exception_tb;
        exception_keeper_lineno_227 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_227;
        exception_value = exception_keeper_value_227;
        exception_tb = exception_keeper_tb_227;
        exception_lineno = exception_keeper_lineno_227;

        goto outline_exception_76;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_76:;
        exception_lineno = 633;
        goto try_except_handler_226;
        outline_result_76:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[254], tmp_assign_source_611);
    }
    goto try_end_76;
    // Exception handler code:
    try_except_handler_226:;
    exception_keeper_type_228 = exception_type;
    exception_keeper_value_228 = exception_value;
    exception_keeper_tb_228 = exception_tb;
    exception_keeper_lineno_228 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_76__bases_orig);
    tmp_class_creation_76__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_76__bases);
    tmp_class_creation_76__bases = NULL;
    Py_XDECREF(tmp_class_creation_76__class_decl_dict);
    tmp_class_creation_76__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_76__metaclass);
    tmp_class_creation_76__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_76__prepared);
    tmp_class_creation_76__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_228;
    exception_value = exception_keeper_value_228;
    exception_tb = exception_keeper_tb_228;
    exception_lineno = exception_keeper_lineno_228;

    goto frame_exception_exit_1;
    // End of try:
    try_end_76:;
    CHECK_OBJECT(tmp_class_creation_76__bases_orig);
    Py_DECREF(tmp_class_creation_76__bases_orig);
    tmp_class_creation_76__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_76__bases);
    Py_DECREF(tmp_class_creation_76__bases);
    tmp_class_creation_76__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_76__class_decl_dict);
    Py_DECREF(tmp_class_creation_76__class_decl_dict);
    tmp_class_creation_76__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_76__metaclass);
    Py_DECREF(tmp_class_creation_76__metaclass);
    tmp_class_creation_76__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_76__prepared);
    Py_DECREF(tmp_class_creation_76__prepared);
    tmp_class_creation_76__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_613;
        PyObject *tmp_tuple_element_302;
        tmp_tuple_element_302 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_302 == NULL)) {
            tmp_tuple_element_302 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_302 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 641;

            goto try_except_handler_229;
        }
        tmp_assign_source_613 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_613, 0, tmp_tuple_element_302);
        assert(tmp_class_creation_77__bases_orig == NULL);
        tmp_class_creation_77__bases_orig = tmp_assign_source_613;
    }
    {
        PyObject *tmp_assign_source_614;
        PyObject *tmp_dircall_arg1_77;
        CHECK_OBJECT(tmp_class_creation_77__bases_orig);
        tmp_dircall_arg1_77 = tmp_class_creation_77__bases_orig;
        Py_INCREF(tmp_dircall_arg1_77);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_77};
            tmp_assign_source_614 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_614 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 641;

            goto try_except_handler_229;
        }
        assert(tmp_class_creation_77__bases == NULL);
        tmp_class_creation_77__bases = tmp_assign_source_614;
    }
    {
        PyObject *tmp_assign_source_615;
        tmp_assign_source_615 = PyDict_New();
        assert(tmp_class_creation_77__class_decl_dict == NULL);
        tmp_class_creation_77__class_decl_dict = tmp_assign_source_615;
    }
    {
        PyObject *tmp_assign_source_616;
        PyObject *tmp_metaclass_value_77;
        bool tmp_condition_result_457;
        PyObject *tmp_key_value_229;
        PyObject *tmp_dict_arg_value_229;
        PyObject *tmp_dict_arg_value_230;
        PyObject *tmp_key_value_230;
        nuitka_bool tmp_condition_result_458;
        int tmp_truth_name_77;
        PyObject *tmp_type_arg_153;
        PyObject *tmp_expression_value_391;
        PyObject *tmp_subscript_value_77;
        PyObject *tmp_bases_value_77;
        tmp_key_value_229 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_77__class_decl_dict);
        tmp_dict_arg_value_229 = tmp_class_creation_77__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_229, tmp_key_value_229);
        assert(!(tmp_res == -1));
        tmp_condition_result_457 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_457 != false) {
            goto condexpr_true_153;
        } else {
            goto condexpr_false_153;
        }
        condexpr_true_153:;
        CHECK_OBJECT(tmp_class_creation_77__class_decl_dict);
        tmp_dict_arg_value_230 = tmp_class_creation_77__class_decl_dict;
        tmp_key_value_230 = mod_consts[43];
        tmp_metaclass_value_77 = DICT_GET_ITEM0(tmp_dict_arg_value_230, tmp_key_value_230);
        if (tmp_metaclass_value_77 == NULL) {
            tmp_metaclass_value_77 = Py_None;
        }
        assert(!(tmp_metaclass_value_77 == NULL));
        Py_INCREF(tmp_metaclass_value_77);
        goto condexpr_end_153;
        condexpr_false_153:;
        CHECK_OBJECT(tmp_class_creation_77__bases);
        tmp_truth_name_77 = CHECK_IF_TRUE(tmp_class_creation_77__bases);
        if (tmp_truth_name_77 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 641;

            goto try_except_handler_229;
        }
        tmp_condition_result_458 = tmp_truth_name_77 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_458 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_154;
        } else {
            goto condexpr_false_154;
        }
        condexpr_true_154:;
        CHECK_OBJECT(tmp_class_creation_77__bases);
        tmp_expression_value_391 = tmp_class_creation_77__bases;
        tmp_subscript_value_77 = mod_consts[36];
        tmp_type_arg_153 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_391, tmp_subscript_value_77, 0);
        if (tmp_type_arg_153 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 641;

            goto try_except_handler_229;
        }
        tmp_metaclass_value_77 = BUILTIN_TYPE1(tmp_type_arg_153);
        Py_DECREF(tmp_type_arg_153);
        if (tmp_metaclass_value_77 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 641;

            goto try_except_handler_229;
        }
        goto condexpr_end_154;
        condexpr_false_154:;
        tmp_metaclass_value_77 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_77);
        condexpr_end_154:;
        condexpr_end_153:;
        CHECK_OBJECT(tmp_class_creation_77__bases);
        tmp_bases_value_77 = tmp_class_creation_77__bases;
        tmp_assign_source_616 = SELECT_METACLASS(tmp_metaclass_value_77, tmp_bases_value_77);
        Py_DECREF(tmp_metaclass_value_77);
        if (tmp_assign_source_616 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 641;

            goto try_except_handler_229;
        }
        assert(tmp_class_creation_77__metaclass == NULL);
        tmp_class_creation_77__metaclass = tmp_assign_source_616;
    }
    {
        bool tmp_condition_result_459;
        PyObject *tmp_key_value_231;
        PyObject *tmp_dict_arg_value_231;
        tmp_key_value_231 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_77__class_decl_dict);
        tmp_dict_arg_value_231 = tmp_class_creation_77__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_231, tmp_key_value_231);
        assert(!(tmp_res == -1));
        tmp_condition_result_459 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_459 != false) {
            goto branch_yes_305;
        } else {
            goto branch_no_305;
        }
    }
    branch_yes_305:;
    CHECK_OBJECT(tmp_class_creation_77__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_77__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 641;

        goto try_except_handler_229;
    }
    branch_no_305:;
    {
        nuitka_bool tmp_condition_result_460;
        PyObject *tmp_expression_value_392;
        CHECK_OBJECT(tmp_class_creation_77__metaclass);
        tmp_expression_value_392 = tmp_class_creation_77__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_392, mod_consts[44]);
        tmp_condition_result_460 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_460 == NUITKA_BOOL_TRUE) {
            goto branch_yes_306;
        } else {
            goto branch_no_306;
        }
    }
    branch_yes_306:;
    {
        PyObject *tmp_assign_source_617;
        PyObject *tmp_called_value_153;
        PyObject *tmp_expression_value_393;
        PyObject *tmp_args_value_153;
        PyObject *tmp_tuple_element_303;
        PyObject *tmp_kwargs_value_153;
        CHECK_OBJECT(tmp_class_creation_77__metaclass);
        tmp_expression_value_393 = tmp_class_creation_77__metaclass;
        tmp_called_value_153 = LOOKUP_ATTRIBUTE(tmp_expression_value_393, mod_consts[44]);
        if (tmp_called_value_153 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 641;

            goto try_except_handler_229;
        }
        tmp_tuple_element_303 = mod_consts[256];
        tmp_args_value_153 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_153, 0, tmp_tuple_element_303);
        CHECK_OBJECT(tmp_class_creation_77__bases);
        tmp_tuple_element_303 = tmp_class_creation_77__bases;
        PyTuple_SET_ITEM0(tmp_args_value_153, 1, tmp_tuple_element_303);
        CHECK_OBJECT(tmp_class_creation_77__class_decl_dict);
        tmp_kwargs_value_153 = tmp_class_creation_77__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 641;
        tmp_assign_source_617 = CALL_FUNCTION(tmp_called_value_153, tmp_args_value_153, tmp_kwargs_value_153);
        Py_DECREF(tmp_called_value_153);
        Py_DECREF(tmp_args_value_153);
        if (tmp_assign_source_617 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 641;

            goto try_except_handler_229;
        }
        assert(tmp_class_creation_77__prepared == NULL);
        tmp_class_creation_77__prepared = tmp_assign_source_617;
    }
    {
        bool tmp_condition_result_461;
        PyObject *tmp_operand_value_77;
        PyObject *tmp_expression_value_394;
        CHECK_OBJECT(tmp_class_creation_77__prepared);
        tmp_expression_value_394 = tmp_class_creation_77__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_394, mod_consts[46]);
        tmp_operand_value_77 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_77);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 641;

            goto try_except_handler_229;
        }
        tmp_condition_result_461 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_461 != false) {
            goto branch_yes_307;
        } else {
            goto branch_no_307;
        }
    }
    branch_yes_307:;
    {
        PyObject *tmp_raise_type_77;
        PyObject *tmp_raise_value_77;
        PyObject *tmp_left_value_77;
        PyObject *tmp_right_value_77;
        PyObject *tmp_tuple_element_304;
        PyObject *tmp_getattr_target_77;
        PyObject *tmp_getattr_attr_77;
        PyObject *tmp_getattr_default_77;
        tmp_raise_type_77 = PyExc_TypeError;
        tmp_left_value_77 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_77__metaclass);
        tmp_getattr_target_77 = tmp_class_creation_77__metaclass;
        tmp_getattr_attr_77 = mod_consts[48];
        tmp_getattr_default_77 = mod_consts[49];
        tmp_tuple_element_304 = BUILTIN_GETATTR(tmp_getattr_target_77, tmp_getattr_attr_77, tmp_getattr_default_77);
        if (tmp_tuple_element_304 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 641;

            goto try_except_handler_229;
        }
        tmp_right_value_77 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_395;
            PyObject *tmp_type_arg_154;
            PyTuple_SET_ITEM(tmp_right_value_77, 0, tmp_tuple_element_304);
            CHECK_OBJECT(tmp_class_creation_77__prepared);
            tmp_type_arg_154 = tmp_class_creation_77__prepared;
            tmp_expression_value_395 = BUILTIN_TYPE1(tmp_type_arg_154);
            assert(!(tmp_expression_value_395 == NULL));
            tmp_tuple_element_304 = LOOKUP_ATTRIBUTE(tmp_expression_value_395, mod_consts[48]);
            Py_DECREF(tmp_expression_value_395);
            if (tmp_tuple_element_304 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 641;

                goto tuple_build_exception_81;
            }
            PyTuple_SET_ITEM(tmp_right_value_77, 1, tmp_tuple_element_304);
        }
        goto tuple_build_noexception_81;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_81:;
        Py_DECREF(tmp_right_value_77);
        goto try_except_handler_229;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_81:;
        tmp_raise_value_77 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_77, tmp_right_value_77);
        Py_DECREF(tmp_right_value_77);
        if (tmp_raise_value_77 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 641;

            goto try_except_handler_229;
        }
        exception_type = tmp_raise_type_77;
        Py_INCREF(tmp_raise_type_77);
        exception_value = tmp_raise_value_77;
        exception_lineno = 641;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_229;
    }
    branch_no_307:;
    goto branch_end_306;
    branch_no_306:;
    {
        PyObject *tmp_assign_source_618;
        tmp_assign_source_618 = PyDict_New();
        assert(tmp_class_creation_77__prepared == NULL);
        tmp_class_creation_77__prepared = tmp_assign_source_618;
    }
    branch_end_306:;
    {
        PyObject *tmp_assign_source_619;
        {
            PyObject *tmp_set_locals_77;
            CHECK_OBJECT(tmp_class_creation_77__prepared);
            tmp_set_locals_77 = tmp_class_creation_77__prepared;
            locals_botocore$exceptions$$$class__77_CapacityNotAvailableError_641 = tmp_set_locals_77;
            Py_INCREF(tmp_set_locals_77);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__77_CapacityNotAvailableError_641, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 641;

            goto try_except_handler_231;
        }
        tmp_dictset_value = mod_consts[256];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__77_CapacityNotAvailableError_641, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 641;

            goto try_except_handler_231;
        }
        if (isFrameUnusable(cache_frame_a45cd77b91b1f4fe65f618261f99e9d7_71)) {
            Py_XDECREF(cache_frame_a45cd77b91b1f4fe65f618261f99e9d7_71);

#if _DEBUG_REFCOUNTS
            if (cache_frame_a45cd77b91b1f4fe65f618261f99e9d7_71 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_a45cd77b91b1f4fe65f618261f99e9d7_71 = MAKE_FUNCTION_FRAME(codeobj_a45cd77b91b1f4fe65f618261f99e9d7, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_a45cd77b91b1f4fe65f618261f99e9d7_71->m_type_description == NULL);
        frame_a45cd77b91b1f4fe65f618261f99e9d7_71 = cache_frame_a45cd77b91b1f4fe65f618261f99e9d7_71;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_a45cd77b91b1f4fe65f618261f99e9d7_71);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_a45cd77b91b1f4fe65f618261f99e9d7_71) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[257];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__77_CapacityNotAvailableError_641, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 642;
            type_description_2 = "o";
            goto frame_exception_exit_71;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a45cd77b91b1f4fe65f618261f99e9d7_71);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_70;

        frame_exception_exit_71:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a45cd77b91b1f4fe65f618261f99e9d7_71);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_a45cd77b91b1f4fe65f618261f99e9d7_71, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_a45cd77b91b1f4fe65f618261f99e9d7_71->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_a45cd77b91b1f4fe65f618261f99e9d7_71, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_a45cd77b91b1f4fe65f618261f99e9d7_71,
            type_description_2,
            outline_76_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_a45cd77b91b1f4fe65f618261f99e9d7_71 == cache_frame_a45cd77b91b1f4fe65f618261f99e9d7_71) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_a45cd77b91b1f4fe65f618261f99e9d7_71);
            cache_frame_a45cd77b91b1f4fe65f618261f99e9d7_71 = NULL;
        }

        assertFrameObject(frame_a45cd77b91b1f4fe65f618261f99e9d7_71);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_70;

        frame_no_exception_70:;
        goto skip_nested_handling_70;
        nested_frame_exit_70:;

        goto try_except_handler_231;
        skip_nested_handling_70:;
        {
            nuitka_bool tmp_condition_result_462;
            PyObject *tmp_cmp_expr_left_77;
            PyObject *tmp_cmp_expr_right_77;
            CHECK_OBJECT(tmp_class_creation_77__bases);
            tmp_cmp_expr_left_77 = tmp_class_creation_77__bases;
            CHECK_OBJECT(tmp_class_creation_77__bases_orig);
            tmp_cmp_expr_right_77 = tmp_class_creation_77__bases_orig;
            tmp_condition_result_462 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_77, tmp_cmp_expr_right_77);
            if (tmp_condition_result_462 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 641;

                goto try_except_handler_231;
            }
            if (tmp_condition_result_462 == NUITKA_BOOL_TRUE) {
                goto branch_yes_308;
            } else {
                goto branch_no_308;
            }
            assert(tmp_condition_result_462 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_308:;
        CHECK_OBJECT(tmp_class_creation_77__bases_orig);
        tmp_dictset_value = tmp_class_creation_77__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__77_CapacityNotAvailableError_641, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 641;

            goto try_except_handler_231;
        }
        branch_no_308:;
        {
            PyObject *tmp_assign_source_620;
            PyObject *tmp_called_value_154;
            PyObject *tmp_args_value_154;
            PyObject *tmp_tuple_element_305;
            PyObject *tmp_kwargs_value_154;
            CHECK_OBJECT(tmp_class_creation_77__metaclass);
            tmp_called_value_154 = tmp_class_creation_77__metaclass;
            tmp_tuple_element_305 = mod_consts[256];
            tmp_args_value_154 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_154, 0, tmp_tuple_element_305);
            CHECK_OBJECT(tmp_class_creation_77__bases);
            tmp_tuple_element_305 = tmp_class_creation_77__bases;
            PyTuple_SET_ITEM0(tmp_args_value_154, 1, tmp_tuple_element_305);
            tmp_tuple_element_305 = locals_botocore$exceptions$$$class__77_CapacityNotAvailableError_641;
            PyTuple_SET_ITEM0(tmp_args_value_154, 2, tmp_tuple_element_305);
            CHECK_OBJECT(tmp_class_creation_77__class_decl_dict);
            tmp_kwargs_value_154 = tmp_class_creation_77__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 641;
            tmp_assign_source_620 = CALL_FUNCTION(tmp_called_value_154, tmp_args_value_154, tmp_kwargs_value_154);
            Py_DECREF(tmp_args_value_154);
            if (tmp_assign_source_620 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 641;

                goto try_except_handler_231;
            }
            assert(outline_76_var___class__ == NULL);
            outline_76_var___class__ = tmp_assign_source_620;
        }
        CHECK_OBJECT(outline_76_var___class__);
        tmp_assign_source_619 = outline_76_var___class__;
        Py_INCREF(tmp_assign_source_619);
        goto try_return_handler_231;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_231:;
        Py_DECREF(locals_botocore$exceptions$$$class__77_CapacityNotAvailableError_641);
        locals_botocore$exceptions$$$class__77_CapacityNotAvailableError_641 = NULL;
        goto try_return_handler_230;
        // Exception handler code:
        try_except_handler_231:;
        exception_keeper_type_229 = exception_type;
        exception_keeper_value_229 = exception_value;
        exception_keeper_tb_229 = exception_tb;
        exception_keeper_lineno_229 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__77_CapacityNotAvailableError_641);
        locals_botocore$exceptions$$$class__77_CapacityNotAvailableError_641 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_229;
        exception_value = exception_keeper_value_229;
        exception_tb = exception_keeper_tb_229;
        exception_lineno = exception_keeper_lineno_229;

        goto try_except_handler_230;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_230:;
        CHECK_OBJECT(outline_76_var___class__);
        Py_DECREF(outline_76_var___class__);
        outline_76_var___class__ = NULL;
        goto outline_result_77;
        // Exception handler code:
        try_except_handler_230:;
        exception_keeper_type_230 = exception_type;
        exception_keeper_value_230 = exception_value;
        exception_keeper_tb_230 = exception_tb;
        exception_keeper_lineno_230 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_230;
        exception_value = exception_keeper_value_230;
        exception_tb = exception_keeper_tb_230;
        exception_lineno = exception_keeper_lineno_230;

        goto outline_exception_77;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_77:;
        exception_lineno = 641;
        goto try_except_handler_229;
        outline_result_77:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[256], tmp_assign_source_619);
    }
    goto try_end_77;
    // Exception handler code:
    try_except_handler_229:;
    exception_keeper_type_231 = exception_type;
    exception_keeper_value_231 = exception_value;
    exception_keeper_tb_231 = exception_tb;
    exception_keeper_lineno_231 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_77__bases_orig);
    tmp_class_creation_77__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_77__bases);
    tmp_class_creation_77__bases = NULL;
    Py_XDECREF(tmp_class_creation_77__class_decl_dict);
    tmp_class_creation_77__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_77__metaclass);
    tmp_class_creation_77__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_77__prepared);
    tmp_class_creation_77__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_231;
    exception_value = exception_keeper_value_231;
    exception_tb = exception_keeper_tb_231;
    exception_lineno = exception_keeper_lineno_231;

    goto frame_exception_exit_1;
    // End of try:
    try_end_77:;
    CHECK_OBJECT(tmp_class_creation_77__bases_orig);
    Py_DECREF(tmp_class_creation_77__bases_orig);
    tmp_class_creation_77__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_77__bases);
    Py_DECREF(tmp_class_creation_77__bases);
    tmp_class_creation_77__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_77__class_decl_dict);
    Py_DECREF(tmp_class_creation_77__class_decl_dict);
    tmp_class_creation_77__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_77__metaclass);
    Py_DECREF(tmp_class_creation_77__metaclass);
    tmp_class_creation_77__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_77__prepared);
    Py_DECREF(tmp_class_creation_77__prepared);
    tmp_class_creation_77__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_621;
        PyObject *tmp_tuple_element_306;
        tmp_tuple_element_306 = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[45]);

        if (unlikely(tmp_tuple_element_306 == NULL)) {
            tmp_tuple_element_306 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[45]);
        }

        if (tmp_tuple_element_306 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 647;

            goto try_except_handler_232;
        }
        tmp_assign_source_621 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_621, 0, tmp_tuple_element_306);
        assert(tmp_class_creation_78__bases_orig == NULL);
        tmp_class_creation_78__bases_orig = tmp_assign_source_621;
    }
    {
        PyObject *tmp_assign_source_622;
        PyObject *tmp_dircall_arg1_78;
        CHECK_OBJECT(tmp_class_creation_78__bases_orig);
        tmp_dircall_arg1_78 = tmp_class_creation_78__bases_orig;
        Py_INCREF(tmp_dircall_arg1_78);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_78};
            tmp_assign_source_622 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_622 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 647;

            goto try_except_handler_232;
        }
        assert(tmp_class_creation_78__bases == NULL);
        tmp_class_creation_78__bases = tmp_assign_source_622;
    }
    {
        PyObject *tmp_assign_source_623;
        tmp_assign_source_623 = PyDict_New();
        assert(tmp_class_creation_78__class_decl_dict == NULL);
        tmp_class_creation_78__class_decl_dict = tmp_assign_source_623;
    }
    {
        PyObject *tmp_assign_source_624;
        PyObject *tmp_metaclass_value_78;
        bool tmp_condition_result_463;
        PyObject *tmp_key_value_232;
        PyObject *tmp_dict_arg_value_232;
        PyObject *tmp_dict_arg_value_233;
        PyObject *tmp_key_value_233;
        nuitka_bool tmp_condition_result_464;
        int tmp_truth_name_78;
        PyObject *tmp_type_arg_155;
        PyObject *tmp_expression_value_396;
        PyObject *tmp_subscript_value_78;
        PyObject *tmp_bases_value_78;
        tmp_key_value_232 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_78__class_decl_dict);
        tmp_dict_arg_value_232 = tmp_class_creation_78__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_232, tmp_key_value_232);
        assert(!(tmp_res == -1));
        tmp_condition_result_463 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_463 != false) {
            goto condexpr_true_155;
        } else {
            goto condexpr_false_155;
        }
        condexpr_true_155:;
        CHECK_OBJECT(tmp_class_creation_78__class_decl_dict);
        tmp_dict_arg_value_233 = tmp_class_creation_78__class_decl_dict;
        tmp_key_value_233 = mod_consts[43];
        tmp_metaclass_value_78 = DICT_GET_ITEM0(tmp_dict_arg_value_233, tmp_key_value_233);
        if (tmp_metaclass_value_78 == NULL) {
            tmp_metaclass_value_78 = Py_None;
        }
        assert(!(tmp_metaclass_value_78 == NULL));
        Py_INCREF(tmp_metaclass_value_78);
        goto condexpr_end_155;
        condexpr_false_155:;
        CHECK_OBJECT(tmp_class_creation_78__bases);
        tmp_truth_name_78 = CHECK_IF_TRUE(tmp_class_creation_78__bases);
        if (tmp_truth_name_78 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 647;

            goto try_except_handler_232;
        }
        tmp_condition_result_464 = tmp_truth_name_78 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_464 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_156;
        } else {
            goto condexpr_false_156;
        }
        condexpr_true_156:;
        CHECK_OBJECT(tmp_class_creation_78__bases);
        tmp_expression_value_396 = tmp_class_creation_78__bases;
        tmp_subscript_value_78 = mod_consts[36];
        tmp_type_arg_155 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_396, tmp_subscript_value_78, 0);
        if (tmp_type_arg_155 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 647;

            goto try_except_handler_232;
        }
        tmp_metaclass_value_78 = BUILTIN_TYPE1(tmp_type_arg_155);
        Py_DECREF(tmp_type_arg_155);
        if (tmp_metaclass_value_78 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 647;

            goto try_except_handler_232;
        }
        goto condexpr_end_156;
        condexpr_false_156:;
        tmp_metaclass_value_78 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_78);
        condexpr_end_156:;
        condexpr_end_155:;
        CHECK_OBJECT(tmp_class_creation_78__bases);
        tmp_bases_value_78 = tmp_class_creation_78__bases;
        tmp_assign_source_624 = SELECT_METACLASS(tmp_metaclass_value_78, tmp_bases_value_78);
        Py_DECREF(tmp_metaclass_value_78);
        if (tmp_assign_source_624 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 647;

            goto try_except_handler_232;
        }
        assert(tmp_class_creation_78__metaclass == NULL);
        tmp_class_creation_78__metaclass = tmp_assign_source_624;
    }
    {
        bool tmp_condition_result_465;
        PyObject *tmp_key_value_234;
        PyObject *tmp_dict_arg_value_234;
        tmp_key_value_234 = mod_consts[43];
        CHECK_OBJECT(tmp_class_creation_78__class_decl_dict);
        tmp_dict_arg_value_234 = tmp_class_creation_78__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_234, tmp_key_value_234);
        assert(!(tmp_res == -1));
        tmp_condition_result_465 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_465 != false) {
            goto branch_yes_309;
        } else {
            goto branch_no_309;
        }
    }
    branch_yes_309:;
    CHECK_OBJECT(tmp_class_creation_78__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_78__class_decl_dict;
    tmp_dictdel_key = mod_consts[43];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 647;

        goto try_except_handler_232;
    }
    branch_no_309:;
    {
        nuitka_bool tmp_condition_result_466;
        PyObject *tmp_expression_value_397;
        CHECK_OBJECT(tmp_class_creation_78__metaclass);
        tmp_expression_value_397 = tmp_class_creation_78__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_397, mod_consts[44]);
        tmp_condition_result_466 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_466 == NUITKA_BOOL_TRUE) {
            goto branch_yes_310;
        } else {
            goto branch_no_310;
        }
    }
    branch_yes_310:;
    {
        PyObject *tmp_assign_source_625;
        PyObject *tmp_called_value_155;
        PyObject *tmp_expression_value_398;
        PyObject *tmp_args_value_155;
        PyObject *tmp_tuple_element_307;
        PyObject *tmp_kwargs_value_155;
        CHECK_OBJECT(tmp_class_creation_78__metaclass);
        tmp_expression_value_398 = tmp_class_creation_78__metaclass;
        tmp_called_value_155 = LOOKUP_ATTRIBUTE(tmp_expression_value_398, mod_consts[44]);
        if (tmp_called_value_155 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 647;

            goto try_except_handler_232;
        }
        tmp_tuple_element_307 = mod_consts[258];
        tmp_args_value_155 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_155, 0, tmp_tuple_element_307);
        CHECK_OBJECT(tmp_class_creation_78__bases);
        tmp_tuple_element_307 = tmp_class_creation_78__bases;
        PyTuple_SET_ITEM0(tmp_args_value_155, 1, tmp_tuple_element_307);
        CHECK_OBJECT(tmp_class_creation_78__class_decl_dict);
        tmp_kwargs_value_155 = tmp_class_creation_78__class_decl_dict;
        frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 647;
        tmp_assign_source_625 = CALL_FUNCTION(tmp_called_value_155, tmp_args_value_155, tmp_kwargs_value_155);
        Py_DECREF(tmp_called_value_155);
        Py_DECREF(tmp_args_value_155);
        if (tmp_assign_source_625 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 647;

            goto try_except_handler_232;
        }
        assert(tmp_class_creation_78__prepared == NULL);
        tmp_class_creation_78__prepared = tmp_assign_source_625;
    }
    {
        bool tmp_condition_result_467;
        PyObject *tmp_operand_value_78;
        PyObject *tmp_expression_value_399;
        CHECK_OBJECT(tmp_class_creation_78__prepared);
        tmp_expression_value_399 = tmp_class_creation_78__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_399, mod_consts[46]);
        tmp_operand_value_78 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_78);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 647;

            goto try_except_handler_232;
        }
        tmp_condition_result_467 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_467 != false) {
            goto branch_yes_311;
        } else {
            goto branch_no_311;
        }
    }
    branch_yes_311:;
    {
        PyObject *tmp_raise_type_78;
        PyObject *tmp_raise_value_78;
        PyObject *tmp_left_value_78;
        PyObject *tmp_right_value_78;
        PyObject *tmp_tuple_element_308;
        PyObject *tmp_getattr_target_78;
        PyObject *tmp_getattr_attr_78;
        PyObject *tmp_getattr_default_78;
        tmp_raise_type_78 = PyExc_TypeError;
        tmp_left_value_78 = mod_consts[47];
        CHECK_OBJECT(tmp_class_creation_78__metaclass);
        tmp_getattr_target_78 = tmp_class_creation_78__metaclass;
        tmp_getattr_attr_78 = mod_consts[48];
        tmp_getattr_default_78 = mod_consts[49];
        tmp_tuple_element_308 = BUILTIN_GETATTR(tmp_getattr_target_78, tmp_getattr_attr_78, tmp_getattr_default_78);
        if (tmp_tuple_element_308 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 647;

            goto try_except_handler_232;
        }
        tmp_right_value_78 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_400;
            PyObject *tmp_type_arg_156;
            PyTuple_SET_ITEM(tmp_right_value_78, 0, tmp_tuple_element_308);
            CHECK_OBJECT(tmp_class_creation_78__prepared);
            tmp_type_arg_156 = tmp_class_creation_78__prepared;
            tmp_expression_value_400 = BUILTIN_TYPE1(tmp_type_arg_156);
            assert(!(tmp_expression_value_400 == NULL));
            tmp_tuple_element_308 = LOOKUP_ATTRIBUTE(tmp_expression_value_400, mod_consts[48]);
            Py_DECREF(tmp_expression_value_400);
            if (tmp_tuple_element_308 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 647;

                goto tuple_build_exception_82;
            }
            PyTuple_SET_ITEM(tmp_right_value_78, 1, tmp_tuple_element_308);
        }
        goto tuple_build_noexception_82;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_82:;
        Py_DECREF(tmp_right_value_78);
        goto try_except_handler_232;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_82:;
        tmp_raise_value_78 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_78, tmp_right_value_78);
        Py_DECREF(tmp_right_value_78);
        if (tmp_raise_value_78 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 647;

            goto try_except_handler_232;
        }
        exception_type = tmp_raise_type_78;
        Py_INCREF(tmp_raise_type_78);
        exception_value = tmp_raise_value_78;
        exception_lineno = 647;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_232;
    }
    branch_no_311:;
    goto branch_end_310;
    branch_no_310:;
    {
        PyObject *tmp_assign_source_626;
        tmp_assign_source_626 = PyDict_New();
        assert(tmp_class_creation_78__prepared == NULL);
        tmp_class_creation_78__prepared = tmp_assign_source_626;
    }
    branch_end_310:;
    {
        PyObject *tmp_assign_source_627;
        {
            PyObject *tmp_set_locals_78;
            CHECK_OBJECT(tmp_class_creation_78__prepared);
            tmp_set_locals_78 = tmp_class_creation_78__prepared;
            locals_botocore$exceptions$$$class__78_InvalidProxiesConfigError_647 = tmp_set_locals_78;
            Py_INCREF(tmp_set_locals_78);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__78_InvalidProxiesConfigError_647, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 647;

            goto try_except_handler_234;
        }
        tmp_dictset_value = mod_consts[258];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__78_InvalidProxiesConfigError_647, mod_consts[53], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 647;

            goto try_except_handler_234;
        }
        if (isFrameUnusable(cache_frame_0fa66f49e61e33f2f35e96530ce0df24_72)) {
            Py_XDECREF(cache_frame_0fa66f49e61e33f2f35e96530ce0df24_72);

#if _DEBUG_REFCOUNTS
            if (cache_frame_0fa66f49e61e33f2f35e96530ce0df24_72 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_0fa66f49e61e33f2f35e96530ce0df24_72 = MAKE_FUNCTION_FRAME(codeobj_0fa66f49e61e33f2f35e96530ce0df24, module_botocore$exceptions, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_0fa66f49e61e33f2f35e96530ce0df24_72->m_type_description == NULL);
        frame_0fa66f49e61e33f2f35e96530ce0df24_72 = cache_frame_0fa66f49e61e33f2f35e96530ce0df24_72;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_0fa66f49e61e33f2f35e96530ce0df24_72);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_0fa66f49e61e33f2f35e96530ce0df24_72) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[259];
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__78_InvalidProxiesConfigError_647, mod_consts[1], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 648;
            type_description_2 = "o";
            goto frame_exception_exit_72;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_0fa66f49e61e33f2f35e96530ce0df24_72);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_71;

        frame_exception_exit_72:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_0fa66f49e61e33f2f35e96530ce0df24_72);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_0fa66f49e61e33f2f35e96530ce0df24_72, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_0fa66f49e61e33f2f35e96530ce0df24_72->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_0fa66f49e61e33f2f35e96530ce0df24_72, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_0fa66f49e61e33f2f35e96530ce0df24_72,
            type_description_2,
            outline_77_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_0fa66f49e61e33f2f35e96530ce0df24_72 == cache_frame_0fa66f49e61e33f2f35e96530ce0df24_72) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_0fa66f49e61e33f2f35e96530ce0df24_72);
            cache_frame_0fa66f49e61e33f2f35e96530ce0df24_72 = NULL;
        }

        assertFrameObject(frame_0fa66f49e61e33f2f35e96530ce0df24_72);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_71;

        frame_no_exception_71:;
        goto skip_nested_handling_71;
        nested_frame_exit_71:;

        goto try_except_handler_234;
        skip_nested_handling_71:;
        {
            nuitka_bool tmp_condition_result_468;
            PyObject *tmp_cmp_expr_left_78;
            PyObject *tmp_cmp_expr_right_78;
            CHECK_OBJECT(tmp_class_creation_78__bases);
            tmp_cmp_expr_left_78 = tmp_class_creation_78__bases;
            CHECK_OBJECT(tmp_class_creation_78__bases_orig);
            tmp_cmp_expr_right_78 = tmp_class_creation_78__bases_orig;
            tmp_condition_result_468 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_78, tmp_cmp_expr_right_78);
            if (tmp_condition_result_468 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 647;

                goto try_except_handler_234;
            }
            if (tmp_condition_result_468 == NUITKA_BOOL_TRUE) {
                goto branch_yes_312;
            } else {
                goto branch_no_312;
            }
            assert(tmp_condition_result_468 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_312:;
        CHECK_OBJECT(tmp_class_creation_78__bases_orig);
        tmp_dictset_value = tmp_class_creation_78__bases_orig;
        tmp_res = PyObject_SetItem(locals_botocore$exceptions$$$class__78_InvalidProxiesConfigError_647, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 647;

            goto try_except_handler_234;
        }
        branch_no_312:;
        {
            PyObject *tmp_assign_source_628;
            PyObject *tmp_called_value_156;
            PyObject *tmp_args_value_156;
            PyObject *tmp_tuple_element_309;
            PyObject *tmp_kwargs_value_156;
            CHECK_OBJECT(tmp_class_creation_78__metaclass);
            tmp_called_value_156 = tmp_class_creation_78__metaclass;
            tmp_tuple_element_309 = mod_consts[258];
            tmp_args_value_156 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_156, 0, tmp_tuple_element_309);
            CHECK_OBJECT(tmp_class_creation_78__bases);
            tmp_tuple_element_309 = tmp_class_creation_78__bases;
            PyTuple_SET_ITEM0(tmp_args_value_156, 1, tmp_tuple_element_309);
            tmp_tuple_element_309 = locals_botocore$exceptions$$$class__78_InvalidProxiesConfigError_647;
            PyTuple_SET_ITEM0(tmp_args_value_156, 2, tmp_tuple_element_309);
            CHECK_OBJECT(tmp_class_creation_78__class_decl_dict);
            tmp_kwargs_value_156 = tmp_class_creation_78__class_decl_dict;
            frame_a719a31d518bc79422e5dc1f94c073b4->m_frame.f_lineno = 647;
            tmp_assign_source_628 = CALL_FUNCTION(tmp_called_value_156, tmp_args_value_156, tmp_kwargs_value_156);
            Py_DECREF(tmp_args_value_156);
            if (tmp_assign_source_628 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 647;

                goto try_except_handler_234;
            }
            assert(outline_77_var___class__ == NULL);
            outline_77_var___class__ = tmp_assign_source_628;
        }
        CHECK_OBJECT(outline_77_var___class__);
        tmp_assign_source_627 = outline_77_var___class__;
        Py_INCREF(tmp_assign_source_627);
        goto try_return_handler_234;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_234:;
        Py_DECREF(locals_botocore$exceptions$$$class__78_InvalidProxiesConfigError_647);
        locals_botocore$exceptions$$$class__78_InvalidProxiesConfigError_647 = NULL;
        goto try_return_handler_233;
        // Exception handler code:
        try_except_handler_234:;
        exception_keeper_type_232 = exception_type;
        exception_keeper_value_232 = exception_value;
        exception_keeper_tb_232 = exception_tb;
        exception_keeper_lineno_232 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_botocore$exceptions$$$class__78_InvalidProxiesConfigError_647);
        locals_botocore$exceptions$$$class__78_InvalidProxiesConfigError_647 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_232;
        exception_value = exception_keeper_value_232;
        exception_tb = exception_keeper_tb_232;
        exception_lineno = exception_keeper_lineno_232;

        goto try_except_handler_233;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_233:;
        CHECK_OBJECT(outline_77_var___class__);
        Py_DECREF(outline_77_var___class__);
        outline_77_var___class__ = NULL;
        goto outline_result_78;
        // Exception handler code:
        try_except_handler_233:;
        exception_keeper_type_233 = exception_type;
        exception_keeper_value_233 = exception_value;
        exception_keeper_tb_233 = exception_tb;
        exception_keeper_lineno_233 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_233;
        exception_value = exception_keeper_value_233;
        exception_tb = exception_keeper_tb_233;
        exception_lineno = exception_keeper_lineno_233;

        goto outline_exception_78;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_78:;
        exception_lineno = 647;
        goto try_except_handler_232;
        outline_result_78:;
        UPDATE_STRING_DICT1(moduledict_botocore$exceptions, (Nuitka_StringObject *)mod_consts[258], tmp_assign_source_627);
    }
    goto try_end_78;
    // Exception handler code:
    try_except_handler_232:;
    exception_keeper_type_234 = exception_type;
    exception_keeper_value_234 = exception_value;
    exception_keeper_tb_234 = exception_tb;
    exception_keeper_lineno_234 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_78__bases_orig);
    tmp_class_creation_78__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_78__bases);
    tmp_class_creation_78__bases = NULL;
    Py_XDECREF(tmp_class_creation_78__class_decl_dict);
    tmp_class_creation_78__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_78__metaclass);
    tmp_class_creation_78__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_78__prepared);
    tmp_class_creation_78__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_234;
    exception_value = exception_keeper_value_234;
    exception_tb = exception_keeper_tb_234;
    exception_lineno = exception_keeper_lineno_234;

    goto frame_exception_exit_1;
    // End of try:
    try_end_78:;

    // Restore frame exception if necessary.
#if 0
    RESTORE_FRAME_EXCEPTION(frame_a719a31d518bc79422e5dc1f94c073b4);
#endif
    popFrameStack();

    assertFrameObject(frame_a719a31d518bc79422e5dc1f94c073b4);

    goto frame_no_exception_72;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_a719a31d518bc79422e5dc1f94c073b4);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a719a31d518bc79422e5dc1f94c073b4, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_a719a31d518bc79422e5dc1f94c073b4->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a719a31d518bc79422e5dc1f94c073b4, exception_lineno);
    }

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto module_exception_exit;

    frame_no_exception_72:;
    CHECK_OBJECT(tmp_class_creation_78__bases_orig);
    Py_DECREF(tmp_class_creation_78__bases_orig);
    tmp_class_creation_78__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_78__bases);
    Py_DECREF(tmp_class_creation_78__bases);
    tmp_class_creation_78__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_78__class_decl_dict);
    Py_DECREF(tmp_class_creation_78__class_decl_dict);
    tmp_class_creation_78__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_78__metaclass);
    Py_DECREF(tmp_class_creation_78__metaclass);
    tmp_class_creation_78__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_78__prepared);
    Py_DECREF(tmp_class_creation_78__prepared);
    tmp_class_creation_78__prepared = NULL;

    // Report to PGO about leaving the module without error.
    PGO_onModuleExit("botocore.exceptions", false);

    Py_INCREF(module_botocore$exceptions);
    return module_botocore$exceptions;
    module_exception_exit:

#if defined(_NUITKA_MODULE) && 0
    {
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_botocore$exceptions, (Nuitka_StringObject *)const_str_plain___name__);

        if (module_name != NULL) {
            Nuitka_DelModule(module_name);
        }
    }
#endif
    PGO_onModuleExit("botocore$exceptions", false);

    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);
    return NULL;
}
