/* Generated code for Python module 'numba.core.typing.randomdecl'
 * created by Nuitka version 0.9.6
 *
 * This code is in part copyright 2022 Kay Hayen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "nuitka/prelude.h"

#include "nuitka/unfreezing.h"

#include "__helpers.h"

/* The "module_numba$core$typing$randomdecl" is a Python object pointer of module type.
 *
 * Note: For full compatibility with CPython, every module variable access
 * needs to go through it except for cases where the module cannot possibly
 * have changed in the mean time.
 */

PyObject *module_numba$core$typing$randomdecl;
PyDictObject *moduledict_numba$core$typing$randomdecl;

/* The declarations of module constants used, if any. */
static PyObject *mod_consts[265];
#ifndef __NUITKA_NO_ASSERT__
static Py_hash_t mod_consts_hash[265];
#endif

static PyObject *module_filename_obj = NULL;

/* Indicator if this modules private constants were created yet. */
static bool constants_created = false;

/* Function to create module private constants. */
static void createModuleConstants(void) {
    if (constants_created == false) {
        loadConstantsBlob(&mod_consts[0], UNTRANSLATE("numba.core.typing.randomdecl"));
        constants_created = true;

#ifndef __NUITKA_NO_ASSERT__
        for (int i = 0; i < 265; i++) {
            mod_consts_hash[i] = DEEP_HASH(mod_consts[i]);
        }
#endif
    }
}

// We want to be able to initialize the "__main__" constants in any case.
#if 0
void createMainModuleConstants(void) {
    createModuleConstants();
}
#endif

/* Function to verify module private constants for non-corruption. */
#ifndef __NUITKA_NO_ASSERT__
void checkModuleConstants_numba$core$typing$randomdecl(void) {
    // The module may not have been used at all, then ignore this.
    if (constants_created == false) return;

    for (int i = 0; i < 265; i++) {
        assert(mod_consts_hash[i] == DEEP_HASH(mod_consts[i]));
        CHECK_OBJECT_DEEP(mod_consts[i]);
    }
}
#endif

// The module code objects.
static PyCodeObject *codeobj_4d76747809e556302d65bcf58ae38c65;
static PyCodeObject *codeobj_c8daf28081174d240dbf6c6f1ecbb92e;
static PyCodeObject *codeobj_3f0dfba0ea1ef929d0608f2e5c2396fe;
static PyCodeObject *codeobj_bb8f3d1ee4a89dee14c96eee07597f14;
static PyCodeObject *codeobj_4225d704c73218ddcf9419606f30ebcf;
static PyCodeObject *codeobj_91492da9e4317f81f8ee750a3886e03c;
static PyCodeObject *codeobj_b98e11acd4bb624ee56a83fcadbf1365;
static PyCodeObject *codeobj_484306ead6c4af53882293edb79cbe0d;
static PyCodeObject *codeobj_e454d590a60fedf1a1c3a064cc1c16bf;
static PyCodeObject *codeobj_bf28b69daa502c37a6d0c31a2f09523e;
static PyCodeObject *codeobj_b51cfe43ec23e36b098f53e36ef90b05;
static PyCodeObject *codeobj_7efc27a65ad537a7bd3ac8d3ba23f9ad;
static PyCodeObject *codeobj_8ba3772525602c4ac3179c3965d51530;
static PyCodeObject *codeobj_b0f1b2944b6de380dfdde09eb0cb73b4;
static PyCodeObject *codeobj_4eaac3c70525e2b2f20a3cc6d8a7e138;
static PyCodeObject *codeobj_1410da64a1c244fe1cfd7f5789efaf26;
static PyCodeObject *codeobj_8a575ade3fd61f5ce5fc90452f0a13fd;
static PyCodeObject *codeobj_9ac30cfb02e28d89e3d7ab4e0faedd19;
static PyCodeObject *codeobj_b6ca460e3512019f56a19bd2f5227490;
static PyCodeObject *codeobj_bb60c770118d4558e22d843bb6c1d839;
static PyCodeObject *codeobj_dcd1c412f0c9a7a03f44257284053857;
static PyCodeObject *codeobj_e6c084536d36ccf44cfde2641359fedb;
static PyCodeObject *codeobj_b5c51f87e954de12490f3cdc22809f65;
static PyCodeObject *codeobj_52dbc07b92665a53497ee55930828bee;
static PyCodeObject *codeobj_67c4cca428b0d1121581f2e5bfdef9ad;
static PyCodeObject *codeobj_f549d07b7e829ad966f13f28a40589ae;
static PyCodeObject *codeobj_3eb28981ba053aaf919c6786b39ae516;
static PyCodeObject *codeobj_9449bebfb93782894d0081a6b07208f3;
static PyCodeObject *codeobj_025e6c5517cafd5cac7783c883cac7cd;
static PyCodeObject *codeobj_59361a5a5a540fb16f3d51eb4d287b66;
static PyCodeObject *codeobj_b3074d356e3d3d7338fe92ecba3aaa5c;
static PyCodeObject *codeobj_783a1d78defebe6f43f5fe6abd4e6ce0;
static PyCodeObject *codeobj_37c0fe8e6586f13fc8bb75cab337d341;
static PyCodeObject *codeobj_88759d23dfb969dec3ac760ec37157e7;
static PyCodeObject *codeobj_8e586f507f42c2412a86b865add7f337;
static PyCodeObject *codeobj_91c2e33dd63bd4515f5854d1d01602d0;
static PyCodeObject *codeobj_f2e699d865c5d4cdbac9e050321aa5f5;
static PyCodeObject *codeobj_6be4a8a7d097eaecee5866d63cb692e3;
static PyCodeObject *codeobj_14d1df92c23bec3fdef4b49181e32f5d;
static PyCodeObject *codeobj_243fba22b9d32a739f1ee1efc092236e;
static PyCodeObject *codeobj_1bf54db38dd0c5dccaaf65af3ac21e29;
static PyCodeObject *codeobj_a13f2a8a328c03a0e1ef8b0e98c8440c;
static PyCodeObject *codeobj_1c03f75f56e92bec8a64f7bd23a506b0;
static PyCodeObject *codeobj_97a7f6be985da5ee9a7f03aa3318ed54;
static PyCodeObject *codeobj_01d10b70dd56fe91ecc5ff5ea2ebb02e;
static PyCodeObject *codeobj_a618f4b7bad263da9fe70d1cfc302796;
static PyCodeObject *codeobj_43ebdb786cc6a8e2fb925c0830336ae7;
static PyCodeObject *codeobj_c5c72dfdab174c25ae231187ffe7ab30;
static PyCodeObject *codeobj_c691f188c15c3f5ac1c716573ce7083a;
static PyCodeObject *codeobj_d8702c483eddacf3a8cedd10a28d27c9;
static PyCodeObject *codeobj_bb36c9baa5eaf975ff2e500d0c0b1b10;
static PyCodeObject *codeobj_7b0a7d36d2109549cfb9d21d82c4be72;
static PyCodeObject *codeobj_970cbd735e338889c1a229e8fd8d4175;
static PyCodeObject *codeobj_c55b2636b60c78e4cd60b861d69a57a5;
static PyCodeObject *codeobj_6177c40379b16ab3225ba49f114326ae;
static PyCodeObject *codeobj_0f00864971ad5d1cd651dc95c967bbb9;
static PyCodeObject *codeobj_5bf8b51735c22f0294b24b4591420011;
static PyCodeObject *codeobj_d118223f499ec92b713f75fd5ac276fe;
static PyCodeObject *codeobj_12d1351915a884f36f8c9b5462021689;
static PyCodeObject *codeobj_f5343e7db454e9eafc333b5819b7d4c7;
static PyCodeObject *codeobj_d6b6e27f439b8a8fb0682bf6da7187c8;
static PyCodeObject *codeobj_aed383170aede757b65669bc35d235f6;
static PyCodeObject *codeobj_1a67ef23eb4d19ded05c1c78fc0ed793;
static PyCodeObject *codeobj_7db89ac580ab3d865951eafa1bd352d0;
static PyCodeObject *codeobj_fe90c33d51b4d58d87fde8d8ca3a088f;
static PyCodeObject *codeobj_1ea27e40fe2f4a5f1fc9107d177849f8;
static PyCodeObject *codeobj_dac91013574804b4041cf37fc02ae1b2;
static PyCodeObject *codeobj_98756ce1007a05f3bff39501e1f63497;
static PyCodeObject *codeobj_018ee49772ed881d211f87ba42667698;
static PyCodeObject *codeobj_df8d7dcf01bbc8edc58428990ffcaff6;
static PyCodeObject *codeobj_2100ccda26d740d3658fbbd6991bb03f;
static PyCodeObject *codeobj_a935f95482b6e2219e7b1747a9f4524f;
static PyCodeObject *codeobj_7e32e97796b716bd5b970ddc6613a2b4;
static PyCodeObject *codeobj_39e2fb93c3b32b892b2e3c31d3684381;
static PyCodeObject *codeobj_949a6130f0defcd01a212f2ddbd307b3;
static PyCodeObject *codeobj_574f971d57a21fb8b8fa0133be987505;
static PyCodeObject *codeobj_e7514de06a891b6552d06a48ae2f2fb9;

static void createModuleCodeObjects(void) {
    module_filename_obj = MAKE_RELATIVE_PATH(mod_consts[236]); CHECK_OBJECT(module_filename_obj);
    codeobj_4d76747809e556302d65bcf58ae38c65 = MAKE_CODEOBJECT(module_filename_obj, 34, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[8], mod_consts[237], NULL, 1, 0, 0);
    codeobj_c8daf28081174d240dbf6c6f1ecbb92e = MAKE_CODEOBJECT(module_filename_obj, 125, CO_NOFREE, mod_consts[238], mod_consts[239], NULL, 1, 0, 0);
    codeobj_3f0dfba0ea1ef929d0608f2e5c2396fe = MAKE_CODEOBJECT(module_filename_obj, 129, CO_NOFREE, mod_consts[238], mod_consts[239], NULL, 1, 0, 0);
    codeobj_bb8f3d1ee4a89dee14c96eee07597f14 = MAKE_CODEOBJECT(module_filename_obj, 130, CO_NOFREE, mod_consts[238], mod_consts[239], NULL, 1, 0, 0);
    codeobj_4225d704c73218ddcf9419606f30ebcf = MAKE_CODEOBJECT(module_filename_obj, 140, CO_NOFREE, mod_consts[238], mod_consts[239], NULL, 1, 0, 0);
    codeobj_91492da9e4317f81f8ee750a3886e03c = MAKE_CODEOBJECT(module_filename_obj, 141, CO_NOFREE, mod_consts[238], mod_consts[239], NULL, 1, 0, 0);
    codeobj_b98e11acd4bb624ee56a83fcadbf1365 = MAKE_CODEOBJECT(module_filename_obj, 142, CO_NOFREE, mod_consts[238], mod_consts[239], NULL, 1, 0, 0);
    codeobj_484306ead6c4af53882293edb79cbe0d = MAKE_CODEOBJECT(module_filename_obj, 158, CO_NOFREE, mod_consts[238], mod_consts[239], NULL, 1, 0, 0);
    codeobj_e454d590a60fedf1a1c3a064cc1c16bf = MAKE_CODEOBJECT(module_filename_obj, 169, CO_NOFREE, mod_consts[238], mod_consts[239], NULL, 1, 0, 0);
    codeobj_bf28b69daa502c37a6d0c31a2f09523e = MAKE_CODEOBJECT(module_filename_obj, 178, CO_NOFREE, mod_consts[238], mod_consts[239], NULL, 1, 0, 0);
    codeobj_b51cfe43ec23e36b098f53e36ef90b05 = MAKE_CODEOBJECT(module_filename_obj, 189, CO_NOFREE, mod_consts[238], mod_consts[239], NULL, 1, 0, 0);
    codeobj_7efc27a65ad537a7bd3ac8d3ba23f9ad = MAKE_CODEOBJECT(module_filename_obj, 190, CO_NOFREE, mod_consts[238], mod_consts[239], NULL, 1, 0, 0);
    codeobj_8ba3772525602c4ac3179c3965d51530 = MAKE_CODEOBJECT(module_filename_obj, 199, CO_NOFREE, mod_consts[238], mod_consts[239], NULL, 1, 0, 0);
    codeobj_b0f1b2944b6de380dfdde09eb0cb73b4 = MAKE_CODEOBJECT(module_filename_obj, 211, CO_NOFREE, mod_consts[238], mod_consts[239], NULL, 1, 0, 0);
    codeobj_4eaac3c70525e2b2f20a3cc6d8a7e138 = MAKE_CODEOBJECT(module_filename_obj, 212, CO_NOFREE, mod_consts[238], mod_consts[239], NULL, 1, 0, 0);
    codeobj_1410da64a1c244fe1cfd7f5789efaf26 = MAKE_CODEOBJECT(module_filename_obj, 213, CO_NOFREE, mod_consts[238], mod_consts[239], NULL, 1, 0, 0);
    codeobj_8a575ade3fd61f5ce5fc90452f0a13fd = MAKE_CODEOBJECT(module_filename_obj, 222, CO_NOFREE, mod_consts[238], mod_consts[239], NULL, 1, 0, 0);
    codeobj_9ac30cfb02e28d89e3d7ab4e0faedd19 = MAKE_CODEOBJECT(module_filename_obj, 223, CO_NOFREE, mod_consts[238], mod_consts[239], NULL, 1, 0, 0);
    codeobj_b6ca460e3512019f56a19bd2f5227490 = MAKE_CODEOBJECT(module_filename_obj, 232, CO_NOFREE, mod_consts[238], mod_consts[239], NULL, 1, 0, 0);
    codeobj_bb60c770118d4558e22d843bb6c1d839 = MAKE_CODEOBJECT(module_filename_obj, 255, CO_NOFREE, mod_consts[238], mod_consts[239], NULL, 1, 0, 0);
    codeobj_dcd1c412f0c9a7a03f44257284053857 = MAKE_CODEOBJECT(module_filename_obj, 272, CO_NOFREE, mod_consts[238], mod_consts[239], NULL, 1, 0, 0);
    codeobj_e6c084536d36ccf44cfde2641359fedb = MAKE_CODEOBJECT(module_filename_obj, 287, CO_NOFREE, mod_consts[238], mod_consts[239], NULL, 1, 0, 0);
    codeobj_b5c51f87e954de12490f3cdc22809f65 = MAKE_CODEOBJECT(module_filename_obj, 297, CO_NOFREE, mod_consts[238], mod_consts[239], NULL, 1, 0, 0);
    codeobj_52dbc07b92665a53497ee55930828bee = MAKE_CODEOBJECT(module_filename_obj, 298, CO_NOFREE, mod_consts[238], mod_consts[239], NULL, 1, 0, 0);
    codeobj_67c4cca428b0d1121581f2e5bfdef9ad = MAKE_CODEOBJECT(module_filename_obj, 1, CO_NOFREE, mod_consts[240], NULL, NULL, 0, 0, 0);
    codeobj_f549d07b7e829ad966f13f28a40589ae = MAKE_CODEOBJECT(module_filename_obj, 74, CO_NOFREE, mod_consts[99], mod_consts[241], NULL, 0, 0, 0);
    codeobj_3eb28981ba053aaf919c6786b39ae516 = MAKE_CODEOBJECT(module_filename_obj, 188, CO_NOFREE, mod_consts[151], mod_consts[241], NULL, 0, 0, 0);
    codeobj_9449bebfb93782894d0081a6b07208f3 = MAKE_CODEOBJECT(module_filename_obj, 221, CO_NOFREE, mod_consts[171], mod_consts[241], NULL, 0, 0, 0);
    codeobj_025e6c5517cafd5cac7783c883cac7cd = MAKE_CODEOBJECT(module_filename_obj, 157, CO_NOFREE, mod_consts[133], mod_consts[241], NULL, 0, 0, 0);
    codeobj_59361a5a5a540fb16f3d51eb4d287b66 = MAKE_CODEOBJECT(module_filename_obj, 198, CO_NOFREE, mod_consts[157], mod_consts[241], NULL, 0, 0, 0);
    codeobj_b3074d356e3d3d7338fe92ecba3aaa5c = MAKE_CODEOBJECT(module_filename_obj, 168, CO_NOFREE, mod_consts[141], mod_consts[241], NULL, 0, 0, 0);
    codeobj_783a1d78defebe6f43f5fe6abd4e6ce0 = MAKE_CODEOBJECT(module_filename_obj, 210, CO_NOFREE, mod_consts[161], mod_consts[241], NULL, 0, 0, 0);
    codeobj_37c0fe8e6586f13fc8bb75cab337d341 = MAKE_CODEOBJECT(module_filename_obj, 177, CO_NOFREE, mod_consts[147], mod_consts[241], NULL, 0, 0, 0);
    codeobj_88759d23dfb969dec3ac760ec37157e7 = MAKE_CODEOBJECT(module_filename_obj, 42, CO_NOFREE, mod_consts[34], mod_consts[241], NULL, 0, 0, 0);
    codeobj_8e586f507f42c2412a86b865add7f337 = MAKE_CODEOBJECT(module_filename_obj, 254, CO_NOFREE, mod_consts[179], mod_consts[241], NULL, 0, 0, 0);
    codeobj_91c2e33dd63bd4515f5854d1d01602d0 = MAKE_CODEOBJECT(module_filename_obj, 95, CO_NOFREE, mod_consts[102], mod_consts[241], NULL, 0, 0, 0);
    codeobj_f2e699d865c5d4cdbac9e050321aa5f5 = MAKE_CODEOBJECT(module_filename_obj, 286, CO_NOFREE, mod_consts[226], mod_consts[241], NULL, 0, 0, 0);
    codeobj_6be4a8a7d097eaecee5866d63cb692e3 = MAKE_CODEOBJECT(module_filename_obj, 124, CO_NOFREE, mod_consts[119], mod_consts[241], NULL, 0, 0, 0);
    codeobj_14d1df92c23bec3fdef4b49181e32f5d = MAKE_CODEOBJECT(module_filename_obj, 128, CO_NOFREE, mod_consts[119], mod_consts[241], NULL, 0, 0, 0);
    codeobj_243fba22b9d32a739f1ee1efc092236e = MAKE_CODEOBJECT(module_filename_obj, 100, CO_NOFREE, mod_consts[107], mod_consts[241], NULL, 0, 0, 0);
    codeobj_1bf54db38dd0c5dccaaf65af3ac21e29 = MAKE_CODEOBJECT(module_filename_obj, 139, CO_NOFREE, mod_consts[124], mod_consts[241], NULL, 0, 0, 0);
    codeobj_a13f2a8a328c03a0e1ef8b0e98c8440c = MAKE_CODEOBJECT(module_filename_obj, 146, CO_NOFREE, mod_consts[127], mod_consts[241], NULL, 0, 0, 0);
    codeobj_1c03f75f56e92bec8a64f7bd23a506b0 = MAKE_CODEOBJECT(module_filename_obj, 231, CO_NOFREE, mod_consts[175], mod_consts[241], NULL, 0, 0, 0);
    codeobj_97a7f6be985da5ee9a7f03aa3318ed54 = MAKE_CODEOBJECT(module_filename_obj, 296, CO_NOFREE, mod_consts[234], mod_consts[241], NULL, 0, 0, 0);
    codeobj_01d10b70dd56fe91ecc5ff5ea2ebb02e = MAKE_CODEOBJECT(module_filename_obj, 271, CO_NOFREE, mod_consts[208], mod_consts[241], NULL, 0, 0, 0);
    codeobj_a618f4b7bad263da9fe70d1cfc302796 = MAKE_CODEOBJECT(module_filename_obj, 48, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[35], mod_consts[242], NULL, 3, 0, 0);
    codeobj_43ebdb786cc6a8e2fb925c0830336ae7 = MAKE_CODEOBJECT(module_filename_obj, 80, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[35], mod_consts[243], NULL, 2, 0, 0);
    codeobj_c5c72dfdab174c25ae231187ffe7ab30 = MAKE_CODEOBJECT(module_filename_obj, 85, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS, mod_consts[32], mod_consts[244], mod_consts[245], 0, 0, 0);
    codeobj_c691f188c15c3f5ac1c716573ce7083a = MAKE_CODEOBJECT(module_filename_obj, 103, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[110], mod_consts[246], NULL, 1, 0, 0);
    codeobj_d8702c483eddacf3a8cedd10a28d27c9 = MAKE_CODEOBJECT(module_filename_obj, 132, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[110], mod_consts[246], NULL, 1, 0, 0);
    codeobj_bb36c9baa5eaf975ff2e500d0c0b1b10 = MAKE_CODEOBJECT(module_filename_obj, 160, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[110], mod_consts[246], NULL, 1, 0, 0);
    codeobj_7b0a7d36d2109549cfb9d21d82c4be72 = MAKE_CODEOBJECT(module_filename_obj, 171, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[110], mod_consts[246], NULL, 1, 0, 0);
    codeobj_970cbd735e338889c1a229e8fd8d4175 = MAKE_CODEOBJECT(module_filename_obj, 181, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[110], mod_consts[246], NULL, 1, 0, 0);
    codeobj_c55b2636b60c78e4cd60b861d69a57a5 = MAKE_CODEOBJECT(module_filename_obj, 192, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[110], mod_consts[246], NULL, 1, 0, 0);
    codeobj_6177c40379b16ab3225ba49f114326ae = MAKE_CODEOBJECT(module_filename_obj, 201, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[110], mod_consts[246], NULL, 1, 0, 0);
    codeobj_0f00864971ad5d1cd651dc95c967bbb9 = MAKE_CODEOBJECT(module_filename_obj, 215, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[110], mod_consts[246], NULL, 1, 0, 0);
    codeobj_5bf8b51735c22f0294b24b4591420011 = MAKE_CODEOBJECT(module_filename_obj, 225, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[110], mod_consts[246], NULL, 1, 0, 0);
    codeobj_d118223f499ec92b713f75fd5ac276fe = MAKE_CODEOBJECT(module_filename_obj, 234, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[110], mod_consts[246], NULL, 1, 0, 0);
    codeobj_12d1351915a884f36f8c9b5462021689 = MAKE_CODEOBJECT(module_filename_obj, 257, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[110], mod_consts[246], NULL, 1, 0, 0);
    codeobj_f5343e7db454e9eafc333b5819b7d4c7 = MAKE_CODEOBJECT(module_filename_obj, 274, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[110], mod_consts[246], NULL, 1, 0, 0);
    codeobj_d6b6e27f439b8a8fb0682bf6da7187c8 = MAKE_CODEOBJECT(module_filename_obj, 289, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[110], mod_consts[246], NULL, 1, 0, 0);
    codeobj_aed383170aede757b65669bc35d235f6 = MAKE_CODEOBJECT(module_filename_obj, 31, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[22], mod_consts[247], NULL, 1, 0, 0);
    codeobj_1a67ef23eb4d19ded05c1c78fc0ed793 = MAKE_CODEOBJECT(module_filename_obj, 258, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[15], mod_consts[248], mod_consts[249], 3, 0, 0);
    codeobj_7db89ac580ab3d865951eafa1bd352d0 = MAKE_CODEOBJECT(module_filename_obj, 161, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[15], mod_consts[250], mod_consts[249], 2, 0, 0);
    codeobj_fe90c33d51b4d58d87fde8d8ca3a088f = MAKE_CODEOBJECT(module_filename_obj, 275, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[15], mod_consts[250], mod_consts[249], 2, 0, 0);
    codeobj_1ea27e40fe2f4a5f1fc9107d177849f8 = MAKE_CODEOBJECT(module_filename_obj, 54, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS, mod_consts[15], mod_consts[251], mod_consts[252], 0, 0, 0);
    codeobj_dac91013574804b4041cf37fc02ae1b2 = MAKE_CODEOBJECT(module_filename_obj, 58, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS, mod_consts[15], mod_consts[253], mod_consts[254], 0, 0, 0);
    codeobj_98756ce1007a05f3bff39501e1f63497 = MAKE_CODEOBJECT(module_filename_obj, 182, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[15], mod_consts[255], mod_consts[249], 2, 0, 0);
    codeobj_018ee49772ed881d211f87ba42667698 = MAKE_CODEOBJECT(module_filename_obj, 235, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[15], mod_consts[256], mod_consts[249], 4, 0, 0);
    codeobj_df8d7dcf01bbc8edc58428990ffcaff6 = MAKE_CODEOBJECT(module_filename_obj, 216, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[15], mod_consts[257], mod_consts[249], 3, 0, 0);
    codeobj_2100ccda26d740d3658fbbd6991bb03f = MAKE_CODEOBJECT(module_filename_obj, 133, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[15], mod_consts[258], mod_consts[249], 3, 0, 0);
    codeobj_a935f95482b6e2219e7b1747a9f4524f = MAKE_CODEOBJECT(module_filename_obj, 172, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[15], mod_consts[259], mod_consts[249], 3, 0, 0);
    codeobj_7e32e97796b716bd5b970ddc6613a2b4 = MAKE_CODEOBJECT(module_filename_obj, 202, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[15], mod_consts[260], mod_consts[249], 4, 0, 0);
    codeobj_39e2fb93c3b32b892b2e3c31d3684381 = MAKE_CODEOBJECT(module_filename_obj, 193, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[15], mod_consts[261], mod_consts[249], 2, 0, 0);
    codeobj_949a6130f0defcd01a212f2ddbd307b3 = MAKE_CODEOBJECT(module_filename_obj, 226, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[15], mod_consts[262], mod_consts[249], 3, 0, 0);
    codeobj_574f971d57a21fb8b8fa0133be987505 = MAKE_CODEOBJECT(module_filename_obj, 104, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[15], mod_consts[263], mod_consts[249], 1, 0, 0);
    codeobj_e7514de06a891b6552d06a48ae2f2fb9 = MAKE_CODEOBJECT(module_filename_obj, 290, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[15], mod_consts[263], mod_consts[249], 1, 0, 0);
}

// The module function declarations.
static PyObject *MAKE_GENERATOR_numba$core$typing$randomdecl$$$function__1_normalize_shape$$$genexpr__1_genexpr(struct Nuitka_CellObject **closure);


NUITKA_CROSS_MODULE PyObject *impl___main__$$$function__1__mro_entries_conversion(PyObject **python_pars);


NUITKA_CROSS_MODULE PyObject *impl___main__$$$function__5_complex_call_helper_star_list_star_dict(PyObject **python_pars);


NUITKA_CROSS_MODULE PyObject *impl___main__$$$function__6_complex_call_helper_pos_star_list(PyObject **python_pars);


static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__10_generic();


static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__10_generic$$$function__1_typer(PyObject *defaults, struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__11_generic();


static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__11_generic$$$function__1_typer(PyObject *defaults, struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__12_generic();


static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__12_generic$$$function__1_typer(PyObject *defaults, struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__13_generic();


static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__13_generic$$$function__1_typer(PyObject *defaults, struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__14_generic();


static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__14_generic$$$function__1_typer(PyObject *defaults, struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__15_generic();


static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__15_generic$$$function__1_typer(PyObject *defaults, struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__16_generic();


static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__16_generic$$$function__1_typer(PyObject *defaults, struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__1_normalize_shape();


static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__2_array_typer(PyObject *defaults);


static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__2_array_typer$$$function__1_typer(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__2_array_typer$$$function__2_typer(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__3_array_typer(PyObject *defaults);


static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__3_array_typer$$$function__1_concrete_scalar_typer(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__4_generic();


static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__4_generic$$$function__1_typer(PyObject *defaults, struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__5_generic();


static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__5_generic$$$function__1_typer(PyObject *defaults, struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__6_generic();


static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__6_generic$$$function__1_typer(PyObject *defaults, struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__7_generic();


static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__7_generic$$$function__1_typer(PyObject *defaults, struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__8_generic();


static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__8_generic$$$function__1_typer(PyObject *defaults, struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__9_generic();


static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__9_generic$$$function__1_typer(PyObject *defaults, struct Nuitka_CellObject **closure);


// The module function definitions.
static PyObject *impl_numba$core$typing$randomdecl$$$function__1_normalize_shape(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_shape = Nuitka_Cell_New1(python_pars[0]);
    PyObject *var_ndim = NULL;
    PyObject *tmp_genexpr_1__$0 = NULL;
    struct Nuitka_FrameObject *frame_aed383170aede757b65669bc35d235f6;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_aed383170aede757b65669bc35d235f6 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_aed383170aede757b65669bc35d235f6)) {
        Py_XDECREF(cache_frame_aed383170aede757b65669bc35d235f6);

#if _DEBUG_REFCOUNTS
        if (cache_frame_aed383170aede757b65669bc35d235f6 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_aed383170aede757b65669bc35d235f6 = MAKE_FUNCTION_FRAME(codeobj_aed383170aede757b65669bc35d235f6, module_numba$core$typing$randomdecl, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_aed383170aede757b65669bc35d235f6->m_type_description == NULL);
    frame_aed383170aede757b65669bc35d235f6 = cache_frame_aed383170aede757b65669bc35d235f6;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_aed383170aede757b65669bc35d235f6);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_aed383170aede757b65669bc35d235f6) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(Nuitka_Cell_GET(par_shape));
        tmp_isinstance_inst_1 = Nuitka_Cell_GET(par_shape);
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[0]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[0]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 32;
            type_description_1 = "co";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[1]);
        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 32;
            type_description_1 = "co";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 32;
            type_description_1 = "co";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_expression_value_2;
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[0]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[0]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 33;
            type_description_1 = "co";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[2]);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 33;
            type_description_1 = "co";
            goto frame_exception_exit_1;
        }
        tmp_return_value = PyTuple_New(2);
        PyTuple_SET_ITEM(tmp_return_value, 0, tmp_tuple_element_1);
        tmp_tuple_element_1 = mod_consts[3];
        PyTuple_SET_ITEM0(tmp_return_value, 1, tmp_tuple_element_1);
        goto frame_return_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_outline_return_value_1;
        int tmp_truth_name_1;
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_iter_arg_1;
            CHECK_OBJECT(Nuitka_Cell_GET(par_shape));
            tmp_iter_arg_1 = Nuitka_Cell_GET(par_shape);
            tmp_assign_source_1 = MAKE_ITERATOR(tmp_iter_arg_1);
            if (tmp_assign_source_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 34;
                type_description_1 = "co";
                goto frame_exception_exit_1;
            }
            assert(tmp_genexpr_1__$0 == NULL);
            tmp_genexpr_1__$0 = tmp_assign_source_1;
        }
        // Tried code:
        {
            struct Nuitka_CellObject *tmp_closure_1[2];

            tmp_closure_1[0] = Nuitka_Cell_New0(tmp_genexpr_1__$0);
            tmp_closure_1[1] = par_shape;
            Py_INCREF(tmp_closure_1[1]);

            tmp_outline_return_value_1 = MAKE_GENERATOR_numba$core$typing$randomdecl$$$function__1_normalize_shape$$$genexpr__1_genexpr(tmp_closure_1);

            goto try_return_handler_2;
        }
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        CHECK_OBJECT(tmp_genexpr_1__$0);
        Py_DECREF(tmp_genexpr_1__$0);
        tmp_genexpr_1__$0 = NULL;
        goto outline_result_1;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_result_1:;
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_outline_return_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_outline_return_value_1);

            exception_lineno = 34;
            type_description_1 = "co";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_outline_return_value_1);
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_len_arg_1;
        CHECK_OBJECT(Nuitka_Cell_GET(par_shape));
        tmp_len_arg_1 = Nuitka_Cell_GET(par_shape);
        tmp_assign_source_2 = BUILTIN_LEN(tmp_len_arg_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 36;
            type_description_1 = "co";
            goto frame_exception_exit_1;
        }
        assert(var_ndim == NULL);
        var_ndim = tmp_assign_source_2;
    }
    {
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_args_element_value_2;
        tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[0]);

        if (unlikely(tmp_expression_value_3 == NULL)) {
            tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[0]);
        }

        if (tmp_expression_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 37;
            type_description_1 = "co";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[4]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 37;
            type_description_1 = "co";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_4 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[0]);

        if (unlikely(tmp_expression_value_4 == NULL)) {
            tmp_expression_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[0]);
        }

        if (tmp_expression_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 37;
            type_description_1 = "co";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[2]);
        if (tmp_args_element_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 37;
            type_description_1 = "co";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_ndim);
        tmp_args_element_value_2 = var_ndim;
        frame_aed383170aede757b65669bc35d235f6->m_frame.f_lineno = 37;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_tuple_element_2 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_tuple_element_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 37;
            type_description_1 = "co";
            goto frame_exception_exit_1;
        }
        tmp_return_value = PyTuple_New(2);
        PyTuple_SET_ITEM(tmp_return_value, 0, tmp_tuple_element_2);
        CHECK_OBJECT(var_ndim);
        tmp_tuple_element_2 = var_ndim;
        PyTuple_SET_ITEM0(tmp_return_value, 1, tmp_tuple_element_2);
        goto frame_return_exit_1;
    }
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_make_exception_arg_1;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        PyObject *tmp_tuple_element_3;
        tmp_left_value_1 = mod_consts[5];
        CHECK_OBJECT(Nuitka_Cell_GET(par_shape));
        tmp_tuple_element_3 = Nuitka_Cell_GET(par_shape);
        tmp_right_value_1 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_right_value_1, 0, tmp_tuple_element_3);
        tmp_make_exception_arg_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_1, tmp_right_value_1);
        Py_DECREF(tmp_right_value_1);
        if (tmp_make_exception_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 39;
            type_description_1 = "co";
            goto frame_exception_exit_1;
        }
        frame_aed383170aede757b65669bc35d235f6->m_frame.f_lineno = 39;
        tmp_raise_type_1 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_TypeError, tmp_make_exception_arg_1);
        Py_DECREF(tmp_make_exception_arg_1);
        assert(!(tmp_raise_type_1 == NULL));
        exception_type = tmp_raise_type_1;
        exception_lineno = 39;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "co";
        goto frame_exception_exit_1;
    }
    branch_end_2:;
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_aed383170aede757b65669bc35d235f6);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_aed383170aede757b65669bc35d235f6);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_aed383170aede757b65669bc35d235f6);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_aed383170aede757b65669bc35d235f6, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_aed383170aede757b65669bc35d235f6->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_aed383170aede757b65669bc35d235f6, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_aed383170aede757b65669bc35d235f6,
        type_description_1,
        par_shape,
        var_ndim
    );


    // Release cached frame if used for exception.
    if (frame_aed383170aede757b65669bc35d235f6 == cache_frame_aed383170aede757b65669bc35d235f6) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_aed383170aede757b65669bc35d235f6);
        cache_frame_aed383170aede757b65669bc35d235f6 = NULL;
    }

    assertFrameObject(frame_aed383170aede757b65669bc35d235f6);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_ndim);
    var_ndim = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_ndim);
    var_ndim = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_shape);
    Py_DECREF(par_shape);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_shape);
    Py_DECREF(par_shape);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct numba$core$typing$randomdecl$$$function__1_normalize_shape$$$genexpr__1_genexpr_locals {
    PyObject *var_v;
    PyObject *tmp_iter_value_0;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    int tmp_res;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
};

static PyObject *numba$core$typing$randomdecl$$$function__1_normalize_shape$$$genexpr__1_genexpr_context(struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value) {
    CHECK_OBJECT(generator);
    assert(Nuitka_Generator_Check((PyObject *)generator));
    CHECK_OBJECT_X(yield_return_value);

    // Heap access if used.
    struct numba$core$typing$randomdecl$$$function__1_normalize_shape$$$genexpr__1_genexpr_locals *generator_heap = (struct numba$core$typing$randomdecl$$$function__1_normalize_shape$$$genexpr__1_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_v = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    if (isFrameUnusable(cache_m_frame)) {
        Py_XDECREF(cache_m_frame);

#if _DEBUG_REFCOUNTS
        if (cache_m_frame == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_m_frame = MAKE_FUNCTION_FRAME(codeobj_4d76747809e556302d65bcf58ae38c65, module_numba$core$typing$randomdecl, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF(generator->m_frame);
    assert(Py_REFCNT(generator->m_frame) == 2); // Frame stack

#if PYTHON_VERSION >= 0x340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    assert(generator->m_frame->m_frame.f_back == NULL);
    Py_CLEAR(generator->m_frame->m_frame.f_back);

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF(generator->m_frame->m_frame.f_back);

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF(generator->m_frame);

    Nuitka_Frame_MarkAsExecuting(generator->m_frame);

#if PYTHON_VERSION >= 0x300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

        EXC_TYPE_F(generator) = EXC_TYPE(thread_state);
        if (EXC_TYPE_F(generator) == Py_None) EXC_TYPE_F(generator) = NULL;
        Py_XINCREF(EXC_TYPE_F(generator));
        EXC_VALUE_F(generator) = EXC_VALUE(thread_state);
        Py_XINCREF(EXC_VALUE_F(generator));
        EXC_TRACEBACK_F(generator) = EXC_TRACEBACK(thread_state);
        Py_XINCREF(EXC_TRACEBACK_F(generator));
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT(Nuitka_Cell_GET(generator->m_closure[0]));
        tmp_next_source_1 = Nuitka_Cell_GET(generator->m_closure[0]);
        tmp_assign_source_1 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_1 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
                generator_heap->type_description_1 = "Noc";
                generator_heap->exception_lineno = 34;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT(generator_heap->tmp_iter_value_0);
        tmp_assign_source_2 = generator_heap->tmp_iter_value_0;
        {
            PyObject *old = generator_heap->var_v;
            generator_heap->var_v = tmp_assign_source_2;
            Py_INCREF(generator_heap->var_v);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_expression_value_1;
        int tmp_and_left_truth_1;
        PyObject *tmp_and_left_value_1;
        PyObject *tmp_and_right_value_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_all_arg_1;
        PyObject *tmp_isinstance_inst_2;
        PyObject *tmp_isinstance_cls_2;
        PyObject *tmp_expression_value_3;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        if (Nuitka_Cell_GET(generator->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&generator_heap->exception_type, &generator_heap->exception_value, mod_consts[6]);
            generator_heap->exception_tb = NULL;
            NORMALIZE_EXCEPTION(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            CHAIN_EXCEPTION(generator_heap->exception_value);

            generator_heap->exception_lineno = 34;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }

        tmp_isinstance_inst_1 = Nuitka_Cell_GET(generator->m_closure[1]);
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[0]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[0]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 34;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[7]);
        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 34;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        generator_heap->tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_cls_1);
        if (generator_heap->tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 34;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        tmp_and_left_value_1 = (generator_heap->tmp_res != 0) ? Py_True : Py_False;
        tmp_and_left_truth_1 = CHECK_IF_TRUE(tmp_and_left_value_1);
        if (tmp_and_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 34;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(generator_heap->var_v);
        tmp_isinstance_inst_2 = generator_heap->var_v;
        tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[0]);

        if (unlikely(tmp_expression_value_3 == NULL)) {
            tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[0]);
        }

        if (tmp_expression_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 35;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        tmp_isinstance_cls_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[1]);
        if (tmp_isinstance_cls_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 35;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        generator_heap->tmp_res = PyObject_IsInstance(tmp_isinstance_inst_2, tmp_isinstance_cls_2);
        Py_DECREF(tmp_isinstance_cls_2);
        if (generator_heap->tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 35;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        tmp_all_arg_1 = (generator_heap->tmp_res != 0) ? Py_True : Py_False;
        tmp_and_right_value_1 = BUILTIN_ALL(tmp_all_arg_1);
        if (tmp_and_right_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 35;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        tmp_expression_value_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        Py_INCREF(tmp_and_left_value_1);
        tmp_expression_value_1 = tmp_and_left_value_1;
        and_end_1:;
        Nuitka_PreserveHeap(generator_heap->yield_tmps, &tmp_and_left_truth_1, sizeof(int), &tmp_and_left_value_1, sizeof(PyObject *), &tmp_and_right_value_1, sizeof(PyObject *), &tmp_isinstance_inst_1, sizeof(PyObject *), &tmp_isinstance_cls_1, sizeof(PyObject *), &tmp_expression_value_2, sizeof(PyObject *), &tmp_all_arg_1, sizeof(PyObject *), &tmp_isinstance_inst_2, sizeof(PyObject *), &tmp_isinstance_cls_2, sizeof(PyObject *), &tmp_expression_value_3, sizeof(PyObject *), NULL);
        generator->m_yield_return_index = 1;
        return tmp_expression_value_1;
        yield_return_1:
        Nuitka_RestoreHeap(generator_heap->yield_tmps, &tmp_and_left_truth_1, sizeof(int), &tmp_and_left_value_1, sizeof(PyObject *), &tmp_and_right_value_1, sizeof(PyObject *), &tmp_isinstance_inst_1, sizeof(PyObject *), &tmp_isinstance_cls_1, sizeof(PyObject *), &tmp_expression_value_2, sizeof(PyObject *), &tmp_all_arg_1, sizeof(PyObject *), &tmp_isinstance_inst_2, sizeof(PyObject *), &tmp_isinstance_cls_2, sizeof(PyObject *), &tmp_expression_value_3, sizeof(PyObject *), NULL);
        if (yield_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 35;
            generator_heap->type_description_1 = "Noc";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


        generator_heap->exception_lineno = 34;
        generator_heap->type_description_1 = "Noc";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->tmp_iter_value_0);
    generator_heap->tmp_iter_value_0 = NULL;
    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting(generator->m_frame);

#if PYTHON_VERSION >= 0x300
    Py_CLEAR(EXC_TYPE_F(generator));
    Py_CLEAR(EXC_VALUE_F(generator));
    Py_CLEAR(EXC_TRACEBACK_F(generator));
#endif

    // Allow re-use of the frame again.
    Py_DECREF(generator->m_frame);
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if (!EXCEPTION_MATCH_GENERATOR(generator_heap->exception_type)) {
        if (generator_heap->exception_tb == NULL) {
            generator_heap->exception_tb = MAKE_TRACEBACK(generator->m_frame, generator_heap->exception_lineno);
        } else if (generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame) {
            generator_heap->exception_tb = ADD_TRACEBACK(generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno);
        }

        Nuitka_Frame_AttachLocals(
            generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_v,
            generator->m_closure[1]
        );


        // Release cached frame if used for exception.
        if (generator->m_frame == cache_m_frame) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_m_frame);
            cache_m_frame = NULL;
        }

        assertFrameObject(generator->m_frame);
    }

#if PYTHON_VERSION >= 0x300
    Py_CLEAR(EXC_TYPE_F(generator));
    Py_CLEAR(EXC_VALUE_F(generator));
    Py_CLEAR(EXC_TRACEBACK_F(generator));
#endif

    Py_DECREF(generator->m_frame);

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->var_v);
    generator_heap->var_v = NULL;
    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF(generator_heap->tmp_iter_value_0);
    generator_heap->tmp_iter_value_0 = NULL;
    Py_XDECREF(generator_heap->var_v);
    generator_heap->var_v = NULL;


    return NULL;

    function_exception_exit:
    assert(generator_heap->exception_type);
    RESTORE_ERROR_OCCURRED(generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb);

    return NULL;

}

static PyObject *MAKE_GENERATOR_numba$core$typing$randomdecl$$$function__1_normalize_shape$$$genexpr__1_genexpr(struct Nuitka_CellObject **closure) {
    return Nuitka_Generator_New(
        numba$core$typing$randomdecl$$$function__1_normalize_shape$$$genexpr__1_genexpr_context,
        module_numba$core$typing$randomdecl,
        mod_consts[8],
#if PYTHON_VERSION >= 0x350
        mod_consts[9],
#endif
        codeobj_4d76747809e556302d65bcf58ae38c65,
        closure,
        2,
        sizeof(struct numba$core$typing$randomdecl$$$function__1_normalize_shape$$$genexpr__1_genexpr_locals)
    );
}


static PyObject *impl_numba$core$typing$randomdecl$$$function__2_array_typer(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = Nuitka_Cell_New1(python_pars[0]);
    struct Nuitka_CellObject *par_scalar_typer = Nuitka_Cell_New1(python_pars[1]);
    struct Nuitka_CellObject *par_size = Nuitka_Cell_New1(python_pars[2]);
    struct Nuitka_CellObject *var_prefix = Nuitka_Cell_Empty();
    PyObject *var_typer = NULL;
    struct Nuitka_FrameObject *frame_a618f4b7bad263da9fe70d1cfc302796;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_a618f4b7bad263da9fe70d1cfc302796 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_a618f4b7bad263da9fe70d1cfc302796)) {
        Py_XDECREF(cache_frame_a618f4b7bad263da9fe70d1cfc302796);

#if _DEBUG_REFCOUNTS
        if (cache_frame_a618f4b7bad263da9fe70d1cfc302796 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_a618f4b7bad263da9fe70d1cfc302796 = MAKE_FUNCTION_FRAME(codeobj_a618f4b7bad263da9fe70d1cfc302796, module_numba$core$typing$randomdecl, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_a618f4b7bad263da9fe70d1cfc302796->m_type_description == NULL);
    frame_a618f4b7bad263da9fe70d1cfc302796 = cache_frame_a618f4b7bad263da9fe70d1cfc302796;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_a618f4b7bad263da9fe70d1cfc302796);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_a618f4b7bad263da9fe70d1cfc302796) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_subscript_value_1;
        CHECK_OBJECT(Nuitka_Cell_GET(par_self));
        tmp_expression_value_3 = Nuitka_Cell_GET(par_self);
        tmp_expression_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[10]);
        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 49;
            type_description_1 = "cccco";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[11]);
        Py_DECREF(tmp_expression_value_2);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 49;
            type_description_1 = "cccco";
            goto frame_exception_exit_1;
        }
        frame_a618f4b7bad263da9fe70d1cfc302796->m_frame.f_lineno = 49;
        tmp_expression_value_1 = CALL_FUNCTION_WITH_POSARGS1(tmp_called_value_1, mod_consts[12]);

        Py_DECREF(tmp_called_value_1);
        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 49;
            type_description_1 = "cccco";
            goto frame_exception_exit_1;
        }
        tmp_subscript_value_1 = mod_consts[13];
        tmp_assign_source_1 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_1, tmp_subscript_value_1, 0);
        Py_DECREF(tmp_expression_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 49;
            type_description_1 = "cccco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_prefix) == NULL);
        PyCell_SET(var_prefix, tmp_assign_source_1);

    }
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(Nuitka_Cell_GET(var_prefix));
        tmp_cmp_expr_left_1 = Nuitka_Cell_GET(var_prefix);
        tmp_cmp_expr_right_1 = mod_consts[14];
        tmp_res = PySequence_Contains(tmp_cmp_expr_right_1, tmp_cmp_expr_left_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 50;
            type_description_1 = "cccco";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_raise_value_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_expression_value_4;
        tmp_raise_type_1 = PyExc_AssertionError;
        CHECK_OBJECT(Nuitka_Cell_GET(par_self));
        tmp_expression_value_4 = Nuitka_Cell_GET(par_self);
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[10]);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 50;
            type_description_1 = "cccco";
            goto frame_exception_exit_1;
        }
        tmp_raise_value_1 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_raise_value_1, 0, tmp_tuple_element_1);
        exception_type = tmp_raise_type_1;
        Py_INCREF(tmp_raise_type_1);
        exception_value = tmp_raise_value_1;
        exception_lineno = 50;
        RAISE_EXCEPTION_WITH_VALUE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "cccco";
        goto frame_exception_exit_1;
    }
    branch_no_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a618f4b7bad263da9fe70d1cfc302796);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a618f4b7bad263da9fe70d1cfc302796);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a618f4b7bad263da9fe70d1cfc302796, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_a618f4b7bad263da9fe70d1cfc302796->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a618f4b7bad263da9fe70d1cfc302796, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_a618f4b7bad263da9fe70d1cfc302796,
        type_description_1,
        par_self,
        par_scalar_typer,
        par_size,
        var_prefix,
        var_typer
    );


    // Release cached frame if used for exception.
    if (frame_a618f4b7bad263da9fe70d1cfc302796 == cache_frame_a618f4b7bad263da9fe70d1cfc302796) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_a618f4b7bad263da9fe70d1cfc302796);
        cache_frame_a618f4b7bad263da9fe70d1cfc302796 = NULL;
    }

    assertFrameObject(frame_a618f4b7bad263da9fe70d1cfc302796);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    {
        bool tmp_condition_result_2;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        CHECK_OBJECT(Nuitka_Cell_GET(par_size));
        tmp_cmp_expr_left_2 = Nuitka_Cell_GET(par_size);
        tmp_cmp_expr_right_2 = Py_None;
        tmp_condition_result_2 = (tmp_cmp_expr_left_2 == tmp_cmp_expr_right_2) ? true : false;
        if (tmp_condition_result_2 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_2;
        struct Nuitka_CellObject *tmp_closure_1[1];

        tmp_closure_1[0] = par_scalar_typer;
        Py_INCREF(tmp_closure_1[0]);

        tmp_assign_source_2 = MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__2_array_typer$$$function__1_typer(tmp_closure_1);

        assert(var_typer == NULL);
        var_typer = tmp_assign_source_2;
    }
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_assign_source_3;
        struct Nuitka_CellObject *tmp_closure_2[4];

        tmp_closure_2[0] = var_prefix;
        Py_INCREF(tmp_closure_2[0]);
        tmp_closure_2[1] = par_scalar_typer;
        Py_INCREF(tmp_closure_2[1]);
        tmp_closure_2[2] = par_self;
        Py_INCREF(tmp_closure_2[2]);
        tmp_closure_2[3] = par_size;
        Py_INCREF(tmp_closure_2[3]);

        tmp_assign_source_3 = MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__2_array_typer$$$function__2_typer(tmp_closure_2);

        assert(var_typer == NULL);
        var_typer = tmp_assign_source_3;
    }
    branch_end_2:;
    CHECK_OBJECT(var_typer);
    tmp_return_value = var_typer;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_prefix);
    Py_DECREF(var_prefix);
    var_prefix = NULL;
    CHECK_OBJECT(var_typer);
    Py_DECREF(var_typer);
    var_typer = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(var_prefix);
    Py_DECREF(var_prefix);
    var_prefix = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_scalar_typer);
    Py_DECREF(par_scalar_typer);
    CHECK_OBJECT(par_size);
    Py_DECREF(par_size);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_scalar_typer);
    Py_DECREF(par_scalar_typer);
    CHECK_OBJECT(par_size);
    Py_DECREF(par_size);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numba$core$typing$randomdecl$$$function__2_array_typer$$$function__1_typer(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_args = python_pars[0];
    PyObject *par_kwargs = python_pars[1];
    struct Nuitka_FrameObject *frame_1ea27e40fe2f4a5f1fc9107d177849f8;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_1ea27e40fe2f4a5f1fc9107d177849f8 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_1ea27e40fe2f4a5f1fc9107d177849f8)) {
        Py_XDECREF(cache_frame_1ea27e40fe2f4a5f1fc9107d177849f8);

#if _DEBUG_REFCOUNTS
        if (cache_frame_1ea27e40fe2f4a5f1fc9107d177849f8 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_1ea27e40fe2f4a5f1fc9107d177849f8 = MAKE_FUNCTION_FRAME(codeobj_1ea27e40fe2f4a5f1fc9107d177849f8, module_numba$core$typing$randomdecl, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_1ea27e40fe2f4a5f1fc9107d177849f8->m_type_description == NULL);
    frame_1ea27e40fe2f4a5f1fc9107d177849f8 = cache_frame_1ea27e40fe2f4a5f1fc9107d177849f8;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_1ea27e40fe2f4a5f1fc9107d177849f8);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_1ea27e40fe2f4a5f1fc9107d177849f8) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_dircall_arg3_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 55;
            type_description_1 = "ooc";
            goto frame_exception_exit_1;
        }

        tmp_dircall_arg1_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_args);
        tmp_dircall_arg2_1 = par_args;
        CHECK_OBJECT(par_kwargs);
        tmp_dircall_arg3_1 = par_kwargs;
        Py_INCREF(tmp_dircall_arg1_1);
        Py_INCREF(tmp_dircall_arg2_1);
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_return_value = impl___main__$$$function__5_complex_call_helper_star_list_star_dict(dir_call_args);
        }
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 55;
            type_description_1 = "ooc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_1ea27e40fe2f4a5f1fc9107d177849f8);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_1ea27e40fe2f4a5f1fc9107d177849f8);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_1ea27e40fe2f4a5f1fc9107d177849f8);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_1ea27e40fe2f4a5f1fc9107d177849f8, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_1ea27e40fe2f4a5f1fc9107d177849f8->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_1ea27e40fe2f4a5f1fc9107d177849f8, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_1ea27e40fe2f4a5f1fc9107d177849f8,
        type_description_1,
        par_args,
        par_kwargs,
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_1ea27e40fe2f4a5f1fc9107d177849f8 == cache_frame_1ea27e40fe2f4a5f1fc9107d177849f8) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_1ea27e40fe2f4a5f1fc9107d177849f8);
        cache_frame_1ea27e40fe2f4a5f1fc9107d177849f8 = NULL;
    }

    assertFrameObject(frame_1ea27e40fe2f4a5f1fc9107d177849f8);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numba$core$typing$randomdecl$$$function__2_array_typer$$$function__2_typer(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_args = python_pars[0];
    PyObject *par_kwargs = python_pars[1];
    PyObject *var_shape = NULL;
    PyObject *var_ndim = NULL;
    PyObject *var_sig = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_dac91013574804b4041cf37fc02ae1b2;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_dac91013574804b4041cf37fc02ae1b2 = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_dac91013574804b4041cf37fc02ae1b2)) {
        Py_XDECREF(cache_frame_dac91013574804b4041cf37fc02ae1b2);

#if _DEBUG_REFCOUNTS
        if (cache_frame_dac91013574804b4041cf37fc02ae1b2 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_dac91013574804b4041cf37fc02ae1b2 = MAKE_FUNCTION_FRAME(codeobj_dac91013574804b4041cf37fc02ae1b2, module_numba$core$typing$randomdecl, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_dac91013574804b4041cf37fc02ae1b2->m_type_description == NULL);
    frame_dac91013574804b4041cf37fc02ae1b2 = cache_frame_dac91013574804b4041cf37fc02ae1b2;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_dac91013574804b4041cf37fc02ae1b2);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_dac91013574804b4041cf37fc02ae1b2) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[18]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 59;
            type_description_1 = "ooooocccc";
            goto frame_exception_exit_1;
        }

        tmp_cmp_expr_left_1 = Nuitka_Cell_GET(self->m_closure[0]);
        tmp_cmp_expr_right_1 = mod_consts[19];
        tmp_condition_result_1 = RICH_COMPARE_EQ_NBOOL_OBJECT_UNICODE(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 59;
            type_description_1 = "ooooocccc";
            goto frame_exception_exit_1;
        }
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        assert(tmp_condition_result_1 != NUITKA_BOOL_UNASSIGNED);
    }
    branch_yes_1:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_make_exception_arg_1;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_expression_value_1;
        tmp_left_value_1 = mod_consts[20];
        if (Nuitka_Cell_GET(self->m_closure[2]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[21]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 61;
            type_description_1 = "ooooocccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_1 = Nuitka_Cell_GET(self->m_closure[2]);
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[10]);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 61;
            type_description_1 = "ooooocccc";
            goto frame_exception_exit_1;
        }
        tmp_right_value_1 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_right_value_1, 0, tmp_tuple_element_1);
        tmp_make_exception_arg_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_1, tmp_right_value_1);
        Py_DECREF(tmp_right_value_1);
        if (tmp_make_exception_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 61;
            type_description_1 = "ooooocccc";
            goto frame_exception_exit_1;
        }
        frame_dac91013574804b4041cf37fc02ae1b2->m_frame.f_lineno = 60;
        tmp_raise_type_1 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_TypeError, tmp_make_exception_arg_1);
        Py_DECREF(tmp_make_exception_arg_1);
        assert(!(tmp_raise_type_1 == NULL));
        exception_type = tmp_raise_type_1;
        exception_lineno = 60;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ooooocccc";
        goto frame_exception_exit_1;
    }
    branch_no_1:;
    // Tried code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[22]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[22]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 62;
            type_description_1 = "ooooocccc";
            goto try_except_handler_2;
        }
        if (Nuitka_Cell_GET(self->m_closure[3]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[23]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 62;
            type_description_1 = "ooooocccc";
            goto try_except_handler_2;
        }

        tmp_args_element_value_1 = Nuitka_Cell_GET(self->m_closure[3]);
        frame_dac91013574804b4041cf37fc02ae1b2->m_frame.f_lineno = 62;
        tmp_iter_arg_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_iter_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 62;
            type_description_1 = "ooooocccc";
            goto try_except_handler_2;
        }
        tmp_assign_source_1 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_1);
        Py_DECREF(tmp_iter_arg_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 62;
            type_description_1 = "ooooocccc";
            goto try_except_handler_2;
        }
        assert(tmp_tuple_unpack_1__source_iter == NULL);
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_1;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_2 = UNPACK_NEXT(tmp_unpack_1, 0, 2);
        if (tmp_assign_source_2 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooocccc";
            exception_lineno = 62;
            goto try_except_handler_3;
        }
        assert(tmp_tuple_unpack_1__element_1 == NULL);
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_3 = UNPACK_NEXT(tmp_unpack_2, 1, 2);
        if (tmp_assign_source_3 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooocccc";
            exception_lineno = 62;
            goto try_except_handler_3;
        }
        assert(tmp_tuple_unpack_1__element_2 == NULL);
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_3;
    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "ooooocccc";
                    exception_lineno = 62;
                    goto try_except_handler_3;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[24];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "ooooocccc";
            exception_lineno = 62;
            goto try_except_handler_3;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    {
        PyObject *tmp_assign_source_4;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_1);
        tmp_assign_source_4 = tmp_tuple_unpack_1__element_1;
        assert(var_shape == NULL);
        Py_INCREF(tmp_assign_source_4);
        var_shape = tmp_assign_source_4;
    }
    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_2);
        tmp_assign_source_5 = tmp_tuple_unpack_1__element_2;
        assert(var_ndim == NULL);
        Py_INCREF(tmp_assign_source_5);
        var_ndim = tmp_assign_source_5;
    }
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_dircall_arg3_1;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 65;
            type_description_1 = "ooooocccc";
            goto frame_exception_exit_1;
        }

        tmp_dircall_arg1_1 = Nuitka_Cell_GET(self->m_closure[1]);
        CHECK_OBJECT(par_args);
        tmp_dircall_arg2_1 = par_args;
        CHECK_OBJECT(par_kwargs);
        tmp_dircall_arg3_1 = par_kwargs;
        Py_INCREF(tmp_dircall_arg1_1);
        Py_INCREF(tmp_dircall_arg2_1);
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_assign_source_6 = impl___main__$$$function__5_complex_call_helper_star_list_star_dict(dir_call_args);
        }
        if (tmp_assign_source_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 65;
            type_description_1 = "ooooocccc";
            goto frame_exception_exit_1;
        }
        assert(var_sig == NULL);
        var_sig = tmp_assign_source_6;
    }
    {
        bool tmp_condition_result_2;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        CHECK_OBJECT(var_sig);
        tmp_cmp_expr_left_2 = var_sig;
        tmp_cmp_expr_right_2 = Py_None;
        tmp_condition_result_2 = (tmp_cmp_expr_left_2 != tmp_cmp_expr_right_2) ? true : false;
        if (tmp_condition_result_2 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_dircall_arg1_2;
        PyObject *tmp_dircall_arg2_2;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_dircall_arg3_2;
        PyObject *tmp_left_value_2;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_right_value_2;
        PyObject *tmp_tuple_element_3;
        tmp_dircall_arg1_2 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[25]);

        if (unlikely(tmp_dircall_arg1_2 == NULL)) {
            tmp_dircall_arg1_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[25]);
        }

        if (tmp_dircall_arg1_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 67;
            type_description_1 = "ooooocccc";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[0]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[0]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 68;
            type_description_1 = "ooooocccc";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[26]);
        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 68;
            type_description_1 = "ooooocccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_sig);
        tmp_expression_value_3 = var_sig;
        tmp_args_element_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[27]);
        if (tmp_args_element_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 68;
            type_description_1 = "ooooocccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_ndim);
        tmp_args_element_value_3 = var_ndim;
        tmp_args_element_value_4 = mod_consts[28];
        frame_dac91013574804b4041cf37fc02ae1b2->m_frame.f_lineno = 68;
        {
            PyObject *call_args[] = {tmp_args_element_value_2, tmp_args_element_value_3, tmp_args_element_value_4};
            tmp_tuple_element_2 = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_2, call_args);
        }

        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_2);
        if (tmp_tuple_element_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 68;
            type_description_1 = "ooooocccc";
            goto frame_exception_exit_1;
        }
        tmp_dircall_arg2_2 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_dircall_arg2_2, 0, tmp_tuple_element_2);
        CHECK_OBJECT(var_sig);
        tmp_expression_value_4 = var_sig;
        tmp_left_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[29]);
        if (tmp_left_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_dircall_arg2_2);

            exception_lineno = 69;
            type_description_1 = "ooooocccc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_shape);
        tmp_tuple_element_3 = var_shape;
        tmp_right_value_2 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_right_value_2, 0, tmp_tuple_element_3);
        tmp_dircall_arg3_2 = BINARY_OPERATION_ADD_OBJECT_OBJECT_TUPLE(tmp_left_value_2, tmp_right_value_2);
        Py_DECREF(tmp_left_value_2);
        Py_DECREF(tmp_right_value_2);
        if (tmp_dircall_arg3_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_dircall_arg2_2);

            exception_lineno = 69;
            type_description_1 = "ooooocccc";
            goto frame_exception_exit_1;
        }
        Py_INCREF(tmp_dircall_arg1_2);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_2, tmp_dircall_arg2_2, tmp_dircall_arg3_2};
            tmp_return_value = impl___main__$$$function__6_complex_call_helper_pos_star_list(dir_call_args);
        }
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 67;
            type_description_1 = "ooooocccc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_no_2:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_dac91013574804b4041cf37fc02ae1b2);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_dac91013574804b4041cf37fc02ae1b2);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_dac91013574804b4041cf37fc02ae1b2);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_dac91013574804b4041cf37fc02ae1b2, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_dac91013574804b4041cf37fc02ae1b2->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_dac91013574804b4041cf37fc02ae1b2, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_dac91013574804b4041cf37fc02ae1b2,
        type_description_1,
        par_args,
        par_kwargs,
        var_shape,
        var_ndim,
        var_sig,
        self->m_closure[0],
        self->m_closure[2],
        self->m_closure[3],
        self->m_closure[1]
    );


    // Release cached frame if used for exception.
    if (frame_dac91013574804b4041cf37fc02ae1b2 == cache_frame_dac91013574804b4041cf37fc02ae1b2) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_dac91013574804b4041cf37fc02ae1b2);
        cache_frame_dac91013574804b4041cf37fc02ae1b2 = NULL;
    }

    assertFrameObject(frame_dac91013574804b4041cf37fc02ae1b2);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_shape);
    Py_DECREF(var_shape);
    var_shape = NULL;
    CHECK_OBJECT(var_ndim);
    Py_DECREF(var_ndim);
    var_ndim = NULL;
    CHECK_OBJECT(var_sig);
    Py_DECREF(var_sig);
    var_sig = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_shape);
    var_shape = NULL;
    Py_XDECREF(var_ndim);
    var_ndim = NULL;
    Py_XDECREF(var_sig);
    var_sig = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_args);
    Py_DECREF(par_args);
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numba$core$typing$randomdecl$$$function__3_array_typer(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_size = python_pars[1];
    struct Nuitka_CellObject *var_key = Nuitka_Cell_Empty();
    struct Nuitka_CellObject *var_cases = Nuitka_Cell_Empty();
    struct Nuitka_CellObject *var_context = Nuitka_Cell_Empty();
    PyObject *var_concrete_scalar_typer = NULL;
    struct Nuitka_FrameObject *frame_43ebdb786cc6a8e2fb925c0830336ae7;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_43ebdb786cc6a8e2fb925c0830336ae7 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_43ebdb786cc6a8e2fb925c0830336ae7)) {
        Py_XDECREF(cache_frame_43ebdb786cc6a8e2fb925c0830336ae7);

#if _DEBUG_REFCOUNTS
        if (cache_frame_43ebdb786cc6a8e2fb925c0830336ae7 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_43ebdb786cc6a8e2fb925c0830336ae7 = MAKE_FUNCTION_FRAME(codeobj_43ebdb786cc6a8e2fb925c0830336ae7, module_numba$core$typing$randomdecl, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_43ebdb786cc6a8e2fb925c0830336ae7->m_type_description == NULL);
    frame_43ebdb786cc6a8e2fb925c0830336ae7 = cache_frame_43ebdb786cc6a8e2fb925c0830336ae7;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_43ebdb786cc6a8e2fb925c0830336ae7);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_43ebdb786cc6a8e2fb925c0830336ae7) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_assign_source_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[10]);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 81;
            type_description_1 = "ooccco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_key) == NULL);
        PyCell_SET(var_key, tmp_assign_source_1);

    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_assign_source_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[30]);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 82;
            type_description_1 = "ooccco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_cases) == NULL);
        PyCell_SET(var_cases, tmp_assign_source_2);

    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_assign_source_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[31]);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 83;
            type_description_1 = "ooccco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_context) == NULL);
        PyCell_SET(var_context, tmp_assign_source_3);

    }
    {
        PyObject *tmp_assign_source_4;
        struct Nuitka_CellObject *tmp_closure_1[3];

        tmp_closure_1[0] = var_cases;
        Py_INCREF(tmp_closure_1[0]);
        tmp_closure_1[1] = var_context;
        Py_INCREF(tmp_closure_1[1]);
        tmp_closure_1[2] = var_key;
        Py_INCREF(tmp_closure_1[2]);

        tmp_assign_source_4 = MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__3_array_typer$$$function__1_concrete_scalar_typer(tmp_closure_1);

        assert(var_concrete_scalar_typer == NULL);
        var_concrete_scalar_typer = tmp_assign_source_4;
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        tmp_called_instance_1 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[34]);

        if (unlikely(tmp_called_instance_1 == NULL)) {
            tmp_called_instance_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[34]);
        }

        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 91;
            type_description_1 = "ooccco";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_args_element_value_1 = par_self;
        CHECK_OBJECT(var_concrete_scalar_typer);
        tmp_args_element_value_2 = var_concrete_scalar_typer;
        CHECK_OBJECT(par_size);
        tmp_args_element_value_3 = par_size;
        frame_43ebdb786cc6a8e2fb925c0830336ae7->m_frame.f_lineno = 91;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2, tmp_args_element_value_3};
            tmp_return_value = CALL_METHOD_WITH_ARGS3(
                tmp_called_instance_1,
                mod_consts[35],
                call_args
            );
        }

        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 91;
            type_description_1 = "ooccco";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_43ebdb786cc6a8e2fb925c0830336ae7);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_43ebdb786cc6a8e2fb925c0830336ae7);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_43ebdb786cc6a8e2fb925c0830336ae7);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_43ebdb786cc6a8e2fb925c0830336ae7, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_43ebdb786cc6a8e2fb925c0830336ae7->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_43ebdb786cc6a8e2fb925c0830336ae7, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_43ebdb786cc6a8e2fb925c0830336ae7,
        type_description_1,
        par_self,
        par_size,
        var_key,
        var_cases,
        var_context,
        var_concrete_scalar_typer
    );


    // Release cached frame if used for exception.
    if (frame_43ebdb786cc6a8e2fb925c0830336ae7 == cache_frame_43ebdb786cc6a8e2fb925c0830336ae7) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_43ebdb786cc6a8e2fb925c0830336ae7);
        cache_frame_43ebdb786cc6a8e2fb925c0830336ae7 = NULL;
    }

    assertFrameObject(frame_43ebdb786cc6a8e2fb925c0830336ae7);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_key);
    Py_DECREF(var_key);
    var_key = NULL;
    CHECK_OBJECT(var_cases);
    Py_DECREF(var_cases);
    var_cases = NULL;
    CHECK_OBJECT(var_context);
    Py_DECREF(var_context);
    var_context = NULL;
    CHECK_OBJECT(var_concrete_scalar_typer);
    Py_DECREF(var_concrete_scalar_typer);
    var_concrete_scalar_typer = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(var_key);
    Py_DECREF(var_key);
    var_key = NULL;
    CHECK_OBJECT(var_cases);
    Py_DECREF(var_cases);
    var_cases = NULL;
    CHECK_OBJECT(var_context);
    Py_DECREF(var_context);
    var_context = NULL;
    Py_XDECREF(var_concrete_scalar_typer);
    var_concrete_scalar_typer = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_size);
    Py_DECREF(par_size);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_size);
    Py_DECREF(par_size);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numba$core$typing$randomdecl$$$function__3_array_typer$$$function__1_concrete_scalar_typer(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_args = python_pars[0];
    PyObject *par_kwargs = python_pars[1];
    struct Nuitka_FrameObject *frame_c5c72dfdab174c25ae231187ffe7ab30;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_c5c72dfdab174c25ae231187ffe7ab30 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_c5c72dfdab174c25ae231187ffe7ab30)) {
        Py_XDECREF(cache_frame_c5c72dfdab174c25ae231187ffe7ab30);

#if _DEBUG_REFCOUNTS
        if (cache_frame_c5c72dfdab174c25ae231187ffe7ab30 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_c5c72dfdab174c25ae231187ffe7ab30 = MAKE_FUNCTION_FRAME(codeobj_c5c72dfdab174c25ae231187ffe7ab30, module_numba$core$typing$randomdecl, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_c5c72dfdab174c25ae231187ffe7ab30->m_type_description == NULL);
    frame_c5c72dfdab174c25ae231187ffe7ab30 = cache_frame_c5c72dfdab174c25ae231187ffe7ab30;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_c5c72dfdab174c25ae231187ffe7ab30);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_c5c72dfdab174c25ae231187ffe7ab30) == 2); // Frame stack

    // Framed code:
    loop_start_1:;
    {
        bool tmp_condition_result_1;
        PyObject *tmp_operand_value_1;
        int tmp_and_left_truth_1;
        PyObject *tmp_and_left_value_1;
        PyObject *tmp_and_right_value_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_subscript_value_1;
        if (par_args == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[29]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 87;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }

        tmp_and_left_value_1 = par_args;
        tmp_and_left_truth_1 = CHECK_IF_TRUE(tmp_and_left_value_1);
        if (tmp_and_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 87;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        if (par_args == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[29]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 87;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_1 = par_args;
        tmp_subscript_value_1 = mod_consts[36];
        tmp_cmp_expr_left_1 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_1, tmp_subscript_value_1, -1);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 87;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = Py_None;
        tmp_and_right_value_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? Py_True : Py_False;
        Py_DECREF(tmp_cmp_expr_left_1);
        tmp_operand_value_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_operand_value_1 = tmp_and_left_value_1;
        and_end_1:;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 87;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    goto loop_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_subscript_value_2;
        if (par_args == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[29]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 88;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_2 = par_args;
        tmp_subscript_value_2 = mod_consts[37];
        tmp_assign_source_1 = LOOKUP_SUBSCRIPT(tmp_expression_value_2, tmp_subscript_value_2);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 88;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_args;
            par_args = tmp_assign_source_1;
            Py_XDECREF(old);
        }

    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 87;
        type_description_1 = "ooccc";
        goto frame_exception_exit_1;
    }
    goto loop_start_1;
    loop_end_1:;
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[31]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 89;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_3 = Nuitka_Cell_GET(self->m_closure[1]);
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[38]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 89;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }
        if (Nuitka_Cell_GET(self->m_closure[2]) == NULL) {
            Py_DECREF(tmp_called_value_1);
            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[10]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 89;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }

        tmp_args_element_value_1 = Nuitka_Cell_GET(self->m_closure[2]);
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {
            Py_DECREF(tmp_called_value_1);
            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[30]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 89;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }

        tmp_args_element_value_2 = Nuitka_Cell_GET(self->m_closure[0]);
        if (par_args == NULL) {
            Py_DECREF(tmp_called_value_1);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[29]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 89;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }

        tmp_args_element_value_3 = par_args;
        CHECK_OBJECT(par_kwargs);
        tmp_args_element_value_4 = par_kwargs;
        frame_c5c72dfdab174c25ae231187ffe7ab30->m_frame.f_lineno = 89;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2, tmp_args_element_value_3, tmp_args_element_value_4};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS4(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 89;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_c5c72dfdab174c25ae231187ffe7ab30);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_c5c72dfdab174c25ae231187ffe7ab30);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_c5c72dfdab174c25ae231187ffe7ab30);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_c5c72dfdab174c25ae231187ffe7ab30, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_c5c72dfdab174c25ae231187ffe7ab30->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_c5c72dfdab174c25ae231187ffe7ab30, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_c5c72dfdab174c25ae231187ffe7ab30,
        type_description_1,
        par_args,
        par_kwargs,
        self->m_closure[1],
        self->m_closure[2],
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_c5c72dfdab174c25ae231187ffe7ab30 == cache_frame_c5c72dfdab174c25ae231187ffe7ab30) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_c5c72dfdab174c25ae231187ffe7ab30);
        cache_frame_c5c72dfdab174c25ae231187ffe7ab30 = NULL;
    }

    assertFrameObject(frame_c5c72dfdab174c25ae231187ffe7ab30);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(par_args);
    par_args = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_args);
    par_args = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numba$core$typing$randomdecl$$$function__4_generic(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = Nuitka_Cell_New1(python_pars[0]);
    PyObject *var_typer = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_defaults_1;
        struct Nuitka_CellObject *tmp_closure_1[1];
        tmp_defaults_1 = mod_consts[39];
        Py_INCREF(tmp_defaults_1);

        tmp_closure_1[0] = par_self;
        Py_INCREF(tmp_closure_1[0]);

        tmp_assign_source_1 = MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__4_generic$$$function__1_typer(tmp_defaults_1, tmp_closure_1);

        assert(var_typer == NULL);
        var_typer = tmp_assign_source_1;
    }
    // Tried code:
    CHECK_OBJECT(var_typer);
    tmp_return_value = var_typer;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_typer);
    Py_DECREF(var_typer);
    var_typer = NULL;
    goto function_return_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numba$core$typing$randomdecl$$$function__4_generic$$$function__1_typer(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_size = python_pars[0];
    struct Nuitka_FrameObject *frame_574f971d57a21fb8b8fa0133be987505;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_574f971d57a21fb8b8fa0133be987505 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_574f971d57a21fb8b8fa0133be987505)) {
        Py_XDECREF(cache_frame_574f971d57a21fb8b8fa0133be987505);

#if _DEBUG_REFCOUNTS
        if (cache_frame_574f971d57a21fb8b8fa0133be987505 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_574f971d57a21fb8b8fa0133be987505 = MAKE_FUNCTION_FRAME(codeobj_574f971d57a21fb8b8fa0133be987505, module_numba$core$typing$randomdecl, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_574f971d57a21fb8b8fa0133be987505->m_type_description == NULL);
    frame_574f971d57a21fb8b8fa0133be987505 = cache_frame_574f971d57a21fb8b8fa0133be987505;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_574f971d57a21fb8b8fa0133be987505);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_574f971d57a21fb8b8fa0133be987505) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[21]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 105;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_size);
        tmp_args_element_value_1 = par_size;
        frame_574f971d57a21fb8b8fa0133be987505->m_frame.f_lineno = 105;
        tmp_called_value_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[35], tmp_args_element_value_1);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 105;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        frame_574f971d57a21fb8b8fa0133be987505->m_frame.f_lineno = 105;
        tmp_return_value = CALL_FUNCTION_NO_ARGS(tmp_called_value_1);
        Py_DECREF(tmp_called_value_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 105;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_574f971d57a21fb8b8fa0133be987505);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_574f971d57a21fb8b8fa0133be987505);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_574f971d57a21fb8b8fa0133be987505);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_574f971d57a21fb8b8fa0133be987505, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_574f971d57a21fb8b8fa0133be987505->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_574f971d57a21fb8b8fa0133be987505, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_574f971d57a21fb8b8fa0133be987505,
        type_description_1,
        par_size,
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_574f971d57a21fb8b8fa0133be987505 == cache_frame_574f971d57a21fb8b8fa0133be987505) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_574f971d57a21fb8b8fa0133be987505);
        cache_frame_574f971d57a21fb8b8fa0133be987505 = NULL;
    }

    assertFrameObject(frame_574f971d57a21fb8b8fa0133be987505);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_size);
    Py_DECREF(par_size);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_size);
    Py_DECREF(par_size);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numba$core$typing$randomdecl$$$function__5_generic(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = Nuitka_Cell_New1(python_pars[0]);
    PyObject *var_typer = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_defaults_1;
        struct Nuitka_CellObject *tmp_closure_1[1];
        tmp_defaults_1 = mod_consts[41];
        Py_INCREF(tmp_defaults_1);

        tmp_closure_1[0] = par_self;
        Py_INCREF(tmp_closure_1[0]);

        tmp_assign_source_1 = MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__5_generic$$$function__1_typer(tmp_defaults_1, tmp_closure_1);

        assert(var_typer == NULL);
        var_typer = tmp_assign_source_1;
    }
    // Tried code:
    CHECK_OBJECT(var_typer);
    tmp_return_value = var_typer;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_typer);
    Py_DECREF(var_typer);
    var_typer = NULL;
    goto function_return_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numba$core$typing$randomdecl$$$function__5_generic$$$function__1_typer(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_low = python_pars[0];
    PyObject *par_high = python_pars[1];
    PyObject *par_size = python_pars[2];
    struct Nuitka_FrameObject *frame_2100ccda26d740d3658fbbd6991bb03f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_2100ccda26d740d3658fbbd6991bb03f = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_2100ccda26d740d3658fbbd6991bb03f)) {
        Py_XDECREF(cache_frame_2100ccda26d740d3658fbbd6991bb03f);

#if _DEBUG_REFCOUNTS
        if (cache_frame_2100ccda26d740d3658fbbd6991bb03f == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_2100ccda26d740d3658fbbd6991bb03f = MAKE_FUNCTION_FRAME(codeobj_2100ccda26d740d3658fbbd6991bb03f, module_numba$core$typing$randomdecl, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_2100ccda26d740d3658fbbd6991bb03f->m_type_description == NULL);
    frame_2100ccda26d740d3658fbbd6991bb03f = cache_frame_2100ccda26d740d3658fbbd6991bb03f;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_2100ccda26d740d3658fbbd6991bb03f);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_2100ccda26d740d3658fbbd6991bb03f) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[21]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 134;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_size);
        tmp_args_element_value_1 = par_size;
        frame_2100ccda26d740d3658fbbd6991bb03f->m_frame.f_lineno = 134;
        tmp_called_value_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[35], tmp_args_element_value_1);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 134;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_low);
        tmp_args_element_value_2 = par_low;
        CHECK_OBJECT(par_high);
        tmp_args_element_value_3 = par_high;
        frame_2100ccda26d740d3658fbbd6991bb03f->m_frame.f_lineno = 134;
        {
            PyObject *call_args[] = {tmp_args_element_value_2, tmp_args_element_value_3};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 134;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2100ccda26d740d3658fbbd6991bb03f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_2100ccda26d740d3658fbbd6991bb03f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2100ccda26d740d3658fbbd6991bb03f);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_2100ccda26d740d3658fbbd6991bb03f, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_2100ccda26d740d3658fbbd6991bb03f->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_2100ccda26d740d3658fbbd6991bb03f, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_2100ccda26d740d3658fbbd6991bb03f,
        type_description_1,
        par_low,
        par_high,
        par_size,
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_2100ccda26d740d3658fbbd6991bb03f == cache_frame_2100ccda26d740d3658fbbd6991bb03f) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_2100ccda26d740d3658fbbd6991bb03f);
        cache_frame_2100ccda26d740d3658fbbd6991bb03f = NULL;
    }

    assertFrameObject(frame_2100ccda26d740d3658fbbd6991bb03f);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_low);
    Py_DECREF(par_low);
    CHECK_OBJECT(par_high);
    Py_DECREF(par_high);
    CHECK_OBJECT(par_size);
    Py_DECREF(par_size);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_low);
    Py_DECREF(par_low);
    CHECK_OBJECT(par_high);
    Py_DECREF(par_high);
    CHECK_OBJECT(par_size);
    Py_DECREF(par_size);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numba$core$typing$randomdecl$$$function__6_generic(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = Nuitka_Cell_New1(python_pars[0]);
    PyObject *var_typer = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_defaults_1;
        struct Nuitka_CellObject *tmp_closure_1[1];
        tmp_defaults_1 = mod_consts[39];
        Py_INCREF(tmp_defaults_1);

        tmp_closure_1[0] = par_self;
        Py_INCREF(tmp_closure_1[0]);

        tmp_assign_source_1 = MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__6_generic$$$function__1_typer(tmp_defaults_1, tmp_closure_1);

        assert(var_typer == NULL);
        var_typer = tmp_assign_source_1;
    }
    // Tried code:
    CHECK_OBJECT(var_typer);
    tmp_return_value = var_typer;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_typer);
    Py_DECREF(var_typer);
    var_typer = NULL;
    goto function_return_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numba$core$typing$randomdecl$$$function__6_generic$$$function__1_typer(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[0];
    PyObject *par_size = python_pars[1];
    struct Nuitka_FrameObject *frame_7db89ac580ab3d865951eafa1bd352d0;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_7db89ac580ab3d865951eafa1bd352d0 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_7db89ac580ab3d865951eafa1bd352d0)) {
        Py_XDECREF(cache_frame_7db89ac580ab3d865951eafa1bd352d0);

#if _DEBUG_REFCOUNTS
        if (cache_frame_7db89ac580ab3d865951eafa1bd352d0 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_7db89ac580ab3d865951eafa1bd352d0 = MAKE_FUNCTION_FRAME(codeobj_7db89ac580ab3d865951eafa1bd352d0, module_numba$core$typing$randomdecl, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_7db89ac580ab3d865951eafa1bd352d0->m_type_description == NULL);
    frame_7db89ac580ab3d865951eafa1bd352d0 = cache_frame_7db89ac580ab3d865951eafa1bd352d0;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_7db89ac580ab3d865951eafa1bd352d0);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_7db89ac580ab3d865951eafa1bd352d0) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[21]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 162;
            type_description_1 = "ooc";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_size);
        tmp_args_element_value_1 = par_size;
        frame_7db89ac580ab3d865951eafa1bd352d0->m_frame.f_lineno = 162;
        tmp_called_value_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[35], tmp_args_element_value_1);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 162;
            type_description_1 = "ooc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_a);
        tmp_args_element_value_2 = par_a;
        frame_7db89ac580ab3d865951eafa1bd352d0->m_frame.f_lineno = 162;
        tmp_return_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_1, tmp_args_element_value_2);
        Py_DECREF(tmp_called_value_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 162;
            type_description_1 = "ooc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_7db89ac580ab3d865951eafa1bd352d0);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_7db89ac580ab3d865951eafa1bd352d0);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_7db89ac580ab3d865951eafa1bd352d0);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_7db89ac580ab3d865951eafa1bd352d0, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_7db89ac580ab3d865951eafa1bd352d0->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_7db89ac580ab3d865951eafa1bd352d0, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_7db89ac580ab3d865951eafa1bd352d0,
        type_description_1,
        par_a,
        par_size,
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_7db89ac580ab3d865951eafa1bd352d0 == cache_frame_7db89ac580ab3d865951eafa1bd352d0) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_7db89ac580ab3d865951eafa1bd352d0);
        cache_frame_7db89ac580ab3d865951eafa1bd352d0 = NULL;
    }

    assertFrameObject(frame_7db89ac580ab3d865951eafa1bd352d0);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_a);
    Py_DECREF(par_a);
    CHECK_OBJECT(par_size);
    Py_DECREF(par_size);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_a);
    Py_DECREF(par_a);
    CHECK_OBJECT(par_size);
    Py_DECREF(par_size);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numba$core$typing$randomdecl$$$function__7_generic(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = Nuitka_Cell_New1(python_pars[0]);
    PyObject *var_typer = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_defaults_1;
        struct Nuitka_CellObject *tmp_closure_1[1];
        tmp_defaults_1 = mod_consts[39];
        Py_INCREF(tmp_defaults_1);

        tmp_closure_1[0] = par_self;
        Py_INCREF(tmp_closure_1[0]);

        tmp_assign_source_1 = MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__7_generic$$$function__1_typer(tmp_defaults_1, tmp_closure_1);

        assert(var_typer == NULL);
        var_typer = tmp_assign_source_1;
    }
    // Tried code:
    CHECK_OBJECT(var_typer);
    tmp_return_value = var_typer;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_typer);
    Py_DECREF(var_typer);
    var_typer = NULL;
    goto function_return_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numba$core$typing$randomdecl$$$function__7_generic$$$function__1_typer(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_n = python_pars[0];
    PyObject *par_p = python_pars[1];
    PyObject *par_size = python_pars[2];
    struct Nuitka_FrameObject *frame_a935f95482b6e2219e7b1747a9f4524f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_a935f95482b6e2219e7b1747a9f4524f = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_a935f95482b6e2219e7b1747a9f4524f)) {
        Py_XDECREF(cache_frame_a935f95482b6e2219e7b1747a9f4524f);

#if _DEBUG_REFCOUNTS
        if (cache_frame_a935f95482b6e2219e7b1747a9f4524f == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_a935f95482b6e2219e7b1747a9f4524f = MAKE_FUNCTION_FRAME(codeobj_a935f95482b6e2219e7b1747a9f4524f, module_numba$core$typing$randomdecl, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_a935f95482b6e2219e7b1747a9f4524f->m_type_description == NULL);
    frame_a935f95482b6e2219e7b1747a9f4524f = cache_frame_a935f95482b6e2219e7b1747a9f4524f;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_a935f95482b6e2219e7b1747a9f4524f);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_a935f95482b6e2219e7b1747a9f4524f) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[21]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 173;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_size);
        tmp_args_element_value_1 = par_size;
        frame_a935f95482b6e2219e7b1747a9f4524f->m_frame.f_lineno = 173;
        tmp_called_value_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[35], tmp_args_element_value_1);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 173;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_n);
        tmp_args_element_value_2 = par_n;
        CHECK_OBJECT(par_p);
        tmp_args_element_value_3 = par_p;
        frame_a935f95482b6e2219e7b1747a9f4524f->m_frame.f_lineno = 173;
        {
            PyObject *call_args[] = {tmp_args_element_value_2, tmp_args_element_value_3};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 173;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a935f95482b6e2219e7b1747a9f4524f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_a935f95482b6e2219e7b1747a9f4524f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a935f95482b6e2219e7b1747a9f4524f);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a935f95482b6e2219e7b1747a9f4524f, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_a935f95482b6e2219e7b1747a9f4524f->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a935f95482b6e2219e7b1747a9f4524f, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_a935f95482b6e2219e7b1747a9f4524f,
        type_description_1,
        par_n,
        par_p,
        par_size,
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_a935f95482b6e2219e7b1747a9f4524f == cache_frame_a935f95482b6e2219e7b1747a9f4524f) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_a935f95482b6e2219e7b1747a9f4524f);
        cache_frame_a935f95482b6e2219e7b1747a9f4524f = NULL;
    }

    assertFrameObject(frame_a935f95482b6e2219e7b1747a9f4524f);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_n);
    Py_DECREF(par_n);
    CHECK_OBJECT(par_p);
    Py_DECREF(par_p);
    CHECK_OBJECT(par_size);
    Py_DECREF(par_size);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_n);
    Py_DECREF(par_n);
    CHECK_OBJECT(par_p);
    Py_DECREF(par_p);
    CHECK_OBJECT(par_size);
    Py_DECREF(par_size);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numba$core$typing$randomdecl$$$function__8_generic(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = Nuitka_Cell_New1(python_pars[0]);
    PyObject *var_typer = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_defaults_1;
        struct Nuitka_CellObject *tmp_closure_1[1];
        tmp_defaults_1 = mod_consts[41];
        Py_INCREF(tmp_defaults_1);

        tmp_closure_1[0] = par_self;
        Py_INCREF(tmp_closure_1[0]);

        tmp_assign_source_1 = MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__8_generic$$$function__1_typer(tmp_defaults_1, tmp_closure_1);

        assert(var_typer == NULL);
        var_typer = tmp_assign_source_1;
    }
    // Tried code:
    CHECK_OBJECT(var_typer);
    tmp_return_value = var_typer;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_typer);
    Py_DECREF(var_typer);
    var_typer = NULL;
    goto function_return_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numba$core$typing$randomdecl$$$function__8_generic$$$function__1_typer(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_lam = python_pars[0];
    PyObject *par_size = python_pars[1];
    struct Nuitka_FrameObject *frame_98756ce1007a05f3bff39501e1f63497;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_98756ce1007a05f3bff39501e1f63497 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_98756ce1007a05f3bff39501e1f63497)) {
        Py_XDECREF(cache_frame_98756ce1007a05f3bff39501e1f63497);

#if _DEBUG_REFCOUNTS
        if (cache_frame_98756ce1007a05f3bff39501e1f63497 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_98756ce1007a05f3bff39501e1f63497 = MAKE_FUNCTION_FRAME(codeobj_98756ce1007a05f3bff39501e1f63497, module_numba$core$typing$randomdecl, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_98756ce1007a05f3bff39501e1f63497->m_type_description == NULL);
    frame_98756ce1007a05f3bff39501e1f63497 = cache_frame_98756ce1007a05f3bff39501e1f63497;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_98756ce1007a05f3bff39501e1f63497);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_98756ce1007a05f3bff39501e1f63497) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[21]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 183;
            type_description_1 = "ooc";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_size);
        tmp_args_element_value_1 = par_size;
        frame_98756ce1007a05f3bff39501e1f63497->m_frame.f_lineno = 183;
        tmp_called_value_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[35], tmp_args_element_value_1);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 183;
            type_description_1 = "ooc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_lam);
        tmp_args_element_value_2 = par_lam;
        frame_98756ce1007a05f3bff39501e1f63497->m_frame.f_lineno = 183;
        tmp_return_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_1, tmp_args_element_value_2);
        Py_DECREF(tmp_called_value_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 183;
            type_description_1 = "ooc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_98756ce1007a05f3bff39501e1f63497);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_98756ce1007a05f3bff39501e1f63497);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_98756ce1007a05f3bff39501e1f63497);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_98756ce1007a05f3bff39501e1f63497, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_98756ce1007a05f3bff39501e1f63497->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_98756ce1007a05f3bff39501e1f63497, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_98756ce1007a05f3bff39501e1f63497,
        type_description_1,
        par_lam,
        par_size,
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_98756ce1007a05f3bff39501e1f63497 == cache_frame_98756ce1007a05f3bff39501e1f63497) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_98756ce1007a05f3bff39501e1f63497);
        cache_frame_98756ce1007a05f3bff39501e1f63497 = NULL;
    }

    assertFrameObject(frame_98756ce1007a05f3bff39501e1f63497);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_lam);
    Py_DECREF(par_lam);
    CHECK_OBJECT(par_size);
    Py_DECREF(par_size);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_lam);
    Py_DECREF(par_lam);
    CHECK_OBJECT(par_size);
    Py_DECREF(par_size);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numba$core$typing$randomdecl$$$function__9_generic(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = Nuitka_Cell_New1(python_pars[0]);
    PyObject *var_typer = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_defaults_1;
        struct Nuitka_CellObject *tmp_closure_1[1];
        tmp_defaults_1 = mod_consts[41];
        Py_INCREF(tmp_defaults_1);

        tmp_closure_1[0] = par_self;
        Py_INCREF(tmp_closure_1[0]);

        tmp_assign_source_1 = MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__9_generic$$$function__1_typer(tmp_defaults_1, tmp_closure_1);

        assert(var_typer == NULL);
        var_typer = tmp_assign_source_1;
    }
    // Tried code:
    CHECK_OBJECT(var_typer);
    tmp_return_value = var_typer;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_typer);
    Py_DECREF(var_typer);
    var_typer = NULL;
    goto function_return_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numba$core$typing$randomdecl$$$function__9_generic$$$function__1_typer(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_scale = python_pars[0];
    PyObject *par_size = python_pars[1];
    struct Nuitka_FrameObject *frame_39e2fb93c3b32b892b2e3c31d3684381;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_39e2fb93c3b32b892b2e3c31d3684381 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_39e2fb93c3b32b892b2e3c31d3684381)) {
        Py_XDECREF(cache_frame_39e2fb93c3b32b892b2e3c31d3684381);

#if _DEBUG_REFCOUNTS
        if (cache_frame_39e2fb93c3b32b892b2e3c31d3684381 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_39e2fb93c3b32b892b2e3c31d3684381 = MAKE_FUNCTION_FRAME(codeobj_39e2fb93c3b32b892b2e3c31d3684381, module_numba$core$typing$randomdecl, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_39e2fb93c3b32b892b2e3c31d3684381->m_type_description == NULL);
    frame_39e2fb93c3b32b892b2e3c31d3684381 = cache_frame_39e2fb93c3b32b892b2e3c31d3684381;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_39e2fb93c3b32b892b2e3c31d3684381);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_39e2fb93c3b32b892b2e3c31d3684381) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[21]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 194;
            type_description_1 = "ooc";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_size);
        tmp_args_element_value_1 = par_size;
        frame_39e2fb93c3b32b892b2e3c31d3684381->m_frame.f_lineno = 194;
        tmp_called_value_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[35], tmp_args_element_value_1);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 194;
            type_description_1 = "ooc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_scale);
        tmp_args_element_value_2 = par_scale;
        frame_39e2fb93c3b32b892b2e3c31d3684381->m_frame.f_lineno = 194;
        tmp_return_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_1, tmp_args_element_value_2);
        Py_DECREF(tmp_called_value_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 194;
            type_description_1 = "ooc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_39e2fb93c3b32b892b2e3c31d3684381);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_39e2fb93c3b32b892b2e3c31d3684381);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_39e2fb93c3b32b892b2e3c31d3684381);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_39e2fb93c3b32b892b2e3c31d3684381, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_39e2fb93c3b32b892b2e3c31d3684381->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_39e2fb93c3b32b892b2e3c31d3684381, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_39e2fb93c3b32b892b2e3c31d3684381,
        type_description_1,
        par_scale,
        par_size,
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_39e2fb93c3b32b892b2e3c31d3684381 == cache_frame_39e2fb93c3b32b892b2e3c31d3684381) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_39e2fb93c3b32b892b2e3c31d3684381);
        cache_frame_39e2fb93c3b32b892b2e3c31d3684381 = NULL;
    }

    assertFrameObject(frame_39e2fb93c3b32b892b2e3c31d3684381);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_scale);
    Py_DECREF(par_scale);
    CHECK_OBJECT(par_size);
    Py_DECREF(par_size);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_scale);
    Py_DECREF(par_scale);
    CHECK_OBJECT(par_size);
    Py_DECREF(par_size);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numba$core$typing$randomdecl$$$function__10_generic(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = Nuitka_Cell_New1(python_pars[0]);
    PyObject *var_typer = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_defaults_1;
        struct Nuitka_CellObject *tmp_closure_1[1];
        tmp_defaults_1 = mod_consts[39];
        Py_INCREF(tmp_defaults_1);

        tmp_closure_1[0] = par_self;
        Py_INCREF(tmp_closure_1[0]);

        tmp_assign_source_1 = MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__10_generic$$$function__1_typer(tmp_defaults_1, tmp_closure_1);

        assert(var_typer == NULL);
        var_typer = tmp_assign_source_1;
    }
    // Tried code:
    CHECK_OBJECT(var_typer);
    tmp_return_value = var_typer;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_typer);
    Py_DECREF(var_typer);
    var_typer = NULL;
    goto function_return_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numba$core$typing$randomdecl$$$function__10_generic$$$function__1_typer(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_ngood = python_pars[0];
    PyObject *par_nbad = python_pars[1];
    PyObject *par_nsample = python_pars[2];
    PyObject *par_size = python_pars[3];
    struct Nuitka_FrameObject *frame_7e32e97796b716bd5b970ddc6613a2b4;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_7e32e97796b716bd5b970ddc6613a2b4 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_7e32e97796b716bd5b970ddc6613a2b4)) {
        Py_XDECREF(cache_frame_7e32e97796b716bd5b970ddc6613a2b4);

#if _DEBUG_REFCOUNTS
        if (cache_frame_7e32e97796b716bd5b970ddc6613a2b4 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_7e32e97796b716bd5b970ddc6613a2b4 = MAKE_FUNCTION_FRAME(codeobj_7e32e97796b716bd5b970ddc6613a2b4, module_numba$core$typing$randomdecl, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_7e32e97796b716bd5b970ddc6613a2b4->m_type_description == NULL);
    frame_7e32e97796b716bd5b970ddc6613a2b4 = cache_frame_7e32e97796b716bd5b970ddc6613a2b4;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_7e32e97796b716bd5b970ddc6613a2b4);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_7e32e97796b716bd5b970ddc6613a2b4) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[21]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 203;
            type_description_1 = "ooooc";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_size);
        tmp_args_element_value_1 = par_size;
        frame_7e32e97796b716bd5b970ddc6613a2b4->m_frame.f_lineno = 203;
        tmp_called_value_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[35], tmp_args_element_value_1);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 203;
            type_description_1 = "ooooc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_ngood);
        tmp_args_element_value_2 = par_ngood;
        CHECK_OBJECT(par_nbad);
        tmp_args_element_value_3 = par_nbad;
        CHECK_OBJECT(par_nsample);
        tmp_args_element_value_4 = par_nsample;
        frame_7e32e97796b716bd5b970ddc6613a2b4->m_frame.f_lineno = 203;
        {
            PyObject *call_args[] = {tmp_args_element_value_2, tmp_args_element_value_3, tmp_args_element_value_4};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 203;
            type_description_1 = "ooooc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_7e32e97796b716bd5b970ddc6613a2b4);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_7e32e97796b716bd5b970ddc6613a2b4);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_7e32e97796b716bd5b970ddc6613a2b4);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_7e32e97796b716bd5b970ddc6613a2b4, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_7e32e97796b716bd5b970ddc6613a2b4->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_7e32e97796b716bd5b970ddc6613a2b4, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_7e32e97796b716bd5b970ddc6613a2b4,
        type_description_1,
        par_ngood,
        par_nbad,
        par_nsample,
        par_size,
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_7e32e97796b716bd5b970ddc6613a2b4 == cache_frame_7e32e97796b716bd5b970ddc6613a2b4) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_7e32e97796b716bd5b970ddc6613a2b4);
        cache_frame_7e32e97796b716bd5b970ddc6613a2b4 = NULL;
    }

    assertFrameObject(frame_7e32e97796b716bd5b970ddc6613a2b4);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_ngood);
    Py_DECREF(par_ngood);
    CHECK_OBJECT(par_nbad);
    Py_DECREF(par_nbad);
    CHECK_OBJECT(par_nsample);
    Py_DECREF(par_nsample);
    CHECK_OBJECT(par_size);
    Py_DECREF(par_size);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_ngood);
    Py_DECREF(par_ngood);
    CHECK_OBJECT(par_nbad);
    Py_DECREF(par_nbad);
    CHECK_OBJECT(par_nsample);
    Py_DECREF(par_nsample);
    CHECK_OBJECT(par_size);
    Py_DECREF(par_size);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numba$core$typing$randomdecl$$$function__11_generic(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = Nuitka_Cell_New1(python_pars[0]);
    PyObject *var_typer = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_defaults_1;
        struct Nuitka_CellObject *tmp_closure_1[1];
        tmp_defaults_1 = mod_consts[48];
        Py_INCREF(tmp_defaults_1);

        tmp_closure_1[0] = par_self;
        Py_INCREF(tmp_closure_1[0]);

        tmp_assign_source_1 = MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__11_generic$$$function__1_typer(tmp_defaults_1, tmp_closure_1);

        assert(var_typer == NULL);
        var_typer = tmp_assign_source_1;
    }
    // Tried code:
    CHECK_OBJECT(var_typer);
    tmp_return_value = var_typer;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_typer);
    Py_DECREF(var_typer);
    var_typer = NULL;
    goto function_return_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numba$core$typing$randomdecl$$$function__11_generic$$$function__1_typer(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_loc = python_pars[0];
    PyObject *par_scale = python_pars[1];
    PyObject *par_size = python_pars[2];
    struct Nuitka_FrameObject *frame_df8d7dcf01bbc8edc58428990ffcaff6;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_df8d7dcf01bbc8edc58428990ffcaff6 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_df8d7dcf01bbc8edc58428990ffcaff6)) {
        Py_XDECREF(cache_frame_df8d7dcf01bbc8edc58428990ffcaff6);

#if _DEBUG_REFCOUNTS
        if (cache_frame_df8d7dcf01bbc8edc58428990ffcaff6 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_df8d7dcf01bbc8edc58428990ffcaff6 = MAKE_FUNCTION_FRAME(codeobj_df8d7dcf01bbc8edc58428990ffcaff6, module_numba$core$typing$randomdecl, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_df8d7dcf01bbc8edc58428990ffcaff6->m_type_description == NULL);
    frame_df8d7dcf01bbc8edc58428990ffcaff6 = cache_frame_df8d7dcf01bbc8edc58428990ffcaff6;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_df8d7dcf01bbc8edc58428990ffcaff6);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_df8d7dcf01bbc8edc58428990ffcaff6) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[21]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 217;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_size);
        tmp_args_element_value_1 = par_size;
        frame_df8d7dcf01bbc8edc58428990ffcaff6->m_frame.f_lineno = 217;
        tmp_called_value_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[35], tmp_args_element_value_1);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 217;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_loc);
        tmp_args_element_value_2 = par_loc;
        CHECK_OBJECT(par_scale);
        tmp_args_element_value_3 = par_scale;
        frame_df8d7dcf01bbc8edc58428990ffcaff6->m_frame.f_lineno = 217;
        {
            PyObject *call_args[] = {tmp_args_element_value_2, tmp_args_element_value_3};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 217;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_df8d7dcf01bbc8edc58428990ffcaff6);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_df8d7dcf01bbc8edc58428990ffcaff6);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_df8d7dcf01bbc8edc58428990ffcaff6);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_df8d7dcf01bbc8edc58428990ffcaff6, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_df8d7dcf01bbc8edc58428990ffcaff6->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_df8d7dcf01bbc8edc58428990ffcaff6, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_df8d7dcf01bbc8edc58428990ffcaff6,
        type_description_1,
        par_loc,
        par_scale,
        par_size,
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_df8d7dcf01bbc8edc58428990ffcaff6 == cache_frame_df8d7dcf01bbc8edc58428990ffcaff6) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_df8d7dcf01bbc8edc58428990ffcaff6);
        cache_frame_df8d7dcf01bbc8edc58428990ffcaff6 = NULL;
    }

    assertFrameObject(frame_df8d7dcf01bbc8edc58428990ffcaff6);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_loc);
    Py_DECREF(par_loc);
    CHECK_OBJECT(par_scale);
    Py_DECREF(par_scale);
    CHECK_OBJECT(par_size);
    Py_DECREF(par_size);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_loc);
    Py_DECREF(par_loc);
    CHECK_OBJECT(par_scale);
    Py_DECREF(par_scale);
    CHECK_OBJECT(par_size);
    Py_DECREF(par_size);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numba$core$typing$randomdecl$$$function__12_generic(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = Nuitka_Cell_New1(python_pars[0]);
    PyObject *var_typer = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_defaults_1;
        struct Nuitka_CellObject *tmp_closure_1[1];
        tmp_defaults_1 = mod_consts[41];
        Py_INCREF(tmp_defaults_1);

        tmp_closure_1[0] = par_self;
        Py_INCREF(tmp_closure_1[0]);

        tmp_assign_source_1 = MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__12_generic$$$function__1_typer(tmp_defaults_1, tmp_closure_1);

        assert(var_typer == NULL);
        var_typer = tmp_assign_source_1;
    }
    // Tried code:
    CHECK_OBJECT(var_typer);
    tmp_return_value = var_typer;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_typer);
    Py_DECREF(var_typer);
    var_typer = NULL;
    goto function_return_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numba$core$typing$randomdecl$$$function__12_generic$$$function__1_typer(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_shape = python_pars[0];
    PyObject *par_scale = python_pars[1];
    PyObject *par_size = python_pars[2];
    struct Nuitka_FrameObject *frame_949a6130f0defcd01a212f2ddbd307b3;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_949a6130f0defcd01a212f2ddbd307b3 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_949a6130f0defcd01a212f2ddbd307b3)) {
        Py_XDECREF(cache_frame_949a6130f0defcd01a212f2ddbd307b3);

#if _DEBUG_REFCOUNTS
        if (cache_frame_949a6130f0defcd01a212f2ddbd307b3 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_949a6130f0defcd01a212f2ddbd307b3 = MAKE_FUNCTION_FRAME(codeobj_949a6130f0defcd01a212f2ddbd307b3, module_numba$core$typing$randomdecl, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_949a6130f0defcd01a212f2ddbd307b3->m_type_description == NULL);
    frame_949a6130f0defcd01a212f2ddbd307b3 = cache_frame_949a6130f0defcd01a212f2ddbd307b3;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_949a6130f0defcd01a212f2ddbd307b3);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_949a6130f0defcd01a212f2ddbd307b3) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[21]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 227;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_size);
        tmp_args_element_value_1 = par_size;
        frame_949a6130f0defcd01a212f2ddbd307b3->m_frame.f_lineno = 227;
        tmp_called_value_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[35], tmp_args_element_value_1);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 227;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_shape);
        tmp_args_element_value_2 = par_shape;
        CHECK_OBJECT(par_scale);
        tmp_args_element_value_3 = par_scale;
        frame_949a6130f0defcd01a212f2ddbd307b3->m_frame.f_lineno = 227;
        {
            PyObject *call_args[] = {tmp_args_element_value_2, tmp_args_element_value_3};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 227;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_949a6130f0defcd01a212f2ddbd307b3);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_949a6130f0defcd01a212f2ddbd307b3);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_949a6130f0defcd01a212f2ddbd307b3);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_949a6130f0defcd01a212f2ddbd307b3, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_949a6130f0defcd01a212f2ddbd307b3->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_949a6130f0defcd01a212f2ddbd307b3, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_949a6130f0defcd01a212f2ddbd307b3,
        type_description_1,
        par_shape,
        par_scale,
        par_size,
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_949a6130f0defcd01a212f2ddbd307b3 == cache_frame_949a6130f0defcd01a212f2ddbd307b3) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_949a6130f0defcd01a212f2ddbd307b3);
        cache_frame_949a6130f0defcd01a212f2ddbd307b3 = NULL;
    }

    assertFrameObject(frame_949a6130f0defcd01a212f2ddbd307b3);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_shape);
    Py_DECREF(par_shape);
    CHECK_OBJECT(par_scale);
    Py_DECREF(par_scale);
    CHECK_OBJECT(par_size);
    Py_DECREF(par_size);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_shape);
    Py_DECREF(par_shape);
    CHECK_OBJECT(par_scale);
    Py_DECREF(par_scale);
    CHECK_OBJECT(par_size);
    Py_DECREF(par_size);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numba$core$typing$randomdecl$$$function__13_generic(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = Nuitka_Cell_New1(python_pars[0]);
    PyObject *var_typer = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_defaults_1;
        struct Nuitka_CellObject *tmp_closure_1[1];
        tmp_defaults_1 = mod_consts[39];
        Py_INCREF(tmp_defaults_1);

        tmp_closure_1[0] = par_self;
        Py_INCREF(tmp_closure_1[0]);

        tmp_assign_source_1 = MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__13_generic$$$function__1_typer(tmp_defaults_1, tmp_closure_1);

        assert(var_typer == NULL);
        var_typer = tmp_assign_source_1;
    }
    // Tried code:
    CHECK_OBJECT(var_typer);
    tmp_return_value = var_typer;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_typer);
    Py_DECREF(var_typer);
    var_typer = NULL;
    goto function_return_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numba$core$typing$randomdecl$$$function__13_generic$$$function__1_typer(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_left = python_pars[0];
    PyObject *par_mode = python_pars[1];
    PyObject *par_right = python_pars[2];
    PyObject *par_size = python_pars[3];
    struct Nuitka_FrameObject *frame_018ee49772ed881d211f87ba42667698;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_018ee49772ed881d211f87ba42667698 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_018ee49772ed881d211f87ba42667698)) {
        Py_XDECREF(cache_frame_018ee49772ed881d211f87ba42667698);

#if _DEBUG_REFCOUNTS
        if (cache_frame_018ee49772ed881d211f87ba42667698 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_018ee49772ed881d211f87ba42667698 = MAKE_FUNCTION_FRAME(codeobj_018ee49772ed881d211f87ba42667698, module_numba$core$typing$randomdecl, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_018ee49772ed881d211f87ba42667698->m_type_description == NULL);
    frame_018ee49772ed881d211f87ba42667698 = cache_frame_018ee49772ed881d211f87ba42667698;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_018ee49772ed881d211f87ba42667698);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_018ee49772ed881d211f87ba42667698) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[21]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 236;
            type_description_1 = "ooooc";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_size);
        tmp_args_element_value_1 = par_size;
        frame_018ee49772ed881d211f87ba42667698->m_frame.f_lineno = 236;
        tmp_called_value_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[35], tmp_args_element_value_1);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 236;
            type_description_1 = "ooooc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_left);
        tmp_args_element_value_2 = par_left;
        CHECK_OBJECT(par_mode);
        tmp_args_element_value_3 = par_mode;
        CHECK_OBJECT(par_right);
        tmp_args_element_value_4 = par_right;
        frame_018ee49772ed881d211f87ba42667698->m_frame.f_lineno = 236;
        {
            PyObject *call_args[] = {tmp_args_element_value_2, tmp_args_element_value_3, tmp_args_element_value_4};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 236;
            type_description_1 = "ooooc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_018ee49772ed881d211f87ba42667698);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_018ee49772ed881d211f87ba42667698);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_018ee49772ed881d211f87ba42667698);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_018ee49772ed881d211f87ba42667698, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_018ee49772ed881d211f87ba42667698->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_018ee49772ed881d211f87ba42667698, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_018ee49772ed881d211f87ba42667698,
        type_description_1,
        par_left,
        par_mode,
        par_right,
        par_size,
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_018ee49772ed881d211f87ba42667698 == cache_frame_018ee49772ed881d211f87ba42667698) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_018ee49772ed881d211f87ba42667698);
        cache_frame_018ee49772ed881d211f87ba42667698 = NULL;
    }

    assertFrameObject(frame_018ee49772ed881d211f87ba42667698);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_left);
    Py_DECREF(par_left);
    CHECK_OBJECT(par_mode);
    Py_DECREF(par_mode);
    CHECK_OBJECT(par_right);
    Py_DECREF(par_right);
    CHECK_OBJECT(par_size);
    Py_DECREF(par_size);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_left);
    Py_DECREF(par_left);
    CHECK_OBJECT(par_mode);
    Py_DECREF(par_mode);
    CHECK_OBJECT(par_right);
    Py_DECREF(par_right);
    CHECK_OBJECT(par_size);
    Py_DECREF(par_size);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numba$core$typing$randomdecl$$$function__14_generic(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = Nuitka_Cell_New1(python_pars[0]);
    PyObject *var_typer = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_defaults_1;
        struct Nuitka_CellObject *tmp_closure_1[1];
        tmp_defaults_1 = mod_consts[39];
        Py_INCREF(tmp_defaults_1);

        tmp_closure_1[0] = par_self;
        Py_INCREF(tmp_closure_1[0]);

        tmp_assign_source_1 = MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__14_generic$$$function__1_typer(tmp_defaults_1, tmp_closure_1);

        assert(var_typer == NULL);
        var_typer = tmp_assign_source_1;
    }
    // Tried code:
    CHECK_OBJECT(var_typer);
    tmp_return_value = var_typer;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_typer);
    Py_DECREF(var_typer);
    var_typer = NULL;
    goto function_return_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numba$core$typing$randomdecl$$$function__14_generic$$$function__1_typer(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[0];
    PyObject *par_b = python_pars[1];
    PyObject *par_size = python_pars[2];
    struct Nuitka_FrameObject *frame_1a67ef23eb4d19ded05c1c78fc0ed793;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_1a67ef23eb4d19ded05c1c78fc0ed793 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_1a67ef23eb4d19ded05c1c78fc0ed793)) {
        Py_XDECREF(cache_frame_1a67ef23eb4d19ded05c1c78fc0ed793);

#if _DEBUG_REFCOUNTS
        if (cache_frame_1a67ef23eb4d19ded05c1c78fc0ed793 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_1a67ef23eb4d19ded05c1c78fc0ed793 = MAKE_FUNCTION_FRAME(codeobj_1a67ef23eb4d19ded05c1c78fc0ed793, module_numba$core$typing$randomdecl, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_1a67ef23eb4d19ded05c1c78fc0ed793->m_type_description == NULL);
    frame_1a67ef23eb4d19ded05c1c78fc0ed793 = cache_frame_1a67ef23eb4d19ded05c1c78fc0ed793;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_1a67ef23eb4d19ded05c1c78fc0ed793);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_1a67ef23eb4d19ded05c1c78fc0ed793) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[21]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 259;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_size);
        tmp_args_element_value_1 = par_size;
        frame_1a67ef23eb4d19ded05c1c78fc0ed793->m_frame.f_lineno = 259;
        tmp_called_value_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[35], tmp_args_element_value_1);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 259;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_a);
        tmp_args_element_value_2 = par_a;
        CHECK_OBJECT(par_b);
        tmp_args_element_value_3 = par_b;
        frame_1a67ef23eb4d19ded05c1c78fc0ed793->m_frame.f_lineno = 259;
        {
            PyObject *call_args[] = {tmp_args_element_value_2, tmp_args_element_value_3};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 259;
            type_description_1 = "oooc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_1a67ef23eb4d19ded05c1c78fc0ed793);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_1a67ef23eb4d19ded05c1c78fc0ed793);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_1a67ef23eb4d19ded05c1c78fc0ed793);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_1a67ef23eb4d19ded05c1c78fc0ed793, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_1a67ef23eb4d19ded05c1c78fc0ed793->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_1a67ef23eb4d19ded05c1c78fc0ed793, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_1a67ef23eb4d19ded05c1c78fc0ed793,
        type_description_1,
        par_a,
        par_b,
        par_size,
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_1a67ef23eb4d19ded05c1c78fc0ed793 == cache_frame_1a67ef23eb4d19ded05c1c78fc0ed793) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_1a67ef23eb4d19ded05c1c78fc0ed793);
        cache_frame_1a67ef23eb4d19ded05c1c78fc0ed793 = NULL;
    }

    assertFrameObject(frame_1a67ef23eb4d19ded05c1c78fc0ed793);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_a);
    Py_DECREF(par_a);
    CHECK_OBJECT(par_b);
    Py_DECREF(par_b);
    CHECK_OBJECT(par_size);
    Py_DECREF(par_size);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_a);
    Py_DECREF(par_a);
    CHECK_OBJECT(par_b);
    Py_DECREF(par_b);
    CHECK_OBJECT(par_size);
    Py_DECREF(par_size);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numba$core$typing$randomdecl$$$function__15_generic(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = Nuitka_Cell_New1(python_pars[0]);
    PyObject *var_typer = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_defaults_1;
        struct Nuitka_CellObject *tmp_closure_1[1];
        tmp_defaults_1 = mod_consts[39];
        Py_INCREF(tmp_defaults_1);

        tmp_closure_1[0] = par_self;
        Py_INCREF(tmp_closure_1[0]);

        tmp_assign_source_1 = MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__15_generic$$$function__1_typer(tmp_defaults_1, tmp_closure_1);

        assert(var_typer == NULL);
        var_typer = tmp_assign_source_1;
    }
    // Tried code:
    CHECK_OBJECT(var_typer);
    tmp_return_value = var_typer;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_typer);
    Py_DECREF(var_typer);
    var_typer = NULL;
    goto function_return_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numba$core$typing$randomdecl$$$function__15_generic$$$function__1_typer(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_a = python_pars[0];
    PyObject *par_size = python_pars[1];
    struct Nuitka_FrameObject *frame_fe90c33d51b4d58d87fde8d8ca3a088f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_fe90c33d51b4d58d87fde8d8ca3a088f = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_fe90c33d51b4d58d87fde8d8ca3a088f)) {
        Py_XDECREF(cache_frame_fe90c33d51b4d58d87fde8d8ca3a088f);

#if _DEBUG_REFCOUNTS
        if (cache_frame_fe90c33d51b4d58d87fde8d8ca3a088f == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_fe90c33d51b4d58d87fde8d8ca3a088f = MAKE_FUNCTION_FRAME(codeobj_fe90c33d51b4d58d87fde8d8ca3a088f, module_numba$core$typing$randomdecl, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_fe90c33d51b4d58d87fde8d8ca3a088f->m_type_description == NULL);
    frame_fe90c33d51b4d58d87fde8d8ca3a088f = cache_frame_fe90c33d51b4d58d87fde8d8ca3a088f;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_fe90c33d51b4d58d87fde8d8ca3a088f);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_fe90c33d51b4d58d87fde8d8ca3a088f) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[21]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 276;
            type_description_1 = "ooc";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_size);
        tmp_args_element_value_1 = par_size;
        frame_fe90c33d51b4d58d87fde8d8ca3a088f->m_frame.f_lineno = 276;
        tmp_called_value_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[35], tmp_args_element_value_1);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 276;
            type_description_1 = "ooc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_a);
        tmp_args_element_value_2 = par_a;
        frame_fe90c33d51b4d58d87fde8d8ca3a088f->m_frame.f_lineno = 276;
        tmp_return_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_1, tmp_args_element_value_2);
        Py_DECREF(tmp_called_value_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 276;
            type_description_1 = "ooc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_fe90c33d51b4d58d87fde8d8ca3a088f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_fe90c33d51b4d58d87fde8d8ca3a088f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_fe90c33d51b4d58d87fde8d8ca3a088f);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_fe90c33d51b4d58d87fde8d8ca3a088f, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_fe90c33d51b4d58d87fde8d8ca3a088f->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_fe90c33d51b4d58d87fde8d8ca3a088f, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_fe90c33d51b4d58d87fde8d8ca3a088f,
        type_description_1,
        par_a,
        par_size,
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_fe90c33d51b4d58d87fde8d8ca3a088f == cache_frame_fe90c33d51b4d58d87fde8d8ca3a088f) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_fe90c33d51b4d58d87fde8d8ca3a088f);
        cache_frame_fe90c33d51b4d58d87fde8d8ca3a088f = NULL;
    }

    assertFrameObject(frame_fe90c33d51b4d58d87fde8d8ca3a088f);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_a);
    Py_DECREF(par_a);
    CHECK_OBJECT(par_size);
    Py_DECREF(par_size);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_a);
    Py_DECREF(par_a);
    CHECK_OBJECT(par_size);
    Py_DECREF(par_size);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numba$core$typing$randomdecl$$$function__16_generic(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = Nuitka_Cell_New1(python_pars[0]);
    PyObject *var_typer = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_defaults_1;
        struct Nuitka_CellObject *tmp_closure_1[1];
        tmp_defaults_1 = mod_consts[39];
        Py_INCREF(tmp_defaults_1);

        tmp_closure_1[0] = par_self;
        Py_INCREF(tmp_closure_1[0]);

        tmp_assign_source_1 = MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__16_generic$$$function__1_typer(tmp_defaults_1, tmp_closure_1);

        assert(var_typer == NULL);
        var_typer = tmp_assign_source_1;
    }
    // Tried code:
    CHECK_OBJECT(var_typer);
    tmp_return_value = var_typer;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_typer);
    Py_DECREF(var_typer);
    var_typer = NULL;
    goto function_return_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numba$core$typing$randomdecl$$$function__16_generic$$$function__1_typer(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_size = python_pars[0];
    struct Nuitka_FrameObject *frame_e7514de06a891b6552d06a48ae2f2fb9;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_e7514de06a891b6552d06a48ae2f2fb9 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_e7514de06a891b6552d06a48ae2f2fb9)) {
        Py_XDECREF(cache_frame_e7514de06a891b6552d06a48ae2f2fb9);

#if _DEBUG_REFCOUNTS
        if (cache_frame_e7514de06a891b6552d06a48ae2f2fb9 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_e7514de06a891b6552d06a48ae2f2fb9 = MAKE_FUNCTION_FRAME(codeobj_e7514de06a891b6552d06a48ae2f2fb9, module_numba$core$typing$randomdecl, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_e7514de06a891b6552d06a48ae2f2fb9->m_type_description == NULL);
    frame_e7514de06a891b6552d06a48ae2f2fb9 = cache_frame_e7514de06a891b6552d06a48ae2f2fb9;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_e7514de06a891b6552d06a48ae2f2fb9);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_e7514de06a891b6552d06a48ae2f2fb9) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[21]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 291;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_size);
        tmp_args_element_value_1 = par_size;
        frame_e7514de06a891b6552d06a48ae2f2fb9->m_frame.f_lineno = 291;
        tmp_called_value_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[35], tmp_args_element_value_1);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 291;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        frame_e7514de06a891b6552d06a48ae2f2fb9->m_frame.f_lineno = 291;
        tmp_return_value = CALL_FUNCTION_NO_ARGS(tmp_called_value_1);
        Py_DECREF(tmp_called_value_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 291;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e7514de06a891b6552d06a48ae2f2fb9);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_e7514de06a891b6552d06a48ae2f2fb9);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e7514de06a891b6552d06a48ae2f2fb9);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_e7514de06a891b6552d06a48ae2f2fb9, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_e7514de06a891b6552d06a48ae2f2fb9->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_e7514de06a891b6552d06a48ae2f2fb9, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_e7514de06a891b6552d06a48ae2f2fb9,
        type_description_1,
        par_size,
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_e7514de06a891b6552d06a48ae2f2fb9 == cache_frame_e7514de06a891b6552d06a48ae2f2fb9) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_e7514de06a891b6552d06a48ae2f2fb9);
        cache_frame_e7514de06a891b6552d06a48ae2f2fb9 = NULL;
    }

    assertFrameObject(frame_e7514de06a891b6552d06a48ae2f2fb9);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_size);
    Py_DECREF(par_size);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_size);
    Py_DECREF(par_size);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__10_generic() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$core$typing$randomdecl$$$function__10_generic,
        mod_consts[110],
#if PYTHON_VERSION >= 0x300
        mod_consts[160],
#endif
        codeobj_6177c40379b16ab3225ba49f114326ae,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$core$typing$randomdecl,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__10_generic$$$function__1_typer(PyObject *defaults, struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$core$typing$randomdecl$$$function__10_generic$$$function__1_typer,
        mod_consts[15],
#if PYTHON_VERSION >= 0x300
        mod_consts[47],
#endif
        codeobj_7e32e97796b716bd5b970ddc6613a2b4,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$core$typing$randomdecl,
        NULL,
        closure,
        1
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__11_generic() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$core$typing$randomdecl$$$function__11_generic,
        mod_consts[110],
#if PYTHON_VERSION >= 0x300
        mod_consts[170],
#endif
        codeobj_0f00864971ad5d1cd651dc95c967bbb9,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$core$typing$randomdecl,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__11_generic$$$function__1_typer(PyObject *defaults, struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$core$typing$randomdecl$$$function__11_generic$$$function__1_typer,
        mod_consts[15],
#if PYTHON_VERSION >= 0x300
        mod_consts[49],
#endif
        codeobj_df8d7dcf01bbc8edc58428990ffcaff6,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$core$typing$randomdecl,
        NULL,
        closure,
        1
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__12_generic() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$core$typing$randomdecl$$$function__12_generic,
        mod_consts[110],
#if PYTHON_VERSION >= 0x300
        mod_consts[174],
#endif
        codeobj_5bf8b51735c22f0294b24b4591420011,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$core$typing$randomdecl,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__12_generic$$$function__1_typer(PyObject *defaults, struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$core$typing$randomdecl$$$function__12_generic$$$function__1_typer,
        mod_consts[15],
#if PYTHON_VERSION >= 0x300
        mod_consts[50],
#endif
        codeobj_949a6130f0defcd01a212f2ddbd307b3,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$core$typing$randomdecl,
        NULL,
        closure,
        1
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__13_generic() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$core$typing$randomdecl$$$function__13_generic,
        mod_consts[110],
#if PYTHON_VERSION >= 0x300
        mod_consts[178],
#endif
        codeobj_d118223f499ec92b713f75fd5ac276fe,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$core$typing$randomdecl,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__13_generic$$$function__1_typer(PyObject *defaults, struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$core$typing$randomdecl$$$function__13_generic$$$function__1_typer,
        mod_consts[15],
#if PYTHON_VERSION >= 0x300
        mod_consts[51],
#endif
        codeobj_018ee49772ed881d211f87ba42667698,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$core$typing$randomdecl,
        NULL,
        closure,
        1
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__14_generic() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$core$typing$randomdecl$$$function__14_generic,
        mod_consts[110],
#if PYTHON_VERSION >= 0x300
        mod_consts[207],
#endif
        codeobj_12d1351915a884f36f8c9b5462021689,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$core$typing$randomdecl,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__14_generic$$$function__1_typer(PyObject *defaults, struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$core$typing$randomdecl$$$function__14_generic$$$function__1_typer,
        mod_consts[15],
#if PYTHON_VERSION >= 0x300
        mod_consts[52],
#endif
        codeobj_1a67ef23eb4d19ded05c1c78fc0ed793,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$core$typing$randomdecl,
        NULL,
        closure,
        1
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__15_generic() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$core$typing$randomdecl$$$function__15_generic,
        mod_consts[110],
#if PYTHON_VERSION >= 0x300
        mod_consts[225],
#endif
        codeobj_f5343e7db454e9eafc333b5819b7d4c7,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$core$typing$randomdecl,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__15_generic$$$function__1_typer(PyObject *defaults, struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$core$typing$randomdecl$$$function__15_generic$$$function__1_typer,
        mod_consts[15],
#if PYTHON_VERSION >= 0x300
        mod_consts[53],
#endif
        codeobj_fe90c33d51b4d58d87fde8d8ca3a088f,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$core$typing$randomdecl,
        NULL,
        closure,
        1
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__16_generic() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$core$typing$randomdecl$$$function__16_generic,
        mod_consts[110],
#if PYTHON_VERSION >= 0x300
        mod_consts[233],
#endif
        codeobj_d6b6e27f439b8a8fb0682bf6da7187c8,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$core$typing$randomdecl,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__16_generic$$$function__1_typer(PyObject *defaults, struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$core$typing$randomdecl$$$function__16_generic$$$function__1_typer,
        mod_consts[15],
#if PYTHON_VERSION >= 0x300
        mod_consts[54],
#endif
        codeobj_e7514de06a891b6552d06a48ae2f2fb9,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$core$typing$randomdecl,
        NULL,
        closure,
        1
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__1_normalize_shape() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$core$typing$randomdecl$$$function__1_normalize_shape,
        mod_consts[22],
#if PYTHON_VERSION >= 0x300
        NULL,
#endif
        codeobj_aed383170aede757b65669bc35d235f6,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$core$typing$randomdecl,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__2_array_typer(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$core$typing$randomdecl$$$function__2_array_typer,
        mod_consts[35],
#if PYTHON_VERSION >= 0x300
        mod_consts[97],
#endif
        codeobj_a618f4b7bad263da9fe70d1cfc302796,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$core$typing$randomdecl,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__2_array_typer$$$function__1_typer(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$core$typing$randomdecl$$$function__2_array_typer$$$function__1_typer,
        mod_consts[15],
#if PYTHON_VERSION >= 0x300
        mod_consts[16],
#endif
        codeobj_1ea27e40fe2f4a5f1fc9107d177849f8,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$core$typing$randomdecl,
        NULL,
        closure,
        1
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__2_array_typer$$$function__2_typer(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$core$typing$randomdecl$$$function__2_array_typer$$$function__2_typer,
        mod_consts[15],
#if PYTHON_VERSION >= 0x300
        mod_consts[16],
#endif
        codeobj_dac91013574804b4041cf37fc02ae1b2,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$core$typing$randomdecl,
        NULL,
        closure,
        4
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__3_array_typer(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$core$typing$randomdecl$$$function__3_array_typer,
        mod_consts[35],
#if PYTHON_VERSION >= 0x300
        mod_consts[101],
#endif
        codeobj_43ebdb786cc6a8e2fb925c0830336ae7,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$core$typing$randomdecl,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__3_array_typer$$$function__1_concrete_scalar_typer(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$core$typing$randomdecl$$$function__3_array_typer$$$function__1_concrete_scalar_typer,
        mod_consts[32],
#if PYTHON_VERSION >= 0x300
        mod_consts[33],
#endif
        codeobj_c5c72dfdab174c25ae231187ffe7ab30,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$core$typing$randomdecl,
        NULL,
        closure,
        3
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__4_generic() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$core$typing$randomdecl$$$function__4_generic,
        mod_consts[110],
#if PYTHON_VERSION >= 0x300
        mod_consts[111],
#endif
        codeobj_c691f188c15c3f5ac1c716573ce7083a,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$core$typing$randomdecl,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__4_generic$$$function__1_typer(PyObject *defaults, struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$core$typing$randomdecl$$$function__4_generic$$$function__1_typer,
        mod_consts[15],
#if PYTHON_VERSION >= 0x300
        mod_consts[40],
#endif
        codeobj_574f971d57a21fb8b8fa0133be987505,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$core$typing$randomdecl,
        NULL,
        closure,
        1
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__5_generic() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$core$typing$randomdecl$$$function__5_generic,
        mod_consts[110],
#if PYTHON_VERSION >= 0x300
        mod_consts[123],
#endif
        codeobj_d8702c483eddacf3a8cedd10a28d27c9,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$core$typing$randomdecl,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__5_generic$$$function__1_typer(PyObject *defaults, struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$core$typing$randomdecl$$$function__5_generic$$$function__1_typer,
        mod_consts[15],
#if PYTHON_VERSION >= 0x300
        mod_consts[42],
#endif
        codeobj_2100ccda26d740d3658fbbd6991bb03f,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$core$typing$randomdecl,
        NULL,
        closure,
        1
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__6_generic() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$core$typing$randomdecl$$$function__6_generic,
        mod_consts[110],
#if PYTHON_VERSION >= 0x300
        mod_consts[140],
#endif
        codeobj_bb36c9baa5eaf975ff2e500d0c0b1b10,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$core$typing$randomdecl,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__6_generic$$$function__1_typer(PyObject *defaults, struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$core$typing$randomdecl$$$function__6_generic$$$function__1_typer,
        mod_consts[15],
#if PYTHON_VERSION >= 0x300
        mod_consts[43],
#endif
        codeobj_7db89ac580ab3d865951eafa1bd352d0,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$core$typing$randomdecl,
        NULL,
        closure,
        1
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__7_generic() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$core$typing$randomdecl$$$function__7_generic,
        mod_consts[110],
#if PYTHON_VERSION >= 0x300
        mod_consts[146],
#endif
        codeobj_7b0a7d36d2109549cfb9d21d82c4be72,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$core$typing$randomdecl,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__7_generic$$$function__1_typer(PyObject *defaults, struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$core$typing$randomdecl$$$function__7_generic$$$function__1_typer,
        mod_consts[15],
#if PYTHON_VERSION >= 0x300
        mod_consts[44],
#endif
        codeobj_a935f95482b6e2219e7b1747a9f4524f,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$core$typing$randomdecl,
        NULL,
        closure,
        1
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__8_generic() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$core$typing$randomdecl$$$function__8_generic,
        mod_consts[110],
#if PYTHON_VERSION >= 0x300
        mod_consts[150],
#endif
        codeobj_970cbd735e338889c1a229e8fd8d4175,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$core$typing$randomdecl,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__8_generic$$$function__1_typer(PyObject *defaults, struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$core$typing$randomdecl$$$function__8_generic$$$function__1_typer,
        mod_consts[15],
#if PYTHON_VERSION >= 0x300
        mod_consts[45],
#endif
        codeobj_98756ce1007a05f3bff39501e1f63497,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$core$typing$randomdecl,
        NULL,
        closure,
        1
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__9_generic() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$core$typing$randomdecl$$$function__9_generic,
        mod_consts[110],
#if PYTHON_VERSION >= 0x300
        mod_consts[156],
#endif
        codeobj_c55b2636b60c78e4cd60b861d69a57a5,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$core$typing$randomdecl,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__9_generic$$$function__1_typer(PyObject *defaults, struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$core$typing$randomdecl$$$function__9_generic$$$function__1_typer,
        mod_consts[15],
#if PYTHON_VERSION >= 0x300
        mod_consts[46],
#endif
        codeobj_39e2fb93c3b32b892b2e3c31d3684381,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$core$typing$randomdecl,
        NULL,
        closure,
        1
    );


    return (PyObject *)result;
}


extern void _initCompiledCellType();
extern void _initCompiledGeneratorType();
extern void _initCompiledFunctionType();
extern void _initCompiledMethodType();
extern void _initCompiledFrameType();

extern PyTypeObject Nuitka_Loader_Type;

#ifdef _NUITKA_PLUGIN_DILL_ENABLED
// Provide a way to create find a function via its C code and create it back
// in another process, useful for multiprocessing extensions like dill
extern void registerDillPluginTables(char const *module_name, PyMethodDef *reduce_compiled_function, PyMethodDef *create_compiled_function);

function_impl_code functable_numba$core$typing$randomdecl[] = {
    impl_numba$core$typing$randomdecl$$$function__2_array_typer$$$function__1_typer,
    impl_numba$core$typing$randomdecl$$$function__2_array_typer$$$function__2_typer,
    impl_numba$core$typing$randomdecl$$$function__3_array_typer$$$function__1_concrete_scalar_typer,
    impl_numba$core$typing$randomdecl$$$function__4_generic$$$function__1_typer,
    impl_numba$core$typing$randomdecl$$$function__5_generic$$$function__1_typer,
    impl_numba$core$typing$randomdecl$$$function__6_generic$$$function__1_typer,
    impl_numba$core$typing$randomdecl$$$function__7_generic$$$function__1_typer,
    impl_numba$core$typing$randomdecl$$$function__8_generic$$$function__1_typer,
    impl_numba$core$typing$randomdecl$$$function__9_generic$$$function__1_typer,
    impl_numba$core$typing$randomdecl$$$function__10_generic$$$function__1_typer,
    impl_numba$core$typing$randomdecl$$$function__11_generic$$$function__1_typer,
    impl_numba$core$typing$randomdecl$$$function__12_generic$$$function__1_typer,
    impl_numba$core$typing$randomdecl$$$function__13_generic$$$function__1_typer,
    impl_numba$core$typing$randomdecl$$$function__14_generic$$$function__1_typer,
    impl_numba$core$typing$randomdecl$$$function__15_generic$$$function__1_typer,
    impl_numba$core$typing$randomdecl$$$function__16_generic$$$function__1_typer,
    impl_numba$core$typing$randomdecl$$$function__1_normalize_shape,
    impl_numba$core$typing$randomdecl$$$function__2_array_typer,
    impl_numba$core$typing$randomdecl$$$function__3_array_typer,
    impl_numba$core$typing$randomdecl$$$function__4_generic,
    impl_numba$core$typing$randomdecl$$$function__5_generic,
    impl_numba$core$typing$randomdecl$$$function__6_generic,
    impl_numba$core$typing$randomdecl$$$function__7_generic,
    impl_numba$core$typing$randomdecl$$$function__8_generic,
    impl_numba$core$typing$randomdecl$$$function__9_generic,
    impl_numba$core$typing$randomdecl$$$function__10_generic,
    impl_numba$core$typing$randomdecl$$$function__11_generic,
    impl_numba$core$typing$randomdecl$$$function__12_generic,
    impl_numba$core$typing$randomdecl$$$function__13_generic,
    impl_numba$core$typing$randomdecl$$$function__14_generic,
    impl_numba$core$typing$randomdecl$$$function__15_generic,
    impl_numba$core$typing$randomdecl$$$function__16_generic,
    NULL
};

static char const *_reduce_compiled_function_argnames[] = {
    "func",
    NULL
};

static PyObject *_reduce_compiled_function(PyObject *self, PyObject *args, PyObject *kwds) {
    PyObject *func;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "O:reduce_compiled_function", (char **)_reduce_compiled_function_argnames, &func, NULL)) {
        return NULL;
    }

    if (Nuitka_Function_Check(func) == false) {
        SET_CURRENT_EXCEPTION_TYPE0_STR(PyExc_TypeError, "not a compiled function");
        return NULL;
    }

    struct Nuitka_FunctionObject *function = (struct Nuitka_FunctionObject *)func;

    function_impl_code *current = functable_numba$core$typing$randomdecl;
    int offset = 0;

    while (*current != NULL) {
        if (*current == function->m_c_code) {
            break;
        }

        current += 1;
        offset += 1;
    }

    if (*current == NULL) {
        SET_CURRENT_EXCEPTION_TYPE0_STR(PyExc_TypeError, "Cannot find compiled function in module.");
        return NULL;
    }

    PyObject *code_object_desc = PyTuple_New(6);
    PyTuple_SET_ITEM0(code_object_desc, 0, function->m_code_object->co_filename);
    PyTuple_SET_ITEM0(code_object_desc, 1, function->m_code_object->co_name);
    PyTuple_SET_ITEM(code_object_desc, 2, PyLong_FromLong(function->m_code_object->co_firstlineno));
    PyTuple_SET_ITEM0(code_object_desc, 3, function->m_code_object->co_varnames);
    PyTuple_SET_ITEM(code_object_desc, 4, PyLong_FromLong(function->m_code_object->co_argcount));
    PyTuple_SET_ITEM(code_object_desc, 5, PyLong_FromLong(function->m_code_object->co_flags));

    CHECK_OBJECT_DEEP(code_object_desc);

    PyObject *result = PyTuple_New(4);
    PyTuple_SET_ITEM(result, 0, PyLong_FromLong(offset));
    PyTuple_SET_ITEM(result, 1, code_object_desc);
    PyTuple_SET_ITEM0(result, 2, function->m_defaults);
    PyTuple_SET_ITEM0(result, 3, function->m_doc != NULL ? function->m_doc : Py_None);

    CHECK_OBJECT_DEEP(result);

    return result;
}

static PyMethodDef _method_def_reduce_compiled_function = {"reduce_compiled_function", (PyCFunction)_reduce_compiled_function,
                                                           METH_VARARGS | METH_KEYWORDS, NULL};

static char const *_create_compiled_function_argnames[] = {
    "func",
    "code_object_desc",
    "defaults",
    "doc",
    NULL
};


static PyObject *_create_compiled_function(PyObject *self, PyObject *args, PyObject *kwds) {
    CHECK_OBJECT_DEEP(args);

    PyObject *func;
    PyObject *code_object_desc;
    PyObject *defaults;
    PyObject *doc;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "OOOO:create_compiled_function", (char **)_create_compiled_function_argnames, &func, &code_object_desc, &defaults, &doc, NULL)) {
        return NULL;
    }

    int offset = PyLong_AsLong(func);

    if (offset == -1 && ERROR_OCCURRED()) {
        return NULL;
    }

    if (offset > sizeof(functable_numba$core$typing$randomdecl) || offset < 0) {
        SET_CURRENT_EXCEPTION_TYPE0_STR(PyExc_TypeError, "Wrong offset for compiled function.");
        return NULL;
    }

    PyObject *filename = PyTuple_GET_ITEM(code_object_desc, 0);
    PyObject *function_name = PyTuple_GET_ITEM(code_object_desc, 1);
    PyObject *line = PyTuple_GET_ITEM(code_object_desc, 2);
    int line_int = PyLong_AsLong(line);
    assert(!ERROR_OCCURRED());

    PyObject *argnames = PyTuple_GET_ITEM(code_object_desc, 3);
    PyObject *arg_count = PyTuple_GET_ITEM(code_object_desc, 4);
    int arg_count_int = PyLong_AsLong(arg_count);
    assert(!ERROR_OCCURRED());
    PyObject *flags = PyTuple_GET_ITEM(code_object_desc, 5);
    int flags_int = PyLong_AsLong(flags);
    assert(!ERROR_OCCURRED());

    PyCodeObject *code_object = MAKE_CODEOBJECT(
        filename,
        line_int,
        flags_int,
        function_name,
        argnames,
        NULL, // freevars
        arg_count_int,
        0, // TODO: Missing kw_only_count
        0 // TODO: Missing pos_only_count
    );

    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        functable_numba$core$typing$randomdecl[offset],
        code_object->co_name,
#if PYTHON_VERSION >= 0x300
        NULL, // TODO: Not transferring qualname yet
#endif
        code_object,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL, // kwdefaults are done on the outside currently
        NULL, // TODO: Not transferring annotations
#endif
        module_numba$core$typing$randomdecl,
        doc,
        NULL,
        0
    );

    return (PyObject *)result;
}

static PyMethodDef _method_def_create_compiled_function = {
    "create_compiled_function",
    (PyCFunction)_create_compiled_function,
    METH_VARARGS | METH_KEYWORDS, NULL
};


#endif

// Internal entry point for module code.
PyObject *modulecode_numba$core$typing$randomdecl(PyObject *module, struct Nuitka_MetaPathBasedLoaderEntry const *loader_entry) {
    // Report entry to PGO.
    PGO_onModuleEntered("numba.core.typing.randomdecl");

    // Store the module for future use.
    module_numba$core$typing$randomdecl = module;

    // Modules can be loaded again in case of errors, avoid the init being done again.
    static bool init_done = false;

    if (init_done == false) {
#if defined(_NUITKA_MODULE) && 0
        // In case of an extension module loaded into a process, we need to call
        // initialization here because that's the first and potentially only time
        // we are going called.

        // Initialize the constant values used.
        _initBuiltinModule();
        createGlobalConstants();

        /* Initialize the compiled types of Nuitka. */
        _initCompiledCellType();
        _initCompiledGeneratorType();
        _initCompiledFunctionType();
        _initCompiledMethodType();
        _initCompiledFrameType();

        _initSlotCompare();
#if PYTHON_VERSION >= 0x270
        _initSlotIterNext();
#endif

        patchTypeComparison();

        // Enable meta path based loader if not already done.
#ifdef _NUITKA_TRACE
        PRINT_STRING("numba.core.typing.randomdecl: Calling setupMetaPathBasedLoader().\n");
#endif
        setupMetaPathBasedLoader();

#if PYTHON_VERSION >= 0x300
        patchInspectModule();
#endif

#endif

        /* The constants only used by this module are created now. */
#ifdef _NUITKA_TRACE
        PRINT_STRING("numba.core.typing.randomdecl: Calling createModuleConstants().\n");
#endif
        createModuleConstants();

        /* The code objects used by this module are created now. */
#ifdef _NUITKA_TRACE
        PRINT_STRING("numba.core.typing.randomdecl: Calling createModuleCodeObjects().\n");
#endif
        createModuleCodeObjects();

        init_done = true;
    }

    // PRINT_STRING("in initnumba$core$typing$randomdecl\n");

    moduledict_numba$core$typing$randomdecl = MODULE_DICT(module_numba$core$typing$randomdecl);

#ifdef _NUITKA_PLUGIN_DILL_ENABLED
    registerDillPluginTables(loader_entry->name, &_method_def_reduce_compiled_function, &_method_def_create_compiled_function);
#endif

    // Set "__compiled__" to what version information we have.
    UPDATE_STRING_DICT0(
        moduledict_numba$core$typing$randomdecl,
        (Nuitka_StringObject *)const_str_plain___compiled__,
        Nuitka_dunder_compiled_value
    );

    // Update "__package__" value to what it ought to be.
    {
#if 0
        UPDATE_STRING_DICT0(
            moduledict_numba$core$typing$randomdecl,
            (Nuitka_StringObject *)const_str_plain___package__,
            mod_consts[264]
        );
#elif 0
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)const_str_plain___name__);

        UPDATE_STRING_DICT0(
            moduledict_numba$core$typing$randomdecl,
            (Nuitka_StringObject *)const_str_plain___package__,
            module_name
        );
#else

#if PYTHON_VERSION < 0x300
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)const_str_plain___name__);
        char const *module_name_cstr = PyString_AS_STRING(module_name);

        char const *last_dot = strrchr(module_name_cstr, '.');

        if (last_dot != NULL) {
            UPDATE_STRING_DICT1(
                moduledict_numba$core$typing$randomdecl,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyString_FromStringAndSize(module_name_cstr, last_dot - module_name_cstr)
            );
        }
#else
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)const_str_plain___name__);
        Py_ssize_t dot_index = PyUnicode_Find(module_name, const_str_dot, 0, PyUnicode_GetLength(module_name), -1);

        if (dot_index != -1) {
            UPDATE_STRING_DICT1(
                moduledict_numba$core$typing$randomdecl,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyUnicode_Substring(module_name, 0, dot_index)
            );
        }
#endif
#endif
    }

    CHECK_OBJECT(module_numba$core$typing$randomdecl);

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    if (GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)const_str_plain___builtins__) == NULL) {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then but the module itself.
#if defined(_NUITKA_MODULE) || !0
        value = PyModule_GetDict(value);
#endif

        UPDATE_STRING_DICT0(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)const_str_plain___builtins__, value);
    }

#if PYTHON_VERSION >= 0x300
    UPDATE_STRING_DICT0(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)const_str_plain___loader__, (PyObject *)&Nuitka_Loader_Type);
#endif

#if PYTHON_VERSION >= 0x340
// Set the "__spec__" value

#if 0
    // Main modules just get "None" as spec.
    UPDATE_STRING_DICT0(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)const_str_plain___spec__, Py_None);
#else
    // Other modules get a "ModuleSpec" from the standard mechanism.
    {
        PyObject *bootstrap_module = getImportLibBootstrapModule();
        CHECK_OBJECT(bootstrap_module);

        PyObject *_spec_from_module = PyObject_GetAttrString(bootstrap_module, "_spec_from_module");
        CHECK_OBJECT(_spec_from_module);

        PyObject *spec_value = CALL_FUNCTION_WITH_SINGLE_ARG(_spec_from_module, module_numba$core$typing$randomdecl);
        Py_DECREF(_spec_from_module);

        // We can assume this to never fail, or else we are in trouble anyway.
        // CHECK_OBJECT(spec_value);

        if (spec_value == NULL) {
            PyErr_PrintEx(0);
            abort();
        }

// Mark the execution in the "__spec__" value.
        SET_ATTRIBUTE(spec_value, const_str_plain__initializing, Py_True);

        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)const_str_plain___spec__, spec_value);
    }
#endif
#endif

    // Temp variables if any
    PyObject *outline_0_var___class__ = NULL;
    PyObject *outline_1_var___class__ = NULL;
    PyObject *outline_2_var___class__ = NULL;
    PyObject *outline_3_var___class__ = NULL;
    PyObject *outline_4_var___class__ = NULL;
    PyObject *outline_5_var_tp = NULL;
    PyObject *outline_6_var___class__ = NULL;
    PyObject *outline_7_var_tp = NULL;
    PyObject *outline_8_var_tp = NULL;
    PyObject *outline_9_var___class__ = NULL;
    PyObject *outline_10_var_tp = NULL;
    PyObject *outline_11_var_tp = NULL;
    PyObject *outline_12_var_tp = NULL;
    PyObject *outline_13_var___class__ = NULL;
    PyObject *outline_14_var___class__ = NULL;
    PyObject *outline_15_var_tp = NULL;
    PyObject *outline_16_var___class__ = NULL;
    PyObject *outline_17_var_tp = NULL;
    PyObject *outline_18_var___class__ = NULL;
    PyObject *outline_19_var_tp = NULL;
    PyObject *outline_20_var___class__ = NULL;
    PyObject *outline_21_var_tp = NULL;
    PyObject *outline_22_var_tp = NULL;
    PyObject *outline_23_var___class__ = NULL;
    PyObject *outline_24_var_tp = NULL;
    PyObject *outline_25_var___class__ = NULL;
    PyObject *outline_26_var_tp = NULL;
    PyObject *outline_27_var_tp = NULL;
    PyObject *outline_28_var_tp = NULL;
    PyObject *outline_29_var___class__ = NULL;
    PyObject *outline_30_var_tp = NULL;
    PyObject *outline_31_var_tp = NULL;
    PyObject *outline_32_var___class__ = NULL;
    PyObject *outline_33_var_tp = NULL;
    PyObject *outline_34_var___class__ = NULL;
    PyObject *outline_35_var_tp = NULL;
    PyObject *outline_36_var___class__ = NULL;
    PyObject *outline_37_var_tp = NULL;
    PyObject *outline_38_var___class__ = NULL;
    PyObject *outline_39_var_tp = NULL;
    PyObject *outline_40_var___class__ = NULL;
    PyObject *outline_41_var_tp = NULL;
    PyObject *outline_42_var_tp = NULL;
    PyObject *tmp_Numpy_exponential$class_inplace_1__value = NULL;
    PyObject *tmp_Numpy_exponential$listcomp_1__$0 = NULL;
    PyObject *tmp_Numpy_exponential$listcomp_1__contraction = NULL;
    PyObject *tmp_Numpy_exponential$listcomp_1__iter_value_0 = NULL;
    PyObject *tmp_Numpy_exponential$listcomp_2__$0 = NULL;
    PyObject *tmp_Numpy_exponential$listcomp_2__contraction = NULL;
    PyObject *tmp_Numpy_exponential$listcomp_2__iter_value_0 = NULL;
    PyObject *tmp_Numpy_gamma$class_inplace_1__value = NULL;
    PyObject *tmp_Numpy_gamma$listcomp_1__$0 = NULL;
    PyObject *tmp_Numpy_gamma$listcomp_1__contraction = NULL;
    PyObject *tmp_Numpy_gamma$listcomp_1__iter_value_0 = NULL;
    PyObject *tmp_Numpy_gamma$listcomp_2__$0 = NULL;
    PyObject *tmp_Numpy_gamma$listcomp_2__contraction = NULL;
    PyObject *tmp_Numpy_gamma$listcomp_2__iter_value_0 = NULL;
    PyObject *tmp_Numpy_geometric$listcomp_1__$0 = NULL;
    PyObject *tmp_Numpy_geometric$listcomp_1__contraction = NULL;
    PyObject *tmp_Numpy_geometric$listcomp_1__iter_value_0 = NULL;
    PyObject *tmp_Numpy_hypergeometric$listcomp_1__$0 = NULL;
    PyObject *tmp_Numpy_hypergeometric$listcomp_1__contraction = NULL;
    PyObject *tmp_Numpy_hypergeometric$listcomp_1__iter_value_0 = NULL;
    PyObject *tmp_Numpy_negative_binomial$listcomp_1__$0 = NULL;
    PyObject *tmp_Numpy_negative_binomial$listcomp_1__contraction = NULL;
    PyObject *tmp_Numpy_negative_binomial$listcomp_1__iter_value_0 = NULL;
    PyObject *tmp_Numpy_normal$class_inplace_1__value = NULL;
    PyObject *tmp_Numpy_normal$class_inplace_2__value = NULL;
    PyObject *tmp_Numpy_normal$listcomp_1__$0 = NULL;
    PyObject *tmp_Numpy_normal$listcomp_1__contraction = NULL;
    PyObject *tmp_Numpy_normal$listcomp_1__iter_value_0 = NULL;
    PyObject *tmp_Numpy_normal$listcomp_2__$0 = NULL;
    PyObject *tmp_Numpy_normal$listcomp_2__contraction = NULL;
    PyObject *tmp_Numpy_normal$listcomp_2__iter_value_0 = NULL;
    PyObject *tmp_Numpy_normal$listcomp_3__$0 = NULL;
    PyObject *tmp_Numpy_normal$listcomp_3__contraction = NULL;
    PyObject *tmp_Numpy_normal$listcomp_3__iter_value_0 = NULL;
    PyObject *tmp_Numpy_poisson$class_inplace_1__value = NULL;
    PyObject *tmp_Numpy_poisson$listcomp_1__$0 = NULL;
    PyObject *tmp_Numpy_poisson$listcomp_1__contraction = NULL;
    PyObject *tmp_Numpy_poisson$listcomp_1__iter_value_0 = NULL;
    PyObject *tmp_Random_binary_distribution$listcomp_1__$0 = NULL;
    PyObject *tmp_Random_binary_distribution$listcomp_1__contraction = NULL;
    PyObject *tmp_Random_binary_distribution$listcomp_1__iter_value_0 = NULL;
    PyObject *tmp_Random_nullary_distribution$listcomp_1__$0 = NULL;
    PyObject *tmp_Random_nullary_distribution$listcomp_1__contraction = NULL;
    PyObject *tmp_Random_nullary_distribution$listcomp_1__iter_value_0 = NULL;
    PyObject *tmp_Random_randint$class_inplace_1__value = NULL;
    PyObject *tmp_Random_randint$listcomp_1__$0 = NULL;
    PyObject *tmp_Random_randint$listcomp_1__contraction = NULL;
    PyObject *tmp_Random_randint$listcomp_1__iter_value_0 = NULL;
    PyObject *tmp_Random_randint$listcomp_2__$0 = NULL;
    PyObject *tmp_Random_randint$listcomp_2__contraction = NULL;
    PyObject *tmp_Random_randint$listcomp_2__iter_value_0 = NULL;
    PyObject *tmp_Random_randint$listcomp_3__$0 = NULL;
    PyObject *tmp_Random_randint$listcomp_3__contraction = NULL;
    PyObject *tmp_Random_randint$listcomp_3__iter_value_0 = NULL;
    PyObject *tmp_Random_randrange$class_inplace_1__value = NULL;
    PyObject *tmp_Random_randrange$class_inplace_2__value = NULL;
    PyObject *tmp_Random_randrange$listcomp_1__$0 = NULL;
    PyObject *tmp_Random_randrange$listcomp_1__contraction = NULL;
    PyObject *tmp_Random_randrange$listcomp_1__iter_value_0 = NULL;
    PyObject *tmp_Random_randrange$listcomp_2__$0 = NULL;
    PyObject *tmp_Random_randrange$listcomp_2__contraction = NULL;
    PyObject *tmp_Random_randrange$listcomp_2__iter_value_0 = NULL;
    PyObject *tmp_Random_randrange$listcomp_3__$0 = NULL;
    PyObject *tmp_Random_randrange$listcomp_3__contraction = NULL;
    PyObject *tmp_Random_randrange$listcomp_3__iter_value_0 = NULL;
    PyObject *tmp_Random_ternary_distribution$listcomp_1__$0 = NULL;
    PyObject *tmp_Random_ternary_distribution$listcomp_1__contraction = NULL;
    PyObject *tmp_Random_ternary_distribution$listcomp_1__iter_value_0 = NULL;
    PyObject *tmp_Random_triangular$class_inplace_1__value = NULL;
    PyObject *tmp_Random_triangular$listcomp_1__$0 = NULL;
    PyObject *tmp_Random_triangular$listcomp_1__contraction = NULL;
    PyObject *tmp_Random_triangular$listcomp_1__iter_value_0 = NULL;
    PyObject *tmp_Random_triangular$listcomp_2__$0 = NULL;
    PyObject *tmp_Random_triangular$listcomp_2__contraction = NULL;
    PyObject *tmp_Random_triangular$listcomp_2__iter_value_0 = NULL;
    PyObject *tmp_Random_unary_distribution$listcomp_1__$0 = NULL;
    PyObject *tmp_Random_unary_distribution$listcomp_1__contraction = NULL;
    PyObject *tmp_Random_unary_distribution$listcomp_1__iter_value_0 = NULL;
    PyObject *tmp_class_creation_10__bases = NULL;
    PyObject *tmp_class_creation_10__bases_orig = NULL;
    PyObject *tmp_class_creation_10__class_decl_dict = NULL;
    PyObject *tmp_class_creation_10__metaclass = NULL;
    PyObject *tmp_class_creation_10__prepared = NULL;
    PyObject *tmp_class_creation_11__bases = NULL;
    PyObject *tmp_class_creation_11__bases_orig = NULL;
    PyObject *tmp_class_creation_11__class_decl_dict = NULL;
    PyObject *tmp_class_creation_11__metaclass = NULL;
    PyObject *tmp_class_creation_11__prepared = NULL;
    PyObject *tmp_class_creation_12__bases = NULL;
    PyObject *tmp_class_creation_12__bases_orig = NULL;
    PyObject *tmp_class_creation_12__class_decl_dict = NULL;
    PyObject *tmp_class_creation_12__metaclass = NULL;
    PyObject *tmp_class_creation_12__prepared = NULL;
    PyObject *tmp_class_creation_13__bases = NULL;
    PyObject *tmp_class_creation_13__bases_orig = NULL;
    PyObject *tmp_class_creation_13__class_decl_dict = NULL;
    PyObject *tmp_class_creation_13__metaclass = NULL;
    PyObject *tmp_class_creation_13__prepared = NULL;
    PyObject *tmp_class_creation_14__bases = NULL;
    PyObject *tmp_class_creation_14__bases_orig = NULL;
    PyObject *tmp_class_creation_14__class_decl_dict = NULL;
    PyObject *tmp_class_creation_14__metaclass = NULL;
    PyObject *tmp_class_creation_14__prepared = NULL;
    PyObject *tmp_class_creation_15__bases = NULL;
    PyObject *tmp_class_creation_15__bases_orig = NULL;
    PyObject *tmp_class_creation_15__class_decl_dict = NULL;
    PyObject *tmp_class_creation_15__metaclass = NULL;
    PyObject *tmp_class_creation_15__prepared = NULL;
    PyObject *tmp_class_creation_16__bases = NULL;
    PyObject *tmp_class_creation_16__bases_orig = NULL;
    PyObject *tmp_class_creation_16__class_decl_dict = NULL;
    PyObject *tmp_class_creation_16__metaclass = NULL;
    PyObject *tmp_class_creation_16__prepared = NULL;
    PyObject *tmp_class_creation_17__bases = NULL;
    PyObject *tmp_class_creation_17__bases_orig = NULL;
    PyObject *tmp_class_creation_17__class_decl_dict = NULL;
    PyObject *tmp_class_creation_17__metaclass = NULL;
    PyObject *tmp_class_creation_17__prepared = NULL;
    PyObject *tmp_class_creation_18__bases = NULL;
    PyObject *tmp_class_creation_18__bases_orig = NULL;
    PyObject *tmp_class_creation_18__class_decl_dict = NULL;
    PyObject *tmp_class_creation_18__metaclass = NULL;
    PyObject *tmp_class_creation_18__prepared = NULL;
    PyObject *tmp_class_creation_19__bases = NULL;
    PyObject *tmp_class_creation_19__bases_orig = NULL;
    PyObject *tmp_class_creation_19__class_decl_dict = NULL;
    PyObject *tmp_class_creation_19__metaclass = NULL;
    PyObject *tmp_class_creation_19__prepared = NULL;
    PyObject *tmp_class_creation_1__bases = NULL;
    PyObject *tmp_class_creation_1__bases_orig = NULL;
    PyObject *tmp_class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_class_creation_1__metaclass = NULL;
    PyObject *tmp_class_creation_1__prepared = NULL;
    PyObject *tmp_class_creation_20__bases = NULL;
    PyObject *tmp_class_creation_20__bases_orig = NULL;
    PyObject *tmp_class_creation_20__class_decl_dict = NULL;
    PyObject *tmp_class_creation_20__metaclass = NULL;
    PyObject *tmp_class_creation_20__prepared = NULL;
    PyObject *tmp_class_creation_2__bases = NULL;
    PyObject *tmp_class_creation_2__bases_orig = NULL;
    PyObject *tmp_class_creation_2__class_decl_dict = NULL;
    PyObject *tmp_class_creation_2__metaclass = NULL;
    PyObject *tmp_class_creation_2__prepared = NULL;
    PyObject *tmp_class_creation_3__bases = NULL;
    PyObject *tmp_class_creation_3__bases_orig = NULL;
    PyObject *tmp_class_creation_3__class_decl_dict = NULL;
    PyObject *tmp_class_creation_3__metaclass = NULL;
    PyObject *tmp_class_creation_3__prepared = NULL;
    PyObject *tmp_class_creation_4__bases = NULL;
    PyObject *tmp_class_creation_4__bases_orig = NULL;
    PyObject *tmp_class_creation_4__class_decl_dict = NULL;
    PyObject *tmp_class_creation_4__metaclass = NULL;
    PyObject *tmp_class_creation_4__prepared = NULL;
    PyObject *tmp_class_creation_5__bases = NULL;
    PyObject *tmp_class_creation_5__bases_orig = NULL;
    PyObject *tmp_class_creation_5__class_decl_dict = NULL;
    PyObject *tmp_class_creation_5__metaclass = NULL;
    PyObject *tmp_class_creation_5__prepared = NULL;
    PyObject *tmp_class_creation_6__bases = NULL;
    PyObject *tmp_class_creation_6__bases_orig = NULL;
    PyObject *tmp_class_creation_6__class_decl_dict = NULL;
    PyObject *tmp_class_creation_6__metaclass = NULL;
    PyObject *tmp_class_creation_6__prepared = NULL;
    PyObject *tmp_class_creation_7__bases = NULL;
    PyObject *tmp_class_creation_7__bases_orig = NULL;
    PyObject *tmp_class_creation_7__class_decl_dict = NULL;
    PyObject *tmp_class_creation_7__metaclass = NULL;
    PyObject *tmp_class_creation_7__prepared = NULL;
    PyObject *tmp_class_creation_8__bases = NULL;
    PyObject *tmp_class_creation_8__bases_orig = NULL;
    PyObject *tmp_class_creation_8__class_decl_dict = NULL;
    PyObject *tmp_class_creation_8__metaclass = NULL;
    PyObject *tmp_class_creation_8__prepared = NULL;
    PyObject *tmp_class_creation_9__bases = NULL;
    PyObject *tmp_class_creation_9__bases_orig = NULL;
    PyObject *tmp_class_creation_9__class_decl_dict = NULL;
    PyObject *tmp_class_creation_9__metaclass = NULL;
    PyObject *tmp_class_creation_9__prepared = NULL;
    PyObject *tmp_import_from_1__module = NULL;
    struct Nuitka_FrameObject *frame_67c4cca428b0d1121581f2e5bfdef9ad;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    int tmp_res;
    PyObject *tmp_dictdel_dict;
    PyObject *tmp_dictdel_key;
    PyObject *locals_numba$core$typing$randomdecl$$$class__1_RandomTemplate_42 = NULL;
    PyObject *tmp_dictset_value;
    struct Nuitka_FrameObject *frame_88759d23dfb969dec3ac760ec37157e7_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    static struct Nuitka_FrameObject *cache_frame_88759d23dfb969dec3ac760ec37157e7_2 = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *locals_numba$core$typing$randomdecl$$$class__2_ConcreteRandomTemplate_74 = NULL;
    struct Nuitka_FrameObject *frame_f549d07b7e829ad966f13f28a40589ae_3;
    NUITKA_MAY_BE_UNUSED char const *type_description_3 = NULL;
    static struct Nuitka_FrameObject *cache_frame_f549d07b7e829ad966f13f28a40589ae_3 = NULL;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *locals_numba$core$typing$randomdecl$$$class__3_Random_getrandbits_95 = NULL;
    struct Nuitka_FrameObject *frame_91c2e33dd63bd4515f5854d1d01602d0_4;
    NUITKA_MAY_BE_UNUSED char const *type_description_4 = NULL;
    static struct Nuitka_FrameObject *cache_frame_91c2e33dd63bd4515f5854d1d01602d0_4 = NULL;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *locals_numba$core$typing$randomdecl$$$class__4_Random_random_100 = NULL;
    struct Nuitka_FrameObject *frame_243fba22b9d32a739f1ee1efc092236e_5;
    NUITKA_MAY_BE_UNUSED char const *type_description_5 = NULL;
    static struct Nuitka_FrameObject *cache_frame_243fba22b9d32a739f1ee1efc092236e_5 = NULL;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *locals_numba$core$typing$randomdecl$$$class__5_Random_randint_124 = NULL;
    struct Nuitka_FrameObject *frame_6be4a8a7d097eaecee5866d63cb692e3_6;
    NUITKA_MAY_BE_UNUSED char const *type_description_6 = NULL;
    struct Nuitka_FrameObject *frame_c8daf28081174d240dbf6c6f1ecbb92e_7;
    NUITKA_MAY_BE_UNUSED char const *type_description_7 = NULL;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    static struct Nuitka_FrameObject *cache_frame_c8daf28081174d240dbf6c6f1ecbb92e_7 = NULL;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;
    static struct Nuitka_FrameObject *cache_frame_6be4a8a7d097eaecee5866d63cb692e3_6 = NULL;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_16;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_17;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_18;
    PyObject *locals_numba$core$typing$randomdecl$$$class__6_Random_randint_128 = NULL;
    struct Nuitka_FrameObject *frame_14d1df92c23bec3fdef4b49181e32f5d_8;
    NUITKA_MAY_BE_UNUSED char const *type_description_8 = NULL;
    struct Nuitka_FrameObject *frame_3f0dfba0ea1ef929d0608f2e5c2396fe_9;
    NUITKA_MAY_BE_UNUSED char const *type_description_9 = NULL;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_19;
    static struct Nuitka_FrameObject *cache_frame_3f0dfba0ea1ef929d0608f2e5c2396fe_9 = NULL;
    PyObject *exception_keeper_type_20;
    PyObject *exception_keeper_value_20;
    PyTracebackObject *exception_keeper_tb_20;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_20;
    struct Nuitka_FrameObject *frame_bb8f3d1ee4a89dee14c96eee07597f14_10;
    NUITKA_MAY_BE_UNUSED char const *type_description_10 = NULL;
    PyObject *exception_keeper_type_21;
    PyObject *exception_keeper_value_21;
    PyTracebackObject *exception_keeper_tb_21;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_21;
    static struct Nuitka_FrameObject *cache_frame_bb8f3d1ee4a89dee14c96eee07597f14_10 = NULL;
    PyObject *exception_keeper_type_22;
    PyObject *exception_keeper_value_22;
    PyTracebackObject *exception_keeper_tb_22;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_22;
    PyObject *exception_keeper_type_23;
    PyObject *exception_keeper_value_23;
    PyTracebackObject *exception_keeper_tb_23;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_23;
    static struct Nuitka_FrameObject *cache_frame_14d1df92c23bec3fdef4b49181e32f5d_8 = NULL;
    PyObject *exception_keeper_type_24;
    PyObject *exception_keeper_value_24;
    PyTracebackObject *exception_keeper_tb_24;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_24;
    PyObject *exception_keeper_type_25;
    PyObject *exception_keeper_value_25;
    PyTracebackObject *exception_keeper_tb_25;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_25;
    PyObject *exception_keeper_type_26;
    PyObject *exception_keeper_value_26;
    PyTracebackObject *exception_keeper_tb_26;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_26;
    PyObject *locals_numba$core$typing$randomdecl$$$class__7_Random_randrange_139 = NULL;
    struct Nuitka_FrameObject *frame_1bf54db38dd0c5dccaaf65af3ac21e29_11;
    NUITKA_MAY_BE_UNUSED char const *type_description_11 = NULL;
    struct Nuitka_FrameObject *frame_4225d704c73218ddcf9419606f30ebcf_12;
    NUITKA_MAY_BE_UNUSED char const *type_description_12 = NULL;
    PyObject *exception_keeper_type_27;
    PyObject *exception_keeper_value_27;
    PyTracebackObject *exception_keeper_tb_27;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_27;
    static struct Nuitka_FrameObject *cache_frame_4225d704c73218ddcf9419606f30ebcf_12 = NULL;
    PyObject *exception_keeper_type_28;
    PyObject *exception_keeper_value_28;
    PyTracebackObject *exception_keeper_tb_28;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_28;
    struct Nuitka_FrameObject *frame_91492da9e4317f81f8ee750a3886e03c_13;
    NUITKA_MAY_BE_UNUSED char const *type_description_13 = NULL;
    PyObject *exception_keeper_type_29;
    PyObject *exception_keeper_value_29;
    PyTracebackObject *exception_keeper_tb_29;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_29;
    static struct Nuitka_FrameObject *cache_frame_91492da9e4317f81f8ee750a3886e03c_13 = NULL;
    PyObject *exception_keeper_type_30;
    PyObject *exception_keeper_value_30;
    PyTracebackObject *exception_keeper_tb_30;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_30;
    PyObject *exception_keeper_type_31;
    PyObject *exception_keeper_value_31;
    PyTracebackObject *exception_keeper_tb_31;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_31;
    struct Nuitka_FrameObject *frame_b98e11acd4bb624ee56a83fcadbf1365_14;
    NUITKA_MAY_BE_UNUSED char const *type_description_14 = NULL;
    PyObject *exception_keeper_type_32;
    PyObject *exception_keeper_value_32;
    PyTracebackObject *exception_keeper_tb_32;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_32;
    static struct Nuitka_FrameObject *cache_frame_b98e11acd4bb624ee56a83fcadbf1365_14 = NULL;
    PyObject *exception_keeper_type_33;
    PyObject *exception_keeper_value_33;
    PyTracebackObject *exception_keeper_tb_33;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_33;
    PyObject *exception_keeper_type_34;
    PyObject *exception_keeper_value_34;
    PyTracebackObject *exception_keeper_tb_34;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_34;
    static struct Nuitka_FrameObject *cache_frame_1bf54db38dd0c5dccaaf65af3ac21e29_11 = NULL;
    PyObject *exception_keeper_type_35;
    PyObject *exception_keeper_value_35;
    PyTracebackObject *exception_keeper_tb_35;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_35;
    PyObject *exception_keeper_type_36;
    PyObject *exception_keeper_value_36;
    PyTracebackObject *exception_keeper_tb_36;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_36;
    PyObject *exception_keeper_type_37;
    PyObject *exception_keeper_value_37;
    PyTracebackObject *exception_keeper_tb_37;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_37;
    PyObject *locals_numba$core$typing$randomdecl$$$class__8_Random_seed_146 = NULL;
    struct Nuitka_FrameObject *frame_a13f2a8a328c03a0e1ef8b0e98c8440c_15;
    NUITKA_MAY_BE_UNUSED char const *type_description_15 = NULL;
    static struct Nuitka_FrameObject *cache_frame_a13f2a8a328c03a0e1ef8b0e98c8440c_15 = NULL;
    PyObject *exception_keeper_type_38;
    PyObject *exception_keeper_value_38;
    PyTracebackObject *exception_keeper_tb_38;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_38;
    PyObject *exception_keeper_type_39;
    PyObject *exception_keeper_value_39;
    PyTracebackObject *exception_keeper_tb_39;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_39;
    PyObject *exception_keeper_type_40;
    PyObject *exception_keeper_value_40;
    PyTracebackObject *exception_keeper_tb_40;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_40;
    PyObject *locals_numba$core$typing$randomdecl$$$class__9_Numpy_geometric_157 = NULL;
    struct Nuitka_FrameObject *frame_025e6c5517cafd5cac7783c883cac7cd_16;
    NUITKA_MAY_BE_UNUSED char const *type_description_16 = NULL;
    struct Nuitka_FrameObject *frame_484306ead6c4af53882293edb79cbe0d_17;
    NUITKA_MAY_BE_UNUSED char const *type_description_17 = NULL;
    PyObject *exception_keeper_type_41;
    PyObject *exception_keeper_value_41;
    PyTracebackObject *exception_keeper_tb_41;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_41;
    static struct Nuitka_FrameObject *cache_frame_484306ead6c4af53882293edb79cbe0d_17 = NULL;
    PyObject *exception_keeper_type_42;
    PyObject *exception_keeper_value_42;
    PyTracebackObject *exception_keeper_tb_42;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_42;
    static struct Nuitka_FrameObject *cache_frame_025e6c5517cafd5cac7783c883cac7cd_16 = NULL;
    PyObject *exception_keeper_type_43;
    PyObject *exception_keeper_value_43;
    PyTracebackObject *exception_keeper_tb_43;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_43;
    PyObject *exception_keeper_type_44;
    PyObject *exception_keeper_value_44;
    PyTracebackObject *exception_keeper_tb_44;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_44;
    PyObject *exception_keeper_type_45;
    PyObject *exception_keeper_value_45;
    PyTracebackObject *exception_keeper_tb_45;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_45;
    PyObject *locals_numba$core$typing$randomdecl$$$class__10_Numpy_negative_binomial_168 = NULL;
    struct Nuitka_FrameObject *frame_b3074d356e3d3d7338fe92ecba3aaa5c_18;
    NUITKA_MAY_BE_UNUSED char const *type_description_18 = NULL;
    struct Nuitka_FrameObject *frame_e454d590a60fedf1a1c3a064cc1c16bf_19;
    NUITKA_MAY_BE_UNUSED char const *type_description_19 = NULL;
    PyObject *exception_keeper_type_46;
    PyObject *exception_keeper_value_46;
    PyTracebackObject *exception_keeper_tb_46;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_46;
    static struct Nuitka_FrameObject *cache_frame_e454d590a60fedf1a1c3a064cc1c16bf_19 = NULL;
    PyObject *exception_keeper_type_47;
    PyObject *exception_keeper_value_47;
    PyTracebackObject *exception_keeper_tb_47;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_47;
    static struct Nuitka_FrameObject *cache_frame_b3074d356e3d3d7338fe92ecba3aaa5c_18 = NULL;
    PyObject *exception_keeper_type_48;
    PyObject *exception_keeper_value_48;
    PyTracebackObject *exception_keeper_tb_48;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_48;
    PyObject *exception_keeper_type_49;
    PyObject *exception_keeper_value_49;
    PyTracebackObject *exception_keeper_tb_49;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_49;
    PyObject *exception_keeper_type_50;
    PyObject *exception_keeper_value_50;
    PyTracebackObject *exception_keeper_tb_50;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_50;
    PyObject *locals_numba$core$typing$randomdecl$$$class__11_Numpy_poisson_177 = NULL;
    struct Nuitka_FrameObject *frame_37c0fe8e6586f13fc8bb75cab337d341_20;
    NUITKA_MAY_BE_UNUSED char const *type_description_20 = NULL;
    struct Nuitka_FrameObject *frame_bf28b69daa502c37a6d0c31a2f09523e_21;
    NUITKA_MAY_BE_UNUSED char const *type_description_21 = NULL;
    PyObject *exception_keeper_type_51;
    PyObject *exception_keeper_value_51;
    PyTracebackObject *exception_keeper_tb_51;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_51;
    static struct Nuitka_FrameObject *cache_frame_bf28b69daa502c37a6d0c31a2f09523e_21 = NULL;
    PyObject *exception_keeper_type_52;
    PyObject *exception_keeper_value_52;
    PyTracebackObject *exception_keeper_tb_52;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_52;
    PyObject *exception_keeper_type_53;
    PyObject *exception_keeper_value_53;
    PyTracebackObject *exception_keeper_tb_53;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_53;
    static struct Nuitka_FrameObject *cache_frame_37c0fe8e6586f13fc8bb75cab337d341_20 = NULL;
    PyObject *exception_keeper_type_54;
    PyObject *exception_keeper_value_54;
    PyTracebackObject *exception_keeper_tb_54;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_54;
    PyObject *exception_keeper_type_55;
    PyObject *exception_keeper_value_55;
    PyTracebackObject *exception_keeper_tb_55;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_55;
    PyObject *exception_keeper_type_56;
    PyObject *exception_keeper_value_56;
    PyTracebackObject *exception_keeper_tb_56;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_56;
    PyObject *locals_numba$core$typing$randomdecl$$$class__12_Numpy_exponential_188 = NULL;
    struct Nuitka_FrameObject *frame_3eb28981ba053aaf919c6786b39ae516_22;
    NUITKA_MAY_BE_UNUSED char const *type_description_22 = NULL;
    struct Nuitka_FrameObject *frame_b51cfe43ec23e36b098f53e36ef90b05_23;
    NUITKA_MAY_BE_UNUSED char const *type_description_23 = NULL;
    PyObject *exception_keeper_type_57;
    PyObject *exception_keeper_value_57;
    PyTracebackObject *exception_keeper_tb_57;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_57;
    static struct Nuitka_FrameObject *cache_frame_b51cfe43ec23e36b098f53e36ef90b05_23 = NULL;
    PyObject *exception_keeper_type_58;
    PyObject *exception_keeper_value_58;
    PyTracebackObject *exception_keeper_tb_58;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_58;
    struct Nuitka_FrameObject *frame_7efc27a65ad537a7bd3ac8d3ba23f9ad_24;
    NUITKA_MAY_BE_UNUSED char const *type_description_24 = NULL;
    PyObject *exception_keeper_type_59;
    PyObject *exception_keeper_value_59;
    PyTracebackObject *exception_keeper_tb_59;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_59;
    static struct Nuitka_FrameObject *cache_frame_7efc27a65ad537a7bd3ac8d3ba23f9ad_24 = NULL;
    PyObject *exception_keeper_type_60;
    PyObject *exception_keeper_value_60;
    PyTracebackObject *exception_keeper_tb_60;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_60;
    PyObject *exception_keeper_type_61;
    PyObject *exception_keeper_value_61;
    PyTracebackObject *exception_keeper_tb_61;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_61;
    static struct Nuitka_FrameObject *cache_frame_3eb28981ba053aaf919c6786b39ae516_22 = NULL;
    PyObject *exception_keeper_type_62;
    PyObject *exception_keeper_value_62;
    PyTracebackObject *exception_keeper_tb_62;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_62;
    PyObject *exception_keeper_type_63;
    PyObject *exception_keeper_value_63;
    PyTracebackObject *exception_keeper_tb_63;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_63;
    PyObject *exception_keeper_type_64;
    PyObject *exception_keeper_value_64;
    PyTracebackObject *exception_keeper_tb_64;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_64;
    PyObject *locals_numba$core$typing$randomdecl$$$class__13_Numpy_hypergeometric_198 = NULL;
    struct Nuitka_FrameObject *frame_59361a5a5a540fb16f3d51eb4d287b66_25;
    NUITKA_MAY_BE_UNUSED char const *type_description_25 = NULL;
    struct Nuitka_FrameObject *frame_8ba3772525602c4ac3179c3965d51530_26;
    NUITKA_MAY_BE_UNUSED char const *type_description_26 = NULL;
    PyObject *exception_keeper_type_65;
    PyObject *exception_keeper_value_65;
    PyTracebackObject *exception_keeper_tb_65;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_65;
    static struct Nuitka_FrameObject *cache_frame_8ba3772525602c4ac3179c3965d51530_26 = NULL;
    PyObject *exception_keeper_type_66;
    PyObject *exception_keeper_value_66;
    PyTracebackObject *exception_keeper_tb_66;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_66;
    static struct Nuitka_FrameObject *cache_frame_59361a5a5a540fb16f3d51eb4d287b66_25 = NULL;
    PyObject *exception_keeper_type_67;
    PyObject *exception_keeper_value_67;
    PyTracebackObject *exception_keeper_tb_67;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_67;
    PyObject *exception_keeper_type_68;
    PyObject *exception_keeper_value_68;
    PyTracebackObject *exception_keeper_tb_68;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_68;
    PyObject *exception_keeper_type_69;
    PyObject *exception_keeper_value_69;
    PyTracebackObject *exception_keeper_tb_69;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_69;
    PyObject *locals_numba$core$typing$randomdecl$$$class__14_Numpy_normal_210 = NULL;
    struct Nuitka_FrameObject *frame_783a1d78defebe6f43f5fe6abd4e6ce0_27;
    NUITKA_MAY_BE_UNUSED char const *type_description_27 = NULL;
    struct Nuitka_FrameObject *frame_b0f1b2944b6de380dfdde09eb0cb73b4_28;
    NUITKA_MAY_BE_UNUSED char const *type_description_28 = NULL;
    PyObject *exception_keeper_type_70;
    PyObject *exception_keeper_value_70;
    PyTracebackObject *exception_keeper_tb_70;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_70;
    static struct Nuitka_FrameObject *cache_frame_b0f1b2944b6de380dfdde09eb0cb73b4_28 = NULL;
    PyObject *exception_keeper_type_71;
    PyObject *exception_keeper_value_71;
    PyTracebackObject *exception_keeper_tb_71;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_71;
    struct Nuitka_FrameObject *frame_4eaac3c70525e2b2f20a3cc6d8a7e138_29;
    NUITKA_MAY_BE_UNUSED char const *type_description_29 = NULL;
    PyObject *exception_keeper_type_72;
    PyObject *exception_keeper_value_72;
    PyTracebackObject *exception_keeper_tb_72;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_72;
    static struct Nuitka_FrameObject *cache_frame_4eaac3c70525e2b2f20a3cc6d8a7e138_29 = NULL;
    PyObject *exception_keeper_type_73;
    PyObject *exception_keeper_value_73;
    PyTracebackObject *exception_keeper_tb_73;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_73;
    PyObject *exception_keeper_type_74;
    PyObject *exception_keeper_value_74;
    PyTracebackObject *exception_keeper_tb_74;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_74;
    struct Nuitka_FrameObject *frame_1410da64a1c244fe1cfd7f5789efaf26_30;
    NUITKA_MAY_BE_UNUSED char const *type_description_30 = NULL;
    PyObject *exception_keeper_type_75;
    PyObject *exception_keeper_value_75;
    PyTracebackObject *exception_keeper_tb_75;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_75;
    static struct Nuitka_FrameObject *cache_frame_1410da64a1c244fe1cfd7f5789efaf26_30 = NULL;
    PyObject *exception_keeper_type_76;
    PyObject *exception_keeper_value_76;
    PyTracebackObject *exception_keeper_tb_76;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_76;
    PyObject *exception_keeper_type_77;
    PyObject *exception_keeper_value_77;
    PyTracebackObject *exception_keeper_tb_77;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_77;
    static struct Nuitka_FrameObject *cache_frame_783a1d78defebe6f43f5fe6abd4e6ce0_27 = NULL;
    PyObject *exception_keeper_type_78;
    PyObject *exception_keeper_value_78;
    PyTracebackObject *exception_keeper_tb_78;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_78;
    PyObject *exception_keeper_type_79;
    PyObject *exception_keeper_value_79;
    PyTracebackObject *exception_keeper_tb_79;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_79;
    PyObject *exception_keeper_type_80;
    PyObject *exception_keeper_value_80;
    PyTracebackObject *exception_keeper_tb_80;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_80;
    PyObject *locals_numba$core$typing$randomdecl$$$class__15_Numpy_gamma_221 = NULL;
    struct Nuitka_FrameObject *frame_9449bebfb93782894d0081a6b07208f3_31;
    NUITKA_MAY_BE_UNUSED char const *type_description_31 = NULL;
    struct Nuitka_FrameObject *frame_8a575ade3fd61f5ce5fc90452f0a13fd_32;
    NUITKA_MAY_BE_UNUSED char const *type_description_32 = NULL;
    PyObject *exception_keeper_type_81;
    PyObject *exception_keeper_value_81;
    PyTracebackObject *exception_keeper_tb_81;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_81;
    static struct Nuitka_FrameObject *cache_frame_8a575ade3fd61f5ce5fc90452f0a13fd_32 = NULL;
    PyObject *exception_keeper_type_82;
    PyObject *exception_keeper_value_82;
    PyTracebackObject *exception_keeper_tb_82;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_82;
    struct Nuitka_FrameObject *frame_9ac30cfb02e28d89e3d7ab4e0faedd19_33;
    NUITKA_MAY_BE_UNUSED char const *type_description_33 = NULL;
    PyObject *exception_keeper_type_83;
    PyObject *exception_keeper_value_83;
    PyTracebackObject *exception_keeper_tb_83;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_83;
    static struct Nuitka_FrameObject *cache_frame_9ac30cfb02e28d89e3d7ab4e0faedd19_33 = NULL;
    PyObject *exception_keeper_type_84;
    PyObject *exception_keeper_value_84;
    PyTracebackObject *exception_keeper_tb_84;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_84;
    PyObject *exception_keeper_type_85;
    PyObject *exception_keeper_value_85;
    PyTracebackObject *exception_keeper_tb_85;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_85;
    static struct Nuitka_FrameObject *cache_frame_9449bebfb93782894d0081a6b07208f3_31 = NULL;
    PyObject *exception_keeper_type_86;
    PyObject *exception_keeper_value_86;
    PyTracebackObject *exception_keeper_tb_86;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_86;
    PyObject *exception_keeper_type_87;
    PyObject *exception_keeper_value_87;
    PyTracebackObject *exception_keeper_tb_87;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_87;
    PyObject *exception_keeper_type_88;
    PyObject *exception_keeper_value_88;
    PyTracebackObject *exception_keeper_tb_88;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_88;
    PyObject *locals_numba$core$typing$randomdecl$$$class__16_Random_ternary_distribution_231 = NULL;
    struct Nuitka_FrameObject *frame_1c03f75f56e92bec8a64f7bd23a506b0_34;
    NUITKA_MAY_BE_UNUSED char const *type_description_34 = NULL;
    struct Nuitka_FrameObject *frame_b6ca460e3512019f56a19bd2f5227490_35;
    NUITKA_MAY_BE_UNUSED char const *type_description_35 = NULL;
    PyObject *exception_keeper_type_89;
    PyObject *exception_keeper_value_89;
    PyTracebackObject *exception_keeper_tb_89;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_89;
    static struct Nuitka_FrameObject *cache_frame_b6ca460e3512019f56a19bd2f5227490_35 = NULL;
    PyObject *exception_keeper_type_90;
    PyObject *exception_keeper_value_90;
    PyTracebackObject *exception_keeper_tb_90;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_90;
    static struct Nuitka_FrameObject *cache_frame_1c03f75f56e92bec8a64f7bd23a506b0_34 = NULL;
    PyObject *exception_keeper_type_91;
    PyObject *exception_keeper_value_91;
    PyTracebackObject *exception_keeper_tb_91;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_91;
    PyObject *exception_keeper_type_92;
    PyObject *exception_keeper_value_92;
    PyTracebackObject *exception_keeper_tb_92;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_92;
    PyObject *exception_keeper_type_93;
    PyObject *exception_keeper_value_93;
    PyTracebackObject *exception_keeper_tb_93;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_93;
    PyObject *locals_numba$core$typing$randomdecl$$$class__17_Random_binary_distribution_254 = NULL;
    struct Nuitka_FrameObject *frame_8e586f507f42c2412a86b865add7f337_36;
    NUITKA_MAY_BE_UNUSED char const *type_description_36 = NULL;
    struct Nuitka_FrameObject *frame_bb60c770118d4558e22d843bb6c1d839_37;
    NUITKA_MAY_BE_UNUSED char const *type_description_37 = NULL;
    PyObject *exception_keeper_type_94;
    PyObject *exception_keeper_value_94;
    PyTracebackObject *exception_keeper_tb_94;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_94;
    static struct Nuitka_FrameObject *cache_frame_bb60c770118d4558e22d843bb6c1d839_37 = NULL;
    PyObject *exception_keeper_type_95;
    PyObject *exception_keeper_value_95;
    PyTracebackObject *exception_keeper_tb_95;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_95;
    static struct Nuitka_FrameObject *cache_frame_8e586f507f42c2412a86b865add7f337_36 = NULL;
    PyObject *exception_keeper_type_96;
    PyObject *exception_keeper_value_96;
    PyTracebackObject *exception_keeper_tb_96;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_96;
    PyObject *exception_keeper_type_97;
    PyObject *exception_keeper_value_97;
    PyTracebackObject *exception_keeper_tb_97;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_97;
    PyObject *exception_keeper_type_98;
    PyObject *exception_keeper_value_98;
    PyTracebackObject *exception_keeper_tb_98;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_98;
    PyObject *locals_numba$core$typing$randomdecl$$$class__18_Random_unary_distribution_271 = NULL;
    struct Nuitka_FrameObject *frame_01d10b70dd56fe91ecc5ff5ea2ebb02e_38;
    NUITKA_MAY_BE_UNUSED char const *type_description_38 = NULL;
    struct Nuitka_FrameObject *frame_dcd1c412f0c9a7a03f44257284053857_39;
    NUITKA_MAY_BE_UNUSED char const *type_description_39 = NULL;
    PyObject *exception_keeper_type_99;
    PyObject *exception_keeper_value_99;
    PyTracebackObject *exception_keeper_tb_99;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_99;
    static struct Nuitka_FrameObject *cache_frame_dcd1c412f0c9a7a03f44257284053857_39 = NULL;
    PyObject *exception_keeper_type_100;
    PyObject *exception_keeper_value_100;
    PyTracebackObject *exception_keeper_tb_100;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_100;
    static struct Nuitka_FrameObject *cache_frame_01d10b70dd56fe91ecc5ff5ea2ebb02e_38 = NULL;
    PyObject *exception_keeper_type_101;
    PyObject *exception_keeper_value_101;
    PyTracebackObject *exception_keeper_tb_101;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_101;
    PyObject *exception_keeper_type_102;
    PyObject *exception_keeper_value_102;
    PyTracebackObject *exception_keeper_tb_102;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_102;
    PyObject *exception_keeper_type_103;
    PyObject *exception_keeper_value_103;
    PyTracebackObject *exception_keeper_tb_103;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_103;
    PyObject *locals_numba$core$typing$randomdecl$$$class__19_Random_nullary_distribution_286 = NULL;
    struct Nuitka_FrameObject *frame_f2e699d865c5d4cdbac9e050321aa5f5_40;
    NUITKA_MAY_BE_UNUSED char const *type_description_40 = NULL;
    struct Nuitka_FrameObject *frame_e6c084536d36ccf44cfde2641359fedb_41;
    NUITKA_MAY_BE_UNUSED char const *type_description_41 = NULL;
    PyObject *exception_keeper_type_104;
    PyObject *exception_keeper_value_104;
    PyTracebackObject *exception_keeper_tb_104;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_104;
    static struct Nuitka_FrameObject *cache_frame_e6c084536d36ccf44cfde2641359fedb_41 = NULL;
    PyObject *exception_keeper_type_105;
    PyObject *exception_keeper_value_105;
    PyTracebackObject *exception_keeper_tb_105;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_105;
    static struct Nuitka_FrameObject *cache_frame_f2e699d865c5d4cdbac9e050321aa5f5_40 = NULL;
    PyObject *exception_keeper_type_106;
    PyObject *exception_keeper_value_106;
    PyTracebackObject *exception_keeper_tb_106;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_106;
    PyObject *exception_keeper_type_107;
    PyObject *exception_keeper_value_107;
    PyTracebackObject *exception_keeper_tb_107;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_107;
    PyObject *exception_keeper_type_108;
    PyObject *exception_keeper_value_108;
    PyTracebackObject *exception_keeper_tb_108;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_108;
    PyObject *locals_numba$core$typing$randomdecl$$$class__20_Random_triangular_296 = NULL;
    struct Nuitka_FrameObject *frame_97a7f6be985da5ee9a7f03aa3318ed54_42;
    NUITKA_MAY_BE_UNUSED char const *type_description_42 = NULL;
    struct Nuitka_FrameObject *frame_b5c51f87e954de12490f3cdc22809f65_43;
    NUITKA_MAY_BE_UNUSED char const *type_description_43 = NULL;
    PyObject *exception_keeper_type_109;
    PyObject *exception_keeper_value_109;
    PyTracebackObject *exception_keeper_tb_109;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_109;
    static struct Nuitka_FrameObject *cache_frame_b5c51f87e954de12490f3cdc22809f65_43 = NULL;
    PyObject *exception_keeper_type_110;
    PyObject *exception_keeper_value_110;
    PyTracebackObject *exception_keeper_tb_110;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_110;
    struct Nuitka_FrameObject *frame_52dbc07b92665a53497ee55930828bee_44;
    NUITKA_MAY_BE_UNUSED char const *type_description_44 = NULL;
    PyObject *exception_keeper_type_111;
    PyObject *exception_keeper_value_111;
    PyTracebackObject *exception_keeper_tb_111;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_111;
    static struct Nuitka_FrameObject *cache_frame_52dbc07b92665a53497ee55930828bee_44 = NULL;
    PyObject *exception_keeper_type_112;
    PyObject *exception_keeper_value_112;
    PyTracebackObject *exception_keeper_tb_112;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_112;
    PyObject *exception_keeper_type_113;
    PyObject *exception_keeper_value_113;
    PyTracebackObject *exception_keeper_tb_113;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_113;
    static struct Nuitka_FrameObject *cache_frame_97a7f6be985da5ee9a7f03aa3318ed54_42 = NULL;
    PyObject *exception_keeper_type_114;
    PyObject *exception_keeper_value_114;
    PyTracebackObject *exception_keeper_tb_114;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_114;
    PyObject *exception_keeper_type_115;
    PyObject *exception_keeper_value_115;
    PyTracebackObject *exception_keeper_tb_115;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_115;
    PyObject *exception_keeper_type_116;
    PyObject *exception_keeper_value_116;
    PyTracebackObject *exception_keeper_tb_116;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_116;

    // Module code.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = Py_None;
        UPDATE_STRING_DICT0(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[55], tmp_assign_source_1);
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = module_filename_obj;
        UPDATE_STRING_DICT0(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[56], tmp_assign_source_2);
    }
    // Frame without reuse.
    frame_67c4cca428b0d1121581f2e5bfdef9ad = MAKE_MODULE_FRAME(codeobj_67c4cca428b0d1121581f2e5bfdef9ad, module_numba$core$typing$randomdecl);

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStack(frame_67c4cca428b0d1121581f2e5bfdef9ad);
    assert(Py_REFCNT(frame_67c4cca428b0d1121581f2e5bfdef9ad) == 2);

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_assattr_value_1 = module_filename_obj;
        tmp_assattr_target_1 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[57]);

        if (unlikely(tmp_assattr_target_1 == NULL)) {
            tmp_assattr_target_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[57]);
        }

        assert(!(tmp_assattr_target_1 == NULL));
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_value_2 = Py_True;
        tmp_assattr_target_2 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[57]);

        if (unlikely(tmp_assattr_target_2 == NULL)) {
            tmp_assattr_target_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[57]);
        }

        assert(!(tmp_assattr_target_2 == NULL));
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[59], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_3;
        tmp_assign_source_3 = Py_None;
        UPDATE_STRING_DICT0(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[60], tmp_assign_source_3);
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_name_value_1;
        PyObject *tmp_globals_arg_value_1;
        PyObject *tmp_locals_arg_value_1;
        PyObject *tmp_fromlist_value_1;
        PyObject *tmp_level_value_1;
        tmp_name_value_1 = mod_consts[19];
        tmp_globals_arg_value_1 = (PyObject *)moduledict_numba$core$typing$randomdecl;
        tmp_locals_arg_value_1 = Py_None;
        tmp_fromlist_value_1 = Py_None;
        tmp_level_value_1 = mod_consts[13];
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 1;
        tmp_assign_source_4 = IMPORT_MODULE5(tmp_name_value_1, tmp_globals_arg_value_1, tmp_locals_arg_value_1, tmp_fromlist_value_1, tmp_level_value_1);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[19], tmp_assign_source_4);
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_name_value_2;
        PyObject *tmp_globals_arg_value_2;
        PyObject *tmp_locals_arg_value_2;
        PyObject *tmp_fromlist_value_2;
        PyObject *tmp_level_value_2;
        tmp_name_value_2 = mod_consts[61];
        tmp_globals_arg_value_2 = (PyObject *)moduledict_numba$core$typing$randomdecl;
        tmp_locals_arg_value_2 = Py_None;
        tmp_fromlist_value_2 = Py_None;
        tmp_level_value_2 = mod_consts[13];
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 3;
        tmp_assign_source_5 = IMPORT_MODULE5(tmp_name_value_2, tmp_globals_arg_value_2, tmp_locals_arg_value_2, tmp_fromlist_value_2, tmp_level_value_2);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62], tmp_assign_source_5);
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_import_name_from_1;
        PyObject *tmp_name_value_3;
        PyObject *tmp_globals_arg_value_3;
        PyObject *tmp_locals_arg_value_3;
        PyObject *tmp_fromlist_value_3;
        PyObject *tmp_level_value_3;
        tmp_name_value_3 = mod_consts[63];
        tmp_globals_arg_value_3 = (PyObject *)moduledict_numba$core$typing$randomdecl;
        tmp_locals_arg_value_3 = Py_None;
        tmp_fromlist_value_3 = mod_consts[64];
        tmp_level_value_3 = mod_consts[13];
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 5;
        tmp_import_name_from_1 = IMPORT_MODULE5(tmp_name_value_3, tmp_globals_arg_value_3, tmp_locals_arg_value_3, tmp_fromlist_value_3, tmp_level_value_3);
        if (tmp_import_name_from_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 5;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_1)) {
            tmp_assign_source_6 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_1,
                (PyObject *)moduledict_numba$core$typing$randomdecl,
                mod_consts[0],
                mod_consts[13]
            );
        } else {
            tmp_assign_source_6 = IMPORT_NAME(tmp_import_name_from_1, mod_consts[0]);
        }

        Py_DECREF(tmp_import_name_from_1);
        if (tmp_assign_source_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 5;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[0], tmp_assign_source_6);
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_name_value_4;
        PyObject *tmp_globals_arg_value_4;
        PyObject *tmp_locals_arg_value_4;
        PyObject *tmp_fromlist_value_4;
        PyObject *tmp_level_value_4;
        tmp_name_value_4 = mod_consts[65];
        tmp_globals_arg_value_4 = (PyObject *)moduledict_numba$core$typing$randomdecl;
        tmp_locals_arg_value_4 = Py_None;
        tmp_fromlist_value_4 = mod_consts[66];
        tmp_level_value_4 = mod_consts[3];
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 6;
        tmp_assign_source_7 = IMPORT_MODULE5(tmp_name_value_4, tmp_globals_arg_value_4, tmp_locals_arg_value_4, tmp_fromlist_value_4, tmp_level_value_4);
        if (tmp_assign_source_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 6;

            goto frame_exception_exit_1;
        }
        assert(tmp_import_from_1__module == NULL);
        tmp_import_from_1__module = tmp_assign_source_7;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_import_name_from_2;
        CHECK_OBJECT(tmp_import_from_1__module);
        tmp_import_name_from_2 = tmp_import_from_1__module;
        if (PyModule_Check(tmp_import_name_from_2)) {
            tmp_assign_source_8 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_2,
                (PyObject *)moduledict_numba$core$typing$randomdecl,
                mod_consts[67],
                mod_consts[13]
            );
        } else {
            tmp_assign_source_8 = IMPORT_NAME(tmp_import_name_from_2, mod_consts[67]);
        }

        if (tmp_assign_source_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 6;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[67], tmp_assign_source_8);
    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_import_name_from_3;
        CHECK_OBJECT(tmp_import_from_1__module);
        tmp_import_name_from_3 = tmp_import_from_1__module;
        if (PyModule_Check(tmp_import_name_from_3)) {
            tmp_assign_source_9 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_3,
                (PyObject *)moduledict_numba$core$typing$randomdecl,
                mod_consts[68],
                mod_consts[13]
            );
        } else {
            tmp_assign_source_9 = IMPORT_NAME(tmp_import_name_from_3, mod_consts[68]);
        }

        if (tmp_assign_source_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 6;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[68], tmp_assign_source_9);
    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_import_name_from_4;
        CHECK_OBJECT(tmp_import_from_1__module);
        tmp_import_name_from_4 = tmp_import_from_1__module;
        if (PyModule_Check(tmp_import_name_from_4)) {
            tmp_assign_source_10 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_4,
                (PyObject *)moduledict_numba$core$typing$randomdecl,
                mod_consts[69],
                mod_consts[13]
            );
        } else {
            tmp_assign_source_10 = IMPORT_NAME(tmp_import_name_from_4, mod_consts[69]);
        }

        if (tmp_assign_source_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 6;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[69], tmp_assign_source_10);
    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_import_name_from_5;
        CHECK_OBJECT(tmp_import_from_1__module);
        tmp_import_name_from_5 = tmp_import_from_1__module;
        if (PyModule_Check(tmp_import_name_from_5)) {
            tmp_assign_source_11 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_5,
                (PyObject *)moduledict_numba$core$typing$randomdecl,
                mod_consts[70],
                mod_consts[13]
            );
        } else {
            tmp_assign_source_11 = IMPORT_NAME(tmp_import_name_from_5, mod_consts[70]);
        }

        if (tmp_assign_source_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 6;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[70], tmp_assign_source_11);
    }
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_import_name_from_6;
        CHECK_OBJECT(tmp_import_from_1__module);
        tmp_import_name_from_6 = tmp_import_from_1__module;
        if (PyModule_Check(tmp_import_name_from_6)) {
            tmp_assign_source_12 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_6,
                (PyObject *)moduledict_numba$core$typing$randomdecl,
                mod_consts[71],
                mod_consts[13]
            );
        } else {
            tmp_assign_source_12 = IMPORT_NAME(tmp_import_name_from_6, mod_consts[71]);
        }

        if (tmp_assign_source_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 6;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[71], tmp_assign_source_12);
    }
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_import_name_from_7;
        CHECK_OBJECT(tmp_import_from_1__module);
        tmp_import_name_from_7 = tmp_import_from_1__module;
        if (PyModule_Check(tmp_import_name_from_7)) {
            tmp_assign_source_13 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_7,
                (PyObject *)moduledict_numba$core$typing$randomdecl,
                mod_consts[25],
                mod_consts[13]
            );
        } else {
            tmp_assign_source_13 = IMPORT_NAME(tmp_import_name_from_7, mod_consts[25]);
        }

        if (tmp_assign_source_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 6;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[25], tmp_assign_source_13);
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_import_from_1__module);
    Py_DECREF(tmp_import_from_1__module);
    tmp_import_from_1__module = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    CHECK_OBJECT(tmp_import_from_1__module);
    Py_DECREF(tmp_import_from_1__module);
    tmp_import_from_1__module = NULL;
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_import_name_from_8;
        PyObject *tmp_name_value_5;
        PyObject *tmp_globals_arg_value_5;
        PyObject *tmp_locals_arg_value_5;
        PyObject *tmp_fromlist_value_5;
        PyObject *tmp_level_value_5;
        tmp_name_value_5 = mod_consts[72];
        tmp_globals_arg_value_5 = (PyObject *)moduledict_numba$core$typing$randomdecl;
        tmp_locals_arg_value_5 = Py_None;
        tmp_fromlist_value_5 = mod_consts[73];
        tmp_level_value_5 = mod_consts[13];
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 8;
        tmp_import_name_from_8 = IMPORT_MODULE5(tmp_name_value_5, tmp_globals_arg_value_5, tmp_locals_arg_value_5, tmp_fromlist_value_5, tmp_level_value_5);
        if (tmp_import_name_from_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 8;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_8)) {
            tmp_assign_source_14 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_8,
                (PyObject *)moduledict_numba$core$typing$randomdecl,
                mod_consts[74],
                mod_consts[13]
            );
        } else {
            tmp_assign_source_14 = IMPORT_NAME(tmp_import_name_from_8, mod_consts[74]);
        }

        Py_DECREF(tmp_import_name_from_8);
        if (tmp_assign_source_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 8;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[74], tmp_assign_source_14);
    }
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_called_value_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[71]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 11;

            goto frame_exception_exit_1;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 11;
        tmp_assign_source_15 = CALL_FUNCTION_NO_ARGS(tmp_called_value_1);
        if (tmp_assign_source_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 11;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[75], tmp_assign_source_15);
    }
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_expression_value_1;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[75]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[75]);
        }

        assert(!(tmp_expression_value_1 == NULL));
        tmp_assign_source_16 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[76]);
        if (tmp_assign_source_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 12;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[77], tmp_assign_source_16);
    }
    {
        PyObject *tmp_assign_source_17;
        PyObject *tmp_expression_value_2;
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[75]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[75]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 13;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_17 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[78]);
        if (tmp_assign_source_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 13;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79], tmp_assign_source_17);
    }
    {
        PyObject *tmp_assign_source_18;
        PyObject *tmp_expression_value_3;
        tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[75]);

        if (unlikely(tmp_expression_value_3 == NULL)) {
            tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[75]);
        }

        if (tmp_expression_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 14;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_18 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[80]);
        if (tmp_assign_source_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 14;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[81], tmp_assign_source_18);
    }
    {
        PyObject *tmp_assign_source_19;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_set_arg_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_expression_value_4;
        tmp_called_value_2 = LOOKUP_BUILTIN(mod_consts[82]);
        assert(tmp_called_value_2 != NULL);
        tmp_expression_value_4 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[0]);

        if (unlikely(tmp_expression_value_4 == NULL)) {
            tmp_expression_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[0]);
        }

        if (tmp_expression_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 22;

            goto frame_exception_exit_1;
        }
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[2]);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 22;

            goto frame_exception_exit_1;
        }
        tmp_set_arg_1 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_5;
            PyTuple_SET_ITEM(tmp_set_arg_1, 0, tmp_tuple_element_1);
            tmp_expression_value_5 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[0]);

            if (unlikely(tmp_expression_value_5 == NULL)) {
                tmp_expression_value_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[0]);
            }

            if (tmp_expression_value_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 22;

                goto tuple_build_exception_1;
            }
            tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[83]);
            if (tmp_tuple_element_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 22;

                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_set_arg_1, 1, tmp_tuple_element_1);
        }
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_set_arg_1);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        tmp_args_element_value_1 = PySet_New(tmp_set_arg_1);
        Py_DECREF(tmp_set_arg_1);
        if (tmp_args_element_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 22;

            goto frame_exception_exit_1;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 22;
        tmp_assign_source_19 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_2, tmp_args_element_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_assign_source_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 22;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[84], tmp_assign_source_19);
    }
    {
        PyObject *tmp_assign_source_20;
        PyObject *tmp_list_element_1;
        PyObject *tmp_expression_value_6;
        tmp_expression_value_6 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[0]);

        if (unlikely(tmp_expression_value_6 == NULL)) {
            tmp_expression_value_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[0]);
        }

        if (tmp_expression_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 24;

            goto frame_exception_exit_1;
        }
        tmp_list_element_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[85]);
        if (tmp_list_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 24;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_20 = PyList_New(1);
        PyList_SET_ITEM(tmp_assign_source_20, 0, tmp_list_element_1);
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[86], tmp_assign_source_20);
    }
    {
        PyObject *tmp_assign_source_21;


        tmp_assign_source_21 = MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__1_normalize_shape();

        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[22], tmp_assign_source_21);
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_22;
        PyObject *tmp_tuple_element_2;
        tmp_tuple_element_2 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[70]);

        if (unlikely(tmp_tuple_element_2 == NULL)) {
            tmp_tuple_element_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[70]);
        }

        if (tmp_tuple_element_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 42;

            goto try_except_handler_2;
        }
        tmp_assign_source_22 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_22, 0, tmp_tuple_element_2);
        assert(tmp_class_creation_1__bases_orig == NULL);
        tmp_class_creation_1__bases_orig = tmp_assign_source_22;
    }
    {
        PyObject *tmp_assign_source_23;
        PyObject *tmp_dircall_arg1_1;
        CHECK_OBJECT(tmp_class_creation_1__bases_orig);
        tmp_dircall_arg1_1 = tmp_class_creation_1__bases_orig;
        Py_INCREF(tmp_dircall_arg1_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1};
            tmp_assign_source_23 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 42;

            goto try_except_handler_2;
        }
        assert(tmp_class_creation_1__bases == NULL);
        tmp_class_creation_1__bases = tmp_assign_source_23;
    }
    {
        PyObject *tmp_assign_source_24;
        tmp_assign_source_24 = PyDict_New();
        assert(tmp_class_creation_1__class_decl_dict == NULL);
        tmp_class_creation_1__class_decl_dict = tmp_assign_source_24;
    }
    {
        PyObject *tmp_assign_source_25;
        PyObject *tmp_metaclass_value_1;
        bool tmp_condition_result_1;
        PyObject *tmp_key_value_1;
        PyObject *tmp_dict_arg_value_1;
        PyObject *tmp_dict_arg_value_2;
        PyObject *tmp_key_value_2;
        nuitka_bool tmp_condition_result_2;
        int tmp_truth_name_1;
        PyObject *tmp_type_arg_1;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_subscript_value_1;
        PyObject *tmp_bases_value_1;
        tmp_key_value_1 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dict_arg_value_1 = tmp_class_creation_1__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_1, tmp_key_value_1);
        assert(!(tmp_res == -1));
        tmp_condition_result_1 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto condexpr_true_1;
        } else {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dict_arg_value_2 = tmp_class_creation_1__class_decl_dict;
        tmp_key_value_2 = mod_consts[87];
        tmp_metaclass_value_1 = DICT_GET_ITEM0(tmp_dict_arg_value_2, tmp_key_value_2);
        if (tmp_metaclass_value_1 == NULL) {
            tmp_metaclass_value_1 = Py_None;
        }
        assert(!(tmp_metaclass_value_1 == NULL));
        Py_INCREF(tmp_metaclass_value_1);
        goto condexpr_end_1;
        condexpr_false_1:;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_class_creation_1__bases);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 42;

            goto try_except_handler_2;
        }
        tmp_condition_result_2 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_2;
        } else {
            goto condexpr_false_2;
        }
        condexpr_true_2:;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_expression_value_7 = tmp_class_creation_1__bases;
        tmp_subscript_value_1 = mod_consts[13];
        tmp_type_arg_1 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_7, tmp_subscript_value_1, 0);
        if (tmp_type_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 42;

            goto try_except_handler_2;
        }
        tmp_metaclass_value_1 = BUILTIN_TYPE1(tmp_type_arg_1);
        Py_DECREF(tmp_type_arg_1);
        if (tmp_metaclass_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 42;

            goto try_except_handler_2;
        }
        goto condexpr_end_2;
        condexpr_false_2:;
        tmp_metaclass_value_1 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_1);
        condexpr_end_2:;
        condexpr_end_1:;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_bases_value_1 = tmp_class_creation_1__bases;
        tmp_assign_source_25 = SELECT_METACLASS(tmp_metaclass_value_1, tmp_bases_value_1);
        Py_DECREF(tmp_metaclass_value_1);
        if (tmp_assign_source_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 42;

            goto try_except_handler_2;
        }
        assert(tmp_class_creation_1__metaclass == NULL);
        tmp_class_creation_1__metaclass = tmp_assign_source_25;
    }
    {
        bool tmp_condition_result_3;
        PyObject *tmp_key_value_3;
        PyObject *tmp_dict_arg_value_3;
        tmp_key_value_3 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dict_arg_value_3 = tmp_class_creation_1__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_3, tmp_key_value_3);
        assert(!(tmp_res == -1));
        tmp_condition_result_3 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_3 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_1__class_decl_dict;
    tmp_dictdel_key = mod_consts[87];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 42;

        goto try_except_handler_2;
    }
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_expression_value_8;
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_expression_value_8 = tmp_class_creation_1__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_8, mod_consts[88]);
        tmp_condition_result_4 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_26;
        PyObject *tmp_called_value_3;
        PyObject *tmp_expression_value_9;
        PyObject *tmp_args_value_1;
        PyObject *tmp_tuple_element_3;
        PyObject *tmp_kwargs_value_1;
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_expression_value_9 = tmp_class_creation_1__metaclass;
        tmp_called_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_9, mod_consts[88]);
        if (tmp_called_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 42;

            goto try_except_handler_2;
        }
        tmp_tuple_element_3 = mod_consts[34];
        tmp_args_value_1 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_1, 0, tmp_tuple_element_3);
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_tuple_element_3 = tmp_class_creation_1__bases;
        PyTuple_SET_ITEM0(tmp_args_value_1, 1, tmp_tuple_element_3);
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_kwargs_value_1 = tmp_class_creation_1__class_decl_dict;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 42;
        tmp_assign_source_26 = CALL_FUNCTION(tmp_called_value_3, tmp_args_value_1, tmp_kwargs_value_1);
        Py_DECREF(tmp_called_value_3);
        Py_DECREF(tmp_args_value_1);
        if (tmp_assign_source_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 42;

            goto try_except_handler_2;
        }
        assert(tmp_class_creation_1__prepared == NULL);
        tmp_class_creation_1__prepared = tmp_assign_source_26;
    }
    {
        bool tmp_condition_result_5;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_expression_value_10;
        CHECK_OBJECT(tmp_class_creation_1__prepared);
        tmp_expression_value_10 = tmp_class_creation_1__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_10, mod_consts[89]);
        tmp_operand_value_1 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 42;

            goto try_except_handler_2;
        }
        tmp_condition_result_5 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_5 != false) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_raise_value_1;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        PyObject *tmp_tuple_element_4;
        PyObject *tmp_getattr_target_1;
        PyObject *tmp_getattr_attr_1;
        PyObject *tmp_getattr_default_1;
        tmp_raise_type_1 = PyExc_TypeError;
        tmp_left_value_1 = mod_consts[90];
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_getattr_target_1 = tmp_class_creation_1__metaclass;
        tmp_getattr_attr_1 = mod_consts[91];
        tmp_getattr_default_1 = mod_consts[92];
        tmp_tuple_element_4 = BUILTIN_GETATTR(tmp_getattr_target_1, tmp_getattr_attr_1, tmp_getattr_default_1);
        if (tmp_tuple_element_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 42;

            goto try_except_handler_2;
        }
        tmp_right_value_1 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_11;
            PyObject *tmp_type_arg_2;
            PyTuple_SET_ITEM(tmp_right_value_1, 0, tmp_tuple_element_4);
            CHECK_OBJECT(tmp_class_creation_1__prepared);
            tmp_type_arg_2 = tmp_class_creation_1__prepared;
            tmp_expression_value_11 = BUILTIN_TYPE1(tmp_type_arg_2);
            assert(!(tmp_expression_value_11 == NULL));
            tmp_tuple_element_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_11, mod_consts[91]);
            Py_DECREF(tmp_expression_value_11);
            if (tmp_tuple_element_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 42;

                goto tuple_build_exception_2;
            }
            PyTuple_SET_ITEM(tmp_right_value_1, 1, tmp_tuple_element_4);
        }
        goto tuple_build_noexception_2;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_2:;
        Py_DECREF(tmp_right_value_1);
        goto try_except_handler_2;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_2:;
        tmp_raise_value_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_1, tmp_right_value_1);
        Py_DECREF(tmp_right_value_1);
        if (tmp_raise_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 42;

            goto try_except_handler_2;
        }
        exception_type = tmp_raise_type_1;
        Py_INCREF(tmp_raise_type_1);
        exception_value = tmp_raise_value_1;
        exception_lineno = 42;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_2;
    }
    branch_no_3:;
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_assign_source_27;
        tmp_assign_source_27 = PyDict_New();
        assert(tmp_class_creation_1__prepared == NULL);
        tmp_class_creation_1__prepared = tmp_assign_source_27;
    }
    branch_end_2:;
    {
        PyObject *tmp_assign_source_28;
        {
            PyObject *tmp_set_locals_1;
            CHECK_OBJECT(tmp_class_creation_1__prepared);
            tmp_set_locals_1 = tmp_class_creation_1__prepared;
            locals_numba$core$typing$randomdecl$$$class__1_RandomTemplate_42 = tmp_set_locals_1;
            Py_INCREF(tmp_set_locals_1);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[93];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__1_RandomTemplate_42, mod_consts[94], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 42;

            goto try_except_handler_4;
        }
        tmp_dictset_value = mod_consts[95];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__1_RandomTemplate_42, mod_consts[55], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 42;

            goto try_except_handler_4;
        }
        tmp_dictset_value = mod_consts[34];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__1_RandomTemplate_42, mod_consts[96], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 42;

            goto try_except_handler_4;
        }
        if (isFrameUnusable(cache_frame_88759d23dfb969dec3ac760ec37157e7_2)) {
            Py_XDECREF(cache_frame_88759d23dfb969dec3ac760ec37157e7_2);

#if _DEBUG_REFCOUNTS
            if (cache_frame_88759d23dfb969dec3ac760ec37157e7_2 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_88759d23dfb969dec3ac760ec37157e7_2 = MAKE_FUNCTION_FRAME(codeobj_88759d23dfb969dec3ac760ec37157e7, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_88759d23dfb969dec3ac760ec37157e7_2->m_type_description == NULL);
        frame_88759d23dfb969dec3ac760ec37157e7_2 = cache_frame_88759d23dfb969dec3ac760ec37157e7_2;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_88759d23dfb969dec3ac760ec37157e7_2);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_88759d23dfb969dec3ac760ec37157e7_2) == 2); // Frame stack

        // Framed code:
        {
            PyObject *tmp_defaults_1;
            tmp_defaults_1 = mod_consts[39];
            Py_INCREF(tmp_defaults_1);


            tmp_dictset_value = MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__2_array_typer(tmp_defaults_1);

            tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__1_RandomTemplate_42, mod_consts[35], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 48;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_88759d23dfb969dec3ac760ec37157e7_2);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_1;

        frame_exception_exit_2:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_88759d23dfb969dec3ac760ec37157e7_2);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_88759d23dfb969dec3ac760ec37157e7_2, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_88759d23dfb969dec3ac760ec37157e7_2->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_88759d23dfb969dec3ac760ec37157e7_2, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_88759d23dfb969dec3ac760ec37157e7_2,
            type_description_2,
            outline_0_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_88759d23dfb969dec3ac760ec37157e7_2 == cache_frame_88759d23dfb969dec3ac760ec37157e7_2) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_88759d23dfb969dec3ac760ec37157e7_2);
            cache_frame_88759d23dfb969dec3ac760ec37157e7_2 = NULL;
        }

        assertFrameObject(frame_88759d23dfb969dec3ac760ec37157e7_2);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_1;

        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_1:;

        goto try_except_handler_4;
        skip_nested_handling_1:;
        {
            nuitka_bool tmp_condition_result_6;
            PyObject *tmp_cmp_expr_left_1;
            PyObject *tmp_cmp_expr_right_1;
            CHECK_OBJECT(tmp_class_creation_1__bases);
            tmp_cmp_expr_left_1 = tmp_class_creation_1__bases;
            CHECK_OBJECT(tmp_class_creation_1__bases_orig);
            tmp_cmp_expr_right_1 = tmp_class_creation_1__bases_orig;
            tmp_condition_result_6 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
            if (tmp_condition_result_6 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 42;

                goto try_except_handler_4;
            }
            if (tmp_condition_result_6 == NUITKA_BOOL_TRUE) {
                goto branch_yes_4;
            } else {
                goto branch_no_4;
            }
            assert(tmp_condition_result_6 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_4:;
        CHECK_OBJECT(tmp_class_creation_1__bases_orig);
        tmp_dictset_value = tmp_class_creation_1__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__1_RandomTemplate_42, mod_consts[98], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 42;

            goto try_except_handler_4;
        }
        branch_no_4:;
        {
            PyObject *tmp_assign_source_29;
            PyObject *tmp_called_value_4;
            PyObject *tmp_args_value_2;
            PyObject *tmp_tuple_element_5;
            PyObject *tmp_kwargs_value_2;
            CHECK_OBJECT(tmp_class_creation_1__metaclass);
            tmp_called_value_4 = tmp_class_creation_1__metaclass;
            tmp_tuple_element_5 = mod_consts[34];
            tmp_args_value_2 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_2, 0, tmp_tuple_element_5);
            CHECK_OBJECT(tmp_class_creation_1__bases);
            tmp_tuple_element_5 = tmp_class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_2, 1, tmp_tuple_element_5);
            tmp_tuple_element_5 = locals_numba$core$typing$randomdecl$$$class__1_RandomTemplate_42;
            PyTuple_SET_ITEM0(tmp_args_value_2, 2, tmp_tuple_element_5);
            CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
            tmp_kwargs_value_2 = tmp_class_creation_1__class_decl_dict;
            frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 42;
            tmp_assign_source_29 = CALL_FUNCTION(tmp_called_value_4, tmp_args_value_2, tmp_kwargs_value_2);
            Py_DECREF(tmp_args_value_2);
            if (tmp_assign_source_29 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 42;

                goto try_except_handler_4;
            }
            assert(outline_0_var___class__ == NULL);
            outline_0_var___class__ = tmp_assign_source_29;
        }
        CHECK_OBJECT(outline_0_var___class__);
        tmp_assign_source_28 = outline_0_var___class__;
        Py_INCREF(tmp_assign_source_28);
        goto try_return_handler_4;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_4:;
        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__1_RandomTemplate_42);
        locals_numba$core$typing$randomdecl$$$class__1_RandomTemplate_42 = NULL;
        goto try_return_handler_3;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__1_RandomTemplate_42);
        locals_numba$core$typing$randomdecl$$$class__1_RandomTemplate_42 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto try_except_handler_3;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_3:;
        CHECK_OBJECT(outline_0_var___class__);
        Py_DECREF(outline_0_var___class__);
        outline_0_var___class__ = NULL;
        goto outline_result_1;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_3 = exception_type;
        exception_keeper_value_3 = exception_value;
        exception_keeper_tb_3 = exception_tb;
        exception_keeper_lineno_3 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;
        exception_lineno = exception_keeper_lineno_3;

        goto outline_exception_1;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_1:;
        exception_lineno = 42;
        goto try_except_handler_2;
        outline_result_1:;
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[34], tmp_assign_source_28);
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_1__bases_orig);
    tmp_class_creation_1__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_1__bases);
    tmp_class_creation_1__bases = NULL;
    Py_XDECREF(tmp_class_creation_1__class_decl_dict);
    tmp_class_creation_1__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_1__metaclass);
    tmp_class_creation_1__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_1__prepared);
    tmp_class_creation_1__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(tmp_class_creation_1__bases_orig);
    Py_DECREF(tmp_class_creation_1__bases_orig);
    tmp_class_creation_1__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_1__bases);
    Py_DECREF(tmp_class_creation_1__bases);
    tmp_class_creation_1__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
    Py_DECREF(tmp_class_creation_1__class_decl_dict);
    tmp_class_creation_1__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_1__metaclass);
    Py_DECREF(tmp_class_creation_1__metaclass);
    tmp_class_creation_1__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_1__prepared);
    Py_DECREF(tmp_class_creation_1__prepared);
    tmp_class_creation_1__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_30;
        PyObject *tmp_tuple_element_6;
        tmp_tuple_element_6 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[34]);

        if (unlikely(tmp_tuple_element_6 == NULL)) {
            tmp_tuple_element_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[34]);
        }

        if (tmp_tuple_element_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 74;

            goto try_except_handler_5;
        }
        tmp_assign_source_30 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_30, 0, tmp_tuple_element_6);
        assert(tmp_class_creation_2__bases_orig == NULL);
        tmp_class_creation_2__bases_orig = tmp_assign_source_30;
    }
    {
        PyObject *tmp_assign_source_31;
        PyObject *tmp_dircall_arg1_2;
        CHECK_OBJECT(tmp_class_creation_2__bases_orig);
        tmp_dircall_arg1_2 = tmp_class_creation_2__bases_orig;
        Py_INCREF(tmp_dircall_arg1_2);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_2};
            tmp_assign_source_31 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 74;

            goto try_except_handler_5;
        }
        assert(tmp_class_creation_2__bases == NULL);
        tmp_class_creation_2__bases = tmp_assign_source_31;
    }
    {
        PyObject *tmp_assign_source_32;
        tmp_assign_source_32 = PyDict_New();
        assert(tmp_class_creation_2__class_decl_dict == NULL);
        tmp_class_creation_2__class_decl_dict = tmp_assign_source_32;
    }
    {
        PyObject *tmp_assign_source_33;
        PyObject *tmp_metaclass_value_2;
        bool tmp_condition_result_7;
        PyObject *tmp_key_value_4;
        PyObject *tmp_dict_arg_value_4;
        PyObject *tmp_dict_arg_value_5;
        PyObject *tmp_key_value_5;
        nuitka_bool tmp_condition_result_8;
        int tmp_truth_name_2;
        PyObject *tmp_type_arg_3;
        PyObject *tmp_expression_value_12;
        PyObject *tmp_subscript_value_2;
        PyObject *tmp_bases_value_2;
        tmp_key_value_4 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_dict_arg_value_4 = tmp_class_creation_2__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_4, tmp_key_value_4);
        assert(!(tmp_res == -1));
        tmp_condition_result_7 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_7 != false) {
            goto condexpr_true_3;
        } else {
            goto condexpr_false_3;
        }
        condexpr_true_3:;
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_dict_arg_value_5 = tmp_class_creation_2__class_decl_dict;
        tmp_key_value_5 = mod_consts[87];
        tmp_metaclass_value_2 = DICT_GET_ITEM0(tmp_dict_arg_value_5, tmp_key_value_5);
        if (tmp_metaclass_value_2 == NULL) {
            tmp_metaclass_value_2 = Py_None;
        }
        assert(!(tmp_metaclass_value_2 == NULL));
        Py_INCREF(tmp_metaclass_value_2);
        goto condexpr_end_3;
        condexpr_false_3:;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_class_creation_2__bases);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 74;

            goto try_except_handler_5;
        }
        tmp_condition_result_8 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_8 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_4;
        } else {
            goto condexpr_false_4;
        }
        condexpr_true_4:;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_expression_value_12 = tmp_class_creation_2__bases;
        tmp_subscript_value_2 = mod_consts[13];
        tmp_type_arg_3 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_12, tmp_subscript_value_2, 0);
        if (tmp_type_arg_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 74;

            goto try_except_handler_5;
        }
        tmp_metaclass_value_2 = BUILTIN_TYPE1(tmp_type_arg_3);
        Py_DECREF(tmp_type_arg_3);
        if (tmp_metaclass_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 74;

            goto try_except_handler_5;
        }
        goto condexpr_end_4;
        condexpr_false_4:;
        tmp_metaclass_value_2 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_2);
        condexpr_end_4:;
        condexpr_end_3:;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_bases_value_2 = tmp_class_creation_2__bases;
        tmp_assign_source_33 = SELECT_METACLASS(tmp_metaclass_value_2, tmp_bases_value_2);
        Py_DECREF(tmp_metaclass_value_2);
        if (tmp_assign_source_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 74;

            goto try_except_handler_5;
        }
        assert(tmp_class_creation_2__metaclass == NULL);
        tmp_class_creation_2__metaclass = tmp_assign_source_33;
    }
    {
        bool tmp_condition_result_9;
        PyObject *tmp_key_value_6;
        PyObject *tmp_dict_arg_value_6;
        tmp_key_value_6 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_dict_arg_value_6 = tmp_class_creation_2__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_6, tmp_key_value_6);
        assert(!(tmp_res == -1));
        tmp_condition_result_9 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_9 != false) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
    }
    branch_yes_5:;
    CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_2__class_decl_dict;
    tmp_dictdel_key = mod_consts[87];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 74;

        goto try_except_handler_5;
    }
    branch_no_5:;
    {
        nuitka_bool tmp_condition_result_10;
        PyObject *tmp_expression_value_13;
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_expression_value_13 = tmp_class_creation_2__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_13, mod_consts[88]);
        tmp_condition_result_10 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_10 == NUITKA_BOOL_TRUE) {
            goto branch_yes_6;
        } else {
            goto branch_no_6;
        }
    }
    branch_yes_6:;
    {
        PyObject *tmp_assign_source_34;
        PyObject *tmp_called_value_5;
        PyObject *tmp_expression_value_14;
        PyObject *tmp_args_value_3;
        PyObject *tmp_tuple_element_7;
        PyObject *tmp_kwargs_value_3;
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_expression_value_14 = tmp_class_creation_2__metaclass;
        tmp_called_value_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_14, mod_consts[88]);
        if (tmp_called_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 74;

            goto try_except_handler_5;
        }
        tmp_tuple_element_7 = mod_consts[99];
        tmp_args_value_3 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_3, 0, tmp_tuple_element_7);
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_tuple_element_7 = tmp_class_creation_2__bases;
        PyTuple_SET_ITEM0(tmp_args_value_3, 1, tmp_tuple_element_7);
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_kwargs_value_3 = tmp_class_creation_2__class_decl_dict;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 74;
        tmp_assign_source_34 = CALL_FUNCTION(tmp_called_value_5, tmp_args_value_3, tmp_kwargs_value_3);
        Py_DECREF(tmp_called_value_5);
        Py_DECREF(tmp_args_value_3);
        if (tmp_assign_source_34 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 74;

            goto try_except_handler_5;
        }
        assert(tmp_class_creation_2__prepared == NULL);
        tmp_class_creation_2__prepared = tmp_assign_source_34;
    }
    {
        bool tmp_condition_result_11;
        PyObject *tmp_operand_value_2;
        PyObject *tmp_expression_value_15;
        CHECK_OBJECT(tmp_class_creation_2__prepared);
        tmp_expression_value_15 = tmp_class_creation_2__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_15, mod_consts[89]);
        tmp_operand_value_2 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 74;

            goto try_except_handler_5;
        }
        tmp_condition_result_11 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_11 != false) {
            goto branch_yes_7;
        } else {
            goto branch_no_7;
        }
    }
    branch_yes_7:;
    {
        PyObject *tmp_raise_type_2;
        PyObject *tmp_raise_value_2;
        PyObject *tmp_left_value_2;
        PyObject *tmp_right_value_2;
        PyObject *tmp_tuple_element_8;
        PyObject *tmp_getattr_target_2;
        PyObject *tmp_getattr_attr_2;
        PyObject *tmp_getattr_default_2;
        tmp_raise_type_2 = PyExc_TypeError;
        tmp_left_value_2 = mod_consts[90];
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_getattr_target_2 = tmp_class_creation_2__metaclass;
        tmp_getattr_attr_2 = mod_consts[91];
        tmp_getattr_default_2 = mod_consts[92];
        tmp_tuple_element_8 = BUILTIN_GETATTR(tmp_getattr_target_2, tmp_getattr_attr_2, tmp_getattr_default_2);
        if (tmp_tuple_element_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 74;

            goto try_except_handler_5;
        }
        tmp_right_value_2 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_16;
            PyObject *tmp_type_arg_4;
            PyTuple_SET_ITEM(tmp_right_value_2, 0, tmp_tuple_element_8);
            CHECK_OBJECT(tmp_class_creation_2__prepared);
            tmp_type_arg_4 = tmp_class_creation_2__prepared;
            tmp_expression_value_16 = BUILTIN_TYPE1(tmp_type_arg_4);
            assert(!(tmp_expression_value_16 == NULL));
            tmp_tuple_element_8 = LOOKUP_ATTRIBUTE(tmp_expression_value_16, mod_consts[91]);
            Py_DECREF(tmp_expression_value_16);
            if (tmp_tuple_element_8 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 74;

                goto tuple_build_exception_3;
            }
            PyTuple_SET_ITEM(tmp_right_value_2, 1, tmp_tuple_element_8);
        }
        goto tuple_build_noexception_3;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_3:;
        Py_DECREF(tmp_right_value_2);
        goto try_except_handler_5;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_3:;
        tmp_raise_value_2 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_2, tmp_right_value_2);
        Py_DECREF(tmp_right_value_2);
        if (tmp_raise_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 74;

            goto try_except_handler_5;
        }
        exception_type = tmp_raise_type_2;
        Py_INCREF(tmp_raise_type_2);
        exception_value = tmp_raise_value_2;
        exception_lineno = 74;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_5;
    }
    branch_no_7:;
    goto branch_end_6;
    branch_no_6:;
    {
        PyObject *tmp_assign_source_35;
        tmp_assign_source_35 = PyDict_New();
        assert(tmp_class_creation_2__prepared == NULL);
        tmp_class_creation_2__prepared = tmp_assign_source_35;
    }
    branch_end_6:;
    {
        PyObject *tmp_assign_source_36;
        {
            PyObject *tmp_set_locals_2;
            CHECK_OBJECT(tmp_class_creation_2__prepared);
            tmp_set_locals_2 = tmp_class_creation_2__prepared;
            locals_numba$core$typing$randomdecl$$$class__2_ConcreteRandomTemplate_74 = tmp_set_locals_2;
            Py_INCREF(tmp_set_locals_2);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[93];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__2_ConcreteRandomTemplate_74, mod_consts[94], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 74;

            goto try_except_handler_7;
        }
        tmp_dictset_value = mod_consts[100];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__2_ConcreteRandomTemplate_74, mod_consts[55], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 74;

            goto try_except_handler_7;
        }
        tmp_dictset_value = mod_consts[99];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__2_ConcreteRandomTemplate_74, mod_consts[96], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 74;

            goto try_except_handler_7;
        }
        if (isFrameUnusable(cache_frame_f549d07b7e829ad966f13f28a40589ae_3)) {
            Py_XDECREF(cache_frame_f549d07b7e829ad966f13f28a40589ae_3);

#if _DEBUG_REFCOUNTS
            if (cache_frame_f549d07b7e829ad966f13f28a40589ae_3 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_f549d07b7e829ad966f13f28a40589ae_3 = MAKE_FUNCTION_FRAME(codeobj_f549d07b7e829ad966f13f28a40589ae, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_f549d07b7e829ad966f13f28a40589ae_3->m_type_description == NULL);
        frame_f549d07b7e829ad966f13f28a40589ae_3 = cache_frame_f549d07b7e829ad966f13f28a40589ae_3;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_f549d07b7e829ad966f13f28a40589ae_3);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_f549d07b7e829ad966f13f28a40589ae_3) == 2); // Frame stack

        // Framed code:
        {
            PyObject *tmp_defaults_2;
            tmp_defaults_2 = mod_consts[39];
            Py_INCREF(tmp_defaults_2);


            tmp_dictset_value = MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__3_array_typer(tmp_defaults_2);

            tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__2_ConcreteRandomTemplate_74, mod_consts[35], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 80;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_f549d07b7e829ad966f13f28a40589ae_3);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_2;

        frame_exception_exit_3:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_f549d07b7e829ad966f13f28a40589ae_3);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_f549d07b7e829ad966f13f28a40589ae_3, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_f549d07b7e829ad966f13f28a40589ae_3->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_f549d07b7e829ad966f13f28a40589ae_3, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_f549d07b7e829ad966f13f28a40589ae_3,
            type_description_2,
            outline_1_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_f549d07b7e829ad966f13f28a40589ae_3 == cache_frame_f549d07b7e829ad966f13f28a40589ae_3) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_f549d07b7e829ad966f13f28a40589ae_3);
            cache_frame_f549d07b7e829ad966f13f28a40589ae_3 = NULL;
        }

        assertFrameObject(frame_f549d07b7e829ad966f13f28a40589ae_3);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_2;

        frame_no_exception_2:;
        goto skip_nested_handling_2;
        nested_frame_exit_2:;

        goto try_except_handler_7;
        skip_nested_handling_2:;
        {
            nuitka_bool tmp_condition_result_12;
            PyObject *tmp_cmp_expr_left_2;
            PyObject *tmp_cmp_expr_right_2;
            CHECK_OBJECT(tmp_class_creation_2__bases);
            tmp_cmp_expr_left_2 = tmp_class_creation_2__bases;
            CHECK_OBJECT(tmp_class_creation_2__bases_orig);
            tmp_cmp_expr_right_2 = tmp_class_creation_2__bases_orig;
            tmp_condition_result_12 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_2, tmp_cmp_expr_right_2);
            if (tmp_condition_result_12 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 74;

                goto try_except_handler_7;
            }
            if (tmp_condition_result_12 == NUITKA_BOOL_TRUE) {
                goto branch_yes_8;
            } else {
                goto branch_no_8;
            }
            assert(tmp_condition_result_12 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_8:;
        CHECK_OBJECT(tmp_class_creation_2__bases_orig);
        tmp_dictset_value = tmp_class_creation_2__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__2_ConcreteRandomTemplate_74, mod_consts[98], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 74;

            goto try_except_handler_7;
        }
        branch_no_8:;
        {
            PyObject *tmp_assign_source_37;
            PyObject *tmp_called_value_6;
            PyObject *tmp_args_value_4;
            PyObject *tmp_tuple_element_9;
            PyObject *tmp_kwargs_value_4;
            CHECK_OBJECT(tmp_class_creation_2__metaclass);
            tmp_called_value_6 = tmp_class_creation_2__metaclass;
            tmp_tuple_element_9 = mod_consts[99];
            tmp_args_value_4 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_4, 0, tmp_tuple_element_9);
            CHECK_OBJECT(tmp_class_creation_2__bases);
            tmp_tuple_element_9 = tmp_class_creation_2__bases;
            PyTuple_SET_ITEM0(tmp_args_value_4, 1, tmp_tuple_element_9);
            tmp_tuple_element_9 = locals_numba$core$typing$randomdecl$$$class__2_ConcreteRandomTemplate_74;
            PyTuple_SET_ITEM0(tmp_args_value_4, 2, tmp_tuple_element_9);
            CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
            tmp_kwargs_value_4 = tmp_class_creation_2__class_decl_dict;
            frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 74;
            tmp_assign_source_37 = CALL_FUNCTION(tmp_called_value_6, tmp_args_value_4, tmp_kwargs_value_4);
            Py_DECREF(tmp_args_value_4);
            if (tmp_assign_source_37 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 74;

                goto try_except_handler_7;
            }
            assert(outline_1_var___class__ == NULL);
            outline_1_var___class__ = tmp_assign_source_37;
        }
        CHECK_OBJECT(outline_1_var___class__);
        tmp_assign_source_36 = outline_1_var___class__;
        Py_INCREF(tmp_assign_source_36);
        goto try_return_handler_7;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_7:;
        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__2_ConcreteRandomTemplate_74);
        locals_numba$core$typing$randomdecl$$$class__2_ConcreteRandomTemplate_74 = NULL;
        goto try_return_handler_6;
        // Exception handler code:
        try_except_handler_7:;
        exception_keeper_type_5 = exception_type;
        exception_keeper_value_5 = exception_value;
        exception_keeper_tb_5 = exception_tb;
        exception_keeper_lineno_5 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__2_ConcreteRandomTemplate_74);
        locals_numba$core$typing$randomdecl$$$class__2_ConcreteRandomTemplate_74 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;
        exception_lineno = exception_keeper_lineno_5;

        goto try_except_handler_6;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_6:;
        CHECK_OBJECT(outline_1_var___class__);
        Py_DECREF(outline_1_var___class__);
        outline_1_var___class__ = NULL;
        goto outline_result_2;
        // Exception handler code:
        try_except_handler_6:;
        exception_keeper_type_6 = exception_type;
        exception_keeper_value_6 = exception_value;
        exception_keeper_tb_6 = exception_tb;
        exception_keeper_lineno_6 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;
        exception_lineno = exception_keeper_lineno_6;

        goto outline_exception_2;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_2:;
        exception_lineno = 74;
        goto try_except_handler_5;
        outline_result_2:;
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[99], tmp_assign_source_36);
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_2__bases_orig);
    tmp_class_creation_2__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_2__bases);
    tmp_class_creation_2__bases = NULL;
    Py_XDECREF(tmp_class_creation_2__class_decl_dict);
    tmp_class_creation_2__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_2__metaclass);
    tmp_class_creation_2__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_2__prepared);
    tmp_class_creation_2__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    CHECK_OBJECT(tmp_class_creation_2__bases_orig);
    Py_DECREF(tmp_class_creation_2__bases_orig);
    tmp_class_creation_2__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_2__bases);
    Py_DECREF(tmp_class_creation_2__bases);
    tmp_class_creation_2__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
    Py_DECREF(tmp_class_creation_2__class_decl_dict);
    tmp_class_creation_2__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_2__metaclass);
    Py_DECREF(tmp_class_creation_2__metaclass);
    tmp_class_creation_2__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_2__prepared);
    Py_DECREF(tmp_class_creation_2__prepared);
    tmp_class_creation_2__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_38;
        PyObject *tmp_tuple_element_10;
        tmp_tuple_element_10 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[67]);

        if (unlikely(tmp_tuple_element_10 == NULL)) {
            tmp_tuple_element_10 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[67]);
        }

        if (tmp_tuple_element_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_8;
        }
        tmp_assign_source_38 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_38, 0, tmp_tuple_element_10);
        assert(tmp_class_creation_3__bases_orig == NULL);
        tmp_class_creation_3__bases_orig = tmp_assign_source_38;
    }
    {
        PyObject *tmp_assign_source_39;
        PyObject *tmp_dircall_arg1_3;
        CHECK_OBJECT(tmp_class_creation_3__bases_orig);
        tmp_dircall_arg1_3 = tmp_class_creation_3__bases_orig;
        Py_INCREF(tmp_dircall_arg1_3);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_3};
            tmp_assign_source_39 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_8;
        }
        assert(tmp_class_creation_3__bases == NULL);
        tmp_class_creation_3__bases = tmp_assign_source_39;
    }
    {
        PyObject *tmp_assign_source_40;
        tmp_assign_source_40 = PyDict_New();
        assert(tmp_class_creation_3__class_decl_dict == NULL);
        tmp_class_creation_3__class_decl_dict = tmp_assign_source_40;
    }
    {
        PyObject *tmp_assign_source_41;
        PyObject *tmp_metaclass_value_3;
        bool tmp_condition_result_13;
        PyObject *tmp_key_value_7;
        PyObject *tmp_dict_arg_value_7;
        PyObject *tmp_dict_arg_value_8;
        PyObject *tmp_key_value_8;
        nuitka_bool tmp_condition_result_14;
        int tmp_truth_name_3;
        PyObject *tmp_type_arg_5;
        PyObject *tmp_expression_value_17;
        PyObject *tmp_subscript_value_3;
        PyObject *tmp_bases_value_3;
        tmp_key_value_7 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_dict_arg_value_7 = tmp_class_creation_3__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_7, tmp_key_value_7);
        assert(!(tmp_res == -1));
        tmp_condition_result_13 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_13 != false) {
            goto condexpr_true_5;
        } else {
            goto condexpr_false_5;
        }
        condexpr_true_5:;
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_dict_arg_value_8 = tmp_class_creation_3__class_decl_dict;
        tmp_key_value_8 = mod_consts[87];
        tmp_metaclass_value_3 = DICT_GET_ITEM0(tmp_dict_arg_value_8, tmp_key_value_8);
        if (tmp_metaclass_value_3 == NULL) {
            tmp_metaclass_value_3 = Py_None;
        }
        assert(!(tmp_metaclass_value_3 == NULL));
        Py_INCREF(tmp_metaclass_value_3);
        goto condexpr_end_5;
        condexpr_false_5:;
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_truth_name_3 = CHECK_IF_TRUE(tmp_class_creation_3__bases);
        if (tmp_truth_name_3 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_8;
        }
        tmp_condition_result_14 = tmp_truth_name_3 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_14 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_6;
        } else {
            goto condexpr_false_6;
        }
        condexpr_true_6:;
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_expression_value_17 = tmp_class_creation_3__bases;
        tmp_subscript_value_3 = mod_consts[13];
        tmp_type_arg_5 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_17, tmp_subscript_value_3, 0);
        if (tmp_type_arg_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_8;
        }
        tmp_metaclass_value_3 = BUILTIN_TYPE1(tmp_type_arg_5);
        Py_DECREF(tmp_type_arg_5);
        if (tmp_metaclass_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_8;
        }
        goto condexpr_end_6;
        condexpr_false_6:;
        tmp_metaclass_value_3 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_3);
        condexpr_end_6:;
        condexpr_end_5:;
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_bases_value_3 = tmp_class_creation_3__bases;
        tmp_assign_source_41 = SELECT_METACLASS(tmp_metaclass_value_3, tmp_bases_value_3);
        Py_DECREF(tmp_metaclass_value_3);
        if (tmp_assign_source_41 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_8;
        }
        assert(tmp_class_creation_3__metaclass == NULL);
        tmp_class_creation_3__metaclass = tmp_assign_source_41;
    }
    {
        bool tmp_condition_result_15;
        PyObject *tmp_key_value_9;
        PyObject *tmp_dict_arg_value_9;
        tmp_key_value_9 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_dict_arg_value_9 = tmp_class_creation_3__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_9, tmp_key_value_9);
        assert(!(tmp_res == -1));
        tmp_condition_result_15 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_15 != false) {
            goto branch_yes_9;
        } else {
            goto branch_no_9;
        }
    }
    branch_yes_9:;
    CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_3__class_decl_dict;
    tmp_dictdel_key = mod_consts[87];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 95;

        goto try_except_handler_8;
    }
    branch_no_9:;
    {
        nuitka_bool tmp_condition_result_16;
        PyObject *tmp_expression_value_18;
        CHECK_OBJECT(tmp_class_creation_3__metaclass);
        tmp_expression_value_18 = tmp_class_creation_3__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_18, mod_consts[88]);
        tmp_condition_result_16 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_16 == NUITKA_BOOL_TRUE) {
            goto branch_yes_10;
        } else {
            goto branch_no_10;
        }
    }
    branch_yes_10:;
    {
        PyObject *tmp_assign_source_42;
        PyObject *tmp_called_value_7;
        PyObject *tmp_expression_value_19;
        PyObject *tmp_args_value_5;
        PyObject *tmp_tuple_element_11;
        PyObject *tmp_kwargs_value_5;
        CHECK_OBJECT(tmp_class_creation_3__metaclass);
        tmp_expression_value_19 = tmp_class_creation_3__metaclass;
        tmp_called_value_7 = LOOKUP_ATTRIBUTE(tmp_expression_value_19, mod_consts[88]);
        if (tmp_called_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_8;
        }
        tmp_tuple_element_11 = mod_consts[102];
        tmp_args_value_5 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_5, 0, tmp_tuple_element_11);
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_tuple_element_11 = tmp_class_creation_3__bases;
        PyTuple_SET_ITEM0(tmp_args_value_5, 1, tmp_tuple_element_11);
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_kwargs_value_5 = tmp_class_creation_3__class_decl_dict;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 95;
        tmp_assign_source_42 = CALL_FUNCTION(tmp_called_value_7, tmp_args_value_5, tmp_kwargs_value_5);
        Py_DECREF(tmp_called_value_7);
        Py_DECREF(tmp_args_value_5);
        if (tmp_assign_source_42 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_8;
        }
        assert(tmp_class_creation_3__prepared == NULL);
        tmp_class_creation_3__prepared = tmp_assign_source_42;
    }
    {
        bool tmp_condition_result_17;
        PyObject *tmp_operand_value_3;
        PyObject *tmp_expression_value_20;
        CHECK_OBJECT(tmp_class_creation_3__prepared);
        tmp_expression_value_20 = tmp_class_creation_3__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_20, mod_consts[89]);
        tmp_operand_value_3 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_3);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_8;
        }
        tmp_condition_result_17 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_17 != false) {
            goto branch_yes_11;
        } else {
            goto branch_no_11;
        }
    }
    branch_yes_11:;
    {
        PyObject *tmp_raise_type_3;
        PyObject *tmp_raise_value_3;
        PyObject *tmp_left_value_3;
        PyObject *tmp_right_value_3;
        PyObject *tmp_tuple_element_12;
        PyObject *tmp_getattr_target_3;
        PyObject *tmp_getattr_attr_3;
        PyObject *tmp_getattr_default_3;
        tmp_raise_type_3 = PyExc_TypeError;
        tmp_left_value_3 = mod_consts[90];
        CHECK_OBJECT(tmp_class_creation_3__metaclass);
        tmp_getattr_target_3 = tmp_class_creation_3__metaclass;
        tmp_getattr_attr_3 = mod_consts[91];
        tmp_getattr_default_3 = mod_consts[92];
        tmp_tuple_element_12 = BUILTIN_GETATTR(tmp_getattr_target_3, tmp_getattr_attr_3, tmp_getattr_default_3);
        if (tmp_tuple_element_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_8;
        }
        tmp_right_value_3 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_21;
            PyObject *tmp_type_arg_6;
            PyTuple_SET_ITEM(tmp_right_value_3, 0, tmp_tuple_element_12);
            CHECK_OBJECT(tmp_class_creation_3__prepared);
            tmp_type_arg_6 = tmp_class_creation_3__prepared;
            tmp_expression_value_21 = BUILTIN_TYPE1(tmp_type_arg_6);
            assert(!(tmp_expression_value_21 == NULL));
            tmp_tuple_element_12 = LOOKUP_ATTRIBUTE(tmp_expression_value_21, mod_consts[91]);
            Py_DECREF(tmp_expression_value_21);
            if (tmp_tuple_element_12 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 95;

                goto tuple_build_exception_4;
            }
            PyTuple_SET_ITEM(tmp_right_value_3, 1, tmp_tuple_element_12);
        }
        goto tuple_build_noexception_4;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_4:;
        Py_DECREF(tmp_right_value_3);
        goto try_except_handler_8;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_4:;
        tmp_raise_value_3 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_3, tmp_right_value_3);
        Py_DECREF(tmp_right_value_3);
        if (tmp_raise_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_8;
        }
        exception_type = tmp_raise_type_3;
        Py_INCREF(tmp_raise_type_3);
        exception_value = tmp_raise_value_3;
        exception_lineno = 95;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_8;
    }
    branch_no_11:;
    goto branch_end_10;
    branch_no_10:;
    {
        PyObject *tmp_assign_source_43;
        tmp_assign_source_43 = PyDict_New();
        assert(tmp_class_creation_3__prepared == NULL);
        tmp_class_creation_3__prepared = tmp_assign_source_43;
    }
    branch_end_10:;
    {
        PyObject *tmp_assign_source_44;
        PyObject *tmp_called_value_8;
        PyObject *tmp_called_value_9;
        PyObject *tmp_args_value_6;
        PyObject *tmp_tuple_element_13;
        PyObject *tmp_expression_value_22;
        PyObject *tmp_kwargs_value_6;
        PyObject *tmp_args_element_value_2;
        tmp_called_value_9 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_9 == NULL)) {
            tmp_called_value_9 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 94;

            goto try_except_handler_8;
        }
        tmp_expression_value_22 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[19]);

        if (unlikely(tmp_expression_value_22 == NULL)) {
            tmp_expression_value_22 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[19]);
        }

        if (tmp_expression_value_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 94;

            goto try_except_handler_8;
        }
        tmp_tuple_element_13 = LOOKUP_ATTRIBUTE(tmp_expression_value_22, mod_consts[103]);
        if (tmp_tuple_element_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 94;

            goto try_except_handler_8;
        }
        tmp_args_value_6 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_6, 0, tmp_tuple_element_13);
        tmp_kwargs_value_6 = PyDict_Copy(mod_consts[104]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 94;
        tmp_called_value_8 = CALL_FUNCTION(tmp_called_value_9, tmp_args_value_6, tmp_kwargs_value_6);
        Py_DECREF(tmp_args_value_6);
        Py_DECREF(tmp_kwargs_value_6);
        if (tmp_called_value_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 94;

            goto try_except_handler_8;
        }
        {
            PyObject *tmp_set_locals_3;
            CHECK_OBJECT(tmp_class_creation_3__prepared);
            tmp_set_locals_3 = tmp_class_creation_3__prepared;
            locals_numba$core$typing$randomdecl$$$class__3_Random_getrandbits_95 = tmp_set_locals_3;
            Py_INCREF(tmp_set_locals_3);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[93];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__3_Random_getrandbits_95, mod_consts[94], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_10;
        }
        tmp_dictset_value = mod_consts[102];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__3_Random_getrandbits_95, mod_consts[96], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_10;
        }
        if (isFrameUnusable(cache_frame_91c2e33dd63bd4515f5854d1d01602d0_4)) {
            Py_XDECREF(cache_frame_91c2e33dd63bd4515f5854d1d01602d0_4);

#if _DEBUG_REFCOUNTS
            if (cache_frame_91c2e33dd63bd4515f5854d1d01602d0_4 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_91c2e33dd63bd4515f5854d1d01602d0_4 = MAKE_FUNCTION_FRAME(codeobj_91c2e33dd63bd4515f5854d1d01602d0, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_91c2e33dd63bd4515f5854d1d01602d0_4->m_type_description == NULL);
        frame_91c2e33dd63bd4515f5854d1d01602d0_4 = cache_frame_91c2e33dd63bd4515f5854d1d01602d0_4;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_91c2e33dd63bd4515f5854d1d01602d0_4);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_91c2e33dd63bd4515f5854d1d01602d0_4) == 2); // Frame stack

        // Framed code:
        {
            PyObject *tmp_list_element_2;
            PyObject *tmp_called_value_10;
            PyObject *tmp_args_element_value_3;
            PyObject *tmp_expression_value_23;
            PyObject *tmp_args_element_value_4;
            PyObject *tmp_expression_value_24;
            tmp_called_value_10 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__3_Random_getrandbits_95, mod_consts[25]);

            if (tmp_called_value_10 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_value_10 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[25]);

                    if (unlikely(tmp_called_value_10 == NULL)) {
                        tmp_called_value_10 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[25]);
                    }

                    if (tmp_called_value_10 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 96;
                        type_description_2 = "o";
                        goto frame_exception_exit_4;
                    }
                    Py_INCREF(tmp_called_value_10);
                } else {
                    goto frame_exception_exit_4;
                }
            }

            tmp_expression_value_23 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__3_Random_getrandbits_95, mod_consts[0]);

            if (tmp_expression_value_23 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_23 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[0]);

                    if (unlikely(tmp_expression_value_23 == NULL)) {
                        tmp_expression_value_23 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[0]);
                    }

                    if (tmp_expression_value_23 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_10);

                        exception_lineno = 96;
                        type_description_2 = "o";
                        goto frame_exception_exit_4;
                    }
                    Py_INCREF(tmp_expression_value_23);
                } else {
                    goto frame_exception_exit_4;
                }
            }

            tmp_args_element_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_23, mod_consts[105]);
            Py_DECREF(tmp_expression_value_23);
            if (tmp_args_element_value_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_10);

                exception_lineno = 96;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_expression_value_24 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__3_Random_getrandbits_95, mod_consts[0]);

            if (tmp_expression_value_24 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_24 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[0]);

                    if (unlikely(tmp_expression_value_24 == NULL)) {
                        tmp_expression_value_24 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[0]);
                    }

                    if (tmp_expression_value_24 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_10);
                        Py_DECREF(tmp_args_element_value_3);

                        exception_lineno = 96;
                        type_description_2 = "o";
                        goto frame_exception_exit_4;
                    }
                    Py_INCREF(tmp_expression_value_24);
                } else {
                    goto frame_exception_exit_4;
                }
            }

            tmp_args_element_value_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_24, mod_consts[106]);
            Py_DECREF(tmp_expression_value_24);
            if (tmp_args_element_value_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_10);
                Py_DECREF(tmp_args_element_value_3);

                exception_lineno = 96;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            frame_91c2e33dd63bd4515f5854d1d01602d0_4->m_frame.f_lineno = 96;
            {
                PyObject *call_args[] = {tmp_args_element_value_3, tmp_args_element_value_4};
                tmp_list_element_2 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_10, call_args);
            }

            Py_DECREF(tmp_called_value_10);
            Py_DECREF(tmp_args_element_value_3);
            Py_DECREF(tmp_args_element_value_4);
            if (tmp_list_element_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 96;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
            tmp_dictset_value = PyList_New(1);
            PyList_SET_ITEM(tmp_dictset_value, 0, tmp_list_element_2);
            tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__3_Random_getrandbits_95, mod_consts[30], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 96;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_91c2e33dd63bd4515f5854d1d01602d0_4);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_3;

        frame_exception_exit_4:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_91c2e33dd63bd4515f5854d1d01602d0_4);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_91c2e33dd63bd4515f5854d1d01602d0_4, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_91c2e33dd63bd4515f5854d1d01602d0_4->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_91c2e33dd63bd4515f5854d1d01602d0_4, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_91c2e33dd63bd4515f5854d1d01602d0_4,
            type_description_2,
            outline_2_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_91c2e33dd63bd4515f5854d1d01602d0_4 == cache_frame_91c2e33dd63bd4515f5854d1d01602d0_4) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_91c2e33dd63bd4515f5854d1d01602d0_4);
            cache_frame_91c2e33dd63bd4515f5854d1d01602d0_4 = NULL;
        }

        assertFrameObject(frame_91c2e33dd63bd4515f5854d1d01602d0_4);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_3;

        frame_no_exception_3:;
        goto skip_nested_handling_3;
        nested_frame_exit_3:;

        goto try_except_handler_10;
        skip_nested_handling_3:;
        {
            nuitka_bool tmp_condition_result_18;
            PyObject *tmp_cmp_expr_left_3;
            PyObject *tmp_cmp_expr_right_3;
            CHECK_OBJECT(tmp_class_creation_3__bases);
            tmp_cmp_expr_left_3 = tmp_class_creation_3__bases;
            CHECK_OBJECT(tmp_class_creation_3__bases_orig);
            tmp_cmp_expr_right_3 = tmp_class_creation_3__bases_orig;
            tmp_condition_result_18 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_3, tmp_cmp_expr_right_3);
            if (tmp_condition_result_18 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 95;

                goto try_except_handler_10;
            }
            if (tmp_condition_result_18 == NUITKA_BOOL_TRUE) {
                goto branch_yes_12;
            } else {
                goto branch_no_12;
            }
            assert(tmp_condition_result_18 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_12:;
        CHECK_OBJECT(tmp_class_creation_3__bases_orig);
        tmp_dictset_value = tmp_class_creation_3__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__3_Random_getrandbits_95, mod_consts[98], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_10;
        }
        branch_no_12:;
        {
            PyObject *tmp_assign_source_45;
            PyObject *tmp_called_value_11;
            PyObject *tmp_args_value_7;
            PyObject *tmp_tuple_element_14;
            PyObject *tmp_kwargs_value_7;
            CHECK_OBJECT(tmp_class_creation_3__metaclass);
            tmp_called_value_11 = tmp_class_creation_3__metaclass;
            tmp_tuple_element_14 = mod_consts[102];
            tmp_args_value_7 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_7, 0, tmp_tuple_element_14);
            CHECK_OBJECT(tmp_class_creation_3__bases);
            tmp_tuple_element_14 = tmp_class_creation_3__bases;
            PyTuple_SET_ITEM0(tmp_args_value_7, 1, tmp_tuple_element_14);
            tmp_tuple_element_14 = locals_numba$core$typing$randomdecl$$$class__3_Random_getrandbits_95;
            PyTuple_SET_ITEM0(tmp_args_value_7, 2, tmp_tuple_element_14);
            CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
            tmp_kwargs_value_7 = tmp_class_creation_3__class_decl_dict;
            frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 95;
            tmp_assign_source_45 = CALL_FUNCTION(tmp_called_value_11, tmp_args_value_7, tmp_kwargs_value_7);
            Py_DECREF(tmp_args_value_7);
            if (tmp_assign_source_45 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 95;

                goto try_except_handler_10;
            }
            assert(outline_2_var___class__ == NULL);
            outline_2_var___class__ = tmp_assign_source_45;
        }
        CHECK_OBJECT(outline_2_var___class__);
        tmp_args_element_value_2 = outline_2_var___class__;
        Py_INCREF(tmp_args_element_value_2);
        goto try_return_handler_10;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_10:;
        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__3_Random_getrandbits_95);
        locals_numba$core$typing$randomdecl$$$class__3_Random_getrandbits_95 = NULL;
        goto try_return_handler_9;
        // Exception handler code:
        try_except_handler_10:;
        exception_keeper_type_8 = exception_type;
        exception_keeper_value_8 = exception_value;
        exception_keeper_tb_8 = exception_tb;
        exception_keeper_lineno_8 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__3_Random_getrandbits_95);
        locals_numba$core$typing$randomdecl$$$class__3_Random_getrandbits_95 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;
        exception_lineno = exception_keeper_lineno_8;

        goto try_except_handler_9;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_9:;
        CHECK_OBJECT(outline_2_var___class__);
        Py_DECREF(outline_2_var___class__);
        outline_2_var___class__ = NULL;
        goto outline_result_3;
        // Exception handler code:
        try_except_handler_9:;
        exception_keeper_type_9 = exception_type;
        exception_keeper_value_9 = exception_value;
        exception_keeper_tb_9 = exception_tb;
        exception_keeper_lineno_9 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_9;
        exception_value = exception_keeper_value_9;
        exception_tb = exception_keeper_tb_9;
        exception_lineno = exception_keeper_lineno_9;

        goto outline_exception_3;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_3:;
        exception_lineno = 95;
        goto try_except_handler_8;
        outline_result_3:;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 94;
        tmp_assign_source_44 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_8, tmp_args_element_value_2);
        Py_DECREF(tmp_called_value_8);
        Py_DECREF(tmp_args_element_value_2);
        if (tmp_assign_source_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 94;

            goto try_except_handler_8;
        }
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[102], tmp_assign_source_44);
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_3__bases_orig);
    tmp_class_creation_3__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_3__bases);
    tmp_class_creation_3__bases = NULL;
    Py_XDECREF(tmp_class_creation_3__class_decl_dict);
    tmp_class_creation_3__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_3__metaclass);
    tmp_class_creation_3__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_3__prepared);
    tmp_class_creation_3__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_10;
    exception_value = exception_keeper_value_10;
    exception_tb = exception_keeper_tb_10;
    exception_lineno = exception_keeper_lineno_10;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    CHECK_OBJECT(tmp_class_creation_3__bases_orig);
    Py_DECREF(tmp_class_creation_3__bases_orig);
    tmp_class_creation_3__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_3__bases);
    Py_DECREF(tmp_class_creation_3__bases);
    tmp_class_creation_3__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
    Py_DECREF(tmp_class_creation_3__class_decl_dict);
    tmp_class_creation_3__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_3__metaclass);
    Py_DECREF(tmp_class_creation_3__metaclass);
    tmp_class_creation_3__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_3__prepared);
    Py_DECREF(tmp_class_creation_3__prepared);
    tmp_class_creation_3__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_46;
        PyObject *tmp_tuple_element_15;
        tmp_tuple_element_15 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[99]);

        if (unlikely(tmp_tuple_element_15 == NULL)) {
            tmp_tuple_element_15 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[99]);
        }

        if (tmp_tuple_element_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 100;

            goto try_except_handler_11;
        }
        tmp_assign_source_46 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_46, 0, tmp_tuple_element_15);
        assert(tmp_class_creation_4__bases_orig == NULL);
        tmp_class_creation_4__bases_orig = tmp_assign_source_46;
    }
    {
        PyObject *tmp_assign_source_47;
        PyObject *tmp_dircall_arg1_4;
        CHECK_OBJECT(tmp_class_creation_4__bases_orig);
        tmp_dircall_arg1_4 = tmp_class_creation_4__bases_orig;
        Py_INCREF(tmp_dircall_arg1_4);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_4};
            tmp_assign_source_47 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_47 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 100;

            goto try_except_handler_11;
        }
        assert(tmp_class_creation_4__bases == NULL);
        tmp_class_creation_4__bases = tmp_assign_source_47;
    }
    {
        PyObject *tmp_assign_source_48;
        tmp_assign_source_48 = PyDict_New();
        assert(tmp_class_creation_4__class_decl_dict == NULL);
        tmp_class_creation_4__class_decl_dict = tmp_assign_source_48;
    }
    {
        PyObject *tmp_assign_source_49;
        PyObject *tmp_metaclass_value_4;
        bool tmp_condition_result_19;
        PyObject *tmp_key_value_10;
        PyObject *tmp_dict_arg_value_10;
        PyObject *tmp_dict_arg_value_11;
        PyObject *tmp_key_value_11;
        nuitka_bool tmp_condition_result_20;
        int tmp_truth_name_4;
        PyObject *tmp_type_arg_7;
        PyObject *tmp_expression_value_25;
        PyObject *tmp_subscript_value_4;
        PyObject *tmp_bases_value_4;
        tmp_key_value_10 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
        tmp_dict_arg_value_10 = tmp_class_creation_4__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_10, tmp_key_value_10);
        assert(!(tmp_res == -1));
        tmp_condition_result_19 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_19 != false) {
            goto condexpr_true_7;
        } else {
            goto condexpr_false_7;
        }
        condexpr_true_7:;
        CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
        tmp_dict_arg_value_11 = tmp_class_creation_4__class_decl_dict;
        tmp_key_value_11 = mod_consts[87];
        tmp_metaclass_value_4 = DICT_GET_ITEM0(tmp_dict_arg_value_11, tmp_key_value_11);
        if (tmp_metaclass_value_4 == NULL) {
            tmp_metaclass_value_4 = Py_None;
        }
        assert(!(tmp_metaclass_value_4 == NULL));
        Py_INCREF(tmp_metaclass_value_4);
        goto condexpr_end_7;
        condexpr_false_7:;
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_truth_name_4 = CHECK_IF_TRUE(tmp_class_creation_4__bases);
        if (tmp_truth_name_4 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 100;

            goto try_except_handler_11;
        }
        tmp_condition_result_20 = tmp_truth_name_4 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_20 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_8;
        } else {
            goto condexpr_false_8;
        }
        condexpr_true_8:;
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_expression_value_25 = tmp_class_creation_4__bases;
        tmp_subscript_value_4 = mod_consts[13];
        tmp_type_arg_7 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_25, tmp_subscript_value_4, 0);
        if (tmp_type_arg_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 100;

            goto try_except_handler_11;
        }
        tmp_metaclass_value_4 = BUILTIN_TYPE1(tmp_type_arg_7);
        Py_DECREF(tmp_type_arg_7);
        if (tmp_metaclass_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 100;

            goto try_except_handler_11;
        }
        goto condexpr_end_8;
        condexpr_false_8:;
        tmp_metaclass_value_4 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_4);
        condexpr_end_8:;
        condexpr_end_7:;
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_bases_value_4 = tmp_class_creation_4__bases;
        tmp_assign_source_49 = SELECT_METACLASS(tmp_metaclass_value_4, tmp_bases_value_4);
        Py_DECREF(tmp_metaclass_value_4);
        if (tmp_assign_source_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 100;

            goto try_except_handler_11;
        }
        assert(tmp_class_creation_4__metaclass == NULL);
        tmp_class_creation_4__metaclass = tmp_assign_source_49;
    }
    {
        bool tmp_condition_result_21;
        PyObject *tmp_key_value_12;
        PyObject *tmp_dict_arg_value_12;
        tmp_key_value_12 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
        tmp_dict_arg_value_12 = tmp_class_creation_4__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_12, tmp_key_value_12);
        assert(!(tmp_res == -1));
        tmp_condition_result_21 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_21 != false) {
            goto branch_yes_13;
        } else {
            goto branch_no_13;
        }
    }
    branch_yes_13:;
    CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_4__class_decl_dict;
    tmp_dictdel_key = mod_consts[87];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 100;

        goto try_except_handler_11;
    }
    branch_no_13:;
    {
        nuitka_bool tmp_condition_result_22;
        PyObject *tmp_expression_value_26;
        CHECK_OBJECT(tmp_class_creation_4__metaclass);
        tmp_expression_value_26 = tmp_class_creation_4__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_26, mod_consts[88]);
        tmp_condition_result_22 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_22 == NUITKA_BOOL_TRUE) {
            goto branch_yes_14;
        } else {
            goto branch_no_14;
        }
    }
    branch_yes_14:;
    {
        PyObject *tmp_assign_source_50;
        PyObject *tmp_called_value_12;
        PyObject *tmp_expression_value_27;
        PyObject *tmp_args_value_8;
        PyObject *tmp_tuple_element_16;
        PyObject *tmp_kwargs_value_8;
        CHECK_OBJECT(tmp_class_creation_4__metaclass);
        tmp_expression_value_27 = tmp_class_creation_4__metaclass;
        tmp_called_value_12 = LOOKUP_ATTRIBUTE(tmp_expression_value_27, mod_consts[88]);
        if (tmp_called_value_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 100;

            goto try_except_handler_11;
        }
        tmp_tuple_element_16 = mod_consts[107];
        tmp_args_value_8 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_8, 0, tmp_tuple_element_16);
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_tuple_element_16 = tmp_class_creation_4__bases;
        PyTuple_SET_ITEM0(tmp_args_value_8, 1, tmp_tuple_element_16);
        CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
        tmp_kwargs_value_8 = tmp_class_creation_4__class_decl_dict;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 100;
        tmp_assign_source_50 = CALL_FUNCTION(tmp_called_value_12, tmp_args_value_8, tmp_kwargs_value_8);
        Py_DECREF(tmp_called_value_12);
        Py_DECREF(tmp_args_value_8);
        if (tmp_assign_source_50 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 100;

            goto try_except_handler_11;
        }
        assert(tmp_class_creation_4__prepared == NULL);
        tmp_class_creation_4__prepared = tmp_assign_source_50;
    }
    {
        bool tmp_condition_result_23;
        PyObject *tmp_operand_value_4;
        PyObject *tmp_expression_value_28;
        CHECK_OBJECT(tmp_class_creation_4__prepared);
        tmp_expression_value_28 = tmp_class_creation_4__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_28, mod_consts[89]);
        tmp_operand_value_4 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_4);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 100;

            goto try_except_handler_11;
        }
        tmp_condition_result_23 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_23 != false) {
            goto branch_yes_15;
        } else {
            goto branch_no_15;
        }
    }
    branch_yes_15:;
    {
        PyObject *tmp_raise_type_4;
        PyObject *tmp_raise_value_4;
        PyObject *tmp_left_value_4;
        PyObject *tmp_right_value_4;
        PyObject *tmp_tuple_element_17;
        PyObject *tmp_getattr_target_4;
        PyObject *tmp_getattr_attr_4;
        PyObject *tmp_getattr_default_4;
        tmp_raise_type_4 = PyExc_TypeError;
        tmp_left_value_4 = mod_consts[90];
        CHECK_OBJECT(tmp_class_creation_4__metaclass);
        tmp_getattr_target_4 = tmp_class_creation_4__metaclass;
        tmp_getattr_attr_4 = mod_consts[91];
        tmp_getattr_default_4 = mod_consts[92];
        tmp_tuple_element_17 = BUILTIN_GETATTR(tmp_getattr_target_4, tmp_getattr_attr_4, tmp_getattr_default_4);
        if (tmp_tuple_element_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 100;

            goto try_except_handler_11;
        }
        tmp_right_value_4 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_29;
            PyObject *tmp_type_arg_8;
            PyTuple_SET_ITEM(tmp_right_value_4, 0, tmp_tuple_element_17);
            CHECK_OBJECT(tmp_class_creation_4__prepared);
            tmp_type_arg_8 = tmp_class_creation_4__prepared;
            tmp_expression_value_29 = BUILTIN_TYPE1(tmp_type_arg_8);
            assert(!(tmp_expression_value_29 == NULL));
            tmp_tuple_element_17 = LOOKUP_ATTRIBUTE(tmp_expression_value_29, mod_consts[91]);
            Py_DECREF(tmp_expression_value_29);
            if (tmp_tuple_element_17 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 100;

                goto tuple_build_exception_5;
            }
            PyTuple_SET_ITEM(tmp_right_value_4, 1, tmp_tuple_element_17);
        }
        goto tuple_build_noexception_5;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_5:;
        Py_DECREF(tmp_right_value_4);
        goto try_except_handler_11;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_5:;
        tmp_raise_value_4 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_4, tmp_right_value_4);
        Py_DECREF(tmp_right_value_4);
        if (tmp_raise_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 100;

            goto try_except_handler_11;
        }
        exception_type = tmp_raise_type_4;
        Py_INCREF(tmp_raise_type_4);
        exception_value = tmp_raise_value_4;
        exception_lineno = 100;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_11;
    }
    branch_no_15:;
    goto branch_end_14;
    branch_no_14:;
    {
        PyObject *tmp_assign_source_51;
        tmp_assign_source_51 = PyDict_New();
        assert(tmp_class_creation_4__prepared == NULL);
        tmp_class_creation_4__prepared = tmp_assign_source_51;
    }
    branch_end_14:;
    {
        PyObject *tmp_assign_source_52;
        PyObject *tmp_called_value_13;
        PyObject *tmp_called_value_14;
        PyObject *tmp_args_value_9;
        PyObject *tmp_tuple_element_18;
        PyObject *tmp_expression_value_30;
        PyObject *tmp_kwargs_value_9;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_called_value_15;
        PyObject *tmp_called_value_16;
        PyObject *tmp_args_value_10;
        PyObject *tmp_tuple_element_19;
        PyObject *tmp_expression_value_31;
        PyObject *tmp_expression_value_32;
        PyObject *tmp_kwargs_value_10;
        PyObject *tmp_args_element_value_6;
        tmp_called_value_14 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_14 == NULL)) {
            tmp_called_value_14 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 98;

            goto try_except_handler_11;
        }
        tmp_expression_value_30 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[19]);

        if (unlikely(tmp_expression_value_30 == NULL)) {
            tmp_expression_value_30 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[19]);
        }

        if (tmp_expression_value_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 98;

            goto try_except_handler_11;
        }
        tmp_tuple_element_18 = LOOKUP_ATTRIBUTE(tmp_expression_value_30, mod_consts[19]);
        if (tmp_tuple_element_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 98;

            goto try_except_handler_11;
        }
        tmp_args_value_9 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_9, 0, tmp_tuple_element_18);
        tmp_kwargs_value_9 = PyDict_Copy(mod_consts[108]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 98;
        tmp_called_value_13 = CALL_FUNCTION(tmp_called_value_14, tmp_args_value_9, tmp_kwargs_value_9);
        Py_DECREF(tmp_args_value_9);
        Py_DECREF(tmp_kwargs_value_9);
        if (tmp_called_value_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 98;

            goto try_except_handler_11;
        }
        tmp_called_value_16 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_16 == NULL)) {
            tmp_called_value_16 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_13);

            exception_lineno = 99;

            goto try_except_handler_11;
        }
        tmp_expression_value_32 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_32 == NULL)) {
            tmp_expression_value_32 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_32 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_13);

            exception_lineno = 99;

            goto try_except_handler_11;
        }
        tmp_expression_value_31 = LOOKUP_ATTRIBUTE(tmp_expression_value_32, mod_consts[19]);
        if (tmp_expression_value_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_13);

            exception_lineno = 99;

            goto try_except_handler_11;
        }
        tmp_tuple_element_19 = LOOKUP_ATTRIBUTE(tmp_expression_value_31, mod_consts[19]);
        Py_DECREF(tmp_expression_value_31);
        if (tmp_tuple_element_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_13);

            exception_lineno = 99;

            goto try_except_handler_11;
        }
        tmp_args_value_10 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_10, 0, tmp_tuple_element_19);
        tmp_kwargs_value_10 = PyDict_Copy(mod_consts[109]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 99;
        tmp_called_value_15 = CALL_FUNCTION(tmp_called_value_16, tmp_args_value_10, tmp_kwargs_value_10);
        Py_DECREF(tmp_args_value_10);
        Py_DECREF(tmp_kwargs_value_10);
        if (tmp_called_value_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_13);

            exception_lineno = 99;

            goto try_except_handler_11;
        }
        {
            PyObject *tmp_set_locals_4;
            CHECK_OBJECT(tmp_class_creation_4__prepared);
            tmp_set_locals_4 = tmp_class_creation_4__prepared;
            locals_numba$core$typing$randomdecl$$$class__4_Random_random_100 = tmp_set_locals_4;
            Py_INCREF(tmp_set_locals_4);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[93];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__4_Random_random_100, mod_consts[94], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 100;

            goto try_except_handler_13;
        }
        tmp_dictset_value = mod_consts[107];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__4_Random_random_100, mod_consts[96], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 100;

            goto try_except_handler_13;
        }
        if (isFrameUnusable(cache_frame_243fba22b9d32a739f1ee1efc092236e_5)) {
            Py_XDECREF(cache_frame_243fba22b9d32a739f1ee1efc092236e_5);

#if _DEBUG_REFCOUNTS
            if (cache_frame_243fba22b9d32a739f1ee1efc092236e_5 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_243fba22b9d32a739f1ee1efc092236e_5 = MAKE_FUNCTION_FRAME(codeobj_243fba22b9d32a739f1ee1efc092236e, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_243fba22b9d32a739f1ee1efc092236e_5->m_type_description == NULL);
        frame_243fba22b9d32a739f1ee1efc092236e_5 = cache_frame_243fba22b9d32a739f1ee1efc092236e_5;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_243fba22b9d32a739f1ee1efc092236e_5);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_243fba22b9d32a739f1ee1efc092236e_5) == 2); // Frame stack

        // Framed code:
        {
            PyObject *tmp_list_element_3;
            PyObject *tmp_called_value_17;
            PyObject *tmp_args_element_value_7;
            PyObject *tmp_expression_value_33;
            tmp_called_value_17 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__4_Random_random_100, mod_consts[25]);

            if (tmp_called_value_17 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_value_17 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[25]);

                    if (unlikely(tmp_called_value_17 == NULL)) {
                        tmp_called_value_17 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[25]);
                    }

                    if (tmp_called_value_17 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 101;
                        type_description_2 = "o";
                        goto frame_exception_exit_5;
                    }
                    Py_INCREF(tmp_called_value_17);
                } else {
                    goto frame_exception_exit_5;
                }
            }

            tmp_expression_value_33 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__4_Random_random_100, mod_consts[0]);

            if (tmp_expression_value_33 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_33 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[0]);

                    if (unlikely(tmp_expression_value_33 == NULL)) {
                        tmp_expression_value_33 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[0]);
                    }

                    if (tmp_expression_value_33 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_17);

                        exception_lineno = 101;
                        type_description_2 = "o";
                        goto frame_exception_exit_5;
                    }
                    Py_INCREF(tmp_expression_value_33);
                } else {
                    goto frame_exception_exit_5;
                }
            }

            tmp_args_element_value_7 = LOOKUP_ATTRIBUTE(tmp_expression_value_33, mod_consts[85]);
            Py_DECREF(tmp_expression_value_33);
            if (tmp_args_element_value_7 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_17);

                exception_lineno = 101;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
            frame_243fba22b9d32a739f1ee1efc092236e_5->m_frame.f_lineno = 101;
            tmp_list_element_3 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_17, tmp_args_element_value_7);
            Py_DECREF(tmp_called_value_17);
            Py_DECREF(tmp_args_element_value_7);
            if (tmp_list_element_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 101;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
            tmp_dictset_value = PyList_New(1);
            PyList_SET_ITEM(tmp_dictset_value, 0, tmp_list_element_3);
            tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__4_Random_random_100, mod_consts[30], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 101;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__4_generic();

        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__4_Random_random_100, mod_consts[110], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 103;
            type_description_2 = "o";
            goto frame_exception_exit_5;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_243fba22b9d32a739f1ee1efc092236e_5);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_4;

        frame_exception_exit_5:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_243fba22b9d32a739f1ee1efc092236e_5);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_243fba22b9d32a739f1ee1efc092236e_5, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_243fba22b9d32a739f1ee1efc092236e_5->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_243fba22b9d32a739f1ee1efc092236e_5, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_243fba22b9d32a739f1ee1efc092236e_5,
            type_description_2,
            outline_3_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_243fba22b9d32a739f1ee1efc092236e_5 == cache_frame_243fba22b9d32a739f1ee1efc092236e_5) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_243fba22b9d32a739f1ee1efc092236e_5);
            cache_frame_243fba22b9d32a739f1ee1efc092236e_5 = NULL;
        }

        assertFrameObject(frame_243fba22b9d32a739f1ee1efc092236e_5);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_4;

        frame_no_exception_4:;
        goto skip_nested_handling_4;
        nested_frame_exit_4:;

        goto try_except_handler_13;
        skip_nested_handling_4:;
        {
            nuitka_bool tmp_condition_result_24;
            PyObject *tmp_cmp_expr_left_4;
            PyObject *tmp_cmp_expr_right_4;
            CHECK_OBJECT(tmp_class_creation_4__bases);
            tmp_cmp_expr_left_4 = tmp_class_creation_4__bases;
            CHECK_OBJECT(tmp_class_creation_4__bases_orig);
            tmp_cmp_expr_right_4 = tmp_class_creation_4__bases_orig;
            tmp_condition_result_24 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_4, tmp_cmp_expr_right_4);
            if (tmp_condition_result_24 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 100;

                goto try_except_handler_13;
            }
            if (tmp_condition_result_24 == NUITKA_BOOL_TRUE) {
                goto branch_yes_16;
            } else {
                goto branch_no_16;
            }
            assert(tmp_condition_result_24 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_16:;
        CHECK_OBJECT(tmp_class_creation_4__bases_orig);
        tmp_dictset_value = tmp_class_creation_4__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__4_Random_random_100, mod_consts[98], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 100;

            goto try_except_handler_13;
        }
        branch_no_16:;
        {
            PyObject *tmp_assign_source_53;
            PyObject *tmp_called_value_18;
            PyObject *tmp_args_value_11;
            PyObject *tmp_tuple_element_20;
            PyObject *tmp_kwargs_value_11;
            CHECK_OBJECT(tmp_class_creation_4__metaclass);
            tmp_called_value_18 = tmp_class_creation_4__metaclass;
            tmp_tuple_element_20 = mod_consts[107];
            tmp_args_value_11 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_11, 0, tmp_tuple_element_20);
            CHECK_OBJECT(tmp_class_creation_4__bases);
            tmp_tuple_element_20 = tmp_class_creation_4__bases;
            PyTuple_SET_ITEM0(tmp_args_value_11, 1, tmp_tuple_element_20);
            tmp_tuple_element_20 = locals_numba$core$typing$randomdecl$$$class__4_Random_random_100;
            PyTuple_SET_ITEM0(tmp_args_value_11, 2, tmp_tuple_element_20);
            CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
            tmp_kwargs_value_11 = tmp_class_creation_4__class_decl_dict;
            frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 100;
            tmp_assign_source_53 = CALL_FUNCTION(tmp_called_value_18, tmp_args_value_11, tmp_kwargs_value_11);
            Py_DECREF(tmp_args_value_11);
            if (tmp_assign_source_53 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 100;

                goto try_except_handler_13;
            }
            assert(outline_3_var___class__ == NULL);
            outline_3_var___class__ = tmp_assign_source_53;
        }
        CHECK_OBJECT(outline_3_var___class__);
        tmp_args_element_value_6 = outline_3_var___class__;
        Py_INCREF(tmp_args_element_value_6);
        goto try_return_handler_13;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_13:;
        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__4_Random_random_100);
        locals_numba$core$typing$randomdecl$$$class__4_Random_random_100 = NULL;
        goto try_return_handler_12;
        // Exception handler code:
        try_except_handler_13:;
        exception_keeper_type_11 = exception_type;
        exception_keeper_value_11 = exception_value;
        exception_keeper_tb_11 = exception_tb;
        exception_keeper_lineno_11 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__4_Random_random_100);
        locals_numba$core$typing$randomdecl$$$class__4_Random_random_100 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_11;
        exception_value = exception_keeper_value_11;
        exception_tb = exception_keeper_tb_11;
        exception_lineno = exception_keeper_lineno_11;

        goto try_except_handler_12;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_12:;
        CHECK_OBJECT(outline_3_var___class__);
        Py_DECREF(outline_3_var___class__);
        outline_3_var___class__ = NULL;
        goto outline_result_4;
        // Exception handler code:
        try_except_handler_12:;
        exception_keeper_type_12 = exception_type;
        exception_keeper_value_12 = exception_value;
        exception_keeper_tb_12 = exception_tb;
        exception_keeper_lineno_12 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_12;
        exception_value = exception_keeper_value_12;
        exception_tb = exception_keeper_tb_12;
        exception_lineno = exception_keeper_lineno_12;

        goto outline_exception_4;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_4:;
        exception_lineno = 100;
        goto try_except_handler_11;
        outline_result_4:;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 99;
        tmp_args_element_value_5 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_15, tmp_args_element_value_6);
        Py_DECREF(tmp_called_value_15);
        Py_DECREF(tmp_args_element_value_6);
        if (tmp_args_element_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_13);

            exception_lineno = 99;

            goto try_except_handler_11;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 98;
        tmp_assign_source_52 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_13, tmp_args_element_value_5);
        Py_DECREF(tmp_called_value_13);
        Py_DECREF(tmp_args_element_value_5);
        if (tmp_assign_source_52 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 98;

            goto try_except_handler_11;
        }
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[107], tmp_assign_source_52);
    }
    goto try_end_5;
    // Exception handler code:
    try_except_handler_11:;
    exception_keeper_type_13 = exception_type;
    exception_keeper_value_13 = exception_value;
    exception_keeper_tb_13 = exception_tb;
    exception_keeper_lineno_13 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_4__bases_orig);
    tmp_class_creation_4__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_4__bases);
    tmp_class_creation_4__bases = NULL;
    Py_XDECREF(tmp_class_creation_4__class_decl_dict);
    tmp_class_creation_4__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_4__metaclass);
    tmp_class_creation_4__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_4__prepared);
    tmp_class_creation_4__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_13;
    exception_value = exception_keeper_value_13;
    exception_tb = exception_keeper_tb_13;
    exception_lineno = exception_keeper_lineno_13;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    CHECK_OBJECT(tmp_class_creation_4__bases_orig);
    Py_DECREF(tmp_class_creation_4__bases_orig);
    tmp_class_creation_4__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_4__bases);
    Py_DECREF(tmp_class_creation_4__bases);
    tmp_class_creation_4__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
    Py_DECREF(tmp_class_creation_4__class_decl_dict);
    tmp_class_creation_4__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_4__metaclass);
    Py_DECREF(tmp_class_creation_4__metaclass);
    tmp_class_creation_4__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_4__prepared);
    Py_DECREF(tmp_class_creation_4__prepared);
    tmp_class_creation_4__prepared = NULL;
    {
        nuitka_bool tmp_condition_result_25;
        PyObject *tmp_cmp_expr_left_5;
        PyObject *tmp_cmp_expr_right_5;
        tmp_cmp_expr_left_5 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[74]);

        if (unlikely(tmp_cmp_expr_left_5 == NULL)) {
            tmp_cmp_expr_left_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[74]);
        }

        if (tmp_cmp_expr_left_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 108;

            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_5 = mod_consts[112];
        tmp_condition_result_25 = RICH_COMPARE_GE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_5, tmp_cmp_expr_right_5);
        if (tmp_condition_result_25 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 108;

            goto frame_exception_exit_1;
        }
        if (tmp_condition_result_25 == NUITKA_BOOL_TRUE) {
            goto branch_yes_17;
        } else {
            goto branch_no_17;
        }
        assert(tmp_condition_result_25 != NUITKA_BOOL_UNASSIGNED);
    }
    branch_yes_17:;
    {
        PyObject *tmp_called_value_19;
        PyObject *tmp_called_value_20;
        PyObject *tmp_args_value_12;
        PyObject *tmp_tuple_element_21;
        PyObject *tmp_expression_value_34;
        PyObject *tmp_expression_value_35;
        PyObject *tmp_kwargs_value_12;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_8;
        tmp_called_value_20 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_20 == NULL)) {
            tmp_called_value_20 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 109;

            goto frame_exception_exit_1;
        }
        tmp_expression_value_35 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_35 == NULL)) {
            tmp_expression_value_35 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 110;

            goto frame_exception_exit_1;
        }
        tmp_expression_value_34 = LOOKUP_ATTRIBUTE(tmp_expression_value_35, mod_consts[19]);
        if (tmp_expression_value_34 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 110;

            goto frame_exception_exit_1;
        }
        tmp_tuple_element_21 = LOOKUP_ATTRIBUTE(tmp_expression_value_34, mod_consts[113]);
        Py_DECREF(tmp_expression_value_34);
        if (tmp_tuple_element_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 110;

            goto frame_exception_exit_1;
        }
        tmp_args_value_12 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_12, 0, tmp_tuple_element_21);
        tmp_kwargs_value_12 = PyDict_Copy(mod_consts[114]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 109;
        tmp_called_value_19 = CALL_FUNCTION(tmp_called_value_20, tmp_args_value_12, tmp_kwargs_value_12);
        Py_DECREF(tmp_args_value_12);
        Py_DECREF(tmp_kwargs_value_12);
        if (tmp_called_value_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 109;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_8 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[107]);

        if (unlikely(tmp_args_element_value_8 == NULL)) {
            tmp_args_element_value_8 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[107]);
        }

        if (tmp_args_element_value_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_19);

            exception_lineno = 112;

            goto frame_exception_exit_1;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 109;
        tmp_call_result_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_19, tmp_args_element_value_8);
        Py_DECREF(tmp_called_value_19);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 109;

            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_called_value_21;
        PyObject *tmp_called_value_22;
        PyObject *tmp_args_value_13;
        PyObject *tmp_tuple_element_22;
        PyObject *tmp_expression_value_36;
        PyObject *tmp_expression_value_37;
        PyObject *tmp_kwargs_value_13;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_value_9;
        tmp_called_value_22 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_22 == NULL)) {
            tmp_called_value_22 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 113;

            goto frame_exception_exit_1;
        }
        tmp_expression_value_37 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_37 == NULL)) {
            tmp_expression_value_37 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 114;

            goto frame_exception_exit_1;
        }
        tmp_expression_value_36 = LOOKUP_ATTRIBUTE(tmp_expression_value_37, mod_consts[19]);
        if (tmp_expression_value_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 114;

            goto frame_exception_exit_1;
        }
        tmp_tuple_element_22 = LOOKUP_ATTRIBUTE(tmp_expression_value_36, mod_consts[115]);
        Py_DECREF(tmp_expression_value_36);
        if (tmp_tuple_element_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 114;

            goto frame_exception_exit_1;
        }
        tmp_args_value_13 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_13, 0, tmp_tuple_element_22);
        tmp_kwargs_value_13 = PyDict_Copy(mod_consts[116]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 113;
        tmp_called_value_21 = CALL_FUNCTION(tmp_called_value_22, tmp_args_value_13, tmp_kwargs_value_13);
        Py_DECREF(tmp_args_value_13);
        Py_DECREF(tmp_kwargs_value_13);
        if (tmp_called_value_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 113;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_9 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[107]);

        if (unlikely(tmp_args_element_value_9 == NULL)) {
            tmp_args_element_value_9 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[107]);
        }

        if (tmp_args_element_value_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_21);

            exception_lineno = 116;

            goto frame_exception_exit_1;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 113;
        tmp_call_result_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_21, tmp_args_element_value_9);
        Py_DECREF(tmp_called_value_21);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 113;

            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    {
        PyObject *tmp_called_value_23;
        PyObject *tmp_called_value_24;
        PyObject *tmp_args_value_14;
        PyObject *tmp_tuple_element_23;
        PyObject *tmp_expression_value_38;
        PyObject *tmp_expression_value_39;
        PyObject *tmp_kwargs_value_14;
        PyObject *tmp_call_result_3;
        PyObject *tmp_args_element_value_10;
        tmp_called_value_24 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_24 == NULL)) {
            tmp_called_value_24 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 117;

            goto frame_exception_exit_1;
        }
        tmp_expression_value_39 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_39 == NULL)) {
            tmp_expression_value_39 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 118;

            goto frame_exception_exit_1;
        }
        tmp_expression_value_38 = LOOKUP_ATTRIBUTE(tmp_expression_value_39, mod_consts[19]);
        if (tmp_expression_value_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 118;

            goto frame_exception_exit_1;
        }
        tmp_tuple_element_23 = LOOKUP_ATTRIBUTE(tmp_expression_value_38, mod_consts[117]);
        Py_DECREF(tmp_expression_value_38);
        if (tmp_tuple_element_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 118;

            goto frame_exception_exit_1;
        }
        tmp_args_value_14 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_14, 0, tmp_tuple_element_23);
        tmp_kwargs_value_14 = PyDict_Copy(mod_consts[118]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 117;
        tmp_called_value_23 = CALL_FUNCTION(tmp_called_value_24, tmp_args_value_14, tmp_kwargs_value_14);
        Py_DECREF(tmp_args_value_14);
        Py_DECREF(tmp_kwargs_value_14);
        if (tmp_called_value_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 117;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_10 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[107]);

        if (unlikely(tmp_args_element_value_10 == NULL)) {
            tmp_args_element_value_10 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[107]);
        }

        if (tmp_args_element_value_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_23);

            exception_lineno = 120;

            goto frame_exception_exit_1;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 117;
        tmp_call_result_3 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_23, tmp_args_element_value_10);
        Py_DECREF(tmp_called_value_23);
        if (tmp_call_result_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 117;

            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_3);
    }
    branch_no_17:;
    // Tried code:
    {
        PyObject *tmp_assign_source_54;
        PyObject *tmp_tuple_element_24;
        tmp_tuple_element_24 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[67]);

        if (unlikely(tmp_tuple_element_24 == NULL)) {
            tmp_tuple_element_24 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[67]);
        }

        if (tmp_tuple_element_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;

            goto try_except_handler_14;
        }
        tmp_assign_source_54 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_54, 0, tmp_tuple_element_24);
        assert(tmp_class_creation_5__bases_orig == NULL);
        tmp_class_creation_5__bases_orig = tmp_assign_source_54;
    }
    {
        PyObject *tmp_assign_source_55;
        PyObject *tmp_dircall_arg1_5;
        CHECK_OBJECT(tmp_class_creation_5__bases_orig);
        tmp_dircall_arg1_5 = tmp_class_creation_5__bases_orig;
        Py_INCREF(tmp_dircall_arg1_5);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_5};
            tmp_assign_source_55 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_55 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;

            goto try_except_handler_14;
        }
        assert(tmp_class_creation_5__bases == NULL);
        tmp_class_creation_5__bases = tmp_assign_source_55;
    }
    {
        PyObject *tmp_assign_source_56;
        tmp_assign_source_56 = PyDict_New();
        assert(tmp_class_creation_5__class_decl_dict == NULL);
        tmp_class_creation_5__class_decl_dict = tmp_assign_source_56;
    }
    {
        PyObject *tmp_assign_source_57;
        PyObject *tmp_metaclass_value_5;
        bool tmp_condition_result_26;
        PyObject *tmp_key_value_13;
        PyObject *tmp_dict_arg_value_13;
        PyObject *tmp_dict_arg_value_14;
        PyObject *tmp_key_value_14;
        nuitka_bool tmp_condition_result_27;
        int tmp_truth_name_5;
        PyObject *tmp_type_arg_9;
        PyObject *tmp_expression_value_40;
        PyObject *tmp_subscript_value_5;
        PyObject *tmp_bases_value_5;
        tmp_key_value_13 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
        tmp_dict_arg_value_13 = tmp_class_creation_5__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_13, tmp_key_value_13);
        assert(!(tmp_res == -1));
        tmp_condition_result_26 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_26 != false) {
            goto condexpr_true_9;
        } else {
            goto condexpr_false_9;
        }
        condexpr_true_9:;
        CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
        tmp_dict_arg_value_14 = tmp_class_creation_5__class_decl_dict;
        tmp_key_value_14 = mod_consts[87];
        tmp_metaclass_value_5 = DICT_GET_ITEM0(tmp_dict_arg_value_14, tmp_key_value_14);
        if (tmp_metaclass_value_5 == NULL) {
            tmp_metaclass_value_5 = Py_None;
        }
        assert(!(tmp_metaclass_value_5 == NULL));
        Py_INCREF(tmp_metaclass_value_5);
        goto condexpr_end_9;
        condexpr_false_9:;
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_truth_name_5 = CHECK_IF_TRUE(tmp_class_creation_5__bases);
        if (tmp_truth_name_5 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;

            goto try_except_handler_14;
        }
        tmp_condition_result_27 = tmp_truth_name_5 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_27 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_10;
        } else {
            goto condexpr_false_10;
        }
        condexpr_true_10:;
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_expression_value_40 = tmp_class_creation_5__bases;
        tmp_subscript_value_5 = mod_consts[13];
        tmp_type_arg_9 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_40, tmp_subscript_value_5, 0);
        if (tmp_type_arg_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;

            goto try_except_handler_14;
        }
        tmp_metaclass_value_5 = BUILTIN_TYPE1(tmp_type_arg_9);
        Py_DECREF(tmp_type_arg_9);
        if (tmp_metaclass_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;

            goto try_except_handler_14;
        }
        goto condexpr_end_10;
        condexpr_false_10:;
        tmp_metaclass_value_5 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_5);
        condexpr_end_10:;
        condexpr_end_9:;
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_bases_value_5 = tmp_class_creation_5__bases;
        tmp_assign_source_57 = SELECT_METACLASS(tmp_metaclass_value_5, tmp_bases_value_5);
        Py_DECREF(tmp_metaclass_value_5);
        if (tmp_assign_source_57 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;

            goto try_except_handler_14;
        }
        assert(tmp_class_creation_5__metaclass == NULL);
        tmp_class_creation_5__metaclass = tmp_assign_source_57;
    }
    {
        bool tmp_condition_result_28;
        PyObject *tmp_key_value_15;
        PyObject *tmp_dict_arg_value_15;
        tmp_key_value_15 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
        tmp_dict_arg_value_15 = tmp_class_creation_5__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_15, tmp_key_value_15);
        assert(!(tmp_res == -1));
        tmp_condition_result_28 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_28 != false) {
            goto branch_yes_18;
        } else {
            goto branch_no_18;
        }
    }
    branch_yes_18:;
    CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_5__class_decl_dict;
    tmp_dictdel_key = mod_consts[87];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 124;

        goto try_except_handler_14;
    }
    branch_no_18:;
    {
        nuitka_bool tmp_condition_result_29;
        PyObject *tmp_expression_value_41;
        CHECK_OBJECT(tmp_class_creation_5__metaclass);
        tmp_expression_value_41 = tmp_class_creation_5__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_41, mod_consts[88]);
        tmp_condition_result_29 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_29 == NUITKA_BOOL_TRUE) {
            goto branch_yes_19;
        } else {
            goto branch_no_19;
        }
    }
    branch_yes_19:;
    {
        PyObject *tmp_assign_source_58;
        PyObject *tmp_called_value_25;
        PyObject *tmp_expression_value_42;
        PyObject *tmp_args_value_15;
        PyObject *tmp_tuple_element_25;
        PyObject *tmp_kwargs_value_15;
        CHECK_OBJECT(tmp_class_creation_5__metaclass);
        tmp_expression_value_42 = tmp_class_creation_5__metaclass;
        tmp_called_value_25 = LOOKUP_ATTRIBUTE(tmp_expression_value_42, mod_consts[88]);
        if (tmp_called_value_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;

            goto try_except_handler_14;
        }
        tmp_tuple_element_25 = mod_consts[119];
        tmp_args_value_15 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_15, 0, tmp_tuple_element_25);
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_tuple_element_25 = tmp_class_creation_5__bases;
        PyTuple_SET_ITEM0(tmp_args_value_15, 1, tmp_tuple_element_25);
        CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
        tmp_kwargs_value_15 = tmp_class_creation_5__class_decl_dict;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 124;
        tmp_assign_source_58 = CALL_FUNCTION(tmp_called_value_25, tmp_args_value_15, tmp_kwargs_value_15);
        Py_DECREF(tmp_called_value_25);
        Py_DECREF(tmp_args_value_15);
        if (tmp_assign_source_58 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;

            goto try_except_handler_14;
        }
        assert(tmp_class_creation_5__prepared == NULL);
        tmp_class_creation_5__prepared = tmp_assign_source_58;
    }
    {
        bool tmp_condition_result_30;
        PyObject *tmp_operand_value_5;
        PyObject *tmp_expression_value_43;
        CHECK_OBJECT(tmp_class_creation_5__prepared);
        tmp_expression_value_43 = tmp_class_creation_5__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_43, mod_consts[89]);
        tmp_operand_value_5 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_5);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;

            goto try_except_handler_14;
        }
        tmp_condition_result_30 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_30 != false) {
            goto branch_yes_20;
        } else {
            goto branch_no_20;
        }
    }
    branch_yes_20:;
    {
        PyObject *tmp_raise_type_5;
        PyObject *tmp_raise_value_5;
        PyObject *tmp_left_value_5;
        PyObject *tmp_right_value_5;
        PyObject *tmp_tuple_element_26;
        PyObject *tmp_getattr_target_5;
        PyObject *tmp_getattr_attr_5;
        PyObject *tmp_getattr_default_5;
        tmp_raise_type_5 = PyExc_TypeError;
        tmp_left_value_5 = mod_consts[90];
        CHECK_OBJECT(tmp_class_creation_5__metaclass);
        tmp_getattr_target_5 = tmp_class_creation_5__metaclass;
        tmp_getattr_attr_5 = mod_consts[91];
        tmp_getattr_default_5 = mod_consts[92];
        tmp_tuple_element_26 = BUILTIN_GETATTR(tmp_getattr_target_5, tmp_getattr_attr_5, tmp_getattr_default_5);
        if (tmp_tuple_element_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;

            goto try_except_handler_14;
        }
        tmp_right_value_5 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_44;
            PyObject *tmp_type_arg_10;
            PyTuple_SET_ITEM(tmp_right_value_5, 0, tmp_tuple_element_26);
            CHECK_OBJECT(tmp_class_creation_5__prepared);
            tmp_type_arg_10 = tmp_class_creation_5__prepared;
            tmp_expression_value_44 = BUILTIN_TYPE1(tmp_type_arg_10);
            assert(!(tmp_expression_value_44 == NULL));
            tmp_tuple_element_26 = LOOKUP_ATTRIBUTE(tmp_expression_value_44, mod_consts[91]);
            Py_DECREF(tmp_expression_value_44);
            if (tmp_tuple_element_26 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 124;

                goto tuple_build_exception_6;
            }
            PyTuple_SET_ITEM(tmp_right_value_5, 1, tmp_tuple_element_26);
        }
        goto tuple_build_noexception_6;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_6:;
        Py_DECREF(tmp_right_value_5);
        goto try_except_handler_14;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_6:;
        tmp_raise_value_5 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_5, tmp_right_value_5);
        Py_DECREF(tmp_right_value_5);
        if (tmp_raise_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;

            goto try_except_handler_14;
        }
        exception_type = tmp_raise_type_5;
        Py_INCREF(tmp_raise_type_5);
        exception_value = tmp_raise_value_5;
        exception_lineno = 124;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_14;
    }
    branch_no_20:;
    goto branch_end_19;
    branch_no_19:;
    {
        PyObject *tmp_assign_source_59;
        tmp_assign_source_59 = PyDict_New();
        assert(tmp_class_creation_5__prepared == NULL);
        tmp_class_creation_5__prepared = tmp_assign_source_59;
    }
    branch_end_19:;
    {
        PyObject *tmp_assign_source_60;
        PyObject *tmp_called_value_26;
        PyObject *tmp_called_value_27;
        PyObject *tmp_args_value_16;
        PyObject *tmp_tuple_element_27;
        PyObject *tmp_expression_value_45;
        PyObject *tmp_kwargs_value_16;
        PyObject *tmp_args_element_value_11;
        tmp_called_value_27 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_27 == NULL)) {
            tmp_called_value_27 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 123;

            goto try_except_handler_14;
        }
        tmp_expression_value_45 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[19]);

        if (unlikely(tmp_expression_value_45 == NULL)) {
            tmp_expression_value_45 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[19]);
        }

        if (tmp_expression_value_45 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 123;

            goto try_except_handler_14;
        }
        tmp_tuple_element_27 = LOOKUP_ATTRIBUTE(tmp_expression_value_45, mod_consts[120]);
        if (tmp_tuple_element_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 123;

            goto try_except_handler_14;
        }
        tmp_args_value_16 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_16, 0, tmp_tuple_element_27);
        tmp_kwargs_value_16 = PyDict_Copy(mod_consts[121]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 123;
        tmp_called_value_26 = CALL_FUNCTION(tmp_called_value_27, tmp_args_value_16, tmp_kwargs_value_16);
        Py_DECREF(tmp_args_value_16);
        Py_DECREF(tmp_kwargs_value_16);
        if (tmp_called_value_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 123;

            goto try_except_handler_14;
        }
        {
            PyObject *tmp_set_locals_5;
            CHECK_OBJECT(tmp_class_creation_5__prepared);
            tmp_set_locals_5 = tmp_class_creation_5__prepared;
            locals_numba$core$typing$randomdecl$$$class__5_Random_randint_124 = tmp_set_locals_5;
            Py_INCREF(tmp_set_locals_5);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[93];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__5_Random_randint_124, mod_consts[94], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;

            goto try_except_handler_16;
        }
        tmp_dictset_value = mod_consts[119];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__5_Random_randint_124, mod_consts[96], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;

            goto try_except_handler_16;
        }
        if (isFrameUnusable(cache_frame_6be4a8a7d097eaecee5866d63cb692e3_6)) {
            Py_XDECREF(cache_frame_6be4a8a7d097eaecee5866d63cb692e3_6);

#if _DEBUG_REFCOUNTS
            if (cache_frame_6be4a8a7d097eaecee5866d63cb692e3_6 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_6be4a8a7d097eaecee5866d63cb692e3_6 = MAKE_FUNCTION_FRAME(codeobj_6be4a8a7d097eaecee5866d63cb692e3, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_6be4a8a7d097eaecee5866d63cb692e3_6->m_type_description == NULL);
        frame_6be4a8a7d097eaecee5866d63cb692e3_6 = cache_frame_6be4a8a7d097eaecee5866d63cb692e3_6;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_6be4a8a7d097eaecee5866d63cb692e3_6);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_6be4a8a7d097eaecee5866d63cb692e3_6) == 2); // Frame stack

        // Framed code:
        // Tried code:
        {
            PyObject *tmp_assign_source_61;
            PyObject *tmp_iter_arg_1;
            tmp_iter_arg_1 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__5_Random_randint_124, mod_consts[84]);

            if (tmp_iter_arg_1 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_iter_arg_1 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[84]);

                    if (unlikely(tmp_iter_arg_1 == NULL)) {
                        tmp_iter_arg_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[84]);
                    }

                    if (tmp_iter_arg_1 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 125;
                        type_description_2 = "o";
                        goto try_except_handler_17;
                    }
                    Py_INCREF(tmp_iter_arg_1);
                } else {
                    goto try_except_handler_17;
                }
            }

            tmp_assign_source_61 = MAKE_ITERATOR(tmp_iter_arg_1);
            Py_DECREF(tmp_iter_arg_1);
            if (tmp_assign_source_61 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 125;
                type_description_2 = "o";
                goto try_except_handler_17;
            }
            assert(tmp_Random_randint$listcomp_1__$0 == NULL);
            tmp_Random_randint$listcomp_1__$0 = tmp_assign_source_61;
        }
        {
            PyObject *tmp_assign_source_62;
            tmp_assign_source_62 = PyList_New(0);
            assert(tmp_Random_randint$listcomp_1__contraction == NULL);
            tmp_Random_randint$listcomp_1__contraction = tmp_assign_source_62;
        }
        if (isFrameUnusable(cache_frame_c8daf28081174d240dbf6c6f1ecbb92e_7)) {
            Py_XDECREF(cache_frame_c8daf28081174d240dbf6c6f1ecbb92e_7);

#if _DEBUG_REFCOUNTS
            if (cache_frame_c8daf28081174d240dbf6c6f1ecbb92e_7 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_c8daf28081174d240dbf6c6f1ecbb92e_7 = MAKE_FUNCTION_FRAME(codeobj_c8daf28081174d240dbf6c6f1ecbb92e, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_c8daf28081174d240dbf6c6f1ecbb92e_7->m_type_description == NULL);
        frame_c8daf28081174d240dbf6c6f1ecbb92e_7 = cache_frame_c8daf28081174d240dbf6c6f1ecbb92e_7;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_c8daf28081174d240dbf6c6f1ecbb92e_7);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_c8daf28081174d240dbf6c6f1ecbb92e_7) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_1:;
        {
            PyObject *tmp_next_source_1;
            PyObject *tmp_assign_source_63;
            CHECK_OBJECT(tmp_Random_randint$listcomp_1__$0);
            tmp_next_source_1 = tmp_Random_randint$listcomp_1__$0;
            tmp_assign_source_63 = ITERATOR_NEXT(tmp_next_source_1);
            if (tmp_assign_source_63 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_1;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_3 = "o";
                    exception_lineno = 125;
                    goto try_except_handler_18;
                }
            }

            {
                PyObject *old = tmp_Random_randint$listcomp_1__iter_value_0;
                tmp_Random_randint$listcomp_1__iter_value_0 = tmp_assign_source_63;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_64;
            CHECK_OBJECT(tmp_Random_randint$listcomp_1__iter_value_0);
            tmp_assign_source_64 = tmp_Random_randint$listcomp_1__iter_value_0;
            {
                PyObject *old = outline_5_var_tp;
                outline_5_var_tp = tmp_assign_source_64;
                Py_INCREF(outline_5_var_tp);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_1;
            PyObject *tmp_append_value_1;
            PyObject *tmp_called_value_28;
            PyObject *tmp_args_element_value_12;
            PyObject *tmp_args_element_value_13;
            PyObject *tmp_args_element_value_14;
            CHECK_OBJECT(tmp_Random_randint$listcomp_1__contraction);
            tmp_append_list_1 = tmp_Random_randint$listcomp_1__contraction;
            tmp_called_value_28 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[25]);

            if (unlikely(tmp_called_value_28 == NULL)) {
                tmp_called_value_28 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[25]);
            }

            if (tmp_called_value_28 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 125;
                type_description_3 = "o";
                goto try_except_handler_18;
            }
            CHECK_OBJECT(outline_5_var_tp);
            tmp_args_element_value_12 = outline_5_var_tp;
            CHECK_OBJECT(outline_5_var_tp);
            tmp_args_element_value_13 = outline_5_var_tp;
            CHECK_OBJECT(outline_5_var_tp);
            tmp_args_element_value_14 = outline_5_var_tp;
            frame_c8daf28081174d240dbf6c6f1ecbb92e_7->m_frame.f_lineno = 125;
            {
                PyObject *call_args[] = {tmp_args_element_value_12, tmp_args_element_value_13, tmp_args_element_value_14};
                tmp_append_value_1 = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_28, call_args);
            }

            if (tmp_append_value_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 125;
                type_description_3 = "o";
                goto try_except_handler_18;
            }
            assert(PyList_Check(tmp_append_list_1));
            tmp_result = LIST_APPEND1(tmp_append_list_1, tmp_append_value_1);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 125;
                type_description_3 = "o";
                goto try_except_handler_18;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 125;
            type_description_3 = "o";
            goto try_except_handler_18;
        }
        goto loop_start_1;
        loop_end_1:;
        CHECK_OBJECT(tmp_Random_randint$listcomp_1__contraction);
        tmp_dictset_value = tmp_Random_randint$listcomp_1__contraction;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_18;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_18:;
        CHECK_OBJECT(tmp_Random_randint$listcomp_1__$0);
        Py_DECREF(tmp_Random_randint$listcomp_1__$0);
        tmp_Random_randint$listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_Random_randint$listcomp_1__contraction);
        Py_DECREF(tmp_Random_randint$listcomp_1__contraction);
        tmp_Random_randint$listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_Random_randint$listcomp_1__iter_value_0);
        tmp_Random_randint$listcomp_1__iter_value_0 = NULL;
        goto frame_return_exit_1;
        // Exception handler code:
        try_except_handler_18:;
        exception_keeper_type_14 = exception_type;
        exception_keeper_value_14 = exception_value;
        exception_keeper_tb_14 = exception_tb;
        exception_keeper_lineno_14 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Random_randint$listcomp_1__$0);
        Py_DECREF(tmp_Random_randint$listcomp_1__$0);
        tmp_Random_randint$listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_Random_randint$listcomp_1__contraction);
        Py_DECREF(tmp_Random_randint$listcomp_1__contraction);
        tmp_Random_randint$listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_Random_randint$listcomp_1__iter_value_0);
        tmp_Random_randint$listcomp_1__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_14;
        exception_value = exception_keeper_value_14;
        exception_tb = exception_keeper_tb_14;
        exception_lineno = exception_keeper_lineno_14;

        goto frame_exception_exit_7;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_c8daf28081174d240dbf6c6f1ecbb92e_7);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_5;

        frame_return_exit_1:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_c8daf28081174d240dbf6c6f1ecbb92e_7);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_17;

        frame_exception_exit_7:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_c8daf28081174d240dbf6c6f1ecbb92e_7);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_c8daf28081174d240dbf6c6f1ecbb92e_7, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_c8daf28081174d240dbf6c6f1ecbb92e_7->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_c8daf28081174d240dbf6c6f1ecbb92e_7, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_c8daf28081174d240dbf6c6f1ecbb92e_7,
            type_description_3,
            outline_5_var_tp
        );


        // Release cached frame if used for exception.
        if (frame_c8daf28081174d240dbf6c6f1ecbb92e_7 == cache_frame_c8daf28081174d240dbf6c6f1ecbb92e_7) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_c8daf28081174d240dbf6c6f1ecbb92e_7);
            cache_frame_c8daf28081174d240dbf6c6f1ecbb92e_7 = NULL;
        }

        assertFrameObject(frame_c8daf28081174d240dbf6c6f1ecbb92e_7);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_6;

        frame_no_exception_5:;
        goto skip_nested_handling_5;
        nested_frame_exit_6:;
        type_description_2 = "o";
        goto try_except_handler_17;
        skip_nested_handling_5:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_17:;
        Py_XDECREF(outline_5_var_tp);
        outline_5_var_tp = NULL;
        goto outline_result_6;
        // Exception handler code:
        try_except_handler_17:;
        exception_keeper_type_15 = exception_type;
        exception_keeper_value_15 = exception_value;
        exception_keeper_tb_15 = exception_tb;
        exception_keeper_lineno_15 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_5_var_tp);
        outline_5_var_tp = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_15;
        exception_value = exception_keeper_value_15;
        exception_tb = exception_keeper_tb_15;
        exception_lineno = exception_keeper_lineno_15;

        goto outline_exception_6;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_6:;
        exception_lineno = 125;
        goto frame_exception_exit_6;
        outline_result_6:;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__5_Random_randint_124, mod_consts[30], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 125;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_6be4a8a7d097eaecee5866d63cb692e3_6);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_6;

        frame_exception_exit_6:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_6be4a8a7d097eaecee5866d63cb692e3_6);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_6be4a8a7d097eaecee5866d63cb692e3_6, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_6be4a8a7d097eaecee5866d63cb692e3_6->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_6be4a8a7d097eaecee5866d63cb692e3_6, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_6be4a8a7d097eaecee5866d63cb692e3_6,
            type_description_2,
            outline_4_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_6be4a8a7d097eaecee5866d63cb692e3_6 == cache_frame_6be4a8a7d097eaecee5866d63cb692e3_6) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_6be4a8a7d097eaecee5866d63cb692e3_6);
            cache_frame_6be4a8a7d097eaecee5866d63cb692e3_6 = NULL;
        }

        assertFrameObject(frame_6be4a8a7d097eaecee5866d63cb692e3_6);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_5;

        frame_no_exception_6:;
        goto skip_nested_handling_6;
        nested_frame_exit_5:;

        goto try_except_handler_16;
        skip_nested_handling_6:;
        {
            nuitka_bool tmp_condition_result_31;
            PyObject *tmp_cmp_expr_left_6;
            PyObject *tmp_cmp_expr_right_6;
            CHECK_OBJECT(tmp_class_creation_5__bases);
            tmp_cmp_expr_left_6 = tmp_class_creation_5__bases;
            CHECK_OBJECT(tmp_class_creation_5__bases_orig);
            tmp_cmp_expr_right_6 = tmp_class_creation_5__bases_orig;
            tmp_condition_result_31 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_6, tmp_cmp_expr_right_6);
            if (tmp_condition_result_31 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 124;

                goto try_except_handler_16;
            }
            if (tmp_condition_result_31 == NUITKA_BOOL_TRUE) {
                goto branch_yes_21;
            } else {
                goto branch_no_21;
            }
            assert(tmp_condition_result_31 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_21:;
        CHECK_OBJECT(tmp_class_creation_5__bases_orig);
        tmp_dictset_value = tmp_class_creation_5__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__5_Random_randint_124, mod_consts[98], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;

            goto try_except_handler_16;
        }
        branch_no_21:;
        {
            PyObject *tmp_assign_source_65;
            PyObject *tmp_called_value_29;
            PyObject *tmp_args_value_17;
            PyObject *tmp_tuple_element_28;
            PyObject *tmp_kwargs_value_17;
            CHECK_OBJECT(tmp_class_creation_5__metaclass);
            tmp_called_value_29 = tmp_class_creation_5__metaclass;
            tmp_tuple_element_28 = mod_consts[119];
            tmp_args_value_17 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_17, 0, tmp_tuple_element_28);
            CHECK_OBJECT(tmp_class_creation_5__bases);
            tmp_tuple_element_28 = tmp_class_creation_5__bases;
            PyTuple_SET_ITEM0(tmp_args_value_17, 1, tmp_tuple_element_28);
            tmp_tuple_element_28 = locals_numba$core$typing$randomdecl$$$class__5_Random_randint_124;
            PyTuple_SET_ITEM0(tmp_args_value_17, 2, tmp_tuple_element_28);
            CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
            tmp_kwargs_value_17 = tmp_class_creation_5__class_decl_dict;
            frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 124;
            tmp_assign_source_65 = CALL_FUNCTION(tmp_called_value_29, tmp_args_value_17, tmp_kwargs_value_17);
            Py_DECREF(tmp_args_value_17);
            if (tmp_assign_source_65 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 124;

                goto try_except_handler_16;
            }
            assert(outline_4_var___class__ == NULL);
            outline_4_var___class__ = tmp_assign_source_65;
        }
        CHECK_OBJECT(outline_4_var___class__);
        tmp_args_element_value_11 = outline_4_var___class__;
        Py_INCREF(tmp_args_element_value_11);
        goto try_return_handler_16;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_16:;
        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__5_Random_randint_124);
        locals_numba$core$typing$randomdecl$$$class__5_Random_randint_124 = NULL;
        goto try_return_handler_15;
        // Exception handler code:
        try_except_handler_16:;
        exception_keeper_type_16 = exception_type;
        exception_keeper_value_16 = exception_value;
        exception_keeper_tb_16 = exception_tb;
        exception_keeper_lineno_16 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__5_Random_randint_124);
        locals_numba$core$typing$randomdecl$$$class__5_Random_randint_124 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_16;
        exception_value = exception_keeper_value_16;
        exception_tb = exception_keeper_tb_16;
        exception_lineno = exception_keeper_lineno_16;

        goto try_except_handler_15;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_15:;
        CHECK_OBJECT(outline_4_var___class__);
        Py_DECREF(outline_4_var___class__);
        outline_4_var___class__ = NULL;
        goto outline_result_5;
        // Exception handler code:
        try_except_handler_15:;
        exception_keeper_type_17 = exception_type;
        exception_keeper_value_17 = exception_value;
        exception_keeper_tb_17 = exception_tb;
        exception_keeper_lineno_17 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_17;
        exception_value = exception_keeper_value_17;
        exception_tb = exception_keeper_tb_17;
        exception_lineno = exception_keeper_lineno_17;

        goto outline_exception_5;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_5:;
        exception_lineno = 124;
        goto try_except_handler_14;
        outline_result_5:;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 123;
        tmp_assign_source_60 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_26, tmp_args_element_value_11);
        Py_DECREF(tmp_called_value_26);
        Py_DECREF(tmp_args_element_value_11);
        if (tmp_assign_source_60 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 123;

            goto try_except_handler_14;
        }
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[119], tmp_assign_source_60);
    }
    goto try_end_6;
    // Exception handler code:
    try_except_handler_14:;
    exception_keeper_type_18 = exception_type;
    exception_keeper_value_18 = exception_value;
    exception_keeper_tb_18 = exception_tb;
    exception_keeper_lineno_18 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_5__bases_orig);
    tmp_class_creation_5__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_5__bases);
    tmp_class_creation_5__bases = NULL;
    Py_XDECREF(tmp_class_creation_5__class_decl_dict);
    tmp_class_creation_5__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_5__metaclass);
    tmp_class_creation_5__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_5__prepared);
    tmp_class_creation_5__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_18;
    exception_value = exception_keeper_value_18;
    exception_tb = exception_keeper_tb_18;
    exception_lineno = exception_keeper_lineno_18;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    CHECK_OBJECT(tmp_class_creation_5__bases_orig);
    Py_DECREF(tmp_class_creation_5__bases_orig);
    tmp_class_creation_5__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_5__bases);
    Py_DECREF(tmp_class_creation_5__bases);
    tmp_class_creation_5__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
    Py_DECREF(tmp_class_creation_5__class_decl_dict);
    tmp_class_creation_5__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_5__metaclass);
    Py_DECREF(tmp_class_creation_5__metaclass);
    tmp_class_creation_5__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_5__prepared);
    Py_DECREF(tmp_class_creation_5__prepared);
    tmp_class_creation_5__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_66;
        PyObject *tmp_tuple_element_29;
        tmp_tuple_element_29 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[99]);

        if (unlikely(tmp_tuple_element_29 == NULL)) {
            tmp_tuple_element_29 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[99]);
        }

        if (tmp_tuple_element_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 128;

            goto try_except_handler_19;
        }
        tmp_assign_source_66 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_66, 0, tmp_tuple_element_29);
        assert(tmp_class_creation_6__bases_orig == NULL);
        tmp_class_creation_6__bases_orig = tmp_assign_source_66;
    }
    {
        PyObject *tmp_assign_source_67;
        PyObject *tmp_dircall_arg1_6;
        CHECK_OBJECT(tmp_class_creation_6__bases_orig);
        tmp_dircall_arg1_6 = tmp_class_creation_6__bases_orig;
        Py_INCREF(tmp_dircall_arg1_6);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_6};
            tmp_assign_source_67 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_67 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 128;

            goto try_except_handler_19;
        }
        assert(tmp_class_creation_6__bases == NULL);
        tmp_class_creation_6__bases = tmp_assign_source_67;
    }
    {
        PyObject *tmp_assign_source_68;
        tmp_assign_source_68 = PyDict_New();
        assert(tmp_class_creation_6__class_decl_dict == NULL);
        tmp_class_creation_6__class_decl_dict = tmp_assign_source_68;
    }
    {
        PyObject *tmp_assign_source_69;
        PyObject *tmp_metaclass_value_6;
        bool tmp_condition_result_32;
        PyObject *tmp_key_value_16;
        PyObject *tmp_dict_arg_value_16;
        PyObject *tmp_dict_arg_value_17;
        PyObject *tmp_key_value_17;
        nuitka_bool tmp_condition_result_33;
        int tmp_truth_name_6;
        PyObject *tmp_type_arg_11;
        PyObject *tmp_expression_value_46;
        PyObject *tmp_subscript_value_6;
        PyObject *tmp_bases_value_6;
        tmp_key_value_16 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
        tmp_dict_arg_value_16 = tmp_class_creation_6__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_16, tmp_key_value_16);
        assert(!(tmp_res == -1));
        tmp_condition_result_32 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_32 != false) {
            goto condexpr_true_11;
        } else {
            goto condexpr_false_11;
        }
        condexpr_true_11:;
        CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
        tmp_dict_arg_value_17 = tmp_class_creation_6__class_decl_dict;
        tmp_key_value_17 = mod_consts[87];
        tmp_metaclass_value_6 = DICT_GET_ITEM0(tmp_dict_arg_value_17, tmp_key_value_17);
        if (tmp_metaclass_value_6 == NULL) {
            tmp_metaclass_value_6 = Py_None;
        }
        assert(!(tmp_metaclass_value_6 == NULL));
        Py_INCREF(tmp_metaclass_value_6);
        goto condexpr_end_11;
        condexpr_false_11:;
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_truth_name_6 = CHECK_IF_TRUE(tmp_class_creation_6__bases);
        if (tmp_truth_name_6 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 128;

            goto try_except_handler_19;
        }
        tmp_condition_result_33 = tmp_truth_name_6 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_33 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_12;
        } else {
            goto condexpr_false_12;
        }
        condexpr_true_12:;
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_expression_value_46 = tmp_class_creation_6__bases;
        tmp_subscript_value_6 = mod_consts[13];
        tmp_type_arg_11 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_46, tmp_subscript_value_6, 0);
        if (tmp_type_arg_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 128;

            goto try_except_handler_19;
        }
        tmp_metaclass_value_6 = BUILTIN_TYPE1(tmp_type_arg_11);
        Py_DECREF(tmp_type_arg_11);
        if (tmp_metaclass_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 128;

            goto try_except_handler_19;
        }
        goto condexpr_end_12;
        condexpr_false_12:;
        tmp_metaclass_value_6 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_6);
        condexpr_end_12:;
        condexpr_end_11:;
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_bases_value_6 = tmp_class_creation_6__bases;
        tmp_assign_source_69 = SELECT_METACLASS(tmp_metaclass_value_6, tmp_bases_value_6);
        Py_DECREF(tmp_metaclass_value_6);
        if (tmp_assign_source_69 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 128;

            goto try_except_handler_19;
        }
        assert(tmp_class_creation_6__metaclass == NULL);
        tmp_class_creation_6__metaclass = tmp_assign_source_69;
    }
    {
        bool tmp_condition_result_34;
        PyObject *tmp_key_value_18;
        PyObject *tmp_dict_arg_value_18;
        tmp_key_value_18 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
        tmp_dict_arg_value_18 = tmp_class_creation_6__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_18, tmp_key_value_18);
        assert(!(tmp_res == -1));
        tmp_condition_result_34 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_34 != false) {
            goto branch_yes_22;
        } else {
            goto branch_no_22;
        }
    }
    branch_yes_22:;
    CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_6__class_decl_dict;
    tmp_dictdel_key = mod_consts[87];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 128;

        goto try_except_handler_19;
    }
    branch_no_22:;
    {
        nuitka_bool tmp_condition_result_35;
        PyObject *tmp_expression_value_47;
        CHECK_OBJECT(tmp_class_creation_6__metaclass);
        tmp_expression_value_47 = tmp_class_creation_6__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_47, mod_consts[88]);
        tmp_condition_result_35 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_35 == NUITKA_BOOL_TRUE) {
            goto branch_yes_23;
        } else {
            goto branch_no_23;
        }
    }
    branch_yes_23:;
    {
        PyObject *tmp_assign_source_70;
        PyObject *tmp_called_value_30;
        PyObject *tmp_expression_value_48;
        PyObject *tmp_args_value_18;
        PyObject *tmp_tuple_element_30;
        PyObject *tmp_kwargs_value_18;
        CHECK_OBJECT(tmp_class_creation_6__metaclass);
        tmp_expression_value_48 = tmp_class_creation_6__metaclass;
        tmp_called_value_30 = LOOKUP_ATTRIBUTE(tmp_expression_value_48, mod_consts[88]);
        if (tmp_called_value_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 128;

            goto try_except_handler_19;
        }
        tmp_tuple_element_30 = mod_consts[119];
        tmp_args_value_18 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_18, 0, tmp_tuple_element_30);
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_tuple_element_30 = tmp_class_creation_6__bases;
        PyTuple_SET_ITEM0(tmp_args_value_18, 1, tmp_tuple_element_30);
        CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
        tmp_kwargs_value_18 = tmp_class_creation_6__class_decl_dict;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 128;
        tmp_assign_source_70 = CALL_FUNCTION(tmp_called_value_30, tmp_args_value_18, tmp_kwargs_value_18);
        Py_DECREF(tmp_called_value_30);
        Py_DECREF(tmp_args_value_18);
        if (tmp_assign_source_70 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 128;

            goto try_except_handler_19;
        }
        assert(tmp_class_creation_6__prepared == NULL);
        tmp_class_creation_6__prepared = tmp_assign_source_70;
    }
    {
        bool tmp_condition_result_36;
        PyObject *tmp_operand_value_6;
        PyObject *tmp_expression_value_49;
        CHECK_OBJECT(tmp_class_creation_6__prepared);
        tmp_expression_value_49 = tmp_class_creation_6__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_49, mod_consts[89]);
        tmp_operand_value_6 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_6);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 128;

            goto try_except_handler_19;
        }
        tmp_condition_result_36 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_36 != false) {
            goto branch_yes_24;
        } else {
            goto branch_no_24;
        }
    }
    branch_yes_24:;
    {
        PyObject *tmp_raise_type_6;
        PyObject *tmp_raise_value_6;
        PyObject *tmp_left_value_6;
        PyObject *tmp_right_value_6;
        PyObject *tmp_tuple_element_31;
        PyObject *tmp_getattr_target_6;
        PyObject *tmp_getattr_attr_6;
        PyObject *tmp_getattr_default_6;
        tmp_raise_type_6 = PyExc_TypeError;
        tmp_left_value_6 = mod_consts[90];
        CHECK_OBJECT(tmp_class_creation_6__metaclass);
        tmp_getattr_target_6 = tmp_class_creation_6__metaclass;
        tmp_getattr_attr_6 = mod_consts[91];
        tmp_getattr_default_6 = mod_consts[92];
        tmp_tuple_element_31 = BUILTIN_GETATTR(tmp_getattr_target_6, tmp_getattr_attr_6, tmp_getattr_default_6);
        if (tmp_tuple_element_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 128;

            goto try_except_handler_19;
        }
        tmp_right_value_6 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_50;
            PyObject *tmp_type_arg_12;
            PyTuple_SET_ITEM(tmp_right_value_6, 0, tmp_tuple_element_31);
            CHECK_OBJECT(tmp_class_creation_6__prepared);
            tmp_type_arg_12 = tmp_class_creation_6__prepared;
            tmp_expression_value_50 = BUILTIN_TYPE1(tmp_type_arg_12);
            assert(!(tmp_expression_value_50 == NULL));
            tmp_tuple_element_31 = LOOKUP_ATTRIBUTE(tmp_expression_value_50, mod_consts[91]);
            Py_DECREF(tmp_expression_value_50);
            if (tmp_tuple_element_31 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 128;

                goto tuple_build_exception_7;
            }
            PyTuple_SET_ITEM(tmp_right_value_6, 1, tmp_tuple_element_31);
        }
        goto tuple_build_noexception_7;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_7:;
        Py_DECREF(tmp_right_value_6);
        goto try_except_handler_19;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_7:;
        tmp_raise_value_6 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_6, tmp_right_value_6);
        Py_DECREF(tmp_right_value_6);
        if (tmp_raise_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 128;

            goto try_except_handler_19;
        }
        exception_type = tmp_raise_type_6;
        Py_INCREF(tmp_raise_type_6);
        exception_value = tmp_raise_value_6;
        exception_lineno = 128;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_19;
    }
    branch_no_24:;
    goto branch_end_23;
    branch_no_23:;
    {
        PyObject *tmp_assign_source_71;
        tmp_assign_source_71 = PyDict_New();
        assert(tmp_class_creation_6__prepared == NULL);
        tmp_class_creation_6__prepared = tmp_assign_source_71;
    }
    branch_end_23:;
    {
        PyObject *tmp_assign_source_72;
        PyObject *tmp_called_value_31;
        PyObject *tmp_called_value_32;
        PyObject *tmp_args_value_19;
        PyObject *tmp_tuple_element_32;
        PyObject *tmp_expression_value_51;
        PyObject *tmp_expression_value_52;
        PyObject *tmp_kwargs_value_19;
        PyObject *tmp_args_element_value_15;
        tmp_called_value_32 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_32 == NULL)) {
            tmp_called_value_32 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_32 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 127;

            goto try_except_handler_19;
        }
        tmp_expression_value_52 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_52 == NULL)) {
            tmp_expression_value_52 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_52 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 127;

            goto try_except_handler_19;
        }
        tmp_expression_value_51 = LOOKUP_ATTRIBUTE(tmp_expression_value_52, mod_consts[19]);
        if (tmp_expression_value_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 127;

            goto try_except_handler_19;
        }
        tmp_tuple_element_32 = LOOKUP_ATTRIBUTE(tmp_expression_value_51, mod_consts[120]);
        Py_DECREF(tmp_expression_value_51);
        if (tmp_tuple_element_32 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 127;

            goto try_except_handler_19;
        }
        tmp_args_value_19 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_19, 0, tmp_tuple_element_32);
        tmp_kwargs_value_19 = PyDict_Copy(mod_consts[122]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 127;
        tmp_called_value_31 = CALL_FUNCTION(tmp_called_value_32, tmp_args_value_19, tmp_kwargs_value_19);
        Py_DECREF(tmp_args_value_19);
        Py_DECREF(tmp_kwargs_value_19);
        if (tmp_called_value_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 127;

            goto try_except_handler_19;
        }
        {
            PyObject *tmp_set_locals_6;
            CHECK_OBJECT(tmp_class_creation_6__prepared);
            tmp_set_locals_6 = tmp_class_creation_6__prepared;
            locals_numba$core$typing$randomdecl$$$class__6_Random_randint_128 = tmp_set_locals_6;
            Py_INCREF(tmp_set_locals_6);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[93];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__6_Random_randint_128, mod_consts[94], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 128;

            goto try_except_handler_21;
        }
        tmp_dictset_value = mod_consts[119];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__6_Random_randint_128, mod_consts[96], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 128;

            goto try_except_handler_21;
        }
        if (isFrameUnusable(cache_frame_14d1df92c23bec3fdef4b49181e32f5d_8)) {
            Py_XDECREF(cache_frame_14d1df92c23bec3fdef4b49181e32f5d_8);

#if _DEBUG_REFCOUNTS
            if (cache_frame_14d1df92c23bec3fdef4b49181e32f5d_8 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_14d1df92c23bec3fdef4b49181e32f5d_8 = MAKE_FUNCTION_FRAME(codeobj_14d1df92c23bec3fdef4b49181e32f5d, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_14d1df92c23bec3fdef4b49181e32f5d_8->m_type_description == NULL);
        frame_14d1df92c23bec3fdef4b49181e32f5d_8 = cache_frame_14d1df92c23bec3fdef4b49181e32f5d_8;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_14d1df92c23bec3fdef4b49181e32f5d_8);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_14d1df92c23bec3fdef4b49181e32f5d_8) == 2); // Frame stack

        // Framed code:
        // Tried code:
        {
            PyObject *tmp_assign_source_73;
            PyObject *tmp_iter_arg_2;
            tmp_iter_arg_2 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__6_Random_randint_128, mod_consts[84]);

            if (tmp_iter_arg_2 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_iter_arg_2 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[84]);

                    if (unlikely(tmp_iter_arg_2 == NULL)) {
                        tmp_iter_arg_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[84]);
                    }

                    if (tmp_iter_arg_2 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 129;
                        type_description_2 = "o";
                        goto try_except_handler_22;
                    }
                    Py_INCREF(tmp_iter_arg_2);
                } else {
                    goto try_except_handler_22;
                }
            }

            tmp_assign_source_73 = MAKE_ITERATOR(tmp_iter_arg_2);
            Py_DECREF(tmp_iter_arg_2);
            if (tmp_assign_source_73 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 129;
                type_description_2 = "o";
                goto try_except_handler_22;
            }
            assert(tmp_Random_randint$listcomp_2__$0 == NULL);
            tmp_Random_randint$listcomp_2__$0 = tmp_assign_source_73;
        }
        {
            PyObject *tmp_assign_source_74;
            tmp_assign_source_74 = PyList_New(0);
            assert(tmp_Random_randint$listcomp_2__contraction == NULL);
            tmp_Random_randint$listcomp_2__contraction = tmp_assign_source_74;
        }
        if (isFrameUnusable(cache_frame_3f0dfba0ea1ef929d0608f2e5c2396fe_9)) {
            Py_XDECREF(cache_frame_3f0dfba0ea1ef929d0608f2e5c2396fe_9);

#if _DEBUG_REFCOUNTS
            if (cache_frame_3f0dfba0ea1ef929d0608f2e5c2396fe_9 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_3f0dfba0ea1ef929d0608f2e5c2396fe_9 = MAKE_FUNCTION_FRAME(codeobj_3f0dfba0ea1ef929d0608f2e5c2396fe, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_3f0dfba0ea1ef929d0608f2e5c2396fe_9->m_type_description == NULL);
        frame_3f0dfba0ea1ef929d0608f2e5c2396fe_9 = cache_frame_3f0dfba0ea1ef929d0608f2e5c2396fe_9;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_3f0dfba0ea1ef929d0608f2e5c2396fe_9);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_3f0dfba0ea1ef929d0608f2e5c2396fe_9) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_2:;
        {
            PyObject *tmp_next_source_2;
            PyObject *tmp_assign_source_75;
            CHECK_OBJECT(tmp_Random_randint$listcomp_2__$0);
            tmp_next_source_2 = tmp_Random_randint$listcomp_2__$0;
            tmp_assign_source_75 = ITERATOR_NEXT(tmp_next_source_2);
            if (tmp_assign_source_75 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_2;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_3 = "o";
                    exception_lineno = 129;
                    goto try_except_handler_23;
                }
            }

            {
                PyObject *old = tmp_Random_randint$listcomp_2__iter_value_0;
                tmp_Random_randint$listcomp_2__iter_value_0 = tmp_assign_source_75;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_76;
            CHECK_OBJECT(tmp_Random_randint$listcomp_2__iter_value_0);
            tmp_assign_source_76 = tmp_Random_randint$listcomp_2__iter_value_0;
            {
                PyObject *old = outline_7_var_tp;
                outline_7_var_tp = tmp_assign_source_76;
                Py_INCREF(outline_7_var_tp);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_2;
            PyObject *tmp_append_value_2;
            PyObject *tmp_called_value_33;
            PyObject *tmp_args_element_value_16;
            PyObject *tmp_args_element_value_17;
            CHECK_OBJECT(tmp_Random_randint$listcomp_2__contraction);
            tmp_append_list_2 = tmp_Random_randint$listcomp_2__contraction;
            tmp_called_value_33 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[25]);

            if (unlikely(tmp_called_value_33 == NULL)) {
                tmp_called_value_33 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[25]);
            }

            if (tmp_called_value_33 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 129;
                type_description_3 = "o";
                goto try_except_handler_23;
            }
            CHECK_OBJECT(outline_7_var_tp);
            tmp_args_element_value_16 = outline_7_var_tp;
            CHECK_OBJECT(outline_7_var_tp);
            tmp_args_element_value_17 = outline_7_var_tp;
            frame_3f0dfba0ea1ef929d0608f2e5c2396fe_9->m_frame.f_lineno = 129;
            {
                PyObject *call_args[] = {tmp_args_element_value_16, tmp_args_element_value_17};
                tmp_append_value_2 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_33, call_args);
            }

            if (tmp_append_value_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 129;
                type_description_3 = "o";
                goto try_except_handler_23;
            }
            assert(PyList_Check(tmp_append_list_2));
            tmp_result = LIST_APPEND1(tmp_append_list_2, tmp_append_value_2);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 129;
                type_description_3 = "o";
                goto try_except_handler_23;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 129;
            type_description_3 = "o";
            goto try_except_handler_23;
        }
        goto loop_start_2;
        loop_end_2:;
        CHECK_OBJECT(tmp_Random_randint$listcomp_2__contraction);
        tmp_dictset_value = tmp_Random_randint$listcomp_2__contraction;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_23;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_23:;
        CHECK_OBJECT(tmp_Random_randint$listcomp_2__$0);
        Py_DECREF(tmp_Random_randint$listcomp_2__$0);
        tmp_Random_randint$listcomp_2__$0 = NULL;
        CHECK_OBJECT(tmp_Random_randint$listcomp_2__contraction);
        Py_DECREF(tmp_Random_randint$listcomp_2__contraction);
        tmp_Random_randint$listcomp_2__contraction = NULL;
        Py_XDECREF(tmp_Random_randint$listcomp_2__iter_value_0);
        tmp_Random_randint$listcomp_2__iter_value_0 = NULL;
        goto frame_return_exit_2;
        // Exception handler code:
        try_except_handler_23:;
        exception_keeper_type_19 = exception_type;
        exception_keeper_value_19 = exception_value;
        exception_keeper_tb_19 = exception_tb;
        exception_keeper_lineno_19 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Random_randint$listcomp_2__$0);
        Py_DECREF(tmp_Random_randint$listcomp_2__$0);
        tmp_Random_randint$listcomp_2__$0 = NULL;
        CHECK_OBJECT(tmp_Random_randint$listcomp_2__contraction);
        Py_DECREF(tmp_Random_randint$listcomp_2__contraction);
        tmp_Random_randint$listcomp_2__contraction = NULL;
        Py_XDECREF(tmp_Random_randint$listcomp_2__iter_value_0);
        tmp_Random_randint$listcomp_2__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_19;
        exception_value = exception_keeper_value_19;
        exception_tb = exception_keeper_tb_19;
        exception_lineno = exception_keeper_lineno_19;

        goto frame_exception_exit_9;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_3f0dfba0ea1ef929d0608f2e5c2396fe_9);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_7;

        frame_return_exit_2:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_3f0dfba0ea1ef929d0608f2e5c2396fe_9);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_22;

        frame_exception_exit_9:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_3f0dfba0ea1ef929d0608f2e5c2396fe_9);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_3f0dfba0ea1ef929d0608f2e5c2396fe_9, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_3f0dfba0ea1ef929d0608f2e5c2396fe_9->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_3f0dfba0ea1ef929d0608f2e5c2396fe_9, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_3f0dfba0ea1ef929d0608f2e5c2396fe_9,
            type_description_3,
            outline_7_var_tp
        );


        // Release cached frame if used for exception.
        if (frame_3f0dfba0ea1ef929d0608f2e5c2396fe_9 == cache_frame_3f0dfba0ea1ef929d0608f2e5c2396fe_9) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_3f0dfba0ea1ef929d0608f2e5c2396fe_9);
            cache_frame_3f0dfba0ea1ef929d0608f2e5c2396fe_9 = NULL;
        }

        assertFrameObject(frame_3f0dfba0ea1ef929d0608f2e5c2396fe_9);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_8;

        frame_no_exception_7:;
        goto skip_nested_handling_7;
        nested_frame_exit_8:;
        type_description_2 = "o";
        goto try_except_handler_22;
        skip_nested_handling_7:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_22:;
        Py_XDECREF(outline_7_var_tp);
        outline_7_var_tp = NULL;
        goto outline_result_8;
        // Exception handler code:
        try_except_handler_22:;
        exception_keeper_type_20 = exception_type;
        exception_keeper_value_20 = exception_value;
        exception_keeper_tb_20 = exception_tb;
        exception_keeper_lineno_20 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_7_var_tp);
        outline_7_var_tp = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_20;
        exception_value = exception_keeper_value_20;
        exception_tb = exception_keeper_tb_20;
        exception_lineno = exception_keeper_lineno_20;

        goto outline_exception_8;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_8:;
        exception_lineno = 129;
        goto frame_exception_exit_8;
        outline_result_8:;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__6_Random_randint_128, mod_consts[30], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 129;
            type_description_2 = "o";
            goto frame_exception_exit_8;
        }
        {
            PyObject *tmp_assign_source_77;
            tmp_assign_source_77 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__6_Random_randint_128, mod_consts[30]);

            if (unlikely(tmp_assign_source_77 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[30]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 130;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }

            if (tmp_assign_source_77 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 130;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
            assert(tmp_Random_randint$class_inplace_1__value == NULL);
            tmp_Random_randint$class_inplace_1__value = tmp_assign_source_77;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_78;
            PyObject *tmp_left_value_7;
            PyObject *tmp_right_value_7;
            CHECK_OBJECT(tmp_Random_randint$class_inplace_1__value);
            tmp_left_value_7 = tmp_Random_randint$class_inplace_1__value;
            // Tried code:
            {
                PyObject *tmp_assign_source_79;
                PyObject *tmp_iter_arg_3;
                tmp_iter_arg_3 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__6_Random_randint_128, mod_consts[84]);

                if (tmp_iter_arg_3 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_iter_arg_3 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[84]);

                        if (unlikely(tmp_iter_arg_3 == NULL)) {
                            tmp_iter_arg_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[84]);
                        }

                        if (tmp_iter_arg_3 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 130;
                            type_description_2 = "o";
                            goto try_except_handler_25;
                        }
                        Py_INCREF(tmp_iter_arg_3);
                    } else {
                        goto try_except_handler_25;
                    }
                }

                tmp_assign_source_79 = MAKE_ITERATOR(tmp_iter_arg_3);
                Py_DECREF(tmp_iter_arg_3);
                if (tmp_assign_source_79 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 130;
                    type_description_2 = "o";
                    goto try_except_handler_25;
                }
                assert(tmp_Random_randint$listcomp_3__$0 == NULL);
                tmp_Random_randint$listcomp_3__$0 = tmp_assign_source_79;
            }
            {
                PyObject *tmp_assign_source_80;
                tmp_assign_source_80 = PyList_New(0);
                assert(tmp_Random_randint$listcomp_3__contraction == NULL);
                tmp_Random_randint$listcomp_3__contraction = tmp_assign_source_80;
            }
            if (isFrameUnusable(cache_frame_bb8f3d1ee4a89dee14c96eee07597f14_10)) {
                Py_XDECREF(cache_frame_bb8f3d1ee4a89dee14c96eee07597f14_10);

#if _DEBUG_REFCOUNTS
                if (cache_frame_bb8f3d1ee4a89dee14c96eee07597f14_10 == NULL) {
                    count_active_frame_cache_instances += 1;
                } else {
                    count_released_frame_cache_instances += 1;
                }
                count_allocated_frame_cache_instances += 1;
#endif
                cache_frame_bb8f3d1ee4a89dee14c96eee07597f14_10 = MAKE_FUNCTION_FRAME(codeobj_bb8f3d1ee4a89dee14c96eee07597f14, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
            } else {
                count_hit_frame_cache_instances += 1;
#endif
            }
            assert(cache_frame_bb8f3d1ee4a89dee14c96eee07597f14_10->m_type_description == NULL);
            frame_bb8f3d1ee4a89dee14c96eee07597f14_10 = cache_frame_bb8f3d1ee4a89dee14c96eee07597f14_10;

            // Push the new frame as the currently active one.
            pushFrameStack(frame_bb8f3d1ee4a89dee14c96eee07597f14_10);

            // Mark the frame object as in use, ref count 1 will be up for reuse.
            assert(Py_REFCNT(frame_bb8f3d1ee4a89dee14c96eee07597f14_10) == 2); // Frame stack

            // Framed code:
            // Tried code:
            loop_start_3:;
            {
                PyObject *tmp_next_source_3;
                PyObject *tmp_assign_source_81;
                CHECK_OBJECT(tmp_Random_randint$listcomp_3__$0);
                tmp_next_source_3 = tmp_Random_randint$listcomp_3__$0;
                tmp_assign_source_81 = ITERATOR_NEXT(tmp_next_source_3);
                if (tmp_assign_source_81 == NULL) {
                    if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                        goto loop_end_3;
                    } else {

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        type_description_3 = "o";
                        exception_lineno = 130;
                        goto try_except_handler_26;
                    }
                }

                {
                    PyObject *old = tmp_Random_randint$listcomp_3__iter_value_0;
                    tmp_Random_randint$listcomp_3__iter_value_0 = tmp_assign_source_81;
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_assign_source_82;
                CHECK_OBJECT(tmp_Random_randint$listcomp_3__iter_value_0);
                tmp_assign_source_82 = tmp_Random_randint$listcomp_3__iter_value_0;
                {
                    PyObject *old = outline_8_var_tp;
                    outline_8_var_tp = tmp_assign_source_82;
                    Py_INCREF(outline_8_var_tp);
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_append_list_3;
                PyObject *tmp_append_value_3;
                PyObject *tmp_called_value_34;
                PyObject *tmp_args_element_value_18;
                PyObject *tmp_args_element_value_19;
                PyObject *tmp_args_element_value_20;
                CHECK_OBJECT(tmp_Random_randint$listcomp_3__contraction);
                tmp_append_list_3 = tmp_Random_randint$listcomp_3__contraction;
                tmp_called_value_34 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[25]);

                if (unlikely(tmp_called_value_34 == NULL)) {
                    tmp_called_value_34 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[25]);
                }

                if (tmp_called_value_34 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 130;
                    type_description_3 = "o";
                    goto try_except_handler_26;
                }
                CHECK_OBJECT(outline_8_var_tp);
                tmp_args_element_value_18 = outline_8_var_tp;
                CHECK_OBJECT(outline_8_var_tp);
                tmp_args_element_value_19 = outline_8_var_tp;
                CHECK_OBJECT(outline_8_var_tp);
                tmp_args_element_value_20 = outline_8_var_tp;
                frame_bb8f3d1ee4a89dee14c96eee07597f14_10->m_frame.f_lineno = 130;
                {
                    PyObject *call_args[] = {tmp_args_element_value_18, tmp_args_element_value_19, tmp_args_element_value_20};
                    tmp_append_value_3 = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_34, call_args);
                }

                if (tmp_append_value_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 130;
                    type_description_3 = "o";
                    goto try_except_handler_26;
                }
                assert(PyList_Check(tmp_append_list_3));
                tmp_result = LIST_APPEND1(tmp_append_list_3, tmp_append_value_3);
                if (tmp_result == false) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 130;
                    type_description_3 = "o";
                    goto try_except_handler_26;
                }
            }
            if (CONSIDER_THREADING() == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 130;
                type_description_3 = "o";
                goto try_except_handler_26;
            }
            goto loop_start_3;
            loop_end_3:;
            CHECK_OBJECT(tmp_Random_randint$listcomp_3__contraction);
            tmp_right_value_7 = tmp_Random_randint$listcomp_3__contraction;
            Py_INCREF(tmp_right_value_7);
            goto try_return_handler_26;
            NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
            return NULL;
            // Return handler code:
            try_return_handler_26:;
            CHECK_OBJECT(tmp_Random_randint$listcomp_3__$0);
            Py_DECREF(tmp_Random_randint$listcomp_3__$0);
            tmp_Random_randint$listcomp_3__$0 = NULL;
            CHECK_OBJECT(tmp_Random_randint$listcomp_3__contraction);
            Py_DECREF(tmp_Random_randint$listcomp_3__contraction);
            tmp_Random_randint$listcomp_3__contraction = NULL;
            Py_XDECREF(tmp_Random_randint$listcomp_3__iter_value_0);
            tmp_Random_randint$listcomp_3__iter_value_0 = NULL;
            goto frame_return_exit_3;
            // Exception handler code:
            try_except_handler_26:;
            exception_keeper_type_21 = exception_type;
            exception_keeper_value_21 = exception_value;
            exception_keeper_tb_21 = exception_tb;
            exception_keeper_lineno_21 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT(tmp_Random_randint$listcomp_3__$0);
            Py_DECREF(tmp_Random_randint$listcomp_3__$0);
            tmp_Random_randint$listcomp_3__$0 = NULL;
            CHECK_OBJECT(tmp_Random_randint$listcomp_3__contraction);
            Py_DECREF(tmp_Random_randint$listcomp_3__contraction);
            tmp_Random_randint$listcomp_3__contraction = NULL;
            Py_XDECREF(tmp_Random_randint$listcomp_3__iter_value_0);
            tmp_Random_randint$listcomp_3__iter_value_0 = NULL;
            // Re-raise.
            exception_type = exception_keeper_type_21;
            exception_value = exception_keeper_value_21;
            exception_tb = exception_keeper_tb_21;
            exception_lineno = exception_keeper_lineno_21;

            goto frame_exception_exit_10;
            // End of try:

#if 0
            RESTORE_FRAME_EXCEPTION(frame_bb8f3d1ee4a89dee14c96eee07597f14_10);
#endif

            // Put the previous frame back on top.
            popFrameStack();

            goto frame_no_exception_8;

            frame_return_exit_3:;
#if 0
            RESTORE_FRAME_EXCEPTION(frame_bb8f3d1ee4a89dee14c96eee07597f14_10);
#endif

            // Put the previous frame back on top.
            popFrameStack();

            goto try_return_handler_25;

            frame_exception_exit_10:;

#if 0
            RESTORE_FRAME_EXCEPTION(frame_bb8f3d1ee4a89dee14c96eee07597f14_10);
#endif

            if (exception_tb == NULL) {
                exception_tb = MAKE_TRACEBACK(frame_bb8f3d1ee4a89dee14c96eee07597f14_10, exception_lineno);
            } else if (exception_tb->tb_frame != &frame_bb8f3d1ee4a89dee14c96eee07597f14_10->m_frame) {
                exception_tb = ADD_TRACEBACK(exception_tb, frame_bb8f3d1ee4a89dee14c96eee07597f14_10, exception_lineno);
            }

            // Attaches locals to frame if any.
            Nuitka_Frame_AttachLocals(
                frame_bb8f3d1ee4a89dee14c96eee07597f14_10,
                type_description_3,
                outline_8_var_tp
            );


            // Release cached frame if used for exception.
            if (frame_bb8f3d1ee4a89dee14c96eee07597f14_10 == cache_frame_bb8f3d1ee4a89dee14c96eee07597f14_10) {
#if _DEBUG_REFCOUNTS
                count_active_frame_cache_instances -= 1;
                count_released_frame_cache_instances += 1;
#endif

                Py_DECREF(cache_frame_bb8f3d1ee4a89dee14c96eee07597f14_10);
                cache_frame_bb8f3d1ee4a89dee14c96eee07597f14_10 = NULL;
            }

            assertFrameObject(frame_bb8f3d1ee4a89dee14c96eee07597f14_10);

            // Put the previous frame back on top.
            popFrameStack();

            // Return the error.
            goto nested_frame_exit_9;

            frame_no_exception_8:;
            goto skip_nested_handling_8;
            nested_frame_exit_9:;
            type_description_2 = "o";
            goto try_except_handler_25;
            skip_nested_handling_8:;
            NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
            return NULL;
            // Return handler code:
            try_return_handler_25:;
            Py_XDECREF(outline_8_var_tp);
            outline_8_var_tp = NULL;
            goto outline_result_9;
            // Exception handler code:
            try_except_handler_25:;
            exception_keeper_type_22 = exception_type;
            exception_keeper_value_22 = exception_value;
            exception_keeper_tb_22 = exception_tb;
            exception_keeper_lineno_22 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF(outline_8_var_tp);
            outline_8_var_tp = NULL;
            // Re-raise.
            exception_type = exception_keeper_type_22;
            exception_value = exception_keeper_value_22;
            exception_tb = exception_keeper_tb_22;
            exception_lineno = exception_keeper_lineno_22;

            goto outline_exception_9;
            // End of try:
            NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
            return NULL;
            outline_exception_9:;
            exception_lineno = 130;
            goto try_except_handler_24;
            outline_result_9:;
            tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE(&tmp_left_value_7, tmp_right_value_7);
            Py_DECREF(tmp_right_value_7);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 130;
                type_description_2 = "o";
                goto try_except_handler_24;
            }
            tmp_assign_source_78 = tmp_left_value_7;
            tmp_Random_randint$class_inplace_1__value = tmp_assign_source_78;

        }
        CHECK_OBJECT(tmp_Random_randint$class_inplace_1__value);
        tmp_dictset_value = tmp_Random_randint$class_inplace_1__value;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__6_Random_randint_128, mod_consts[30], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 130;
            type_description_2 = "o";
            goto try_except_handler_24;
        }
        goto try_end_7;
        // Exception handler code:
        try_except_handler_24:;
        exception_keeper_type_23 = exception_type;
        exception_keeper_value_23 = exception_value;
        exception_keeper_tb_23 = exception_tb;
        exception_keeper_lineno_23 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Random_randint$class_inplace_1__value);
        Py_DECREF(tmp_Random_randint$class_inplace_1__value);
        tmp_Random_randint$class_inplace_1__value = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_23;
        exception_value = exception_keeper_value_23;
        exception_tb = exception_keeper_tb_23;
        exception_lineno = exception_keeper_lineno_23;

        goto frame_exception_exit_8;
        // End of try:
        try_end_7:;
        CHECK_OBJECT(tmp_Random_randint$class_inplace_1__value);
        Py_DECREF(tmp_Random_randint$class_inplace_1__value);
        tmp_Random_randint$class_inplace_1__value = NULL;


        tmp_dictset_value = MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__5_generic();

        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__6_Random_randint_128, mod_consts[110], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 132;
            type_description_2 = "o";
            goto frame_exception_exit_8;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_14d1df92c23bec3fdef4b49181e32f5d_8);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_9;

        frame_exception_exit_8:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_14d1df92c23bec3fdef4b49181e32f5d_8);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_14d1df92c23bec3fdef4b49181e32f5d_8, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_14d1df92c23bec3fdef4b49181e32f5d_8->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_14d1df92c23bec3fdef4b49181e32f5d_8, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_14d1df92c23bec3fdef4b49181e32f5d_8,
            type_description_2,
            outline_6_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_14d1df92c23bec3fdef4b49181e32f5d_8 == cache_frame_14d1df92c23bec3fdef4b49181e32f5d_8) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_14d1df92c23bec3fdef4b49181e32f5d_8);
            cache_frame_14d1df92c23bec3fdef4b49181e32f5d_8 = NULL;
        }

        assertFrameObject(frame_14d1df92c23bec3fdef4b49181e32f5d_8);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_7;

        frame_no_exception_9:;
        goto skip_nested_handling_9;
        nested_frame_exit_7:;

        goto try_except_handler_21;
        skip_nested_handling_9:;
        {
            nuitka_bool tmp_condition_result_37;
            PyObject *tmp_cmp_expr_left_7;
            PyObject *tmp_cmp_expr_right_7;
            CHECK_OBJECT(tmp_class_creation_6__bases);
            tmp_cmp_expr_left_7 = tmp_class_creation_6__bases;
            CHECK_OBJECT(tmp_class_creation_6__bases_orig);
            tmp_cmp_expr_right_7 = tmp_class_creation_6__bases_orig;
            tmp_condition_result_37 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_7, tmp_cmp_expr_right_7);
            if (tmp_condition_result_37 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 128;

                goto try_except_handler_21;
            }
            if (tmp_condition_result_37 == NUITKA_BOOL_TRUE) {
                goto branch_yes_25;
            } else {
                goto branch_no_25;
            }
            assert(tmp_condition_result_37 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_25:;
        CHECK_OBJECT(tmp_class_creation_6__bases_orig);
        tmp_dictset_value = tmp_class_creation_6__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__6_Random_randint_128, mod_consts[98], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 128;

            goto try_except_handler_21;
        }
        branch_no_25:;
        {
            PyObject *tmp_assign_source_83;
            PyObject *tmp_called_value_35;
            PyObject *tmp_args_value_20;
            PyObject *tmp_tuple_element_33;
            PyObject *tmp_kwargs_value_20;
            CHECK_OBJECT(tmp_class_creation_6__metaclass);
            tmp_called_value_35 = tmp_class_creation_6__metaclass;
            tmp_tuple_element_33 = mod_consts[119];
            tmp_args_value_20 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_20, 0, tmp_tuple_element_33);
            CHECK_OBJECT(tmp_class_creation_6__bases);
            tmp_tuple_element_33 = tmp_class_creation_6__bases;
            PyTuple_SET_ITEM0(tmp_args_value_20, 1, tmp_tuple_element_33);
            tmp_tuple_element_33 = locals_numba$core$typing$randomdecl$$$class__6_Random_randint_128;
            PyTuple_SET_ITEM0(tmp_args_value_20, 2, tmp_tuple_element_33);
            CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
            tmp_kwargs_value_20 = tmp_class_creation_6__class_decl_dict;
            frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 128;
            tmp_assign_source_83 = CALL_FUNCTION(tmp_called_value_35, tmp_args_value_20, tmp_kwargs_value_20);
            Py_DECREF(tmp_args_value_20);
            if (tmp_assign_source_83 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 128;

                goto try_except_handler_21;
            }
            assert(outline_6_var___class__ == NULL);
            outline_6_var___class__ = tmp_assign_source_83;
        }
        CHECK_OBJECT(outline_6_var___class__);
        tmp_args_element_value_15 = outline_6_var___class__;
        Py_INCREF(tmp_args_element_value_15);
        goto try_return_handler_21;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_21:;
        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__6_Random_randint_128);
        locals_numba$core$typing$randomdecl$$$class__6_Random_randint_128 = NULL;
        goto try_return_handler_20;
        // Exception handler code:
        try_except_handler_21:;
        exception_keeper_type_24 = exception_type;
        exception_keeper_value_24 = exception_value;
        exception_keeper_tb_24 = exception_tb;
        exception_keeper_lineno_24 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__6_Random_randint_128);
        locals_numba$core$typing$randomdecl$$$class__6_Random_randint_128 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_24;
        exception_value = exception_keeper_value_24;
        exception_tb = exception_keeper_tb_24;
        exception_lineno = exception_keeper_lineno_24;

        goto try_except_handler_20;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_20:;
        CHECK_OBJECT(outline_6_var___class__);
        Py_DECREF(outline_6_var___class__);
        outline_6_var___class__ = NULL;
        goto outline_result_7;
        // Exception handler code:
        try_except_handler_20:;
        exception_keeper_type_25 = exception_type;
        exception_keeper_value_25 = exception_value;
        exception_keeper_tb_25 = exception_tb;
        exception_keeper_lineno_25 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_25;
        exception_value = exception_keeper_value_25;
        exception_tb = exception_keeper_tb_25;
        exception_lineno = exception_keeper_lineno_25;

        goto outline_exception_7;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_7:;
        exception_lineno = 128;
        goto try_except_handler_19;
        outline_result_7:;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 127;
        tmp_assign_source_72 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_31, tmp_args_element_value_15);
        Py_DECREF(tmp_called_value_31);
        Py_DECREF(tmp_args_element_value_15);
        if (tmp_assign_source_72 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 127;

            goto try_except_handler_19;
        }
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[119], tmp_assign_source_72);
    }
    goto try_end_8;
    // Exception handler code:
    try_except_handler_19:;
    exception_keeper_type_26 = exception_type;
    exception_keeper_value_26 = exception_value;
    exception_keeper_tb_26 = exception_tb;
    exception_keeper_lineno_26 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_6__bases_orig);
    tmp_class_creation_6__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_6__bases);
    tmp_class_creation_6__bases = NULL;
    Py_XDECREF(tmp_class_creation_6__class_decl_dict);
    tmp_class_creation_6__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_6__metaclass);
    tmp_class_creation_6__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_6__prepared);
    tmp_class_creation_6__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_26;
    exception_value = exception_keeper_value_26;
    exception_tb = exception_keeper_tb_26;
    exception_lineno = exception_keeper_lineno_26;

    goto frame_exception_exit_1;
    // End of try:
    try_end_8:;
    CHECK_OBJECT(tmp_class_creation_6__bases_orig);
    Py_DECREF(tmp_class_creation_6__bases_orig);
    tmp_class_creation_6__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_6__bases);
    Py_DECREF(tmp_class_creation_6__bases);
    tmp_class_creation_6__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
    Py_DECREF(tmp_class_creation_6__class_decl_dict);
    tmp_class_creation_6__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_6__metaclass);
    Py_DECREF(tmp_class_creation_6__metaclass);
    tmp_class_creation_6__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_6__prepared);
    Py_DECREF(tmp_class_creation_6__prepared);
    tmp_class_creation_6__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_84;
        PyObject *tmp_tuple_element_34;
        tmp_tuple_element_34 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[67]);

        if (unlikely(tmp_tuple_element_34 == NULL)) {
            tmp_tuple_element_34 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[67]);
        }

        if (tmp_tuple_element_34 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 139;

            goto try_except_handler_27;
        }
        tmp_assign_source_84 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_84, 0, tmp_tuple_element_34);
        assert(tmp_class_creation_7__bases_orig == NULL);
        tmp_class_creation_7__bases_orig = tmp_assign_source_84;
    }
    {
        PyObject *tmp_assign_source_85;
        PyObject *tmp_dircall_arg1_7;
        CHECK_OBJECT(tmp_class_creation_7__bases_orig);
        tmp_dircall_arg1_7 = tmp_class_creation_7__bases_orig;
        Py_INCREF(tmp_dircall_arg1_7);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_7};
            tmp_assign_source_85 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_85 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 139;

            goto try_except_handler_27;
        }
        assert(tmp_class_creation_7__bases == NULL);
        tmp_class_creation_7__bases = tmp_assign_source_85;
    }
    {
        PyObject *tmp_assign_source_86;
        tmp_assign_source_86 = PyDict_New();
        assert(tmp_class_creation_7__class_decl_dict == NULL);
        tmp_class_creation_7__class_decl_dict = tmp_assign_source_86;
    }
    {
        PyObject *tmp_assign_source_87;
        PyObject *tmp_metaclass_value_7;
        bool tmp_condition_result_38;
        PyObject *tmp_key_value_19;
        PyObject *tmp_dict_arg_value_19;
        PyObject *tmp_dict_arg_value_20;
        PyObject *tmp_key_value_20;
        nuitka_bool tmp_condition_result_39;
        int tmp_truth_name_7;
        PyObject *tmp_type_arg_13;
        PyObject *tmp_expression_value_53;
        PyObject *tmp_subscript_value_7;
        PyObject *tmp_bases_value_7;
        tmp_key_value_19 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
        tmp_dict_arg_value_19 = tmp_class_creation_7__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_19, tmp_key_value_19);
        assert(!(tmp_res == -1));
        tmp_condition_result_38 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_38 != false) {
            goto condexpr_true_13;
        } else {
            goto condexpr_false_13;
        }
        condexpr_true_13:;
        CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
        tmp_dict_arg_value_20 = tmp_class_creation_7__class_decl_dict;
        tmp_key_value_20 = mod_consts[87];
        tmp_metaclass_value_7 = DICT_GET_ITEM0(tmp_dict_arg_value_20, tmp_key_value_20);
        if (tmp_metaclass_value_7 == NULL) {
            tmp_metaclass_value_7 = Py_None;
        }
        assert(!(tmp_metaclass_value_7 == NULL));
        Py_INCREF(tmp_metaclass_value_7);
        goto condexpr_end_13;
        condexpr_false_13:;
        CHECK_OBJECT(tmp_class_creation_7__bases);
        tmp_truth_name_7 = CHECK_IF_TRUE(tmp_class_creation_7__bases);
        if (tmp_truth_name_7 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 139;

            goto try_except_handler_27;
        }
        tmp_condition_result_39 = tmp_truth_name_7 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_39 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_14;
        } else {
            goto condexpr_false_14;
        }
        condexpr_true_14:;
        CHECK_OBJECT(tmp_class_creation_7__bases);
        tmp_expression_value_53 = tmp_class_creation_7__bases;
        tmp_subscript_value_7 = mod_consts[13];
        tmp_type_arg_13 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_53, tmp_subscript_value_7, 0);
        if (tmp_type_arg_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 139;

            goto try_except_handler_27;
        }
        tmp_metaclass_value_7 = BUILTIN_TYPE1(tmp_type_arg_13);
        Py_DECREF(tmp_type_arg_13);
        if (tmp_metaclass_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 139;

            goto try_except_handler_27;
        }
        goto condexpr_end_14;
        condexpr_false_14:;
        tmp_metaclass_value_7 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_7);
        condexpr_end_14:;
        condexpr_end_13:;
        CHECK_OBJECT(tmp_class_creation_7__bases);
        tmp_bases_value_7 = tmp_class_creation_7__bases;
        tmp_assign_source_87 = SELECT_METACLASS(tmp_metaclass_value_7, tmp_bases_value_7);
        Py_DECREF(tmp_metaclass_value_7);
        if (tmp_assign_source_87 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 139;

            goto try_except_handler_27;
        }
        assert(tmp_class_creation_7__metaclass == NULL);
        tmp_class_creation_7__metaclass = tmp_assign_source_87;
    }
    {
        bool tmp_condition_result_40;
        PyObject *tmp_key_value_21;
        PyObject *tmp_dict_arg_value_21;
        tmp_key_value_21 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
        tmp_dict_arg_value_21 = tmp_class_creation_7__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_21, tmp_key_value_21);
        assert(!(tmp_res == -1));
        tmp_condition_result_40 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_40 != false) {
            goto branch_yes_26;
        } else {
            goto branch_no_26;
        }
    }
    branch_yes_26:;
    CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_7__class_decl_dict;
    tmp_dictdel_key = mod_consts[87];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 139;

        goto try_except_handler_27;
    }
    branch_no_26:;
    {
        nuitka_bool tmp_condition_result_41;
        PyObject *tmp_expression_value_54;
        CHECK_OBJECT(tmp_class_creation_7__metaclass);
        tmp_expression_value_54 = tmp_class_creation_7__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_54, mod_consts[88]);
        tmp_condition_result_41 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_41 == NUITKA_BOOL_TRUE) {
            goto branch_yes_27;
        } else {
            goto branch_no_27;
        }
    }
    branch_yes_27:;
    {
        PyObject *tmp_assign_source_88;
        PyObject *tmp_called_value_36;
        PyObject *tmp_expression_value_55;
        PyObject *tmp_args_value_21;
        PyObject *tmp_tuple_element_35;
        PyObject *tmp_kwargs_value_21;
        CHECK_OBJECT(tmp_class_creation_7__metaclass);
        tmp_expression_value_55 = tmp_class_creation_7__metaclass;
        tmp_called_value_36 = LOOKUP_ATTRIBUTE(tmp_expression_value_55, mod_consts[88]);
        if (tmp_called_value_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 139;

            goto try_except_handler_27;
        }
        tmp_tuple_element_35 = mod_consts[124];
        tmp_args_value_21 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_21, 0, tmp_tuple_element_35);
        CHECK_OBJECT(tmp_class_creation_7__bases);
        tmp_tuple_element_35 = tmp_class_creation_7__bases;
        PyTuple_SET_ITEM0(tmp_args_value_21, 1, tmp_tuple_element_35);
        CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
        tmp_kwargs_value_21 = tmp_class_creation_7__class_decl_dict;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 139;
        tmp_assign_source_88 = CALL_FUNCTION(tmp_called_value_36, tmp_args_value_21, tmp_kwargs_value_21);
        Py_DECREF(tmp_called_value_36);
        Py_DECREF(tmp_args_value_21);
        if (tmp_assign_source_88 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 139;

            goto try_except_handler_27;
        }
        assert(tmp_class_creation_7__prepared == NULL);
        tmp_class_creation_7__prepared = tmp_assign_source_88;
    }
    {
        bool tmp_condition_result_42;
        PyObject *tmp_operand_value_7;
        PyObject *tmp_expression_value_56;
        CHECK_OBJECT(tmp_class_creation_7__prepared);
        tmp_expression_value_56 = tmp_class_creation_7__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_56, mod_consts[89]);
        tmp_operand_value_7 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_7);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 139;

            goto try_except_handler_27;
        }
        tmp_condition_result_42 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_42 != false) {
            goto branch_yes_28;
        } else {
            goto branch_no_28;
        }
    }
    branch_yes_28:;
    {
        PyObject *tmp_raise_type_7;
        PyObject *tmp_raise_value_7;
        PyObject *tmp_left_value_8;
        PyObject *tmp_right_value_8;
        PyObject *tmp_tuple_element_36;
        PyObject *tmp_getattr_target_7;
        PyObject *tmp_getattr_attr_7;
        PyObject *tmp_getattr_default_7;
        tmp_raise_type_7 = PyExc_TypeError;
        tmp_left_value_8 = mod_consts[90];
        CHECK_OBJECT(tmp_class_creation_7__metaclass);
        tmp_getattr_target_7 = tmp_class_creation_7__metaclass;
        tmp_getattr_attr_7 = mod_consts[91];
        tmp_getattr_default_7 = mod_consts[92];
        tmp_tuple_element_36 = BUILTIN_GETATTR(tmp_getattr_target_7, tmp_getattr_attr_7, tmp_getattr_default_7);
        if (tmp_tuple_element_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 139;

            goto try_except_handler_27;
        }
        tmp_right_value_8 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_57;
            PyObject *tmp_type_arg_14;
            PyTuple_SET_ITEM(tmp_right_value_8, 0, tmp_tuple_element_36);
            CHECK_OBJECT(tmp_class_creation_7__prepared);
            tmp_type_arg_14 = tmp_class_creation_7__prepared;
            tmp_expression_value_57 = BUILTIN_TYPE1(tmp_type_arg_14);
            assert(!(tmp_expression_value_57 == NULL));
            tmp_tuple_element_36 = LOOKUP_ATTRIBUTE(tmp_expression_value_57, mod_consts[91]);
            Py_DECREF(tmp_expression_value_57);
            if (tmp_tuple_element_36 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 139;

                goto tuple_build_exception_8;
            }
            PyTuple_SET_ITEM(tmp_right_value_8, 1, tmp_tuple_element_36);
        }
        goto tuple_build_noexception_8;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_8:;
        Py_DECREF(tmp_right_value_8);
        goto try_except_handler_27;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_8:;
        tmp_raise_value_7 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_8, tmp_right_value_8);
        Py_DECREF(tmp_right_value_8);
        if (tmp_raise_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 139;

            goto try_except_handler_27;
        }
        exception_type = tmp_raise_type_7;
        Py_INCREF(tmp_raise_type_7);
        exception_value = tmp_raise_value_7;
        exception_lineno = 139;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_27;
    }
    branch_no_28:;
    goto branch_end_27;
    branch_no_27:;
    {
        PyObject *tmp_assign_source_89;
        tmp_assign_source_89 = PyDict_New();
        assert(tmp_class_creation_7__prepared == NULL);
        tmp_class_creation_7__prepared = tmp_assign_source_89;
    }
    branch_end_27:;
    {
        PyObject *tmp_assign_source_90;
        PyObject *tmp_called_value_37;
        PyObject *tmp_called_value_38;
        PyObject *tmp_args_value_22;
        PyObject *tmp_tuple_element_37;
        PyObject *tmp_expression_value_58;
        PyObject *tmp_kwargs_value_22;
        PyObject *tmp_args_element_value_21;
        tmp_called_value_38 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_38 == NULL)) {
            tmp_called_value_38 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 138;

            goto try_except_handler_27;
        }
        tmp_expression_value_58 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[19]);

        if (unlikely(tmp_expression_value_58 == NULL)) {
            tmp_expression_value_58 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[19]);
        }

        if (tmp_expression_value_58 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 138;

            goto try_except_handler_27;
        }
        tmp_tuple_element_37 = LOOKUP_ATTRIBUTE(tmp_expression_value_58, mod_consts[125]);
        if (tmp_tuple_element_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 138;

            goto try_except_handler_27;
        }
        tmp_args_value_22 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_22, 0, tmp_tuple_element_37);
        tmp_kwargs_value_22 = PyDict_Copy(mod_consts[126]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 138;
        tmp_called_value_37 = CALL_FUNCTION(tmp_called_value_38, tmp_args_value_22, tmp_kwargs_value_22);
        Py_DECREF(tmp_args_value_22);
        Py_DECREF(tmp_kwargs_value_22);
        if (tmp_called_value_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 138;

            goto try_except_handler_27;
        }
        {
            PyObject *tmp_set_locals_7;
            CHECK_OBJECT(tmp_class_creation_7__prepared);
            tmp_set_locals_7 = tmp_class_creation_7__prepared;
            locals_numba$core$typing$randomdecl$$$class__7_Random_randrange_139 = tmp_set_locals_7;
            Py_INCREF(tmp_set_locals_7);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[93];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__7_Random_randrange_139, mod_consts[94], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 139;

            goto try_except_handler_29;
        }
        tmp_dictset_value = mod_consts[124];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__7_Random_randrange_139, mod_consts[96], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 139;

            goto try_except_handler_29;
        }
        if (isFrameUnusable(cache_frame_1bf54db38dd0c5dccaaf65af3ac21e29_11)) {
            Py_XDECREF(cache_frame_1bf54db38dd0c5dccaaf65af3ac21e29_11);

#if _DEBUG_REFCOUNTS
            if (cache_frame_1bf54db38dd0c5dccaaf65af3ac21e29_11 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_1bf54db38dd0c5dccaaf65af3ac21e29_11 = MAKE_FUNCTION_FRAME(codeobj_1bf54db38dd0c5dccaaf65af3ac21e29, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_1bf54db38dd0c5dccaaf65af3ac21e29_11->m_type_description == NULL);
        frame_1bf54db38dd0c5dccaaf65af3ac21e29_11 = cache_frame_1bf54db38dd0c5dccaaf65af3ac21e29_11;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_1bf54db38dd0c5dccaaf65af3ac21e29_11);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_1bf54db38dd0c5dccaaf65af3ac21e29_11) == 2); // Frame stack

        // Framed code:
        // Tried code:
        {
            PyObject *tmp_assign_source_91;
            PyObject *tmp_iter_arg_4;
            tmp_iter_arg_4 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__7_Random_randrange_139, mod_consts[84]);

            if (tmp_iter_arg_4 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_iter_arg_4 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[84]);

                    if (unlikely(tmp_iter_arg_4 == NULL)) {
                        tmp_iter_arg_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[84]);
                    }

                    if (tmp_iter_arg_4 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 140;
                        type_description_2 = "o";
                        goto try_except_handler_30;
                    }
                    Py_INCREF(tmp_iter_arg_4);
                } else {
                    goto try_except_handler_30;
                }
            }

            tmp_assign_source_91 = MAKE_ITERATOR(tmp_iter_arg_4);
            Py_DECREF(tmp_iter_arg_4);
            if (tmp_assign_source_91 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 140;
                type_description_2 = "o";
                goto try_except_handler_30;
            }
            assert(tmp_Random_randrange$listcomp_1__$0 == NULL);
            tmp_Random_randrange$listcomp_1__$0 = tmp_assign_source_91;
        }
        {
            PyObject *tmp_assign_source_92;
            tmp_assign_source_92 = PyList_New(0);
            assert(tmp_Random_randrange$listcomp_1__contraction == NULL);
            tmp_Random_randrange$listcomp_1__contraction = tmp_assign_source_92;
        }
        if (isFrameUnusable(cache_frame_4225d704c73218ddcf9419606f30ebcf_12)) {
            Py_XDECREF(cache_frame_4225d704c73218ddcf9419606f30ebcf_12);

#if _DEBUG_REFCOUNTS
            if (cache_frame_4225d704c73218ddcf9419606f30ebcf_12 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_4225d704c73218ddcf9419606f30ebcf_12 = MAKE_FUNCTION_FRAME(codeobj_4225d704c73218ddcf9419606f30ebcf, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_4225d704c73218ddcf9419606f30ebcf_12->m_type_description == NULL);
        frame_4225d704c73218ddcf9419606f30ebcf_12 = cache_frame_4225d704c73218ddcf9419606f30ebcf_12;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_4225d704c73218ddcf9419606f30ebcf_12);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_4225d704c73218ddcf9419606f30ebcf_12) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_4:;
        {
            PyObject *tmp_next_source_4;
            PyObject *tmp_assign_source_93;
            CHECK_OBJECT(tmp_Random_randrange$listcomp_1__$0);
            tmp_next_source_4 = tmp_Random_randrange$listcomp_1__$0;
            tmp_assign_source_93 = ITERATOR_NEXT(tmp_next_source_4);
            if (tmp_assign_source_93 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_4;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_3 = "o";
                    exception_lineno = 140;
                    goto try_except_handler_31;
                }
            }

            {
                PyObject *old = tmp_Random_randrange$listcomp_1__iter_value_0;
                tmp_Random_randrange$listcomp_1__iter_value_0 = tmp_assign_source_93;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_94;
            CHECK_OBJECT(tmp_Random_randrange$listcomp_1__iter_value_0);
            tmp_assign_source_94 = tmp_Random_randrange$listcomp_1__iter_value_0;
            {
                PyObject *old = outline_10_var_tp;
                outline_10_var_tp = tmp_assign_source_94;
                Py_INCREF(outline_10_var_tp);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_4;
            PyObject *tmp_append_value_4;
            PyObject *tmp_called_value_39;
            PyObject *tmp_args_element_value_22;
            PyObject *tmp_args_element_value_23;
            CHECK_OBJECT(tmp_Random_randrange$listcomp_1__contraction);
            tmp_append_list_4 = tmp_Random_randrange$listcomp_1__contraction;
            tmp_called_value_39 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[25]);

            if (unlikely(tmp_called_value_39 == NULL)) {
                tmp_called_value_39 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[25]);
            }

            if (tmp_called_value_39 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 140;
                type_description_3 = "o";
                goto try_except_handler_31;
            }
            CHECK_OBJECT(outline_10_var_tp);
            tmp_args_element_value_22 = outline_10_var_tp;
            CHECK_OBJECT(outline_10_var_tp);
            tmp_args_element_value_23 = outline_10_var_tp;
            frame_4225d704c73218ddcf9419606f30ebcf_12->m_frame.f_lineno = 140;
            {
                PyObject *call_args[] = {tmp_args_element_value_22, tmp_args_element_value_23};
                tmp_append_value_4 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_39, call_args);
            }

            if (tmp_append_value_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 140;
                type_description_3 = "o";
                goto try_except_handler_31;
            }
            assert(PyList_Check(tmp_append_list_4));
            tmp_result = LIST_APPEND1(tmp_append_list_4, tmp_append_value_4);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 140;
                type_description_3 = "o";
                goto try_except_handler_31;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 140;
            type_description_3 = "o";
            goto try_except_handler_31;
        }
        goto loop_start_4;
        loop_end_4:;
        CHECK_OBJECT(tmp_Random_randrange$listcomp_1__contraction);
        tmp_dictset_value = tmp_Random_randrange$listcomp_1__contraction;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_31;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_31:;
        CHECK_OBJECT(tmp_Random_randrange$listcomp_1__$0);
        Py_DECREF(tmp_Random_randrange$listcomp_1__$0);
        tmp_Random_randrange$listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_Random_randrange$listcomp_1__contraction);
        Py_DECREF(tmp_Random_randrange$listcomp_1__contraction);
        tmp_Random_randrange$listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_Random_randrange$listcomp_1__iter_value_0);
        tmp_Random_randrange$listcomp_1__iter_value_0 = NULL;
        goto frame_return_exit_4;
        // Exception handler code:
        try_except_handler_31:;
        exception_keeper_type_27 = exception_type;
        exception_keeper_value_27 = exception_value;
        exception_keeper_tb_27 = exception_tb;
        exception_keeper_lineno_27 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Random_randrange$listcomp_1__$0);
        Py_DECREF(tmp_Random_randrange$listcomp_1__$0);
        tmp_Random_randrange$listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_Random_randrange$listcomp_1__contraction);
        Py_DECREF(tmp_Random_randrange$listcomp_1__contraction);
        tmp_Random_randrange$listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_Random_randrange$listcomp_1__iter_value_0);
        tmp_Random_randrange$listcomp_1__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_27;
        exception_value = exception_keeper_value_27;
        exception_tb = exception_keeper_tb_27;
        exception_lineno = exception_keeper_lineno_27;

        goto frame_exception_exit_12;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_4225d704c73218ddcf9419606f30ebcf_12);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_10;

        frame_return_exit_4:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_4225d704c73218ddcf9419606f30ebcf_12);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_30;

        frame_exception_exit_12:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_4225d704c73218ddcf9419606f30ebcf_12);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_4225d704c73218ddcf9419606f30ebcf_12, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_4225d704c73218ddcf9419606f30ebcf_12->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_4225d704c73218ddcf9419606f30ebcf_12, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_4225d704c73218ddcf9419606f30ebcf_12,
            type_description_3,
            outline_10_var_tp
        );


        // Release cached frame if used for exception.
        if (frame_4225d704c73218ddcf9419606f30ebcf_12 == cache_frame_4225d704c73218ddcf9419606f30ebcf_12) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_4225d704c73218ddcf9419606f30ebcf_12);
            cache_frame_4225d704c73218ddcf9419606f30ebcf_12 = NULL;
        }

        assertFrameObject(frame_4225d704c73218ddcf9419606f30ebcf_12);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_11;

        frame_no_exception_10:;
        goto skip_nested_handling_10;
        nested_frame_exit_11:;
        type_description_2 = "o";
        goto try_except_handler_30;
        skip_nested_handling_10:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_30:;
        Py_XDECREF(outline_10_var_tp);
        outline_10_var_tp = NULL;
        goto outline_result_11;
        // Exception handler code:
        try_except_handler_30:;
        exception_keeper_type_28 = exception_type;
        exception_keeper_value_28 = exception_value;
        exception_keeper_tb_28 = exception_tb;
        exception_keeper_lineno_28 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_10_var_tp);
        outline_10_var_tp = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_28;
        exception_value = exception_keeper_value_28;
        exception_tb = exception_keeper_tb_28;
        exception_lineno = exception_keeper_lineno_28;

        goto outline_exception_11;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_11:;
        exception_lineno = 140;
        goto frame_exception_exit_11;
        outline_result_11:;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__7_Random_randrange_139, mod_consts[30], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 140;
            type_description_2 = "o";
            goto frame_exception_exit_11;
        }
        {
            PyObject *tmp_assign_source_95;
            tmp_assign_source_95 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__7_Random_randrange_139, mod_consts[30]);

            if (unlikely(tmp_assign_source_95 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[30]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 141;
                type_description_2 = "o";
                goto frame_exception_exit_11;
            }

            if (tmp_assign_source_95 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 141;
                type_description_2 = "o";
                goto frame_exception_exit_11;
            }
            assert(tmp_Random_randrange$class_inplace_1__value == NULL);
            tmp_Random_randrange$class_inplace_1__value = tmp_assign_source_95;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_96;
            PyObject *tmp_left_value_9;
            PyObject *tmp_right_value_9;
            CHECK_OBJECT(tmp_Random_randrange$class_inplace_1__value);
            tmp_left_value_9 = tmp_Random_randrange$class_inplace_1__value;
            // Tried code:
            {
                PyObject *tmp_assign_source_97;
                PyObject *tmp_iter_arg_5;
                tmp_iter_arg_5 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__7_Random_randrange_139, mod_consts[84]);

                if (tmp_iter_arg_5 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_iter_arg_5 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[84]);

                        if (unlikely(tmp_iter_arg_5 == NULL)) {
                            tmp_iter_arg_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[84]);
                        }

                        if (tmp_iter_arg_5 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 141;
                            type_description_2 = "o";
                            goto try_except_handler_33;
                        }
                        Py_INCREF(tmp_iter_arg_5);
                    } else {
                        goto try_except_handler_33;
                    }
                }

                tmp_assign_source_97 = MAKE_ITERATOR(tmp_iter_arg_5);
                Py_DECREF(tmp_iter_arg_5);
                if (tmp_assign_source_97 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 141;
                    type_description_2 = "o";
                    goto try_except_handler_33;
                }
                assert(tmp_Random_randrange$listcomp_2__$0 == NULL);
                tmp_Random_randrange$listcomp_2__$0 = tmp_assign_source_97;
            }
            {
                PyObject *tmp_assign_source_98;
                tmp_assign_source_98 = PyList_New(0);
                assert(tmp_Random_randrange$listcomp_2__contraction == NULL);
                tmp_Random_randrange$listcomp_2__contraction = tmp_assign_source_98;
            }
            if (isFrameUnusable(cache_frame_91492da9e4317f81f8ee750a3886e03c_13)) {
                Py_XDECREF(cache_frame_91492da9e4317f81f8ee750a3886e03c_13);

#if _DEBUG_REFCOUNTS
                if (cache_frame_91492da9e4317f81f8ee750a3886e03c_13 == NULL) {
                    count_active_frame_cache_instances += 1;
                } else {
                    count_released_frame_cache_instances += 1;
                }
                count_allocated_frame_cache_instances += 1;
#endif
                cache_frame_91492da9e4317f81f8ee750a3886e03c_13 = MAKE_FUNCTION_FRAME(codeobj_91492da9e4317f81f8ee750a3886e03c, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
            } else {
                count_hit_frame_cache_instances += 1;
#endif
            }
            assert(cache_frame_91492da9e4317f81f8ee750a3886e03c_13->m_type_description == NULL);
            frame_91492da9e4317f81f8ee750a3886e03c_13 = cache_frame_91492da9e4317f81f8ee750a3886e03c_13;

            // Push the new frame as the currently active one.
            pushFrameStack(frame_91492da9e4317f81f8ee750a3886e03c_13);

            // Mark the frame object as in use, ref count 1 will be up for reuse.
            assert(Py_REFCNT(frame_91492da9e4317f81f8ee750a3886e03c_13) == 2); // Frame stack

            // Framed code:
            // Tried code:
            loop_start_5:;
            {
                PyObject *tmp_next_source_5;
                PyObject *tmp_assign_source_99;
                CHECK_OBJECT(tmp_Random_randrange$listcomp_2__$0);
                tmp_next_source_5 = tmp_Random_randrange$listcomp_2__$0;
                tmp_assign_source_99 = ITERATOR_NEXT(tmp_next_source_5);
                if (tmp_assign_source_99 == NULL) {
                    if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                        goto loop_end_5;
                    } else {

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        type_description_3 = "o";
                        exception_lineno = 141;
                        goto try_except_handler_34;
                    }
                }

                {
                    PyObject *old = tmp_Random_randrange$listcomp_2__iter_value_0;
                    tmp_Random_randrange$listcomp_2__iter_value_0 = tmp_assign_source_99;
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_assign_source_100;
                CHECK_OBJECT(tmp_Random_randrange$listcomp_2__iter_value_0);
                tmp_assign_source_100 = tmp_Random_randrange$listcomp_2__iter_value_0;
                {
                    PyObject *old = outline_11_var_tp;
                    outline_11_var_tp = tmp_assign_source_100;
                    Py_INCREF(outline_11_var_tp);
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_append_list_5;
                PyObject *tmp_append_value_5;
                PyObject *tmp_called_value_40;
                PyObject *tmp_args_element_value_24;
                PyObject *tmp_args_element_value_25;
                PyObject *tmp_args_element_value_26;
                CHECK_OBJECT(tmp_Random_randrange$listcomp_2__contraction);
                tmp_append_list_5 = tmp_Random_randrange$listcomp_2__contraction;
                tmp_called_value_40 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[25]);

                if (unlikely(tmp_called_value_40 == NULL)) {
                    tmp_called_value_40 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[25]);
                }

                if (tmp_called_value_40 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 141;
                    type_description_3 = "o";
                    goto try_except_handler_34;
                }
                CHECK_OBJECT(outline_11_var_tp);
                tmp_args_element_value_24 = outline_11_var_tp;
                CHECK_OBJECT(outline_11_var_tp);
                tmp_args_element_value_25 = outline_11_var_tp;
                CHECK_OBJECT(outline_11_var_tp);
                tmp_args_element_value_26 = outline_11_var_tp;
                frame_91492da9e4317f81f8ee750a3886e03c_13->m_frame.f_lineno = 141;
                {
                    PyObject *call_args[] = {tmp_args_element_value_24, tmp_args_element_value_25, tmp_args_element_value_26};
                    tmp_append_value_5 = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_40, call_args);
                }

                if (tmp_append_value_5 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 141;
                    type_description_3 = "o";
                    goto try_except_handler_34;
                }
                assert(PyList_Check(tmp_append_list_5));
                tmp_result = LIST_APPEND1(tmp_append_list_5, tmp_append_value_5);
                if (tmp_result == false) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 141;
                    type_description_3 = "o";
                    goto try_except_handler_34;
                }
            }
            if (CONSIDER_THREADING() == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 141;
                type_description_3 = "o";
                goto try_except_handler_34;
            }
            goto loop_start_5;
            loop_end_5:;
            CHECK_OBJECT(tmp_Random_randrange$listcomp_2__contraction);
            tmp_right_value_9 = tmp_Random_randrange$listcomp_2__contraction;
            Py_INCREF(tmp_right_value_9);
            goto try_return_handler_34;
            NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
            return NULL;
            // Return handler code:
            try_return_handler_34:;
            CHECK_OBJECT(tmp_Random_randrange$listcomp_2__$0);
            Py_DECREF(tmp_Random_randrange$listcomp_2__$0);
            tmp_Random_randrange$listcomp_2__$0 = NULL;
            CHECK_OBJECT(tmp_Random_randrange$listcomp_2__contraction);
            Py_DECREF(tmp_Random_randrange$listcomp_2__contraction);
            tmp_Random_randrange$listcomp_2__contraction = NULL;
            Py_XDECREF(tmp_Random_randrange$listcomp_2__iter_value_0);
            tmp_Random_randrange$listcomp_2__iter_value_0 = NULL;
            goto frame_return_exit_5;
            // Exception handler code:
            try_except_handler_34:;
            exception_keeper_type_29 = exception_type;
            exception_keeper_value_29 = exception_value;
            exception_keeper_tb_29 = exception_tb;
            exception_keeper_lineno_29 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT(tmp_Random_randrange$listcomp_2__$0);
            Py_DECREF(tmp_Random_randrange$listcomp_2__$0);
            tmp_Random_randrange$listcomp_2__$0 = NULL;
            CHECK_OBJECT(tmp_Random_randrange$listcomp_2__contraction);
            Py_DECREF(tmp_Random_randrange$listcomp_2__contraction);
            tmp_Random_randrange$listcomp_2__contraction = NULL;
            Py_XDECREF(tmp_Random_randrange$listcomp_2__iter_value_0);
            tmp_Random_randrange$listcomp_2__iter_value_0 = NULL;
            // Re-raise.
            exception_type = exception_keeper_type_29;
            exception_value = exception_keeper_value_29;
            exception_tb = exception_keeper_tb_29;
            exception_lineno = exception_keeper_lineno_29;

            goto frame_exception_exit_13;
            // End of try:

#if 0
            RESTORE_FRAME_EXCEPTION(frame_91492da9e4317f81f8ee750a3886e03c_13);
#endif

            // Put the previous frame back on top.
            popFrameStack();

            goto frame_no_exception_11;

            frame_return_exit_5:;
#if 0
            RESTORE_FRAME_EXCEPTION(frame_91492da9e4317f81f8ee750a3886e03c_13);
#endif

            // Put the previous frame back on top.
            popFrameStack();

            goto try_return_handler_33;

            frame_exception_exit_13:;

#if 0
            RESTORE_FRAME_EXCEPTION(frame_91492da9e4317f81f8ee750a3886e03c_13);
#endif

            if (exception_tb == NULL) {
                exception_tb = MAKE_TRACEBACK(frame_91492da9e4317f81f8ee750a3886e03c_13, exception_lineno);
            } else if (exception_tb->tb_frame != &frame_91492da9e4317f81f8ee750a3886e03c_13->m_frame) {
                exception_tb = ADD_TRACEBACK(exception_tb, frame_91492da9e4317f81f8ee750a3886e03c_13, exception_lineno);
            }

            // Attaches locals to frame if any.
            Nuitka_Frame_AttachLocals(
                frame_91492da9e4317f81f8ee750a3886e03c_13,
                type_description_3,
                outline_11_var_tp
            );


            // Release cached frame if used for exception.
            if (frame_91492da9e4317f81f8ee750a3886e03c_13 == cache_frame_91492da9e4317f81f8ee750a3886e03c_13) {
#if _DEBUG_REFCOUNTS
                count_active_frame_cache_instances -= 1;
                count_released_frame_cache_instances += 1;
#endif

                Py_DECREF(cache_frame_91492da9e4317f81f8ee750a3886e03c_13);
                cache_frame_91492da9e4317f81f8ee750a3886e03c_13 = NULL;
            }

            assertFrameObject(frame_91492da9e4317f81f8ee750a3886e03c_13);

            // Put the previous frame back on top.
            popFrameStack();

            // Return the error.
            goto nested_frame_exit_12;

            frame_no_exception_11:;
            goto skip_nested_handling_11;
            nested_frame_exit_12:;
            type_description_2 = "o";
            goto try_except_handler_33;
            skip_nested_handling_11:;
            NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
            return NULL;
            // Return handler code:
            try_return_handler_33:;
            Py_XDECREF(outline_11_var_tp);
            outline_11_var_tp = NULL;
            goto outline_result_12;
            // Exception handler code:
            try_except_handler_33:;
            exception_keeper_type_30 = exception_type;
            exception_keeper_value_30 = exception_value;
            exception_keeper_tb_30 = exception_tb;
            exception_keeper_lineno_30 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF(outline_11_var_tp);
            outline_11_var_tp = NULL;
            // Re-raise.
            exception_type = exception_keeper_type_30;
            exception_value = exception_keeper_value_30;
            exception_tb = exception_keeper_tb_30;
            exception_lineno = exception_keeper_lineno_30;

            goto outline_exception_12;
            // End of try:
            NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
            return NULL;
            outline_exception_12:;
            exception_lineno = 141;
            goto try_except_handler_32;
            outline_result_12:;
            tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE(&tmp_left_value_9, tmp_right_value_9);
            Py_DECREF(tmp_right_value_9);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 141;
                type_description_2 = "o";
                goto try_except_handler_32;
            }
            tmp_assign_source_96 = tmp_left_value_9;
            tmp_Random_randrange$class_inplace_1__value = tmp_assign_source_96;

        }
        CHECK_OBJECT(tmp_Random_randrange$class_inplace_1__value);
        tmp_dictset_value = tmp_Random_randrange$class_inplace_1__value;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__7_Random_randrange_139, mod_consts[30], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 141;
            type_description_2 = "o";
            goto try_except_handler_32;
        }
        goto try_end_9;
        // Exception handler code:
        try_except_handler_32:;
        exception_keeper_type_31 = exception_type;
        exception_keeper_value_31 = exception_value;
        exception_keeper_tb_31 = exception_tb;
        exception_keeper_lineno_31 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Random_randrange$class_inplace_1__value);
        Py_DECREF(tmp_Random_randrange$class_inplace_1__value);
        tmp_Random_randrange$class_inplace_1__value = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_31;
        exception_value = exception_keeper_value_31;
        exception_tb = exception_keeper_tb_31;
        exception_lineno = exception_keeper_lineno_31;

        goto frame_exception_exit_11;
        // End of try:
        try_end_9:;
        CHECK_OBJECT(tmp_Random_randrange$class_inplace_1__value);
        Py_DECREF(tmp_Random_randrange$class_inplace_1__value);
        tmp_Random_randrange$class_inplace_1__value = NULL;
        {
            PyObject *tmp_assign_source_101;
            tmp_assign_source_101 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__7_Random_randrange_139, mod_consts[30]);

            if (unlikely(tmp_assign_source_101 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[30]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 142;
                type_description_2 = "o";
                goto frame_exception_exit_11;
            }

            if (tmp_assign_source_101 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 142;
                type_description_2 = "o";
                goto frame_exception_exit_11;
            }
            assert(tmp_Random_randrange$class_inplace_2__value == NULL);
            tmp_Random_randrange$class_inplace_2__value = tmp_assign_source_101;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_102;
            PyObject *tmp_left_value_10;
            PyObject *tmp_right_value_10;
            CHECK_OBJECT(tmp_Random_randrange$class_inplace_2__value);
            tmp_left_value_10 = tmp_Random_randrange$class_inplace_2__value;
            // Tried code:
            {
                PyObject *tmp_assign_source_103;
                PyObject *tmp_iter_arg_6;
                tmp_iter_arg_6 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__7_Random_randrange_139, mod_consts[84]);

                if (tmp_iter_arg_6 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_iter_arg_6 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[84]);

                        if (unlikely(tmp_iter_arg_6 == NULL)) {
                            tmp_iter_arg_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[84]);
                        }

                        if (tmp_iter_arg_6 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 142;
                            type_description_2 = "o";
                            goto try_except_handler_36;
                        }
                        Py_INCREF(tmp_iter_arg_6);
                    } else {
                        goto try_except_handler_36;
                    }
                }

                tmp_assign_source_103 = MAKE_ITERATOR(tmp_iter_arg_6);
                Py_DECREF(tmp_iter_arg_6);
                if (tmp_assign_source_103 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 142;
                    type_description_2 = "o";
                    goto try_except_handler_36;
                }
                assert(tmp_Random_randrange$listcomp_3__$0 == NULL);
                tmp_Random_randrange$listcomp_3__$0 = tmp_assign_source_103;
            }
            {
                PyObject *tmp_assign_source_104;
                tmp_assign_source_104 = PyList_New(0);
                assert(tmp_Random_randrange$listcomp_3__contraction == NULL);
                tmp_Random_randrange$listcomp_3__contraction = tmp_assign_source_104;
            }
            if (isFrameUnusable(cache_frame_b98e11acd4bb624ee56a83fcadbf1365_14)) {
                Py_XDECREF(cache_frame_b98e11acd4bb624ee56a83fcadbf1365_14);

#if _DEBUG_REFCOUNTS
                if (cache_frame_b98e11acd4bb624ee56a83fcadbf1365_14 == NULL) {
                    count_active_frame_cache_instances += 1;
                } else {
                    count_released_frame_cache_instances += 1;
                }
                count_allocated_frame_cache_instances += 1;
#endif
                cache_frame_b98e11acd4bb624ee56a83fcadbf1365_14 = MAKE_FUNCTION_FRAME(codeobj_b98e11acd4bb624ee56a83fcadbf1365, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
            } else {
                count_hit_frame_cache_instances += 1;
#endif
            }
            assert(cache_frame_b98e11acd4bb624ee56a83fcadbf1365_14->m_type_description == NULL);
            frame_b98e11acd4bb624ee56a83fcadbf1365_14 = cache_frame_b98e11acd4bb624ee56a83fcadbf1365_14;

            // Push the new frame as the currently active one.
            pushFrameStack(frame_b98e11acd4bb624ee56a83fcadbf1365_14);

            // Mark the frame object as in use, ref count 1 will be up for reuse.
            assert(Py_REFCNT(frame_b98e11acd4bb624ee56a83fcadbf1365_14) == 2); // Frame stack

            // Framed code:
            // Tried code:
            loop_start_6:;
            {
                PyObject *tmp_next_source_6;
                PyObject *tmp_assign_source_105;
                CHECK_OBJECT(tmp_Random_randrange$listcomp_3__$0);
                tmp_next_source_6 = tmp_Random_randrange$listcomp_3__$0;
                tmp_assign_source_105 = ITERATOR_NEXT(tmp_next_source_6);
                if (tmp_assign_source_105 == NULL) {
                    if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                        goto loop_end_6;
                    } else {

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        type_description_3 = "o";
                        exception_lineno = 142;
                        goto try_except_handler_37;
                    }
                }

                {
                    PyObject *old = tmp_Random_randrange$listcomp_3__iter_value_0;
                    tmp_Random_randrange$listcomp_3__iter_value_0 = tmp_assign_source_105;
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_assign_source_106;
                CHECK_OBJECT(tmp_Random_randrange$listcomp_3__iter_value_0);
                tmp_assign_source_106 = tmp_Random_randrange$listcomp_3__iter_value_0;
                {
                    PyObject *old = outline_12_var_tp;
                    outline_12_var_tp = tmp_assign_source_106;
                    Py_INCREF(outline_12_var_tp);
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_append_list_6;
                PyObject *tmp_append_value_6;
                PyObject *tmp_called_value_41;
                PyObject *tmp_args_element_value_27;
                PyObject *tmp_args_element_value_28;
                PyObject *tmp_args_element_value_29;
                PyObject *tmp_args_element_value_30;
                CHECK_OBJECT(tmp_Random_randrange$listcomp_3__contraction);
                tmp_append_list_6 = tmp_Random_randrange$listcomp_3__contraction;
                tmp_called_value_41 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[25]);

                if (unlikely(tmp_called_value_41 == NULL)) {
                    tmp_called_value_41 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[25]);
                }

                if (tmp_called_value_41 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 142;
                    type_description_3 = "o";
                    goto try_except_handler_37;
                }
                CHECK_OBJECT(outline_12_var_tp);
                tmp_args_element_value_27 = outline_12_var_tp;
                CHECK_OBJECT(outline_12_var_tp);
                tmp_args_element_value_28 = outline_12_var_tp;
                CHECK_OBJECT(outline_12_var_tp);
                tmp_args_element_value_29 = outline_12_var_tp;
                CHECK_OBJECT(outline_12_var_tp);
                tmp_args_element_value_30 = outline_12_var_tp;
                frame_b98e11acd4bb624ee56a83fcadbf1365_14->m_frame.f_lineno = 142;
                {
                    PyObject *call_args[] = {tmp_args_element_value_27, tmp_args_element_value_28, tmp_args_element_value_29, tmp_args_element_value_30};
                    tmp_append_value_6 = CALL_FUNCTION_WITH_ARGS4(tmp_called_value_41, call_args);
                }

                if (tmp_append_value_6 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 142;
                    type_description_3 = "o";
                    goto try_except_handler_37;
                }
                assert(PyList_Check(tmp_append_list_6));
                tmp_result = LIST_APPEND1(tmp_append_list_6, tmp_append_value_6);
                if (tmp_result == false) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 142;
                    type_description_3 = "o";
                    goto try_except_handler_37;
                }
            }
            if (CONSIDER_THREADING() == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 142;
                type_description_3 = "o";
                goto try_except_handler_37;
            }
            goto loop_start_6;
            loop_end_6:;
            CHECK_OBJECT(tmp_Random_randrange$listcomp_3__contraction);
            tmp_right_value_10 = tmp_Random_randrange$listcomp_3__contraction;
            Py_INCREF(tmp_right_value_10);
            goto try_return_handler_37;
            NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
            return NULL;
            // Return handler code:
            try_return_handler_37:;
            CHECK_OBJECT(tmp_Random_randrange$listcomp_3__$0);
            Py_DECREF(tmp_Random_randrange$listcomp_3__$0);
            tmp_Random_randrange$listcomp_3__$0 = NULL;
            CHECK_OBJECT(tmp_Random_randrange$listcomp_3__contraction);
            Py_DECREF(tmp_Random_randrange$listcomp_3__contraction);
            tmp_Random_randrange$listcomp_3__contraction = NULL;
            Py_XDECREF(tmp_Random_randrange$listcomp_3__iter_value_0);
            tmp_Random_randrange$listcomp_3__iter_value_0 = NULL;
            goto frame_return_exit_6;
            // Exception handler code:
            try_except_handler_37:;
            exception_keeper_type_32 = exception_type;
            exception_keeper_value_32 = exception_value;
            exception_keeper_tb_32 = exception_tb;
            exception_keeper_lineno_32 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT(tmp_Random_randrange$listcomp_3__$0);
            Py_DECREF(tmp_Random_randrange$listcomp_3__$0);
            tmp_Random_randrange$listcomp_3__$0 = NULL;
            CHECK_OBJECT(tmp_Random_randrange$listcomp_3__contraction);
            Py_DECREF(tmp_Random_randrange$listcomp_3__contraction);
            tmp_Random_randrange$listcomp_3__contraction = NULL;
            Py_XDECREF(tmp_Random_randrange$listcomp_3__iter_value_0);
            tmp_Random_randrange$listcomp_3__iter_value_0 = NULL;
            // Re-raise.
            exception_type = exception_keeper_type_32;
            exception_value = exception_keeper_value_32;
            exception_tb = exception_keeper_tb_32;
            exception_lineno = exception_keeper_lineno_32;

            goto frame_exception_exit_14;
            // End of try:

#if 0
            RESTORE_FRAME_EXCEPTION(frame_b98e11acd4bb624ee56a83fcadbf1365_14);
#endif

            // Put the previous frame back on top.
            popFrameStack();

            goto frame_no_exception_12;

            frame_return_exit_6:;
#if 0
            RESTORE_FRAME_EXCEPTION(frame_b98e11acd4bb624ee56a83fcadbf1365_14);
#endif

            // Put the previous frame back on top.
            popFrameStack();

            goto try_return_handler_36;

            frame_exception_exit_14:;

#if 0
            RESTORE_FRAME_EXCEPTION(frame_b98e11acd4bb624ee56a83fcadbf1365_14);
#endif

            if (exception_tb == NULL) {
                exception_tb = MAKE_TRACEBACK(frame_b98e11acd4bb624ee56a83fcadbf1365_14, exception_lineno);
            } else if (exception_tb->tb_frame != &frame_b98e11acd4bb624ee56a83fcadbf1365_14->m_frame) {
                exception_tb = ADD_TRACEBACK(exception_tb, frame_b98e11acd4bb624ee56a83fcadbf1365_14, exception_lineno);
            }

            // Attaches locals to frame if any.
            Nuitka_Frame_AttachLocals(
                frame_b98e11acd4bb624ee56a83fcadbf1365_14,
                type_description_3,
                outline_12_var_tp
            );


            // Release cached frame if used for exception.
            if (frame_b98e11acd4bb624ee56a83fcadbf1365_14 == cache_frame_b98e11acd4bb624ee56a83fcadbf1365_14) {
#if _DEBUG_REFCOUNTS
                count_active_frame_cache_instances -= 1;
                count_released_frame_cache_instances += 1;
#endif

                Py_DECREF(cache_frame_b98e11acd4bb624ee56a83fcadbf1365_14);
                cache_frame_b98e11acd4bb624ee56a83fcadbf1365_14 = NULL;
            }

            assertFrameObject(frame_b98e11acd4bb624ee56a83fcadbf1365_14);

            // Put the previous frame back on top.
            popFrameStack();

            // Return the error.
            goto nested_frame_exit_13;

            frame_no_exception_12:;
            goto skip_nested_handling_12;
            nested_frame_exit_13:;
            type_description_2 = "o";
            goto try_except_handler_36;
            skip_nested_handling_12:;
            NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
            return NULL;
            // Return handler code:
            try_return_handler_36:;
            Py_XDECREF(outline_12_var_tp);
            outline_12_var_tp = NULL;
            goto outline_result_13;
            // Exception handler code:
            try_except_handler_36:;
            exception_keeper_type_33 = exception_type;
            exception_keeper_value_33 = exception_value;
            exception_keeper_tb_33 = exception_tb;
            exception_keeper_lineno_33 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF(outline_12_var_tp);
            outline_12_var_tp = NULL;
            // Re-raise.
            exception_type = exception_keeper_type_33;
            exception_value = exception_keeper_value_33;
            exception_tb = exception_keeper_tb_33;
            exception_lineno = exception_keeper_lineno_33;

            goto outline_exception_13;
            // End of try:
            NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
            return NULL;
            outline_exception_13:;
            exception_lineno = 142;
            goto try_except_handler_35;
            outline_result_13:;
            tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE(&tmp_left_value_10, tmp_right_value_10);
            Py_DECREF(tmp_right_value_10);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 142;
                type_description_2 = "o";
                goto try_except_handler_35;
            }
            tmp_assign_source_102 = tmp_left_value_10;
            tmp_Random_randrange$class_inplace_2__value = tmp_assign_source_102;

        }
        CHECK_OBJECT(tmp_Random_randrange$class_inplace_2__value);
        tmp_dictset_value = tmp_Random_randrange$class_inplace_2__value;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__7_Random_randrange_139, mod_consts[30], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 142;
            type_description_2 = "o";
            goto try_except_handler_35;
        }
        goto try_end_10;
        // Exception handler code:
        try_except_handler_35:;
        exception_keeper_type_34 = exception_type;
        exception_keeper_value_34 = exception_value;
        exception_keeper_tb_34 = exception_tb;
        exception_keeper_lineno_34 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Random_randrange$class_inplace_2__value);
        Py_DECREF(tmp_Random_randrange$class_inplace_2__value);
        tmp_Random_randrange$class_inplace_2__value = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_34;
        exception_value = exception_keeper_value_34;
        exception_tb = exception_keeper_tb_34;
        exception_lineno = exception_keeper_lineno_34;

        goto frame_exception_exit_11;
        // End of try:
        try_end_10:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_1bf54db38dd0c5dccaaf65af3ac21e29_11);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_13;

        frame_exception_exit_11:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_1bf54db38dd0c5dccaaf65af3ac21e29_11);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_1bf54db38dd0c5dccaaf65af3ac21e29_11, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_1bf54db38dd0c5dccaaf65af3ac21e29_11->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_1bf54db38dd0c5dccaaf65af3ac21e29_11, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_1bf54db38dd0c5dccaaf65af3ac21e29_11,
            type_description_2,
            outline_9_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_1bf54db38dd0c5dccaaf65af3ac21e29_11 == cache_frame_1bf54db38dd0c5dccaaf65af3ac21e29_11) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_1bf54db38dd0c5dccaaf65af3ac21e29_11);
            cache_frame_1bf54db38dd0c5dccaaf65af3ac21e29_11 = NULL;
        }

        assertFrameObject(frame_1bf54db38dd0c5dccaaf65af3ac21e29_11);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_10;

        frame_no_exception_13:;
        goto skip_nested_handling_13;
        nested_frame_exit_10:;

        goto try_except_handler_29;
        skip_nested_handling_13:;
        CHECK_OBJECT(tmp_Random_randrange$class_inplace_2__value);
        Py_DECREF(tmp_Random_randrange$class_inplace_2__value);
        tmp_Random_randrange$class_inplace_2__value = NULL;
        {
            nuitka_bool tmp_condition_result_43;
            PyObject *tmp_cmp_expr_left_8;
            PyObject *tmp_cmp_expr_right_8;
            CHECK_OBJECT(tmp_class_creation_7__bases);
            tmp_cmp_expr_left_8 = tmp_class_creation_7__bases;
            CHECK_OBJECT(tmp_class_creation_7__bases_orig);
            tmp_cmp_expr_right_8 = tmp_class_creation_7__bases_orig;
            tmp_condition_result_43 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_8, tmp_cmp_expr_right_8);
            if (tmp_condition_result_43 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 139;

                goto try_except_handler_29;
            }
            if (tmp_condition_result_43 == NUITKA_BOOL_TRUE) {
                goto branch_yes_29;
            } else {
                goto branch_no_29;
            }
            assert(tmp_condition_result_43 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_29:;
        CHECK_OBJECT(tmp_class_creation_7__bases_orig);
        tmp_dictset_value = tmp_class_creation_7__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__7_Random_randrange_139, mod_consts[98], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 139;

            goto try_except_handler_29;
        }
        branch_no_29:;
        {
            PyObject *tmp_assign_source_107;
            PyObject *tmp_called_value_42;
            PyObject *tmp_args_value_23;
            PyObject *tmp_tuple_element_38;
            PyObject *tmp_kwargs_value_23;
            CHECK_OBJECT(tmp_class_creation_7__metaclass);
            tmp_called_value_42 = tmp_class_creation_7__metaclass;
            tmp_tuple_element_38 = mod_consts[124];
            tmp_args_value_23 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_23, 0, tmp_tuple_element_38);
            CHECK_OBJECT(tmp_class_creation_7__bases);
            tmp_tuple_element_38 = tmp_class_creation_7__bases;
            PyTuple_SET_ITEM0(tmp_args_value_23, 1, tmp_tuple_element_38);
            tmp_tuple_element_38 = locals_numba$core$typing$randomdecl$$$class__7_Random_randrange_139;
            PyTuple_SET_ITEM0(tmp_args_value_23, 2, tmp_tuple_element_38);
            CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
            tmp_kwargs_value_23 = tmp_class_creation_7__class_decl_dict;
            frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 139;
            tmp_assign_source_107 = CALL_FUNCTION(tmp_called_value_42, tmp_args_value_23, tmp_kwargs_value_23);
            Py_DECREF(tmp_args_value_23);
            if (tmp_assign_source_107 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 139;

                goto try_except_handler_29;
            }
            assert(outline_9_var___class__ == NULL);
            outline_9_var___class__ = tmp_assign_source_107;
        }
        CHECK_OBJECT(outline_9_var___class__);
        tmp_args_element_value_21 = outline_9_var___class__;
        Py_INCREF(tmp_args_element_value_21);
        goto try_return_handler_29;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_29:;
        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__7_Random_randrange_139);
        locals_numba$core$typing$randomdecl$$$class__7_Random_randrange_139 = NULL;
        goto try_return_handler_28;
        // Exception handler code:
        try_except_handler_29:;
        exception_keeper_type_35 = exception_type;
        exception_keeper_value_35 = exception_value;
        exception_keeper_tb_35 = exception_tb;
        exception_keeper_lineno_35 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__7_Random_randrange_139);
        locals_numba$core$typing$randomdecl$$$class__7_Random_randrange_139 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_35;
        exception_value = exception_keeper_value_35;
        exception_tb = exception_keeper_tb_35;
        exception_lineno = exception_keeper_lineno_35;

        goto try_except_handler_28;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_28:;
        CHECK_OBJECT(outline_9_var___class__);
        Py_DECREF(outline_9_var___class__);
        outline_9_var___class__ = NULL;
        goto outline_result_10;
        // Exception handler code:
        try_except_handler_28:;
        exception_keeper_type_36 = exception_type;
        exception_keeper_value_36 = exception_value;
        exception_keeper_tb_36 = exception_tb;
        exception_keeper_lineno_36 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_36;
        exception_value = exception_keeper_value_36;
        exception_tb = exception_keeper_tb_36;
        exception_lineno = exception_keeper_lineno_36;

        goto outline_exception_10;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_10:;
        exception_lineno = 139;
        goto try_except_handler_27;
        outline_result_10:;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 138;
        tmp_assign_source_90 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_37, tmp_args_element_value_21);
        Py_DECREF(tmp_called_value_37);
        Py_DECREF(tmp_args_element_value_21);
        if (tmp_assign_source_90 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 138;

            goto try_except_handler_27;
        }
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[124], tmp_assign_source_90);
    }
    goto try_end_11;
    // Exception handler code:
    try_except_handler_27:;
    exception_keeper_type_37 = exception_type;
    exception_keeper_value_37 = exception_value;
    exception_keeper_tb_37 = exception_tb;
    exception_keeper_lineno_37 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_7__bases_orig);
    tmp_class_creation_7__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_7__bases);
    tmp_class_creation_7__bases = NULL;
    Py_XDECREF(tmp_class_creation_7__class_decl_dict);
    tmp_class_creation_7__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_7__metaclass);
    tmp_class_creation_7__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_7__prepared);
    tmp_class_creation_7__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_37;
    exception_value = exception_keeper_value_37;
    exception_tb = exception_keeper_tb_37;
    exception_lineno = exception_keeper_lineno_37;

    goto frame_exception_exit_1;
    // End of try:
    try_end_11:;
    CHECK_OBJECT(tmp_class_creation_7__bases_orig);
    Py_DECREF(tmp_class_creation_7__bases_orig);
    tmp_class_creation_7__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_7__bases);
    Py_DECREF(tmp_class_creation_7__bases);
    tmp_class_creation_7__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
    Py_DECREF(tmp_class_creation_7__class_decl_dict);
    tmp_class_creation_7__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_7__metaclass);
    Py_DECREF(tmp_class_creation_7__metaclass);
    tmp_class_creation_7__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_7__prepared);
    Py_DECREF(tmp_class_creation_7__prepared);
    tmp_class_creation_7__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_108;
        PyObject *tmp_tuple_element_39;
        tmp_tuple_element_39 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[67]);

        if (unlikely(tmp_tuple_element_39 == NULL)) {
            tmp_tuple_element_39 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[67]);
        }

        if (tmp_tuple_element_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 146;

            goto try_except_handler_38;
        }
        tmp_assign_source_108 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_108, 0, tmp_tuple_element_39);
        assert(tmp_class_creation_8__bases_orig == NULL);
        tmp_class_creation_8__bases_orig = tmp_assign_source_108;
    }
    {
        PyObject *tmp_assign_source_109;
        PyObject *tmp_dircall_arg1_8;
        CHECK_OBJECT(tmp_class_creation_8__bases_orig);
        tmp_dircall_arg1_8 = tmp_class_creation_8__bases_orig;
        Py_INCREF(tmp_dircall_arg1_8);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_8};
            tmp_assign_source_109 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_109 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 146;

            goto try_except_handler_38;
        }
        assert(tmp_class_creation_8__bases == NULL);
        tmp_class_creation_8__bases = tmp_assign_source_109;
    }
    {
        PyObject *tmp_assign_source_110;
        tmp_assign_source_110 = PyDict_New();
        assert(tmp_class_creation_8__class_decl_dict == NULL);
        tmp_class_creation_8__class_decl_dict = tmp_assign_source_110;
    }
    {
        PyObject *tmp_assign_source_111;
        PyObject *tmp_metaclass_value_8;
        bool tmp_condition_result_44;
        PyObject *tmp_key_value_22;
        PyObject *tmp_dict_arg_value_22;
        PyObject *tmp_dict_arg_value_23;
        PyObject *tmp_key_value_23;
        nuitka_bool tmp_condition_result_45;
        int tmp_truth_name_8;
        PyObject *tmp_type_arg_15;
        PyObject *tmp_expression_value_59;
        PyObject *tmp_subscript_value_8;
        PyObject *tmp_bases_value_8;
        tmp_key_value_22 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
        tmp_dict_arg_value_22 = tmp_class_creation_8__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_22, tmp_key_value_22);
        assert(!(tmp_res == -1));
        tmp_condition_result_44 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_44 != false) {
            goto condexpr_true_15;
        } else {
            goto condexpr_false_15;
        }
        condexpr_true_15:;
        CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
        tmp_dict_arg_value_23 = tmp_class_creation_8__class_decl_dict;
        tmp_key_value_23 = mod_consts[87];
        tmp_metaclass_value_8 = DICT_GET_ITEM0(tmp_dict_arg_value_23, tmp_key_value_23);
        if (tmp_metaclass_value_8 == NULL) {
            tmp_metaclass_value_8 = Py_None;
        }
        assert(!(tmp_metaclass_value_8 == NULL));
        Py_INCREF(tmp_metaclass_value_8);
        goto condexpr_end_15;
        condexpr_false_15:;
        CHECK_OBJECT(tmp_class_creation_8__bases);
        tmp_truth_name_8 = CHECK_IF_TRUE(tmp_class_creation_8__bases);
        if (tmp_truth_name_8 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 146;

            goto try_except_handler_38;
        }
        tmp_condition_result_45 = tmp_truth_name_8 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_45 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_16;
        } else {
            goto condexpr_false_16;
        }
        condexpr_true_16:;
        CHECK_OBJECT(tmp_class_creation_8__bases);
        tmp_expression_value_59 = tmp_class_creation_8__bases;
        tmp_subscript_value_8 = mod_consts[13];
        tmp_type_arg_15 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_59, tmp_subscript_value_8, 0);
        if (tmp_type_arg_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 146;

            goto try_except_handler_38;
        }
        tmp_metaclass_value_8 = BUILTIN_TYPE1(tmp_type_arg_15);
        Py_DECREF(tmp_type_arg_15);
        if (tmp_metaclass_value_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 146;

            goto try_except_handler_38;
        }
        goto condexpr_end_16;
        condexpr_false_16:;
        tmp_metaclass_value_8 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_8);
        condexpr_end_16:;
        condexpr_end_15:;
        CHECK_OBJECT(tmp_class_creation_8__bases);
        tmp_bases_value_8 = tmp_class_creation_8__bases;
        tmp_assign_source_111 = SELECT_METACLASS(tmp_metaclass_value_8, tmp_bases_value_8);
        Py_DECREF(tmp_metaclass_value_8);
        if (tmp_assign_source_111 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 146;

            goto try_except_handler_38;
        }
        assert(tmp_class_creation_8__metaclass == NULL);
        tmp_class_creation_8__metaclass = tmp_assign_source_111;
    }
    {
        bool tmp_condition_result_46;
        PyObject *tmp_key_value_24;
        PyObject *tmp_dict_arg_value_24;
        tmp_key_value_24 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
        tmp_dict_arg_value_24 = tmp_class_creation_8__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_24, tmp_key_value_24);
        assert(!(tmp_res == -1));
        tmp_condition_result_46 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_46 != false) {
            goto branch_yes_30;
        } else {
            goto branch_no_30;
        }
    }
    branch_yes_30:;
    CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_8__class_decl_dict;
    tmp_dictdel_key = mod_consts[87];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 146;

        goto try_except_handler_38;
    }
    branch_no_30:;
    {
        nuitka_bool tmp_condition_result_47;
        PyObject *tmp_expression_value_60;
        CHECK_OBJECT(tmp_class_creation_8__metaclass);
        tmp_expression_value_60 = tmp_class_creation_8__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_60, mod_consts[88]);
        tmp_condition_result_47 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_47 == NUITKA_BOOL_TRUE) {
            goto branch_yes_31;
        } else {
            goto branch_no_31;
        }
    }
    branch_yes_31:;
    {
        PyObject *tmp_assign_source_112;
        PyObject *tmp_called_value_43;
        PyObject *tmp_expression_value_61;
        PyObject *tmp_args_value_24;
        PyObject *tmp_tuple_element_40;
        PyObject *tmp_kwargs_value_24;
        CHECK_OBJECT(tmp_class_creation_8__metaclass);
        tmp_expression_value_61 = tmp_class_creation_8__metaclass;
        tmp_called_value_43 = LOOKUP_ATTRIBUTE(tmp_expression_value_61, mod_consts[88]);
        if (tmp_called_value_43 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 146;

            goto try_except_handler_38;
        }
        tmp_tuple_element_40 = mod_consts[127];
        tmp_args_value_24 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_24, 0, tmp_tuple_element_40);
        CHECK_OBJECT(tmp_class_creation_8__bases);
        tmp_tuple_element_40 = tmp_class_creation_8__bases;
        PyTuple_SET_ITEM0(tmp_args_value_24, 1, tmp_tuple_element_40);
        CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
        tmp_kwargs_value_24 = tmp_class_creation_8__class_decl_dict;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 146;
        tmp_assign_source_112 = CALL_FUNCTION(tmp_called_value_43, tmp_args_value_24, tmp_kwargs_value_24);
        Py_DECREF(tmp_called_value_43);
        Py_DECREF(tmp_args_value_24);
        if (tmp_assign_source_112 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 146;

            goto try_except_handler_38;
        }
        assert(tmp_class_creation_8__prepared == NULL);
        tmp_class_creation_8__prepared = tmp_assign_source_112;
    }
    {
        bool tmp_condition_result_48;
        PyObject *tmp_operand_value_8;
        PyObject *tmp_expression_value_62;
        CHECK_OBJECT(tmp_class_creation_8__prepared);
        tmp_expression_value_62 = tmp_class_creation_8__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_62, mod_consts[89]);
        tmp_operand_value_8 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_8);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 146;

            goto try_except_handler_38;
        }
        tmp_condition_result_48 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_48 != false) {
            goto branch_yes_32;
        } else {
            goto branch_no_32;
        }
    }
    branch_yes_32:;
    {
        PyObject *tmp_raise_type_8;
        PyObject *tmp_raise_value_8;
        PyObject *tmp_left_value_11;
        PyObject *tmp_right_value_11;
        PyObject *tmp_tuple_element_41;
        PyObject *tmp_getattr_target_8;
        PyObject *tmp_getattr_attr_8;
        PyObject *tmp_getattr_default_8;
        tmp_raise_type_8 = PyExc_TypeError;
        tmp_left_value_11 = mod_consts[90];
        CHECK_OBJECT(tmp_class_creation_8__metaclass);
        tmp_getattr_target_8 = tmp_class_creation_8__metaclass;
        tmp_getattr_attr_8 = mod_consts[91];
        tmp_getattr_default_8 = mod_consts[92];
        tmp_tuple_element_41 = BUILTIN_GETATTR(tmp_getattr_target_8, tmp_getattr_attr_8, tmp_getattr_default_8);
        if (tmp_tuple_element_41 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 146;

            goto try_except_handler_38;
        }
        tmp_right_value_11 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_63;
            PyObject *tmp_type_arg_16;
            PyTuple_SET_ITEM(tmp_right_value_11, 0, tmp_tuple_element_41);
            CHECK_OBJECT(tmp_class_creation_8__prepared);
            tmp_type_arg_16 = tmp_class_creation_8__prepared;
            tmp_expression_value_63 = BUILTIN_TYPE1(tmp_type_arg_16);
            assert(!(tmp_expression_value_63 == NULL));
            tmp_tuple_element_41 = LOOKUP_ATTRIBUTE(tmp_expression_value_63, mod_consts[91]);
            Py_DECREF(tmp_expression_value_63);
            if (tmp_tuple_element_41 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 146;

                goto tuple_build_exception_9;
            }
            PyTuple_SET_ITEM(tmp_right_value_11, 1, tmp_tuple_element_41);
        }
        goto tuple_build_noexception_9;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_9:;
        Py_DECREF(tmp_right_value_11);
        goto try_except_handler_38;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_9:;
        tmp_raise_value_8 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_11, tmp_right_value_11);
        Py_DECREF(tmp_right_value_11);
        if (tmp_raise_value_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 146;

            goto try_except_handler_38;
        }
        exception_type = tmp_raise_type_8;
        Py_INCREF(tmp_raise_type_8);
        exception_value = tmp_raise_value_8;
        exception_lineno = 146;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_38;
    }
    branch_no_32:;
    goto branch_end_31;
    branch_no_31:;
    {
        PyObject *tmp_assign_source_113;
        tmp_assign_source_113 = PyDict_New();
        assert(tmp_class_creation_8__prepared == NULL);
        tmp_class_creation_8__prepared = tmp_assign_source_113;
    }
    branch_end_31:;
    {
        PyObject *tmp_assign_source_114;
        PyObject *tmp_called_value_44;
        PyObject *tmp_called_value_45;
        PyObject *tmp_args_value_25;
        PyObject *tmp_tuple_element_42;
        PyObject *tmp_expression_value_64;
        PyObject *tmp_kwargs_value_25;
        PyObject *tmp_args_element_value_31;
        PyObject *tmp_called_value_46;
        PyObject *tmp_called_value_47;
        PyObject *tmp_args_value_26;
        PyObject *tmp_tuple_element_43;
        PyObject *tmp_expression_value_65;
        PyObject *tmp_expression_value_66;
        PyObject *tmp_kwargs_value_26;
        PyObject *tmp_args_element_value_32;
        tmp_called_value_45 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_45 == NULL)) {
            tmp_called_value_45 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_45 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 144;

            goto try_except_handler_38;
        }
        tmp_expression_value_64 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[19]);

        if (unlikely(tmp_expression_value_64 == NULL)) {
            tmp_expression_value_64 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[19]);
        }

        if (tmp_expression_value_64 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 144;

            goto try_except_handler_38;
        }
        tmp_tuple_element_42 = LOOKUP_ATTRIBUTE(tmp_expression_value_64, mod_consts[128]);
        if (tmp_tuple_element_42 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 144;

            goto try_except_handler_38;
        }
        tmp_args_value_25 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_25, 0, tmp_tuple_element_42);
        tmp_kwargs_value_25 = PyDict_Copy(mod_consts[129]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 144;
        tmp_called_value_44 = CALL_FUNCTION(tmp_called_value_45, tmp_args_value_25, tmp_kwargs_value_25);
        Py_DECREF(tmp_args_value_25);
        Py_DECREF(tmp_kwargs_value_25);
        if (tmp_called_value_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 144;

            goto try_except_handler_38;
        }
        tmp_called_value_47 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_47 == NULL)) {
            tmp_called_value_47 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_47 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_44);

            exception_lineno = 145;

            goto try_except_handler_38;
        }
        tmp_expression_value_66 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_66 == NULL)) {
            tmp_expression_value_66 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_66 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_44);

            exception_lineno = 145;

            goto try_except_handler_38;
        }
        tmp_expression_value_65 = LOOKUP_ATTRIBUTE(tmp_expression_value_66, mod_consts[19]);
        if (tmp_expression_value_65 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_44);

            exception_lineno = 145;

            goto try_except_handler_38;
        }
        tmp_tuple_element_43 = LOOKUP_ATTRIBUTE(tmp_expression_value_65, mod_consts[128]);
        Py_DECREF(tmp_expression_value_65);
        if (tmp_tuple_element_43 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_44);

            exception_lineno = 145;

            goto try_except_handler_38;
        }
        tmp_args_value_26 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_26, 0, tmp_tuple_element_43);
        tmp_kwargs_value_26 = PyDict_Copy(mod_consts[130]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 145;
        tmp_called_value_46 = CALL_FUNCTION(tmp_called_value_47, tmp_args_value_26, tmp_kwargs_value_26);
        Py_DECREF(tmp_args_value_26);
        Py_DECREF(tmp_kwargs_value_26);
        if (tmp_called_value_46 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_44);

            exception_lineno = 145;

            goto try_except_handler_38;
        }
        {
            PyObject *tmp_set_locals_8;
            CHECK_OBJECT(tmp_class_creation_8__prepared);
            tmp_set_locals_8 = tmp_class_creation_8__prepared;
            locals_numba$core$typing$randomdecl$$$class__8_Random_seed_146 = tmp_set_locals_8;
            Py_INCREF(tmp_set_locals_8);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[93];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__8_Random_seed_146, mod_consts[94], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 146;

            goto try_except_handler_40;
        }
        tmp_dictset_value = mod_consts[127];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__8_Random_seed_146, mod_consts[96], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 146;

            goto try_except_handler_40;
        }
        if (isFrameUnusable(cache_frame_a13f2a8a328c03a0e1ef8b0e98c8440c_15)) {
            Py_XDECREF(cache_frame_a13f2a8a328c03a0e1ef8b0e98c8440c_15);

#if _DEBUG_REFCOUNTS
            if (cache_frame_a13f2a8a328c03a0e1ef8b0e98c8440c_15 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_a13f2a8a328c03a0e1ef8b0e98c8440c_15 = MAKE_FUNCTION_FRAME(codeobj_a13f2a8a328c03a0e1ef8b0e98c8440c, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_a13f2a8a328c03a0e1ef8b0e98c8440c_15->m_type_description == NULL);
        frame_a13f2a8a328c03a0e1ef8b0e98c8440c_15 = cache_frame_a13f2a8a328c03a0e1ef8b0e98c8440c_15;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_a13f2a8a328c03a0e1ef8b0e98c8440c_15);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_a13f2a8a328c03a0e1ef8b0e98c8440c_15) == 2); // Frame stack

        // Framed code:
        {
            PyObject *tmp_list_element_4;
            PyObject *tmp_called_value_48;
            PyObject *tmp_args_element_value_33;
            PyObject *tmp_expression_value_67;
            PyObject *tmp_args_element_value_34;
            PyObject *tmp_expression_value_68;
            tmp_called_value_48 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__8_Random_seed_146, mod_consts[25]);

            if (tmp_called_value_48 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_value_48 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[25]);

                    if (unlikely(tmp_called_value_48 == NULL)) {
                        tmp_called_value_48 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[25]);
                    }

                    if (tmp_called_value_48 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 147;
                        type_description_2 = "o";
                        goto frame_exception_exit_15;
                    }
                    Py_INCREF(tmp_called_value_48);
                } else {
                    goto frame_exception_exit_15;
                }
            }

            tmp_expression_value_67 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__8_Random_seed_146, mod_consts[0]);

            if (tmp_expression_value_67 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_67 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[0]);

                    if (unlikely(tmp_expression_value_67 == NULL)) {
                        tmp_expression_value_67 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[0]);
                    }

                    if (tmp_expression_value_67 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_48);

                        exception_lineno = 147;
                        type_description_2 = "o";
                        goto frame_exception_exit_15;
                    }
                    Py_INCREF(tmp_expression_value_67);
                } else {
                    goto frame_exception_exit_15;
                }
            }

            tmp_args_element_value_33 = LOOKUP_ATTRIBUTE(tmp_expression_value_67, mod_consts[131]);
            Py_DECREF(tmp_expression_value_67);
            if (tmp_args_element_value_33 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_48);

                exception_lineno = 147;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }
            tmp_expression_value_68 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__8_Random_seed_146, mod_consts[0]);

            if (tmp_expression_value_68 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_68 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[0]);

                    if (unlikely(tmp_expression_value_68 == NULL)) {
                        tmp_expression_value_68 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[0]);
                    }

                    if (tmp_expression_value_68 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_48);
                        Py_DECREF(tmp_args_element_value_33);

                        exception_lineno = 147;
                        type_description_2 = "o";
                        goto frame_exception_exit_15;
                    }
                    Py_INCREF(tmp_expression_value_68);
                } else {
                    goto frame_exception_exit_15;
                }
            }

            tmp_args_element_value_34 = LOOKUP_ATTRIBUTE(tmp_expression_value_68, mod_consts[132]);
            Py_DECREF(tmp_expression_value_68);
            if (tmp_args_element_value_34 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_48);
                Py_DECREF(tmp_args_element_value_33);

                exception_lineno = 147;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }
            frame_a13f2a8a328c03a0e1ef8b0e98c8440c_15->m_frame.f_lineno = 147;
            {
                PyObject *call_args[] = {tmp_args_element_value_33, tmp_args_element_value_34};
                tmp_list_element_4 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_48, call_args);
            }

            Py_DECREF(tmp_called_value_48);
            Py_DECREF(tmp_args_element_value_33);
            Py_DECREF(tmp_args_element_value_34);
            if (tmp_list_element_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 147;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }
            tmp_dictset_value = PyList_New(1);
            PyList_SET_ITEM(tmp_dictset_value, 0, tmp_list_element_4);
            tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__8_Random_seed_146, mod_consts[30], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 147;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a13f2a8a328c03a0e1ef8b0e98c8440c_15);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_14;

        frame_exception_exit_15:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a13f2a8a328c03a0e1ef8b0e98c8440c_15);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_a13f2a8a328c03a0e1ef8b0e98c8440c_15, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_a13f2a8a328c03a0e1ef8b0e98c8440c_15->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_a13f2a8a328c03a0e1ef8b0e98c8440c_15, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_a13f2a8a328c03a0e1ef8b0e98c8440c_15,
            type_description_2,
            outline_13_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_a13f2a8a328c03a0e1ef8b0e98c8440c_15 == cache_frame_a13f2a8a328c03a0e1ef8b0e98c8440c_15) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_a13f2a8a328c03a0e1ef8b0e98c8440c_15);
            cache_frame_a13f2a8a328c03a0e1ef8b0e98c8440c_15 = NULL;
        }

        assertFrameObject(frame_a13f2a8a328c03a0e1ef8b0e98c8440c_15);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_14;

        frame_no_exception_14:;
        goto skip_nested_handling_14;
        nested_frame_exit_14:;

        goto try_except_handler_40;
        skip_nested_handling_14:;
        {
            nuitka_bool tmp_condition_result_49;
            PyObject *tmp_cmp_expr_left_9;
            PyObject *tmp_cmp_expr_right_9;
            CHECK_OBJECT(tmp_class_creation_8__bases);
            tmp_cmp_expr_left_9 = tmp_class_creation_8__bases;
            CHECK_OBJECT(tmp_class_creation_8__bases_orig);
            tmp_cmp_expr_right_9 = tmp_class_creation_8__bases_orig;
            tmp_condition_result_49 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_9, tmp_cmp_expr_right_9);
            if (tmp_condition_result_49 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 146;

                goto try_except_handler_40;
            }
            if (tmp_condition_result_49 == NUITKA_BOOL_TRUE) {
                goto branch_yes_33;
            } else {
                goto branch_no_33;
            }
            assert(tmp_condition_result_49 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_33:;
        CHECK_OBJECT(tmp_class_creation_8__bases_orig);
        tmp_dictset_value = tmp_class_creation_8__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__8_Random_seed_146, mod_consts[98], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 146;

            goto try_except_handler_40;
        }
        branch_no_33:;
        {
            PyObject *tmp_assign_source_115;
            PyObject *tmp_called_value_49;
            PyObject *tmp_args_value_27;
            PyObject *tmp_tuple_element_44;
            PyObject *tmp_kwargs_value_27;
            CHECK_OBJECT(tmp_class_creation_8__metaclass);
            tmp_called_value_49 = tmp_class_creation_8__metaclass;
            tmp_tuple_element_44 = mod_consts[127];
            tmp_args_value_27 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_27, 0, tmp_tuple_element_44);
            CHECK_OBJECT(tmp_class_creation_8__bases);
            tmp_tuple_element_44 = tmp_class_creation_8__bases;
            PyTuple_SET_ITEM0(tmp_args_value_27, 1, tmp_tuple_element_44);
            tmp_tuple_element_44 = locals_numba$core$typing$randomdecl$$$class__8_Random_seed_146;
            PyTuple_SET_ITEM0(tmp_args_value_27, 2, tmp_tuple_element_44);
            CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
            tmp_kwargs_value_27 = tmp_class_creation_8__class_decl_dict;
            frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 146;
            tmp_assign_source_115 = CALL_FUNCTION(tmp_called_value_49, tmp_args_value_27, tmp_kwargs_value_27);
            Py_DECREF(tmp_args_value_27);
            if (tmp_assign_source_115 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 146;

                goto try_except_handler_40;
            }
            assert(outline_13_var___class__ == NULL);
            outline_13_var___class__ = tmp_assign_source_115;
        }
        CHECK_OBJECT(outline_13_var___class__);
        tmp_args_element_value_32 = outline_13_var___class__;
        Py_INCREF(tmp_args_element_value_32);
        goto try_return_handler_40;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_40:;
        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__8_Random_seed_146);
        locals_numba$core$typing$randomdecl$$$class__8_Random_seed_146 = NULL;
        goto try_return_handler_39;
        // Exception handler code:
        try_except_handler_40:;
        exception_keeper_type_38 = exception_type;
        exception_keeper_value_38 = exception_value;
        exception_keeper_tb_38 = exception_tb;
        exception_keeper_lineno_38 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__8_Random_seed_146);
        locals_numba$core$typing$randomdecl$$$class__8_Random_seed_146 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_38;
        exception_value = exception_keeper_value_38;
        exception_tb = exception_keeper_tb_38;
        exception_lineno = exception_keeper_lineno_38;

        goto try_except_handler_39;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_39:;
        CHECK_OBJECT(outline_13_var___class__);
        Py_DECREF(outline_13_var___class__);
        outline_13_var___class__ = NULL;
        goto outline_result_14;
        // Exception handler code:
        try_except_handler_39:;
        exception_keeper_type_39 = exception_type;
        exception_keeper_value_39 = exception_value;
        exception_keeper_tb_39 = exception_tb;
        exception_keeper_lineno_39 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_39;
        exception_value = exception_keeper_value_39;
        exception_tb = exception_keeper_tb_39;
        exception_lineno = exception_keeper_lineno_39;

        goto outline_exception_14;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_14:;
        exception_lineno = 146;
        goto try_except_handler_38;
        outline_result_14:;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 145;
        tmp_args_element_value_31 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_46, tmp_args_element_value_32);
        Py_DECREF(tmp_called_value_46);
        Py_DECREF(tmp_args_element_value_32);
        if (tmp_args_element_value_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_44);

            exception_lineno = 145;

            goto try_except_handler_38;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 144;
        tmp_assign_source_114 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_44, tmp_args_element_value_31);
        Py_DECREF(tmp_called_value_44);
        Py_DECREF(tmp_args_element_value_31);
        if (tmp_assign_source_114 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 144;

            goto try_except_handler_38;
        }
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[127], tmp_assign_source_114);
    }
    goto try_end_12;
    // Exception handler code:
    try_except_handler_38:;
    exception_keeper_type_40 = exception_type;
    exception_keeper_value_40 = exception_value;
    exception_keeper_tb_40 = exception_tb;
    exception_keeper_lineno_40 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_8__bases_orig);
    tmp_class_creation_8__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_8__bases);
    tmp_class_creation_8__bases = NULL;
    Py_XDECREF(tmp_class_creation_8__class_decl_dict);
    tmp_class_creation_8__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_8__metaclass);
    tmp_class_creation_8__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_8__prepared);
    tmp_class_creation_8__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_40;
    exception_value = exception_keeper_value_40;
    exception_tb = exception_keeper_tb_40;
    exception_lineno = exception_keeper_lineno_40;

    goto frame_exception_exit_1;
    // End of try:
    try_end_12:;
    CHECK_OBJECT(tmp_class_creation_8__bases_orig);
    Py_DECREF(tmp_class_creation_8__bases_orig);
    tmp_class_creation_8__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_8__bases);
    Py_DECREF(tmp_class_creation_8__bases);
    tmp_class_creation_8__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
    Py_DECREF(tmp_class_creation_8__class_decl_dict);
    tmp_class_creation_8__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_8__metaclass);
    Py_DECREF(tmp_class_creation_8__metaclass);
    tmp_class_creation_8__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_8__prepared);
    Py_DECREF(tmp_class_creation_8__prepared);
    tmp_class_creation_8__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_116;
        PyObject *tmp_tuple_element_45;
        tmp_tuple_element_45 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[99]);

        if (unlikely(tmp_tuple_element_45 == NULL)) {
            tmp_tuple_element_45 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[99]);
        }

        if (tmp_tuple_element_45 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 157;

            goto try_except_handler_41;
        }
        tmp_assign_source_116 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_116, 0, tmp_tuple_element_45);
        assert(tmp_class_creation_9__bases_orig == NULL);
        tmp_class_creation_9__bases_orig = tmp_assign_source_116;
    }
    {
        PyObject *tmp_assign_source_117;
        PyObject *tmp_dircall_arg1_9;
        CHECK_OBJECT(tmp_class_creation_9__bases_orig);
        tmp_dircall_arg1_9 = tmp_class_creation_9__bases_orig;
        Py_INCREF(tmp_dircall_arg1_9);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_9};
            tmp_assign_source_117 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_117 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 157;

            goto try_except_handler_41;
        }
        assert(tmp_class_creation_9__bases == NULL);
        tmp_class_creation_9__bases = tmp_assign_source_117;
    }
    {
        PyObject *tmp_assign_source_118;
        tmp_assign_source_118 = PyDict_New();
        assert(tmp_class_creation_9__class_decl_dict == NULL);
        tmp_class_creation_9__class_decl_dict = tmp_assign_source_118;
    }
    {
        PyObject *tmp_assign_source_119;
        PyObject *tmp_metaclass_value_9;
        bool tmp_condition_result_50;
        PyObject *tmp_key_value_25;
        PyObject *tmp_dict_arg_value_25;
        PyObject *tmp_dict_arg_value_26;
        PyObject *tmp_key_value_26;
        nuitka_bool tmp_condition_result_51;
        int tmp_truth_name_9;
        PyObject *tmp_type_arg_17;
        PyObject *tmp_expression_value_69;
        PyObject *tmp_subscript_value_9;
        PyObject *tmp_bases_value_9;
        tmp_key_value_25 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
        tmp_dict_arg_value_25 = tmp_class_creation_9__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_25, tmp_key_value_25);
        assert(!(tmp_res == -1));
        tmp_condition_result_50 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_50 != false) {
            goto condexpr_true_17;
        } else {
            goto condexpr_false_17;
        }
        condexpr_true_17:;
        CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
        tmp_dict_arg_value_26 = tmp_class_creation_9__class_decl_dict;
        tmp_key_value_26 = mod_consts[87];
        tmp_metaclass_value_9 = DICT_GET_ITEM0(tmp_dict_arg_value_26, tmp_key_value_26);
        if (tmp_metaclass_value_9 == NULL) {
            tmp_metaclass_value_9 = Py_None;
        }
        assert(!(tmp_metaclass_value_9 == NULL));
        Py_INCREF(tmp_metaclass_value_9);
        goto condexpr_end_17;
        condexpr_false_17:;
        CHECK_OBJECT(tmp_class_creation_9__bases);
        tmp_truth_name_9 = CHECK_IF_TRUE(tmp_class_creation_9__bases);
        if (tmp_truth_name_9 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 157;

            goto try_except_handler_41;
        }
        tmp_condition_result_51 = tmp_truth_name_9 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_51 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_18;
        } else {
            goto condexpr_false_18;
        }
        condexpr_true_18:;
        CHECK_OBJECT(tmp_class_creation_9__bases);
        tmp_expression_value_69 = tmp_class_creation_9__bases;
        tmp_subscript_value_9 = mod_consts[13];
        tmp_type_arg_17 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_69, tmp_subscript_value_9, 0);
        if (tmp_type_arg_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 157;

            goto try_except_handler_41;
        }
        tmp_metaclass_value_9 = BUILTIN_TYPE1(tmp_type_arg_17);
        Py_DECREF(tmp_type_arg_17);
        if (tmp_metaclass_value_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 157;

            goto try_except_handler_41;
        }
        goto condexpr_end_18;
        condexpr_false_18:;
        tmp_metaclass_value_9 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_9);
        condexpr_end_18:;
        condexpr_end_17:;
        CHECK_OBJECT(tmp_class_creation_9__bases);
        tmp_bases_value_9 = tmp_class_creation_9__bases;
        tmp_assign_source_119 = SELECT_METACLASS(tmp_metaclass_value_9, tmp_bases_value_9);
        Py_DECREF(tmp_metaclass_value_9);
        if (tmp_assign_source_119 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 157;

            goto try_except_handler_41;
        }
        assert(tmp_class_creation_9__metaclass == NULL);
        tmp_class_creation_9__metaclass = tmp_assign_source_119;
    }
    {
        bool tmp_condition_result_52;
        PyObject *tmp_key_value_27;
        PyObject *tmp_dict_arg_value_27;
        tmp_key_value_27 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
        tmp_dict_arg_value_27 = tmp_class_creation_9__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_27, tmp_key_value_27);
        assert(!(tmp_res == -1));
        tmp_condition_result_52 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_52 != false) {
            goto branch_yes_34;
        } else {
            goto branch_no_34;
        }
    }
    branch_yes_34:;
    CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_9__class_decl_dict;
    tmp_dictdel_key = mod_consts[87];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 157;

        goto try_except_handler_41;
    }
    branch_no_34:;
    {
        nuitka_bool tmp_condition_result_53;
        PyObject *tmp_expression_value_70;
        CHECK_OBJECT(tmp_class_creation_9__metaclass);
        tmp_expression_value_70 = tmp_class_creation_9__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_70, mod_consts[88]);
        tmp_condition_result_53 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_53 == NUITKA_BOOL_TRUE) {
            goto branch_yes_35;
        } else {
            goto branch_no_35;
        }
    }
    branch_yes_35:;
    {
        PyObject *tmp_assign_source_120;
        PyObject *tmp_called_value_50;
        PyObject *tmp_expression_value_71;
        PyObject *tmp_args_value_28;
        PyObject *tmp_tuple_element_46;
        PyObject *tmp_kwargs_value_28;
        CHECK_OBJECT(tmp_class_creation_9__metaclass);
        tmp_expression_value_71 = tmp_class_creation_9__metaclass;
        tmp_called_value_50 = LOOKUP_ATTRIBUTE(tmp_expression_value_71, mod_consts[88]);
        if (tmp_called_value_50 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 157;

            goto try_except_handler_41;
        }
        tmp_tuple_element_46 = mod_consts[133];
        tmp_args_value_28 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_28, 0, tmp_tuple_element_46);
        CHECK_OBJECT(tmp_class_creation_9__bases);
        tmp_tuple_element_46 = tmp_class_creation_9__bases;
        PyTuple_SET_ITEM0(tmp_args_value_28, 1, tmp_tuple_element_46);
        CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
        tmp_kwargs_value_28 = tmp_class_creation_9__class_decl_dict;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 157;
        tmp_assign_source_120 = CALL_FUNCTION(tmp_called_value_50, tmp_args_value_28, tmp_kwargs_value_28);
        Py_DECREF(tmp_called_value_50);
        Py_DECREF(tmp_args_value_28);
        if (tmp_assign_source_120 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 157;

            goto try_except_handler_41;
        }
        assert(tmp_class_creation_9__prepared == NULL);
        tmp_class_creation_9__prepared = tmp_assign_source_120;
    }
    {
        bool tmp_condition_result_54;
        PyObject *tmp_operand_value_9;
        PyObject *tmp_expression_value_72;
        CHECK_OBJECT(tmp_class_creation_9__prepared);
        tmp_expression_value_72 = tmp_class_creation_9__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_72, mod_consts[89]);
        tmp_operand_value_9 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_9);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 157;

            goto try_except_handler_41;
        }
        tmp_condition_result_54 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_54 != false) {
            goto branch_yes_36;
        } else {
            goto branch_no_36;
        }
    }
    branch_yes_36:;
    {
        PyObject *tmp_raise_type_9;
        PyObject *tmp_raise_value_9;
        PyObject *tmp_left_value_12;
        PyObject *tmp_right_value_12;
        PyObject *tmp_tuple_element_47;
        PyObject *tmp_getattr_target_9;
        PyObject *tmp_getattr_attr_9;
        PyObject *tmp_getattr_default_9;
        tmp_raise_type_9 = PyExc_TypeError;
        tmp_left_value_12 = mod_consts[90];
        CHECK_OBJECT(tmp_class_creation_9__metaclass);
        tmp_getattr_target_9 = tmp_class_creation_9__metaclass;
        tmp_getattr_attr_9 = mod_consts[91];
        tmp_getattr_default_9 = mod_consts[92];
        tmp_tuple_element_47 = BUILTIN_GETATTR(tmp_getattr_target_9, tmp_getattr_attr_9, tmp_getattr_default_9);
        if (tmp_tuple_element_47 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 157;

            goto try_except_handler_41;
        }
        tmp_right_value_12 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_73;
            PyObject *tmp_type_arg_18;
            PyTuple_SET_ITEM(tmp_right_value_12, 0, tmp_tuple_element_47);
            CHECK_OBJECT(tmp_class_creation_9__prepared);
            tmp_type_arg_18 = tmp_class_creation_9__prepared;
            tmp_expression_value_73 = BUILTIN_TYPE1(tmp_type_arg_18);
            assert(!(tmp_expression_value_73 == NULL));
            tmp_tuple_element_47 = LOOKUP_ATTRIBUTE(tmp_expression_value_73, mod_consts[91]);
            Py_DECREF(tmp_expression_value_73);
            if (tmp_tuple_element_47 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 157;

                goto tuple_build_exception_10;
            }
            PyTuple_SET_ITEM(tmp_right_value_12, 1, tmp_tuple_element_47);
        }
        goto tuple_build_noexception_10;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_10:;
        Py_DECREF(tmp_right_value_12);
        goto try_except_handler_41;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_10:;
        tmp_raise_value_9 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_12, tmp_right_value_12);
        Py_DECREF(tmp_right_value_12);
        if (tmp_raise_value_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 157;

            goto try_except_handler_41;
        }
        exception_type = tmp_raise_type_9;
        Py_INCREF(tmp_raise_type_9);
        exception_value = tmp_raise_value_9;
        exception_lineno = 157;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_41;
    }
    branch_no_36:;
    goto branch_end_35;
    branch_no_35:;
    {
        PyObject *tmp_assign_source_121;
        tmp_assign_source_121 = PyDict_New();
        assert(tmp_class_creation_9__prepared == NULL);
        tmp_class_creation_9__prepared = tmp_assign_source_121;
    }
    branch_end_35:;
    {
        PyObject *tmp_assign_source_122;
        PyObject *tmp_called_value_51;
        PyObject *tmp_called_value_52;
        PyObject *tmp_args_value_29;
        PyObject *tmp_tuple_element_48;
        PyObject *tmp_expression_value_74;
        PyObject *tmp_expression_value_75;
        PyObject *tmp_kwargs_value_29;
        PyObject *tmp_args_element_value_35;
        PyObject *tmp_called_value_53;
        PyObject *tmp_called_value_54;
        PyObject *tmp_args_value_30;
        PyObject *tmp_tuple_element_49;
        PyObject *tmp_expression_value_76;
        PyObject *tmp_expression_value_77;
        PyObject *tmp_kwargs_value_30;
        PyObject *tmp_args_element_value_36;
        PyObject *tmp_called_value_55;
        PyObject *tmp_called_value_56;
        PyObject *tmp_args_value_31;
        PyObject *tmp_tuple_element_50;
        PyObject *tmp_expression_value_78;
        PyObject *tmp_expression_value_79;
        PyObject *tmp_kwargs_value_31;
        PyObject *tmp_args_element_value_37;
        tmp_called_value_52 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_52 == NULL)) {
            tmp_called_value_52 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_52 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 154;

            goto try_except_handler_41;
        }
        tmp_expression_value_75 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_75 == NULL)) {
            tmp_expression_value_75 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_75 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 154;

            goto try_except_handler_41;
        }
        tmp_expression_value_74 = LOOKUP_ATTRIBUTE(tmp_expression_value_75, mod_consts[19]);
        if (tmp_expression_value_74 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 154;

            goto try_except_handler_41;
        }
        tmp_tuple_element_48 = LOOKUP_ATTRIBUTE(tmp_expression_value_74, mod_consts[134]);
        Py_DECREF(tmp_expression_value_74);
        if (tmp_tuple_element_48 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 154;

            goto try_except_handler_41;
        }
        tmp_args_value_29 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_29, 0, tmp_tuple_element_48);
        tmp_kwargs_value_29 = PyDict_Copy(mod_consts[135]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 154;
        tmp_called_value_51 = CALL_FUNCTION(tmp_called_value_52, tmp_args_value_29, tmp_kwargs_value_29);
        Py_DECREF(tmp_args_value_29);
        Py_DECREF(tmp_kwargs_value_29);
        if (tmp_called_value_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 154;

            goto try_except_handler_41;
        }
        tmp_called_value_54 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_54 == NULL)) {
            tmp_called_value_54 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_54 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_51);

            exception_lineno = 155;

            goto try_except_handler_41;
        }
        tmp_expression_value_77 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_77 == NULL)) {
            tmp_expression_value_77 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_77 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_51);

            exception_lineno = 155;

            goto try_except_handler_41;
        }
        tmp_expression_value_76 = LOOKUP_ATTRIBUTE(tmp_expression_value_77, mod_consts[19]);
        if (tmp_expression_value_76 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_51);

            exception_lineno = 155;

            goto try_except_handler_41;
        }
        tmp_tuple_element_49 = LOOKUP_ATTRIBUTE(tmp_expression_value_76, mod_consts[136]);
        Py_DECREF(tmp_expression_value_76);
        if (tmp_tuple_element_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_51);

            exception_lineno = 155;

            goto try_except_handler_41;
        }
        tmp_args_value_30 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_30, 0, tmp_tuple_element_49);
        tmp_kwargs_value_30 = PyDict_Copy(mod_consts[137]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 155;
        tmp_called_value_53 = CALL_FUNCTION(tmp_called_value_54, tmp_args_value_30, tmp_kwargs_value_30);
        Py_DECREF(tmp_args_value_30);
        Py_DECREF(tmp_kwargs_value_30);
        if (tmp_called_value_53 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_51);

            exception_lineno = 155;

            goto try_except_handler_41;
        }
        tmp_called_value_56 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_56 == NULL)) {
            tmp_called_value_56 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_56 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_51);
            Py_DECREF(tmp_called_value_53);

            exception_lineno = 156;

            goto try_except_handler_41;
        }
        tmp_expression_value_79 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_79 == NULL)) {
            tmp_expression_value_79 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_79 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_51);
            Py_DECREF(tmp_called_value_53);

            exception_lineno = 156;

            goto try_except_handler_41;
        }
        tmp_expression_value_78 = LOOKUP_ATTRIBUTE(tmp_expression_value_79, mod_consts[19]);
        if (tmp_expression_value_78 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_51);
            Py_DECREF(tmp_called_value_53);

            exception_lineno = 156;

            goto try_except_handler_41;
        }
        tmp_tuple_element_50 = LOOKUP_ATTRIBUTE(tmp_expression_value_78, mod_consts[138]);
        Py_DECREF(tmp_expression_value_78);
        if (tmp_tuple_element_50 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_51);
            Py_DECREF(tmp_called_value_53);

            exception_lineno = 156;

            goto try_except_handler_41;
        }
        tmp_args_value_31 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_31, 0, tmp_tuple_element_50);
        tmp_kwargs_value_31 = PyDict_Copy(mod_consts[139]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 156;
        tmp_called_value_55 = CALL_FUNCTION(tmp_called_value_56, tmp_args_value_31, tmp_kwargs_value_31);
        Py_DECREF(tmp_args_value_31);
        Py_DECREF(tmp_kwargs_value_31);
        if (tmp_called_value_55 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_51);
            Py_DECREF(tmp_called_value_53);

            exception_lineno = 156;

            goto try_except_handler_41;
        }
        {
            PyObject *tmp_set_locals_9;
            CHECK_OBJECT(tmp_class_creation_9__prepared);
            tmp_set_locals_9 = tmp_class_creation_9__prepared;
            locals_numba$core$typing$randomdecl$$$class__9_Numpy_geometric_157 = tmp_set_locals_9;
            Py_INCREF(tmp_set_locals_9);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[93];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__9_Numpy_geometric_157, mod_consts[94], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 157;

            goto try_except_handler_43;
        }
        tmp_dictset_value = mod_consts[133];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__9_Numpy_geometric_157, mod_consts[96], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 157;

            goto try_except_handler_43;
        }
        if (isFrameUnusable(cache_frame_025e6c5517cafd5cac7783c883cac7cd_16)) {
            Py_XDECREF(cache_frame_025e6c5517cafd5cac7783c883cac7cd_16);

#if _DEBUG_REFCOUNTS
            if (cache_frame_025e6c5517cafd5cac7783c883cac7cd_16 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_025e6c5517cafd5cac7783c883cac7cd_16 = MAKE_FUNCTION_FRAME(codeobj_025e6c5517cafd5cac7783c883cac7cd, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_025e6c5517cafd5cac7783c883cac7cd_16->m_type_description == NULL);
        frame_025e6c5517cafd5cac7783c883cac7cd_16 = cache_frame_025e6c5517cafd5cac7783c883cac7cd_16;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_025e6c5517cafd5cac7783c883cac7cd_16);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_025e6c5517cafd5cac7783c883cac7cd_16) == 2); // Frame stack

        // Framed code:
        // Tried code:
        {
            PyObject *tmp_assign_source_123;
            PyObject *tmp_iter_arg_7;
            tmp_iter_arg_7 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__9_Numpy_geometric_157, mod_consts[86]);

            if (tmp_iter_arg_7 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_iter_arg_7 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[86]);

                    if (unlikely(tmp_iter_arg_7 == NULL)) {
                        tmp_iter_arg_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[86]);
                    }

                    if (tmp_iter_arg_7 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 158;
                        type_description_2 = "o";
                        goto try_except_handler_44;
                    }
                    Py_INCREF(tmp_iter_arg_7);
                } else {
                    goto try_except_handler_44;
                }
            }

            tmp_assign_source_123 = MAKE_ITERATOR(tmp_iter_arg_7);
            Py_DECREF(tmp_iter_arg_7);
            if (tmp_assign_source_123 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 158;
                type_description_2 = "o";
                goto try_except_handler_44;
            }
            assert(tmp_Numpy_geometric$listcomp_1__$0 == NULL);
            tmp_Numpy_geometric$listcomp_1__$0 = tmp_assign_source_123;
        }
        {
            PyObject *tmp_assign_source_124;
            tmp_assign_source_124 = PyList_New(0);
            assert(tmp_Numpy_geometric$listcomp_1__contraction == NULL);
            tmp_Numpy_geometric$listcomp_1__contraction = tmp_assign_source_124;
        }
        if (isFrameUnusable(cache_frame_484306ead6c4af53882293edb79cbe0d_17)) {
            Py_XDECREF(cache_frame_484306ead6c4af53882293edb79cbe0d_17);

#if _DEBUG_REFCOUNTS
            if (cache_frame_484306ead6c4af53882293edb79cbe0d_17 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_484306ead6c4af53882293edb79cbe0d_17 = MAKE_FUNCTION_FRAME(codeobj_484306ead6c4af53882293edb79cbe0d, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_484306ead6c4af53882293edb79cbe0d_17->m_type_description == NULL);
        frame_484306ead6c4af53882293edb79cbe0d_17 = cache_frame_484306ead6c4af53882293edb79cbe0d_17;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_484306ead6c4af53882293edb79cbe0d_17);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_484306ead6c4af53882293edb79cbe0d_17) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_7:;
        {
            PyObject *tmp_next_source_7;
            PyObject *tmp_assign_source_125;
            CHECK_OBJECT(tmp_Numpy_geometric$listcomp_1__$0);
            tmp_next_source_7 = tmp_Numpy_geometric$listcomp_1__$0;
            tmp_assign_source_125 = ITERATOR_NEXT(tmp_next_source_7);
            if (tmp_assign_source_125 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_7;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_3 = "o";
                    exception_lineno = 158;
                    goto try_except_handler_45;
                }
            }

            {
                PyObject *old = tmp_Numpy_geometric$listcomp_1__iter_value_0;
                tmp_Numpy_geometric$listcomp_1__iter_value_0 = tmp_assign_source_125;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_126;
            CHECK_OBJECT(tmp_Numpy_geometric$listcomp_1__iter_value_0);
            tmp_assign_source_126 = tmp_Numpy_geometric$listcomp_1__iter_value_0;
            {
                PyObject *old = outline_15_var_tp;
                outline_15_var_tp = tmp_assign_source_126;
                Py_INCREF(outline_15_var_tp);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_7;
            PyObject *tmp_append_value_7;
            PyObject *tmp_called_value_57;
            PyObject *tmp_args_element_value_38;
            PyObject *tmp_expression_value_80;
            PyObject *tmp_args_element_value_39;
            CHECK_OBJECT(tmp_Numpy_geometric$listcomp_1__contraction);
            tmp_append_list_7 = tmp_Numpy_geometric$listcomp_1__contraction;
            tmp_called_value_57 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[25]);

            if (unlikely(tmp_called_value_57 == NULL)) {
                tmp_called_value_57 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[25]);
            }

            if (tmp_called_value_57 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 158;
                type_description_3 = "o";
                goto try_except_handler_45;
            }
            tmp_expression_value_80 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[0]);

            if (unlikely(tmp_expression_value_80 == NULL)) {
                tmp_expression_value_80 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[0]);
            }

            if (tmp_expression_value_80 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 158;
                type_description_3 = "o";
                goto try_except_handler_45;
            }
            tmp_args_element_value_38 = LOOKUP_ATTRIBUTE(tmp_expression_value_80, mod_consts[83]);
            if (tmp_args_element_value_38 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 158;
                type_description_3 = "o";
                goto try_except_handler_45;
            }
            CHECK_OBJECT(outline_15_var_tp);
            tmp_args_element_value_39 = outline_15_var_tp;
            frame_484306ead6c4af53882293edb79cbe0d_17->m_frame.f_lineno = 158;
            {
                PyObject *call_args[] = {tmp_args_element_value_38, tmp_args_element_value_39};
                tmp_append_value_7 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_57, call_args);
            }

            Py_DECREF(tmp_args_element_value_38);
            if (tmp_append_value_7 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 158;
                type_description_3 = "o";
                goto try_except_handler_45;
            }
            assert(PyList_Check(tmp_append_list_7));
            tmp_result = LIST_APPEND1(tmp_append_list_7, tmp_append_value_7);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 158;
                type_description_3 = "o";
                goto try_except_handler_45;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 158;
            type_description_3 = "o";
            goto try_except_handler_45;
        }
        goto loop_start_7;
        loop_end_7:;
        CHECK_OBJECT(tmp_Numpy_geometric$listcomp_1__contraction);
        tmp_dictset_value = tmp_Numpy_geometric$listcomp_1__contraction;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_45;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_45:;
        CHECK_OBJECT(tmp_Numpy_geometric$listcomp_1__$0);
        Py_DECREF(tmp_Numpy_geometric$listcomp_1__$0);
        tmp_Numpy_geometric$listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_Numpy_geometric$listcomp_1__contraction);
        Py_DECREF(tmp_Numpy_geometric$listcomp_1__contraction);
        tmp_Numpy_geometric$listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_Numpy_geometric$listcomp_1__iter_value_0);
        tmp_Numpy_geometric$listcomp_1__iter_value_0 = NULL;
        goto frame_return_exit_7;
        // Exception handler code:
        try_except_handler_45:;
        exception_keeper_type_41 = exception_type;
        exception_keeper_value_41 = exception_value;
        exception_keeper_tb_41 = exception_tb;
        exception_keeper_lineno_41 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Numpy_geometric$listcomp_1__$0);
        Py_DECREF(tmp_Numpy_geometric$listcomp_1__$0);
        tmp_Numpy_geometric$listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_Numpy_geometric$listcomp_1__contraction);
        Py_DECREF(tmp_Numpy_geometric$listcomp_1__contraction);
        tmp_Numpy_geometric$listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_Numpy_geometric$listcomp_1__iter_value_0);
        tmp_Numpy_geometric$listcomp_1__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_41;
        exception_value = exception_keeper_value_41;
        exception_tb = exception_keeper_tb_41;
        exception_lineno = exception_keeper_lineno_41;

        goto frame_exception_exit_17;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_484306ead6c4af53882293edb79cbe0d_17);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_15;

        frame_return_exit_7:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_484306ead6c4af53882293edb79cbe0d_17);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_44;

        frame_exception_exit_17:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_484306ead6c4af53882293edb79cbe0d_17);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_484306ead6c4af53882293edb79cbe0d_17, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_484306ead6c4af53882293edb79cbe0d_17->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_484306ead6c4af53882293edb79cbe0d_17, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_484306ead6c4af53882293edb79cbe0d_17,
            type_description_3,
            outline_15_var_tp
        );


        // Release cached frame if used for exception.
        if (frame_484306ead6c4af53882293edb79cbe0d_17 == cache_frame_484306ead6c4af53882293edb79cbe0d_17) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_484306ead6c4af53882293edb79cbe0d_17);
            cache_frame_484306ead6c4af53882293edb79cbe0d_17 = NULL;
        }

        assertFrameObject(frame_484306ead6c4af53882293edb79cbe0d_17);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_16;

        frame_no_exception_15:;
        goto skip_nested_handling_15;
        nested_frame_exit_16:;
        type_description_2 = "o";
        goto try_except_handler_44;
        skip_nested_handling_15:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_44:;
        Py_XDECREF(outline_15_var_tp);
        outline_15_var_tp = NULL;
        goto outline_result_16;
        // Exception handler code:
        try_except_handler_44:;
        exception_keeper_type_42 = exception_type;
        exception_keeper_value_42 = exception_value;
        exception_keeper_tb_42 = exception_tb;
        exception_keeper_lineno_42 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_15_var_tp);
        outline_15_var_tp = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_42;
        exception_value = exception_keeper_value_42;
        exception_tb = exception_keeper_tb_42;
        exception_lineno = exception_keeper_lineno_42;

        goto outline_exception_16;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_16:;
        exception_lineno = 158;
        goto frame_exception_exit_16;
        outline_result_16:;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__9_Numpy_geometric_157, mod_consts[30], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 158;
            type_description_2 = "o";
            goto frame_exception_exit_16;
        }


        tmp_dictset_value = MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__6_generic();

        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__9_Numpy_geometric_157, mod_consts[110], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 160;
            type_description_2 = "o";
            goto frame_exception_exit_16;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_025e6c5517cafd5cac7783c883cac7cd_16);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_16;

        frame_exception_exit_16:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_025e6c5517cafd5cac7783c883cac7cd_16);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_025e6c5517cafd5cac7783c883cac7cd_16, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_025e6c5517cafd5cac7783c883cac7cd_16->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_025e6c5517cafd5cac7783c883cac7cd_16, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_025e6c5517cafd5cac7783c883cac7cd_16,
            type_description_2,
            outline_14_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_025e6c5517cafd5cac7783c883cac7cd_16 == cache_frame_025e6c5517cafd5cac7783c883cac7cd_16) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_025e6c5517cafd5cac7783c883cac7cd_16);
            cache_frame_025e6c5517cafd5cac7783c883cac7cd_16 = NULL;
        }

        assertFrameObject(frame_025e6c5517cafd5cac7783c883cac7cd_16);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_15;

        frame_no_exception_16:;
        goto skip_nested_handling_16;
        nested_frame_exit_15:;

        goto try_except_handler_43;
        skip_nested_handling_16:;
        {
            nuitka_bool tmp_condition_result_55;
            PyObject *tmp_cmp_expr_left_10;
            PyObject *tmp_cmp_expr_right_10;
            CHECK_OBJECT(tmp_class_creation_9__bases);
            tmp_cmp_expr_left_10 = tmp_class_creation_9__bases;
            CHECK_OBJECT(tmp_class_creation_9__bases_orig);
            tmp_cmp_expr_right_10 = tmp_class_creation_9__bases_orig;
            tmp_condition_result_55 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_10, tmp_cmp_expr_right_10);
            if (tmp_condition_result_55 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 157;

                goto try_except_handler_43;
            }
            if (tmp_condition_result_55 == NUITKA_BOOL_TRUE) {
                goto branch_yes_37;
            } else {
                goto branch_no_37;
            }
            assert(tmp_condition_result_55 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_37:;
        CHECK_OBJECT(tmp_class_creation_9__bases_orig);
        tmp_dictset_value = tmp_class_creation_9__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__9_Numpy_geometric_157, mod_consts[98], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 157;

            goto try_except_handler_43;
        }
        branch_no_37:;
        {
            PyObject *tmp_assign_source_127;
            PyObject *tmp_called_value_58;
            PyObject *tmp_args_value_32;
            PyObject *tmp_tuple_element_51;
            PyObject *tmp_kwargs_value_32;
            CHECK_OBJECT(tmp_class_creation_9__metaclass);
            tmp_called_value_58 = tmp_class_creation_9__metaclass;
            tmp_tuple_element_51 = mod_consts[133];
            tmp_args_value_32 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_32, 0, tmp_tuple_element_51);
            CHECK_OBJECT(tmp_class_creation_9__bases);
            tmp_tuple_element_51 = tmp_class_creation_9__bases;
            PyTuple_SET_ITEM0(tmp_args_value_32, 1, tmp_tuple_element_51);
            tmp_tuple_element_51 = locals_numba$core$typing$randomdecl$$$class__9_Numpy_geometric_157;
            PyTuple_SET_ITEM0(tmp_args_value_32, 2, tmp_tuple_element_51);
            CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
            tmp_kwargs_value_32 = tmp_class_creation_9__class_decl_dict;
            frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 157;
            tmp_assign_source_127 = CALL_FUNCTION(tmp_called_value_58, tmp_args_value_32, tmp_kwargs_value_32);
            Py_DECREF(tmp_args_value_32);
            if (tmp_assign_source_127 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 157;

                goto try_except_handler_43;
            }
            assert(outline_14_var___class__ == NULL);
            outline_14_var___class__ = tmp_assign_source_127;
        }
        CHECK_OBJECT(outline_14_var___class__);
        tmp_args_element_value_37 = outline_14_var___class__;
        Py_INCREF(tmp_args_element_value_37);
        goto try_return_handler_43;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_43:;
        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__9_Numpy_geometric_157);
        locals_numba$core$typing$randomdecl$$$class__9_Numpy_geometric_157 = NULL;
        goto try_return_handler_42;
        // Exception handler code:
        try_except_handler_43:;
        exception_keeper_type_43 = exception_type;
        exception_keeper_value_43 = exception_value;
        exception_keeper_tb_43 = exception_tb;
        exception_keeper_lineno_43 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__9_Numpy_geometric_157);
        locals_numba$core$typing$randomdecl$$$class__9_Numpy_geometric_157 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_43;
        exception_value = exception_keeper_value_43;
        exception_tb = exception_keeper_tb_43;
        exception_lineno = exception_keeper_lineno_43;

        goto try_except_handler_42;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_42:;
        CHECK_OBJECT(outline_14_var___class__);
        Py_DECREF(outline_14_var___class__);
        outline_14_var___class__ = NULL;
        goto outline_result_15;
        // Exception handler code:
        try_except_handler_42:;
        exception_keeper_type_44 = exception_type;
        exception_keeper_value_44 = exception_value;
        exception_keeper_tb_44 = exception_tb;
        exception_keeper_lineno_44 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_44;
        exception_value = exception_keeper_value_44;
        exception_tb = exception_keeper_tb_44;
        exception_lineno = exception_keeper_lineno_44;

        goto outline_exception_15;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_15:;
        exception_lineno = 157;
        goto try_except_handler_41;
        outline_result_15:;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 156;
        tmp_args_element_value_36 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_55, tmp_args_element_value_37);
        Py_DECREF(tmp_called_value_55);
        Py_DECREF(tmp_args_element_value_37);
        if (tmp_args_element_value_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_51);
            Py_DECREF(tmp_called_value_53);

            exception_lineno = 156;

            goto try_except_handler_41;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 155;
        tmp_args_element_value_35 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_53, tmp_args_element_value_36);
        Py_DECREF(tmp_called_value_53);
        Py_DECREF(tmp_args_element_value_36);
        if (tmp_args_element_value_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_51);

            exception_lineno = 155;

            goto try_except_handler_41;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 154;
        tmp_assign_source_122 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_51, tmp_args_element_value_35);
        Py_DECREF(tmp_called_value_51);
        Py_DECREF(tmp_args_element_value_35);
        if (tmp_assign_source_122 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 154;

            goto try_except_handler_41;
        }
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[133], tmp_assign_source_122);
    }
    goto try_end_13;
    // Exception handler code:
    try_except_handler_41:;
    exception_keeper_type_45 = exception_type;
    exception_keeper_value_45 = exception_value;
    exception_keeper_tb_45 = exception_tb;
    exception_keeper_lineno_45 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_9__bases_orig);
    tmp_class_creation_9__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_9__bases);
    tmp_class_creation_9__bases = NULL;
    Py_XDECREF(tmp_class_creation_9__class_decl_dict);
    tmp_class_creation_9__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_9__metaclass);
    tmp_class_creation_9__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_9__prepared);
    tmp_class_creation_9__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_45;
    exception_value = exception_keeper_value_45;
    exception_tb = exception_keeper_tb_45;
    exception_lineno = exception_keeper_lineno_45;

    goto frame_exception_exit_1;
    // End of try:
    try_end_13:;
    CHECK_OBJECT(tmp_class_creation_9__bases_orig);
    Py_DECREF(tmp_class_creation_9__bases_orig);
    tmp_class_creation_9__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_9__bases);
    Py_DECREF(tmp_class_creation_9__bases);
    tmp_class_creation_9__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
    Py_DECREF(tmp_class_creation_9__class_decl_dict);
    tmp_class_creation_9__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_9__metaclass);
    Py_DECREF(tmp_class_creation_9__metaclass);
    tmp_class_creation_9__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_9__prepared);
    Py_DECREF(tmp_class_creation_9__prepared);
    tmp_class_creation_9__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_128;
        PyObject *tmp_tuple_element_52;
        tmp_tuple_element_52 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[99]);

        if (unlikely(tmp_tuple_element_52 == NULL)) {
            tmp_tuple_element_52 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[99]);
        }

        if (tmp_tuple_element_52 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 168;

            goto try_except_handler_46;
        }
        tmp_assign_source_128 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_128, 0, tmp_tuple_element_52);
        assert(tmp_class_creation_10__bases_orig == NULL);
        tmp_class_creation_10__bases_orig = tmp_assign_source_128;
    }
    {
        PyObject *tmp_assign_source_129;
        PyObject *tmp_dircall_arg1_10;
        CHECK_OBJECT(tmp_class_creation_10__bases_orig);
        tmp_dircall_arg1_10 = tmp_class_creation_10__bases_orig;
        Py_INCREF(tmp_dircall_arg1_10);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_10};
            tmp_assign_source_129 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_129 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 168;

            goto try_except_handler_46;
        }
        assert(tmp_class_creation_10__bases == NULL);
        tmp_class_creation_10__bases = tmp_assign_source_129;
    }
    {
        PyObject *tmp_assign_source_130;
        tmp_assign_source_130 = PyDict_New();
        assert(tmp_class_creation_10__class_decl_dict == NULL);
        tmp_class_creation_10__class_decl_dict = tmp_assign_source_130;
    }
    {
        PyObject *tmp_assign_source_131;
        PyObject *tmp_metaclass_value_10;
        bool tmp_condition_result_56;
        PyObject *tmp_key_value_28;
        PyObject *tmp_dict_arg_value_28;
        PyObject *tmp_dict_arg_value_29;
        PyObject *tmp_key_value_29;
        nuitka_bool tmp_condition_result_57;
        int tmp_truth_name_10;
        PyObject *tmp_type_arg_19;
        PyObject *tmp_expression_value_81;
        PyObject *tmp_subscript_value_10;
        PyObject *tmp_bases_value_10;
        tmp_key_value_28 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
        tmp_dict_arg_value_28 = tmp_class_creation_10__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_28, tmp_key_value_28);
        assert(!(tmp_res == -1));
        tmp_condition_result_56 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_56 != false) {
            goto condexpr_true_19;
        } else {
            goto condexpr_false_19;
        }
        condexpr_true_19:;
        CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
        tmp_dict_arg_value_29 = tmp_class_creation_10__class_decl_dict;
        tmp_key_value_29 = mod_consts[87];
        tmp_metaclass_value_10 = DICT_GET_ITEM0(tmp_dict_arg_value_29, tmp_key_value_29);
        if (tmp_metaclass_value_10 == NULL) {
            tmp_metaclass_value_10 = Py_None;
        }
        assert(!(tmp_metaclass_value_10 == NULL));
        Py_INCREF(tmp_metaclass_value_10);
        goto condexpr_end_19;
        condexpr_false_19:;
        CHECK_OBJECT(tmp_class_creation_10__bases);
        tmp_truth_name_10 = CHECK_IF_TRUE(tmp_class_creation_10__bases);
        if (tmp_truth_name_10 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 168;

            goto try_except_handler_46;
        }
        tmp_condition_result_57 = tmp_truth_name_10 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_57 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_20;
        } else {
            goto condexpr_false_20;
        }
        condexpr_true_20:;
        CHECK_OBJECT(tmp_class_creation_10__bases);
        tmp_expression_value_81 = tmp_class_creation_10__bases;
        tmp_subscript_value_10 = mod_consts[13];
        tmp_type_arg_19 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_81, tmp_subscript_value_10, 0);
        if (tmp_type_arg_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 168;

            goto try_except_handler_46;
        }
        tmp_metaclass_value_10 = BUILTIN_TYPE1(tmp_type_arg_19);
        Py_DECREF(tmp_type_arg_19);
        if (tmp_metaclass_value_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 168;

            goto try_except_handler_46;
        }
        goto condexpr_end_20;
        condexpr_false_20:;
        tmp_metaclass_value_10 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_10);
        condexpr_end_20:;
        condexpr_end_19:;
        CHECK_OBJECT(tmp_class_creation_10__bases);
        tmp_bases_value_10 = tmp_class_creation_10__bases;
        tmp_assign_source_131 = SELECT_METACLASS(tmp_metaclass_value_10, tmp_bases_value_10);
        Py_DECREF(tmp_metaclass_value_10);
        if (tmp_assign_source_131 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 168;

            goto try_except_handler_46;
        }
        assert(tmp_class_creation_10__metaclass == NULL);
        tmp_class_creation_10__metaclass = tmp_assign_source_131;
    }
    {
        bool tmp_condition_result_58;
        PyObject *tmp_key_value_30;
        PyObject *tmp_dict_arg_value_30;
        tmp_key_value_30 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
        tmp_dict_arg_value_30 = tmp_class_creation_10__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_30, tmp_key_value_30);
        assert(!(tmp_res == -1));
        tmp_condition_result_58 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_58 != false) {
            goto branch_yes_38;
        } else {
            goto branch_no_38;
        }
    }
    branch_yes_38:;
    CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_10__class_decl_dict;
    tmp_dictdel_key = mod_consts[87];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 168;

        goto try_except_handler_46;
    }
    branch_no_38:;
    {
        nuitka_bool tmp_condition_result_59;
        PyObject *tmp_expression_value_82;
        CHECK_OBJECT(tmp_class_creation_10__metaclass);
        tmp_expression_value_82 = tmp_class_creation_10__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_82, mod_consts[88]);
        tmp_condition_result_59 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_59 == NUITKA_BOOL_TRUE) {
            goto branch_yes_39;
        } else {
            goto branch_no_39;
        }
    }
    branch_yes_39:;
    {
        PyObject *tmp_assign_source_132;
        PyObject *tmp_called_value_59;
        PyObject *tmp_expression_value_83;
        PyObject *tmp_args_value_33;
        PyObject *tmp_tuple_element_53;
        PyObject *tmp_kwargs_value_33;
        CHECK_OBJECT(tmp_class_creation_10__metaclass);
        tmp_expression_value_83 = tmp_class_creation_10__metaclass;
        tmp_called_value_59 = LOOKUP_ATTRIBUTE(tmp_expression_value_83, mod_consts[88]);
        if (tmp_called_value_59 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 168;

            goto try_except_handler_46;
        }
        tmp_tuple_element_53 = mod_consts[141];
        tmp_args_value_33 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_33, 0, tmp_tuple_element_53);
        CHECK_OBJECT(tmp_class_creation_10__bases);
        tmp_tuple_element_53 = tmp_class_creation_10__bases;
        PyTuple_SET_ITEM0(tmp_args_value_33, 1, tmp_tuple_element_53);
        CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
        tmp_kwargs_value_33 = tmp_class_creation_10__class_decl_dict;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 168;
        tmp_assign_source_132 = CALL_FUNCTION(tmp_called_value_59, tmp_args_value_33, tmp_kwargs_value_33);
        Py_DECREF(tmp_called_value_59);
        Py_DECREF(tmp_args_value_33);
        if (tmp_assign_source_132 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 168;

            goto try_except_handler_46;
        }
        assert(tmp_class_creation_10__prepared == NULL);
        tmp_class_creation_10__prepared = tmp_assign_source_132;
    }
    {
        bool tmp_condition_result_60;
        PyObject *tmp_operand_value_10;
        PyObject *tmp_expression_value_84;
        CHECK_OBJECT(tmp_class_creation_10__prepared);
        tmp_expression_value_84 = tmp_class_creation_10__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_84, mod_consts[89]);
        tmp_operand_value_10 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_10);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 168;

            goto try_except_handler_46;
        }
        tmp_condition_result_60 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_60 != false) {
            goto branch_yes_40;
        } else {
            goto branch_no_40;
        }
    }
    branch_yes_40:;
    {
        PyObject *tmp_raise_type_10;
        PyObject *tmp_raise_value_10;
        PyObject *tmp_left_value_13;
        PyObject *tmp_right_value_13;
        PyObject *tmp_tuple_element_54;
        PyObject *tmp_getattr_target_10;
        PyObject *tmp_getattr_attr_10;
        PyObject *tmp_getattr_default_10;
        tmp_raise_type_10 = PyExc_TypeError;
        tmp_left_value_13 = mod_consts[90];
        CHECK_OBJECT(tmp_class_creation_10__metaclass);
        tmp_getattr_target_10 = tmp_class_creation_10__metaclass;
        tmp_getattr_attr_10 = mod_consts[91];
        tmp_getattr_default_10 = mod_consts[92];
        tmp_tuple_element_54 = BUILTIN_GETATTR(tmp_getattr_target_10, tmp_getattr_attr_10, tmp_getattr_default_10);
        if (tmp_tuple_element_54 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 168;

            goto try_except_handler_46;
        }
        tmp_right_value_13 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_85;
            PyObject *tmp_type_arg_20;
            PyTuple_SET_ITEM(tmp_right_value_13, 0, tmp_tuple_element_54);
            CHECK_OBJECT(tmp_class_creation_10__prepared);
            tmp_type_arg_20 = tmp_class_creation_10__prepared;
            tmp_expression_value_85 = BUILTIN_TYPE1(tmp_type_arg_20);
            assert(!(tmp_expression_value_85 == NULL));
            tmp_tuple_element_54 = LOOKUP_ATTRIBUTE(tmp_expression_value_85, mod_consts[91]);
            Py_DECREF(tmp_expression_value_85);
            if (tmp_tuple_element_54 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 168;

                goto tuple_build_exception_11;
            }
            PyTuple_SET_ITEM(tmp_right_value_13, 1, tmp_tuple_element_54);
        }
        goto tuple_build_noexception_11;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_11:;
        Py_DECREF(tmp_right_value_13);
        goto try_except_handler_46;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_11:;
        tmp_raise_value_10 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_13, tmp_right_value_13);
        Py_DECREF(tmp_right_value_13);
        if (tmp_raise_value_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 168;

            goto try_except_handler_46;
        }
        exception_type = tmp_raise_type_10;
        Py_INCREF(tmp_raise_type_10);
        exception_value = tmp_raise_value_10;
        exception_lineno = 168;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_46;
    }
    branch_no_40:;
    goto branch_end_39;
    branch_no_39:;
    {
        PyObject *tmp_assign_source_133;
        tmp_assign_source_133 = PyDict_New();
        assert(tmp_class_creation_10__prepared == NULL);
        tmp_class_creation_10__prepared = tmp_assign_source_133;
    }
    branch_end_39:;
    {
        PyObject *tmp_assign_source_134;
        PyObject *tmp_called_value_60;
        PyObject *tmp_called_value_61;
        PyObject *tmp_args_value_34;
        PyObject *tmp_tuple_element_55;
        PyObject *tmp_expression_value_86;
        PyObject *tmp_expression_value_87;
        PyObject *tmp_kwargs_value_34;
        PyObject *tmp_args_element_value_40;
        PyObject *tmp_called_value_62;
        PyObject *tmp_called_value_63;
        PyObject *tmp_args_value_35;
        PyObject *tmp_tuple_element_56;
        PyObject *tmp_expression_value_88;
        PyObject *tmp_expression_value_89;
        PyObject *tmp_kwargs_value_35;
        PyObject *tmp_args_element_value_41;
        tmp_called_value_61 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_61 == NULL)) {
            tmp_called_value_61 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_61 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 165;

            goto try_except_handler_46;
        }
        tmp_expression_value_87 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_87 == NULL)) {
            tmp_expression_value_87 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_87 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 165;

            goto try_except_handler_46;
        }
        tmp_expression_value_86 = LOOKUP_ATTRIBUTE(tmp_expression_value_87, mod_consts[19]);
        if (tmp_expression_value_86 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 165;

            goto try_except_handler_46;
        }
        tmp_tuple_element_55 = LOOKUP_ATTRIBUTE(tmp_expression_value_86, mod_consts[142]);
        Py_DECREF(tmp_expression_value_86);
        if (tmp_tuple_element_55 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 165;

            goto try_except_handler_46;
        }
        tmp_args_value_34 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_34, 0, tmp_tuple_element_55);
        tmp_kwargs_value_34 = PyDict_Copy(mod_consts[143]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 165;
        tmp_called_value_60 = CALL_FUNCTION(tmp_called_value_61, tmp_args_value_34, tmp_kwargs_value_34);
        Py_DECREF(tmp_args_value_34);
        Py_DECREF(tmp_kwargs_value_34);
        if (tmp_called_value_60 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 165;

            goto try_except_handler_46;
        }
        tmp_called_value_63 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_63 == NULL)) {
            tmp_called_value_63 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_63 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_60);

            exception_lineno = 166;

            goto try_except_handler_46;
        }
        tmp_expression_value_89 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_89 == NULL)) {
            tmp_expression_value_89 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_89 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_60);

            exception_lineno = 166;

            goto try_except_handler_46;
        }
        tmp_expression_value_88 = LOOKUP_ATTRIBUTE(tmp_expression_value_89, mod_consts[19]);
        if (tmp_expression_value_88 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_60);

            exception_lineno = 166;

            goto try_except_handler_46;
        }
        tmp_tuple_element_56 = LOOKUP_ATTRIBUTE(tmp_expression_value_88, mod_consts[144]);
        Py_DECREF(tmp_expression_value_88);
        if (tmp_tuple_element_56 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_60);

            exception_lineno = 166;

            goto try_except_handler_46;
        }
        tmp_args_value_35 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_35, 0, tmp_tuple_element_56);
        tmp_kwargs_value_35 = PyDict_Copy(mod_consts[145]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 166;
        tmp_called_value_62 = CALL_FUNCTION(tmp_called_value_63, tmp_args_value_35, tmp_kwargs_value_35);
        Py_DECREF(tmp_args_value_35);
        Py_DECREF(tmp_kwargs_value_35);
        if (tmp_called_value_62 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_60);

            exception_lineno = 166;

            goto try_except_handler_46;
        }
        {
            PyObject *tmp_set_locals_10;
            CHECK_OBJECT(tmp_class_creation_10__prepared);
            tmp_set_locals_10 = tmp_class_creation_10__prepared;
            locals_numba$core$typing$randomdecl$$$class__10_Numpy_negative_binomial_168 = tmp_set_locals_10;
            Py_INCREF(tmp_set_locals_10);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[93];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__10_Numpy_negative_binomial_168, mod_consts[94], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 168;

            goto try_except_handler_48;
        }
        tmp_dictset_value = mod_consts[141];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__10_Numpy_negative_binomial_168, mod_consts[96], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 168;

            goto try_except_handler_48;
        }
        if (isFrameUnusable(cache_frame_b3074d356e3d3d7338fe92ecba3aaa5c_18)) {
            Py_XDECREF(cache_frame_b3074d356e3d3d7338fe92ecba3aaa5c_18);

#if _DEBUG_REFCOUNTS
            if (cache_frame_b3074d356e3d3d7338fe92ecba3aaa5c_18 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_b3074d356e3d3d7338fe92ecba3aaa5c_18 = MAKE_FUNCTION_FRAME(codeobj_b3074d356e3d3d7338fe92ecba3aaa5c, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_b3074d356e3d3d7338fe92ecba3aaa5c_18->m_type_description == NULL);
        frame_b3074d356e3d3d7338fe92ecba3aaa5c_18 = cache_frame_b3074d356e3d3d7338fe92ecba3aaa5c_18;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_b3074d356e3d3d7338fe92ecba3aaa5c_18);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_b3074d356e3d3d7338fe92ecba3aaa5c_18) == 2); // Frame stack

        // Framed code:
        // Tried code:
        {
            PyObject *tmp_assign_source_135;
            PyObject *tmp_iter_arg_8;
            tmp_iter_arg_8 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__10_Numpy_negative_binomial_168, mod_consts[86]);

            if (tmp_iter_arg_8 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_iter_arg_8 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[86]);

                    if (unlikely(tmp_iter_arg_8 == NULL)) {
                        tmp_iter_arg_8 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[86]);
                    }

                    if (tmp_iter_arg_8 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 169;
                        type_description_2 = "o";
                        goto try_except_handler_49;
                    }
                    Py_INCREF(tmp_iter_arg_8);
                } else {
                    goto try_except_handler_49;
                }
            }

            tmp_assign_source_135 = MAKE_ITERATOR(tmp_iter_arg_8);
            Py_DECREF(tmp_iter_arg_8);
            if (tmp_assign_source_135 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 169;
                type_description_2 = "o";
                goto try_except_handler_49;
            }
            assert(tmp_Numpy_negative_binomial$listcomp_1__$0 == NULL);
            tmp_Numpy_negative_binomial$listcomp_1__$0 = tmp_assign_source_135;
        }
        {
            PyObject *tmp_assign_source_136;
            tmp_assign_source_136 = PyList_New(0);
            assert(tmp_Numpy_negative_binomial$listcomp_1__contraction == NULL);
            tmp_Numpy_negative_binomial$listcomp_1__contraction = tmp_assign_source_136;
        }
        if (isFrameUnusable(cache_frame_e454d590a60fedf1a1c3a064cc1c16bf_19)) {
            Py_XDECREF(cache_frame_e454d590a60fedf1a1c3a064cc1c16bf_19);

#if _DEBUG_REFCOUNTS
            if (cache_frame_e454d590a60fedf1a1c3a064cc1c16bf_19 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_e454d590a60fedf1a1c3a064cc1c16bf_19 = MAKE_FUNCTION_FRAME(codeobj_e454d590a60fedf1a1c3a064cc1c16bf, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_e454d590a60fedf1a1c3a064cc1c16bf_19->m_type_description == NULL);
        frame_e454d590a60fedf1a1c3a064cc1c16bf_19 = cache_frame_e454d590a60fedf1a1c3a064cc1c16bf_19;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_e454d590a60fedf1a1c3a064cc1c16bf_19);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_e454d590a60fedf1a1c3a064cc1c16bf_19) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_8:;
        {
            PyObject *tmp_next_source_8;
            PyObject *tmp_assign_source_137;
            CHECK_OBJECT(tmp_Numpy_negative_binomial$listcomp_1__$0);
            tmp_next_source_8 = tmp_Numpy_negative_binomial$listcomp_1__$0;
            tmp_assign_source_137 = ITERATOR_NEXT(tmp_next_source_8);
            if (tmp_assign_source_137 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_8;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_3 = "o";
                    exception_lineno = 169;
                    goto try_except_handler_50;
                }
            }

            {
                PyObject *old = tmp_Numpy_negative_binomial$listcomp_1__iter_value_0;
                tmp_Numpy_negative_binomial$listcomp_1__iter_value_0 = tmp_assign_source_137;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_138;
            CHECK_OBJECT(tmp_Numpy_negative_binomial$listcomp_1__iter_value_0);
            tmp_assign_source_138 = tmp_Numpy_negative_binomial$listcomp_1__iter_value_0;
            {
                PyObject *old = outline_17_var_tp;
                outline_17_var_tp = tmp_assign_source_138;
                Py_INCREF(outline_17_var_tp);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_8;
            PyObject *tmp_append_value_8;
            PyObject *tmp_called_value_64;
            PyObject *tmp_args_element_value_42;
            PyObject *tmp_expression_value_90;
            PyObject *tmp_args_element_value_43;
            PyObject *tmp_expression_value_91;
            PyObject *tmp_args_element_value_44;
            CHECK_OBJECT(tmp_Numpy_negative_binomial$listcomp_1__contraction);
            tmp_append_list_8 = tmp_Numpy_negative_binomial$listcomp_1__contraction;
            tmp_called_value_64 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[25]);

            if (unlikely(tmp_called_value_64 == NULL)) {
                tmp_called_value_64 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[25]);
            }

            if (tmp_called_value_64 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 169;
                type_description_3 = "o";
                goto try_except_handler_50;
            }
            tmp_expression_value_90 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[0]);

            if (unlikely(tmp_expression_value_90 == NULL)) {
                tmp_expression_value_90 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[0]);
            }

            if (tmp_expression_value_90 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 169;
                type_description_3 = "o";
                goto try_except_handler_50;
            }
            tmp_args_element_value_42 = LOOKUP_ATTRIBUTE(tmp_expression_value_90, mod_consts[83]);
            if (tmp_args_element_value_42 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 169;
                type_description_3 = "o";
                goto try_except_handler_50;
            }
            tmp_expression_value_91 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[0]);

            if (unlikely(tmp_expression_value_91 == NULL)) {
                tmp_expression_value_91 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[0]);
            }

            if (tmp_expression_value_91 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_args_element_value_42);

                exception_lineno = 169;
                type_description_3 = "o";
                goto try_except_handler_50;
            }
            tmp_args_element_value_43 = LOOKUP_ATTRIBUTE(tmp_expression_value_91, mod_consts[83]);
            if (tmp_args_element_value_43 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_args_element_value_42);

                exception_lineno = 169;
                type_description_3 = "o";
                goto try_except_handler_50;
            }
            CHECK_OBJECT(outline_17_var_tp);
            tmp_args_element_value_44 = outline_17_var_tp;
            frame_e454d590a60fedf1a1c3a064cc1c16bf_19->m_frame.f_lineno = 169;
            {
                PyObject *call_args[] = {tmp_args_element_value_42, tmp_args_element_value_43, tmp_args_element_value_44};
                tmp_append_value_8 = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_64, call_args);
            }

            Py_DECREF(tmp_args_element_value_42);
            Py_DECREF(tmp_args_element_value_43);
            if (tmp_append_value_8 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 169;
                type_description_3 = "o";
                goto try_except_handler_50;
            }
            assert(PyList_Check(tmp_append_list_8));
            tmp_result = LIST_APPEND1(tmp_append_list_8, tmp_append_value_8);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 169;
                type_description_3 = "o";
                goto try_except_handler_50;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;
            type_description_3 = "o";
            goto try_except_handler_50;
        }
        goto loop_start_8;
        loop_end_8:;
        CHECK_OBJECT(tmp_Numpy_negative_binomial$listcomp_1__contraction);
        tmp_dictset_value = tmp_Numpy_negative_binomial$listcomp_1__contraction;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_50;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_50:;
        CHECK_OBJECT(tmp_Numpy_negative_binomial$listcomp_1__$0);
        Py_DECREF(tmp_Numpy_negative_binomial$listcomp_1__$0);
        tmp_Numpy_negative_binomial$listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_Numpy_negative_binomial$listcomp_1__contraction);
        Py_DECREF(tmp_Numpy_negative_binomial$listcomp_1__contraction);
        tmp_Numpy_negative_binomial$listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_Numpy_negative_binomial$listcomp_1__iter_value_0);
        tmp_Numpy_negative_binomial$listcomp_1__iter_value_0 = NULL;
        goto frame_return_exit_8;
        // Exception handler code:
        try_except_handler_50:;
        exception_keeper_type_46 = exception_type;
        exception_keeper_value_46 = exception_value;
        exception_keeper_tb_46 = exception_tb;
        exception_keeper_lineno_46 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Numpy_negative_binomial$listcomp_1__$0);
        Py_DECREF(tmp_Numpy_negative_binomial$listcomp_1__$0);
        tmp_Numpy_negative_binomial$listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_Numpy_negative_binomial$listcomp_1__contraction);
        Py_DECREF(tmp_Numpy_negative_binomial$listcomp_1__contraction);
        tmp_Numpy_negative_binomial$listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_Numpy_negative_binomial$listcomp_1__iter_value_0);
        tmp_Numpy_negative_binomial$listcomp_1__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_46;
        exception_value = exception_keeper_value_46;
        exception_tb = exception_keeper_tb_46;
        exception_lineno = exception_keeper_lineno_46;

        goto frame_exception_exit_19;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e454d590a60fedf1a1c3a064cc1c16bf_19);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_17;

        frame_return_exit_8:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_e454d590a60fedf1a1c3a064cc1c16bf_19);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_49;

        frame_exception_exit_19:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e454d590a60fedf1a1c3a064cc1c16bf_19);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_e454d590a60fedf1a1c3a064cc1c16bf_19, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_e454d590a60fedf1a1c3a064cc1c16bf_19->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_e454d590a60fedf1a1c3a064cc1c16bf_19, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_e454d590a60fedf1a1c3a064cc1c16bf_19,
            type_description_3,
            outline_17_var_tp
        );


        // Release cached frame if used for exception.
        if (frame_e454d590a60fedf1a1c3a064cc1c16bf_19 == cache_frame_e454d590a60fedf1a1c3a064cc1c16bf_19) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_e454d590a60fedf1a1c3a064cc1c16bf_19);
            cache_frame_e454d590a60fedf1a1c3a064cc1c16bf_19 = NULL;
        }

        assertFrameObject(frame_e454d590a60fedf1a1c3a064cc1c16bf_19);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_18;

        frame_no_exception_17:;
        goto skip_nested_handling_17;
        nested_frame_exit_18:;
        type_description_2 = "o";
        goto try_except_handler_49;
        skip_nested_handling_17:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_49:;
        Py_XDECREF(outline_17_var_tp);
        outline_17_var_tp = NULL;
        goto outline_result_18;
        // Exception handler code:
        try_except_handler_49:;
        exception_keeper_type_47 = exception_type;
        exception_keeper_value_47 = exception_value;
        exception_keeper_tb_47 = exception_tb;
        exception_keeper_lineno_47 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_17_var_tp);
        outline_17_var_tp = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_47;
        exception_value = exception_keeper_value_47;
        exception_tb = exception_keeper_tb_47;
        exception_lineno = exception_keeper_lineno_47;

        goto outline_exception_18;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_18:;
        exception_lineno = 169;
        goto frame_exception_exit_18;
        outline_result_18:;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__10_Numpy_negative_binomial_168, mod_consts[30], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;
            type_description_2 = "o";
            goto frame_exception_exit_18;
        }


        tmp_dictset_value = MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__7_generic();

        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__10_Numpy_negative_binomial_168, mod_consts[110], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 171;
            type_description_2 = "o";
            goto frame_exception_exit_18;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_b3074d356e3d3d7338fe92ecba3aaa5c_18);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_18;

        frame_exception_exit_18:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_b3074d356e3d3d7338fe92ecba3aaa5c_18);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_b3074d356e3d3d7338fe92ecba3aaa5c_18, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_b3074d356e3d3d7338fe92ecba3aaa5c_18->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_b3074d356e3d3d7338fe92ecba3aaa5c_18, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_b3074d356e3d3d7338fe92ecba3aaa5c_18,
            type_description_2,
            outline_16_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_b3074d356e3d3d7338fe92ecba3aaa5c_18 == cache_frame_b3074d356e3d3d7338fe92ecba3aaa5c_18) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_b3074d356e3d3d7338fe92ecba3aaa5c_18);
            cache_frame_b3074d356e3d3d7338fe92ecba3aaa5c_18 = NULL;
        }

        assertFrameObject(frame_b3074d356e3d3d7338fe92ecba3aaa5c_18);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_17;

        frame_no_exception_18:;
        goto skip_nested_handling_18;
        nested_frame_exit_17:;

        goto try_except_handler_48;
        skip_nested_handling_18:;
        {
            nuitka_bool tmp_condition_result_61;
            PyObject *tmp_cmp_expr_left_11;
            PyObject *tmp_cmp_expr_right_11;
            CHECK_OBJECT(tmp_class_creation_10__bases);
            tmp_cmp_expr_left_11 = tmp_class_creation_10__bases;
            CHECK_OBJECT(tmp_class_creation_10__bases_orig);
            tmp_cmp_expr_right_11 = tmp_class_creation_10__bases_orig;
            tmp_condition_result_61 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_11, tmp_cmp_expr_right_11);
            if (tmp_condition_result_61 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 168;

                goto try_except_handler_48;
            }
            if (tmp_condition_result_61 == NUITKA_BOOL_TRUE) {
                goto branch_yes_41;
            } else {
                goto branch_no_41;
            }
            assert(tmp_condition_result_61 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_41:;
        CHECK_OBJECT(tmp_class_creation_10__bases_orig);
        tmp_dictset_value = tmp_class_creation_10__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__10_Numpy_negative_binomial_168, mod_consts[98], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 168;

            goto try_except_handler_48;
        }
        branch_no_41:;
        {
            PyObject *tmp_assign_source_139;
            PyObject *tmp_called_value_65;
            PyObject *tmp_args_value_36;
            PyObject *tmp_tuple_element_57;
            PyObject *tmp_kwargs_value_36;
            CHECK_OBJECT(tmp_class_creation_10__metaclass);
            tmp_called_value_65 = tmp_class_creation_10__metaclass;
            tmp_tuple_element_57 = mod_consts[141];
            tmp_args_value_36 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_36, 0, tmp_tuple_element_57);
            CHECK_OBJECT(tmp_class_creation_10__bases);
            tmp_tuple_element_57 = tmp_class_creation_10__bases;
            PyTuple_SET_ITEM0(tmp_args_value_36, 1, tmp_tuple_element_57);
            tmp_tuple_element_57 = locals_numba$core$typing$randomdecl$$$class__10_Numpy_negative_binomial_168;
            PyTuple_SET_ITEM0(tmp_args_value_36, 2, tmp_tuple_element_57);
            CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
            tmp_kwargs_value_36 = tmp_class_creation_10__class_decl_dict;
            frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 168;
            tmp_assign_source_139 = CALL_FUNCTION(tmp_called_value_65, tmp_args_value_36, tmp_kwargs_value_36);
            Py_DECREF(tmp_args_value_36);
            if (tmp_assign_source_139 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 168;

                goto try_except_handler_48;
            }
            assert(outline_16_var___class__ == NULL);
            outline_16_var___class__ = tmp_assign_source_139;
        }
        CHECK_OBJECT(outline_16_var___class__);
        tmp_args_element_value_41 = outline_16_var___class__;
        Py_INCREF(tmp_args_element_value_41);
        goto try_return_handler_48;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_48:;
        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__10_Numpy_negative_binomial_168);
        locals_numba$core$typing$randomdecl$$$class__10_Numpy_negative_binomial_168 = NULL;
        goto try_return_handler_47;
        // Exception handler code:
        try_except_handler_48:;
        exception_keeper_type_48 = exception_type;
        exception_keeper_value_48 = exception_value;
        exception_keeper_tb_48 = exception_tb;
        exception_keeper_lineno_48 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__10_Numpy_negative_binomial_168);
        locals_numba$core$typing$randomdecl$$$class__10_Numpy_negative_binomial_168 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_48;
        exception_value = exception_keeper_value_48;
        exception_tb = exception_keeper_tb_48;
        exception_lineno = exception_keeper_lineno_48;

        goto try_except_handler_47;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_47:;
        CHECK_OBJECT(outline_16_var___class__);
        Py_DECREF(outline_16_var___class__);
        outline_16_var___class__ = NULL;
        goto outline_result_17;
        // Exception handler code:
        try_except_handler_47:;
        exception_keeper_type_49 = exception_type;
        exception_keeper_value_49 = exception_value;
        exception_keeper_tb_49 = exception_tb;
        exception_keeper_lineno_49 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_49;
        exception_value = exception_keeper_value_49;
        exception_tb = exception_keeper_tb_49;
        exception_lineno = exception_keeper_lineno_49;

        goto outline_exception_17;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_17:;
        exception_lineno = 168;
        goto try_except_handler_46;
        outline_result_17:;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 166;
        tmp_args_element_value_40 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_62, tmp_args_element_value_41);
        Py_DECREF(tmp_called_value_62);
        Py_DECREF(tmp_args_element_value_41);
        if (tmp_args_element_value_40 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_60);

            exception_lineno = 166;

            goto try_except_handler_46;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 165;
        tmp_assign_source_134 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_60, tmp_args_element_value_40);
        Py_DECREF(tmp_called_value_60);
        Py_DECREF(tmp_args_element_value_40);
        if (tmp_assign_source_134 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 165;

            goto try_except_handler_46;
        }
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[141], tmp_assign_source_134);
    }
    goto try_end_14;
    // Exception handler code:
    try_except_handler_46:;
    exception_keeper_type_50 = exception_type;
    exception_keeper_value_50 = exception_value;
    exception_keeper_tb_50 = exception_tb;
    exception_keeper_lineno_50 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_10__bases_orig);
    tmp_class_creation_10__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_10__bases);
    tmp_class_creation_10__bases = NULL;
    Py_XDECREF(tmp_class_creation_10__class_decl_dict);
    tmp_class_creation_10__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_10__metaclass);
    tmp_class_creation_10__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_10__prepared);
    tmp_class_creation_10__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_50;
    exception_value = exception_keeper_value_50;
    exception_tb = exception_keeper_tb_50;
    exception_lineno = exception_keeper_lineno_50;

    goto frame_exception_exit_1;
    // End of try:
    try_end_14:;
    CHECK_OBJECT(tmp_class_creation_10__bases_orig);
    Py_DECREF(tmp_class_creation_10__bases_orig);
    tmp_class_creation_10__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_10__bases);
    Py_DECREF(tmp_class_creation_10__bases);
    tmp_class_creation_10__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
    Py_DECREF(tmp_class_creation_10__class_decl_dict);
    tmp_class_creation_10__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_10__metaclass);
    Py_DECREF(tmp_class_creation_10__metaclass);
    tmp_class_creation_10__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_10__prepared);
    Py_DECREF(tmp_class_creation_10__prepared);
    tmp_class_creation_10__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_140;
        PyObject *tmp_tuple_element_58;
        tmp_tuple_element_58 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[99]);

        if (unlikely(tmp_tuple_element_58 == NULL)) {
            tmp_tuple_element_58 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[99]);
        }

        if (tmp_tuple_element_58 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 177;

            goto try_except_handler_51;
        }
        tmp_assign_source_140 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_140, 0, tmp_tuple_element_58);
        assert(tmp_class_creation_11__bases_orig == NULL);
        tmp_class_creation_11__bases_orig = tmp_assign_source_140;
    }
    {
        PyObject *tmp_assign_source_141;
        PyObject *tmp_dircall_arg1_11;
        CHECK_OBJECT(tmp_class_creation_11__bases_orig);
        tmp_dircall_arg1_11 = tmp_class_creation_11__bases_orig;
        Py_INCREF(tmp_dircall_arg1_11);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_11};
            tmp_assign_source_141 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_141 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 177;

            goto try_except_handler_51;
        }
        assert(tmp_class_creation_11__bases == NULL);
        tmp_class_creation_11__bases = tmp_assign_source_141;
    }
    {
        PyObject *tmp_assign_source_142;
        tmp_assign_source_142 = PyDict_New();
        assert(tmp_class_creation_11__class_decl_dict == NULL);
        tmp_class_creation_11__class_decl_dict = tmp_assign_source_142;
    }
    {
        PyObject *tmp_assign_source_143;
        PyObject *tmp_metaclass_value_11;
        bool tmp_condition_result_62;
        PyObject *tmp_key_value_31;
        PyObject *tmp_dict_arg_value_31;
        PyObject *tmp_dict_arg_value_32;
        PyObject *tmp_key_value_32;
        nuitka_bool tmp_condition_result_63;
        int tmp_truth_name_11;
        PyObject *tmp_type_arg_21;
        PyObject *tmp_expression_value_92;
        PyObject *tmp_subscript_value_11;
        PyObject *tmp_bases_value_11;
        tmp_key_value_31 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
        tmp_dict_arg_value_31 = tmp_class_creation_11__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_31, tmp_key_value_31);
        assert(!(tmp_res == -1));
        tmp_condition_result_62 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_62 != false) {
            goto condexpr_true_21;
        } else {
            goto condexpr_false_21;
        }
        condexpr_true_21:;
        CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
        tmp_dict_arg_value_32 = tmp_class_creation_11__class_decl_dict;
        tmp_key_value_32 = mod_consts[87];
        tmp_metaclass_value_11 = DICT_GET_ITEM0(tmp_dict_arg_value_32, tmp_key_value_32);
        if (tmp_metaclass_value_11 == NULL) {
            tmp_metaclass_value_11 = Py_None;
        }
        assert(!(tmp_metaclass_value_11 == NULL));
        Py_INCREF(tmp_metaclass_value_11);
        goto condexpr_end_21;
        condexpr_false_21:;
        CHECK_OBJECT(tmp_class_creation_11__bases);
        tmp_truth_name_11 = CHECK_IF_TRUE(tmp_class_creation_11__bases);
        if (tmp_truth_name_11 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 177;

            goto try_except_handler_51;
        }
        tmp_condition_result_63 = tmp_truth_name_11 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_63 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_22;
        } else {
            goto condexpr_false_22;
        }
        condexpr_true_22:;
        CHECK_OBJECT(tmp_class_creation_11__bases);
        tmp_expression_value_92 = tmp_class_creation_11__bases;
        tmp_subscript_value_11 = mod_consts[13];
        tmp_type_arg_21 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_92, tmp_subscript_value_11, 0);
        if (tmp_type_arg_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 177;

            goto try_except_handler_51;
        }
        tmp_metaclass_value_11 = BUILTIN_TYPE1(tmp_type_arg_21);
        Py_DECREF(tmp_type_arg_21);
        if (tmp_metaclass_value_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 177;

            goto try_except_handler_51;
        }
        goto condexpr_end_22;
        condexpr_false_22:;
        tmp_metaclass_value_11 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_11);
        condexpr_end_22:;
        condexpr_end_21:;
        CHECK_OBJECT(tmp_class_creation_11__bases);
        tmp_bases_value_11 = tmp_class_creation_11__bases;
        tmp_assign_source_143 = SELECT_METACLASS(tmp_metaclass_value_11, tmp_bases_value_11);
        Py_DECREF(tmp_metaclass_value_11);
        if (tmp_assign_source_143 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 177;

            goto try_except_handler_51;
        }
        assert(tmp_class_creation_11__metaclass == NULL);
        tmp_class_creation_11__metaclass = tmp_assign_source_143;
    }
    {
        bool tmp_condition_result_64;
        PyObject *tmp_key_value_33;
        PyObject *tmp_dict_arg_value_33;
        tmp_key_value_33 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
        tmp_dict_arg_value_33 = tmp_class_creation_11__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_33, tmp_key_value_33);
        assert(!(tmp_res == -1));
        tmp_condition_result_64 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_64 != false) {
            goto branch_yes_42;
        } else {
            goto branch_no_42;
        }
    }
    branch_yes_42:;
    CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_11__class_decl_dict;
    tmp_dictdel_key = mod_consts[87];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 177;

        goto try_except_handler_51;
    }
    branch_no_42:;
    {
        nuitka_bool tmp_condition_result_65;
        PyObject *tmp_expression_value_93;
        CHECK_OBJECT(tmp_class_creation_11__metaclass);
        tmp_expression_value_93 = tmp_class_creation_11__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_93, mod_consts[88]);
        tmp_condition_result_65 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_65 == NUITKA_BOOL_TRUE) {
            goto branch_yes_43;
        } else {
            goto branch_no_43;
        }
    }
    branch_yes_43:;
    {
        PyObject *tmp_assign_source_144;
        PyObject *tmp_called_value_66;
        PyObject *tmp_expression_value_94;
        PyObject *tmp_args_value_37;
        PyObject *tmp_tuple_element_59;
        PyObject *tmp_kwargs_value_37;
        CHECK_OBJECT(tmp_class_creation_11__metaclass);
        tmp_expression_value_94 = tmp_class_creation_11__metaclass;
        tmp_called_value_66 = LOOKUP_ATTRIBUTE(tmp_expression_value_94, mod_consts[88]);
        if (tmp_called_value_66 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 177;

            goto try_except_handler_51;
        }
        tmp_tuple_element_59 = mod_consts[147];
        tmp_args_value_37 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_37, 0, tmp_tuple_element_59);
        CHECK_OBJECT(tmp_class_creation_11__bases);
        tmp_tuple_element_59 = tmp_class_creation_11__bases;
        PyTuple_SET_ITEM0(tmp_args_value_37, 1, tmp_tuple_element_59);
        CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
        tmp_kwargs_value_37 = tmp_class_creation_11__class_decl_dict;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 177;
        tmp_assign_source_144 = CALL_FUNCTION(tmp_called_value_66, tmp_args_value_37, tmp_kwargs_value_37);
        Py_DECREF(tmp_called_value_66);
        Py_DECREF(tmp_args_value_37);
        if (tmp_assign_source_144 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 177;

            goto try_except_handler_51;
        }
        assert(tmp_class_creation_11__prepared == NULL);
        tmp_class_creation_11__prepared = tmp_assign_source_144;
    }
    {
        bool tmp_condition_result_66;
        PyObject *tmp_operand_value_11;
        PyObject *tmp_expression_value_95;
        CHECK_OBJECT(tmp_class_creation_11__prepared);
        tmp_expression_value_95 = tmp_class_creation_11__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_95, mod_consts[89]);
        tmp_operand_value_11 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_11);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 177;

            goto try_except_handler_51;
        }
        tmp_condition_result_66 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_66 != false) {
            goto branch_yes_44;
        } else {
            goto branch_no_44;
        }
    }
    branch_yes_44:;
    {
        PyObject *tmp_raise_type_11;
        PyObject *tmp_raise_value_11;
        PyObject *tmp_left_value_14;
        PyObject *tmp_right_value_14;
        PyObject *tmp_tuple_element_60;
        PyObject *tmp_getattr_target_11;
        PyObject *tmp_getattr_attr_11;
        PyObject *tmp_getattr_default_11;
        tmp_raise_type_11 = PyExc_TypeError;
        tmp_left_value_14 = mod_consts[90];
        CHECK_OBJECT(tmp_class_creation_11__metaclass);
        tmp_getattr_target_11 = tmp_class_creation_11__metaclass;
        tmp_getattr_attr_11 = mod_consts[91];
        tmp_getattr_default_11 = mod_consts[92];
        tmp_tuple_element_60 = BUILTIN_GETATTR(tmp_getattr_target_11, tmp_getattr_attr_11, tmp_getattr_default_11);
        if (tmp_tuple_element_60 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 177;

            goto try_except_handler_51;
        }
        tmp_right_value_14 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_96;
            PyObject *tmp_type_arg_22;
            PyTuple_SET_ITEM(tmp_right_value_14, 0, tmp_tuple_element_60);
            CHECK_OBJECT(tmp_class_creation_11__prepared);
            tmp_type_arg_22 = tmp_class_creation_11__prepared;
            tmp_expression_value_96 = BUILTIN_TYPE1(tmp_type_arg_22);
            assert(!(tmp_expression_value_96 == NULL));
            tmp_tuple_element_60 = LOOKUP_ATTRIBUTE(tmp_expression_value_96, mod_consts[91]);
            Py_DECREF(tmp_expression_value_96);
            if (tmp_tuple_element_60 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 177;

                goto tuple_build_exception_12;
            }
            PyTuple_SET_ITEM(tmp_right_value_14, 1, tmp_tuple_element_60);
        }
        goto tuple_build_noexception_12;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_12:;
        Py_DECREF(tmp_right_value_14);
        goto try_except_handler_51;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_12:;
        tmp_raise_value_11 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_14, tmp_right_value_14);
        Py_DECREF(tmp_right_value_14);
        if (tmp_raise_value_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 177;

            goto try_except_handler_51;
        }
        exception_type = tmp_raise_type_11;
        Py_INCREF(tmp_raise_type_11);
        exception_value = tmp_raise_value_11;
        exception_lineno = 177;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_51;
    }
    branch_no_44:;
    goto branch_end_43;
    branch_no_43:;
    {
        PyObject *tmp_assign_source_145;
        tmp_assign_source_145 = PyDict_New();
        assert(tmp_class_creation_11__prepared == NULL);
        tmp_class_creation_11__prepared = tmp_assign_source_145;
    }
    branch_end_43:;
    {
        PyObject *tmp_assign_source_146;
        PyObject *tmp_called_value_67;
        PyObject *tmp_called_value_68;
        PyObject *tmp_args_value_38;
        PyObject *tmp_tuple_element_61;
        PyObject *tmp_expression_value_97;
        PyObject *tmp_expression_value_98;
        PyObject *tmp_kwargs_value_38;
        PyObject *tmp_args_element_value_45;
        tmp_called_value_68 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_68 == NULL)) {
            tmp_called_value_68 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_68 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 176;

            goto try_except_handler_51;
        }
        tmp_expression_value_98 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_98 == NULL)) {
            tmp_expression_value_98 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_98 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 176;

            goto try_except_handler_51;
        }
        tmp_expression_value_97 = LOOKUP_ATTRIBUTE(tmp_expression_value_98, mod_consts[19]);
        if (tmp_expression_value_97 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 176;

            goto try_except_handler_51;
        }
        tmp_tuple_element_61 = LOOKUP_ATTRIBUTE(tmp_expression_value_97, mod_consts[148]);
        Py_DECREF(tmp_expression_value_97);
        if (tmp_tuple_element_61 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 176;

            goto try_except_handler_51;
        }
        tmp_args_value_38 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_38, 0, tmp_tuple_element_61);
        tmp_kwargs_value_38 = PyDict_Copy(mod_consts[149]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 176;
        tmp_called_value_67 = CALL_FUNCTION(tmp_called_value_68, tmp_args_value_38, tmp_kwargs_value_38);
        Py_DECREF(tmp_args_value_38);
        Py_DECREF(tmp_kwargs_value_38);
        if (tmp_called_value_67 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 176;

            goto try_except_handler_51;
        }
        {
            PyObject *tmp_set_locals_11;
            CHECK_OBJECT(tmp_class_creation_11__prepared);
            tmp_set_locals_11 = tmp_class_creation_11__prepared;
            locals_numba$core$typing$randomdecl$$$class__11_Numpy_poisson_177 = tmp_set_locals_11;
            Py_INCREF(tmp_set_locals_11);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[93];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__11_Numpy_poisson_177, mod_consts[94], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 177;

            goto try_except_handler_53;
        }
        tmp_dictset_value = mod_consts[147];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__11_Numpy_poisson_177, mod_consts[96], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 177;

            goto try_except_handler_53;
        }
        if (isFrameUnusable(cache_frame_37c0fe8e6586f13fc8bb75cab337d341_20)) {
            Py_XDECREF(cache_frame_37c0fe8e6586f13fc8bb75cab337d341_20);

#if _DEBUG_REFCOUNTS
            if (cache_frame_37c0fe8e6586f13fc8bb75cab337d341_20 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_37c0fe8e6586f13fc8bb75cab337d341_20 = MAKE_FUNCTION_FRAME(codeobj_37c0fe8e6586f13fc8bb75cab337d341, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_37c0fe8e6586f13fc8bb75cab337d341_20->m_type_description == NULL);
        frame_37c0fe8e6586f13fc8bb75cab337d341_20 = cache_frame_37c0fe8e6586f13fc8bb75cab337d341_20;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_37c0fe8e6586f13fc8bb75cab337d341_20);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_37c0fe8e6586f13fc8bb75cab337d341_20) == 2); // Frame stack

        // Framed code:
        // Tried code:
        {
            PyObject *tmp_assign_source_147;
            PyObject *tmp_iter_arg_9;
            tmp_iter_arg_9 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__11_Numpy_poisson_177, mod_consts[86]);

            if (tmp_iter_arg_9 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_iter_arg_9 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[86]);

                    if (unlikely(tmp_iter_arg_9 == NULL)) {
                        tmp_iter_arg_9 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[86]);
                    }

                    if (tmp_iter_arg_9 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 178;
                        type_description_2 = "o";
                        goto try_except_handler_54;
                    }
                    Py_INCREF(tmp_iter_arg_9);
                } else {
                    goto try_except_handler_54;
                }
            }

            tmp_assign_source_147 = MAKE_ITERATOR(tmp_iter_arg_9);
            Py_DECREF(tmp_iter_arg_9);
            if (tmp_assign_source_147 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 178;
                type_description_2 = "o";
                goto try_except_handler_54;
            }
            assert(tmp_Numpy_poisson$listcomp_1__$0 == NULL);
            tmp_Numpy_poisson$listcomp_1__$0 = tmp_assign_source_147;
        }
        {
            PyObject *tmp_assign_source_148;
            tmp_assign_source_148 = PyList_New(0);
            assert(tmp_Numpy_poisson$listcomp_1__contraction == NULL);
            tmp_Numpy_poisson$listcomp_1__contraction = tmp_assign_source_148;
        }
        if (isFrameUnusable(cache_frame_bf28b69daa502c37a6d0c31a2f09523e_21)) {
            Py_XDECREF(cache_frame_bf28b69daa502c37a6d0c31a2f09523e_21);

#if _DEBUG_REFCOUNTS
            if (cache_frame_bf28b69daa502c37a6d0c31a2f09523e_21 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_bf28b69daa502c37a6d0c31a2f09523e_21 = MAKE_FUNCTION_FRAME(codeobj_bf28b69daa502c37a6d0c31a2f09523e, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_bf28b69daa502c37a6d0c31a2f09523e_21->m_type_description == NULL);
        frame_bf28b69daa502c37a6d0c31a2f09523e_21 = cache_frame_bf28b69daa502c37a6d0c31a2f09523e_21;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_bf28b69daa502c37a6d0c31a2f09523e_21);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_bf28b69daa502c37a6d0c31a2f09523e_21) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_9:;
        {
            PyObject *tmp_next_source_9;
            PyObject *tmp_assign_source_149;
            CHECK_OBJECT(tmp_Numpy_poisson$listcomp_1__$0);
            tmp_next_source_9 = tmp_Numpy_poisson$listcomp_1__$0;
            tmp_assign_source_149 = ITERATOR_NEXT(tmp_next_source_9);
            if (tmp_assign_source_149 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_9;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_3 = "o";
                    exception_lineno = 178;
                    goto try_except_handler_55;
                }
            }

            {
                PyObject *old = tmp_Numpy_poisson$listcomp_1__iter_value_0;
                tmp_Numpy_poisson$listcomp_1__iter_value_0 = tmp_assign_source_149;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_150;
            CHECK_OBJECT(tmp_Numpy_poisson$listcomp_1__iter_value_0);
            tmp_assign_source_150 = tmp_Numpy_poisson$listcomp_1__iter_value_0;
            {
                PyObject *old = outline_19_var_tp;
                outline_19_var_tp = tmp_assign_source_150;
                Py_INCREF(outline_19_var_tp);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_9;
            PyObject *tmp_append_value_9;
            PyObject *tmp_called_value_69;
            PyObject *tmp_args_element_value_46;
            PyObject *tmp_expression_value_99;
            PyObject *tmp_args_element_value_47;
            CHECK_OBJECT(tmp_Numpy_poisson$listcomp_1__contraction);
            tmp_append_list_9 = tmp_Numpy_poisson$listcomp_1__contraction;
            tmp_called_value_69 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[25]);

            if (unlikely(tmp_called_value_69 == NULL)) {
                tmp_called_value_69 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[25]);
            }

            if (tmp_called_value_69 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 178;
                type_description_3 = "o";
                goto try_except_handler_55;
            }
            tmp_expression_value_99 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[0]);

            if (unlikely(tmp_expression_value_99 == NULL)) {
                tmp_expression_value_99 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[0]);
            }

            if (tmp_expression_value_99 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 178;
                type_description_3 = "o";
                goto try_except_handler_55;
            }
            tmp_args_element_value_46 = LOOKUP_ATTRIBUTE(tmp_expression_value_99, mod_consts[83]);
            if (tmp_args_element_value_46 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 178;
                type_description_3 = "o";
                goto try_except_handler_55;
            }
            CHECK_OBJECT(outline_19_var_tp);
            tmp_args_element_value_47 = outline_19_var_tp;
            frame_bf28b69daa502c37a6d0c31a2f09523e_21->m_frame.f_lineno = 178;
            {
                PyObject *call_args[] = {tmp_args_element_value_46, tmp_args_element_value_47};
                tmp_append_value_9 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_69, call_args);
            }

            Py_DECREF(tmp_args_element_value_46);
            if (tmp_append_value_9 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 178;
                type_description_3 = "o";
                goto try_except_handler_55;
            }
            assert(PyList_Check(tmp_append_list_9));
            tmp_result = LIST_APPEND1(tmp_append_list_9, tmp_append_value_9);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 178;
                type_description_3 = "o";
                goto try_except_handler_55;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 178;
            type_description_3 = "o";
            goto try_except_handler_55;
        }
        goto loop_start_9;
        loop_end_9:;
        CHECK_OBJECT(tmp_Numpy_poisson$listcomp_1__contraction);
        tmp_dictset_value = tmp_Numpy_poisson$listcomp_1__contraction;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_55;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_55:;
        CHECK_OBJECT(tmp_Numpy_poisson$listcomp_1__$0);
        Py_DECREF(tmp_Numpy_poisson$listcomp_1__$0);
        tmp_Numpy_poisson$listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_Numpy_poisson$listcomp_1__contraction);
        Py_DECREF(tmp_Numpy_poisson$listcomp_1__contraction);
        tmp_Numpy_poisson$listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_Numpy_poisson$listcomp_1__iter_value_0);
        tmp_Numpy_poisson$listcomp_1__iter_value_0 = NULL;
        goto frame_return_exit_9;
        // Exception handler code:
        try_except_handler_55:;
        exception_keeper_type_51 = exception_type;
        exception_keeper_value_51 = exception_value;
        exception_keeper_tb_51 = exception_tb;
        exception_keeper_lineno_51 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Numpy_poisson$listcomp_1__$0);
        Py_DECREF(tmp_Numpy_poisson$listcomp_1__$0);
        tmp_Numpy_poisson$listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_Numpy_poisson$listcomp_1__contraction);
        Py_DECREF(tmp_Numpy_poisson$listcomp_1__contraction);
        tmp_Numpy_poisson$listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_Numpy_poisson$listcomp_1__iter_value_0);
        tmp_Numpy_poisson$listcomp_1__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_51;
        exception_value = exception_keeper_value_51;
        exception_tb = exception_keeper_tb_51;
        exception_lineno = exception_keeper_lineno_51;

        goto frame_exception_exit_21;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_bf28b69daa502c37a6d0c31a2f09523e_21);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_19;

        frame_return_exit_9:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_bf28b69daa502c37a6d0c31a2f09523e_21);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_54;

        frame_exception_exit_21:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_bf28b69daa502c37a6d0c31a2f09523e_21);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_bf28b69daa502c37a6d0c31a2f09523e_21, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_bf28b69daa502c37a6d0c31a2f09523e_21->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_bf28b69daa502c37a6d0c31a2f09523e_21, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_bf28b69daa502c37a6d0c31a2f09523e_21,
            type_description_3,
            outline_19_var_tp
        );


        // Release cached frame if used for exception.
        if (frame_bf28b69daa502c37a6d0c31a2f09523e_21 == cache_frame_bf28b69daa502c37a6d0c31a2f09523e_21) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_bf28b69daa502c37a6d0c31a2f09523e_21);
            cache_frame_bf28b69daa502c37a6d0c31a2f09523e_21 = NULL;
        }

        assertFrameObject(frame_bf28b69daa502c37a6d0c31a2f09523e_21);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_20;

        frame_no_exception_19:;
        goto skip_nested_handling_19;
        nested_frame_exit_20:;
        type_description_2 = "o";
        goto try_except_handler_54;
        skip_nested_handling_19:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_54:;
        Py_XDECREF(outline_19_var_tp);
        outline_19_var_tp = NULL;
        goto outline_result_20;
        // Exception handler code:
        try_except_handler_54:;
        exception_keeper_type_52 = exception_type;
        exception_keeper_value_52 = exception_value;
        exception_keeper_tb_52 = exception_tb;
        exception_keeper_lineno_52 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_19_var_tp);
        outline_19_var_tp = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_52;
        exception_value = exception_keeper_value_52;
        exception_tb = exception_keeper_tb_52;
        exception_lineno = exception_keeper_lineno_52;

        goto outline_exception_20;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_20:;
        exception_lineno = 178;
        goto frame_exception_exit_20;
        outline_result_20:;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__11_Numpy_poisson_177, mod_consts[30], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 178;
            type_description_2 = "o";
            goto frame_exception_exit_20;
        }
        {
            PyObject *tmp_assign_source_151;
            tmp_assign_source_151 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__11_Numpy_poisson_177, mod_consts[30]);

            if (unlikely(tmp_assign_source_151 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[30]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 179;
                type_description_2 = "o";
                goto frame_exception_exit_20;
            }

            if (tmp_assign_source_151 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 179;
                type_description_2 = "o";
                goto frame_exception_exit_20;
            }
            assert(tmp_Numpy_poisson$class_inplace_1__value == NULL);
            tmp_Numpy_poisson$class_inplace_1__value = tmp_assign_source_151;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_152;
            PyObject *tmp_left_value_15;
            PyObject *tmp_right_value_15;
            PyObject *tmp_list_element_5;
            PyObject *tmp_called_value_70;
            PyObject *tmp_args_element_value_48;
            PyObject *tmp_expression_value_100;
            CHECK_OBJECT(tmp_Numpy_poisson$class_inplace_1__value);
            tmp_left_value_15 = tmp_Numpy_poisson$class_inplace_1__value;
            tmp_called_value_70 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__11_Numpy_poisson_177, mod_consts[25]);

            if (tmp_called_value_70 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_value_70 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[25]);

                    if (unlikely(tmp_called_value_70 == NULL)) {
                        tmp_called_value_70 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[25]);
                    }

                    if (tmp_called_value_70 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 179;
                        type_description_2 = "o";
                        goto try_except_handler_56;
                    }
                    Py_INCREF(tmp_called_value_70);
                } else {
                    goto try_except_handler_56;
                }
            }

            tmp_expression_value_100 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__11_Numpy_poisson_177, mod_consts[0]);

            if (tmp_expression_value_100 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_100 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[0]);

                    if (unlikely(tmp_expression_value_100 == NULL)) {
                        tmp_expression_value_100 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[0]);
                    }

                    if (tmp_expression_value_100 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_70);

                        exception_lineno = 179;
                        type_description_2 = "o";
                        goto try_except_handler_56;
                    }
                    Py_INCREF(tmp_expression_value_100);
                } else {
                    goto try_except_handler_56;
                }
            }

            tmp_args_element_value_48 = LOOKUP_ATTRIBUTE(tmp_expression_value_100, mod_consts[83]);
            Py_DECREF(tmp_expression_value_100);
            if (tmp_args_element_value_48 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_70);

                exception_lineno = 179;
                type_description_2 = "o";
                goto try_except_handler_56;
            }
            frame_37c0fe8e6586f13fc8bb75cab337d341_20->m_frame.f_lineno = 179;
            tmp_list_element_5 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_70, tmp_args_element_value_48);
            Py_DECREF(tmp_called_value_70);
            Py_DECREF(tmp_args_element_value_48);
            if (tmp_list_element_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 179;
                type_description_2 = "o";
                goto try_except_handler_56;
            }
            tmp_right_value_15 = PyList_New(1);
            PyList_SET_ITEM(tmp_right_value_15, 0, tmp_list_element_5);
            tmp_result = BINARY_OPERATION_ADD_OBJECT_LIST_INPLACE(&tmp_left_value_15, tmp_right_value_15);
            Py_DECREF(tmp_right_value_15);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 179;
                type_description_2 = "o";
                goto try_except_handler_56;
            }
            tmp_assign_source_152 = tmp_left_value_15;
            tmp_Numpy_poisson$class_inplace_1__value = tmp_assign_source_152;

        }
        CHECK_OBJECT(tmp_Numpy_poisson$class_inplace_1__value);
        tmp_dictset_value = tmp_Numpy_poisson$class_inplace_1__value;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__11_Numpy_poisson_177, mod_consts[30], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 179;
            type_description_2 = "o";
            goto try_except_handler_56;
        }
        goto try_end_15;
        // Exception handler code:
        try_except_handler_56:;
        exception_keeper_type_53 = exception_type;
        exception_keeper_value_53 = exception_value;
        exception_keeper_tb_53 = exception_tb;
        exception_keeper_lineno_53 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Numpy_poisson$class_inplace_1__value);
        Py_DECREF(tmp_Numpy_poisson$class_inplace_1__value);
        tmp_Numpy_poisson$class_inplace_1__value = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_53;
        exception_value = exception_keeper_value_53;
        exception_tb = exception_keeper_tb_53;
        exception_lineno = exception_keeper_lineno_53;

        goto frame_exception_exit_20;
        // End of try:
        try_end_15:;
        CHECK_OBJECT(tmp_Numpy_poisson$class_inplace_1__value);
        Py_DECREF(tmp_Numpy_poisson$class_inplace_1__value);
        tmp_Numpy_poisson$class_inplace_1__value = NULL;


        tmp_dictset_value = MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__8_generic();

        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__11_Numpy_poisson_177, mod_consts[110], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 181;
            type_description_2 = "o";
            goto frame_exception_exit_20;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_37c0fe8e6586f13fc8bb75cab337d341_20);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_20;

        frame_exception_exit_20:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_37c0fe8e6586f13fc8bb75cab337d341_20);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_37c0fe8e6586f13fc8bb75cab337d341_20, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_37c0fe8e6586f13fc8bb75cab337d341_20->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_37c0fe8e6586f13fc8bb75cab337d341_20, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_37c0fe8e6586f13fc8bb75cab337d341_20,
            type_description_2,
            outline_18_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_37c0fe8e6586f13fc8bb75cab337d341_20 == cache_frame_37c0fe8e6586f13fc8bb75cab337d341_20) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_37c0fe8e6586f13fc8bb75cab337d341_20);
            cache_frame_37c0fe8e6586f13fc8bb75cab337d341_20 = NULL;
        }

        assertFrameObject(frame_37c0fe8e6586f13fc8bb75cab337d341_20);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_19;

        frame_no_exception_20:;
        goto skip_nested_handling_20;
        nested_frame_exit_19:;

        goto try_except_handler_53;
        skip_nested_handling_20:;
        {
            nuitka_bool tmp_condition_result_67;
            PyObject *tmp_cmp_expr_left_12;
            PyObject *tmp_cmp_expr_right_12;
            CHECK_OBJECT(tmp_class_creation_11__bases);
            tmp_cmp_expr_left_12 = tmp_class_creation_11__bases;
            CHECK_OBJECT(tmp_class_creation_11__bases_orig);
            tmp_cmp_expr_right_12 = tmp_class_creation_11__bases_orig;
            tmp_condition_result_67 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_12, tmp_cmp_expr_right_12);
            if (tmp_condition_result_67 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 177;

                goto try_except_handler_53;
            }
            if (tmp_condition_result_67 == NUITKA_BOOL_TRUE) {
                goto branch_yes_45;
            } else {
                goto branch_no_45;
            }
            assert(tmp_condition_result_67 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_45:;
        CHECK_OBJECT(tmp_class_creation_11__bases_orig);
        tmp_dictset_value = tmp_class_creation_11__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__11_Numpy_poisson_177, mod_consts[98], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 177;

            goto try_except_handler_53;
        }
        branch_no_45:;
        {
            PyObject *tmp_assign_source_153;
            PyObject *tmp_called_value_71;
            PyObject *tmp_args_value_39;
            PyObject *tmp_tuple_element_62;
            PyObject *tmp_kwargs_value_39;
            CHECK_OBJECT(tmp_class_creation_11__metaclass);
            tmp_called_value_71 = tmp_class_creation_11__metaclass;
            tmp_tuple_element_62 = mod_consts[147];
            tmp_args_value_39 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_39, 0, tmp_tuple_element_62);
            CHECK_OBJECT(tmp_class_creation_11__bases);
            tmp_tuple_element_62 = tmp_class_creation_11__bases;
            PyTuple_SET_ITEM0(tmp_args_value_39, 1, tmp_tuple_element_62);
            tmp_tuple_element_62 = locals_numba$core$typing$randomdecl$$$class__11_Numpy_poisson_177;
            PyTuple_SET_ITEM0(tmp_args_value_39, 2, tmp_tuple_element_62);
            CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
            tmp_kwargs_value_39 = tmp_class_creation_11__class_decl_dict;
            frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 177;
            tmp_assign_source_153 = CALL_FUNCTION(tmp_called_value_71, tmp_args_value_39, tmp_kwargs_value_39);
            Py_DECREF(tmp_args_value_39);
            if (tmp_assign_source_153 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 177;

                goto try_except_handler_53;
            }
            assert(outline_18_var___class__ == NULL);
            outline_18_var___class__ = tmp_assign_source_153;
        }
        CHECK_OBJECT(outline_18_var___class__);
        tmp_args_element_value_45 = outline_18_var___class__;
        Py_INCREF(tmp_args_element_value_45);
        goto try_return_handler_53;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_53:;
        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__11_Numpy_poisson_177);
        locals_numba$core$typing$randomdecl$$$class__11_Numpy_poisson_177 = NULL;
        goto try_return_handler_52;
        // Exception handler code:
        try_except_handler_53:;
        exception_keeper_type_54 = exception_type;
        exception_keeper_value_54 = exception_value;
        exception_keeper_tb_54 = exception_tb;
        exception_keeper_lineno_54 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__11_Numpy_poisson_177);
        locals_numba$core$typing$randomdecl$$$class__11_Numpy_poisson_177 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_54;
        exception_value = exception_keeper_value_54;
        exception_tb = exception_keeper_tb_54;
        exception_lineno = exception_keeper_lineno_54;

        goto try_except_handler_52;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_52:;
        CHECK_OBJECT(outline_18_var___class__);
        Py_DECREF(outline_18_var___class__);
        outline_18_var___class__ = NULL;
        goto outline_result_19;
        // Exception handler code:
        try_except_handler_52:;
        exception_keeper_type_55 = exception_type;
        exception_keeper_value_55 = exception_value;
        exception_keeper_tb_55 = exception_tb;
        exception_keeper_lineno_55 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_55;
        exception_value = exception_keeper_value_55;
        exception_tb = exception_keeper_tb_55;
        exception_lineno = exception_keeper_lineno_55;

        goto outline_exception_19;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_19:;
        exception_lineno = 177;
        goto try_except_handler_51;
        outline_result_19:;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 176;
        tmp_assign_source_146 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_67, tmp_args_element_value_45);
        Py_DECREF(tmp_called_value_67);
        Py_DECREF(tmp_args_element_value_45);
        if (tmp_assign_source_146 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 176;

            goto try_except_handler_51;
        }
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[147], tmp_assign_source_146);
    }
    goto try_end_16;
    // Exception handler code:
    try_except_handler_51:;
    exception_keeper_type_56 = exception_type;
    exception_keeper_value_56 = exception_value;
    exception_keeper_tb_56 = exception_tb;
    exception_keeper_lineno_56 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_11__bases_orig);
    tmp_class_creation_11__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_11__bases);
    tmp_class_creation_11__bases = NULL;
    Py_XDECREF(tmp_class_creation_11__class_decl_dict);
    tmp_class_creation_11__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_11__metaclass);
    tmp_class_creation_11__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_11__prepared);
    tmp_class_creation_11__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_56;
    exception_value = exception_keeper_value_56;
    exception_tb = exception_keeper_tb_56;
    exception_lineno = exception_keeper_lineno_56;

    goto frame_exception_exit_1;
    // End of try:
    try_end_16:;
    CHECK_OBJECT(tmp_class_creation_11__bases_orig);
    Py_DECREF(tmp_class_creation_11__bases_orig);
    tmp_class_creation_11__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_11__bases);
    Py_DECREF(tmp_class_creation_11__bases);
    tmp_class_creation_11__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
    Py_DECREF(tmp_class_creation_11__class_decl_dict);
    tmp_class_creation_11__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_11__metaclass);
    Py_DECREF(tmp_class_creation_11__metaclass);
    tmp_class_creation_11__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_11__prepared);
    Py_DECREF(tmp_class_creation_11__prepared);
    tmp_class_creation_11__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_154;
        PyObject *tmp_tuple_element_63;
        tmp_tuple_element_63 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[99]);

        if (unlikely(tmp_tuple_element_63 == NULL)) {
            tmp_tuple_element_63 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[99]);
        }

        if (tmp_tuple_element_63 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 188;

            goto try_except_handler_57;
        }
        tmp_assign_source_154 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_154, 0, tmp_tuple_element_63);
        assert(tmp_class_creation_12__bases_orig == NULL);
        tmp_class_creation_12__bases_orig = tmp_assign_source_154;
    }
    {
        PyObject *tmp_assign_source_155;
        PyObject *tmp_dircall_arg1_12;
        CHECK_OBJECT(tmp_class_creation_12__bases_orig);
        tmp_dircall_arg1_12 = tmp_class_creation_12__bases_orig;
        Py_INCREF(tmp_dircall_arg1_12);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_12};
            tmp_assign_source_155 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_155 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 188;

            goto try_except_handler_57;
        }
        assert(tmp_class_creation_12__bases == NULL);
        tmp_class_creation_12__bases = tmp_assign_source_155;
    }
    {
        PyObject *tmp_assign_source_156;
        tmp_assign_source_156 = PyDict_New();
        assert(tmp_class_creation_12__class_decl_dict == NULL);
        tmp_class_creation_12__class_decl_dict = tmp_assign_source_156;
    }
    {
        PyObject *tmp_assign_source_157;
        PyObject *tmp_metaclass_value_12;
        bool tmp_condition_result_68;
        PyObject *tmp_key_value_34;
        PyObject *tmp_dict_arg_value_34;
        PyObject *tmp_dict_arg_value_35;
        PyObject *tmp_key_value_35;
        nuitka_bool tmp_condition_result_69;
        int tmp_truth_name_12;
        PyObject *tmp_type_arg_23;
        PyObject *tmp_expression_value_101;
        PyObject *tmp_subscript_value_12;
        PyObject *tmp_bases_value_12;
        tmp_key_value_34 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
        tmp_dict_arg_value_34 = tmp_class_creation_12__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_34, tmp_key_value_34);
        assert(!(tmp_res == -1));
        tmp_condition_result_68 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_68 != false) {
            goto condexpr_true_23;
        } else {
            goto condexpr_false_23;
        }
        condexpr_true_23:;
        CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
        tmp_dict_arg_value_35 = tmp_class_creation_12__class_decl_dict;
        tmp_key_value_35 = mod_consts[87];
        tmp_metaclass_value_12 = DICT_GET_ITEM0(tmp_dict_arg_value_35, tmp_key_value_35);
        if (tmp_metaclass_value_12 == NULL) {
            tmp_metaclass_value_12 = Py_None;
        }
        assert(!(tmp_metaclass_value_12 == NULL));
        Py_INCREF(tmp_metaclass_value_12);
        goto condexpr_end_23;
        condexpr_false_23:;
        CHECK_OBJECT(tmp_class_creation_12__bases);
        tmp_truth_name_12 = CHECK_IF_TRUE(tmp_class_creation_12__bases);
        if (tmp_truth_name_12 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 188;

            goto try_except_handler_57;
        }
        tmp_condition_result_69 = tmp_truth_name_12 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_69 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_24;
        } else {
            goto condexpr_false_24;
        }
        condexpr_true_24:;
        CHECK_OBJECT(tmp_class_creation_12__bases);
        tmp_expression_value_101 = tmp_class_creation_12__bases;
        tmp_subscript_value_12 = mod_consts[13];
        tmp_type_arg_23 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_101, tmp_subscript_value_12, 0);
        if (tmp_type_arg_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 188;

            goto try_except_handler_57;
        }
        tmp_metaclass_value_12 = BUILTIN_TYPE1(tmp_type_arg_23);
        Py_DECREF(tmp_type_arg_23);
        if (tmp_metaclass_value_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 188;

            goto try_except_handler_57;
        }
        goto condexpr_end_24;
        condexpr_false_24:;
        tmp_metaclass_value_12 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_12);
        condexpr_end_24:;
        condexpr_end_23:;
        CHECK_OBJECT(tmp_class_creation_12__bases);
        tmp_bases_value_12 = tmp_class_creation_12__bases;
        tmp_assign_source_157 = SELECT_METACLASS(tmp_metaclass_value_12, tmp_bases_value_12);
        Py_DECREF(tmp_metaclass_value_12);
        if (tmp_assign_source_157 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 188;

            goto try_except_handler_57;
        }
        assert(tmp_class_creation_12__metaclass == NULL);
        tmp_class_creation_12__metaclass = tmp_assign_source_157;
    }
    {
        bool tmp_condition_result_70;
        PyObject *tmp_key_value_36;
        PyObject *tmp_dict_arg_value_36;
        tmp_key_value_36 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
        tmp_dict_arg_value_36 = tmp_class_creation_12__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_36, tmp_key_value_36);
        assert(!(tmp_res == -1));
        tmp_condition_result_70 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_70 != false) {
            goto branch_yes_46;
        } else {
            goto branch_no_46;
        }
    }
    branch_yes_46:;
    CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_12__class_decl_dict;
    tmp_dictdel_key = mod_consts[87];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 188;

        goto try_except_handler_57;
    }
    branch_no_46:;
    {
        nuitka_bool tmp_condition_result_71;
        PyObject *tmp_expression_value_102;
        CHECK_OBJECT(tmp_class_creation_12__metaclass);
        tmp_expression_value_102 = tmp_class_creation_12__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_102, mod_consts[88]);
        tmp_condition_result_71 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_71 == NUITKA_BOOL_TRUE) {
            goto branch_yes_47;
        } else {
            goto branch_no_47;
        }
    }
    branch_yes_47:;
    {
        PyObject *tmp_assign_source_158;
        PyObject *tmp_called_value_72;
        PyObject *tmp_expression_value_103;
        PyObject *tmp_args_value_40;
        PyObject *tmp_tuple_element_64;
        PyObject *tmp_kwargs_value_40;
        CHECK_OBJECT(tmp_class_creation_12__metaclass);
        tmp_expression_value_103 = tmp_class_creation_12__metaclass;
        tmp_called_value_72 = LOOKUP_ATTRIBUTE(tmp_expression_value_103, mod_consts[88]);
        if (tmp_called_value_72 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 188;

            goto try_except_handler_57;
        }
        tmp_tuple_element_64 = mod_consts[151];
        tmp_args_value_40 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_40, 0, tmp_tuple_element_64);
        CHECK_OBJECT(tmp_class_creation_12__bases);
        tmp_tuple_element_64 = tmp_class_creation_12__bases;
        PyTuple_SET_ITEM0(tmp_args_value_40, 1, tmp_tuple_element_64);
        CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
        tmp_kwargs_value_40 = tmp_class_creation_12__class_decl_dict;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 188;
        tmp_assign_source_158 = CALL_FUNCTION(tmp_called_value_72, tmp_args_value_40, tmp_kwargs_value_40);
        Py_DECREF(tmp_called_value_72);
        Py_DECREF(tmp_args_value_40);
        if (tmp_assign_source_158 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 188;

            goto try_except_handler_57;
        }
        assert(tmp_class_creation_12__prepared == NULL);
        tmp_class_creation_12__prepared = tmp_assign_source_158;
    }
    {
        bool tmp_condition_result_72;
        PyObject *tmp_operand_value_12;
        PyObject *tmp_expression_value_104;
        CHECK_OBJECT(tmp_class_creation_12__prepared);
        tmp_expression_value_104 = tmp_class_creation_12__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_104, mod_consts[89]);
        tmp_operand_value_12 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_12);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 188;

            goto try_except_handler_57;
        }
        tmp_condition_result_72 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_72 != false) {
            goto branch_yes_48;
        } else {
            goto branch_no_48;
        }
    }
    branch_yes_48:;
    {
        PyObject *tmp_raise_type_12;
        PyObject *tmp_raise_value_12;
        PyObject *tmp_left_value_16;
        PyObject *tmp_right_value_16;
        PyObject *tmp_tuple_element_65;
        PyObject *tmp_getattr_target_12;
        PyObject *tmp_getattr_attr_12;
        PyObject *tmp_getattr_default_12;
        tmp_raise_type_12 = PyExc_TypeError;
        tmp_left_value_16 = mod_consts[90];
        CHECK_OBJECT(tmp_class_creation_12__metaclass);
        tmp_getattr_target_12 = tmp_class_creation_12__metaclass;
        tmp_getattr_attr_12 = mod_consts[91];
        tmp_getattr_default_12 = mod_consts[92];
        tmp_tuple_element_65 = BUILTIN_GETATTR(tmp_getattr_target_12, tmp_getattr_attr_12, tmp_getattr_default_12);
        if (tmp_tuple_element_65 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 188;

            goto try_except_handler_57;
        }
        tmp_right_value_16 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_105;
            PyObject *tmp_type_arg_24;
            PyTuple_SET_ITEM(tmp_right_value_16, 0, tmp_tuple_element_65);
            CHECK_OBJECT(tmp_class_creation_12__prepared);
            tmp_type_arg_24 = tmp_class_creation_12__prepared;
            tmp_expression_value_105 = BUILTIN_TYPE1(tmp_type_arg_24);
            assert(!(tmp_expression_value_105 == NULL));
            tmp_tuple_element_65 = LOOKUP_ATTRIBUTE(tmp_expression_value_105, mod_consts[91]);
            Py_DECREF(tmp_expression_value_105);
            if (tmp_tuple_element_65 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 188;

                goto tuple_build_exception_13;
            }
            PyTuple_SET_ITEM(tmp_right_value_16, 1, tmp_tuple_element_65);
        }
        goto tuple_build_noexception_13;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_13:;
        Py_DECREF(tmp_right_value_16);
        goto try_except_handler_57;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_13:;
        tmp_raise_value_12 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_16, tmp_right_value_16);
        Py_DECREF(tmp_right_value_16);
        if (tmp_raise_value_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 188;

            goto try_except_handler_57;
        }
        exception_type = tmp_raise_type_12;
        Py_INCREF(tmp_raise_type_12);
        exception_value = tmp_raise_value_12;
        exception_lineno = 188;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_57;
    }
    branch_no_48:;
    goto branch_end_47;
    branch_no_47:;
    {
        PyObject *tmp_assign_source_159;
        tmp_assign_source_159 = PyDict_New();
        assert(tmp_class_creation_12__prepared == NULL);
        tmp_class_creation_12__prepared = tmp_assign_source_159;
    }
    branch_end_47:;
    {
        PyObject *tmp_assign_source_160;
        PyObject *tmp_called_value_73;
        PyObject *tmp_called_value_74;
        PyObject *tmp_args_value_41;
        PyObject *tmp_tuple_element_66;
        PyObject *tmp_expression_value_106;
        PyObject *tmp_expression_value_107;
        PyObject *tmp_kwargs_value_41;
        PyObject *tmp_args_element_value_49;
        PyObject *tmp_called_value_75;
        PyObject *tmp_called_value_76;
        PyObject *tmp_args_value_42;
        PyObject *tmp_tuple_element_67;
        PyObject *tmp_expression_value_108;
        PyObject *tmp_expression_value_109;
        PyObject *tmp_kwargs_value_42;
        PyObject *tmp_args_element_value_50;
        tmp_called_value_74 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_74 == NULL)) {
            tmp_called_value_74 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_74 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 186;

            goto try_except_handler_57;
        }
        tmp_expression_value_107 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_107 == NULL)) {
            tmp_expression_value_107 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_107 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 186;

            goto try_except_handler_57;
        }
        tmp_expression_value_106 = LOOKUP_ATTRIBUTE(tmp_expression_value_107, mod_consts[19]);
        if (tmp_expression_value_106 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 186;

            goto try_except_handler_57;
        }
        tmp_tuple_element_66 = LOOKUP_ATTRIBUTE(tmp_expression_value_106, mod_consts[152]);
        Py_DECREF(tmp_expression_value_106);
        if (tmp_tuple_element_66 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 186;

            goto try_except_handler_57;
        }
        tmp_args_value_41 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_41, 0, tmp_tuple_element_66);
        tmp_kwargs_value_41 = PyDict_Copy(mod_consts[153]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 186;
        tmp_called_value_73 = CALL_FUNCTION(tmp_called_value_74, tmp_args_value_41, tmp_kwargs_value_41);
        Py_DECREF(tmp_args_value_41);
        Py_DECREF(tmp_kwargs_value_41);
        if (tmp_called_value_73 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 186;

            goto try_except_handler_57;
        }
        tmp_called_value_76 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_76 == NULL)) {
            tmp_called_value_76 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_76 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_73);

            exception_lineno = 187;

            goto try_except_handler_57;
        }
        tmp_expression_value_109 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_109 == NULL)) {
            tmp_expression_value_109 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_109 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_73);

            exception_lineno = 187;

            goto try_except_handler_57;
        }
        tmp_expression_value_108 = LOOKUP_ATTRIBUTE(tmp_expression_value_109, mod_consts[19]);
        if (tmp_expression_value_108 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_73);

            exception_lineno = 187;

            goto try_except_handler_57;
        }
        tmp_tuple_element_67 = LOOKUP_ATTRIBUTE(tmp_expression_value_108, mod_consts[154]);
        Py_DECREF(tmp_expression_value_108);
        if (tmp_tuple_element_67 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_73);

            exception_lineno = 187;

            goto try_except_handler_57;
        }
        tmp_args_value_42 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_42, 0, tmp_tuple_element_67);
        tmp_kwargs_value_42 = PyDict_Copy(mod_consts[155]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 187;
        tmp_called_value_75 = CALL_FUNCTION(tmp_called_value_76, tmp_args_value_42, tmp_kwargs_value_42);
        Py_DECREF(tmp_args_value_42);
        Py_DECREF(tmp_kwargs_value_42);
        if (tmp_called_value_75 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_73);

            exception_lineno = 187;

            goto try_except_handler_57;
        }
        {
            PyObject *tmp_set_locals_12;
            CHECK_OBJECT(tmp_class_creation_12__prepared);
            tmp_set_locals_12 = tmp_class_creation_12__prepared;
            locals_numba$core$typing$randomdecl$$$class__12_Numpy_exponential_188 = tmp_set_locals_12;
            Py_INCREF(tmp_set_locals_12);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[93];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__12_Numpy_exponential_188, mod_consts[94], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 188;

            goto try_except_handler_59;
        }
        tmp_dictset_value = mod_consts[151];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__12_Numpy_exponential_188, mod_consts[96], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 188;

            goto try_except_handler_59;
        }
        if (isFrameUnusable(cache_frame_3eb28981ba053aaf919c6786b39ae516_22)) {
            Py_XDECREF(cache_frame_3eb28981ba053aaf919c6786b39ae516_22);

#if _DEBUG_REFCOUNTS
            if (cache_frame_3eb28981ba053aaf919c6786b39ae516_22 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_3eb28981ba053aaf919c6786b39ae516_22 = MAKE_FUNCTION_FRAME(codeobj_3eb28981ba053aaf919c6786b39ae516, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_3eb28981ba053aaf919c6786b39ae516_22->m_type_description == NULL);
        frame_3eb28981ba053aaf919c6786b39ae516_22 = cache_frame_3eb28981ba053aaf919c6786b39ae516_22;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_3eb28981ba053aaf919c6786b39ae516_22);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_3eb28981ba053aaf919c6786b39ae516_22) == 2); // Frame stack

        // Framed code:
        // Tried code:
        {
            PyObject *tmp_assign_source_161;
            PyObject *tmp_iter_arg_10;
            tmp_iter_arg_10 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__12_Numpy_exponential_188, mod_consts[86]);

            if (tmp_iter_arg_10 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_iter_arg_10 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[86]);

                    if (unlikely(tmp_iter_arg_10 == NULL)) {
                        tmp_iter_arg_10 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[86]);
                    }

                    if (tmp_iter_arg_10 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 189;
                        type_description_2 = "o";
                        goto try_except_handler_60;
                    }
                    Py_INCREF(tmp_iter_arg_10);
                } else {
                    goto try_except_handler_60;
                }
            }

            tmp_assign_source_161 = MAKE_ITERATOR(tmp_iter_arg_10);
            Py_DECREF(tmp_iter_arg_10);
            if (tmp_assign_source_161 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 189;
                type_description_2 = "o";
                goto try_except_handler_60;
            }
            assert(tmp_Numpy_exponential$listcomp_1__$0 == NULL);
            tmp_Numpy_exponential$listcomp_1__$0 = tmp_assign_source_161;
        }
        {
            PyObject *tmp_assign_source_162;
            tmp_assign_source_162 = PyList_New(0);
            assert(tmp_Numpy_exponential$listcomp_1__contraction == NULL);
            tmp_Numpy_exponential$listcomp_1__contraction = tmp_assign_source_162;
        }
        if (isFrameUnusable(cache_frame_b51cfe43ec23e36b098f53e36ef90b05_23)) {
            Py_XDECREF(cache_frame_b51cfe43ec23e36b098f53e36ef90b05_23);

#if _DEBUG_REFCOUNTS
            if (cache_frame_b51cfe43ec23e36b098f53e36ef90b05_23 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_b51cfe43ec23e36b098f53e36ef90b05_23 = MAKE_FUNCTION_FRAME(codeobj_b51cfe43ec23e36b098f53e36ef90b05, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_b51cfe43ec23e36b098f53e36ef90b05_23->m_type_description == NULL);
        frame_b51cfe43ec23e36b098f53e36ef90b05_23 = cache_frame_b51cfe43ec23e36b098f53e36ef90b05_23;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_b51cfe43ec23e36b098f53e36ef90b05_23);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_b51cfe43ec23e36b098f53e36ef90b05_23) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_10:;
        {
            PyObject *tmp_next_source_10;
            PyObject *tmp_assign_source_163;
            CHECK_OBJECT(tmp_Numpy_exponential$listcomp_1__$0);
            tmp_next_source_10 = tmp_Numpy_exponential$listcomp_1__$0;
            tmp_assign_source_163 = ITERATOR_NEXT(tmp_next_source_10);
            if (tmp_assign_source_163 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_10;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_3 = "o";
                    exception_lineno = 189;
                    goto try_except_handler_61;
                }
            }

            {
                PyObject *old = tmp_Numpy_exponential$listcomp_1__iter_value_0;
                tmp_Numpy_exponential$listcomp_1__iter_value_0 = tmp_assign_source_163;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_164;
            CHECK_OBJECT(tmp_Numpy_exponential$listcomp_1__iter_value_0);
            tmp_assign_source_164 = tmp_Numpy_exponential$listcomp_1__iter_value_0;
            {
                PyObject *old = outline_21_var_tp;
                outline_21_var_tp = tmp_assign_source_164;
                Py_INCREF(outline_21_var_tp);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_10;
            PyObject *tmp_append_value_10;
            PyObject *tmp_called_value_77;
            PyObject *tmp_args_element_value_51;
            PyObject *tmp_args_element_value_52;
            CHECK_OBJECT(tmp_Numpy_exponential$listcomp_1__contraction);
            tmp_append_list_10 = tmp_Numpy_exponential$listcomp_1__contraction;
            tmp_called_value_77 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[25]);

            if (unlikely(tmp_called_value_77 == NULL)) {
                tmp_called_value_77 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[25]);
            }

            if (tmp_called_value_77 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 189;
                type_description_3 = "o";
                goto try_except_handler_61;
            }
            CHECK_OBJECT(outline_21_var_tp);
            tmp_args_element_value_51 = outline_21_var_tp;
            CHECK_OBJECT(outline_21_var_tp);
            tmp_args_element_value_52 = outline_21_var_tp;
            frame_b51cfe43ec23e36b098f53e36ef90b05_23->m_frame.f_lineno = 189;
            {
                PyObject *call_args[] = {tmp_args_element_value_51, tmp_args_element_value_52};
                tmp_append_value_10 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_77, call_args);
            }

            if (tmp_append_value_10 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 189;
                type_description_3 = "o";
                goto try_except_handler_61;
            }
            assert(PyList_Check(tmp_append_list_10));
            tmp_result = LIST_APPEND1(tmp_append_list_10, tmp_append_value_10);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 189;
                type_description_3 = "o";
                goto try_except_handler_61;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 189;
            type_description_3 = "o";
            goto try_except_handler_61;
        }
        goto loop_start_10;
        loop_end_10:;
        CHECK_OBJECT(tmp_Numpy_exponential$listcomp_1__contraction);
        tmp_dictset_value = tmp_Numpy_exponential$listcomp_1__contraction;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_61;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_61:;
        CHECK_OBJECT(tmp_Numpy_exponential$listcomp_1__$0);
        Py_DECREF(tmp_Numpy_exponential$listcomp_1__$0);
        tmp_Numpy_exponential$listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_Numpy_exponential$listcomp_1__contraction);
        Py_DECREF(tmp_Numpy_exponential$listcomp_1__contraction);
        tmp_Numpy_exponential$listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_Numpy_exponential$listcomp_1__iter_value_0);
        tmp_Numpy_exponential$listcomp_1__iter_value_0 = NULL;
        goto frame_return_exit_10;
        // Exception handler code:
        try_except_handler_61:;
        exception_keeper_type_57 = exception_type;
        exception_keeper_value_57 = exception_value;
        exception_keeper_tb_57 = exception_tb;
        exception_keeper_lineno_57 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Numpy_exponential$listcomp_1__$0);
        Py_DECREF(tmp_Numpy_exponential$listcomp_1__$0);
        tmp_Numpy_exponential$listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_Numpy_exponential$listcomp_1__contraction);
        Py_DECREF(tmp_Numpy_exponential$listcomp_1__contraction);
        tmp_Numpy_exponential$listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_Numpy_exponential$listcomp_1__iter_value_0);
        tmp_Numpy_exponential$listcomp_1__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_57;
        exception_value = exception_keeper_value_57;
        exception_tb = exception_keeper_tb_57;
        exception_lineno = exception_keeper_lineno_57;

        goto frame_exception_exit_23;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_b51cfe43ec23e36b098f53e36ef90b05_23);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_21;

        frame_return_exit_10:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_b51cfe43ec23e36b098f53e36ef90b05_23);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_60;

        frame_exception_exit_23:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_b51cfe43ec23e36b098f53e36ef90b05_23);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_b51cfe43ec23e36b098f53e36ef90b05_23, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_b51cfe43ec23e36b098f53e36ef90b05_23->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_b51cfe43ec23e36b098f53e36ef90b05_23, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_b51cfe43ec23e36b098f53e36ef90b05_23,
            type_description_3,
            outline_21_var_tp
        );


        // Release cached frame if used for exception.
        if (frame_b51cfe43ec23e36b098f53e36ef90b05_23 == cache_frame_b51cfe43ec23e36b098f53e36ef90b05_23) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_b51cfe43ec23e36b098f53e36ef90b05_23);
            cache_frame_b51cfe43ec23e36b098f53e36ef90b05_23 = NULL;
        }

        assertFrameObject(frame_b51cfe43ec23e36b098f53e36ef90b05_23);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_22;

        frame_no_exception_21:;
        goto skip_nested_handling_21;
        nested_frame_exit_22:;
        type_description_2 = "o";
        goto try_except_handler_60;
        skip_nested_handling_21:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_60:;
        Py_XDECREF(outline_21_var_tp);
        outline_21_var_tp = NULL;
        goto outline_result_22;
        // Exception handler code:
        try_except_handler_60:;
        exception_keeper_type_58 = exception_type;
        exception_keeper_value_58 = exception_value;
        exception_keeper_tb_58 = exception_tb;
        exception_keeper_lineno_58 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_21_var_tp);
        outline_21_var_tp = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_58;
        exception_value = exception_keeper_value_58;
        exception_tb = exception_keeper_tb_58;
        exception_lineno = exception_keeper_lineno_58;

        goto outline_exception_22;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_22:;
        exception_lineno = 189;
        goto frame_exception_exit_22;
        outline_result_22:;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__12_Numpy_exponential_188, mod_consts[30], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 189;
            type_description_2 = "o";
            goto frame_exception_exit_22;
        }
        {
            PyObject *tmp_assign_source_165;
            tmp_assign_source_165 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__12_Numpy_exponential_188, mod_consts[30]);

            if (unlikely(tmp_assign_source_165 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[30]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 190;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }

            if (tmp_assign_source_165 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 190;
                type_description_2 = "o";
                goto frame_exception_exit_22;
            }
            assert(tmp_Numpy_exponential$class_inplace_1__value == NULL);
            tmp_Numpy_exponential$class_inplace_1__value = tmp_assign_source_165;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_166;
            PyObject *tmp_left_value_17;
            PyObject *tmp_right_value_17;
            CHECK_OBJECT(tmp_Numpy_exponential$class_inplace_1__value);
            tmp_left_value_17 = tmp_Numpy_exponential$class_inplace_1__value;
            // Tried code:
            {
                PyObject *tmp_assign_source_167;
                PyObject *tmp_iter_arg_11;
                tmp_iter_arg_11 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__12_Numpy_exponential_188, mod_consts[86]);

                if (tmp_iter_arg_11 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_iter_arg_11 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[86]);

                        if (unlikely(tmp_iter_arg_11 == NULL)) {
                            tmp_iter_arg_11 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[86]);
                        }

                        if (tmp_iter_arg_11 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 190;
                            type_description_2 = "o";
                            goto try_except_handler_63;
                        }
                        Py_INCREF(tmp_iter_arg_11);
                    } else {
                        goto try_except_handler_63;
                    }
                }

                tmp_assign_source_167 = MAKE_ITERATOR(tmp_iter_arg_11);
                Py_DECREF(tmp_iter_arg_11);
                if (tmp_assign_source_167 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 190;
                    type_description_2 = "o";
                    goto try_except_handler_63;
                }
                assert(tmp_Numpy_exponential$listcomp_2__$0 == NULL);
                tmp_Numpy_exponential$listcomp_2__$0 = tmp_assign_source_167;
            }
            {
                PyObject *tmp_assign_source_168;
                tmp_assign_source_168 = PyList_New(0);
                assert(tmp_Numpy_exponential$listcomp_2__contraction == NULL);
                tmp_Numpy_exponential$listcomp_2__contraction = tmp_assign_source_168;
            }
            if (isFrameUnusable(cache_frame_7efc27a65ad537a7bd3ac8d3ba23f9ad_24)) {
                Py_XDECREF(cache_frame_7efc27a65ad537a7bd3ac8d3ba23f9ad_24);

#if _DEBUG_REFCOUNTS
                if (cache_frame_7efc27a65ad537a7bd3ac8d3ba23f9ad_24 == NULL) {
                    count_active_frame_cache_instances += 1;
                } else {
                    count_released_frame_cache_instances += 1;
                }
                count_allocated_frame_cache_instances += 1;
#endif
                cache_frame_7efc27a65ad537a7bd3ac8d3ba23f9ad_24 = MAKE_FUNCTION_FRAME(codeobj_7efc27a65ad537a7bd3ac8d3ba23f9ad, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
            } else {
                count_hit_frame_cache_instances += 1;
#endif
            }
            assert(cache_frame_7efc27a65ad537a7bd3ac8d3ba23f9ad_24->m_type_description == NULL);
            frame_7efc27a65ad537a7bd3ac8d3ba23f9ad_24 = cache_frame_7efc27a65ad537a7bd3ac8d3ba23f9ad_24;

            // Push the new frame as the currently active one.
            pushFrameStack(frame_7efc27a65ad537a7bd3ac8d3ba23f9ad_24);

            // Mark the frame object as in use, ref count 1 will be up for reuse.
            assert(Py_REFCNT(frame_7efc27a65ad537a7bd3ac8d3ba23f9ad_24) == 2); // Frame stack

            // Framed code:
            // Tried code:
            loop_start_11:;
            {
                PyObject *tmp_next_source_11;
                PyObject *tmp_assign_source_169;
                CHECK_OBJECT(tmp_Numpy_exponential$listcomp_2__$0);
                tmp_next_source_11 = tmp_Numpy_exponential$listcomp_2__$0;
                tmp_assign_source_169 = ITERATOR_NEXT(tmp_next_source_11);
                if (tmp_assign_source_169 == NULL) {
                    if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                        goto loop_end_11;
                    } else {

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        type_description_3 = "o";
                        exception_lineno = 190;
                        goto try_except_handler_64;
                    }
                }

                {
                    PyObject *old = tmp_Numpy_exponential$listcomp_2__iter_value_0;
                    tmp_Numpy_exponential$listcomp_2__iter_value_0 = tmp_assign_source_169;
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_assign_source_170;
                CHECK_OBJECT(tmp_Numpy_exponential$listcomp_2__iter_value_0);
                tmp_assign_source_170 = tmp_Numpy_exponential$listcomp_2__iter_value_0;
                {
                    PyObject *old = outline_22_var_tp;
                    outline_22_var_tp = tmp_assign_source_170;
                    Py_INCREF(outline_22_var_tp);
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_append_list_11;
                PyObject *tmp_append_value_11;
                PyObject *tmp_called_value_78;
                PyObject *tmp_args_element_value_53;
                CHECK_OBJECT(tmp_Numpy_exponential$listcomp_2__contraction);
                tmp_append_list_11 = tmp_Numpy_exponential$listcomp_2__contraction;
                tmp_called_value_78 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[25]);

                if (unlikely(tmp_called_value_78 == NULL)) {
                    tmp_called_value_78 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[25]);
                }

                if (tmp_called_value_78 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 190;
                    type_description_3 = "o";
                    goto try_except_handler_64;
                }
                CHECK_OBJECT(outline_22_var_tp);
                tmp_args_element_value_53 = outline_22_var_tp;
                frame_7efc27a65ad537a7bd3ac8d3ba23f9ad_24->m_frame.f_lineno = 190;
                tmp_append_value_11 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_78, tmp_args_element_value_53);
                if (tmp_append_value_11 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 190;
                    type_description_3 = "o";
                    goto try_except_handler_64;
                }
                assert(PyList_Check(tmp_append_list_11));
                tmp_result = LIST_APPEND1(tmp_append_list_11, tmp_append_value_11);
                if (tmp_result == false) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 190;
                    type_description_3 = "o";
                    goto try_except_handler_64;
                }
            }
            if (CONSIDER_THREADING() == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 190;
                type_description_3 = "o";
                goto try_except_handler_64;
            }
            goto loop_start_11;
            loop_end_11:;
            CHECK_OBJECT(tmp_Numpy_exponential$listcomp_2__contraction);
            tmp_right_value_17 = tmp_Numpy_exponential$listcomp_2__contraction;
            Py_INCREF(tmp_right_value_17);
            goto try_return_handler_64;
            NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
            return NULL;
            // Return handler code:
            try_return_handler_64:;
            CHECK_OBJECT(tmp_Numpy_exponential$listcomp_2__$0);
            Py_DECREF(tmp_Numpy_exponential$listcomp_2__$0);
            tmp_Numpy_exponential$listcomp_2__$0 = NULL;
            CHECK_OBJECT(tmp_Numpy_exponential$listcomp_2__contraction);
            Py_DECREF(tmp_Numpy_exponential$listcomp_2__contraction);
            tmp_Numpy_exponential$listcomp_2__contraction = NULL;
            Py_XDECREF(tmp_Numpy_exponential$listcomp_2__iter_value_0);
            tmp_Numpy_exponential$listcomp_2__iter_value_0 = NULL;
            goto frame_return_exit_11;
            // Exception handler code:
            try_except_handler_64:;
            exception_keeper_type_59 = exception_type;
            exception_keeper_value_59 = exception_value;
            exception_keeper_tb_59 = exception_tb;
            exception_keeper_lineno_59 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT(tmp_Numpy_exponential$listcomp_2__$0);
            Py_DECREF(tmp_Numpy_exponential$listcomp_2__$0);
            tmp_Numpy_exponential$listcomp_2__$0 = NULL;
            CHECK_OBJECT(tmp_Numpy_exponential$listcomp_2__contraction);
            Py_DECREF(tmp_Numpy_exponential$listcomp_2__contraction);
            tmp_Numpy_exponential$listcomp_2__contraction = NULL;
            Py_XDECREF(tmp_Numpy_exponential$listcomp_2__iter_value_0);
            tmp_Numpy_exponential$listcomp_2__iter_value_0 = NULL;
            // Re-raise.
            exception_type = exception_keeper_type_59;
            exception_value = exception_keeper_value_59;
            exception_tb = exception_keeper_tb_59;
            exception_lineno = exception_keeper_lineno_59;

            goto frame_exception_exit_24;
            // End of try:

#if 0
            RESTORE_FRAME_EXCEPTION(frame_7efc27a65ad537a7bd3ac8d3ba23f9ad_24);
#endif

            // Put the previous frame back on top.
            popFrameStack();

            goto frame_no_exception_22;

            frame_return_exit_11:;
#if 0
            RESTORE_FRAME_EXCEPTION(frame_7efc27a65ad537a7bd3ac8d3ba23f9ad_24);
#endif

            // Put the previous frame back on top.
            popFrameStack();

            goto try_return_handler_63;

            frame_exception_exit_24:;

#if 0
            RESTORE_FRAME_EXCEPTION(frame_7efc27a65ad537a7bd3ac8d3ba23f9ad_24);
#endif

            if (exception_tb == NULL) {
                exception_tb = MAKE_TRACEBACK(frame_7efc27a65ad537a7bd3ac8d3ba23f9ad_24, exception_lineno);
            } else if (exception_tb->tb_frame != &frame_7efc27a65ad537a7bd3ac8d3ba23f9ad_24->m_frame) {
                exception_tb = ADD_TRACEBACK(exception_tb, frame_7efc27a65ad537a7bd3ac8d3ba23f9ad_24, exception_lineno);
            }

            // Attaches locals to frame if any.
            Nuitka_Frame_AttachLocals(
                frame_7efc27a65ad537a7bd3ac8d3ba23f9ad_24,
                type_description_3,
                outline_22_var_tp
            );


            // Release cached frame if used for exception.
            if (frame_7efc27a65ad537a7bd3ac8d3ba23f9ad_24 == cache_frame_7efc27a65ad537a7bd3ac8d3ba23f9ad_24) {
#if _DEBUG_REFCOUNTS
                count_active_frame_cache_instances -= 1;
                count_released_frame_cache_instances += 1;
#endif

                Py_DECREF(cache_frame_7efc27a65ad537a7bd3ac8d3ba23f9ad_24);
                cache_frame_7efc27a65ad537a7bd3ac8d3ba23f9ad_24 = NULL;
            }

            assertFrameObject(frame_7efc27a65ad537a7bd3ac8d3ba23f9ad_24);

            // Put the previous frame back on top.
            popFrameStack();

            // Return the error.
            goto nested_frame_exit_23;

            frame_no_exception_22:;
            goto skip_nested_handling_22;
            nested_frame_exit_23:;
            type_description_2 = "o";
            goto try_except_handler_63;
            skip_nested_handling_22:;
            NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
            return NULL;
            // Return handler code:
            try_return_handler_63:;
            Py_XDECREF(outline_22_var_tp);
            outline_22_var_tp = NULL;
            goto outline_result_23;
            // Exception handler code:
            try_except_handler_63:;
            exception_keeper_type_60 = exception_type;
            exception_keeper_value_60 = exception_value;
            exception_keeper_tb_60 = exception_tb;
            exception_keeper_lineno_60 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF(outline_22_var_tp);
            outline_22_var_tp = NULL;
            // Re-raise.
            exception_type = exception_keeper_type_60;
            exception_value = exception_keeper_value_60;
            exception_tb = exception_keeper_tb_60;
            exception_lineno = exception_keeper_lineno_60;

            goto outline_exception_23;
            // End of try:
            NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
            return NULL;
            outline_exception_23:;
            exception_lineno = 190;
            goto try_except_handler_62;
            outline_result_23:;
            tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE(&tmp_left_value_17, tmp_right_value_17);
            Py_DECREF(tmp_right_value_17);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 190;
                type_description_2 = "o";
                goto try_except_handler_62;
            }
            tmp_assign_source_166 = tmp_left_value_17;
            tmp_Numpy_exponential$class_inplace_1__value = tmp_assign_source_166;

        }
        CHECK_OBJECT(tmp_Numpy_exponential$class_inplace_1__value);
        tmp_dictset_value = tmp_Numpy_exponential$class_inplace_1__value;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__12_Numpy_exponential_188, mod_consts[30], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 190;
            type_description_2 = "o";
            goto try_except_handler_62;
        }
        goto try_end_17;
        // Exception handler code:
        try_except_handler_62:;
        exception_keeper_type_61 = exception_type;
        exception_keeper_value_61 = exception_value;
        exception_keeper_tb_61 = exception_tb;
        exception_keeper_lineno_61 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Numpy_exponential$class_inplace_1__value);
        Py_DECREF(tmp_Numpy_exponential$class_inplace_1__value);
        tmp_Numpy_exponential$class_inplace_1__value = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_61;
        exception_value = exception_keeper_value_61;
        exception_tb = exception_keeper_tb_61;
        exception_lineno = exception_keeper_lineno_61;

        goto frame_exception_exit_22;
        // End of try:
        try_end_17:;
        CHECK_OBJECT(tmp_Numpy_exponential$class_inplace_1__value);
        Py_DECREF(tmp_Numpy_exponential$class_inplace_1__value);
        tmp_Numpy_exponential$class_inplace_1__value = NULL;


        tmp_dictset_value = MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__9_generic();

        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__12_Numpy_exponential_188, mod_consts[110], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 192;
            type_description_2 = "o";
            goto frame_exception_exit_22;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_3eb28981ba053aaf919c6786b39ae516_22);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_23;

        frame_exception_exit_22:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_3eb28981ba053aaf919c6786b39ae516_22);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_3eb28981ba053aaf919c6786b39ae516_22, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_3eb28981ba053aaf919c6786b39ae516_22->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_3eb28981ba053aaf919c6786b39ae516_22, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_3eb28981ba053aaf919c6786b39ae516_22,
            type_description_2,
            outline_20_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_3eb28981ba053aaf919c6786b39ae516_22 == cache_frame_3eb28981ba053aaf919c6786b39ae516_22) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_3eb28981ba053aaf919c6786b39ae516_22);
            cache_frame_3eb28981ba053aaf919c6786b39ae516_22 = NULL;
        }

        assertFrameObject(frame_3eb28981ba053aaf919c6786b39ae516_22);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_21;

        frame_no_exception_23:;
        goto skip_nested_handling_23;
        nested_frame_exit_21:;

        goto try_except_handler_59;
        skip_nested_handling_23:;
        {
            nuitka_bool tmp_condition_result_73;
            PyObject *tmp_cmp_expr_left_13;
            PyObject *tmp_cmp_expr_right_13;
            CHECK_OBJECT(tmp_class_creation_12__bases);
            tmp_cmp_expr_left_13 = tmp_class_creation_12__bases;
            CHECK_OBJECT(tmp_class_creation_12__bases_orig);
            tmp_cmp_expr_right_13 = tmp_class_creation_12__bases_orig;
            tmp_condition_result_73 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_13, tmp_cmp_expr_right_13);
            if (tmp_condition_result_73 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 188;

                goto try_except_handler_59;
            }
            if (tmp_condition_result_73 == NUITKA_BOOL_TRUE) {
                goto branch_yes_49;
            } else {
                goto branch_no_49;
            }
            assert(tmp_condition_result_73 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_49:;
        CHECK_OBJECT(tmp_class_creation_12__bases_orig);
        tmp_dictset_value = tmp_class_creation_12__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__12_Numpy_exponential_188, mod_consts[98], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 188;

            goto try_except_handler_59;
        }
        branch_no_49:;
        {
            PyObject *tmp_assign_source_171;
            PyObject *tmp_called_value_79;
            PyObject *tmp_args_value_43;
            PyObject *tmp_tuple_element_68;
            PyObject *tmp_kwargs_value_43;
            CHECK_OBJECT(tmp_class_creation_12__metaclass);
            tmp_called_value_79 = tmp_class_creation_12__metaclass;
            tmp_tuple_element_68 = mod_consts[151];
            tmp_args_value_43 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_43, 0, tmp_tuple_element_68);
            CHECK_OBJECT(tmp_class_creation_12__bases);
            tmp_tuple_element_68 = tmp_class_creation_12__bases;
            PyTuple_SET_ITEM0(tmp_args_value_43, 1, tmp_tuple_element_68);
            tmp_tuple_element_68 = locals_numba$core$typing$randomdecl$$$class__12_Numpy_exponential_188;
            PyTuple_SET_ITEM0(tmp_args_value_43, 2, tmp_tuple_element_68);
            CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
            tmp_kwargs_value_43 = tmp_class_creation_12__class_decl_dict;
            frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 188;
            tmp_assign_source_171 = CALL_FUNCTION(tmp_called_value_79, tmp_args_value_43, tmp_kwargs_value_43);
            Py_DECREF(tmp_args_value_43);
            if (tmp_assign_source_171 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 188;

                goto try_except_handler_59;
            }
            assert(outline_20_var___class__ == NULL);
            outline_20_var___class__ = tmp_assign_source_171;
        }
        CHECK_OBJECT(outline_20_var___class__);
        tmp_args_element_value_50 = outline_20_var___class__;
        Py_INCREF(tmp_args_element_value_50);
        goto try_return_handler_59;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_59:;
        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__12_Numpy_exponential_188);
        locals_numba$core$typing$randomdecl$$$class__12_Numpy_exponential_188 = NULL;
        goto try_return_handler_58;
        // Exception handler code:
        try_except_handler_59:;
        exception_keeper_type_62 = exception_type;
        exception_keeper_value_62 = exception_value;
        exception_keeper_tb_62 = exception_tb;
        exception_keeper_lineno_62 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__12_Numpy_exponential_188);
        locals_numba$core$typing$randomdecl$$$class__12_Numpy_exponential_188 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_62;
        exception_value = exception_keeper_value_62;
        exception_tb = exception_keeper_tb_62;
        exception_lineno = exception_keeper_lineno_62;

        goto try_except_handler_58;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_58:;
        CHECK_OBJECT(outline_20_var___class__);
        Py_DECREF(outline_20_var___class__);
        outline_20_var___class__ = NULL;
        goto outline_result_21;
        // Exception handler code:
        try_except_handler_58:;
        exception_keeper_type_63 = exception_type;
        exception_keeper_value_63 = exception_value;
        exception_keeper_tb_63 = exception_tb;
        exception_keeper_lineno_63 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_63;
        exception_value = exception_keeper_value_63;
        exception_tb = exception_keeper_tb_63;
        exception_lineno = exception_keeper_lineno_63;

        goto outline_exception_21;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_21:;
        exception_lineno = 188;
        goto try_except_handler_57;
        outline_result_21:;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 187;
        tmp_args_element_value_49 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_75, tmp_args_element_value_50);
        Py_DECREF(tmp_called_value_75);
        Py_DECREF(tmp_args_element_value_50);
        if (tmp_args_element_value_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_73);

            exception_lineno = 187;

            goto try_except_handler_57;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 186;
        tmp_assign_source_160 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_73, tmp_args_element_value_49);
        Py_DECREF(tmp_called_value_73);
        Py_DECREF(tmp_args_element_value_49);
        if (tmp_assign_source_160 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 186;

            goto try_except_handler_57;
        }
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[151], tmp_assign_source_160);
    }
    goto try_end_18;
    // Exception handler code:
    try_except_handler_57:;
    exception_keeper_type_64 = exception_type;
    exception_keeper_value_64 = exception_value;
    exception_keeper_tb_64 = exception_tb;
    exception_keeper_lineno_64 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_12__bases_orig);
    tmp_class_creation_12__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_12__bases);
    tmp_class_creation_12__bases = NULL;
    Py_XDECREF(tmp_class_creation_12__class_decl_dict);
    tmp_class_creation_12__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_12__metaclass);
    tmp_class_creation_12__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_12__prepared);
    tmp_class_creation_12__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_64;
    exception_value = exception_keeper_value_64;
    exception_tb = exception_keeper_tb_64;
    exception_lineno = exception_keeper_lineno_64;

    goto frame_exception_exit_1;
    // End of try:
    try_end_18:;
    CHECK_OBJECT(tmp_class_creation_12__bases_orig);
    Py_DECREF(tmp_class_creation_12__bases_orig);
    tmp_class_creation_12__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_12__bases);
    Py_DECREF(tmp_class_creation_12__bases);
    tmp_class_creation_12__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
    Py_DECREF(tmp_class_creation_12__class_decl_dict);
    tmp_class_creation_12__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_12__metaclass);
    Py_DECREF(tmp_class_creation_12__metaclass);
    tmp_class_creation_12__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_12__prepared);
    Py_DECREF(tmp_class_creation_12__prepared);
    tmp_class_creation_12__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_172;
        PyObject *tmp_tuple_element_69;
        tmp_tuple_element_69 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[99]);

        if (unlikely(tmp_tuple_element_69 == NULL)) {
            tmp_tuple_element_69 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[99]);
        }

        if (tmp_tuple_element_69 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 198;

            goto try_except_handler_65;
        }
        tmp_assign_source_172 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_172, 0, tmp_tuple_element_69);
        assert(tmp_class_creation_13__bases_orig == NULL);
        tmp_class_creation_13__bases_orig = tmp_assign_source_172;
    }
    {
        PyObject *tmp_assign_source_173;
        PyObject *tmp_dircall_arg1_13;
        CHECK_OBJECT(tmp_class_creation_13__bases_orig);
        tmp_dircall_arg1_13 = tmp_class_creation_13__bases_orig;
        Py_INCREF(tmp_dircall_arg1_13);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_13};
            tmp_assign_source_173 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_173 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 198;

            goto try_except_handler_65;
        }
        assert(tmp_class_creation_13__bases == NULL);
        tmp_class_creation_13__bases = tmp_assign_source_173;
    }
    {
        PyObject *tmp_assign_source_174;
        tmp_assign_source_174 = PyDict_New();
        assert(tmp_class_creation_13__class_decl_dict == NULL);
        tmp_class_creation_13__class_decl_dict = tmp_assign_source_174;
    }
    {
        PyObject *tmp_assign_source_175;
        PyObject *tmp_metaclass_value_13;
        bool tmp_condition_result_74;
        PyObject *tmp_key_value_37;
        PyObject *tmp_dict_arg_value_37;
        PyObject *tmp_dict_arg_value_38;
        PyObject *tmp_key_value_38;
        nuitka_bool tmp_condition_result_75;
        int tmp_truth_name_13;
        PyObject *tmp_type_arg_25;
        PyObject *tmp_expression_value_110;
        PyObject *tmp_subscript_value_13;
        PyObject *tmp_bases_value_13;
        tmp_key_value_37 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
        tmp_dict_arg_value_37 = tmp_class_creation_13__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_37, tmp_key_value_37);
        assert(!(tmp_res == -1));
        tmp_condition_result_74 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_74 != false) {
            goto condexpr_true_25;
        } else {
            goto condexpr_false_25;
        }
        condexpr_true_25:;
        CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
        tmp_dict_arg_value_38 = tmp_class_creation_13__class_decl_dict;
        tmp_key_value_38 = mod_consts[87];
        tmp_metaclass_value_13 = DICT_GET_ITEM0(tmp_dict_arg_value_38, tmp_key_value_38);
        if (tmp_metaclass_value_13 == NULL) {
            tmp_metaclass_value_13 = Py_None;
        }
        assert(!(tmp_metaclass_value_13 == NULL));
        Py_INCREF(tmp_metaclass_value_13);
        goto condexpr_end_25;
        condexpr_false_25:;
        CHECK_OBJECT(tmp_class_creation_13__bases);
        tmp_truth_name_13 = CHECK_IF_TRUE(tmp_class_creation_13__bases);
        if (tmp_truth_name_13 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 198;

            goto try_except_handler_65;
        }
        tmp_condition_result_75 = tmp_truth_name_13 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_75 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_26;
        } else {
            goto condexpr_false_26;
        }
        condexpr_true_26:;
        CHECK_OBJECT(tmp_class_creation_13__bases);
        tmp_expression_value_110 = tmp_class_creation_13__bases;
        tmp_subscript_value_13 = mod_consts[13];
        tmp_type_arg_25 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_110, tmp_subscript_value_13, 0);
        if (tmp_type_arg_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 198;

            goto try_except_handler_65;
        }
        tmp_metaclass_value_13 = BUILTIN_TYPE1(tmp_type_arg_25);
        Py_DECREF(tmp_type_arg_25);
        if (tmp_metaclass_value_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 198;

            goto try_except_handler_65;
        }
        goto condexpr_end_26;
        condexpr_false_26:;
        tmp_metaclass_value_13 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_13);
        condexpr_end_26:;
        condexpr_end_25:;
        CHECK_OBJECT(tmp_class_creation_13__bases);
        tmp_bases_value_13 = tmp_class_creation_13__bases;
        tmp_assign_source_175 = SELECT_METACLASS(tmp_metaclass_value_13, tmp_bases_value_13);
        Py_DECREF(tmp_metaclass_value_13);
        if (tmp_assign_source_175 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 198;

            goto try_except_handler_65;
        }
        assert(tmp_class_creation_13__metaclass == NULL);
        tmp_class_creation_13__metaclass = tmp_assign_source_175;
    }
    {
        bool tmp_condition_result_76;
        PyObject *tmp_key_value_39;
        PyObject *tmp_dict_arg_value_39;
        tmp_key_value_39 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
        tmp_dict_arg_value_39 = tmp_class_creation_13__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_39, tmp_key_value_39);
        assert(!(tmp_res == -1));
        tmp_condition_result_76 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_76 != false) {
            goto branch_yes_50;
        } else {
            goto branch_no_50;
        }
    }
    branch_yes_50:;
    CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_13__class_decl_dict;
    tmp_dictdel_key = mod_consts[87];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 198;

        goto try_except_handler_65;
    }
    branch_no_50:;
    {
        nuitka_bool tmp_condition_result_77;
        PyObject *tmp_expression_value_111;
        CHECK_OBJECT(tmp_class_creation_13__metaclass);
        tmp_expression_value_111 = tmp_class_creation_13__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_111, mod_consts[88]);
        tmp_condition_result_77 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_77 == NUITKA_BOOL_TRUE) {
            goto branch_yes_51;
        } else {
            goto branch_no_51;
        }
    }
    branch_yes_51:;
    {
        PyObject *tmp_assign_source_176;
        PyObject *tmp_called_value_80;
        PyObject *tmp_expression_value_112;
        PyObject *tmp_args_value_44;
        PyObject *tmp_tuple_element_70;
        PyObject *tmp_kwargs_value_44;
        CHECK_OBJECT(tmp_class_creation_13__metaclass);
        tmp_expression_value_112 = tmp_class_creation_13__metaclass;
        tmp_called_value_80 = LOOKUP_ATTRIBUTE(tmp_expression_value_112, mod_consts[88]);
        if (tmp_called_value_80 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 198;

            goto try_except_handler_65;
        }
        tmp_tuple_element_70 = mod_consts[157];
        tmp_args_value_44 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_44, 0, tmp_tuple_element_70);
        CHECK_OBJECT(tmp_class_creation_13__bases);
        tmp_tuple_element_70 = tmp_class_creation_13__bases;
        PyTuple_SET_ITEM0(tmp_args_value_44, 1, tmp_tuple_element_70);
        CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
        tmp_kwargs_value_44 = tmp_class_creation_13__class_decl_dict;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 198;
        tmp_assign_source_176 = CALL_FUNCTION(tmp_called_value_80, tmp_args_value_44, tmp_kwargs_value_44);
        Py_DECREF(tmp_called_value_80);
        Py_DECREF(tmp_args_value_44);
        if (tmp_assign_source_176 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 198;

            goto try_except_handler_65;
        }
        assert(tmp_class_creation_13__prepared == NULL);
        tmp_class_creation_13__prepared = tmp_assign_source_176;
    }
    {
        bool tmp_condition_result_78;
        PyObject *tmp_operand_value_13;
        PyObject *tmp_expression_value_113;
        CHECK_OBJECT(tmp_class_creation_13__prepared);
        tmp_expression_value_113 = tmp_class_creation_13__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_113, mod_consts[89]);
        tmp_operand_value_13 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_13);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 198;

            goto try_except_handler_65;
        }
        tmp_condition_result_78 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_78 != false) {
            goto branch_yes_52;
        } else {
            goto branch_no_52;
        }
    }
    branch_yes_52:;
    {
        PyObject *tmp_raise_type_13;
        PyObject *tmp_raise_value_13;
        PyObject *tmp_left_value_18;
        PyObject *tmp_right_value_18;
        PyObject *tmp_tuple_element_71;
        PyObject *tmp_getattr_target_13;
        PyObject *tmp_getattr_attr_13;
        PyObject *tmp_getattr_default_13;
        tmp_raise_type_13 = PyExc_TypeError;
        tmp_left_value_18 = mod_consts[90];
        CHECK_OBJECT(tmp_class_creation_13__metaclass);
        tmp_getattr_target_13 = tmp_class_creation_13__metaclass;
        tmp_getattr_attr_13 = mod_consts[91];
        tmp_getattr_default_13 = mod_consts[92];
        tmp_tuple_element_71 = BUILTIN_GETATTR(tmp_getattr_target_13, tmp_getattr_attr_13, tmp_getattr_default_13);
        if (tmp_tuple_element_71 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 198;

            goto try_except_handler_65;
        }
        tmp_right_value_18 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_114;
            PyObject *tmp_type_arg_26;
            PyTuple_SET_ITEM(tmp_right_value_18, 0, tmp_tuple_element_71);
            CHECK_OBJECT(tmp_class_creation_13__prepared);
            tmp_type_arg_26 = tmp_class_creation_13__prepared;
            tmp_expression_value_114 = BUILTIN_TYPE1(tmp_type_arg_26);
            assert(!(tmp_expression_value_114 == NULL));
            tmp_tuple_element_71 = LOOKUP_ATTRIBUTE(tmp_expression_value_114, mod_consts[91]);
            Py_DECREF(tmp_expression_value_114);
            if (tmp_tuple_element_71 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 198;

                goto tuple_build_exception_14;
            }
            PyTuple_SET_ITEM(tmp_right_value_18, 1, tmp_tuple_element_71);
        }
        goto tuple_build_noexception_14;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_14:;
        Py_DECREF(tmp_right_value_18);
        goto try_except_handler_65;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_14:;
        tmp_raise_value_13 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_18, tmp_right_value_18);
        Py_DECREF(tmp_right_value_18);
        if (tmp_raise_value_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 198;

            goto try_except_handler_65;
        }
        exception_type = tmp_raise_type_13;
        Py_INCREF(tmp_raise_type_13);
        exception_value = tmp_raise_value_13;
        exception_lineno = 198;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_65;
    }
    branch_no_52:;
    goto branch_end_51;
    branch_no_51:;
    {
        PyObject *tmp_assign_source_177;
        tmp_assign_source_177 = PyDict_New();
        assert(tmp_class_creation_13__prepared == NULL);
        tmp_class_creation_13__prepared = tmp_assign_source_177;
    }
    branch_end_51:;
    {
        PyObject *tmp_assign_source_178;
        PyObject *tmp_called_value_81;
        PyObject *tmp_called_value_82;
        PyObject *tmp_args_value_45;
        PyObject *tmp_tuple_element_72;
        PyObject *tmp_expression_value_115;
        PyObject *tmp_expression_value_116;
        PyObject *tmp_kwargs_value_45;
        PyObject *tmp_args_element_value_54;
        tmp_called_value_82 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_82 == NULL)) {
            tmp_called_value_82 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_82 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 197;

            goto try_except_handler_65;
        }
        tmp_expression_value_116 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_116 == NULL)) {
            tmp_expression_value_116 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_116 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 197;

            goto try_except_handler_65;
        }
        tmp_expression_value_115 = LOOKUP_ATTRIBUTE(tmp_expression_value_116, mod_consts[19]);
        if (tmp_expression_value_115 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 197;

            goto try_except_handler_65;
        }
        tmp_tuple_element_72 = LOOKUP_ATTRIBUTE(tmp_expression_value_115, mod_consts[158]);
        Py_DECREF(tmp_expression_value_115);
        if (tmp_tuple_element_72 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 197;

            goto try_except_handler_65;
        }
        tmp_args_value_45 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_45, 0, tmp_tuple_element_72);
        tmp_kwargs_value_45 = PyDict_Copy(mod_consts[159]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 197;
        tmp_called_value_81 = CALL_FUNCTION(tmp_called_value_82, tmp_args_value_45, tmp_kwargs_value_45);
        Py_DECREF(tmp_args_value_45);
        Py_DECREF(tmp_kwargs_value_45);
        if (tmp_called_value_81 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 197;

            goto try_except_handler_65;
        }
        {
            PyObject *tmp_set_locals_13;
            CHECK_OBJECT(tmp_class_creation_13__prepared);
            tmp_set_locals_13 = tmp_class_creation_13__prepared;
            locals_numba$core$typing$randomdecl$$$class__13_Numpy_hypergeometric_198 = tmp_set_locals_13;
            Py_INCREF(tmp_set_locals_13);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[93];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__13_Numpy_hypergeometric_198, mod_consts[94], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 198;

            goto try_except_handler_67;
        }
        tmp_dictset_value = mod_consts[157];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__13_Numpy_hypergeometric_198, mod_consts[96], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 198;

            goto try_except_handler_67;
        }
        if (isFrameUnusable(cache_frame_59361a5a5a540fb16f3d51eb4d287b66_25)) {
            Py_XDECREF(cache_frame_59361a5a5a540fb16f3d51eb4d287b66_25);

#if _DEBUG_REFCOUNTS
            if (cache_frame_59361a5a5a540fb16f3d51eb4d287b66_25 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_59361a5a5a540fb16f3d51eb4d287b66_25 = MAKE_FUNCTION_FRAME(codeobj_59361a5a5a540fb16f3d51eb4d287b66, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_59361a5a5a540fb16f3d51eb4d287b66_25->m_type_description == NULL);
        frame_59361a5a5a540fb16f3d51eb4d287b66_25 = cache_frame_59361a5a5a540fb16f3d51eb4d287b66_25;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_59361a5a5a540fb16f3d51eb4d287b66_25);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_59361a5a5a540fb16f3d51eb4d287b66_25) == 2); // Frame stack

        // Framed code:
        // Tried code:
        {
            PyObject *tmp_assign_source_179;
            PyObject *tmp_iter_arg_12;
            tmp_iter_arg_12 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__13_Numpy_hypergeometric_198, mod_consts[84]);

            if (tmp_iter_arg_12 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_iter_arg_12 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[84]);

                    if (unlikely(tmp_iter_arg_12 == NULL)) {
                        tmp_iter_arg_12 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[84]);
                    }

                    if (tmp_iter_arg_12 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 199;
                        type_description_2 = "o";
                        goto try_except_handler_68;
                    }
                    Py_INCREF(tmp_iter_arg_12);
                } else {
                    goto try_except_handler_68;
                }
            }

            tmp_assign_source_179 = MAKE_ITERATOR(tmp_iter_arg_12);
            Py_DECREF(tmp_iter_arg_12);
            if (tmp_assign_source_179 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 199;
                type_description_2 = "o";
                goto try_except_handler_68;
            }
            assert(tmp_Numpy_hypergeometric$listcomp_1__$0 == NULL);
            tmp_Numpy_hypergeometric$listcomp_1__$0 = tmp_assign_source_179;
        }
        {
            PyObject *tmp_assign_source_180;
            tmp_assign_source_180 = PyList_New(0);
            assert(tmp_Numpy_hypergeometric$listcomp_1__contraction == NULL);
            tmp_Numpy_hypergeometric$listcomp_1__contraction = tmp_assign_source_180;
        }
        if (isFrameUnusable(cache_frame_8ba3772525602c4ac3179c3965d51530_26)) {
            Py_XDECREF(cache_frame_8ba3772525602c4ac3179c3965d51530_26);

#if _DEBUG_REFCOUNTS
            if (cache_frame_8ba3772525602c4ac3179c3965d51530_26 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_8ba3772525602c4ac3179c3965d51530_26 = MAKE_FUNCTION_FRAME(codeobj_8ba3772525602c4ac3179c3965d51530, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_8ba3772525602c4ac3179c3965d51530_26->m_type_description == NULL);
        frame_8ba3772525602c4ac3179c3965d51530_26 = cache_frame_8ba3772525602c4ac3179c3965d51530_26;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_8ba3772525602c4ac3179c3965d51530_26);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_8ba3772525602c4ac3179c3965d51530_26) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_12:;
        {
            PyObject *tmp_next_source_12;
            PyObject *tmp_assign_source_181;
            CHECK_OBJECT(tmp_Numpy_hypergeometric$listcomp_1__$0);
            tmp_next_source_12 = tmp_Numpy_hypergeometric$listcomp_1__$0;
            tmp_assign_source_181 = ITERATOR_NEXT(tmp_next_source_12);
            if (tmp_assign_source_181 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_12;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_3 = "o";
                    exception_lineno = 199;
                    goto try_except_handler_69;
                }
            }

            {
                PyObject *old = tmp_Numpy_hypergeometric$listcomp_1__iter_value_0;
                tmp_Numpy_hypergeometric$listcomp_1__iter_value_0 = tmp_assign_source_181;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_182;
            CHECK_OBJECT(tmp_Numpy_hypergeometric$listcomp_1__iter_value_0);
            tmp_assign_source_182 = tmp_Numpy_hypergeometric$listcomp_1__iter_value_0;
            {
                PyObject *old = outline_24_var_tp;
                outline_24_var_tp = tmp_assign_source_182;
                Py_INCREF(outline_24_var_tp);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_12;
            PyObject *tmp_append_value_12;
            PyObject *tmp_called_value_83;
            PyObject *tmp_args_element_value_55;
            PyObject *tmp_args_element_value_56;
            PyObject *tmp_args_element_value_57;
            PyObject *tmp_args_element_value_58;
            CHECK_OBJECT(tmp_Numpy_hypergeometric$listcomp_1__contraction);
            tmp_append_list_12 = tmp_Numpy_hypergeometric$listcomp_1__contraction;
            tmp_called_value_83 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[25]);

            if (unlikely(tmp_called_value_83 == NULL)) {
                tmp_called_value_83 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[25]);
            }

            if (tmp_called_value_83 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 199;
                type_description_3 = "o";
                goto try_except_handler_69;
            }
            CHECK_OBJECT(outline_24_var_tp);
            tmp_args_element_value_55 = outline_24_var_tp;
            CHECK_OBJECT(outline_24_var_tp);
            tmp_args_element_value_56 = outline_24_var_tp;
            CHECK_OBJECT(outline_24_var_tp);
            tmp_args_element_value_57 = outline_24_var_tp;
            CHECK_OBJECT(outline_24_var_tp);
            tmp_args_element_value_58 = outline_24_var_tp;
            frame_8ba3772525602c4ac3179c3965d51530_26->m_frame.f_lineno = 199;
            {
                PyObject *call_args[] = {tmp_args_element_value_55, tmp_args_element_value_56, tmp_args_element_value_57, tmp_args_element_value_58};
                tmp_append_value_12 = CALL_FUNCTION_WITH_ARGS4(tmp_called_value_83, call_args);
            }

            if (tmp_append_value_12 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 199;
                type_description_3 = "o";
                goto try_except_handler_69;
            }
            assert(PyList_Check(tmp_append_list_12));
            tmp_result = LIST_APPEND1(tmp_append_list_12, tmp_append_value_12);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 199;
                type_description_3 = "o";
                goto try_except_handler_69;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 199;
            type_description_3 = "o";
            goto try_except_handler_69;
        }
        goto loop_start_12;
        loop_end_12:;
        CHECK_OBJECT(tmp_Numpy_hypergeometric$listcomp_1__contraction);
        tmp_dictset_value = tmp_Numpy_hypergeometric$listcomp_1__contraction;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_69;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_69:;
        CHECK_OBJECT(tmp_Numpy_hypergeometric$listcomp_1__$0);
        Py_DECREF(tmp_Numpy_hypergeometric$listcomp_1__$0);
        tmp_Numpy_hypergeometric$listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_Numpy_hypergeometric$listcomp_1__contraction);
        Py_DECREF(tmp_Numpy_hypergeometric$listcomp_1__contraction);
        tmp_Numpy_hypergeometric$listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_Numpy_hypergeometric$listcomp_1__iter_value_0);
        tmp_Numpy_hypergeometric$listcomp_1__iter_value_0 = NULL;
        goto frame_return_exit_12;
        // Exception handler code:
        try_except_handler_69:;
        exception_keeper_type_65 = exception_type;
        exception_keeper_value_65 = exception_value;
        exception_keeper_tb_65 = exception_tb;
        exception_keeper_lineno_65 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Numpy_hypergeometric$listcomp_1__$0);
        Py_DECREF(tmp_Numpy_hypergeometric$listcomp_1__$0);
        tmp_Numpy_hypergeometric$listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_Numpy_hypergeometric$listcomp_1__contraction);
        Py_DECREF(tmp_Numpy_hypergeometric$listcomp_1__contraction);
        tmp_Numpy_hypergeometric$listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_Numpy_hypergeometric$listcomp_1__iter_value_0);
        tmp_Numpy_hypergeometric$listcomp_1__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_65;
        exception_value = exception_keeper_value_65;
        exception_tb = exception_keeper_tb_65;
        exception_lineno = exception_keeper_lineno_65;

        goto frame_exception_exit_26;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_8ba3772525602c4ac3179c3965d51530_26);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_24;

        frame_return_exit_12:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_8ba3772525602c4ac3179c3965d51530_26);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_68;

        frame_exception_exit_26:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_8ba3772525602c4ac3179c3965d51530_26);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_8ba3772525602c4ac3179c3965d51530_26, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_8ba3772525602c4ac3179c3965d51530_26->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_8ba3772525602c4ac3179c3965d51530_26, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_8ba3772525602c4ac3179c3965d51530_26,
            type_description_3,
            outline_24_var_tp
        );


        // Release cached frame if used for exception.
        if (frame_8ba3772525602c4ac3179c3965d51530_26 == cache_frame_8ba3772525602c4ac3179c3965d51530_26) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_8ba3772525602c4ac3179c3965d51530_26);
            cache_frame_8ba3772525602c4ac3179c3965d51530_26 = NULL;
        }

        assertFrameObject(frame_8ba3772525602c4ac3179c3965d51530_26);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_25;

        frame_no_exception_24:;
        goto skip_nested_handling_24;
        nested_frame_exit_25:;
        type_description_2 = "o";
        goto try_except_handler_68;
        skip_nested_handling_24:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_68:;
        Py_XDECREF(outline_24_var_tp);
        outline_24_var_tp = NULL;
        goto outline_result_25;
        // Exception handler code:
        try_except_handler_68:;
        exception_keeper_type_66 = exception_type;
        exception_keeper_value_66 = exception_value;
        exception_keeper_tb_66 = exception_tb;
        exception_keeper_lineno_66 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_24_var_tp);
        outline_24_var_tp = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_66;
        exception_value = exception_keeper_value_66;
        exception_tb = exception_keeper_tb_66;
        exception_lineno = exception_keeper_lineno_66;

        goto outline_exception_25;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_25:;
        exception_lineno = 199;
        goto frame_exception_exit_25;
        outline_result_25:;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__13_Numpy_hypergeometric_198, mod_consts[30], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 199;
            type_description_2 = "o";
            goto frame_exception_exit_25;
        }


        tmp_dictset_value = MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__10_generic();

        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__13_Numpy_hypergeometric_198, mod_consts[110], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 201;
            type_description_2 = "o";
            goto frame_exception_exit_25;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_59361a5a5a540fb16f3d51eb4d287b66_25);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_25;

        frame_exception_exit_25:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_59361a5a5a540fb16f3d51eb4d287b66_25);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_59361a5a5a540fb16f3d51eb4d287b66_25, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_59361a5a5a540fb16f3d51eb4d287b66_25->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_59361a5a5a540fb16f3d51eb4d287b66_25, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_59361a5a5a540fb16f3d51eb4d287b66_25,
            type_description_2,
            outline_23_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_59361a5a5a540fb16f3d51eb4d287b66_25 == cache_frame_59361a5a5a540fb16f3d51eb4d287b66_25) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_59361a5a5a540fb16f3d51eb4d287b66_25);
            cache_frame_59361a5a5a540fb16f3d51eb4d287b66_25 = NULL;
        }

        assertFrameObject(frame_59361a5a5a540fb16f3d51eb4d287b66_25);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_24;

        frame_no_exception_25:;
        goto skip_nested_handling_25;
        nested_frame_exit_24:;

        goto try_except_handler_67;
        skip_nested_handling_25:;
        {
            nuitka_bool tmp_condition_result_79;
            PyObject *tmp_cmp_expr_left_14;
            PyObject *tmp_cmp_expr_right_14;
            CHECK_OBJECT(tmp_class_creation_13__bases);
            tmp_cmp_expr_left_14 = tmp_class_creation_13__bases;
            CHECK_OBJECT(tmp_class_creation_13__bases_orig);
            tmp_cmp_expr_right_14 = tmp_class_creation_13__bases_orig;
            tmp_condition_result_79 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_14, tmp_cmp_expr_right_14);
            if (tmp_condition_result_79 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 198;

                goto try_except_handler_67;
            }
            if (tmp_condition_result_79 == NUITKA_BOOL_TRUE) {
                goto branch_yes_53;
            } else {
                goto branch_no_53;
            }
            assert(tmp_condition_result_79 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_53:;
        CHECK_OBJECT(tmp_class_creation_13__bases_orig);
        tmp_dictset_value = tmp_class_creation_13__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__13_Numpy_hypergeometric_198, mod_consts[98], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 198;

            goto try_except_handler_67;
        }
        branch_no_53:;
        {
            PyObject *tmp_assign_source_183;
            PyObject *tmp_called_value_84;
            PyObject *tmp_args_value_46;
            PyObject *tmp_tuple_element_73;
            PyObject *tmp_kwargs_value_46;
            CHECK_OBJECT(tmp_class_creation_13__metaclass);
            tmp_called_value_84 = tmp_class_creation_13__metaclass;
            tmp_tuple_element_73 = mod_consts[157];
            tmp_args_value_46 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_46, 0, tmp_tuple_element_73);
            CHECK_OBJECT(tmp_class_creation_13__bases);
            tmp_tuple_element_73 = tmp_class_creation_13__bases;
            PyTuple_SET_ITEM0(tmp_args_value_46, 1, tmp_tuple_element_73);
            tmp_tuple_element_73 = locals_numba$core$typing$randomdecl$$$class__13_Numpy_hypergeometric_198;
            PyTuple_SET_ITEM0(tmp_args_value_46, 2, tmp_tuple_element_73);
            CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
            tmp_kwargs_value_46 = tmp_class_creation_13__class_decl_dict;
            frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 198;
            tmp_assign_source_183 = CALL_FUNCTION(tmp_called_value_84, tmp_args_value_46, tmp_kwargs_value_46);
            Py_DECREF(tmp_args_value_46);
            if (tmp_assign_source_183 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 198;

                goto try_except_handler_67;
            }
            assert(outline_23_var___class__ == NULL);
            outline_23_var___class__ = tmp_assign_source_183;
        }
        CHECK_OBJECT(outline_23_var___class__);
        tmp_args_element_value_54 = outline_23_var___class__;
        Py_INCREF(tmp_args_element_value_54);
        goto try_return_handler_67;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_67:;
        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__13_Numpy_hypergeometric_198);
        locals_numba$core$typing$randomdecl$$$class__13_Numpy_hypergeometric_198 = NULL;
        goto try_return_handler_66;
        // Exception handler code:
        try_except_handler_67:;
        exception_keeper_type_67 = exception_type;
        exception_keeper_value_67 = exception_value;
        exception_keeper_tb_67 = exception_tb;
        exception_keeper_lineno_67 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__13_Numpy_hypergeometric_198);
        locals_numba$core$typing$randomdecl$$$class__13_Numpy_hypergeometric_198 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_67;
        exception_value = exception_keeper_value_67;
        exception_tb = exception_keeper_tb_67;
        exception_lineno = exception_keeper_lineno_67;

        goto try_except_handler_66;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_66:;
        CHECK_OBJECT(outline_23_var___class__);
        Py_DECREF(outline_23_var___class__);
        outline_23_var___class__ = NULL;
        goto outline_result_24;
        // Exception handler code:
        try_except_handler_66:;
        exception_keeper_type_68 = exception_type;
        exception_keeper_value_68 = exception_value;
        exception_keeper_tb_68 = exception_tb;
        exception_keeper_lineno_68 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_68;
        exception_value = exception_keeper_value_68;
        exception_tb = exception_keeper_tb_68;
        exception_lineno = exception_keeper_lineno_68;

        goto outline_exception_24;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_24:;
        exception_lineno = 198;
        goto try_except_handler_65;
        outline_result_24:;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 197;
        tmp_assign_source_178 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_81, tmp_args_element_value_54);
        Py_DECREF(tmp_called_value_81);
        Py_DECREF(tmp_args_element_value_54);
        if (tmp_assign_source_178 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 197;

            goto try_except_handler_65;
        }
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[157], tmp_assign_source_178);
    }
    goto try_end_19;
    // Exception handler code:
    try_except_handler_65:;
    exception_keeper_type_69 = exception_type;
    exception_keeper_value_69 = exception_value;
    exception_keeper_tb_69 = exception_tb;
    exception_keeper_lineno_69 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_13__bases_orig);
    tmp_class_creation_13__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_13__bases);
    tmp_class_creation_13__bases = NULL;
    Py_XDECREF(tmp_class_creation_13__class_decl_dict);
    tmp_class_creation_13__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_13__metaclass);
    tmp_class_creation_13__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_13__prepared);
    tmp_class_creation_13__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_69;
    exception_value = exception_keeper_value_69;
    exception_tb = exception_keeper_tb_69;
    exception_lineno = exception_keeper_lineno_69;

    goto frame_exception_exit_1;
    // End of try:
    try_end_19:;
    CHECK_OBJECT(tmp_class_creation_13__bases_orig);
    Py_DECREF(tmp_class_creation_13__bases_orig);
    tmp_class_creation_13__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_13__bases);
    Py_DECREF(tmp_class_creation_13__bases);
    tmp_class_creation_13__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
    Py_DECREF(tmp_class_creation_13__class_decl_dict);
    tmp_class_creation_13__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_13__metaclass);
    Py_DECREF(tmp_class_creation_13__metaclass);
    tmp_class_creation_13__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_13__prepared);
    Py_DECREF(tmp_class_creation_13__prepared);
    tmp_class_creation_13__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_184;
        PyObject *tmp_tuple_element_74;
        tmp_tuple_element_74 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[99]);

        if (unlikely(tmp_tuple_element_74 == NULL)) {
            tmp_tuple_element_74 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[99]);
        }

        if (tmp_tuple_element_74 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 210;

            goto try_except_handler_70;
        }
        tmp_assign_source_184 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_184, 0, tmp_tuple_element_74);
        assert(tmp_class_creation_14__bases_orig == NULL);
        tmp_class_creation_14__bases_orig = tmp_assign_source_184;
    }
    {
        PyObject *tmp_assign_source_185;
        PyObject *tmp_dircall_arg1_14;
        CHECK_OBJECT(tmp_class_creation_14__bases_orig);
        tmp_dircall_arg1_14 = tmp_class_creation_14__bases_orig;
        Py_INCREF(tmp_dircall_arg1_14);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_14};
            tmp_assign_source_185 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_185 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 210;

            goto try_except_handler_70;
        }
        assert(tmp_class_creation_14__bases == NULL);
        tmp_class_creation_14__bases = tmp_assign_source_185;
    }
    {
        PyObject *tmp_assign_source_186;
        tmp_assign_source_186 = PyDict_New();
        assert(tmp_class_creation_14__class_decl_dict == NULL);
        tmp_class_creation_14__class_decl_dict = tmp_assign_source_186;
    }
    {
        PyObject *tmp_assign_source_187;
        PyObject *tmp_metaclass_value_14;
        bool tmp_condition_result_80;
        PyObject *tmp_key_value_40;
        PyObject *tmp_dict_arg_value_40;
        PyObject *tmp_dict_arg_value_41;
        PyObject *tmp_key_value_41;
        nuitka_bool tmp_condition_result_81;
        int tmp_truth_name_14;
        PyObject *tmp_type_arg_27;
        PyObject *tmp_expression_value_117;
        PyObject *tmp_subscript_value_14;
        PyObject *tmp_bases_value_14;
        tmp_key_value_40 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
        tmp_dict_arg_value_40 = tmp_class_creation_14__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_40, tmp_key_value_40);
        assert(!(tmp_res == -1));
        tmp_condition_result_80 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_80 != false) {
            goto condexpr_true_27;
        } else {
            goto condexpr_false_27;
        }
        condexpr_true_27:;
        CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
        tmp_dict_arg_value_41 = tmp_class_creation_14__class_decl_dict;
        tmp_key_value_41 = mod_consts[87];
        tmp_metaclass_value_14 = DICT_GET_ITEM0(tmp_dict_arg_value_41, tmp_key_value_41);
        if (tmp_metaclass_value_14 == NULL) {
            tmp_metaclass_value_14 = Py_None;
        }
        assert(!(tmp_metaclass_value_14 == NULL));
        Py_INCREF(tmp_metaclass_value_14);
        goto condexpr_end_27;
        condexpr_false_27:;
        CHECK_OBJECT(tmp_class_creation_14__bases);
        tmp_truth_name_14 = CHECK_IF_TRUE(tmp_class_creation_14__bases);
        if (tmp_truth_name_14 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 210;

            goto try_except_handler_70;
        }
        tmp_condition_result_81 = tmp_truth_name_14 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_81 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_28;
        } else {
            goto condexpr_false_28;
        }
        condexpr_true_28:;
        CHECK_OBJECT(tmp_class_creation_14__bases);
        tmp_expression_value_117 = tmp_class_creation_14__bases;
        tmp_subscript_value_14 = mod_consts[13];
        tmp_type_arg_27 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_117, tmp_subscript_value_14, 0);
        if (tmp_type_arg_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 210;

            goto try_except_handler_70;
        }
        tmp_metaclass_value_14 = BUILTIN_TYPE1(tmp_type_arg_27);
        Py_DECREF(tmp_type_arg_27);
        if (tmp_metaclass_value_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 210;

            goto try_except_handler_70;
        }
        goto condexpr_end_28;
        condexpr_false_28:;
        tmp_metaclass_value_14 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_14);
        condexpr_end_28:;
        condexpr_end_27:;
        CHECK_OBJECT(tmp_class_creation_14__bases);
        tmp_bases_value_14 = tmp_class_creation_14__bases;
        tmp_assign_source_187 = SELECT_METACLASS(tmp_metaclass_value_14, tmp_bases_value_14);
        Py_DECREF(tmp_metaclass_value_14);
        if (tmp_assign_source_187 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 210;

            goto try_except_handler_70;
        }
        assert(tmp_class_creation_14__metaclass == NULL);
        tmp_class_creation_14__metaclass = tmp_assign_source_187;
    }
    {
        bool tmp_condition_result_82;
        PyObject *tmp_key_value_42;
        PyObject *tmp_dict_arg_value_42;
        tmp_key_value_42 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
        tmp_dict_arg_value_42 = tmp_class_creation_14__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_42, tmp_key_value_42);
        assert(!(tmp_res == -1));
        tmp_condition_result_82 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_82 != false) {
            goto branch_yes_54;
        } else {
            goto branch_no_54;
        }
    }
    branch_yes_54:;
    CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_14__class_decl_dict;
    tmp_dictdel_key = mod_consts[87];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 210;

        goto try_except_handler_70;
    }
    branch_no_54:;
    {
        nuitka_bool tmp_condition_result_83;
        PyObject *tmp_expression_value_118;
        CHECK_OBJECT(tmp_class_creation_14__metaclass);
        tmp_expression_value_118 = tmp_class_creation_14__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_118, mod_consts[88]);
        tmp_condition_result_83 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_83 == NUITKA_BOOL_TRUE) {
            goto branch_yes_55;
        } else {
            goto branch_no_55;
        }
    }
    branch_yes_55:;
    {
        PyObject *tmp_assign_source_188;
        PyObject *tmp_called_value_85;
        PyObject *tmp_expression_value_119;
        PyObject *tmp_args_value_47;
        PyObject *tmp_tuple_element_75;
        PyObject *tmp_kwargs_value_47;
        CHECK_OBJECT(tmp_class_creation_14__metaclass);
        tmp_expression_value_119 = tmp_class_creation_14__metaclass;
        tmp_called_value_85 = LOOKUP_ATTRIBUTE(tmp_expression_value_119, mod_consts[88]);
        if (tmp_called_value_85 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 210;

            goto try_except_handler_70;
        }
        tmp_tuple_element_75 = mod_consts[161];
        tmp_args_value_47 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_47, 0, tmp_tuple_element_75);
        CHECK_OBJECT(tmp_class_creation_14__bases);
        tmp_tuple_element_75 = tmp_class_creation_14__bases;
        PyTuple_SET_ITEM0(tmp_args_value_47, 1, tmp_tuple_element_75);
        CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
        tmp_kwargs_value_47 = tmp_class_creation_14__class_decl_dict;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 210;
        tmp_assign_source_188 = CALL_FUNCTION(tmp_called_value_85, tmp_args_value_47, tmp_kwargs_value_47);
        Py_DECREF(tmp_called_value_85);
        Py_DECREF(tmp_args_value_47);
        if (tmp_assign_source_188 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 210;

            goto try_except_handler_70;
        }
        assert(tmp_class_creation_14__prepared == NULL);
        tmp_class_creation_14__prepared = tmp_assign_source_188;
    }
    {
        bool tmp_condition_result_84;
        PyObject *tmp_operand_value_14;
        PyObject *tmp_expression_value_120;
        CHECK_OBJECT(tmp_class_creation_14__prepared);
        tmp_expression_value_120 = tmp_class_creation_14__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_120, mod_consts[89]);
        tmp_operand_value_14 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_14);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 210;

            goto try_except_handler_70;
        }
        tmp_condition_result_84 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_84 != false) {
            goto branch_yes_56;
        } else {
            goto branch_no_56;
        }
    }
    branch_yes_56:;
    {
        PyObject *tmp_raise_type_14;
        PyObject *tmp_raise_value_14;
        PyObject *tmp_left_value_19;
        PyObject *tmp_right_value_19;
        PyObject *tmp_tuple_element_76;
        PyObject *tmp_getattr_target_14;
        PyObject *tmp_getattr_attr_14;
        PyObject *tmp_getattr_default_14;
        tmp_raise_type_14 = PyExc_TypeError;
        tmp_left_value_19 = mod_consts[90];
        CHECK_OBJECT(tmp_class_creation_14__metaclass);
        tmp_getattr_target_14 = tmp_class_creation_14__metaclass;
        tmp_getattr_attr_14 = mod_consts[91];
        tmp_getattr_default_14 = mod_consts[92];
        tmp_tuple_element_76 = BUILTIN_GETATTR(tmp_getattr_target_14, tmp_getattr_attr_14, tmp_getattr_default_14);
        if (tmp_tuple_element_76 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 210;

            goto try_except_handler_70;
        }
        tmp_right_value_19 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_121;
            PyObject *tmp_type_arg_28;
            PyTuple_SET_ITEM(tmp_right_value_19, 0, tmp_tuple_element_76);
            CHECK_OBJECT(tmp_class_creation_14__prepared);
            tmp_type_arg_28 = tmp_class_creation_14__prepared;
            tmp_expression_value_121 = BUILTIN_TYPE1(tmp_type_arg_28);
            assert(!(tmp_expression_value_121 == NULL));
            tmp_tuple_element_76 = LOOKUP_ATTRIBUTE(tmp_expression_value_121, mod_consts[91]);
            Py_DECREF(tmp_expression_value_121);
            if (tmp_tuple_element_76 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 210;

                goto tuple_build_exception_15;
            }
            PyTuple_SET_ITEM(tmp_right_value_19, 1, tmp_tuple_element_76);
        }
        goto tuple_build_noexception_15;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_15:;
        Py_DECREF(tmp_right_value_19);
        goto try_except_handler_70;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_15:;
        tmp_raise_value_14 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_19, tmp_right_value_19);
        Py_DECREF(tmp_right_value_19);
        if (tmp_raise_value_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 210;

            goto try_except_handler_70;
        }
        exception_type = tmp_raise_type_14;
        Py_INCREF(tmp_raise_type_14);
        exception_value = tmp_raise_value_14;
        exception_lineno = 210;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_70;
    }
    branch_no_56:;
    goto branch_end_55;
    branch_no_55:;
    {
        PyObject *tmp_assign_source_189;
        tmp_assign_source_189 = PyDict_New();
        assert(tmp_class_creation_14__prepared == NULL);
        tmp_class_creation_14__prepared = tmp_assign_source_189;
    }
    branch_end_55:;
    {
        PyObject *tmp_assign_source_190;
        PyObject *tmp_called_value_86;
        PyObject *tmp_called_value_87;
        PyObject *tmp_args_value_48;
        PyObject *tmp_tuple_element_77;
        PyObject *tmp_expression_value_122;
        PyObject *tmp_expression_value_123;
        PyObject *tmp_kwargs_value_48;
        PyObject *tmp_args_element_value_59;
        PyObject *tmp_called_value_88;
        PyObject *tmp_called_value_89;
        PyObject *tmp_args_value_49;
        PyObject *tmp_tuple_element_78;
        PyObject *tmp_expression_value_124;
        PyObject *tmp_expression_value_125;
        PyObject *tmp_kwargs_value_49;
        PyObject *tmp_args_element_value_60;
        PyObject *tmp_called_value_90;
        PyObject *tmp_called_value_91;
        PyObject *tmp_args_value_50;
        PyObject *tmp_tuple_element_79;
        PyObject *tmp_expression_value_126;
        PyObject *tmp_expression_value_127;
        PyObject *tmp_kwargs_value_50;
        PyObject *tmp_args_element_value_61;
        PyObject *tmp_called_value_92;
        PyObject *tmp_called_value_93;
        PyObject *tmp_args_value_51;
        PyObject *tmp_tuple_element_80;
        PyObject *tmp_expression_value_128;
        PyObject *tmp_expression_value_129;
        PyObject *tmp_kwargs_value_51;
        PyObject *tmp_args_element_value_62;
        tmp_called_value_87 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_87 == NULL)) {
            tmp_called_value_87 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_87 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 206;

            goto try_except_handler_70;
        }
        tmp_expression_value_123 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_123 == NULL)) {
            tmp_expression_value_123 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_123 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 206;

            goto try_except_handler_70;
        }
        tmp_expression_value_122 = LOOKUP_ATTRIBUTE(tmp_expression_value_123, mod_consts[19]);
        if (tmp_expression_value_122 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 206;

            goto try_except_handler_70;
        }
        tmp_tuple_element_77 = LOOKUP_ATTRIBUTE(tmp_expression_value_122, mod_consts[162]);
        Py_DECREF(tmp_expression_value_122);
        if (tmp_tuple_element_77 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 206;

            goto try_except_handler_70;
        }
        tmp_args_value_48 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_48, 0, tmp_tuple_element_77);
        tmp_kwargs_value_48 = PyDict_Copy(mod_consts[163]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 206;
        tmp_called_value_86 = CALL_FUNCTION(tmp_called_value_87, tmp_args_value_48, tmp_kwargs_value_48);
        Py_DECREF(tmp_args_value_48);
        Py_DECREF(tmp_kwargs_value_48);
        if (tmp_called_value_86 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 206;

            goto try_except_handler_70;
        }
        tmp_called_value_89 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_89 == NULL)) {
            tmp_called_value_89 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_89 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_86);

            exception_lineno = 207;

            goto try_except_handler_70;
        }
        tmp_expression_value_125 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_125 == NULL)) {
            tmp_expression_value_125 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_125 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_86);

            exception_lineno = 207;

            goto try_except_handler_70;
        }
        tmp_expression_value_124 = LOOKUP_ATTRIBUTE(tmp_expression_value_125, mod_consts[19]);
        if (tmp_expression_value_124 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_86);

            exception_lineno = 207;

            goto try_except_handler_70;
        }
        tmp_tuple_element_78 = LOOKUP_ATTRIBUTE(tmp_expression_value_124, mod_consts[164]);
        Py_DECREF(tmp_expression_value_124);
        if (tmp_tuple_element_78 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_86);

            exception_lineno = 207;

            goto try_except_handler_70;
        }
        tmp_args_value_49 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_49, 0, tmp_tuple_element_78);
        tmp_kwargs_value_49 = PyDict_Copy(mod_consts[165]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 207;
        tmp_called_value_88 = CALL_FUNCTION(tmp_called_value_89, tmp_args_value_49, tmp_kwargs_value_49);
        Py_DECREF(tmp_args_value_49);
        Py_DECREF(tmp_kwargs_value_49);
        if (tmp_called_value_88 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_86);

            exception_lineno = 207;

            goto try_except_handler_70;
        }
        tmp_called_value_91 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_91 == NULL)) {
            tmp_called_value_91 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_91 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_86);
            Py_DECREF(tmp_called_value_88);

            exception_lineno = 208;

            goto try_except_handler_70;
        }
        tmp_expression_value_127 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_127 == NULL)) {
            tmp_expression_value_127 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_127 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_86);
            Py_DECREF(tmp_called_value_88);

            exception_lineno = 208;

            goto try_except_handler_70;
        }
        tmp_expression_value_126 = LOOKUP_ATTRIBUTE(tmp_expression_value_127, mod_consts[19]);
        if (tmp_expression_value_126 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_86);
            Py_DECREF(tmp_called_value_88);

            exception_lineno = 208;

            goto try_except_handler_70;
        }
        tmp_tuple_element_79 = LOOKUP_ATTRIBUTE(tmp_expression_value_126, mod_consts[166]);
        Py_DECREF(tmp_expression_value_126);
        if (tmp_tuple_element_79 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_86);
            Py_DECREF(tmp_called_value_88);

            exception_lineno = 208;

            goto try_except_handler_70;
        }
        tmp_args_value_50 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_50, 0, tmp_tuple_element_79);
        tmp_kwargs_value_50 = PyDict_Copy(mod_consts[167]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 208;
        tmp_called_value_90 = CALL_FUNCTION(tmp_called_value_91, tmp_args_value_50, tmp_kwargs_value_50);
        Py_DECREF(tmp_args_value_50);
        Py_DECREF(tmp_kwargs_value_50);
        if (tmp_called_value_90 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_86);
            Py_DECREF(tmp_called_value_88);

            exception_lineno = 208;

            goto try_except_handler_70;
        }
        tmp_called_value_93 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_93 == NULL)) {
            tmp_called_value_93 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_93 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_86);
            Py_DECREF(tmp_called_value_88);
            Py_DECREF(tmp_called_value_90);

            exception_lineno = 209;

            goto try_except_handler_70;
        }
        tmp_expression_value_129 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_129 == NULL)) {
            tmp_expression_value_129 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_129 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_86);
            Py_DECREF(tmp_called_value_88);
            Py_DECREF(tmp_called_value_90);

            exception_lineno = 209;

            goto try_except_handler_70;
        }
        tmp_expression_value_128 = LOOKUP_ATTRIBUTE(tmp_expression_value_129, mod_consts[19]);
        if (tmp_expression_value_128 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_86);
            Py_DECREF(tmp_called_value_88);
            Py_DECREF(tmp_called_value_90);

            exception_lineno = 209;

            goto try_except_handler_70;
        }
        tmp_tuple_element_80 = LOOKUP_ATTRIBUTE(tmp_expression_value_128, mod_consts[168]);
        Py_DECREF(tmp_expression_value_128);
        if (tmp_tuple_element_80 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_86);
            Py_DECREF(tmp_called_value_88);
            Py_DECREF(tmp_called_value_90);

            exception_lineno = 209;

            goto try_except_handler_70;
        }
        tmp_args_value_51 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_51, 0, tmp_tuple_element_80);
        tmp_kwargs_value_51 = PyDict_Copy(mod_consts[169]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 209;
        tmp_called_value_92 = CALL_FUNCTION(tmp_called_value_93, tmp_args_value_51, tmp_kwargs_value_51);
        Py_DECREF(tmp_args_value_51);
        Py_DECREF(tmp_kwargs_value_51);
        if (tmp_called_value_92 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_86);
            Py_DECREF(tmp_called_value_88);
            Py_DECREF(tmp_called_value_90);

            exception_lineno = 209;

            goto try_except_handler_70;
        }
        {
            PyObject *tmp_set_locals_14;
            CHECK_OBJECT(tmp_class_creation_14__prepared);
            tmp_set_locals_14 = tmp_class_creation_14__prepared;
            locals_numba$core$typing$randomdecl$$$class__14_Numpy_normal_210 = tmp_set_locals_14;
            Py_INCREF(tmp_set_locals_14);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[93];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__14_Numpy_normal_210, mod_consts[94], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 210;

            goto try_except_handler_72;
        }
        tmp_dictset_value = mod_consts[161];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__14_Numpy_normal_210, mod_consts[96], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 210;

            goto try_except_handler_72;
        }
        if (isFrameUnusable(cache_frame_783a1d78defebe6f43f5fe6abd4e6ce0_27)) {
            Py_XDECREF(cache_frame_783a1d78defebe6f43f5fe6abd4e6ce0_27);

#if _DEBUG_REFCOUNTS
            if (cache_frame_783a1d78defebe6f43f5fe6abd4e6ce0_27 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_783a1d78defebe6f43f5fe6abd4e6ce0_27 = MAKE_FUNCTION_FRAME(codeobj_783a1d78defebe6f43f5fe6abd4e6ce0, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_783a1d78defebe6f43f5fe6abd4e6ce0_27->m_type_description == NULL);
        frame_783a1d78defebe6f43f5fe6abd4e6ce0_27 = cache_frame_783a1d78defebe6f43f5fe6abd4e6ce0_27;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_783a1d78defebe6f43f5fe6abd4e6ce0_27);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_783a1d78defebe6f43f5fe6abd4e6ce0_27) == 2); // Frame stack

        // Framed code:
        // Tried code:
        {
            PyObject *tmp_assign_source_191;
            PyObject *tmp_iter_arg_13;
            tmp_iter_arg_13 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__14_Numpy_normal_210, mod_consts[86]);

            if (tmp_iter_arg_13 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_iter_arg_13 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[86]);

                    if (unlikely(tmp_iter_arg_13 == NULL)) {
                        tmp_iter_arg_13 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[86]);
                    }

                    if (tmp_iter_arg_13 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 211;
                        type_description_2 = "o";
                        goto try_except_handler_73;
                    }
                    Py_INCREF(tmp_iter_arg_13);
                } else {
                    goto try_except_handler_73;
                }
            }

            tmp_assign_source_191 = MAKE_ITERATOR(tmp_iter_arg_13);
            Py_DECREF(tmp_iter_arg_13);
            if (tmp_assign_source_191 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 211;
                type_description_2 = "o";
                goto try_except_handler_73;
            }
            assert(tmp_Numpy_normal$listcomp_1__$0 == NULL);
            tmp_Numpy_normal$listcomp_1__$0 = tmp_assign_source_191;
        }
        {
            PyObject *tmp_assign_source_192;
            tmp_assign_source_192 = PyList_New(0);
            assert(tmp_Numpy_normal$listcomp_1__contraction == NULL);
            tmp_Numpy_normal$listcomp_1__contraction = tmp_assign_source_192;
        }
        if (isFrameUnusable(cache_frame_b0f1b2944b6de380dfdde09eb0cb73b4_28)) {
            Py_XDECREF(cache_frame_b0f1b2944b6de380dfdde09eb0cb73b4_28);

#if _DEBUG_REFCOUNTS
            if (cache_frame_b0f1b2944b6de380dfdde09eb0cb73b4_28 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_b0f1b2944b6de380dfdde09eb0cb73b4_28 = MAKE_FUNCTION_FRAME(codeobj_b0f1b2944b6de380dfdde09eb0cb73b4, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_b0f1b2944b6de380dfdde09eb0cb73b4_28->m_type_description == NULL);
        frame_b0f1b2944b6de380dfdde09eb0cb73b4_28 = cache_frame_b0f1b2944b6de380dfdde09eb0cb73b4_28;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_b0f1b2944b6de380dfdde09eb0cb73b4_28);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_b0f1b2944b6de380dfdde09eb0cb73b4_28) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_13:;
        {
            PyObject *tmp_next_source_13;
            PyObject *tmp_assign_source_193;
            CHECK_OBJECT(tmp_Numpy_normal$listcomp_1__$0);
            tmp_next_source_13 = tmp_Numpy_normal$listcomp_1__$0;
            tmp_assign_source_193 = ITERATOR_NEXT(tmp_next_source_13);
            if (tmp_assign_source_193 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_13;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_3 = "o";
                    exception_lineno = 211;
                    goto try_except_handler_74;
                }
            }

            {
                PyObject *old = tmp_Numpy_normal$listcomp_1__iter_value_0;
                tmp_Numpy_normal$listcomp_1__iter_value_0 = tmp_assign_source_193;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_194;
            CHECK_OBJECT(tmp_Numpy_normal$listcomp_1__iter_value_0);
            tmp_assign_source_194 = tmp_Numpy_normal$listcomp_1__iter_value_0;
            {
                PyObject *old = outline_26_var_tp;
                outline_26_var_tp = tmp_assign_source_194;
                Py_INCREF(outline_26_var_tp);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_13;
            PyObject *tmp_append_value_13;
            PyObject *tmp_called_value_94;
            PyObject *tmp_args_element_value_63;
            PyObject *tmp_args_element_value_64;
            PyObject *tmp_args_element_value_65;
            CHECK_OBJECT(tmp_Numpy_normal$listcomp_1__contraction);
            tmp_append_list_13 = tmp_Numpy_normal$listcomp_1__contraction;
            tmp_called_value_94 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[25]);

            if (unlikely(tmp_called_value_94 == NULL)) {
                tmp_called_value_94 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[25]);
            }

            if (tmp_called_value_94 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 211;
                type_description_3 = "o";
                goto try_except_handler_74;
            }
            CHECK_OBJECT(outline_26_var_tp);
            tmp_args_element_value_63 = outline_26_var_tp;
            CHECK_OBJECT(outline_26_var_tp);
            tmp_args_element_value_64 = outline_26_var_tp;
            CHECK_OBJECT(outline_26_var_tp);
            tmp_args_element_value_65 = outline_26_var_tp;
            frame_b0f1b2944b6de380dfdde09eb0cb73b4_28->m_frame.f_lineno = 211;
            {
                PyObject *call_args[] = {tmp_args_element_value_63, tmp_args_element_value_64, tmp_args_element_value_65};
                tmp_append_value_13 = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_94, call_args);
            }

            if (tmp_append_value_13 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 211;
                type_description_3 = "o";
                goto try_except_handler_74;
            }
            assert(PyList_Check(tmp_append_list_13));
            tmp_result = LIST_APPEND1(tmp_append_list_13, tmp_append_value_13);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 211;
                type_description_3 = "o";
                goto try_except_handler_74;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;
            type_description_3 = "o";
            goto try_except_handler_74;
        }
        goto loop_start_13;
        loop_end_13:;
        CHECK_OBJECT(tmp_Numpy_normal$listcomp_1__contraction);
        tmp_dictset_value = tmp_Numpy_normal$listcomp_1__contraction;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_74;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_74:;
        CHECK_OBJECT(tmp_Numpy_normal$listcomp_1__$0);
        Py_DECREF(tmp_Numpy_normal$listcomp_1__$0);
        tmp_Numpy_normal$listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_Numpy_normal$listcomp_1__contraction);
        Py_DECREF(tmp_Numpy_normal$listcomp_1__contraction);
        tmp_Numpy_normal$listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_Numpy_normal$listcomp_1__iter_value_0);
        tmp_Numpy_normal$listcomp_1__iter_value_0 = NULL;
        goto frame_return_exit_13;
        // Exception handler code:
        try_except_handler_74:;
        exception_keeper_type_70 = exception_type;
        exception_keeper_value_70 = exception_value;
        exception_keeper_tb_70 = exception_tb;
        exception_keeper_lineno_70 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Numpy_normal$listcomp_1__$0);
        Py_DECREF(tmp_Numpy_normal$listcomp_1__$0);
        tmp_Numpy_normal$listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_Numpy_normal$listcomp_1__contraction);
        Py_DECREF(tmp_Numpy_normal$listcomp_1__contraction);
        tmp_Numpy_normal$listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_Numpy_normal$listcomp_1__iter_value_0);
        tmp_Numpy_normal$listcomp_1__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_70;
        exception_value = exception_keeper_value_70;
        exception_tb = exception_keeper_tb_70;
        exception_lineno = exception_keeper_lineno_70;

        goto frame_exception_exit_28;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_b0f1b2944b6de380dfdde09eb0cb73b4_28);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_26;

        frame_return_exit_13:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_b0f1b2944b6de380dfdde09eb0cb73b4_28);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_73;

        frame_exception_exit_28:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_b0f1b2944b6de380dfdde09eb0cb73b4_28);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_b0f1b2944b6de380dfdde09eb0cb73b4_28, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_b0f1b2944b6de380dfdde09eb0cb73b4_28->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_b0f1b2944b6de380dfdde09eb0cb73b4_28, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_b0f1b2944b6de380dfdde09eb0cb73b4_28,
            type_description_3,
            outline_26_var_tp
        );


        // Release cached frame if used for exception.
        if (frame_b0f1b2944b6de380dfdde09eb0cb73b4_28 == cache_frame_b0f1b2944b6de380dfdde09eb0cb73b4_28) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_b0f1b2944b6de380dfdde09eb0cb73b4_28);
            cache_frame_b0f1b2944b6de380dfdde09eb0cb73b4_28 = NULL;
        }

        assertFrameObject(frame_b0f1b2944b6de380dfdde09eb0cb73b4_28);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_27;

        frame_no_exception_26:;
        goto skip_nested_handling_26;
        nested_frame_exit_27:;
        type_description_2 = "o";
        goto try_except_handler_73;
        skip_nested_handling_26:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_73:;
        Py_XDECREF(outline_26_var_tp);
        outline_26_var_tp = NULL;
        goto outline_result_27;
        // Exception handler code:
        try_except_handler_73:;
        exception_keeper_type_71 = exception_type;
        exception_keeper_value_71 = exception_value;
        exception_keeper_tb_71 = exception_tb;
        exception_keeper_lineno_71 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_26_var_tp);
        outline_26_var_tp = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_71;
        exception_value = exception_keeper_value_71;
        exception_tb = exception_keeper_tb_71;
        exception_lineno = exception_keeper_lineno_71;

        goto outline_exception_27;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_27:;
        exception_lineno = 211;
        goto frame_exception_exit_27;
        outline_result_27:;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__14_Numpy_normal_210, mod_consts[30], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 211;
            type_description_2 = "o";
            goto frame_exception_exit_27;
        }
        {
            PyObject *tmp_assign_source_195;
            tmp_assign_source_195 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__14_Numpy_normal_210, mod_consts[30]);

            if (unlikely(tmp_assign_source_195 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[30]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 212;
                type_description_2 = "o";
                goto frame_exception_exit_27;
            }

            if (tmp_assign_source_195 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 212;
                type_description_2 = "o";
                goto frame_exception_exit_27;
            }
            assert(tmp_Numpy_normal$class_inplace_1__value == NULL);
            tmp_Numpy_normal$class_inplace_1__value = tmp_assign_source_195;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_196;
            PyObject *tmp_left_value_20;
            PyObject *tmp_right_value_20;
            CHECK_OBJECT(tmp_Numpy_normal$class_inplace_1__value);
            tmp_left_value_20 = tmp_Numpy_normal$class_inplace_1__value;
            // Tried code:
            {
                PyObject *tmp_assign_source_197;
                PyObject *tmp_iter_arg_14;
                tmp_iter_arg_14 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__14_Numpy_normal_210, mod_consts[86]);

                if (tmp_iter_arg_14 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_iter_arg_14 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[86]);

                        if (unlikely(tmp_iter_arg_14 == NULL)) {
                            tmp_iter_arg_14 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[86]);
                        }

                        if (tmp_iter_arg_14 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 212;
                            type_description_2 = "o";
                            goto try_except_handler_76;
                        }
                        Py_INCREF(tmp_iter_arg_14);
                    } else {
                        goto try_except_handler_76;
                    }
                }

                tmp_assign_source_197 = MAKE_ITERATOR(tmp_iter_arg_14);
                Py_DECREF(tmp_iter_arg_14);
                if (tmp_assign_source_197 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 212;
                    type_description_2 = "o";
                    goto try_except_handler_76;
                }
                assert(tmp_Numpy_normal$listcomp_2__$0 == NULL);
                tmp_Numpy_normal$listcomp_2__$0 = tmp_assign_source_197;
            }
            {
                PyObject *tmp_assign_source_198;
                tmp_assign_source_198 = PyList_New(0);
                assert(tmp_Numpy_normal$listcomp_2__contraction == NULL);
                tmp_Numpy_normal$listcomp_2__contraction = tmp_assign_source_198;
            }
            if (isFrameUnusable(cache_frame_4eaac3c70525e2b2f20a3cc6d8a7e138_29)) {
                Py_XDECREF(cache_frame_4eaac3c70525e2b2f20a3cc6d8a7e138_29);

#if _DEBUG_REFCOUNTS
                if (cache_frame_4eaac3c70525e2b2f20a3cc6d8a7e138_29 == NULL) {
                    count_active_frame_cache_instances += 1;
                } else {
                    count_released_frame_cache_instances += 1;
                }
                count_allocated_frame_cache_instances += 1;
#endif
                cache_frame_4eaac3c70525e2b2f20a3cc6d8a7e138_29 = MAKE_FUNCTION_FRAME(codeobj_4eaac3c70525e2b2f20a3cc6d8a7e138, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
            } else {
                count_hit_frame_cache_instances += 1;
#endif
            }
            assert(cache_frame_4eaac3c70525e2b2f20a3cc6d8a7e138_29->m_type_description == NULL);
            frame_4eaac3c70525e2b2f20a3cc6d8a7e138_29 = cache_frame_4eaac3c70525e2b2f20a3cc6d8a7e138_29;

            // Push the new frame as the currently active one.
            pushFrameStack(frame_4eaac3c70525e2b2f20a3cc6d8a7e138_29);

            // Mark the frame object as in use, ref count 1 will be up for reuse.
            assert(Py_REFCNT(frame_4eaac3c70525e2b2f20a3cc6d8a7e138_29) == 2); // Frame stack

            // Framed code:
            // Tried code:
            loop_start_14:;
            {
                PyObject *tmp_next_source_14;
                PyObject *tmp_assign_source_199;
                CHECK_OBJECT(tmp_Numpy_normal$listcomp_2__$0);
                tmp_next_source_14 = tmp_Numpy_normal$listcomp_2__$0;
                tmp_assign_source_199 = ITERATOR_NEXT(tmp_next_source_14);
                if (tmp_assign_source_199 == NULL) {
                    if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                        goto loop_end_14;
                    } else {

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        type_description_3 = "o";
                        exception_lineno = 212;
                        goto try_except_handler_77;
                    }
                }

                {
                    PyObject *old = tmp_Numpy_normal$listcomp_2__iter_value_0;
                    tmp_Numpy_normal$listcomp_2__iter_value_0 = tmp_assign_source_199;
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_assign_source_200;
                CHECK_OBJECT(tmp_Numpy_normal$listcomp_2__iter_value_0);
                tmp_assign_source_200 = tmp_Numpy_normal$listcomp_2__iter_value_0;
                {
                    PyObject *old = outline_27_var_tp;
                    outline_27_var_tp = tmp_assign_source_200;
                    Py_INCREF(outline_27_var_tp);
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_append_list_14;
                PyObject *tmp_append_value_14;
                PyObject *tmp_called_value_95;
                PyObject *tmp_args_element_value_66;
                PyObject *tmp_args_element_value_67;
                CHECK_OBJECT(tmp_Numpy_normal$listcomp_2__contraction);
                tmp_append_list_14 = tmp_Numpy_normal$listcomp_2__contraction;
                tmp_called_value_95 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[25]);

                if (unlikely(tmp_called_value_95 == NULL)) {
                    tmp_called_value_95 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[25]);
                }

                if (tmp_called_value_95 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 212;
                    type_description_3 = "o";
                    goto try_except_handler_77;
                }
                CHECK_OBJECT(outline_27_var_tp);
                tmp_args_element_value_66 = outline_27_var_tp;
                CHECK_OBJECT(outline_27_var_tp);
                tmp_args_element_value_67 = outline_27_var_tp;
                frame_4eaac3c70525e2b2f20a3cc6d8a7e138_29->m_frame.f_lineno = 212;
                {
                    PyObject *call_args[] = {tmp_args_element_value_66, tmp_args_element_value_67};
                    tmp_append_value_14 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_95, call_args);
                }

                if (tmp_append_value_14 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 212;
                    type_description_3 = "o";
                    goto try_except_handler_77;
                }
                assert(PyList_Check(tmp_append_list_14));
                tmp_result = LIST_APPEND1(tmp_append_list_14, tmp_append_value_14);
                if (tmp_result == false) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 212;
                    type_description_3 = "o";
                    goto try_except_handler_77;
                }
            }
            if (CONSIDER_THREADING() == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 212;
                type_description_3 = "o";
                goto try_except_handler_77;
            }
            goto loop_start_14;
            loop_end_14:;
            CHECK_OBJECT(tmp_Numpy_normal$listcomp_2__contraction);
            tmp_right_value_20 = tmp_Numpy_normal$listcomp_2__contraction;
            Py_INCREF(tmp_right_value_20);
            goto try_return_handler_77;
            NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
            return NULL;
            // Return handler code:
            try_return_handler_77:;
            CHECK_OBJECT(tmp_Numpy_normal$listcomp_2__$0);
            Py_DECREF(tmp_Numpy_normal$listcomp_2__$0);
            tmp_Numpy_normal$listcomp_2__$0 = NULL;
            CHECK_OBJECT(tmp_Numpy_normal$listcomp_2__contraction);
            Py_DECREF(tmp_Numpy_normal$listcomp_2__contraction);
            tmp_Numpy_normal$listcomp_2__contraction = NULL;
            Py_XDECREF(tmp_Numpy_normal$listcomp_2__iter_value_0);
            tmp_Numpy_normal$listcomp_2__iter_value_0 = NULL;
            goto frame_return_exit_14;
            // Exception handler code:
            try_except_handler_77:;
            exception_keeper_type_72 = exception_type;
            exception_keeper_value_72 = exception_value;
            exception_keeper_tb_72 = exception_tb;
            exception_keeper_lineno_72 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT(tmp_Numpy_normal$listcomp_2__$0);
            Py_DECREF(tmp_Numpy_normal$listcomp_2__$0);
            tmp_Numpy_normal$listcomp_2__$0 = NULL;
            CHECK_OBJECT(tmp_Numpy_normal$listcomp_2__contraction);
            Py_DECREF(tmp_Numpy_normal$listcomp_2__contraction);
            tmp_Numpy_normal$listcomp_2__contraction = NULL;
            Py_XDECREF(tmp_Numpy_normal$listcomp_2__iter_value_0);
            tmp_Numpy_normal$listcomp_2__iter_value_0 = NULL;
            // Re-raise.
            exception_type = exception_keeper_type_72;
            exception_value = exception_keeper_value_72;
            exception_tb = exception_keeper_tb_72;
            exception_lineno = exception_keeper_lineno_72;

            goto frame_exception_exit_29;
            // End of try:

#if 0
            RESTORE_FRAME_EXCEPTION(frame_4eaac3c70525e2b2f20a3cc6d8a7e138_29);
#endif

            // Put the previous frame back on top.
            popFrameStack();

            goto frame_no_exception_27;

            frame_return_exit_14:;
#if 0
            RESTORE_FRAME_EXCEPTION(frame_4eaac3c70525e2b2f20a3cc6d8a7e138_29);
#endif

            // Put the previous frame back on top.
            popFrameStack();

            goto try_return_handler_76;

            frame_exception_exit_29:;

#if 0
            RESTORE_FRAME_EXCEPTION(frame_4eaac3c70525e2b2f20a3cc6d8a7e138_29);
#endif

            if (exception_tb == NULL) {
                exception_tb = MAKE_TRACEBACK(frame_4eaac3c70525e2b2f20a3cc6d8a7e138_29, exception_lineno);
            } else if (exception_tb->tb_frame != &frame_4eaac3c70525e2b2f20a3cc6d8a7e138_29->m_frame) {
                exception_tb = ADD_TRACEBACK(exception_tb, frame_4eaac3c70525e2b2f20a3cc6d8a7e138_29, exception_lineno);
            }

            // Attaches locals to frame if any.
            Nuitka_Frame_AttachLocals(
                frame_4eaac3c70525e2b2f20a3cc6d8a7e138_29,
                type_description_3,
                outline_27_var_tp
            );


            // Release cached frame if used for exception.
            if (frame_4eaac3c70525e2b2f20a3cc6d8a7e138_29 == cache_frame_4eaac3c70525e2b2f20a3cc6d8a7e138_29) {
#if _DEBUG_REFCOUNTS
                count_active_frame_cache_instances -= 1;
                count_released_frame_cache_instances += 1;
#endif

                Py_DECREF(cache_frame_4eaac3c70525e2b2f20a3cc6d8a7e138_29);
                cache_frame_4eaac3c70525e2b2f20a3cc6d8a7e138_29 = NULL;
            }

            assertFrameObject(frame_4eaac3c70525e2b2f20a3cc6d8a7e138_29);

            // Put the previous frame back on top.
            popFrameStack();

            // Return the error.
            goto nested_frame_exit_28;

            frame_no_exception_27:;
            goto skip_nested_handling_27;
            nested_frame_exit_28:;
            type_description_2 = "o";
            goto try_except_handler_76;
            skip_nested_handling_27:;
            NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
            return NULL;
            // Return handler code:
            try_return_handler_76:;
            Py_XDECREF(outline_27_var_tp);
            outline_27_var_tp = NULL;
            goto outline_result_28;
            // Exception handler code:
            try_except_handler_76:;
            exception_keeper_type_73 = exception_type;
            exception_keeper_value_73 = exception_value;
            exception_keeper_tb_73 = exception_tb;
            exception_keeper_lineno_73 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF(outline_27_var_tp);
            outline_27_var_tp = NULL;
            // Re-raise.
            exception_type = exception_keeper_type_73;
            exception_value = exception_keeper_value_73;
            exception_tb = exception_keeper_tb_73;
            exception_lineno = exception_keeper_lineno_73;

            goto outline_exception_28;
            // End of try:
            NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
            return NULL;
            outline_exception_28:;
            exception_lineno = 212;
            goto try_except_handler_75;
            outline_result_28:;
            tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE(&tmp_left_value_20, tmp_right_value_20);
            Py_DECREF(tmp_right_value_20);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 212;
                type_description_2 = "o";
                goto try_except_handler_75;
            }
            tmp_assign_source_196 = tmp_left_value_20;
            tmp_Numpy_normal$class_inplace_1__value = tmp_assign_source_196;

        }
        CHECK_OBJECT(tmp_Numpy_normal$class_inplace_1__value);
        tmp_dictset_value = tmp_Numpy_normal$class_inplace_1__value;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__14_Numpy_normal_210, mod_consts[30], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 212;
            type_description_2 = "o";
            goto try_except_handler_75;
        }
        goto try_end_20;
        // Exception handler code:
        try_except_handler_75:;
        exception_keeper_type_74 = exception_type;
        exception_keeper_value_74 = exception_value;
        exception_keeper_tb_74 = exception_tb;
        exception_keeper_lineno_74 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Numpy_normal$class_inplace_1__value);
        Py_DECREF(tmp_Numpy_normal$class_inplace_1__value);
        tmp_Numpy_normal$class_inplace_1__value = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_74;
        exception_value = exception_keeper_value_74;
        exception_tb = exception_keeper_tb_74;
        exception_lineno = exception_keeper_lineno_74;

        goto frame_exception_exit_27;
        // End of try:
        try_end_20:;
        CHECK_OBJECT(tmp_Numpy_normal$class_inplace_1__value);
        Py_DECREF(tmp_Numpy_normal$class_inplace_1__value);
        tmp_Numpy_normal$class_inplace_1__value = NULL;
        {
            PyObject *tmp_assign_source_201;
            tmp_assign_source_201 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__14_Numpy_normal_210, mod_consts[30]);

            if (unlikely(tmp_assign_source_201 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[30]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 213;
                type_description_2 = "o";
                goto frame_exception_exit_27;
            }

            if (tmp_assign_source_201 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 213;
                type_description_2 = "o";
                goto frame_exception_exit_27;
            }
            assert(tmp_Numpy_normal$class_inplace_2__value == NULL);
            tmp_Numpy_normal$class_inplace_2__value = tmp_assign_source_201;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_202;
            PyObject *tmp_left_value_21;
            PyObject *tmp_right_value_21;
            CHECK_OBJECT(tmp_Numpy_normal$class_inplace_2__value);
            tmp_left_value_21 = tmp_Numpy_normal$class_inplace_2__value;
            // Tried code:
            {
                PyObject *tmp_assign_source_203;
                PyObject *tmp_iter_arg_15;
                tmp_iter_arg_15 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__14_Numpy_normal_210, mod_consts[86]);

                if (tmp_iter_arg_15 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_iter_arg_15 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[86]);

                        if (unlikely(tmp_iter_arg_15 == NULL)) {
                            tmp_iter_arg_15 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[86]);
                        }

                        if (tmp_iter_arg_15 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 213;
                            type_description_2 = "o";
                            goto try_except_handler_79;
                        }
                        Py_INCREF(tmp_iter_arg_15);
                    } else {
                        goto try_except_handler_79;
                    }
                }

                tmp_assign_source_203 = MAKE_ITERATOR(tmp_iter_arg_15);
                Py_DECREF(tmp_iter_arg_15);
                if (tmp_assign_source_203 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 213;
                    type_description_2 = "o";
                    goto try_except_handler_79;
                }
                assert(tmp_Numpy_normal$listcomp_3__$0 == NULL);
                tmp_Numpy_normal$listcomp_3__$0 = tmp_assign_source_203;
            }
            {
                PyObject *tmp_assign_source_204;
                tmp_assign_source_204 = PyList_New(0);
                assert(tmp_Numpy_normal$listcomp_3__contraction == NULL);
                tmp_Numpy_normal$listcomp_3__contraction = tmp_assign_source_204;
            }
            if (isFrameUnusable(cache_frame_1410da64a1c244fe1cfd7f5789efaf26_30)) {
                Py_XDECREF(cache_frame_1410da64a1c244fe1cfd7f5789efaf26_30);

#if _DEBUG_REFCOUNTS
                if (cache_frame_1410da64a1c244fe1cfd7f5789efaf26_30 == NULL) {
                    count_active_frame_cache_instances += 1;
                } else {
                    count_released_frame_cache_instances += 1;
                }
                count_allocated_frame_cache_instances += 1;
#endif
                cache_frame_1410da64a1c244fe1cfd7f5789efaf26_30 = MAKE_FUNCTION_FRAME(codeobj_1410da64a1c244fe1cfd7f5789efaf26, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
            } else {
                count_hit_frame_cache_instances += 1;
#endif
            }
            assert(cache_frame_1410da64a1c244fe1cfd7f5789efaf26_30->m_type_description == NULL);
            frame_1410da64a1c244fe1cfd7f5789efaf26_30 = cache_frame_1410da64a1c244fe1cfd7f5789efaf26_30;

            // Push the new frame as the currently active one.
            pushFrameStack(frame_1410da64a1c244fe1cfd7f5789efaf26_30);

            // Mark the frame object as in use, ref count 1 will be up for reuse.
            assert(Py_REFCNT(frame_1410da64a1c244fe1cfd7f5789efaf26_30) == 2); // Frame stack

            // Framed code:
            // Tried code:
            loop_start_15:;
            {
                PyObject *tmp_next_source_15;
                PyObject *tmp_assign_source_205;
                CHECK_OBJECT(tmp_Numpy_normal$listcomp_3__$0);
                tmp_next_source_15 = tmp_Numpy_normal$listcomp_3__$0;
                tmp_assign_source_205 = ITERATOR_NEXT(tmp_next_source_15);
                if (tmp_assign_source_205 == NULL) {
                    if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                        goto loop_end_15;
                    } else {

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        type_description_3 = "o";
                        exception_lineno = 213;
                        goto try_except_handler_80;
                    }
                }

                {
                    PyObject *old = tmp_Numpy_normal$listcomp_3__iter_value_0;
                    tmp_Numpy_normal$listcomp_3__iter_value_0 = tmp_assign_source_205;
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_assign_source_206;
                CHECK_OBJECT(tmp_Numpy_normal$listcomp_3__iter_value_0);
                tmp_assign_source_206 = tmp_Numpy_normal$listcomp_3__iter_value_0;
                {
                    PyObject *old = outline_28_var_tp;
                    outline_28_var_tp = tmp_assign_source_206;
                    Py_INCREF(outline_28_var_tp);
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_append_list_15;
                PyObject *tmp_append_value_15;
                PyObject *tmp_called_value_96;
                PyObject *tmp_args_element_value_68;
                CHECK_OBJECT(tmp_Numpy_normal$listcomp_3__contraction);
                tmp_append_list_15 = tmp_Numpy_normal$listcomp_3__contraction;
                tmp_called_value_96 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[25]);

                if (unlikely(tmp_called_value_96 == NULL)) {
                    tmp_called_value_96 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[25]);
                }

                if (tmp_called_value_96 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 213;
                    type_description_3 = "o";
                    goto try_except_handler_80;
                }
                CHECK_OBJECT(outline_28_var_tp);
                tmp_args_element_value_68 = outline_28_var_tp;
                frame_1410da64a1c244fe1cfd7f5789efaf26_30->m_frame.f_lineno = 213;
                tmp_append_value_15 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_96, tmp_args_element_value_68);
                if (tmp_append_value_15 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 213;
                    type_description_3 = "o";
                    goto try_except_handler_80;
                }
                assert(PyList_Check(tmp_append_list_15));
                tmp_result = LIST_APPEND1(tmp_append_list_15, tmp_append_value_15);
                if (tmp_result == false) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 213;
                    type_description_3 = "o";
                    goto try_except_handler_80;
                }
            }
            if (CONSIDER_THREADING() == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 213;
                type_description_3 = "o";
                goto try_except_handler_80;
            }
            goto loop_start_15;
            loop_end_15:;
            CHECK_OBJECT(tmp_Numpy_normal$listcomp_3__contraction);
            tmp_right_value_21 = tmp_Numpy_normal$listcomp_3__contraction;
            Py_INCREF(tmp_right_value_21);
            goto try_return_handler_80;
            NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
            return NULL;
            // Return handler code:
            try_return_handler_80:;
            CHECK_OBJECT(tmp_Numpy_normal$listcomp_3__$0);
            Py_DECREF(tmp_Numpy_normal$listcomp_3__$0);
            tmp_Numpy_normal$listcomp_3__$0 = NULL;
            CHECK_OBJECT(tmp_Numpy_normal$listcomp_3__contraction);
            Py_DECREF(tmp_Numpy_normal$listcomp_3__contraction);
            tmp_Numpy_normal$listcomp_3__contraction = NULL;
            Py_XDECREF(tmp_Numpy_normal$listcomp_3__iter_value_0);
            tmp_Numpy_normal$listcomp_3__iter_value_0 = NULL;
            goto frame_return_exit_15;
            // Exception handler code:
            try_except_handler_80:;
            exception_keeper_type_75 = exception_type;
            exception_keeper_value_75 = exception_value;
            exception_keeper_tb_75 = exception_tb;
            exception_keeper_lineno_75 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT(tmp_Numpy_normal$listcomp_3__$0);
            Py_DECREF(tmp_Numpy_normal$listcomp_3__$0);
            tmp_Numpy_normal$listcomp_3__$0 = NULL;
            CHECK_OBJECT(tmp_Numpy_normal$listcomp_3__contraction);
            Py_DECREF(tmp_Numpy_normal$listcomp_3__contraction);
            tmp_Numpy_normal$listcomp_3__contraction = NULL;
            Py_XDECREF(tmp_Numpy_normal$listcomp_3__iter_value_0);
            tmp_Numpy_normal$listcomp_3__iter_value_0 = NULL;
            // Re-raise.
            exception_type = exception_keeper_type_75;
            exception_value = exception_keeper_value_75;
            exception_tb = exception_keeper_tb_75;
            exception_lineno = exception_keeper_lineno_75;

            goto frame_exception_exit_30;
            // End of try:

#if 0
            RESTORE_FRAME_EXCEPTION(frame_1410da64a1c244fe1cfd7f5789efaf26_30);
#endif

            // Put the previous frame back on top.
            popFrameStack();

            goto frame_no_exception_28;

            frame_return_exit_15:;
#if 0
            RESTORE_FRAME_EXCEPTION(frame_1410da64a1c244fe1cfd7f5789efaf26_30);
#endif

            // Put the previous frame back on top.
            popFrameStack();

            goto try_return_handler_79;

            frame_exception_exit_30:;

#if 0
            RESTORE_FRAME_EXCEPTION(frame_1410da64a1c244fe1cfd7f5789efaf26_30);
#endif

            if (exception_tb == NULL) {
                exception_tb = MAKE_TRACEBACK(frame_1410da64a1c244fe1cfd7f5789efaf26_30, exception_lineno);
            } else if (exception_tb->tb_frame != &frame_1410da64a1c244fe1cfd7f5789efaf26_30->m_frame) {
                exception_tb = ADD_TRACEBACK(exception_tb, frame_1410da64a1c244fe1cfd7f5789efaf26_30, exception_lineno);
            }

            // Attaches locals to frame if any.
            Nuitka_Frame_AttachLocals(
                frame_1410da64a1c244fe1cfd7f5789efaf26_30,
                type_description_3,
                outline_28_var_tp
            );


            // Release cached frame if used for exception.
            if (frame_1410da64a1c244fe1cfd7f5789efaf26_30 == cache_frame_1410da64a1c244fe1cfd7f5789efaf26_30) {
#if _DEBUG_REFCOUNTS
                count_active_frame_cache_instances -= 1;
                count_released_frame_cache_instances += 1;
#endif

                Py_DECREF(cache_frame_1410da64a1c244fe1cfd7f5789efaf26_30);
                cache_frame_1410da64a1c244fe1cfd7f5789efaf26_30 = NULL;
            }

            assertFrameObject(frame_1410da64a1c244fe1cfd7f5789efaf26_30);

            // Put the previous frame back on top.
            popFrameStack();

            // Return the error.
            goto nested_frame_exit_29;

            frame_no_exception_28:;
            goto skip_nested_handling_28;
            nested_frame_exit_29:;
            type_description_2 = "o";
            goto try_except_handler_79;
            skip_nested_handling_28:;
            NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
            return NULL;
            // Return handler code:
            try_return_handler_79:;
            Py_XDECREF(outline_28_var_tp);
            outline_28_var_tp = NULL;
            goto outline_result_29;
            // Exception handler code:
            try_except_handler_79:;
            exception_keeper_type_76 = exception_type;
            exception_keeper_value_76 = exception_value;
            exception_keeper_tb_76 = exception_tb;
            exception_keeper_lineno_76 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF(outline_28_var_tp);
            outline_28_var_tp = NULL;
            // Re-raise.
            exception_type = exception_keeper_type_76;
            exception_value = exception_keeper_value_76;
            exception_tb = exception_keeper_tb_76;
            exception_lineno = exception_keeper_lineno_76;

            goto outline_exception_29;
            // End of try:
            NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
            return NULL;
            outline_exception_29:;
            exception_lineno = 213;
            goto try_except_handler_78;
            outline_result_29:;
            tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE(&tmp_left_value_21, tmp_right_value_21);
            Py_DECREF(tmp_right_value_21);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 213;
                type_description_2 = "o";
                goto try_except_handler_78;
            }
            tmp_assign_source_202 = tmp_left_value_21;
            tmp_Numpy_normal$class_inplace_2__value = tmp_assign_source_202;

        }
        CHECK_OBJECT(tmp_Numpy_normal$class_inplace_2__value);
        tmp_dictset_value = tmp_Numpy_normal$class_inplace_2__value;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__14_Numpy_normal_210, mod_consts[30], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 213;
            type_description_2 = "o";
            goto try_except_handler_78;
        }
        goto try_end_21;
        // Exception handler code:
        try_except_handler_78:;
        exception_keeper_type_77 = exception_type;
        exception_keeper_value_77 = exception_value;
        exception_keeper_tb_77 = exception_tb;
        exception_keeper_lineno_77 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Numpy_normal$class_inplace_2__value);
        Py_DECREF(tmp_Numpy_normal$class_inplace_2__value);
        tmp_Numpy_normal$class_inplace_2__value = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_77;
        exception_value = exception_keeper_value_77;
        exception_tb = exception_keeper_tb_77;
        exception_lineno = exception_keeper_lineno_77;

        goto frame_exception_exit_27;
        // End of try:
        try_end_21:;
        CHECK_OBJECT(tmp_Numpy_normal$class_inplace_2__value);
        Py_DECREF(tmp_Numpy_normal$class_inplace_2__value);
        tmp_Numpy_normal$class_inplace_2__value = NULL;


        tmp_dictset_value = MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__11_generic();

        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__14_Numpy_normal_210, mod_consts[110], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 215;
            type_description_2 = "o";
            goto frame_exception_exit_27;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_783a1d78defebe6f43f5fe6abd4e6ce0_27);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_29;

        frame_exception_exit_27:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_783a1d78defebe6f43f5fe6abd4e6ce0_27);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_783a1d78defebe6f43f5fe6abd4e6ce0_27, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_783a1d78defebe6f43f5fe6abd4e6ce0_27->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_783a1d78defebe6f43f5fe6abd4e6ce0_27, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_783a1d78defebe6f43f5fe6abd4e6ce0_27,
            type_description_2,
            outline_25_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_783a1d78defebe6f43f5fe6abd4e6ce0_27 == cache_frame_783a1d78defebe6f43f5fe6abd4e6ce0_27) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_783a1d78defebe6f43f5fe6abd4e6ce0_27);
            cache_frame_783a1d78defebe6f43f5fe6abd4e6ce0_27 = NULL;
        }

        assertFrameObject(frame_783a1d78defebe6f43f5fe6abd4e6ce0_27);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_26;

        frame_no_exception_29:;
        goto skip_nested_handling_29;
        nested_frame_exit_26:;

        goto try_except_handler_72;
        skip_nested_handling_29:;
        {
            nuitka_bool tmp_condition_result_85;
            PyObject *tmp_cmp_expr_left_15;
            PyObject *tmp_cmp_expr_right_15;
            CHECK_OBJECT(tmp_class_creation_14__bases);
            tmp_cmp_expr_left_15 = tmp_class_creation_14__bases;
            CHECK_OBJECT(tmp_class_creation_14__bases_orig);
            tmp_cmp_expr_right_15 = tmp_class_creation_14__bases_orig;
            tmp_condition_result_85 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_15, tmp_cmp_expr_right_15);
            if (tmp_condition_result_85 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 210;

                goto try_except_handler_72;
            }
            if (tmp_condition_result_85 == NUITKA_BOOL_TRUE) {
                goto branch_yes_57;
            } else {
                goto branch_no_57;
            }
            assert(tmp_condition_result_85 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_57:;
        CHECK_OBJECT(tmp_class_creation_14__bases_orig);
        tmp_dictset_value = tmp_class_creation_14__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__14_Numpy_normal_210, mod_consts[98], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 210;

            goto try_except_handler_72;
        }
        branch_no_57:;
        {
            PyObject *tmp_assign_source_207;
            PyObject *tmp_called_value_97;
            PyObject *tmp_args_value_52;
            PyObject *tmp_tuple_element_81;
            PyObject *tmp_kwargs_value_52;
            CHECK_OBJECT(tmp_class_creation_14__metaclass);
            tmp_called_value_97 = tmp_class_creation_14__metaclass;
            tmp_tuple_element_81 = mod_consts[161];
            tmp_args_value_52 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_52, 0, tmp_tuple_element_81);
            CHECK_OBJECT(tmp_class_creation_14__bases);
            tmp_tuple_element_81 = tmp_class_creation_14__bases;
            PyTuple_SET_ITEM0(tmp_args_value_52, 1, tmp_tuple_element_81);
            tmp_tuple_element_81 = locals_numba$core$typing$randomdecl$$$class__14_Numpy_normal_210;
            PyTuple_SET_ITEM0(tmp_args_value_52, 2, tmp_tuple_element_81);
            CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
            tmp_kwargs_value_52 = tmp_class_creation_14__class_decl_dict;
            frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 210;
            tmp_assign_source_207 = CALL_FUNCTION(tmp_called_value_97, tmp_args_value_52, tmp_kwargs_value_52);
            Py_DECREF(tmp_args_value_52);
            if (tmp_assign_source_207 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 210;

                goto try_except_handler_72;
            }
            assert(outline_25_var___class__ == NULL);
            outline_25_var___class__ = tmp_assign_source_207;
        }
        CHECK_OBJECT(outline_25_var___class__);
        tmp_args_element_value_62 = outline_25_var___class__;
        Py_INCREF(tmp_args_element_value_62);
        goto try_return_handler_72;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_72:;
        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__14_Numpy_normal_210);
        locals_numba$core$typing$randomdecl$$$class__14_Numpy_normal_210 = NULL;
        goto try_return_handler_71;
        // Exception handler code:
        try_except_handler_72:;
        exception_keeper_type_78 = exception_type;
        exception_keeper_value_78 = exception_value;
        exception_keeper_tb_78 = exception_tb;
        exception_keeper_lineno_78 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__14_Numpy_normal_210);
        locals_numba$core$typing$randomdecl$$$class__14_Numpy_normal_210 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_78;
        exception_value = exception_keeper_value_78;
        exception_tb = exception_keeper_tb_78;
        exception_lineno = exception_keeper_lineno_78;

        goto try_except_handler_71;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_71:;
        CHECK_OBJECT(outline_25_var___class__);
        Py_DECREF(outline_25_var___class__);
        outline_25_var___class__ = NULL;
        goto outline_result_26;
        // Exception handler code:
        try_except_handler_71:;
        exception_keeper_type_79 = exception_type;
        exception_keeper_value_79 = exception_value;
        exception_keeper_tb_79 = exception_tb;
        exception_keeper_lineno_79 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_79;
        exception_value = exception_keeper_value_79;
        exception_tb = exception_keeper_tb_79;
        exception_lineno = exception_keeper_lineno_79;

        goto outline_exception_26;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_26:;
        exception_lineno = 210;
        goto try_except_handler_70;
        outline_result_26:;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 209;
        tmp_args_element_value_61 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_92, tmp_args_element_value_62);
        Py_DECREF(tmp_called_value_92);
        Py_DECREF(tmp_args_element_value_62);
        if (tmp_args_element_value_61 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_86);
            Py_DECREF(tmp_called_value_88);
            Py_DECREF(tmp_called_value_90);

            exception_lineno = 209;

            goto try_except_handler_70;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 208;
        tmp_args_element_value_60 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_90, tmp_args_element_value_61);
        Py_DECREF(tmp_called_value_90);
        Py_DECREF(tmp_args_element_value_61);
        if (tmp_args_element_value_60 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_86);
            Py_DECREF(tmp_called_value_88);

            exception_lineno = 208;

            goto try_except_handler_70;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 207;
        tmp_args_element_value_59 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_88, tmp_args_element_value_60);
        Py_DECREF(tmp_called_value_88);
        Py_DECREF(tmp_args_element_value_60);
        if (tmp_args_element_value_59 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_86);

            exception_lineno = 207;

            goto try_except_handler_70;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 206;
        tmp_assign_source_190 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_86, tmp_args_element_value_59);
        Py_DECREF(tmp_called_value_86);
        Py_DECREF(tmp_args_element_value_59);
        if (tmp_assign_source_190 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 206;

            goto try_except_handler_70;
        }
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[161], tmp_assign_source_190);
    }
    goto try_end_22;
    // Exception handler code:
    try_except_handler_70:;
    exception_keeper_type_80 = exception_type;
    exception_keeper_value_80 = exception_value;
    exception_keeper_tb_80 = exception_tb;
    exception_keeper_lineno_80 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_14__bases_orig);
    tmp_class_creation_14__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_14__bases);
    tmp_class_creation_14__bases = NULL;
    Py_XDECREF(tmp_class_creation_14__class_decl_dict);
    tmp_class_creation_14__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_14__metaclass);
    tmp_class_creation_14__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_14__prepared);
    tmp_class_creation_14__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_80;
    exception_value = exception_keeper_value_80;
    exception_tb = exception_keeper_tb_80;
    exception_lineno = exception_keeper_lineno_80;

    goto frame_exception_exit_1;
    // End of try:
    try_end_22:;
    CHECK_OBJECT(tmp_class_creation_14__bases_orig);
    Py_DECREF(tmp_class_creation_14__bases_orig);
    tmp_class_creation_14__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_14__bases);
    Py_DECREF(tmp_class_creation_14__bases);
    tmp_class_creation_14__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
    Py_DECREF(tmp_class_creation_14__class_decl_dict);
    tmp_class_creation_14__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_14__metaclass);
    Py_DECREF(tmp_class_creation_14__metaclass);
    tmp_class_creation_14__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_14__prepared);
    Py_DECREF(tmp_class_creation_14__prepared);
    tmp_class_creation_14__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_208;
        PyObject *tmp_tuple_element_82;
        tmp_tuple_element_82 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[99]);

        if (unlikely(tmp_tuple_element_82 == NULL)) {
            tmp_tuple_element_82 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[99]);
        }

        if (tmp_tuple_element_82 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 221;

            goto try_except_handler_81;
        }
        tmp_assign_source_208 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_208, 0, tmp_tuple_element_82);
        assert(tmp_class_creation_15__bases_orig == NULL);
        tmp_class_creation_15__bases_orig = tmp_assign_source_208;
    }
    {
        PyObject *tmp_assign_source_209;
        PyObject *tmp_dircall_arg1_15;
        CHECK_OBJECT(tmp_class_creation_15__bases_orig);
        tmp_dircall_arg1_15 = tmp_class_creation_15__bases_orig;
        Py_INCREF(tmp_dircall_arg1_15);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_15};
            tmp_assign_source_209 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_209 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 221;

            goto try_except_handler_81;
        }
        assert(tmp_class_creation_15__bases == NULL);
        tmp_class_creation_15__bases = tmp_assign_source_209;
    }
    {
        PyObject *tmp_assign_source_210;
        tmp_assign_source_210 = PyDict_New();
        assert(tmp_class_creation_15__class_decl_dict == NULL);
        tmp_class_creation_15__class_decl_dict = tmp_assign_source_210;
    }
    {
        PyObject *tmp_assign_source_211;
        PyObject *tmp_metaclass_value_15;
        bool tmp_condition_result_86;
        PyObject *tmp_key_value_43;
        PyObject *tmp_dict_arg_value_43;
        PyObject *tmp_dict_arg_value_44;
        PyObject *tmp_key_value_44;
        nuitka_bool tmp_condition_result_87;
        int tmp_truth_name_15;
        PyObject *tmp_type_arg_29;
        PyObject *tmp_expression_value_130;
        PyObject *tmp_subscript_value_15;
        PyObject *tmp_bases_value_15;
        tmp_key_value_43 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
        tmp_dict_arg_value_43 = tmp_class_creation_15__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_43, tmp_key_value_43);
        assert(!(tmp_res == -1));
        tmp_condition_result_86 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_86 != false) {
            goto condexpr_true_29;
        } else {
            goto condexpr_false_29;
        }
        condexpr_true_29:;
        CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
        tmp_dict_arg_value_44 = tmp_class_creation_15__class_decl_dict;
        tmp_key_value_44 = mod_consts[87];
        tmp_metaclass_value_15 = DICT_GET_ITEM0(tmp_dict_arg_value_44, tmp_key_value_44);
        if (tmp_metaclass_value_15 == NULL) {
            tmp_metaclass_value_15 = Py_None;
        }
        assert(!(tmp_metaclass_value_15 == NULL));
        Py_INCREF(tmp_metaclass_value_15);
        goto condexpr_end_29;
        condexpr_false_29:;
        CHECK_OBJECT(tmp_class_creation_15__bases);
        tmp_truth_name_15 = CHECK_IF_TRUE(tmp_class_creation_15__bases);
        if (tmp_truth_name_15 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 221;

            goto try_except_handler_81;
        }
        tmp_condition_result_87 = tmp_truth_name_15 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_87 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_30;
        } else {
            goto condexpr_false_30;
        }
        condexpr_true_30:;
        CHECK_OBJECT(tmp_class_creation_15__bases);
        tmp_expression_value_130 = tmp_class_creation_15__bases;
        tmp_subscript_value_15 = mod_consts[13];
        tmp_type_arg_29 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_130, tmp_subscript_value_15, 0);
        if (tmp_type_arg_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 221;

            goto try_except_handler_81;
        }
        tmp_metaclass_value_15 = BUILTIN_TYPE1(tmp_type_arg_29);
        Py_DECREF(tmp_type_arg_29);
        if (tmp_metaclass_value_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 221;

            goto try_except_handler_81;
        }
        goto condexpr_end_30;
        condexpr_false_30:;
        tmp_metaclass_value_15 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_15);
        condexpr_end_30:;
        condexpr_end_29:;
        CHECK_OBJECT(tmp_class_creation_15__bases);
        tmp_bases_value_15 = tmp_class_creation_15__bases;
        tmp_assign_source_211 = SELECT_METACLASS(tmp_metaclass_value_15, tmp_bases_value_15);
        Py_DECREF(tmp_metaclass_value_15);
        if (tmp_assign_source_211 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 221;

            goto try_except_handler_81;
        }
        assert(tmp_class_creation_15__metaclass == NULL);
        tmp_class_creation_15__metaclass = tmp_assign_source_211;
    }
    {
        bool tmp_condition_result_88;
        PyObject *tmp_key_value_45;
        PyObject *tmp_dict_arg_value_45;
        tmp_key_value_45 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
        tmp_dict_arg_value_45 = tmp_class_creation_15__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_45, tmp_key_value_45);
        assert(!(tmp_res == -1));
        tmp_condition_result_88 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_88 != false) {
            goto branch_yes_58;
        } else {
            goto branch_no_58;
        }
    }
    branch_yes_58:;
    CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_15__class_decl_dict;
    tmp_dictdel_key = mod_consts[87];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 221;

        goto try_except_handler_81;
    }
    branch_no_58:;
    {
        nuitka_bool tmp_condition_result_89;
        PyObject *tmp_expression_value_131;
        CHECK_OBJECT(tmp_class_creation_15__metaclass);
        tmp_expression_value_131 = tmp_class_creation_15__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_131, mod_consts[88]);
        tmp_condition_result_89 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_89 == NUITKA_BOOL_TRUE) {
            goto branch_yes_59;
        } else {
            goto branch_no_59;
        }
    }
    branch_yes_59:;
    {
        PyObject *tmp_assign_source_212;
        PyObject *tmp_called_value_98;
        PyObject *tmp_expression_value_132;
        PyObject *tmp_args_value_53;
        PyObject *tmp_tuple_element_83;
        PyObject *tmp_kwargs_value_53;
        CHECK_OBJECT(tmp_class_creation_15__metaclass);
        tmp_expression_value_132 = tmp_class_creation_15__metaclass;
        tmp_called_value_98 = LOOKUP_ATTRIBUTE(tmp_expression_value_132, mod_consts[88]);
        if (tmp_called_value_98 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 221;

            goto try_except_handler_81;
        }
        tmp_tuple_element_83 = mod_consts[171];
        tmp_args_value_53 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_53, 0, tmp_tuple_element_83);
        CHECK_OBJECT(tmp_class_creation_15__bases);
        tmp_tuple_element_83 = tmp_class_creation_15__bases;
        PyTuple_SET_ITEM0(tmp_args_value_53, 1, tmp_tuple_element_83);
        CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
        tmp_kwargs_value_53 = tmp_class_creation_15__class_decl_dict;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 221;
        tmp_assign_source_212 = CALL_FUNCTION(tmp_called_value_98, tmp_args_value_53, tmp_kwargs_value_53);
        Py_DECREF(tmp_called_value_98);
        Py_DECREF(tmp_args_value_53);
        if (tmp_assign_source_212 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 221;

            goto try_except_handler_81;
        }
        assert(tmp_class_creation_15__prepared == NULL);
        tmp_class_creation_15__prepared = tmp_assign_source_212;
    }
    {
        bool tmp_condition_result_90;
        PyObject *tmp_operand_value_15;
        PyObject *tmp_expression_value_133;
        CHECK_OBJECT(tmp_class_creation_15__prepared);
        tmp_expression_value_133 = tmp_class_creation_15__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_133, mod_consts[89]);
        tmp_operand_value_15 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_15);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 221;

            goto try_except_handler_81;
        }
        tmp_condition_result_90 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_90 != false) {
            goto branch_yes_60;
        } else {
            goto branch_no_60;
        }
    }
    branch_yes_60:;
    {
        PyObject *tmp_raise_type_15;
        PyObject *tmp_raise_value_15;
        PyObject *tmp_left_value_22;
        PyObject *tmp_right_value_22;
        PyObject *tmp_tuple_element_84;
        PyObject *tmp_getattr_target_15;
        PyObject *tmp_getattr_attr_15;
        PyObject *tmp_getattr_default_15;
        tmp_raise_type_15 = PyExc_TypeError;
        tmp_left_value_22 = mod_consts[90];
        CHECK_OBJECT(tmp_class_creation_15__metaclass);
        tmp_getattr_target_15 = tmp_class_creation_15__metaclass;
        tmp_getattr_attr_15 = mod_consts[91];
        tmp_getattr_default_15 = mod_consts[92];
        tmp_tuple_element_84 = BUILTIN_GETATTR(tmp_getattr_target_15, tmp_getattr_attr_15, tmp_getattr_default_15);
        if (tmp_tuple_element_84 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 221;

            goto try_except_handler_81;
        }
        tmp_right_value_22 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_134;
            PyObject *tmp_type_arg_30;
            PyTuple_SET_ITEM(tmp_right_value_22, 0, tmp_tuple_element_84);
            CHECK_OBJECT(tmp_class_creation_15__prepared);
            tmp_type_arg_30 = tmp_class_creation_15__prepared;
            tmp_expression_value_134 = BUILTIN_TYPE1(tmp_type_arg_30);
            assert(!(tmp_expression_value_134 == NULL));
            tmp_tuple_element_84 = LOOKUP_ATTRIBUTE(tmp_expression_value_134, mod_consts[91]);
            Py_DECREF(tmp_expression_value_134);
            if (tmp_tuple_element_84 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 221;

                goto tuple_build_exception_16;
            }
            PyTuple_SET_ITEM(tmp_right_value_22, 1, tmp_tuple_element_84);
        }
        goto tuple_build_noexception_16;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_16:;
        Py_DECREF(tmp_right_value_22);
        goto try_except_handler_81;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_16:;
        tmp_raise_value_15 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_22, tmp_right_value_22);
        Py_DECREF(tmp_right_value_22);
        if (tmp_raise_value_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 221;

            goto try_except_handler_81;
        }
        exception_type = tmp_raise_type_15;
        Py_INCREF(tmp_raise_type_15);
        exception_value = tmp_raise_value_15;
        exception_lineno = 221;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_81;
    }
    branch_no_60:;
    goto branch_end_59;
    branch_no_59:;
    {
        PyObject *tmp_assign_source_213;
        tmp_assign_source_213 = PyDict_New();
        assert(tmp_class_creation_15__prepared == NULL);
        tmp_class_creation_15__prepared = tmp_assign_source_213;
    }
    branch_end_59:;
    {
        PyObject *tmp_assign_source_214;
        PyObject *tmp_called_value_99;
        PyObject *tmp_called_value_100;
        PyObject *tmp_args_value_54;
        PyObject *tmp_tuple_element_85;
        PyObject *tmp_expression_value_135;
        PyObject *tmp_expression_value_136;
        PyObject *tmp_kwargs_value_54;
        PyObject *tmp_args_element_value_69;
        tmp_called_value_100 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_100 == NULL)) {
            tmp_called_value_100 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_100 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_81;
        }
        tmp_expression_value_136 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_136 == NULL)) {
            tmp_expression_value_136 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_136 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_81;
        }
        tmp_expression_value_135 = LOOKUP_ATTRIBUTE(tmp_expression_value_136, mod_consts[19]);
        if (tmp_expression_value_135 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_81;
        }
        tmp_tuple_element_85 = LOOKUP_ATTRIBUTE(tmp_expression_value_135, mod_consts[172]);
        Py_DECREF(tmp_expression_value_135);
        if (tmp_tuple_element_85 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_81;
        }
        tmp_args_value_54 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_54, 0, tmp_tuple_element_85);
        tmp_kwargs_value_54 = PyDict_Copy(mod_consts[173]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 220;
        tmp_called_value_99 = CALL_FUNCTION(tmp_called_value_100, tmp_args_value_54, tmp_kwargs_value_54);
        Py_DECREF(tmp_args_value_54);
        Py_DECREF(tmp_kwargs_value_54);
        if (tmp_called_value_99 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_81;
        }
        {
            PyObject *tmp_set_locals_15;
            CHECK_OBJECT(tmp_class_creation_15__prepared);
            tmp_set_locals_15 = tmp_class_creation_15__prepared;
            locals_numba$core$typing$randomdecl$$$class__15_Numpy_gamma_221 = tmp_set_locals_15;
            Py_INCREF(tmp_set_locals_15);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[93];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__15_Numpy_gamma_221, mod_consts[94], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 221;

            goto try_except_handler_83;
        }
        tmp_dictset_value = mod_consts[171];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__15_Numpy_gamma_221, mod_consts[96], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 221;

            goto try_except_handler_83;
        }
        if (isFrameUnusable(cache_frame_9449bebfb93782894d0081a6b07208f3_31)) {
            Py_XDECREF(cache_frame_9449bebfb93782894d0081a6b07208f3_31);

#if _DEBUG_REFCOUNTS
            if (cache_frame_9449bebfb93782894d0081a6b07208f3_31 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_9449bebfb93782894d0081a6b07208f3_31 = MAKE_FUNCTION_FRAME(codeobj_9449bebfb93782894d0081a6b07208f3, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_9449bebfb93782894d0081a6b07208f3_31->m_type_description == NULL);
        frame_9449bebfb93782894d0081a6b07208f3_31 = cache_frame_9449bebfb93782894d0081a6b07208f3_31;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_9449bebfb93782894d0081a6b07208f3_31);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_9449bebfb93782894d0081a6b07208f3_31) == 2); // Frame stack

        // Framed code:
        // Tried code:
        {
            PyObject *tmp_assign_source_215;
            PyObject *tmp_iter_arg_16;
            tmp_iter_arg_16 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__15_Numpy_gamma_221, mod_consts[86]);

            if (tmp_iter_arg_16 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_iter_arg_16 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[86]);

                    if (unlikely(tmp_iter_arg_16 == NULL)) {
                        tmp_iter_arg_16 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[86]);
                    }

                    if (tmp_iter_arg_16 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 222;
                        type_description_2 = "o";
                        goto try_except_handler_84;
                    }
                    Py_INCREF(tmp_iter_arg_16);
                } else {
                    goto try_except_handler_84;
                }
            }

            tmp_assign_source_215 = MAKE_ITERATOR(tmp_iter_arg_16);
            Py_DECREF(tmp_iter_arg_16);
            if (tmp_assign_source_215 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 222;
                type_description_2 = "o";
                goto try_except_handler_84;
            }
            assert(tmp_Numpy_gamma$listcomp_1__$0 == NULL);
            tmp_Numpy_gamma$listcomp_1__$0 = tmp_assign_source_215;
        }
        {
            PyObject *tmp_assign_source_216;
            tmp_assign_source_216 = PyList_New(0);
            assert(tmp_Numpy_gamma$listcomp_1__contraction == NULL);
            tmp_Numpy_gamma$listcomp_1__contraction = tmp_assign_source_216;
        }
        if (isFrameUnusable(cache_frame_8a575ade3fd61f5ce5fc90452f0a13fd_32)) {
            Py_XDECREF(cache_frame_8a575ade3fd61f5ce5fc90452f0a13fd_32);

#if _DEBUG_REFCOUNTS
            if (cache_frame_8a575ade3fd61f5ce5fc90452f0a13fd_32 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_8a575ade3fd61f5ce5fc90452f0a13fd_32 = MAKE_FUNCTION_FRAME(codeobj_8a575ade3fd61f5ce5fc90452f0a13fd, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_8a575ade3fd61f5ce5fc90452f0a13fd_32->m_type_description == NULL);
        frame_8a575ade3fd61f5ce5fc90452f0a13fd_32 = cache_frame_8a575ade3fd61f5ce5fc90452f0a13fd_32;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_8a575ade3fd61f5ce5fc90452f0a13fd_32);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_8a575ade3fd61f5ce5fc90452f0a13fd_32) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_16:;
        {
            PyObject *tmp_next_source_16;
            PyObject *tmp_assign_source_217;
            CHECK_OBJECT(tmp_Numpy_gamma$listcomp_1__$0);
            tmp_next_source_16 = tmp_Numpy_gamma$listcomp_1__$0;
            tmp_assign_source_217 = ITERATOR_NEXT(tmp_next_source_16);
            if (tmp_assign_source_217 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_16;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_3 = "o";
                    exception_lineno = 222;
                    goto try_except_handler_85;
                }
            }

            {
                PyObject *old = tmp_Numpy_gamma$listcomp_1__iter_value_0;
                tmp_Numpy_gamma$listcomp_1__iter_value_0 = tmp_assign_source_217;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_218;
            CHECK_OBJECT(tmp_Numpy_gamma$listcomp_1__iter_value_0);
            tmp_assign_source_218 = tmp_Numpy_gamma$listcomp_1__iter_value_0;
            {
                PyObject *old = outline_30_var_tp;
                outline_30_var_tp = tmp_assign_source_218;
                Py_INCREF(outline_30_var_tp);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_16;
            PyObject *tmp_append_value_16;
            PyObject *tmp_called_value_101;
            PyObject *tmp_args_element_value_70;
            PyObject *tmp_args_element_value_71;
            PyObject *tmp_args_element_value_72;
            CHECK_OBJECT(tmp_Numpy_gamma$listcomp_1__contraction);
            tmp_append_list_16 = tmp_Numpy_gamma$listcomp_1__contraction;
            tmp_called_value_101 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[25]);

            if (unlikely(tmp_called_value_101 == NULL)) {
                tmp_called_value_101 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[25]);
            }

            if (tmp_called_value_101 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 222;
                type_description_3 = "o";
                goto try_except_handler_85;
            }
            CHECK_OBJECT(outline_30_var_tp);
            tmp_args_element_value_70 = outline_30_var_tp;
            CHECK_OBJECT(outline_30_var_tp);
            tmp_args_element_value_71 = outline_30_var_tp;
            CHECK_OBJECT(outline_30_var_tp);
            tmp_args_element_value_72 = outline_30_var_tp;
            frame_8a575ade3fd61f5ce5fc90452f0a13fd_32->m_frame.f_lineno = 222;
            {
                PyObject *call_args[] = {tmp_args_element_value_70, tmp_args_element_value_71, tmp_args_element_value_72};
                tmp_append_value_16 = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_101, call_args);
            }

            if (tmp_append_value_16 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 222;
                type_description_3 = "o";
                goto try_except_handler_85;
            }
            assert(PyList_Check(tmp_append_list_16));
            tmp_result = LIST_APPEND1(tmp_append_list_16, tmp_append_value_16);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 222;
                type_description_3 = "o";
                goto try_except_handler_85;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 222;
            type_description_3 = "o";
            goto try_except_handler_85;
        }
        goto loop_start_16;
        loop_end_16:;
        CHECK_OBJECT(tmp_Numpy_gamma$listcomp_1__contraction);
        tmp_dictset_value = tmp_Numpy_gamma$listcomp_1__contraction;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_85;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_85:;
        CHECK_OBJECT(tmp_Numpy_gamma$listcomp_1__$0);
        Py_DECREF(tmp_Numpy_gamma$listcomp_1__$0);
        tmp_Numpy_gamma$listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_Numpy_gamma$listcomp_1__contraction);
        Py_DECREF(tmp_Numpy_gamma$listcomp_1__contraction);
        tmp_Numpy_gamma$listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_Numpy_gamma$listcomp_1__iter_value_0);
        tmp_Numpy_gamma$listcomp_1__iter_value_0 = NULL;
        goto frame_return_exit_16;
        // Exception handler code:
        try_except_handler_85:;
        exception_keeper_type_81 = exception_type;
        exception_keeper_value_81 = exception_value;
        exception_keeper_tb_81 = exception_tb;
        exception_keeper_lineno_81 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Numpy_gamma$listcomp_1__$0);
        Py_DECREF(tmp_Numpy_gamma$listcomp_1__$0);
        tmp_Numpy_gamma$listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_Numpy_gamma$listcomp_1__contraction);
        Py_DECREF(tmp_Numpy_gamma$listcomp_1__contraction);
        tmp_Numpy_gamma$listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_Numpy_gamma$listcomp_1__iter_value_0);
        tmp_Numpy_gamma$listcomp_1__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_81;
        exception_value = exception_keeper_value_81;
        exception_tb = exception_keeper_tb_81;
        exception_lineno = exception_keeper_lineno_81;

        goto frame_exception_exit_32;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_8a575ade3fd61f5ce5fc90452f0a13fd_32);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_30;

        frame_return_exit_16:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_8a575ade3fd61f5ce5fc90452f0a13fd_32);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_84;

        frame_exception_exit_32:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_8a575ade3fd61f5ce5fc90452f0a13fd_32);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_8a575ade3fd61f5ce5fc90452f0a13fd_32, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_8a575ade3fd61f5ce5fc90452f0a13fd_32->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_8a575ade3fd61f5ce5fc90452f0a13fd_32, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_8a575ade3fd61f5ce5fc90452f0a13fd_32,
            type_description_3,
            outline_30_var_tp
        );


        // Release cached frame if used for exception.
        if (frame_8a575ade3fd61f5ce5fc90452f0a13fd_32 == cache_frame_8a575ade3fd61f5ce5fc90452f0a13fd_32) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_8a575ade3fd61f5ce5fc90452f0a13fd_32);
            cache_frame_8a575ade3fd61f5ce5fc90452f0a13fd_32 = NULL;
        }

        assertFrameObject(frame_8a575ade3fd61f5ce5fc90452f0a13fd_32);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_31;

        frame_no_exception_30:;
        goto skip_nested_handling_30;
        nested_frame_exit_31:;
        type_description_2 = "o";
        goto try_except_handler_84;
        skip_nested_handling_30:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_84:;
        Py_XDECREF(outline_30_var_tp);
        outline_30_var_tp = NULL;
        goto outline_result_31;
        // Exception handler code:
        try_except_handler_84:;
        exception_keeper_type_82 = exception_type;
        exception_keeper_value_82 = exception_value;
        exception_keeper_tb_82 = exception_tb;
        exception_keeper_lineno_82 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_30_var_tp);
        outline_30_var_tp = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_82;
        exception_value = exception_keeper_value_82;
        exception_tb = exception_keeper_tb_82;
        exception_lineno = exception_keeper_lineno_82;

        goto outline_exception_31;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_31:;
        exception_lineno = 222;
        goto frame_exception_exit_31;
        outline_result_31:;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__15_Numpy_gamma_221, mod_consts[30], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 222;
            type_description_2 = "o";
            goto frame_exception_exit_31;
        }
        {
            PyObject *tmp_assign_source_219;
            tmp_assign_source_219 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__15_Numpy_gamma_221, mod_consts[30]);

            if (unlikely(tmp_assign_source_219 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[30]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 223;
                type_description_2 = "o";
                goto frame_exception_exit_31;
            }

            if (tmp_assign_source_219 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 223;
                type_description_2 = "o";
                goto frame_exception_exit_31;
            }
            assert(tmp_Numpy_gamma$class_inplace_1__value == NULL);
            tmp_Numpy_gamma$class_inplace_1__value = tmp_assign_source_219;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_220;
            PyObject *tmp_left_value_23;
            PyObject *tmp_right_value_23;
            CHECK_OBJECT(tmp_Numpy_gamma$class_inplace_1__value);
            tmp_left_value_23 = tmp_Numpy_gamma$class_inplace_1__value;
            // Tried code:
            {
                PyObject *tmp_assign_source_221;
                PyObject *tmp_iter_arg_17;
                tmp_iter_arg_17 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__15_Numpy_gamma_221, mod_consts[86]);

                if (tmp_iter_arg_17 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_iter_arg_17 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[86]);

                        if (unlikely(tmp_iter_arg_17 == NULL)) {
                            tmp_iter_arg_17 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[86]);
                        }

                        if (tmp_iter_arg_17 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 223;
                            type_description_2 = "o";
                            goto try_except_handler_87;
                        }
                        Py_INCREF(tmp_iter_arg_17);
                    } else {
                        goto try_except_handler_87;
                    }
                }

                tmp_assign_source_221 = MAKE_ITERATOR(tmp_iter_arg_17);
                Py_DECREF(tmp_iter_arg_17);
                if (tmp_assign_source_221 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 223;
                    type_description_2 = "o";
                    goto try_except_handler_87;
                }
                assert(tmp_Numpy_gamma$listcomp_2__$0 == NULL);
                tmp_Numpy_gamma$listcomp_2__$0 = tmp_assign_source_221;
            }
            {
                PyObject *tmp_assign_source_222;
                tmp_assign_source_222 = PyList_New(0);
                assert(tmp_Numpy_gamma$listcomp_2__contraction == NULL);
                tmp_Numpy_gamma$listcomp_2__contraction = tmp_assign_source_222;
            }
            if (isFrameUnusable(cache_frame_9ac30cfb02e28d89e3d7ab4e0faedd19_33)) {
                Py_XDECREF(cache_frame_9ac30cfb02e28d89e3d7ab4e0faedd19_33);

#if _DEBUG_REFCOUNTS
                if (cache_frame_9ac30cfb02e28d89e3d7ab4e0faedd19_33 == NULL) {
                    count_active_frame_cache_instances += 1;
                } else {
                    count_released_frame_cache_instances += 1;
                }
                count_allocated_frame_cache_instances += 1;
#endif
                cache_frame_9ac30cfb02e28d89e3d7ab4e0faedd19_33 = MAKE_FUNCTION_FRAME(codeobj_9ac30cfb02e28d89e3d7ab4e0faedd19, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
            } else {
                count_hit_frame_cache_instances += 1;
#endif
            }
            assert(cache_frame_9ac30cfb02e28d89e3d7ab4e0faedd19_33->m_type_description == NULL);
            frame_9ac30cfb02e28d89e3d7ab4e0faedd19_33 = cache_frame_9ac30cfb02e28d89e3d7ab4e0faedd19_33;

            // Push the new frame as the currently active one.
            pushFrameStack(frame_9ac30cfb02e28d89e3d7ab4e0faedd19_33);

            // Mark the frame object as in use, ref count 1 will be up for reuse.
            assert(Py_REFCNT(frame_9ac30cfb02e28d89e3d7ab4e0faedd19_33) == 2); // Frame stack

            // Framed code:
            // Tried code:
            loop_start_17:;
            {
                PyObject *tmp_next_source_17;
                PyObject *tmp_assign_source_223;
                CHECK_OBJECT(tmp_Numpy_gamma$listcomp_2__$0);
                tmp_next_source_17 = tmp_Numpy_gamma$listcomp_2__$0;
                tmp_assign_source_223 = ITERATOR_NEXT(tmp_next_source_17);
                if (tmp_assign_source_223 == NULL) {
                    if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                        goto loop_end_17;
                    } else {

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        type_description_3 = "o";
                        exception_lineno = 223;
                        goto try_except_handler_88;
                    }
                }

                {
                    PyObject *old = tmp_Numpy_gamma$listcomp_2__iter_value_0;
                    tmp_Numpy_gamma$listcomp_2__iter_value_0 = tmp_assign_source_223;
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_assign_source_224;
                CHECK_OBJECT(tmp_Numpy_gamma$listcomp_2__iter_value_0);
                tmp_assign_source_224 = tmp_Numpy_gamma$listcomp_2__iter_value_0;
                {
                    PyObject *old = outline_31_var_tp;
                    outline_31_var_tp = tmp_assign_source_224;
                    Py_INCREF(outline_31_var_tp);
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_append_list_17;
                PyObject *tmp_append_value_17;
                PyObject *tmp_called_value_102;
                PyObject *tmp_args_element_value_73;
                PyObject *tmp_args_element_value_74;
                CHECK_OBJECT(tmp_Numpy_gamma$listcomp_2__contraction);
                tmp_append_list_17 = tmp_Numpy_gamma$listcomp_2__contraction;
                tmp_called_value_102 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[25]);

                if (unlikely(tmp_called_value_102 == NULL)) {
                    tmp_called_value_102 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[25]);
                }

                if (tmp_called_value_102 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 223;
                    type_description_3 = "o";
                    goto try_except_handler_88;
                }
                CHECK_OBJECT(outline_31_var_tp);
                tmp_args_element_value_73 = outline_31_var_tp;
                CHECK_OBJECT(outline_31_var_tp);
                tmp_args_element_value_74 = outline_31_var_tp;
                frame_9ac30cfb02e28d89e3d7ab4e0faedd19_33->m_frame.f_lineno = 223;
                {
                    PyObject *call_args[] = {tmp_args_element_value_73, tmp_args_element_value_74};
                    tmp_append_value_17 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_102, call_args);
                }

                if (tmp_append_value_17 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 223;
                    type_description_3 = "o";
                    goto try_except_handler_88;
                }
                assert(PyList_Check(tmp_append_list_17));
                tmp_result = LIST_APPEND1(tmp_append_list_17, tmp_append_value_17);
                if (tmp_result == false) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 223;
                    type_description_3 = "o";
                    goto try_except_handler_88;
                }
            }
            if (CONSIDER_THREADING() == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 223;
                type_description_3 = "o";
                goto try_except_handler_88;
            }
            goto loop_start_17;
            loop_end_17:;
            CHECK_OBJECT(tmp_Numpy_gamma$listcomp_2__contraction);
            tmp_right_value_23 = tmp_Numpy_gamma$listcomp_2__contraction;
            Py_INCREF(tmp_right_value_23);
            goto try_return_handler_88;
            NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
            return NULL;
            // Return handler code:
            try_return_handler_88:;
            CHECK_OBJECT(tmp_Numpy_gamma$listcomp_2__$0);
            Py_DECREF(tmp_Numpy_gamma$listcomp_2__$0);
            tmp_Numpy_gamma$listcomp_2__$0 = NULL;
            CHECK_OBJECT(tmp_Numpy_gamma$listcomp_2__contraction);
            Py_DECREF(tmp_Numpy_gamma$listcomp_2__contraction);
            tmp_Numpy_gamma$listcomp_2__contraction = NULL;
            Py_XDECREF(tmp_Numpy_gamma$listcomp_2__iter_value_0);
            tmp_Numpy_gamma$listcomp_2__iter_value_0 = NULL;
            goto frame_return_exit_17;
            // Exception handler code:
            try_except_handler_88:;
            exception_keeper_type_83 = exception_type;
            exception_keeper_value_83 = exception_value;
            exception_keeper_tb_83 = exception_tb;
            exception_keeper_lineno_83 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT(tmp_Numpy_gamma$listcomp_2__$0);
            Py_DECREF(tmp_Numpy_gamma$listcomp_2__$0);
            tmp_Numpy_gamma$listcomp_2__$0 = NULL;
            CHECK_OBJECT(tmp_Numpy_gamma$listcomp_2__contraction);
            Py_DECREF(tmp_Numpy_gamma$listcomp_2__contraction);
            tmp_Numpy_gamma$listcomp_2__contraction = NULL;
            Py_XDECREF(tmp_Numpy_gamma$listcomp_2__iter_value_0);
            tmp_Numpy_gamma$listcomp_2__iter_value_0 = NULL;
            // Re-raise.
            exception_type = exception_keeper_type_83;
            exception_value = exception_keeper_value_83;
            exception_tb = exception_keeper_tb_83;
            exception_lineno = exception_keeper_lineno_83;

            goto frame_exception_exit_33;
            // End of try:

#if 0
            RESTORE_FRAME_EXCEPTION(frame_9ac30cfb02e28d89e3d7ab4e0faedd19_33);
#endif

            // Put the previous frame back on top.
            popFrameStack();

            goto frame_no_exception_31;

            frame_return_exit_17:;
#if 0
            RESTORE_FRAME_EXCEPTION(frame_9ac30cfb02e28d89e3d7ab4e0faedd19_33);
#endif

            // Put the previous frame back on top.
            popFrameStack();

            goto try_return_handler_87;

            frame_exception_exit_33:;

#if 0
            RESTORE_FRAME_EXCEPTION(frame_9ac30cfb02e28d89e3d7ab4e0faedd19_33);
#endif

            if (exception_tb == NULL) {
                exception_tb = MAKE_TRACEBACK(frame_9ac30cfb02e28d89e3d7ab4e0faedd19_33, exception_lineno);
            } else if (exception_tb->tb_frame != &frame_9ac30cfb02e28d89e3d7ab4e0faedd19_33->m_frame) {
                exception_tb = ADD_TRACEBACK(exception_tb, frame_9ac30cfb02e28d89e3d7ab4e0faedd19_33, exception_lineno);
            }

            // Attaches locals to frame if any.
            Nuitka_Frame_AttachLocals(
                frame_9ac30cfb02e28d89e3d7ab4e0faedd19_33,
                type_description_3,
                outline_31_var_tp
            );


            // Release cached frame if used for exception.
            if (frame_9ac30cfb02e28d89e3d7ab4e0faedd19_33 == cache_frame_9ac30cfb02e28d89e3d7ab4e0faedd19_33) {
#if _DEBUG_REFCOUNTS
                count_active_frame_cache_instances -= 1;
                count_released_frame_cache_instances += 1;
#endif

                Py_DECREF(cache_frame_9ac30cfb02e28d89e3d7ab4e0faedd19_33);
                cache_frame_9ac30cfb02e28d89e3d7ab4e0faedd19_33 = NULL;
            }

            assertFrameObject(frame_9ac30cfb02e28d89e3d7ab4e0faedd19_33);

            // Put the previous frame back on top.
            popFrameStack();

            // Return the error.
            goto nested_frame_exit_32;

            frame_no_exception_31:;
            goto skip_nested_handling_31;
            nested_frame_exit_32:;
            type_description_2 = "o";
            goto try_except_handler_87;
            skip_nested_handling_31:;
            NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
            return NULL;
            // Return handler code:
            try_return_handler_87:;
            Py_XDECREF(outline_31_var_tp);
            outline_31_var_tp = NULL;
            goto outline_result_32;
            // Exception handler code:
            try_except_handler_87:;
            exception_keeper_type_84 = exception_type;
            exception_keeper_value_84 = exception_value;
            exception_keeper_tb_84 = exception_tb;
            exception_keeper_lineno_84 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF(outline_31_var_tp);
            outline_31_var_tp = NULL;
            // Re-raise.
            exception_type = exception_keeper_type_84;
            exception_value = exception_keeper_value_84;
            exception_tb = exception_keeper_tb_84;
            exception_lineno = exception_keeper_lineno_84;

            goto outline_exception_32;
            // End of try:
            NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
            return NULL;
            outline_exception_32:;
            exception_lineno = 223;
            goto try_except_handler_86;
            outline_result_32:;
            tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE(&tmp_left_value_23, tmp_right_value_23);
            Py_DECREF(tmp_right_value_23);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 223;
                type_description_2 = "o";
                goto try_except_handler_86;
            }
            tmp_assign_source_220 = tmp_left_value_23;
            tmp_Numpy_gamma$class_inplace_1__value = tmp_assign_source_220;

        }
        CHECK_OBJECT(tmp_Numpy_gamma$class_inplace_1__value);
        tmp_dictset_value = tmp_Numpy_gamma$class_inplace_1__value;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__15_Numpy_gamma_221, mod_consts[30], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 223;
            type_description_2 = "o";
            goto try_except_handler_86;
        }
        goto try_end_23;
        // Exception handler code:
        try_except_handler_86:;
        exception_keeper_type_85 = exception_type;
        exception_keeper_value_85 = exception_value;
        exception_keeper_tb_85 = exception_tb;
        exception_keeper_lineno_85 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Numpy_gamma$class_inplace_1__value);
        Py_DECREF(tmp_Numpy_gamma$class_inplace_1__value);
        tmp_Numpy_gamma$class_inplace_1__value = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_85;
        exception_value = exception_keeper_value_85;
        exception_tb = exception_keeper_tb_85;
        exception_lineno = exception_keeper_lineno_85;

        goto frame_exception_exit_31;
        // End of try:
        try_end_23:;
        CHECK_OBJECT(tmp_Numpy_gamma$class_inplace_1__value);
        Py_DECREF(tmp_Numpy_gamma$class_inplace_1__value);
        tmp_Numpy_gamma$class_inplace_1__value = NULL;


        tmp_dictset_value = MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__12_generic();

        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__15_Numpy_gamma_221, mod_consts[110], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 225;
            type_description_2 = "o";
            goto frame_exception_exit_31;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_9449bebfb93782894d0081a6b07208f3_31);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_32;

        frame_exception_exit_31:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_9449bebfb93782894d0081a6b07208f3_31);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_9449bebfb93782894d0081a6b07208f3_31, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_9449bebfb93782894d0081a6b07208f3_31->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_9449bebfb93782894d0081a6b07208f3_31, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_9449bebfb93782894d0081a6b07208f3_31,
            type_description_2,
            outline_29_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_9449bebfb93782894d0081a6b07208f3_31 == cache_frame_9449bebfb93782894d0081a6b07208f3_31) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_9449bebfb93782894d0081a6b07208f3_31);
            cache_frame_9449bebfb93782894d0081a6b07208f3_31 = NULL;
        }

        assertFrameObject(frame_9449bebfb93782894d0081a6b07208f3_31);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_30;

        frame_no_exception_32:;
        goto skip_nested_handling_32;
        nested_frame_exit_30:;

        goto try_except_handler_83;
        skip_nested_handling_32:;
        {
            nuitka_bool tmp_condition_result_91;
            PyObject *tmp_cmp_expr_left_16;
            PyObject *tmp_cmp_expr_right_16;
            CHECK_OBJECT(tmp_class_creation_15__bases);
            tmp_cmp_expr_left_16 = tmp_class_creation_15__bases;
            CHECK_OBJECT(tmp_class_creation_15__bases_orig);
            tmp_cmp_expr_right_16 = tmp_class_creation_15__bases_orig;
            tmp_condition_result_91 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_16, tmp_cmp_expr_right_16);
            if (tmp_condition_result_91 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 221;

                goto try_except_handler_83;
            }
            if (tmp_condition_result_91 == NUITKA_BOOL_TRUE) {
                goto branch_yes_61;
            } else {
                goto branch_no_61;
            }
            assert(tmp_condition_result_91 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_61:;
        CHECK_OBJECT(tmp_class_creation_15__bases_orig);
        tmp_dictset_value = tmp_class_creation_15__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__15_Numpy_gamma_221, mod_consts[98], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 221;

            goto try_except_handler_83;
        }
        branch_no_61:;
        {
            PyObject *tmp_assign_source_225;
            PyObject *tmp_called_value_103;
            PyObject *tmp_args_value_55;
            PyObject *tmp_tuple_element_86;
            PyObject *tmp_kwargs_value_55;
            CHECK_OBJECT(tmp_class_creation_15__metaclass);
            tmp_called_value_103 = tmp_class_creation_15__metaclass;
            tmp_tuple_element_86 = mod_consts[171];
            tmp_args_value_55 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_55, 0, tmp_tuple_element_86);
            CHECK_OBJECT(tmp_class_creation_15__bases);
            tmp_tuple_element_86 = tmp_class_creation_15__bases;
            PyTuple_SET_ITEM0(tmp_args_value_55, 1, tmp_tuple_element_86);
            tmp_tuple_element_86 = locals_numba$core$typing$randomdecl$$$class__15_Numpy_gamma_221;
            PyTuple_SET_ITEM0(tmp_args_value_55, 2, tmp_tuple_element_86);
            CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
            tmp_kwargs_value_55 = tmp_class_creation_15__class_decl_dict;
            frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 221;
            tmp_assign_source_225 = CALL_FUNCTION(tmp_called_value_103, tmp_args_value_55, tmp_kwargs_value_55);
            Py_DECREF(tmp_args_value_55);
            if (tmp_assign_source_225 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 221;

                goto try_except_handler_83;
            }
            assert(outline_29_var___class__ == NULL);
            outline_29_var___class__ = tmp_assign_source_225;
        }
        CHECK_OBJECT(outline_29_var___class__);
        tmp_args_element_value_69 = outline_29_var___class__;
        Py_INCREF(tmp_args_element_value_69);
        goto try_return_handler_83;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_83:;
        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__15_Numpy_gamma_221);
        locals_numba$core$typing$randomdecl$$$class__15_Numpy_gamma_221 = NULL;
        goto try_return_handler_82;
        // Exception handler code:
        try_except_handler_83:;
        exception_keeper_type_86 = exception_type;
        exception_keeper_value_86 = exception_value;
        exception_keeper_tb_86 = exception_tb;
        exception_keeper_lineno_86 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__15_Numpy_gamma_221);
        locals_numba$core$typing$randomdecl$$$class__15_Numpy_gamma_221 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_86;
        exception_value = exception_keeper_value_86;
        exception_tb = exception_keeper_tb_86;
        exception_lineno = exception_keeper_lineno_86;

        goto try_except_handler_82;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_82:;
        CHECK_OBJECT(outline_29_var___class__);
        Py_DECREF(outline_29_var___class__);
        outline_29_var___class__ = NULL;
        goto outline_result_30;
        // Exception handler code:
        try_except_handler_82:;
        exception_keeper_type_87 = exception_type;
        exception_keeper_value_87 = exception_value;
        exception_keeper_tb_87 = exception_tb;
        exception_keeper_lineno_87 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_87;
        exception_value = exception_keeper_value_87;
        exception_tb = exception_keeper_tb_87;
        exception_lineno = exception_keeper_lineno_87;

        goto outline_exception_30;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_30:;
        exception_lineno = 221;
        goto try_except_handler_81;
        outline_result_30:;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 220;
        tmp_assign_source_214 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_99, tmp_args_element_value_69);
        Py_DECREF(tmp_called_value_99);
        Py_DECREF(tmp_args_element_value_69);
        if (tmp_assign_source_214 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;

            goto try_except_handler_81;
        }
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[171], tmp_assign_source_214);
    }
    goto try_end_24;
    // Exception handler code:
    try_except_handler_81:;
    exception_keeper_type_88 = exception_type;
    exception_keeper_value_88 = exception_value;
    exception_keeper_tb_88 = exception_tb;
    exception_keeper_lineno_88 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_15__bases_orig);
    tmp_class_creation_15__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_15__bases);
    tmp_class_creation_15__bases = NULL;
    Py_XDECREF(tmp_class_creation_15__class_decl_dict);
    tmp_class_creation_15__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_15__metaclass);
    tmp_class_creation_15__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_15__prepared);
    tmp_class_creation_15__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_88;
    exception_value = exception_keeper_value_88;
    exception_tb = exception_keeper_tb_88;
    exception_lineno = exception_keeper_lineno_88;

    goto frame_exception_exit_1;
    // End of try:
    try_end_24:;
    CHECK_OBJECT(tmp_class_creation_15__bases_orig);
    Py_DECREF(tmp_class_creation_15__bases_orig);
    tmp_class_creation_15__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_15__bases);
    Py_DECREF(tmp_class_creation_15__bases);
    tmp_class_creation_15__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
    Py_DECREF(tmp_class_creation_15__class_decl_dict);
    tmp_class_creation_15__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_15__metaclass);
    Py_DECREF(tmp_class_creation_15__metaclass);
    tmp_class_creation_15__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_15__prepared);
    Py_DECREF(tmp_class_creation_15__prepared);
    tmp_class_creation_15__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_226;
        PyObject *tmp_tuple_element_87;
        tmp_tuple_element_87 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[99]);

        if (unlikely(tmp_tuple_element_87 == NULL)) {
            tmp_tuple_element_87 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[99]);
        }

        if (tmp_tuple_element_87 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;

            goto try_except_handler_89;
        }
        tmp_assign_source_226 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_226, 0, tmp_tuple_element_87);
        assert(tmp_class_creation_16__bases_orig == NULL);
        tmp_class_creation_16__bases_orig = tmp_assign_source_226;
    }
    {
        PyObject *tmp_assign_source_227;
        PyObject *tmp_dircall_arg1_16;
        CHECK_OBJECT(tmp_class_creation_16__bases_orig);
        tmp_dircall_arg1_16 = tmp_class_creation_16__bases_orig;
        Py_INCREF(tmp_dircall_arg1_16);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_16};
            tmp_assign_source_227 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_227 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;

            goto try_except_handler_89;
        }
        assert(tmp_class_creation_16__bases == NULL);
        tmp_class_creation_16__bases = tmp_assign_source_227;
    }
    {
        PyObject *tmp_assign_source_228;
        tmp_assign_source_228 = PyDict_New();
        assert(tmp_class_creation_16__class_decl_dict == NULL);
        tmp_class_creation_16__class_decl_dict = tmp_assign_source_228;
    }
    {
        PyObject *tmp_assign_source_229;
        PyObject *tmp_metaclass_value_16;
        bool tmp_condition_result_92;
        PyObject *tmp_key_value_46;
        PyObject *tmp_dict_arg_value_46;
        PyObject *tmp_dict_arg_value_47;
        PyObject *tmp_key_value_47;
        nuitka_bool tmp_condition_result_93;
        int tmp_truth_name_16;
        PyObject *tmp_type_arg_31;
        PyObject *tmp_expression_value_137;
        PyObject *tmp_subscript_value_16;
        PyObject *tmp_bases_value_16;
        tmp_key_value_46 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
        tmp_dict_arg_value_46 = tmp_class_creation_16__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_46, tmp_key_value_46);
        assert(!(tmp_res == -1));
        tmp_condition_result_92 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_92 != false) {
            goto condexpr_true_31;
        } else {
            goto condexpr_false_31;
        }
        condexpr_true_31:;
        CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
        tmp_dict_arg_value_47 = tmp_class_creation_16__class_decl_dict;
        tmp_key_value_47 = mod_consts[87];
        tmp_metaclass_value_16 = DICT_GET_ITEM0(tmp_dict_arg_value_47, tmp_key_value_47);
        if (tmp_metaclass_value_16 == NULL) {
            tmp_metaclass_value_16 = Py_None;
        }
        assert(!(tmp_metaclass_value_16 == NULL));
        Py_INCREF(tmp_metaclass_value_16);
        goto condexpr_end_31;
        condexpr_false_31:;
        CHECK_OBJECT(tmp_class_creation_16__bases);
        tmp_truth_name_16 = CHECK_IF_TRUE(tmp_class_creation_16__bases);
        if (tmp_truth_name_16 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;

            goto try_except_handler_89;
        }
        tmp_condition_result_93 = tmp_truth_name_16 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_93 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_32;
        } else {
            goto condexpr_false_32;
        }
        condexpr_true_32:;
        CHECK_OBJECT(tmp_class_creation_16__bases);
        tmp_expression_value_137 = tmp_class_creation_16__bases;
        tmp_subscript_value_16 = mod_consts[13];
        tmp_type_arg_31 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_137, tmp_subscript_value_16, 0);
        if (tmp_type_arg_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;

            goto try_except_handler_89;
        }
        tmp_metaclass_value_16 = BUILTIN_TYPE1(tmp_type_arg_31);
        Py_DECREF(tmp_type_arg_31);
        if (tmp_metaclass_value_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;

            goto try_except_handler_89;
        }
        goto condexpr_end_32;
        condexpr_false_32:;
        tmp_metaclass_value_16 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_16);
        condexpr_end_32:;
        condexpr_end_31:;
        CHECK_OBJECT(tmp_class_creation_16__bases);
        tmp_bases_value_16 = tmp_class_creation_16__bases;
        tmp_assign_source_229 = SELECT_METACLASS(tmp_metaclass_value_16, tmp_bases_value_16);
        Py_DECREF(tmp_metaclass_value_16);
        if (tmp_assign_source_229 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;

            goto try_except_handler_89;
        }
        assert(tmp_class_creation_16__metaclass == NULL);
        tmp_class_creation_16__metaclass = tmp_assign_source_229;
    }
    {
        bool tmp_condition_result_94;
        PyObject *tmp_key_value_48;
        PyObject *tmp_dict_arg_value_48;
        tmp_key_value_48 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
        tmp_dict_arg_value_48 = tmp_class_creation_16__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_48, tmp_key_value_48);
        assert(!(tmp_res == -1));
        tmp_condition_result_94 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_94 != false) {
            goto branch_yes_62;
        } else {
            goto branch_no_62;
        }
    }
    branch_yes_62:;
    CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_16__class_decl_dict;
    tmp_dictdel_key = mod_consts[87];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 231;

        goto try_except_handler_89;
    }
    branch_no_62:;
    {
        nuitka_bool tmp_condition_result_95;
        PyObject *tmp_expression_value_138;
        CHECK_OBJECT(tmp_class_creation_16__metaclass);
        tmp_expression_value_138 = tmp_class_creation_16__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_138, mod_consts[88]);
        tmp_condition_result_95 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_95 == NUITKA_BOOL_TRUE) {
            goto branch_yes_63;
        } else {
            goto branch_no_63;
        }
    }
    branch_yes_63:;
    {
        PyObject *tmp_assign_source_230;
        PyObject *tmp_called_value_104;
        PyObject *tmp_expression_value_139;
        PyObject *tmp_args_value_56;
        PyObject *tmp_tuple_element_88;
        PyObject *tmp_kwargs_value_56;
        CHECK_OBJECT(tmp_class_creation_16__metaclass);
        tmp_expression_value_139 = tmp_class_creation_16__metaclass;
        tmp_called_value_104 = LOOKUP_ATTRIBUTE(tmp_expression_value_139, mod_consts[88]);
        if (tmp_called_value_104 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;

            goto try_except_handler_89;
        }
        tmp_tuple_element_88 = mod_consts[175];
        tmp_args_value_56 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_56, 0, tmp_tuple_element_88);
        CHECK_OBJECT(tmp_class_creation_16__bases);
        tmp_tuple_element_88 = tmp_class_creation_16__bases;
        PyTuple_SET_ITEM0(tmp_args_value_56, 1, tmp_tuple_element_88);
        CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
        tmp_kwargs_value_56 = tmp_class_creation_16__class_decl_dict;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 231;
        tmp_assign_source_230 = CALL_FUNCTION(tmp_called_value_104, tmp_args_value_56, tmp_kwargs_value_56);
        Py_DECREF(tmp_called_value_104);
        Py_DECREF(tmp_args_value_56);
        if (tmp_assign_source_230 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;

            goto try_except_handler_89;
        }
        assert(tmp_class_creation_16__prepared == NULL);
        tmp_class_creation_16__prepared = tmp_assign_source_230;
    }
    {
        bool tmp_condition_result_96;
        PyObject *tmp_operand_value_16;
        PyObject *tmp_expression_value_140;
        CHECK_OBJECT(tmp_class_creation_16__prepared);
        tmp_expression_value_140 = tmp_class_creation_16__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_140, mod_consts[89]);
        tmp_operand_value_16 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_16);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;

            goto try_except_handler_89;
        }
        tmp_condition_result_96 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_96 != false) {
            goto branch_yes_64;
        } else {
            goto branch_no_64;
        }
    }
    branch_yes_64:;
    {
        PyObject *tmp_raise_type_16;
        PyObject *tmp_raise_value_16;
        PyObject *tmp_left_value_24;
        PyObject *tmp_right_value_24;
        PyObject *tmp_tuple_element_89;
        PyObject *tmp_getattr_target_16;
        PyObject *tmp_getattr_attr_16;
        PyObject *tmp_getattr_default_16;
        tmp_raise_type_16 = PyExc_TypeError;
        tmp_left_value_24 = mod_consts[90];
        CHECK_OBJECT(tmp_class_creation_16__metaclass);
        tmp_getattr_target_16 = tmp_class_creation_16__metaclass;
        tmp_getattr_attr_16 = mod_consts[91];
        tmp_getattr_default_16 = mod_consts[92];
        tmp_tuple_element_89 = BUILTIN_GETATTR(tmp_getattr_target_16, tmp_getattr_attr_16, tmp_getattr_default_16);
        if (tmp_tuple_element_89 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;

            goto try_except_handler_89;
        }
        tmp_right_value_24 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_141;
            PyObject *tmp_type_arg_32;
            PyTuple_SET_ITEM(tmp_right_value_24, 0, tmp_tuple_element_89);
            CHECK_OBJECT(tmp_class_creation_16__prepared);
            tmp_type_arg_32 = tmp_class_creation_16__prepared;
            tmp_expression_value_141 = BUILTIN_TYPE1(tmp_type_arg_32);
            assert(!(tmp_expression_value_141 == NULL));
            tmp_tuple_element_89 = LOOKUP_ATTRIBUTE(tmp_expression_value_141, mod_consts[91]);
            Py_DECREF(tmp_expression_value_141);
            if (tmp_tuple_element_89 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 231;

                goto tuple_build_exception_17;
            }
            PyTuple_SET_ITEM(tmp_right_value_24, 1, tmp_tuple_element_89);
        }
        goto tuple_build_noexception_17;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_17:;
        Py_DECREF(tmp_right_value_24);
        goto try_except_handler_89;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_17:;
        tmp_raise_value_16 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_24, tmp_right_value_24);
        Py_DECREF(tmp_right_value_24);
        if (tmp_raise_value_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;

            goto try_except_handler_89;
        }
        exception_type = tmp_raise_type_16;
        Py_INCREF(tmp_raise_type_16);
        exception_value = tmp_raise_value_16;
        exception_lineno = 231;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_89;
    }
    branch_no_64:;
    goto branch_end_63;
    branch_no_63:;
    {
        PyObject *tmp_assign_source_231;
        tmp_assign_source_231 = PyDict_New();
        assert(tmp_class_creation_16__prepared == NULL);
        tmp_class_creation_16__prepared = tmp_assign_source_231;
    }
    branch_end_63:;
    {
        PyObject *tmp_assign_source_232;
        PyObject *tmp_called_value_105;
        PyObject *tmp_called_value_106;
        PyObject *tmp_args_value_57;
        PyObject *tmp_tuple_element_90;
        PyObject *tmp_expression_value_142;
        PyObject *tmp_expression_value_143;
        PyObject *tmp_kwargs_value_57;
        PyObject *tmp_args_element_value_75;
        tmp_called_value_106 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_106 == NULL)) {
            tmp_called_value_106 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_106 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 230;

            goto try_except_handler_89;
        }
        tmp_expression_value_143 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_143 == NULL)) {
            tmp_expression_value_143 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_143 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 230;

            goto try_except_handler_89;
        }
        tmp_expression_value_142 = LOOKUP_ATTRIBUTE(tmp_expression_value_143, mod_consts[19]);
        if (tmp_expression_value_142 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 230;

            goto try_except_handler_89;
        }
        tmp_tuple_element_90 = LOOKUP_ATTRIBUTE(tmp_expression_value_142, mod_consts[176]);
        Py_DECREF(tmp_expression_value_142);
        if (tmp_tuple_element_90 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 230;

            goto try_except_handler_89;
        }
        tmp_args_value_57 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_57, 0, tmp_tuple_element_90);
        tmp_kwargs_value_57 = PyDict_Copy(mod_consts[177]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 230;
        tmp_called_value_105 = CALL_FUNCTION(tmp_called_value_106, tmp_args_value_57, tmp_kwargs_value_57);
        Py_DECREF(tmp_args_value_57);
        Py_DECREF(tmp_kwargs_value_57);
        if (tmp_called_value_105 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 230;

            goto try_except_handler_89;
        }
        {
            PyObject *tmp_set_locals_16;
            CHECK_OBJECT(tmp_class_creation_16__prepared);
            tmp_set_locals_16 = tmp_class_creation_16__prepared;
            locals_numba$core$typing$randomdecl$$$class__16_Random_ternary_distribution_231 = tmp_set_locals_16;
            Py_INCREF(tmp_set_locals_16);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[93];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__16_Random_ternary_distribution_231, mod_consts[94], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;

            goto try_except_handler_91;
        }
        tmp_dictset_value = mod_consts[175];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__16_Random_ternary_distribution_231, mod_consts[96], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;

            goto try_except_handler_91;
        }
        if (isFrameUnusable(cache_frame_1c03f75f56e92bec8a64f7bd23a506b0_34)) {
            Py_XDECREF(cache_frame_1c03f75f56e92bec8a64f7bd23a506b0_34);

#if _DEBUG_REFCOUNTS
            if (cache_frame_1c03f75f56e92bec8a64f7bd23a506b0_34 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_1c03f75f56e92bec8a64f7bd23a506b0_34 = MAKE_FUNCTION_FRAME(codeobj_1c03f75f56e92bec8a64f7bd23a506b0, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_1c03f75f56e92bec8a64f7bd23a506b0_34->m_type_description == NULL);
        frame_1c03f75f56e92bec8a64f7bd23a506b0_34 = cache_frame_1c03f75f56e92bec8a64f7bd23a506b0_34;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_1c03f75f56e92bec8a64f7bd23a506b0_34);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_1c03f75f56e92bec8a64f7bd23a506b0_34) == 2); // Frame stack

        // Framed code:
        // Tried code:
        {
            PyObject *tmp_assign_source_233;
            PyObject *tmp_iter_arg_18;
            tmp_iter_arg_18 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__16_Random_ternary_distribution_231, mod_consts[86]);

            if (tmp_iter_arg_18 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_iter_arg_18 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[86]);

                    if (unlikely(tmp_iter_arg_18 == NULL)) {
                        tmp_iter_arg_18 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[86]);
                    }

                    if (tmp_iter_arg_18 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 232;
                        type_description_2 = "o";
                        goto try_except_handler_92;
                    }
                    Py_INCREF(tmp_iter_arg_18);
                } else {
                    goto try_except_handler_92;
                }
            }

            tmp_assign_source_233 = MAKE_ITERATOR(tmp_iter_arg_18);
            Py_DECREF(tmp_iter_arg_18);
            if (tmp_assign_source_233 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 232;
                type_description_2 = "o";
                goto try_except_handler_92;
            }
            assert(tmp_Random_ternary_distribution$listcomp_1__$0 == NULL);
            tmp_Random_ternary_distribution$listcomp_1__$0 = tmp_assign_source_233;
        }
        {
            PyObject *tmp_assign_source_234;
            tmp_assign_source_234 = PyList_New(0);
            assert(tmp_Random_ternary_distribution$listcomp_1__contraction == NULL);
            tmp_Random_ternary_distribution$listcomp_1__contraction = tmp_assign_source_234;
        }
        if (isFrameUnusable(cache_frame_b6ca460e3512019f56a19bd2f5227490_35)) {
            Py_XDECREF(cache_frame_b6ca460e3512019f56a19bd2f5227490_35);

#if _DEBUG_REFCOUNTS
            if (cache_frame_b6ca460e3512019f56a19bd2f5227490_35 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_b6ca460e3512019f56a19bd2f5227490_35 = MAKE_FUNCTION_FRAME(codeobj_b6ca460e3512019f56a19bd2f5227490, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_b6ca460e3512019f56a19bd2f5227490_35->m_type_description == NULL);
        frame_b6ca460e3512019f56a19bd2f5227490_35 = cache_frame_b6ca460e3512019f56a19bd2f5227490_35;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_b6ca460e3512019f56a19bd2f5227490_35);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_b6ca460e3512019f56a19bd2f5227490_35) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_18:;
        {
            PyObject *tmp_next_source_18;
            PyObject *tmp_assign_source_235;
            CHECK_OBJECT(tmp_Random_ternary_distribution$listcomp_1__$0);
            tmp_next_source_18 = tmp_Random_ternary_distribution$listcomp_1__$0;
            tmp_assign_source_235 = ITERATOR_NEXT(tmp_next_source_18);
            if (tmp_assign_source_235 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_18;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_3 = "o";
                    exception_lineno = 232;
                    goto try_except_handler_93;
                }
            }

            {
                PyObject *old = tmp_Random_ternary_distribution$listcomp_1__iter_value_0;
                tmp_Random_ternary_distribution$listcomp_1__iter_value_0 = tmp_assign_source_235;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_236;
            CHECK_OBJECT(tmp_Random_ternary_distribution$listcomp_1__iter_value_0);
            tmp_assign_source_236 = tmp_Random_ternary_distribution$listcomp_1__iter_value_0;
            {
                PyObject *old = outline_33_var_tp;
                outline_33_var_tp = tmp_assign_source_236;
                Py_INCREF(outline_33_var_tp);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_18;
            PyObject *tmp_append_value_18;
            PyObject *tmp_called_value_107;
            PyObject *tmp_args_element_value_76;
            PyObject *tmp_args_element_value_77;
            PyObject *tmp_args_element_value_78;
            PyObject *tmp_args_element_value_79;
            CHECK_OBJECT(tmp_Random_ternary_distribution$listcomp_1__contraction);
            tmp_append_list_18 = tmp_Random_ternary_distribution$listcomp_1__contraction;
            tmp_called_value_107 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[25]);

            if (unlikely(tmp_called_value_107 == NULL)) {
                tmp_called_value_107 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[25]);
            }

            if (tmp_called_value_107 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 232;
                type_description_3 = "o";
                goto try_except_handler_93;
            }
            CHECK_OBJECT(outline_33_var_tp);
            tmp_args_element_value_76 = outline_33_var_tp;
            CHECK_OBJECT(outline_33_var_tp);
            tmp_args_element_value_77 = outline_33_var_tp;
            CHECK_OBJECT(outline_33_var_tp);
            tmp_args_element_value_78 = outline_33_var_tp;
            CHECK_OBJECT(outline_33_var_tp);
            tmp_args_element_value_79 = outline_33_var_tp;
            frame_b6ca460e3512019f56a19bd2f5227490_35->m_frame.f_lineno = 232;
            {
                PyObject *call_args[] = {tmp_args_element_value_76, tmp_args_element_value_77, tmp_args_element_value_78, tmp_args_element_value_79};
                tmp_append_value_18 = CALL_FUNCTION_WITH_ARGS4(tmp_called_value_107, call_args);
            }

            if (tmp_append_value_18 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 232;
                type_description_3 = "o";
                goto try_except_handler_93;
            }
            assert(PyList_Check(tmp_append_list_18));
            tmp_result = LIST_APPEND1(tmp_append_list_18, tmp_append_value_18);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 232;
                type_description_3 = "o";
                goto try_except_handler_93;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 232;
            type_description_3 = "o";
            goto try_except_handler_93;
        }
        goto loop_start_18;
        loop_end_18:;
        CHECK_OBJECT(tmp_Random_ternary_distribution$listcomp_1__contraction);
        tmp_dictset_value = tmp_Random_ternary_distribution$listcomp_1__contraction;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_93;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_93:;
        CHECK_OBJECT(tmp_Random_ternary_distribution$listcomp_1__$0);
        Py_DECREF(tmp_Random_ternary_distribution$listcomp_1__$0);
        tmp_Random_ternary_distribution$listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_Random_ternary_distribution$listcomp_1__contraction);
        Py_DECREF(tmp_Random_ternary_distribution$listcomp_1__contraction);
        tmp_Random_ternary_distribution$listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_Random_ternary_distribution$listcomp_1__iter_value_0);
        tmp_Random_ternary_distribution$listcomp_1__iter_value_0 = NULL;
        goto frame_return_exit_18;
        // Exception handler code:
        try_except_handler_93:;
        exception_keeper_type_89 = exception_type;
        exception_keeper_value_89 = exception_value;
        exception_keeper_tb_89 = exception_tb;
        exception_keeper_lineno_89 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Random_ternary_distribution$listcomp_1__$0);
        Py_DECREF(tmp_Random_ternary_distribution$listcomp_1__$0);
        tmp_Random_ternary_distribution$listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_Random_ternary_distribution$listcomp_1__contraction);
        Py_DECREF(tmp_Random_ternary_distribution$listcomp_1__contraction);
        tmp_Random_ternary_distribution$listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_Random_ternary_distribution$listcomp_1__iter_value_0);
        tmp_Random_ternary_distribution$listcomp_1__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_89;
        exception_value = exception_keeper_value_89;
        exception_tb = exception_keeper_tb_89;
        exception_lineno = exception_keeper_lineno_89;

        goto frame_exception_exit_35;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_b6ca460e3512019f56a19bd2f5227490_35);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_33;

        frame_return_exit_18:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_b6ca460e3512019f56a19bd2f5227490_35);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_92;

        frame_exception_exit_35:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_b6ca460e3512019f56a19bd2f5227490_35);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_b6ca460e3512019f56a19bd2f5227490_35, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_b6ca460e3512019f56a19bd2f5227490_35->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_b6ca460e3512019f56a19bd2f5227490_35, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_b6ca460e3512019f56a19bd2f5227490_35,
            type_description_3,
            outline_33_var_tp
        );


        // Release cached frame if used for exception.
        if (frame_b6ca460e3512019f56a19bd2f5227490_35 == cache_frame_b6ca460e3512019f56a19bd2f5227490_35) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_b6ca460e3512019f56a19bd2f5227490_35);
            cache_frame_b6ca460e3512019f56a19bd2f5227490_35 = NULL;
        }

        assertFrameObject(frame_b6ca460e3512019f56a19bd2f5227490_35);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_34;

        frame_no_exception_33:;
        goto skip_nested_handling_33;
        nested_frame_exit_34:;
        type_description_2 = "o";
        goto try_except_handler_92;
        skip_nested_handling_33:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_92:;
        Py_XDECREF(outline_33_var_tp);
        outline_33_var_tp = NULL;
        goto outline_result_34;
        // Exception handler code:
        try_except_handler_92:;
        exception_keeper_type_90 = exception_type;
        exception_keeper_value_90 = exception_value;
        exception_keeper_tb_90 = exception_tb;
        exception_keeper_lineno_90 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_33_var_tp);
        outline_33_var_tp = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_90;
        exception_value = exception_keeper_value_90;
        exception_tb = exception_keeper_tb_90;
        exception_lineno = exception_keeper_lineno_90;

        goto outline_exception_34;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_34:;
        exception_lineno = 232;
        goto frame_exception_exit_34;
        outline_result_34:;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__16_Random_ternary_distribution_231, mod_consts[30], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 232;
            type_description_2 = "o";
            goto frame_exception_exit_34;
        }


        tmp_dictset_value = MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__13_generic();

        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__16_Random_ternary_distribution_231, mod_consts[110], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 234;
            type_description_2 = "o";
            goto frame_exception_exit_34;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_1c03f75f56e92bec8a64f7bd23a506b0_34);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_34;

        frame_exception_exit_34:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_1c03f75f56e92bec8a64f7bd23a506b0_34);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_1c03f75f56e92bec8a64f7bd23a506b0_34, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_1c03f75f56e92bec8a64f7bd23a506b0_34->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_1c03f75f56e92bec8a64f7bd23a506b0_34, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_1c03f75f56e92bec8a64f7bd23a506b0_34,
            type_description_2,
            outline_32_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_1c03f75f56e92bec8a64f7bd23a506b0_34 == cache_frame_1c03f75f56e92bec8a64f7bd23a506b0_34) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_1c03f75f56e92bec8a64f7bd23a506b0_34);
            cache_frame_1c03f75f56e92bec8a64f7bd23a506b0_34 = NULL;
        }

        assertFrameObject(frame_1c03f75f56e92bec8a64f7bd23a506b0_34);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_33;

        frame_no_exception_34:;
        goto skip_nested_handling_34;
        nested_frame_exit_33:;

        goto try_except_handler_91;
        skip_nested_handling_34:;
        {
            nuitka_bool tmp_condition_result_97;
            PyObject *tmp_cmp_expr_left_17;
            PyObject *tmp_cmp_expr_right_17;
            CHECK_OBJECT(tmp_class_creation_16__bases);
            tmp_cmp_expr_left_17 = tmp_class_creation_16__bases;
            CHECK_OBJECT(tmp_class_creation_16__bases_orig);
            tmp_cmp_expr_right_17 = tmp_class_creation_16__bases_orig;
            tmp_condition_result_97 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_17, tmp_cmp_expr_right_17);
            if (tmp_condition_result_97 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 231;

                goto try_except_handler_91;
            }
            if (tmp_condition_result_97 == NUITKA_BOOL_TRUE) {
                goto branch_yes_65;
            } else {
                goto branch_no_65;
            }
            assert(tmp_condition_result_97 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_65:;
        CHECK_OBJECT(tmp_class_creation_16__bases_orig);
        tmp_dictset_value = tmp_class_creation_16__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__16_Random_ternary_distribution_231, mod_consts[98], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 231;

            goto try_except_handler_91;
        }
        branch_no_65:;
        {
            PyObject *tmp_assign_source_237;
            PyObject *tmp_called_value_108;
            PyObject *tmp_args_value_58;
            PyObject *tmp_tuple_element_91;
            PyObject *tmp_kwargs_value_58;
            CHECK_OBJECT(tmp_class_creation_16__metaclass);
            tmp_called_value_108 = tmp_class_creation_16__metaclass;
            tmp_tuple_element_91 = mod_consts[175];
            tmp_args_value_58 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_58, 0, tmp_tuple_element_91);
            CHECK_OBJECT(tmp_class_creation_16__bases);
            tmp_tuple_element_91 = tmp_class_creation_16__bases;
            PyTuple_SET_ITEM0(tmp_args_value_58, 1, tmp_tuple_element_91);
            tmp_tuple_element_91 = locals_numba$core$typing$randomdecl$$$class__16_Random_ternary_distribution_231;
            PyTuple_SET_ITEM0(tmp_args_value_58, 2, tmp_tuple_element_91);
            CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
            tmp_kwargs_value_58 = tmp_class_creation_16__class_decl_dict;
            frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 231;
            tmp_assign_source_237 = CALL_FUNCTION(tmp_called_value_108, tmp_args_value_58, tmp_kwargs_value_58);
            Py_DECREF(tmp_args_value_58);
            if (tmp_assign_source_237 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 231;

                goto try_except_handler_91;
            }
            assert(outline_32_var___class__ == NULL);
            outline_32_var___class__ = tmp_assign_source_237;
        }
        CHECK_OBJECT(outline_32_var___class__);
        tmp_args_element_value_75 = outline_32_var___class__;
        Py_INCREF(tmp_args_element_value_75);
        goto try_return_handler_91;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_91:;
        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__16_Random_ternary_distribution_231);
        locals_numba$core$typing$randomdecl$$$class__16_Random_ternary_distribution_231 = NULL;
        goto try_return_handler_90;
        // Exception handler code:
        try_except_handler_91:;
        exception_keeper_type_91 = exception_type;
        exception_keeper_value_91 = exception_value;
        exception_keeper_tb_91 = exception_tb;
        exception_keeper_lineno_91 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__16_Random_ternary_distribution_231);
        locals_numba$core$typing$randomdecl$$$class__16_Random_ternary_distribution_231 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_91;
        exception_value = exception_keeper_value_91;
        exception_tb = exception_keeper_tb_91;
        exception_lineno = exception_keeper_lineno_91;

        goto try_except_handler_90;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_90:;
        CHECK_OBJECT(outline_32_var___class__);
        Py_DECREF(outline_32_var___class__);
        outline_32_var___class__ = NULL;
        goto outline_result_33;
        // Exception handler code:
        try_except_handler_90:;
        exception_keeper_type_92 = exception_type;
        exception_keeper_value_92 = exception_value;
        exception_keeper_tb_92 = exception_tb;
        exception_keeper_lineno_92 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_92;
        exception_value = exception_keeper_value_92;
        exception_tb = exception_keeper_tb_92;
        exception_lineno = exception_keeper_lineno_92;

        goto outline_exception_33;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_33:;
        exception_lineno = 231;
        goto try_except_handler_89;
        outline_result_33:;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 230;
        tmp_assign_source_232 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_105, tmp_args_element_value_75);
        Py_DECREF(tmp_called_value_105);
        Py_DECREF(tmp_args_element_value_75);
        if (tmp_assign_source_232 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 230;

            goto try_except_handler_89;
        }
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[175], tmp_assign_source_232);
    }
    goto try_end_25;
    // Exception handler code:
    try_except_handler_89:;
    exception_keeper_type_93 = exception_type;
    exception_keeper_value_93 = exception_value;
    exception_keeper_tb_93 = exception_tb;
    exception_keeper_lineno_93 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_16__bases_orig);
    tmp_class_creation_16__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_16__bases);
    tmp_class_creation_16__bases = NULL;
    Py_XDECREF(tmp_class_creation_16__class_decl_dict);
    tmp_class_creation_16__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_16__metaclass);
    tmp_class_creation_16__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_16__prepared);
    tmp_class_creation_16__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_93;
    exception_value = exception_keeper_value_93;
    exception_tb = exception_keeper_tb_93;
    exception_lineno = exception_keeper_lineno_93;

    goto frame_exception_exit_1;
    // End of try:
    try_end_25:;
    CHECK_OBJECT(tmp_class_creation_16__bases_orig);
    Py_DECREF(tmp_class_creation_16__bases_orig);
    tmp_class_creation_16__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_16__bases);
    Py_DECREF(tmp_class_creation_16__bases);
    tmp_class_creation_16__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
    Py_DECREF(tmp_class_creation_16__class_decl_dict);
    tmp_class_creation_16__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_16__metaclass);
    Py_DECREF(tmp_class_creation_16__metaclass);
    tmp_class_creation_16__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_16__prepared);
    Py_DECREF(tmp_class_creation_16__prepared);
    tmp_class_creation_16__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_238;
        PyObject *tmp_tuple_element_92;
        tmp_tuple_element_92 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[99]);

        if (unlikely(tmp_tuple_element_92 == NULL)) {
            tmp_tuple_element_92 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[99]);
        }

        if (tmp_tuple_element_92 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 254;

            goto try_except_handler_94;
        }
        tmp_assign_source_238 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_238, 0, tmp_tuple_element_92);
        assert(tmp_class_creation_17__bases_orig == NULL);
        tmp_class_creation_17__bases_orig = tmp_assign_source_238;
    }
    {
        PyObject *tmp_assign_source_239;
        PyObject *tmp_dircall_arg1_17;
        CHECK_OBJECT(tmp_class_creation_17__bases_orig);
        tmp_dircall_arg1_17 = tmp_class_creation_17__bases_orig;
        Py_INCREF(tmp_dircall_arg1_17);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_17};
            tmp_assign_source_239 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_239 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 254;

            goto try_except_handler_94;
        }
        assert(tmp_class_creation_17__bases == NULL);
        tmp_class_creation_17__bases = tmp_assign_source_239;
    }
    {
        PyObject *tmp_assign_source_240;
        tmp_assign_source_240 = PyDict_New();
        assert(tmp_class_creation_17__class_decl_dict == NULL);
        tmp_class_creation_17__class_decl_dict = tmp_assign_source_240;
    }
    {
        PyObject *tmp_assign_source_241;
        PyObject *tmp_metaclass_value_17;
        bool tmp_condition_result_98;
        PyObject *tmp_key_value_49;
        PyObject *tmp_dict_arg_value_49;
        PyObject *tmp_dict_arg_value_50;
        PyObject *tmp_key_value_50;
        nuitka_bool tmp_condition_result_99;
        int tmp_truth_name_17;
        PyObject *tmp_type_arg_33;
        PyObject *tmp_expression_value_144;
        PyObject *tmp_subscript_value_17;
        PyObject *tmp_bases_value_17;
        tmp_key_value_49 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
        tmp_dict_arg_value_49 = tmp_class_creation_17__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_49, tmp_key_value_49);
        assert(!(tmp_res == -1));
        tmp_condition_result_98 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_98 != false) {
            goto condexpr_true_33;
        } else {
            goto condexpr_false_33;
        }
        condexpr_true_33:;
        CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
        tmp_dict_arg_value_50 = tmp_class_creation_17__class_decl_dict;
        tmp_key_value_50 = mod_consts[87];
        tmp_metaclass_value_17 = DICT_GET_ITEM0(tmp_dict_arg_value_50, tmp_key_value_50);
        if (tmp_metaclass_value_17 == NULL) {
            tmp_metaclass_value_17 = Py_None;
        }
        assert(!(tmp_metaclass_value_17 == NULL));
        Py_INCREF(tmp_metaclass_value_17);
        goto condexpr_end_33;
        condexpr_false_33:;
        CHECK_OBJECT(tmp_class_creation_17__bases);
        tmp_truth_name_17 = CHECK_IF_TRUE(tmp_class_creation_17__bases);
        if (tmp_truth_name_17 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 254;

            goto try_except_handler_94;
        }
        tmp_condition_result_99 = tmp_truth_name_17 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_99 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_34;
        } else {
            goto condexpr_false_34;
        }
        condexpr_true_34:;
        CHECK_OBJECT(tmp_class_creation_17__bases);
        tmp_expression_value_144 = tmp_class_creation_17__bases;
        tmp_subscript_value_17 = mod_consts[13];
        tmp_type_arg_33 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_144, tmp_subscript_value_17, 0);
        if (tmp_type_arg_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 254;

            goto try_except_handler_94;
        }
        tmp_metaclass_value_17 = BUILTIN_TYPE1(tmp_type_arg_33);
        Py_DECREF(tmp_type_arg_33);
        if (tmp_metaclass_value_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 254;

            goto try_except_handler_94;
        }
        goto condexpr_end_34;
        condexpr_false_34:;
        tmp_metaclass_value_17 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_17);
        condexpr_end_34:;
        condexpr_end_33:;
        CHECK_OBJECT(tmp_class_creation_17__bases);
        tmp_bases_value_17 = tmp_class_creation_17__bases;
        tmp_assign_source_241 = SELECT_METACLASS(tmp_metaclass_value_17, tmp_bases_value_17);
        Py_DECREF(tmp_metaclass_value_17);
        if (tmp_assign_source_241 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 254;

            goto try_except_handler_94;
        }
        assert(tmp_class_creation_17__metaclass == NULL);
        tmp_class_creation_17__metaclass = tmp_assign_source_241;
    }
    {
        bool tmp_condition_result_100;
        PyObject *tmp_key_value_51;
        PyObject *tmp_dict_arg_value_51;
        tmp_key_value_51 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
        tmp_dict_arg_value_51 = tmp_class_creation_17__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_51, tmp_key_value_51);
        assert(!(tmp_res == -1));
        tmp_condition_result_100 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_100 != false) {
            goto branch_yes_66;
        } else {
            goto branch_no_66;
        }
    }
    branch_yes_66:;
    CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_17__class_decl_dict;
    tmp_dictdel_key = mod_consts[87];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 254;

        goto try_except_handler_94;
    }
    branch_no_66:;
    {
        nuitka_bool tmp_condition_result_101;
        PyObject *tmp_expression_value_145;
        CHECK_OBJECT(tmp_class_creation_17__metaclass);
        tmp_expression_value_145 = tmp_class_creation_17__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_145, mod_consts[88]);
        tmp_condition_result_101 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_101 == NUITKA_BOOL_TRUE) {
            goto branch_yes_67;
        } else {
            goto branch_no_67;
        }
    }
    branch_yes_67:;
    {
        PyObject *tmp_assign_source_242;
        PyObject *tmp_called_value_109;
        PyObject *tmp_expression_value_146;
        PyObject *tmp_args_value_59;
        PyObject *tmp_tuple_element_93;
        PyObject *tmp_kwargs_value_59;
        CHECK_OBJECT(tmp_class_creation_17__metaclass);
        tmp_expression_value_146 = tmp_class_creation_17__metaclass;
        tmp_called_value_109 = LOOKUP_ATTRIBUTE(tmp_expression_value_146, mod_consts[88]);
        if (tmp_called_value_109 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 254;

            goto try_except_handler_94;
        }
        tmp_tuple_element_93 = mod_consts[179];
        tmp_args_value_59 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_59, 0, tmp_tuple_element_93);
        CHECK_OBJECT(tmp_class_creation_17__bases);
        tmp_tuple_element_93 = tmp_class_creation_17__bases;
        PyTuple_SET_ITEM0(tmp_args_value_59, 1, tmp_tuple_element_93);
        CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
        tmp_kwargs_value_59 = tmp_class_creation_17__class_decl_dict;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 254;
        tmp_assign_source_242 = CALL_FUNCTION(tmp_called_value_109, tmp_args_value_59, tmp_kwargs_value_59);
        Py_DECREF(tmp_called_value_109);
        Py_DECREF(tmp_args_value_59);
        if (tmp_assign_source_242 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 254;

            goto try_except_handler_94;
        }
        assert(tmp_class_creation_17__prepared == NULL);
        tmp_class_creation_17__prepared = tmp_assign_source_242;
    }
    {
        bool tmp_condition_result_102;
        PyObject *tmp_operand_value_17;
        PyObject *tmp_expression_value_147;
        CHECK_OBJECT(tmp_class_creation_17__prepared);
        tmp_expression_value_147 = tmp_class_creation_17__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_147, mod_consts[89]);
        tmp_operand_value_17 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_17);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 254;

            goto try_except_handler_94;
        }
        tmp_condition_result_102 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_102 != false) {
            goto branch_yes_68;
        } else {
            goto branch_no_68;
        }
    }
    branch_yes_68:;
    {
        PyObject *tmp_raise_type_17;
        PyObject *tmp_raise_value_17;
        PyObject *tmp_left_value_25;
        PyObject *tmp_right_value_25;
        PyObject *tmp_tuple_element_94;
        PyObject *tmp_getattr_target_17;
        PyObject *tmp_getattr_attr_17;
        PyObject *tmp_getattr_default_17;
        tmp_raise_type_17 = PyExc_TypeError;
        tmp_left_value_25 = mod_consts[90];
        CHECK_OBJECT(tmp_class_creation_17__metaclass);
        tmp_getattr_target_17 = tmp_class_creation_17__metaclass;
        tmp_getattr_attr_17 = mod_consts[91];
        tmp_getattr_default_17 = mod_consts[92];
        tmp_tuple_element_94 = BUILTIN_GETATTR(tmp_getattr_target_17, tmp_getattr_attr_17, tmp_getattr_default_17);
        if (tmp_tuple_element_94 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 254;

            goto try_except_handler_94;
        }
        tmp_right_value_25 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_148;
            PyObject *tmp_type_arg_34;
            PyTuple_SET_ITEM(tmp_right_value_25, 0, tmp_tuple_element_94);
            CHECK_OBJECT(tmp_class_creation_17__prepared);
            tmp_type_arg_34 = tmp_class_creation_17__prepared;
            tmp_expression_value_148 = BUILTIN_TYPE1(tmp_type_arg_34);
            assert(!(tmp_expression_value_148 == NULL));
            tmp_tuple_element_94 = LOOKUP_ATTRIBUTE(tmp_expression_value_148, mod_consts[91]);
            Py_DECREF(tmp_expression_value_148);
            if (tmp_tuple_element_94 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 254;

                goto tuple_build_exception_18;
            }
            PyTuple_SET_ITEM(tmp_right_value_25, 1, tmp_tuple_element_94);
        }
        goto tuple_build_noexception_18;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_18:;
        Py_DECREF(tmp_right_value_25);
        goto try_except_handler_94;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_18:;
        tmp_raise_value_17 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_25, tmp_right_value_25);
        Py_DECREF(tmp_right_value_25);
        if (tmp_raise_value_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 254;

            goto try_except_handler_94;
        }
        exception_type = tmp_raise_type_17;
        Py_INCREF(tmp_raise_type_17);
        exception_value = tmp_raise_value_17;
        exception_lineno = 254;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_94;
    }
    branch_no_68:;
    goto branch_end_67;
    branch_no_67:;
    {
        PyObject *tmp_assign_source_243;
        tmp_assign_source_243 = PyDict_New();
        assert(tmp_class_creation_17__prepared == NULL);
        tmp_class_creation_17__prepared = tmp_assign_source_243;
    }
    branch_end_67:;
    {
        PyObject *tmp_assign_source_244;
        PyObject *tmp_called_value_110;
        PyObject *tmp_called_value_111;
        PyObject *tmp_args_value_60;
        PyObject *tmp_tuple_element_95;
        PyObject *tmp_expression_value_149;
        PyObject *tmp_expression_value_150;
        PyObject *tmp_kwargs_value_60;
        PyObject *tmp_args_element_value_80;
        PyObject *tmp_called_value_112;
        PyObject *tmp_called_value_113;
        PyObject *tmp_args_value_61;
        PyObject *tmp_tuple_element_96;
        PyObject *tmp_expression_value_151;
        PyObject *tmp_expression_value_152;
        PyObject *tmp_kwargs_value_61;
        PyObject *tmp_args_element_value_81;
        PyObject *tmp_called_value_114;
        PyObject *tmp_called_value_115;
        PyObject *tmp_args_value_62;
        PyObject *tmp_tuple_element_97;
        PyObject *tmp_expression_value_153;
        PyObject *tmp_expression_value_154;
        PyObject *tmp_kwargs_value_62;
        PyObject *tmp_args_element_value_82;
        PyObject *tmp_called_value_116;
        PyObject *tmp_called_value_117;
        PyObject *tmp_args_value_63;
        PyObject *tmp_tuple_element_98;
        PyObject *tmp_expression_value_155;
        PyObject *tmp_expression_value_156;
        PyObject *tmp_kwargs_value_63;
        PyObject *tmp_args_element_value_83;
        PyObject *tmp_called_value_118;
        PyObject *tmp_called_value_119;
        PyObject *tmp_args_value_64;
        PyObject *tmp_tuple_element_99;
        PyObject *tmp_expression_value_157;
        PyObject *tmp_expression_value_158;
        PyObject *tmp_kwargs_value_64;
        PyObject *tmp_args_element_value_84;
        PyObject *tmp_called_value_120;
        PyObject *tmp_called_value_121;
        PyObject *tmp_args_value_65;
        PyObject *tmp_tuple_element_100;
        PyObject *tmp_expression_value_159;
        PyObject *tmp_expression_value_160;
        PyObject *tmp_kwargs_value_65;
        PyObject *tmp_args_element_value_85;
        PyObject *tmp_called_value_122;
        PyObject *tmp_called_value_123;
        PyObject *tmp_args_value_66;
        PyObject *tmp_tuple_element_101;
        PyObject *tmp_expression_value_161;
        PyObject *tmp_kwargs_value_66;
        PyObject *tmp_args_element_value_86;
        PyObject *tmp_called_value_124;
        PyObject *tmp_called_value_125;
        PyObject *tmp_args_value_67;
        PyObject *tmp_tuple_element_102;
        PyObject *tmp_expression_value_162;
        PyObject *tmp_kwargs_value_67;
        PyObject *tmp_args_element_value_87;
        PyObject *tmp_called_value_126;
        PyObject *tmp_called_value_127;
        PyObject *tmp_args_value_68;
        PyObject *tmp_tuple_element_103;
        PyObject *tmp_expression_value_163;
        PyObject *tmp_kwargs_value_68;
        PyObject *tmp_args_element_value_88;
        PyObject *tmp_called_value_128;
        PyObject *tmp_called_value_129;
        PyObject *tmp_args_value_69;
        PyObject *tmp_tuple_element_104;
        PyObject *tmp_expression_value_164;
        PyObject *tmp_kwargs_value_69;
        PyObject *tmp_args_element_value_89;
        PyObject *tmp_called_value_130;
        PyObject *tmp_called_value_131;
        PyObject *tmp_args_value_70;
        PyObject *tmp_tuple_element_105;
        PyObject *tmp_expression_value_165;
        PyObject *tmp_kwargs_value_70;
        PyObject *tmp_args_element_value_90;
        PyObject *tmp_called_value_132;
        PyObject *tmp_called_value_133;
        PyObject *tmp_args_value_71;
        PyObject *tmp_tuple_element_106;
        PyObject *tmp_expression_value_166;
        PyObject *tmp_kwargs_value_71;
        PyObject *tmp_args_element_value_91;
        PyObject *tmp_called_value_134;
        PyObject *tmp_called_value_135;
        PyObject *tmp_args_value_72;
        PyObject *tmp_tuple_element_107;
        PyObject *tmp_expression_value_167;
        PyObject *tmp_kwargs_value_72;
        PyObject *tmp_args_element_value_92;
        PyObject *tmp_called_value_136;
        PyObject *tmp_called_value_137;
        PyObject *tmp_args_value_73;
        PyObject *tmp_tuple_element_108;
        PyObject *tmp_expression_value_168;
        PyObject *tmp_kwargs_value_73;
        PyObject *tmp_args_element_value_93;
        tmp_called_value_111 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_111 == NULL)) {
            tmp_called_value_111 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_111 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 240;

            goto try_except_handler_94;
        }
        tmp_expression_value_150 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_150 == NULL)) {
            tmp_expression_value_150 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_150 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 240;

            goto try_except_handler_94;
        }
        tmp_expression_value_149 = LOOKUP_ATTRIBUTE(tmp_expression_value_150, mod_consts[19]);
        if (tmp_expression_value_149 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 240;

            goto try_except_handler_94;
        }
        tmp_tuple_element_95 = LOOKUP_ATTRIBUTE(tmp_expression_value_149, mod_consts[180]);
        Py_DECREF(tmp_expression_value_149);
        if (tmp_tuple_element_95 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 240;

            goto try_except_handler_94;
        }
        tmp_args_value_60 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_60, 0, tmp_tuple_element_95);
        tmp_kwargs_value_60 = PyDict_Copy(mod_consts[181]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 240;
        tmp_called_value_110 = CALL_FUNCTION(tmp_called_value_111, tmp_args_value_60, tmp_kwargs_value_60);
        Py_DECREF(tmp_args_value_60);
        Py_DECREF(tmp_kwargs_value_60);
        if (tmp_called_value_110 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 240;

            goto try_except_handler_94;
        }
        tmp_called_value_113 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_113 == NULL)) {
            tmp_called_value_113 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_113 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);

            exception_lineno = 241;

            goto try_except_handler_94;
        }
        tmp_expression_value_152 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_152 == NULL)) {
            tmp_expression_value_152 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_152 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);

            exception_lineno = 241;

            goto try_except_handler_94;
        }
        tmp_expression_value_151 = LOOKUP_ATTRIBUTE(tmp_expression_value_152, mod_consts[19]);
        if (tmp_expression_value_151 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);

            exception_lineno = 241;

            goto try_except_handler_94;
        }
        tmp_tuple_element_96 = LOOKUP_ATTRIBUTE(tmp_expression_value_151, mod_consts[182]);
        Py_DECREF(tmp_expression_value_151);
        if (tmp_tuple_element_96 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);

            exception_lineno = 241;

            goto try_except_handler_94;
        }
        tmp_args_value_61 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_61, 0, tmp_tuple_element_96);
        tmp_kwargs_value_61 = PyDict_Copy(mod_consts[183]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 241;
        tmp_called_value_112 = CALL_FUNCTION(tmp_called_value_113, tmp_args_value_61, tmp_kwargs_value_61);
        Py_DECREF(tmp_args_value_61);
        Py_DECREF(tmp_kwargs_value_61);
        if (tmp_called_value_112 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);

            exception_lineno = 241;

            goto try_except_handler_94;
        }
        tmp_called_value_115 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_115 == NULL)) {
            tmp_called_value_115 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_115 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);

            exception_lineno = 242;

            goto try_except_handler_94;
        }
        tmp_expression_value_154 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_154 == NULL)) {
            tmp_expression_value_154 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_154 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);

            exception_lineno = 242;

            goto try_except_handler_94;
        }
        tmp_expression_value_153 = LOOKUP_ATTRIBUTE(tmp_expression_value_154, mod_consts[19]);
        if (tmp_expression_value_153 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);

            exception_lineno = 242;

            goto try_except_handler_94;
        }
        tmp_tuple_element_97 = LOOKUP_ATTRIBUTE(tmp_expression_value_153, mod_consts[184]);
        Py_DECREF(tmp_expression_value_153);
        if (tmp_tuple_element_97 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);

            exception_lineno = 242;

            goto try_except_handler_94;
        }
        tmp_args_value_62 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_62, 0, tmp_tuple_element_97);
        tmp_kwargs_value_62 = PyDict_Copy(mod_consts[185]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 242;
        tmp_called_value_114 = CALL_FUNCTION(tmp_called_value_115, tmp_args_value_62, tmp_kwargs_value_62);
        Py_DECREF(tmp_args_value_62);
        Py_DECREF(tmp_kwargs_value_62);
        if (tmp_called_value_114 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);

            exception_lineno = 242;

            goto try_except_handler_94;
        }
        tmp_called_value_117 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_117 == NULL)) {
            tmp_called_value_117 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_117 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);

            exception_lineno = 243;

            goto try_except_handler_94;
        }
        tmp_expression_value_156 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_156 == NULL)) {
            tmp_expression_value_156 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_156 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);

            exception_lineno = 243;

            goto try_except_handler_94;
        }
        tmp_expression_value_155 = LOOKUP_ATTRIBUTE(tmp_expression_value_156, mod_consts[19]);
        if (tmp_expression_value_155 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);

            exception_lineno = 243;

            goto try_except_handler_94;
        }
        tmp_tuple_element_98 = LOOKUP_ATTRIBUTE(tmp_expression_value_155, mod_consts[186]);
        Py_DECREF(tmp_expression_value_155);
        if (tmp_tuple_element_98 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);

            exception_lineno = 243;

            goto try_except_handler_94;
        }
        tmp_args_value_63 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_63, 0, tmp_tuple_element_98);
        tmp_kwargs_value_63 = PyDict_Copy(mod_consts[187]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 243;
        tmp_called_value_116 = CALL_FUNCTION(tmp_called_value_117, tmp_args_value_63, tmp_kwargs_value_63);
        Py_DECREF(tmp_args_value_63);
        Py_DECREF(tmp_kwargs_value_63);
        if (tmp_called_value_116 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);

            exception_lineno = 243;

            goto try_except_handler_94;
        }
        tmp_called_value_119 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_119 == NULL)) {
            tmp_called_value_119 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_119 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);

            exception_lineno = 244;

            goto try_except_handler_94;
        }
        tmp_expression_value_158 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_158 == NULL)) {
            tmp_expression_value_158 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_158 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);

            exception_lineno = 244;

            goto try_except_handler_94;
        }
        tmp_expression_value_157 = LOOKUP_ATTRIBUTE(tmp_expression_value_158, mod_consts[19]);
        if (tmp_expression_value_157 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);

            exception_lineno = 244;

            goto try_except_handler_94;
        }
        tmp_tuple_element_99 = LOOKUP_ATTRIBUTE(tmp_expression_value_157, mod_consts[188]);
        Py_DECREF(tmp_expression_value_157);
        if (tmp_tuple_element_99 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);

            exception_lineno = 244;

            goto try_except_handler_94;
        }
        tmp_args_value_64 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_64, 0, tmp_tuple_element_99);
        tmp_kwargs_value_64 = PyDict_Copy(mod_consts[189]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 244;
        tmp_called_value_118 = CALL_FUNCTION(tmp_called_value_119, tmp_args_value_64, tmp_kwargs_value_64);
        Py_DECREF(tmp_args_value_64);
        Py_DECREF(tmp_kwargs_value_64);
        if (tmp_called_value_118 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);

            exception_lineno = 244;

            goto try_except_handler_94;
        }
        tmp_called_value_121 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_121 == NULL)) {
            tmp_called_value_121 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_121 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);

            exception_lineno = 245;

            goto try_except_handler_94;
        }
        tmp_expression_value_160 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_160 == NULL)) {
            tmp_expression_value_160 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_160 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);

            exception_lineno = 245;

            goto try_except_handler_94;
        }
        tmp_expression_value_159 = LOOKUP_ATTRIBUTE(tmp_expression_value_160, mod_consts[19]);
        if (tmp_expression_value_159 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);

            exception_lineno = 245;

            goto try_except_handler_94;
        }
        tmp_tuple_element_100 = LOOKUP_ATTRIBUTE(tmp_expression_value_159, mod_consts[190]);
        Py_DECREF(tmp_expression_value_159);
        if (tmp_tuple_element_100 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);

            exception_lineno = 245;

            goto try_except_handler_94;
        }
        tmp_args_value_65 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_65, 0, tmp_tuple_element_100);
        tmp_kwargs_value_65 = PyDict_Copy(mod_consts[191]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 245;
        tmp_called_value_120 = CALL_FUNCTION(tmp_called_value_121, tmp_args_value_65, tmp_kwargs_value_65);
        Py_DECREF(tmp_args_value_65);
        Py_DECREF(tmp_kwargs_value_65);
        if (tmp_called_value_120 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);

            exception_lineno = 245;

            goto try_except_handler_94;
        }
        tmp_called_value_123 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_123 == NULL)) {
            tmp_called_value_123 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_123 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);

            exception_lineno = 246;

            goto try_except_handler_94;
        }
        tmp_expression_value_161 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[19]);

        if (unlikely(tmp_expression_value_161 == NULL)) {
            tmp_expression_value_161 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[19]);
        }

        if (tmp_expression_value_161 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);

            exception_lineno = 246;

            goto try_except_handler_94;
        }
        tmp_tuple_element_101 = LOOKUP_ATTRIBUTE(tmp_expression_value_161, mod_consts[192]);
        if (tmp_tuple_element_101 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);

            exception_lineno = 246;

            goto try_except_handler_94;
        }
        tmp_args_value_66 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_66, 0, tmp_tuple_element_101);
        tmp_kwargs_value_66 = PyDict_Copy(mod_consts[193]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 246;
        tmp_called_value_122 = CALL_FUNCTION(tmp_called_value_123, tmp_args_value_66, tmp_kwargs_value_66);
        Py_DECREF(tmp_args_value_66);
        Py_DECREF(tmp_kwargs_value_66);
        if (tmp_called_value_122 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);

            exception_lineno = 246;

            goto try_except_handler_94;
        }
        tmp_called_value_125 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_125 == NULL)) {
            tmp_called_value_125 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_125 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);

            exception_lineno = 247;

            goto try_except_handler_94;
        }
        tmp_expression_value_162 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[19]);

        if (unlikely(tmp_expression_value_162 == NULL)) {
            tmp_expression_value_162 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[19]);
        }

        if (tmp_expression_value_162 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);

            exception_lineno = 247;

            goto try_except_handler_94;
        }
        tmp_tuple_element_102 = LOOKUP_ATTRIBUTE(tmp_expression_value_162, mod_consts[194]);
        if (tmp_tuple_element_102 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);

            exception_lineno = 247;

            goto try_except_handler_94;
        }
        tmp_args_value_67 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_67, 0, tmp_tuple_element_102);
        tmp_kwargs_value_67 = PyDict_Copy(mod_consts[195]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 247;
        tmp_called_value_124 = CALL_FUNCTION(tmp_called_value_125, tmp_args_value_67, tmp_kwargs_value_67);
        Py_DECREF(tmp_args_value_67);
        Py_DECREF(tmp_kwargs_value_67);
        if (tmp_called_value_124 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);

            exception_lineno = 247;

            goto try_except_handler_94;
        }
        tmp_called_value_127 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_127 == NULL)) {
            tmp_called_value_127 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_127 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);
            Py_DECREF(tmp_called_value_124);

            exception_lineno = 248;

            goto try_except_handler_94;
        }
        tmp_expression_value_163 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[19]);

        if (unlikely(tmp_expression_value_163 == NULL)) {
            tmp_expression_value_163 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[19]);
        }

        if (tmp_expression_value_163 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);
            Py_DECREF(tmp_called_value_124);

            exception_lineno = 248;

            goto try_except_handler_94;
        }
        tmp_tuple_element_103 = LOOKUP_ATTRIBUTE(tmp_expression_value_163, mod_consts[196]);
        if (tmp_tuple_element_103 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);
            Py_DECREF(tmp_called_value_124);

            exception_lineno = 248;

            goto try_except_handler_94;
        }
        tmp_args_value_68 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_68, 0, tmp_tuple_element_103);
        tmp_kwargs_value_68 = PyDict_Copy(mod_consts[197]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 248;
        tmp_called_value_126 = CALL_FUNCTION(tmp_called_value_127, tmp_args_value_68, tmp_kwargs_value_68);
        Py_DECREF(tmp_args_value_68);
        Py_DECREF(tmp_kwargs_value_68);
        if (tmp_called_value_126 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);
            Py_DECREF(tmp_called_value_124);

            exception_lineno = 248;

            goto try_except_handler_94;
        }
        tmp_called_value_129 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_129 == NULL)) {
            tmp_called_value_129 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_129 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);
            Py_DECREF(tmp_called_value_124);
            Py_DECREF(tmp_called_value_126);

            exception_lineno = 249;

            goto try_except_handler_94;
        }
        tmp_expression_value_164 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[19]);

        if (unlikely(tmp_expression_value_164 == NULL)) {
            tmp_expression_value_164 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[19]);
        }

        if (tmp_expression_value_164 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);
            Py_DECREF(tmp_called_value_124);
            Py_DECREF(tmp_called_value_126);

            exception_lineno = 249;

            goto try_except_handler_94;
        }
        tmp_tuple_element_104 = LOOKUP_ATTRIBUTE(tmp_expression_value_164, mod_consts[198]);
        if (tmp_tuple_element_104 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);
            Py_DECREF(tmp_called_value_124);
            Py_DECREF(tmp_called_value_126);

            exception_lineno = 249;

            goto try_except_handler_94;
        }
        tmp_args_value_69 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_69, 0, tmp_tuple_element_104);
        tmp_kwargs_value_69 = PyDict_Copy(mod_consts[199]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 249;
        tmp_called_value_128 = CALL_FUNCTION(tmp_called_value_129, tmp_args_value_69, tmp_kwargs_value_69);
        Py_DECREF(tmp_args_value_69);
        Py_DECREF(tmp_kwargs_value_69);
        if (tmp_called_value_128 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);
            Py_DECREF(tmp_called_value_124);
            Py_DECREF(tmp_called_value_126);

            exception_lineno = 249;

            goto try_except_handler_94;
        }
        tmp_called_value_131 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_131 == NULL)) {
            tmp_called_value_131 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_131 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);
            Py_DECREF(tmp_called_value_124);
            Py_DECREF(tmp_called_value_126);
            Py_DECREF(tmp_called_value_128);

            exception_lineno = 250;

            goto try_except_handler_94;
        }
        tmp_expression_value_165 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[19]);

        if (unlikely(tmp_expression_value_165 == NULL)) {
            tmp_expression_value_165 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[19]);
        }

        if (tmp_expression_value_165 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);
            Py_DECREF(tmp_called_value_124);
            Py_DECREF(tmp_called_value_126);
            Py_DECREF(tmp_called_value_128);

            exception_lineno = 250;

            goto try_except_handler_94;
        }
        tmp_tuple_element_105 = LOOKUP_ATTRIBUTE(tmp_expression_value_165, mod_consts[200]);
        if (tmp_tuple_element_105 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);
            Py_DECREF(tmp_called_value_124);
            Py_DECREF(tmp_called_value_126);
            Py_DECREF(tmp_called_value_128);

            exception_lineno = 250;

            goto try_except_handler_94;
        }
        tmp_args_value_70 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_70, 0, tmp_tuple_element_105);
        tmp_kwargs_value_70 = PyDict_Copy(mod_consts[201]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 250;
        tmp_called_value_130 = CALL_FUNCTION(tmp_called_value_131, tmp_args_value_70, tmp_kwargs_value_70);
        Py_DECREF(tmp_args_value_70);
        Py_DECREF(tmp_kwargs_value_70);
        if (tmp_called_value_130 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);
            Py_DECREF(tmp_called_value_124);
            Py_DECREF(tmp_called_value_126);
            Py_DECREF(tmp_called_value_128);

            exception_lineno = 250;

            goto try_except_handler_94;
        }
        tmp_called_value_133 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_133 == NULL)) {
            tmp_called_value_133 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_133 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);
            Py_DECREF(tmp_called_value_124);
            Py_DECREF(tmp_called_value_126);
            Py_DECREF(tmp_called_value_128);
            Py_DECREF(tmp_called_value_130);

            exception_lineno = 251;

            goto try_except_handler_94;
        }
        tmp_expression_value_166 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[19]);

        if (unlikely(tmp_expression_value_166 == NULL)) {
            tmp_expression_value_166 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[19]);
        }

        if (tmp_expression_value_166 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);
            Py_DECREF(tmp_called_value_124);
            Py_DECREF(tmp_called_value_126);
            Py_DECREF(tmp_called_value_128);
            Py_DECREF(tmp_called_value_130);

            exception_lineno = 251;

            goto try_except_handler_94;
        }
        tmp_tuple_element_106 = LOOKUP_ATTRIBUTE(tmp_expression_value_166, mod_consts[186]);
        if (tmp_tuple_element_106 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);
            Py_DECREF(tmp_called_value_124);
            Py_DECREF(tmp_called_value_126);
            Py_DECREF(tmp_called_value_128);
            Py_DECREF(tmp_called_value_130);

            exception_lineno = 251;

            goto try_except_handler_94;
        }
        tmp_args_value_71 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_71, 0, tmp_tuple_element_106);
        tmp_kwargs_value_71 = PyDict_Copy(mod_consts[202]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 251;
        tmp_called_value_132 = CALL_FUNCTION(tmp_called_value_133, tmp_args_value_71, tmp_kwargs_value_71);
        Py_DECREF(tmp_args_value_71);
        Py_DECREF(tmp_kwargs_value_71);
        if (tmp_called_value_132 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);
            Py_DECREF(tmp_called_value_124);
            Py_DECREF(tmp_called_value_126);
            Py_DECREF(tmp_called_value_128);
            Py_DECREF(tmp_called_value_130);

            exception_lineno = 251;

            goto try_except_handler_94;
        }
        tmp_called_value_135 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_135 == NULL)) {
            tmp_called_value_135 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_135 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);
            Py_DECREF(tmp_called_value_124);
            Py_DECREF(tmp_called_value_126);
            Py_DECREF(tmp_called_value_128);
            Py_DECREF(tmp_called_value_130);
            Py_DECREF(tmp_called_value_132);

            exception_lineno = 252;

            goto try_except_handler_94;
        }
        tmp_expression_value_167 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[19]);

        if (unlikely(tmp_expression_value_167 == NULL)) {
            tmp_expression_value_167 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[19]);
        }

        if (tmp_expression_value_167 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);
            Py_DECREF(tmp_called_value_124);
            Py_DECREF(tmp_called_value_126);
            Py_DECREF(tmp_called_value_128);
            Py_DECREF(tmp_called_value_130);
            Py_DECREF(tmp_called_value_132);

            exception_lineno = 252;

            goto try_except_handler_94;
        }
        tmp_tuple_element_107 = LOOKUP_ATTRIBUTE(tmp_expression_value_167, mod_consts[203]);
        if (tmp_tuple_element_107 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);
            Py_DECREF(tmp_called_value_124);
            Py_DECREF(tmp_called_value_126);
            Py_DECREF(tmp_called_value_128);
            Py_DECREF(tmp_called_value_130);
            Py_DECREF(tmp_called_value_132);

            exception_lineno = 252;

            goto try_except_handler_94;
        }
        tmp_args_value_72 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_72, 0, tmp_tuple_element_107);
        tmp_kwargs_value_72 = PyDict_Copy(mod_consts[204]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 252;
        tmp_called_value_134 = CALL_FUNCTION(tmp_called_value_135, tmp_args_value_72, tmp_kwargs_value_72);
        Py_DECREF(tmp_args_value_72);
        Py_DECREF(tmp_kwargs_value_72);
        if (tmp_called_value_134 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);
            Py_DECREF(tmp_called_value_124);
            Py_DECREF(tmp_called_value_126);
            Py_DECREF(tmp_called_value_128);
            Py_DECREF(tmp_called_value_130);
            Py_DECREF(tmp_called_value_132);

            exception_lineno = 252;

            goto try_except_handler_94;
        }
        tmp_called_value_137 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_137 == NULL)) {
            tmp_called_value_137 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_137 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);
            Py_DECREF(tmp_called_value_124);
            Py_DECREF(tmp_called_value_126);
            Py_DECREF(tmp_called_value_128);
            Py_DECREF(tmp_called_value_130);
            Py_DECREF(tmp_called_value_132);
            Py_DECREF(tmp_called_value_134);

            exception_lineno = 253;

            goto try_except_handler_94;
        }
        tmp_expression_value_168 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[19]);

        if (unlikely(tmp_expression_value_168 == NULL)) {
            tmp_expression_value_168 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[19]);
        }

        if (tmp_expression_value_168 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);
            Py_DECREF(tmp_called_value_124);
            Py_DECREF(tmp_called_value_126);
            Py_DECREF(tmp_called_value_128);
            Py_DECREF(tmp_called_value_130);
            Py_DECREF(tmp_called_value_132);
            Py_DECREF(tmp_called_value_134);

            exception_lineno = 253;

            goto try_except_handler_94;
        }
        tmp_tuple_element_108 = LOOKUP_ATTRIBUTE(tmp_expression_value_168, mod_consts[205]);
        if (tmp_tuple_element_108 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);
            Py_DECREF(tmp_called_value_124);
            Py_DECREF(tmp_called_value_126);
            Py_DECREF(tmp_called_value_128);
            Py_DECREF(tmp_called_value_130);
            Py_DECREF(tmp_called_value_132);
            Py_DECREF(tmp_called_value_134);

            exception_lineno = 253;

            goto try_except_handler_94;
        }
        tmp_args_value_73 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_73, 0, tmp_tuple_element_108);
        tmp_kwargs_value_73 = PyDict_Copy(mod_consts[206]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 253;
        tmp_called_value_136 = CALL_FUNCTION(tmp_called_value_137, tmp_args_value_73, tmp_kwargs_value_73);
        Py_DECREF(tmp_args_value_73);
        Py_DECREF(tmp_kwargs_value_73);
        if (tmp_called_value_136 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);
            Py_DECREF(tmp_called_value_124);
            Py_DECREF(tmp_called_value_126);
            Py_DECREF(tmp_called_value_128);
            Py_DECREF(tmp_called_value_130);
            Py_DECREF(tmp_called_value_132);
            Py_DECREF(tmp_called_value_134);

            exception_lineno = 253;

            goto try_except_handler_94;
        }
        {
            PyObject *tmp_set_locals_17;
            CHECK_OBJECT(tmp_class_creation_17__prepared);
            tmp_set_locals_17 = tmp_class_creation_17__prepared;
            locals_numba$core$typing$randomdecl$$$class__17_Random_binary_distribution_254 = tmp_set_locals_17;
            Py_INCREF(tmp_set_locals_17);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[93];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__17_Random_binary_distribution_254, mod_consts[94], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 254;

            goto try_except_handler_96;
        }
        tmp_dictset_value = mod_consts[179];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__17_Random_binary_distribution_254, mod_consts[96], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 254;

            goto try_except_handler_96;
        }
        if (isFrameUnusable(cache_frame_8e586f507f42c2412a86b865add7f337_36)) {
            Py_XDECREF(cache_frame_8e586f507f42c2412a86b865add7f337_36);

#if _DEBUG_REFCOUNTS
            if (cache_frame_8e586f507f42c2412a86b865add7f337_36 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_8e586f507f42c2412a86b865add7f337_36 = MAKE_FUNCTION_FRAME(codeobj_8e586f507f42c2412a86b865add7f337, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_8e586f507f42c2412a86b865add7f337_36->m_type_description == NULL);
        frame_8e586f507f42c2412a86b865add7f337_36 = cache_frame_8e586f507f42c2412a86b865add7f337_36;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_8e586f507f42c2412a86b865add7f337_36);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_8e586f507f42c2412a86b865add7f337_36) == 2); // Frame stack

        // Framed code:
        // Tried code:
        {
            PyObject *tmp_assign_source_245;
            PyObject *tmp_iter_arg_19;
            tmp_iter_arg_19 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__17_Random_binary_distribution_254, mod_consts[86]);

            if (tmp_iter_arg_19 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_iter_arg_19 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[86]);

                    if (unlikely(tmp_iter_arg_19 == NULL)) {
                        tmp_iter_arg_19 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[86]);
                    }

                    if (tmp_iter_arg_19 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 255;
                        type_description_2 = "o";
                        goto try_except_handler_97;
                    }
                    Py_INCREF(tmp_iter_arg_19);
                } else {
                    goto try_except_handler_97;
                }
            }

            tmp_assign_source_245 = MAKE_ITERATOR(tmp_iter_arg_19);
            Py_DECREF(tmp_iter_arg_19);
            if (tmp_assign_source_245 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 255;
                type_description_2 = "o";
                goto try_except_handler_97;
            }
            assert(tmp_Random_binary_distribution$listcomp_1__$0 == NULL);
            tmp_Random_binary_distribution$listcomp_1__$0 = tmp_assign_source_245;
        }
        {
            PyObject *tmp_assign_source_246;
            tmp_assign_source_246 = PyList_New(0);
            assert(tmp_Random_binary_distribution$listcomp_1__contraction == NULL);
            tmp_Random_binary_distribution$listcomp_1__contraction = tmp_assign_source_246;
        }
        if (isFrameUnusable(cache_frame_bb60c770118d4558e22d843bb6c1d839_37)) {
            Py_XDECREF(cache_frame_bb60c770118d4558e22d843bb6c1d839_37);

#if _DEBUG_REFCOUNTS
            if (cache_frame_bb60c770118d4558e22d843bb6c1d839_37 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_bb60c770118d4558e22d843bb6c1d839_37 = MAKE_FUNCTION_FRAME(codeobj_bb60c770118d4558e22d843bb6c1d839, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_bb60c770118d4558e22d843bb6c1d839_37->m_type_description == NULL);
        frame_bb60c770118d4558e22d843bb6c1d839_37 = cache_frame_bb60c770118d4558e22d843bb6c1d839_37;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_bb60c770118d4558e22d843bb6c1d839_37);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_bb60c770118d4558e22d843bb6c1d839_37) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_19:;
        {
            PyObject *tmp_next_source_19;
            PyObject *tmp_assign_source_247;
            CHECK_OBJECT(tmp_Random_binary_distribution$listcomp_1__$0);
            tmp_next_source_19 = tmp_Random_binary_distribution$listcomp_1__$0;
            tmp_assign_source_247 = ITERATOR_NEXT(tmp_next_source_19);
            if (tmp_assign_source_247 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_19;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_3 = "o";
                    exception_lineno = 255;
                    goto try_except_handler_98;
                }
            }

            {
                PyObject *old = tmp_Random_binary_distribution$listcomp_1__iter_value_0;
                tmp_Random_binary_distribution$listcomp_1__iter_value_0 = tmp_assign_source_247;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_248;
            CHECK_OBJECT(tmp_Random_binary_distribution$listcomp_1__iter_value_0);
            tmp_assign_source_248 = tmp_Random_binary_distribution$listcomp_1__iter_value_0;
            {
                PyObject *old = outline_35_var_tp;
                outline_35_var_tp = tmp_assign_source_248;
                Py_INCREF(outline_35_var_tp);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_19;
            PyObject *tmp_append_value_19;
            PyObject *tmp_called_value_138;
            PyObject *tmp_args_element_value_94;
            PyObject *tmp_args_element_value_95;
            PyObject *tmp_args_element_value_96;
            CHECK_OBJECT(tmp_Random_binary_distribution$listcomp_1__contraction);
            tmp_append_list_19 = tmp_Random_binary_distribution$listcomp_1__contraction;
            tmp_called_value_138 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[25]);

            if (unlikely(tmp_called_value_138 == NULL)) {
                tmp_called_value_138 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[25]);
            }

            if (tmp_called_value_138 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 255;
                type_description_3 = "o";
                goto try_except_handler_98;
            }
            CHECK_OBJECT(outline_35_var_tp);
            tmp_args_element_value_94 = outline_35_var_tp;
            CHECK_OBJECT(outline_35_var_tp);
            tmp_args_element_value_95 = outline_35_var_tp;
            CHECK_OBJECT(outline_35_var_tp);
            tmp_args_element_value_96 = outline_35_var_tp;
            frame_bb60c770118d4558e22d843bb6c1d839_37->m_frame.f_lineno = 255;
            {
                PyObject *call_args[] = {tmp_args_element_value_94, tmp_args_element_value_95, tmp_args_element_value_96};
                tmp_append_value_19 = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_138, call_args);
            }

            if (tmp_append_value_19 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 255;
                type_description_3 = "o";
                goto try_except_handler_98;
            }
            assert(PyList_Check(tmp_append_list_19));
            tmp_result = LIST_APPEND1(tmp_append_list_19, tmp_append_value_19);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 255;
                type_description_3 = "o";
                goto try_except_handler_98;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 255;
            type_description_3 = "o";
            goto try_except_handler_98;
        }
        goto loop_start_19;
        loop_end_19:;
        CHECK_OBJECT(tmp_Random_binary_distribution$listcomp_1__contraction);
        tmp_dictset_value = tmp_Random_binary_distribution$listcomp_1__contraction;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_98;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_98:;
        CHECK_OBJECT(tmp_Random_binary_distribution$listcomp_1__$0);
        Py_DECREF(tmp_Random_binary_distribution$listcomp_1__$0);
        tmp_Random_binary_distribution$listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_Random_binary_distribution$listcomp_1__contraction);
        Py_DECREF(tmp_Random_binary_distribution$listcomp_1__contraction);
        tmp_Random_binary_distribution$listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_Random_binary_distribution$listcomp_1__iter_value_0);
        tmp_Random_binary_distribution$listcomp_1__iter_value_0 = NULL;
        goto frame_return_exit_19;
        // Exception handler code:
        try_except_handler_98:;
        exception_keeper_type_94 = exception_type;
        exception_keeper_value_94 = exception_value;
        exception_keeper_tb_94 = exception_tb;
        exception_keeper_lineno_94 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Random_binary_distribution$listcomp_1__$0);
        Py_DECREF(tmp_Random_binary_distribution$listcomp_1__$0);
        tmp_Random_binary_distribution$listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_Random_binary_distribution$listcomp_1__contraction);
        Py_DECREF(tmp_Random_binary_distribution$listcomp_1__contraction);
        tmp_Random_binary_distribution$listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_Random_binary_distribution$listcomp_1__iter_value_0);
        tmp_Random_binary_distribution$listcomp_1__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_94;
        exception_value = exception_keeper_value_94;
        exception_tb = exception_keeper_tb_94;
        exception_lineno = exception_keeper_lineno_94;

        goto frame_exception_exit_37;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_bb60c770118d4558e22d843bb6c1d839_37);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_35;

        frame_return_exit_19:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_bb60c770118d4558e22d843bb6c1d839_37);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_97;

        frame_exception_exit_37:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_bb60c770118d4558e22d843bb6c1d839_37);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_bb60c770118d4558e22d843bb6c1d839_37, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_bb60c770118d4558e22d843bb6c1d839_37->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_bb60c770118d4558e22d843bb6c1d839_37, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_bb60c770118d4558e22d843bb6c1d839_37,
            type_description_3,
            outline_35_var_tp
        );


        // Release cached frame if used for exception.
        if (frame_bb60c770118d4558e22d843bb6c1d839_37 == cache_frame_bb60c770118d4558e22d843bb6c1d839_37) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_bb60c770118d4558e22d843bb6c1d839_37);
            cache_frame_bb60c770118d4558e22d843bb6c1d839_37 = NULL;
        }

        assertFrameObject(frame_bb60c770118d4558e22d843bb6c1d839_37);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_36;

        frame_no_exception_35:;
        goto skip_nested_handling_35;
        nested_frame_exit_36:;
        type_description_2 = "o";
        goto try_except_handler_97;
        skip_nested_handling_35:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_97:;
        Py_XDECREF(outline_35_var_tp);
        outline_35_var_tp = NULL;
        goto outline_result_36;
        // Exception handler code:
        try_except_handler_97:;
        exception_keeper_type_95 = exception_type;
        exception_keeper_value_95 = exception_value;
        exception_keeper_tb_95 = exception_tb;
        exception_keeper_lineno_95 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_35_var_tp);
        outline_35_var_tp = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_95;
        exception_value = exception_keeper_value_95;
        exception_tb = exception_keeper_tb_95;
        exception_lineno = exception_keeper_lineno_95;

        goto outline_exception_36;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_36:;
        exception_lineno = 255;
        goto frame_exception_exit_36;
        outline_result_36:;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__17_Random_binary_distribution_254, mod_consts[30], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 255;
            type_description_2 = "o";
            goto frame_exception_exit_36;
        }


        tmp_dictset_value = MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__14_generic();

        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__17_Random_binary_distribution_254, mod_consts[110], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 257;
            type_description_2 = "o";
            goto frame_exception_exit_36;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_8e586f507f42c2412a86b865add7f337_36);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_36;

        frame_exception_exit_36:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_8e586f507f42c2412a86b865add7f337_36);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_8e586f507f42c2412a86b865add7f337_36, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_8e586f507f42c2412a86b865add7f337_36->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_8e586f507f42c2412a86b865add7f337_36, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_8e586f507f42c2412a86b865add7f337_36,
            type_description_2,
            outline_34_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_8e586f507f42c2412a86b865add7f337_36 == cache_frame_8e586f507f42c2412a86b865add7f337_36) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_8e586f507f42c2412a86b865add7f337_36);
            cache_frame_8e586f507f42c2412a86b865add7f337_36 = NULL;
        }

        assertFrameObject(frame_8e586f507f42c2412a86b865add7f337_36);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_35;

        frame_no_exception_36:;
        goto skip_nested_handling_36;
        nested_frame_exit_35:;

        goto try_except_handler_96;
        skip_nested_handling_36:;
        {
            nuitka_bool tmp_condition_result_103;
            PyObject *tmp_cmp_expr_left_18;
            PyObject *tmp_cmp_expr_right_18;
            CHECK_OBJECT(tmp_class_creation_17__bases);
            tmp_cmp_expr_left_18 = tmp_class_creation_17__bases;
            CHECK_OBJECT(tmp_class_creation_17__bases_orig);
            tmp_cmp_expr_right_18 = tmp_class_creation_17__bases_orig;
            tmp_condition_result_103 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_18, tmp_cmp_expr_right_18);
            if (tmp_condition_result_103 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 254;

                goto try_except_handler_96;
            }
            if (tmp_condition_result_103 == NUITKA_BOOL_TRUE) {
                goto branch_yes_69;
            } else {
                goto branch_no_69;
            }
            assert(tmp_condition_result_103 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_69:;
        CHECK_OBJECT(tmp_class_creation_17__bases_orig);
        tmp_dictset_value = tmp_class_creation_17__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__17_Random_binary_distribution_254, mod_consts[98], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 254;

            goto try_except_handler_96;
        }
        branch_no_69:;
        {
            PyObject *tmp_assign_source_249;
            PyObject *tmp_called_value_139;
            PyObject *tmp_args_value_74;
            PyObject *tmp_tuple_element_109;
            PyObject *tmp_kwargs_value_74;
            CHECK_OBJECT(tmp_class_creation_17__metaclass);
            tmp_called_value_139 = tmp_class_creation_17__metaclass;
            tmp_tuple_element_109 = mod_consts[179];
            tmp_args_value_74 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_74, 0, tmp_tuple_element_109);
            CHECK_OBJECT(tmp_class_creation_17__bases);
            tmp_tuple_element_109 = tmp_class_creation_17__bases;
            PyTuple_SET_ITEM0(tmp_args_value_74, 1, tmp_tuple_element_109);
            tmp_tuple_element_109 = locals_numba$core$typing$randomdecl$$$class__17_Random_binary_distribution_254;
            PyTuple_SET_ITEM0(tmp_args_value_74, 2, tmp_tuple_element_109);
            CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
            tmp_kwargs_value_74 = tmp_class_creation_17__class_decl_dict;
            frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 254;
            tmp_assign_source_249 = CALL_FUNCTION(tmp_called_value_139, tmp_args_value_74, tmp_kwargs_value_74);
            Py_DECREF(tmp_args_value_74);
            if (tmp_assign_source_249 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 254;

                goto try_except_handler_96;
            }
            assert(outline_34_var___class__ == NULL);
            outline_34_var___class__ = tmp_assign_source_249;
        }
        CHECK_OBJECT(outline_34_var___class__);
        tmp_args_element_value_93 = outline_34_var___class__;
        Py_INCREF(tmp_args_element_value_93);
        goto try_return_handler_96;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_96:;
        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__17_Random_binary_distribution_254);
        locals_numba$core$typing$randomdecl$$$class__17_Random_binary_distribution_254 = NULL;
        goto try_return_handler_95;
        // Exception handler code:
        try_except_handler_96:;
        exception_keeper_type_96 = exception_type;
        exception_keeper_value_96 = exception_value;
        exception_keeper_tb_96 = exception_tb;
        exception_keeper_lineno_96 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__17_Random_binary_distribution_254);
        locals_numba$core$typing$randomdecl$$$class__17_Random_binary_distribution_254 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_96;
        exception_value = exception_keeper_value_96;
        exception_tb = exception_keeper_tb_96;
        exception_lineno = exception_keeper_lineno_96;

        goto try_except_handler_95;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_95:;
        CHECK_OBJECT(outline_34_var___class__);
        Py_DECREF(outline_34_var___class__);
        outline_34_var___class__ = NULL;
        goto outline_result_35;
        // Exception handler code:
        try_except_handler_95:;
        exception_keeper_type_97 = exception_type;
        exception_keeper_value_97 = exception_value;
        exception_keeper_tb_97 = exception_tb;
        exception_keeper_lineno_97 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_97;
        exception_value = exception_keeper_value_97;
        exception_tb = exception_keeper_tb_97;
        exception_lineno = exception_keeper_lineno_97;

        goto outline_exception_35;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_35:;
        exception_lineno = 254;
        goto try_except_handler_94;
        outline_result_35:;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 253;
        tmp_args_element_value_92 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_136, tmp_args_element_value_93);
        Py_DECREF(tmp_called_value_136);
        Py_DECREF(tmp_args_element_value_93);
        if (tmp_args_element_value_92 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);
            Py_DECREF(tmp_called_value_124);
            Py_DECREF(tmp_called_value_126);
            Py_DECREF(tmp_called_value_128);
            Py_DECREF(tmp_called_value_130);
            Py_DECREF(tmp_called_value_132);
            Py_DECREF(tmp_called_value_134);

            exception_lineno = 253;

            goto try_except_handler_94;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 252;
        tmp_args_element_value_91 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_134, tmp_args_element_value_92);
        Py_DECREF(tmp_called_value_134);
        Py_DECREF(tmp_args_element_value_92);
        if (tmp_args_element_value_91 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);
            Py_DECREF(tmp_called_value_124);
            Py_DECREF(tmp_called_value_126);
            Py_DECREF(tmp_called_value_128);
            Py_DECREF(tmp_called_value_130);
            Py_DECREF(tmp_called_value_132);

            exception_lineno = 252;

            goto try_except_handler_94;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 251;
        tmp_args_element_value_90 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_132, tmp_args_element_value_91);
        Py_DECREF(tmp_called_value_132);
        Py_DECREF(tmp_args_element_value_91);
        if (tmp_args_element_value_90 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);
            Py_DECREF(tmp_called_value_124);
            Py_DECREF(tmp_called_value_126);
            Py_DECREF(tmp_called_value_128);
            Py_DECREF(tmp_called_value_130);

            exception_lineno = 251;

            goto try_except_handler_94;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 250;
        tmp_args_element_value_89 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_130, tmp_args_element_value_90);
        Py_DECREF(tmp_called_value_130);
        Py_DECREF(tmp_args_element_value_90);
        if (tmp_args_element_value_89 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);
            Py_DECREF(tmp_called_value_124);
            Py_DECREF(tmp_called_value_126);
            Py_DECREF(tmp_called_value_128);

            exception_lineno = 250;

            goto try_except_handler_94;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 249;
        tmp_args_element_value_88 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_128, tmp_args_element_value_89);
        Py_DECREF(tmp_called_value_128);
        Py_DECREF(tmp_args_element_value_89);
        if (tmp_args_element_value_88 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);
            Py_DECREF(tmp_called_value_124);
            Py_DECREF(tmp_called_value_126);

            exception_lineno = 249;

            goto try_except_handler_94;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 248;
        tmp_args_element_value_87 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_126, tmp_args_element_value_88);
        Py_DECREF(tmp_called_value_126);
        Py_DECREF(tmp_args_element_value_88);
        if (tmp_args_element_value_87 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);
            Py_DECREF(tmp_called_value_124);

            exception_lineno = 248;

            goto try_except_handler_94;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 247;
        tmp_args_element_value_86 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_124, tmp_args_element_value_87);
        Py_DECREF(tmp_called_value_124);
        Py_DECREF(tmp_args_element_value_87);
        if (tmp_args_element_value_86 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_called_value_122);

            exception_lineno = 247;

            goto try_except_handler_94;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 246;
        tmp_args_element_value_85 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_122, tmp_args_element_value_86);
        Py_DECREF(tmp_called_value_122);
        Py_DECREF(tmp_args_element_value_86);
        if (tmp_args_element_value_85 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_called_value_120);

            exception_lineno = 246;

            goto try_except_handler_94;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 245;
        tmp_args_element_value_84 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_120, tmp_args_element_value_85);
        Py_DECREF(tmp_called_value_120);
        Py_DECREF(tmp_args_element_value_85);
        if (tmp_args_element_value_84 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);
            Py_DECREF(tmp_called_value_118);

            exception_lineno = 245;

            goto try_except_handler_94;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 244;
        tmp_args_element_value_83 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_118, tmp_args_element_value_84);
        Py_DECREF(tmp_called_value_118);
        Py_DECREF(tmp_args_element_value_84);
        if (tmp_args_element_value_83 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_called_value_116);

            exception_lineno = 244;

            goto try_except_handler_94;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 243;
        tmp_args_element_value_82 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_116, tmp_args_element_value_83);
        Py_DECREF(tmp_called_value_116);
        Py_DECREF(tmp_args_element_value_83);
        if (tmp_args_element_value_82 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_called_value_114);

            exception_lineno = 243;

            goto try_except_handler_94;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 242;
        tmp_args_element_value_81 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_114, tmp_args_element_value_82);
        Py_DECREF(tmp_called_value_114);
        Py_DECREF(tmp_args_element_value_82);
        if (tmp_args_element_value_81 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_called_value_112);

            exception_lineno = 242;

            goto try_except_handler_94;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 241;
        tmp_args_element_value_80 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_112, tmp_args_element_value_81);
        Py_DECREF(tmp_called_value_112);
        Py_DECREF(tmp_args_element_value_81);
        if (tmp_args_element_value_80 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_110);

            exception_lineno = 241;

            goto try_except_handler_94;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 240;
        tmp_assign_source_244 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_110, tmp_args_element_value_80);
        Py_DECREF(tmp_called_value_110);
        Py_DECREF(tmp_args_element_value_80);
        if (tmp_assign_source_244 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 240;

            goto try_except_handler_94;
        }
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[179], tmp_assign_source_244);
    }
    goto try_end_26;
    // Exception handler code:
    try_except_handler_94:;
    exception_keeper_type_98 = exception_type;
    exception_keeper_value_98 = exception_value;
    exception_keeper_tb_98 = exception_tb;
    exception_keeper_lineno_98 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_17__bases_orig);
    tmp_class_creation_17__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_17__bases);
    tmp_class_creation_17__bases = NULL;
    Py_XDECREF(tmp_class_creation_17__class_decl_dict);
    tmp_class_creation_17__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_17__metaclass);
    tmp_class_creation_17__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_17__prepared);
    tmp_class_creation_17__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_98;
    exception_value = exception_keeper_value_98;
    exception_tb = exception_keeper_tb_98;
    exception_lineno = exception_keeper_lineno_98;

    goto frame_exception_exit_1;
    // End of try:
    try_end_26:;
    CHECK_OBJECT(tmp_class_creation_17__bases_orig);
    Py_DECREF(tmp_class_creation_17__bases_orig);
    tmp_class_creation_17__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_17__bases);
    Py_DECREF(tmp_class_creation_17__bases);
    tmp_class_creation_17__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
    Py_DECREF(tmp_class_creation_17__class_decl_dict);
    tmp_class_creation_17__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_17__metaclass);
    Py_DECREF(tmp_class_creation_17__metaclass);
    tmp_class_creation_17__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_17__prepared);
    Py_DECREF(tmp_class_creation_17__prepared);
    tmp_class_creation_17__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_250;
        PyObject *tmp_tuple_element_110;
        tmp_tuple_element_110 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[99]);

        if (unlikely(tmp_tuple_element_110 == NULL)) {
            tmp_tuple_element_110 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[99]);
        }

        if (tmp_tuple_element_110 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 271;

            goto try_except_handler_99;
        }
        tmp_assign_source_250 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_250, 0, tmp_tuple_element_110);
        assert(tmp_class_creation_18__bases_orig == NULL);
        tmp_class_creation_18__bases_orig = tmp_assign_source_250;
    }
    {
        PyObject *tmp_assign_source_251;
        PyObject *tmp_dircall_arg1_18;
        CHECK_OBJECT(tmp_class_creation_18__bases_orig);
        tmp_dircall_arg1_18 = tmp_class_creation_18__bases_orig;
        Py_INCREF(tmp_dircall_arg1_18);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_18};
            tmp_assign_source_251 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_251 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 271;

            goto try_except_handler_99;
        }
        assert(tmp_class_creation_18__bases == NULL);
        tmp_class_creation_18__bases = tmp_assign_source_251;
    }
    {
        PyObject *tmp_assign_source_252;
        tmp_assign_source_252 = PyDict_New();
        assert(tmp_class_creation_18__class_decl_dict == NULL);
        tmp_class_creation_18__class_decl_dict = tmp_assign_source_252;
    }
    {
        PyObject *tmp_assign_source_253;
        PyObject *tmp_metaclass_value_18;
        bool tmp_condition_result_104;
        PyObject *tmp_key_value_52;
        PyObject *tmp_dict_arg_value_52;
        PyObject *tmp_dict_arg_value_53;
        PyObject *tmp_key_value_53;
        nuitka_bool tmp_condition_result_105;
        int tmp_truth_name_18;
        PyObject *tmp_type_arg_35;
        PyObject *tmp_expression_value_169;
        PyObject *tmp_subscript_value_18;
        PyObject *tmp_bases_value_18;
        tmp_key_value_52 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
        tmp_dict_arg_value_52 = tmp_class_creation_18__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_52, tmp_key_value_52);
        assert(!(tmp_res == -1));
        tmp_condition_result_104 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_104 != false) {
            goto condexpr_true_35;
        } else {
            goto condexpr_false_35;
        }
        condexpr_true_35:;
        CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
        tmp_dict_arg_value_53 = tmp_class_creation_18__class_decl_dict;
        tmp_key_value_53 = mod_consts[87];
        tmp_metaclass_value_18 = DICT_GET_ITEM0(tmp_dict_arg_value_53, tmp_key_value_53);
        if (tmp_metaclass_value_18 == NULL) {
            tmp_metaclass_value_18 = Py_None;
        }
        assert(!(tmp_metaclass_value_18 == NULL));
        Py_INCREF(tmp_metaclass_value_18);
        goto condexpr_end_35;
        condexpr_false_35:;
        CHECK_OBJECT(tmp_class_creation_18__bases);
        tmp_truth_name_18 = CHECK_IF_TRUE(tmp_class_creation_18__bases);
        if (tmp_truth_name_18 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 271;

            goto try_except_handler_99;
        }
        tmp_condition_result_105 = tmp_truth_name_18 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_105 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_36;
        } else {
            goto condexpr_false_36;
        }
        condexpr_true_36:;
        CHECK_OBJECT(tmp_class_creation_18__bases);
        tmp_expression_value_169 = tmp_class_creation_18__bases;
        tmp_subscript_value_18 = mod_consts[13];
        tmp_type_arg_35 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_169, tmp_subscript_value_18, 0);
        if (tmp_type_arg_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 271;

            goto try_except_handler_99;
        }
        tmp_metaclass_value_18 = BUILTIN_TYPE1(tmp_type_arg_35);
        Py_DECREF(tmp_type_arg_35);
        if (tmp_metaclass_value_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 271;

            goto try_except_handler_99;
        }
        goto condexpr_end_36;
        condexpr_false_36:;
        tmp_metaclass_value_18 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_18);
        condexpr_end_36:;
        condexpr_end_35:;
        CHECK_OBJECT(tmp_class_creation_18__bases);
        tmp_bases_value_18 = tmp_class_creation_18__bases;
        tmp_assign_source_253 = SELECT_METACLASS(tmp_metaclass_value_18, tmp_bases_value_18);
        Py_DECREF(tmp_metaclass_value_18);
        if (tmp_assign_source_253 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 271;

            goto try_except_handler_99;
        }
        assert(tmp_class_creation_18__metaclass == NULL);
        tmp_class_creation_18__metaclass = tmp_assign_source_253;
    }
    {
        bool tmp_condition_result_106;
        PyObject *tmp_key_value_54;
        PyObject *tmp_dict_arg_value_54;
        tmp_key_value_54 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
        tmp_dict_arg_value_54 = tmp_class_creation_18__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_54, tmp_key_value_54);
        assert(!(tmp_res == -1));
        tmp_condition_result_106 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_106 != false) {
            goto branch_yes_70;
        } else {
            goto branch_no_70;
        }
    }
    branch_yes_70:;
    CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_18__class_decl_dict;
    tmp_dictdel_key = mod_consts[87];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 271;

        goto try_except_handler_99;
    }
    branch_no_70:;
    {
        nuitka_bool tmp_condition_result_107;
        PyObject *tmp_expression_value_170;
        CHECK_OBJECT(tmp_class_creation_18__metaclass);
        tmp_expression_value_170 = tmp_class_creation_18__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_170, mod_consts[88]);
        tmp_condition_result_107 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_107 == NUITKA_BOOL_TRUE) {
            goto branch_yes_71;
        } else {
            goto branch_no_71;
        }
    }
    branch_yes_71:;
    {
        PyObject *tmp_assign_source_254;
        PyObject *tmp_called_value_140;
        PyObject *tmp_expression_value_171;
        PyObject *tmp_args_value_75;
        PyObject *tmp_tuple_element_111;
        PyObject *tmp_kwargs_value_75;
        CHECK_OBJECT(tmp_class_creation_18__metaclass);
        tmp_expression_value_171 = tmp_class_creation_18__metaclass;
        tmp_called_value_140 = LOOKUP_ATTRIBUTE(tmp_expression_value_171, mod_consts[88]);
        if (tmp_called_value_140 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 271;

            goto try_except_handler_99;
        }
        tmp_tuple_element_111 = mod_consts[208];
        tmp_args_value_75 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_75, 0, tmp_tuple_element_111);
        CHECK_OBJECT(tmp_class_creation_18__bases);
        tmp_tuple_element_111 = tmp_class_creation_18__bases;
        PyTuple_SET_ITEM0(tmp_args_value_75, 1, tmp_tuple_element_111);
        CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
        tmp_kwargs_value_75 = tmp_class_creation_18__class_decl_dict;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 271;
        tmp_assign_source_254 = CALL_FUNCTION(tmp_called_value_140, tmp_args_value_75, tmp_kwargs_value_75);
        Py_DECREF(tmp_called_value_140);
        Py_DECREF(tmp_args_value_75);
        if (tmp_assign_source_254 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 271;

            goto try_except_handler_99;
        }
        assert(tmp_class_creation_18__prepared == NULL);
        tmp_class_creation_18__prepared = tmp_assign_source_254;
    }
    {
        bool tmp_condition_result_108;
        PyObject *tmp_operand_value_18;
        PyObject *tmp_expression_value_172;
        CHECK_OBJECT(tmp_class_creation_18__prepared);
        tmp_expression_value_172 = tmp_class_creation_18__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_172, mod_consts[89]);
        tmp_operand_value_18 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_18);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 271;

            goto try_except_handler_99;
        }
        tmp_condition_result_108 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_108 != false) {
            goto branch_yes_72;
        } else {
            goto branch_no_72;
        }
    }
    branch_yes_72:;
    {
        PyObject *tmp_raise_type_18;
        PyObject *tmp_raise_value_18;
        PyObject *tmp_left_value_26;
        PyObject *tmp_right_value_26;
        PyObject *tmp_tuple_element_112;
        PyObject *tmp_getattr_target_18;
        PyObject *tmp_getattr_attr_18;
        PyObject *tmp_getattr_default_18;
        tmp_raise_type_18 = PyExc_TypeError;
        tmp_left_value_26 = mod_consts[90];
        CHECK_OBJECT(tmp_class_creation_18__metaclass);
        tmp_getattr_target_18 = tmp_class_creation_18__metaclass;
        tmp_getattr_attr_18 = mod_consts[91];
        tmp_getattr_default_18 = mod_consts[92];
        tmp_tuple_element_112 = BUILTIN_GETATTR(tmp_getattr_target_18, tmp_getattr_attr_18, tmp_getattr_default_18);
        if (tmp_tuple_element_112 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 271;

            goto try_except_handler_99;
        }
        tmp_right_value_26 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_173;
            PyObject *tmp_type_arg_36;
            PyTuple_SET_ITEM(tmp_right_value_26, 0, tmp_tuple_element_112);
            CHECK_OBJECT(tmp_class_creation_18__prepared);
            tmp_type_arg_36 = tmp_class_creation_18__prepared;
            tmp_expression_value_173 = BUILTIN_TYPE1(tmp_type_arg_36);
            assert(!(tmp_expression_value_173 == NULL));
            tmp_tuple_element_112 = LOOKUP_ATTRIBUTE(tmp_expression_value_173, mod_consts[91]);
            Py_DECREF(tmp_expression_value_173);
            if (tmp_tuple_element_112 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 271;

                goto tuple_build_exception_19;
            }
            PyTuple_SET_ITEM(tmp_right_value_26, 1, tmp_tuple_element_112);
        }
        goto tuple_build_noexception_19;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_19:;
        Py_DECREF(tmp_right_value_26);
        goto try_except_handler_99;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_19:;
        tmp_raise_value_18 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_26, tmp_right_value_26);
        Py_DECREF(tmp_right_value_26);
        if (tmp_raise_value_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 271;

            goto try_except_handler_99;
        }
        exception_type = tmp_raise_type_18;
        Py_INCREF(tmp_raise_type_18);
        exception_value = tmp_raise_value_18;
        exception_lineno = 271;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_99;
    }
    branch_no_72:;
    goto branch_end_71;
    branch_no_71:;
    {
        PyObject *tmp_assign_source_255;
        tmp_assign_source_255 = PyDict_New();
        assert(tmp_class_creation_18__prepared == NULL);
        tmp_class_creation_18__prepared = tmp_assign_source_255;
    }
    branch_end_71:;
    {
        PyObject *tmp_assign_source_256;
        PyObject *tmp_called_value_141;
        PyObject *tmp_called_value_142;
        PyObject *tmp_args_value_76;
        PyObject *tmp_tuple_element_113;
        PyObject *tmp_expression_value_174;
        PyObject *tmp_expression_value_175;
        PyObject *tmp_kwargs_value_76;
        PyObject *tmp_args_element_value_97;
        PyObject *tmp_called_value_143;
        PyObject *tmp_called_value_144;
        PyObject *tmp_args_value_77;
        PyObject *tmp_tuple_element_114;
        PyObject *tmp_expression_value_176;
        PyObject *tmp_expression_value_177;
        PyObject *tmp_kwargs_value_77;
        PyObject *tmp_args_element_value_98;
        PyObject *tmp_called_value_145;
        PyObject *tmp_called_value_146;
        PyObject *tmp_args_value_78;
        PyObject *tmp_tuple_element_115;
        PyObject *tmp_expression_value_178;
        PyObject *tmp_expression_value_179;
        PyObject *tmp_kwargs_value_78;
        PyObject *tmp_args_element_value_99;
        PyObject *tmp_called_value_147;
        PyObject *tmp_called_value_148;
        PyObject *tmp_args_value_79;
        PyObject *tmp_tuple_element_116;
        PyObject *tmp_expression_value_180;
        PyObject *tmp_expression_value_181;
        PyObject *tmp_kwargs_value_79;
        PyObject *tmp_args_element_value_100;
        PyObject *tmp_called_value_149;
        PyObject *tmp_called_value_150;
        PyObject *tmp_args_value_80;
        PyObject *tmp_tuple_element_117;
        PyObject *tmp_expression_value_182;
        PyObject *tmp_expression_value_183;
        PyObject *tmp_kwargs_value_80;
        PyObject *tmp_args_element_value_101;
        PyObject *tmp_called_value_151;
        PyObject *tmp_called_value_152;
        PyObject *tmp_args_value_81;
        PyObject *tmp_tuple_element_118;
        PyObject *tmp_expression_value_184;
        PyObject *tmp_expression_value_185;
        PyObject *tmp_kwargs_value_81;
        PyObject *tmp_args_element_value_102;
        PyObject *tmp_called_value_153;
        PyObject *tmp_called_value_154;
        PyObject *tmp_args_value_82;
        PyObject *tmp_tuple_element_119;
        PyObject *tmp_expression_value_186;
        PyObject *tmp_kwargs_value_82;
        PyObject *tmp_args_element_value_103;
        PyObject *tmp_called_value_155;
        PyObject *tmp_called_value_156;
        PyObject *tmp_args_value_83;
        PyObject *tmp_tuple_element_120;
        PyObject *tmp_expression_value_187;
        PyObject *tmp_kwargs_value_83;
        PyObject *tmp_args_element_value_104;
        tmp_called_value_142 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_142 == NULL)) {
            tmp_called_value_142 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_142 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 263;

            goto try_except_handler_99;
        }
        tmp_expression_value_175 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_175 == NULL)) {
            tmp_expression_value_175 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_175 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 263;

            goto try_except_handler_99;
        }
        tmp_expression_value_174 = LOOKUP_ATTRIBUTE(tmp_expression_value_175, mod_consts[19]);
        if (tmp_expression_value_174 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 263;

            goto try_except_handler_99;
        }
        tmp_tuple_element_113 = LOOKUP_ATTRIBUTE(tmp_expression_value_174, mod_consts[209]);
        Py_DECREF(tmp_expression_value_174);
        if (tmp_tuple_element_113 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 263;

            goto try_except_handler_99;
        }
        tmp_args_value_76 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_76, 0, tmp_tuple_element_113);
        tmp_kwargs_value_76 = PyDict_Copy(mod_consts[210]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 263;
        tmp_called_value_141 = CALL_FUNCTION(tmp_called_value_142, tmp_args_value_76, tmp_kwargs_value_76);
        Py_DECREF(tmp_args_value_76);
        Py_DECREF(tmp_kwargs_value_76);
        if (tmp_called_value_141 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 263;

            goto try_except_handler_99;
        }
        tmp_called_value_144 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_144 == NULL)) {
            tmp_called_value_144 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_144 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);

            exception_lineno = 264;

            goto try_except_handler_99;
        }
        tmp_expression_value_177 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_177 == NULL)) {
            tmp_expression_value_177 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_177 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);

            exception_lineno = 264;

            goto try_except_handler_99;
        }
        tmp_expression_value_176 = LOOKUP_ATTRIBUTE(tmp_expression_value_177, mod_consts[19]);
        if (tmp_expression_value_176 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);

            exception_lineno = 264;

            goto try_except_handler_99;
        }
        tmp_tuple_element_114 = LOOKUP_ATTRIBUTE(tmp_expression_value_176, mod_consts[211]);
        Py_DECREF(tmp_expression_value_176);
        if (tmp_tuple_element_114 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);

            exception_lineno = 264;

            goto try_except_handler_99;
        }
        tmp_args_value_77 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_77, 0, tmp_tuple_element_114);
        tmp_kwargs_value_77 = PyDict_Copy(mod_consts[212]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 264;
        tmp_called_value_143 = CALL_FUNCTION(tmp_called_value_144, tmp_args_value_77, tmp_kwargs_value_77);
        Py_DECREF(tmp_args_value_77);
        Py_DECREF(tmp_kwargs_value_77);
        if (tmp_called_value_143 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);

            exception_lineno = 264;

            goto try_except_handler_99;
        }
        tmp_called_value_146 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_146 == NULL)) {
            tmp_called_value_146 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_146 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);

            exception_lineno = 265;

            goto try_except_handler_99;
        }
        tmp_expression_value_179 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_179 == NULL)) {
            tmp_expression_value_179 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_179 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);

            exception_lineno = 265;

            goto try_except_handler_99;
        }
        tmp_expression_value_178 = LOOKUP_ATTRIBUTE(tmp_expression_value_179, mod_consts[19]);
        if (tmp_expression_value_178 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);

            exception_lineno = 265;

            goto try_except_handler_99;
        }
        tmp_tuple_element_115 = LOOKUP_ATTRIBUTE(tmp_expression_value_178, mod_consts[213]);
        Py_DECREF(tmp_expression_value_178);
        if (tmp_tuple_element_115 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);

            exception_lineno = 265;

            goto try_except_handler_99;
        }
        tmp_args_value_78 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_78, 0, tmp_tuple_element_115);
        tmp_kwargs_value_78 = PyDict_Copy(mod_consts[214]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 265;
        tmp_called_value_145 = CALL_FUNCTION(tmp_called_value_146, tmp_args_value_78, tmp_kwargs_value_78);
        Py_DECREF(tmp_args_value_78);
        Py_DECREF(tmp_kwargs_value_78);
        if (tmp_called_value_145 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);

            exception_lineno = 265;

            goto try_except_handler_99;
        }
        tmp_called_value_148 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_148 == NULL)) {
            tmp_called_value_148 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_148 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);
            Py_DECREF(tmp_called_value_145);

            exception_lineno = 266;

            goto try_except_handler_99;
        }
        tmp_expression_value_181 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_181 == NULL)) {
            tmp_expression_value_181 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_181 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);
            Py_DECREF(tmp_called_value_145);

            exception_lineno = 266;

            goto try_except_handler_99;
        }
        tmp_expression_value_180 = LOOKUP_ATTRIBUTE(tmp_expression_value_181, mod_consts[19]);
        if (tmp_expression_value_180 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);
            Py_DECREF(tmp_called_value_145);

            exception_lineno = 266;

            goto try_except_handler_99;
        }
        tmp_tuple_element_116 = LOOKUP_ATTRIBUTE(tmp_expression_value_180, mod_consts[215]);
        Py_DECREF(tmp_expression_value_180);
        if (tmp_tuple_element_116 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);
            Py_DECREF(tmp_called_value_145);

            exception_lineno = 266;

            goto try_except_handler_99;
        }
        tmp_args_value_79 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_79, 0, tmp_tuple_element_116);
        tmp_kwargs_value_79 = PyDict_Copy(mod_consts[216]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 266;
        tmp_called_value_147 = CALL_FUNCTION(tmp_called_value_148, tmp_args_value_79, tmp_kwargs_value_79);
        Py_DECREF(tmp_args_value_79);
        Py_DECREF(tmp_kwargs_value_79);
        if (tmp_called_value_147 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);
            Py_DECREF(tmp_called_value_145);

            exception_lineno = 266;

            goto try_except_handler_99;
        }
        tmp_called_value_150 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_150 == NULL)) {
            tmp_called_value_150 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_150 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);
            Py_DECREF(tmp_called_value_145);
            Py_DECREF(tmp_called_value_147);

            exception_lineno = 267;

            goto try_except_handler_99;
        }
        tmp_expression_value_183 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_183 == NULL)) {
            tmp_expression_value_183 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_183 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);
            Py_DECREF(tmp_called_value_145);
            Py_DECREF(tmp_called_value_147);

            exception_lineno = 267;

            goto try_except_handler_99;
        }
        tmp_expression_value_182 = LOOKUP_ATTRIBUTE(tmp_expression_value_183, mod_consts[19]);
        if (tmp_expression_value_182 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);
            Py_DECREF(tmp_called_value_145);
            Py_DECREF(tmp_called_value_147);

            exception_lineno = 267;

            goto try_except_handler_99;
        }
        tmp_tuple_element_117 = LOOKUP_ATTRIBUTE(tmp_expression_value_182, mod_consts[217]);
        Py_DECREF(tmp_expression_value_182);
        if (tmp_tuple_element_117 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);
            Py_DECREF(tmp_called_value_145);
            Py_DECREF(tmp_called_value_147);

            exception_lineno = 267;

            goto try_except_handler_99;
        }
        tmp_args_value_80 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_80, 0, tmp_tuple_element_117);
        tmp_kwargs_value_80 = PyDict_Copy(mod_consts[218]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 267;
        tmp_called_value_149 = CALL_FUNCTION(tmp_called_value_150, tmp_args_value_80, tmp_kwargs_value_80);
        Py_DECREF(tmp_args_value_80);
        Py_DECREF(tmp_kwargs_value_80);
        if (tmp_called_value_149 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);
            Py_DECREF(tmp_called_value_145);
            Py_DECREF(tmp_called_value_147);

            exception_lineno = 267;

            goto try_except_handler_99;
        }
        tmp_called_value_152 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_152 == NULL)) {
            tmp_called_value_152 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_152 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);
            Py_DECREF(tmp_called_value_145);
            Py_DECREF(tmp_called_value_147);
            Py_DECREF(tmp_called_value_149);

            exception_lineno = 268;

            goto try_except_handler_99;
        }
        tmp_expression_value_185 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_185 == NULL)) {
            tmp_expression_value_185 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_185 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);
            Py_DECREF(tmp_called_value_145);
            Py_DECREF(tmp_called_value_147);
            Py_DECREF(tmp_called_value_149);

            exception_lineno = 268;

            goto try_except_handler_99;
        }
        tmp_expression_value_184 = LOOKUP_ATTRIBUTE(tmp_expression_value_185, mod_consts[19]);
        if (tmp_expression_value_184 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);
            Py_DECREF(tmp_called_value_145);
            Py_DECREF(tmp_called_value_147);
            Py_DECREF(tmp_called_value_149);

            exception_lineno = 268;

            goto try_except_handler_99;
        }
        tmp_tuple_element_118 = LOOKUP_ATTRIBUTE(tmp_expression_value_184, mod_consts[219]);
        Py_DECREF(tmp_expression_value_184);
        if (tmp_tuple_element_118 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);
            Py_DECREF(tmp_called_value_145);
            Py_DECREF(tmp_called_value_147);
            Py_DECREF(tmp_called_value_149);

            exception_lineno = 268;

            goto try_except_handler_99;
        }
        tmp_args_value_81 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_81, 0, tmp_tuple_element_118);
        tmp_kwargs_value_81 = PyDict_Copy(mod_consts[220]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 268;
        tmp_called_value_151 = CALL_FUNCTION(tmp_called_value_152, tmp_args_value_81, tmp_kwargs_value_81);
        Py_DECREF(tmp_args_value_81);
        Py_DECREF(tmp_kwargs_value_81);
        if (tmp_called_value_151 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);
            Py_DECREF(tmp_called_value_145);
            Py_DECREF(tmp_called_value_147);
            Py_DECREF(tmp_called_value_149);

            exception_lineno = 268;

            goto try_except_handler_99;
        }
        tmp_called_value_154 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_154 == NULL)) {
            tmp_called_value_154 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_154 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);
            Py_DECREF(tmp_called_value_145);
            Py_DECREF(tmp_called_value_147);
            Py_DECREF(tmp_called_value_149);
            Py_DECREF(tmp_called_value_151);

            exception_lineno = 269;

            goto try_except_handler_99;
        }
        tmp_expression_value_186 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[19]);

        if (unlikely(tmp_expression_value_186 == NULL)) {
            tmp_expression_value_186 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[19]);
        }

        if (tmp_expression_value_186 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);
            Py_DECREF(tmp_called_value_145);
            Py_DECREF(tmp_called_value_147);
            Py_DECREF(tmp_called_value_149);
            Py_DECREF(tmp_called_value_151);

            exception_lineno = 269;

            goto try_except_handler_99;
        }
        tmp_tuple_element_119 = LOOKUP_ATTRIBUTE(tmp_expression_value_186, mod_consts[221]);
        if (tmp_tuple_element_119 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);
            Py_DECREF(tmp_called_value_145);
            Py_DECREF(tmp_called_value_147);
            Py_DECREF(tmp_called_value_149);
            Py_DECREF(tmp_called_value_151);

            exception_lineno = 269;

            goto try_except_handler_99;
        }
        tmp_args_value_82 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_82, 0, tmp_tuple_element_119);
        tmp_kwargs_value_82 = PyDict_Copy(mod_consts[222]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 269;
        tmp_called_value_153 = CALL_FUNCTION(tmp_called_value_154, tmp_args_value_82, tmp_kwargs_value_82);
        Py_DECREF(tmp_args_value_82);
        Py_DECREF(tmp_kwargs_value_82);
        if (tmp_called_value_153 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);
            Py_DECREF(tmp_called_value_145);
            Py_DECREF(tmp_called_value_147);
            Py_DECREF(tmp_called_value_149);
            Py_DECREF(tmp_called_value_151);

            exception_lineno = 269;

            goto try_except_handler_99;
        }
        tmp_called_value_156 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_156 == NULL)) {
            tmp_called_value_156 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_156 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);
            Py_DECREF(tmp_called_value_145);
            Py_DECREF(tmp_called_value_147);
            Py_DECREF(tmp_called_value_149);
            Py_DECREF(tmp_called_value_151);
            Py_DECREF(tmp_called_value_153);

            exception_lineno = 270;

            goto try_except_handler_99;
        }
        tmp_expression_value_187 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[19]);

        if (unlikely(tmp_expression_value_187 == NULL)) {
            tmp_expression_value_187 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[19]);
        }

        if (tmp_expression_value_187 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);
            Py_DECREF(tmp_called_value_145);
            Py_DECREF(tmp_called_value_147);
            Py_DECREF(tmp_called_value_149);
            Py_DECREF(tmp_called_value_151);
            Py_DECREF(tmp_called_value_153);

            exception_lineno = 270;

            goto try_except_handler_99;
        }
        tmp_tuple_element_120 = LOOKUP_ATTRIBUTE(tmp_expression_value_187, mod_consts[223]);
        if (tmp_tuple_element_120 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);
            Py_DECREF(tmp_called_value_145);
            Py_DECREF(tmp_called_value_147);
            Py_DECREF(tmp_called_value_149);
            Py_DECREF(tmp_called_value_151);
            Py_DECREF(tmp_called_value_153);

            exception_lineno = 270;

            goto try_except_handler_99;
        }
        tmp_args_value_83 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_83, 0, tmp_tuple_element_120);
        tmp_kwargs_value_83 = PyDict_Copy(mod_consts[224]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 270;
        tmp_called_value_155 = CALL_FUNCTION(tmp_called_value_156, tmp_args_value_83, tmp_kwargs_value_83);
        Py_DECREF(tmp_args_value_83);
        Py_DECREF(tmp_kwargs_value_83);
        if (tmp_called_value_155 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);
            Py_DECREF(tmp_called_value_145);
            Py_DECREF(tmp_called_value_147);
            Py_DECREF(tmp_called_value_149);
            Py_DECREF(tmp_called_value_151);
            Py_DECREF(tmp_called_value_153);

            exception_lineno = 270;

            goto try_except_handler_99;
        }
        {
            PyObject *tmp_set_locals_18;
            CHECK_OBJECT(tmp_class_creation_18__prepared);
            tmp_set_locals_18 = tmp_class_creation_18__prepared;
            locals_numba$core$typing$randomdecl$$$class__18_Random_unary_distribution_271 = tmp_set_locals_18;
            Py_INCREF(tmp_set_locals_18);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[93];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__18_Random_unary_distribution_271, mod_consts[94], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 271;

            goto try_except_handler_101;
        }
        tmp_dictset_value = mod_consts[208];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__18_Random_unary_distribution_271, mod_consts[96], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 271;

            goto try_except_handler_101;
        }
        if (isFrameUnusable(cache_frame_01d10b70dd56fe91ecc5ff5ea2ebb02e_38)) {
            Py_XDECREF(cache_frame_01d10b70dd56fe91ecc5ff5ea2ebb02e_38);

#if _DEBUG_REFCOUNTS
            if (cache_frame_01d10b70dd56fe91ecc5ff5ea2ebb02e_38 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_01d10b70dd56fe91ecc5ff5ea2ebb02e_38 = MAKE_FUNCTION_FRAME(codeobj_01d10b70dd56fe91ecc5ff5ea2ebb02e, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_01d10b70dd56fe91ecc5ff5ea2ebb02e_38->m_type_description == NULL);
        frame_01d10b70dd56fe91ecc5ff5ea2ebb02e_38 = cache_frame_01d10b70dd56fe91ecc5ff5ea2ebb02e_38;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_01d10b70dd56fe91ecc5ff5ea2ebb02e_38);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_01d10b70dd56fe91ecc5ff5ea2ebb02e_38) == 2); // Frame stack

        // Framed code:
        // Tried code:
        {
            PyObject *tmp_assign_source_257;
            PyObject *tmp_iter_arg_20;
            tmp_iter_arg_20 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__18_Random_unary_distribution_271, mod_consts[86]);

            if (tmp_iter_arg_20 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_iter_arg_20 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[86]);

                    if (unlikely(tmp_iter_arg_20 == NULL)) {
                        tmp_iter_arg_20 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[86]);
                    }

                    if (tmp_iter_arg_20 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 272;
                        type_description_2 = "o";
                        goto try_except_handler_102;
                    }
                    Py_INCREF(tmp_iter_arg_20);
                } else {
                    goto try_except_handler_102;
                }
            }

            tmp_assign_source_257 = MAKE_ITERATOR(tmp_iter_arg_20);
            Py_DECREF(tmp_iter_arg_20);
            if (tmp_assign_source_257 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 272;
                type_description_2 = "o";
                goto try_except_handler_102;
            }
            assert(tmp_Random_unary_distribution$listcomp_1__$0 == NULL);
            tmp_Random_unary_distribution$listcomp_1__$0 = tmp_assign_source_257;
        }
        {
            PyObject *tmp_assign_source_258;
            tmp_assign_source_258 = PyList_New(0);
            assert(tmp_Random_unary_distribution$listcomp_1__contraction == NULL);
            tmp_Random_unary_distribution$listcomp_1__contraction = tmp_assign_source_258;
        }
        if (isFrameUnusable(cache_frame_dcd1c412f0c9a7a03f44257284053857_39)) {
            Py_XDECREF(cache_frame_dcd1c412f0c9a7a03f44257284053857_39);

#if _DEBUG_REFCOUNTS
            if (cache_frame_dcd1c412f0c9a7a03f44257284053857_39 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_dcd1c412f0c9a7a03f44257284053857_39 = MAKE_FUNCTION_FRAME(codeobj_dcd1c412f0c9a7a03f44257284053857, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_dcd1c412f0c9a7a03f44257284053857_39->m_type_description == NULL);
        frame_dcd1c412f0c9a7a03f44257284053857_39 = cache_frame_dcd1c412f0c9a7a03f44257284053857_39;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_dcd1c412f0c9a7a03f44257284053857_39);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_dcd1c412f0c9a7a03f44257284053857_39) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_20:;
        {
            PyObject *tmp_next_source_20;
            PyObject *tmp_assign_source_259;
            CHECK_OBJECT(tmp_Random_unary_distribution$listcomp_1__$0);
            tmp_next_source_20 = tmp_Random_unary_distribution$listcomp_1__$0;
            tmp_assign_source_259 = ITERATOR_NEXT(tmp_next_source_20);
            if (tmp_assign_source_259 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_20;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_3 = "o";
                    exception_lineno = 272;
                    goto try_except_handler_103;
                }
            }

            {
                PyObject *old = tmp_Random_unary_distribution$listcomp_1__iter_value_0;
                tmp_Random_unary_distribution$listcomp_1__iter_value_0 = tmp_assign_source_259;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_260;
            CHECK_OBJECT(tmp_Random_unary_distribution$listcomp_1__iter_value_0);
            tmp_assign_source_260 = tmp_Random_unary_distribution$listcomp_1__iter_value_0;
            {
                PyObject *old = outline_37_var_tp;
                outline_37_var_tp = tmp_assign_source_260;
                Py_INCREF(outline_37_var_tp);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_20;
            PyObject *tmp_append_value_20;
            PyObject *tmp_called_value_157;
            PyObject *tmp_args_element_value_105;
            PyObject *tmp_args_element_value_106;
            CHECK_OBJECT(tmp_Random_unary_distribution$listcomp_1__contraction);
            tmp_append_list_20 = tmp_Random_unary_distribution$listcomp_1__contraction;
            tmp_called_value_157 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[25]);

            if (unlikely(tmp_called_value_157 == NULL)) {
                tmp_called_value_157 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[25]);
            }

            if (tmp_called_value_157 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 272;
                type_description_3 = "o";
                goto try_except_handler_103;
            }
            CHECK_OBJECT(outline_37_var_tp);
            tmp_args_element_value_105 = outline_37_var_tp;
            CHECK_OBJECT(outline_37_var_tp);
            tmp_args_element_value_106 = outline_37_var_tp;
            frame_dcd1c412f0c9a7a03f44257284053857_39->m_frame.f_lineno = 272;
            {
                PyObject *call_args[] = {tmp_args_element_value_105, tmp_args_element_value_106};
                tmp_append_value_20 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_157, call_args);
            }

            if (tmp_append_value_20 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 272;
                type_description_3 = "o";
                goto try_except_handler_103;
            }
            assert(PyList_Check(tmp_append_list_20));
            tmp_result = LIST_APPEND1(tmp_append_list_20, tmp_append_value_20);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 272;
                type_description_3 = "o";
                goto try_except_handler_103;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 272;
            type_description_3 = "o";
            goto try_except_handler_103;
        }
        goto loop_start_20;
        loop_end_20:;
        CHECK_OBJECT(tmp_Random_unary_distribution$listcomp_1__contraction);
        tmp_dictset_value = tmp_Random_unary_distribution$listcomp_1__contraction;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_103;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_103:;
        CHECK_OBJECT(tmp_Random_unary_distribution$listcomp_1__$0);
        Py_DECREF(tmp_Random_unary_distribution$listcomp_1__$0);
        tmp_Random_unary_distribution$listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_Random_unary_distribution$listcomp_1__contraction);
        Py_DECREF(tmp_Random_unary_distribution$listcomp_1__contraction);
        tmp_Random_unary_distribution$listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_Random_unary_distribution$listcomp_1__iter_value_0);
        tmp_Random_unary_distribution$listcomp_1__iter_value_0 = NULL;
        goto frame_return_exit_20;
        // Exception handler code:
        try_except_handler_103:;
        exception_keeper_type_99 = exception_type;
        exception_keeper_value_99 = exception_value;
        exception_keeper_tb_99 = exception_tb;
        exception_keeper_lineno_99 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Random_unary_distribution$listcomp_1__$0);
        Py_DECREF(tmp_Random_unary_distribution$listcomp_1__$0);
        tmp_Random_unary_distribution$listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_Random_unary_distribution$listcomp_1__contraction);
        Py_DECREF(tmp_Random_unary_distribution$listcomp_1__contraction);
        tmp_Random_unary_distribution$listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_Random_unary_distribution$listcomp_1__iter_value_0);
        tmp_Random_unary_distribution$listcomp_1__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_99;
        exception_value = exception_keeper_value_99;
        exception_tb = exception_keeper_tb_99;
        exception_lineno = exception_keeper_lineno_99;

        goto frame_exception_exit_39;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_dcd1c412f0c9a7a03f44257284053857_39);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_37;

        frame_return_exit_20:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_dcd1c412f0c9a7a03f44257284053857_39);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_102;

        frame_exception_exit_39:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_dcd1c412f0c9a7a03f44257284053857_39);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_dcd1c412f0c9a7a03f44257284053857_39, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_dcd1c412f0c9a7a03f44257284053857_39->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_dcd1c412f0c9a7a03f44257284053857_39, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_dcd1c412f0c9a7a03f44257284053857_39,
            type_description_3,
            outline_37_var_tp
        );


        // Release cached frame if used for exception.
        if (frame_dcd1c412f0c9a7a03f44257284053857_39 == cache_frame_dcd1c412f0c9a7a03f44257284053857_39) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_dcd1c412f0c9a7a03f44257284053857_39);
            cache_frame_dcd1c412f0c9a7a03f44257284053857_39 = NULL;
        }

        assertFrameObject(frame_dcd1c412f0c9a7a03f44257284053857_39);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_38;

        frame_no_exception_37:;
        goto skip_nested_handling_37;
        nested_frame_exit_38:;
        type_description_2 = "o";
        goto try_except_handler_102;
        skip_nested_handling_37:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_102:;
        Py_XDECREF(outline_37_var_tp);
        outline_37_var_tp = NULL;
        goto outline_result_38;
        // Exception handler code:
        try_except_handler_102:;
        exception_keeper_type_100 = exception_type;
        exception_keeper_value_100 = exception_value;
        exception_keeper_tb_100 = exception_tb;
        exception_keeper_lineno_100 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_37_var_tp);
        outline_37_var_tp = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_100;
        exception_value = exception_keeper_value_100;
        exception_tb = exception_keeper_tb_100;
        exception_lineno = exception_keeper_lineno_100;

        goto outline_exception_38;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_38:;
        exception_lineno = 272;
        goto frame_exception_exit_38;
        outline_result_38:;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__18_Random_unary_distribution_271, mod_consts[30], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 272;
            type_description_2 = "o";
            goto frame_exception_exit_38;
        }


        tmp_dictset_value = MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__15_generic();

        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__18_Random_unary_distribution_271, mod_consts[110], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 274;
            type_description_2 = "o";
            goto frame_exception_exit_38;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_01d10b70dd56fe91ecc5ff5ea2ebb02e_38);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_38;

        frame_exception_exit_38:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_01d10b70dd56fe91ecc5ff5ea2ebb02e_38);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_01d10b70dd56fe91ecc5ff5ea2ebb02e_38, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_01d10b70dd56fe91ecc5ff5ea2ebb02e_38->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_01d10b70dd56fe91ecc5ff5ea2ebb02e_38, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_01d10b70dd56fe91ecc5ff5ea2ebb02e_38,
            type_description_2,
            outline_36_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_01d10b70dd56fe91ecc5ff5ea2ebb02e_38 == cache_frame_01d10b70dd56fe91ecc5ff5ea2ebb02e_38) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_01d10b70dd56fe91ecc5ff5ea2ebb02e_38);
            cache_frame_01d10b70dd56fe91ecc5ff5ea2ebb02e_38 = NULL;
        }

        assertFrameObject(frame_01d10b70dd56fe91ecc5ff5ea2ebb02e_38);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_37;

        frame_no_exception_38:;
        goto skip_nested_handling_38;
        nested_frame_exit_37:;

        goto try_except_handler_101;
        skip_nested_handling_38:;
        {
            nuitka_bool tmp_condition_result_109;
            PyObject *tmp_cmp_expr_left_19;
            PyObject *tmp_cmp_expr_right_19;
            CHECK_OBJECT(tmp_class_creation_18__bases);
            tmp_cmp_expr_left_19 = tmp_class_creation_18__bases;
            CHECK_OBJECT(tmp_class_creation_18__bases_orig);
            tmp_cmp_expr_right_19 = tmp_class_creation_18__bases_orig;
            tmp_condition_result_109 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_19, tmp_cmp_expr_right_19);
            if (tmp_condition_result_109 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 271;

                goto try_except_handler_101;
            }
            if (tmp_condition_result_109 == NUITKA_BOOL_TRUE) {
                goto branch_yes_73;
            } else {
                goto branch_no_73;
            }
            assert(tmp_condition_result_109 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_73:;
        CHECK_OBJECT(tmp_class_creation_18__bases_orig);
        tmp_dictset_value = tmp_class_creation_18__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__18_Random_unary_distribution_271, mod_consts[98], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 271;

            goto try_except_handler_101;
        }
        branch_no_73:;
        {
            PyObject *tmp_assign_source_261;
            PyObject *tmp_called_value_158;
            PyObject *tmp_args_value_84;
            PyObject *tmp_tuple_element_121;
            PyObject *tmp_kwargs_value_84;
            CHECK_OBJECT(tmp_class_creation_18__metaclass);
            tmp_called_value_158 = tmp_class_creation_18__metaclass;
            tmp_tuple_element_121 = mod_consts[208];
            tmp_args_value_84 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_84, 0, tmp_tuple_element_121);
            CHECK_OBJECT(tmp_class_creation_18__bases);
            tmp_tuple_element_121 = tmp_class_creation_18__bases;
            PyTuple_SET_ITEM0(tmp_args_value_84, 1, tmp_tuple_element_121);
            tmp_tuple_element_121 = locals_numba$core$typing$randomdecl$$$class__18_Random_unary_distribution_271;
            PyTuple_SET_ITEM0(tmp_args_value_84, 2, tmp_tuple_element_121);
            CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
            tmp_kwargs_value_84 = tmp_class_creation_18__class_decl_dict;
            frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 271;
            tmp_assign_source_261 = CALL_FUNCTION(tmp_called_value_158, tmp_args_value_84, tmp_kwargs_value_84);
            Py_DECREF(tmp_args_value_84);
            if (tmp_assign_source_261 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 271;

                goto try_except_handler_101;
            }
            assert(outline_36_var___class__ == NULL);
            outline_36_var___class__ = tmp_assign_source_261;
        }
        CHECK_OBJECT(outline_36_var___class__);
        tmp_args_element_value_104 = outline_36_var___class__;
        Py_INCREF(tmp_args_element_value_104);
        goto try_return_handler_101;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_101:;
        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__18_Random_unary_distribution_271);
        locals_numba$core$typing$randomdecl$$$class__18_Random_unary_distribution_271 = NULL;
        goto try_return_handler_100;
        // Exception handler code:
        try_except_handler_101:;
        exception_keeper_type_101 = exception_type;
        exception_keeper_value_101 = exception_value;
        exception_keeper_tb_101 = exception_tb;
        exception_keeper_lineno_101 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__18_Random_unary_distribution_271);
        locals_numba$core$typing$randomdecl$$$class__18_Random_unary_distribution_271 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_101;
        exception_value = exception_keeper_value_101;
        exception_tb = exception_keeper_tb_101;
        exception_lineno = exception_keeper_lineno_101;

        goto try_except_handler_100;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_100:;
        CHECK_OBJECT(outline_36_var___class__);
        Py_DECREF(outline_36_var___class__);
        outline_36_var___class__ = NULL;
        goto outline_result_37;
        // Exception handler code:
        try_except_handler_100:;
        exception_keeper_type_102 = exception_type;
        exception_keeper_value_102 = exception_value;
        exception_keeper_tb_102 = exception_tb;
        exception_keeper_lineno_102 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_102;
        exception_value = exception_keeper_value_102;
        exception_tb = exception_keeper_tb_102;
        exception_lineno = exception_keeper_lineno_102;

        goto outline_exception_37;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_37:;
        exception_lineno = 271;
        goto try_except_handler_99;
        outline_result_37:;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 270;
        tmp_args_element_value_103 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_155, tmp_args_element_value_104);
        Py_DECREF(tmp_called_value_155);
        Py_DECREF(tmp_args_element_value_104);
        if (tmp_args_element_value_103 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);
            Py_DECREF(tmp_called_value_145);
            Py_DECREF(tmp_called_value_147);
            Py_DECREF(tmp_called_value_149);
            Py_DECREF(tmp_called_value_151);
            Py_DECREF(tmp_called_value_153);

            exception_lineno = 270;

            goto try_except_handler_99;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 269;
        tmp_args_element_value_102 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_153, tmp_args_element_value_103);
        Py_DECREF(tmp_called_value_153);
        Py_DECREF(tmp_args_element_value_103);
        if (tmp_args_element_value_102 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);
            Py_DECREF(tmp_called_value_145);
            Py_DECREF(tmp_called_value_147);
            Py_DECREF(tmp_called_value_149);
            Py_DECREF(tmp_called_value_151);

            exception_lineno = 269;

            goto try_except_handler_99;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 268;
        tmp_args_element_value_101 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_151, tmp_args_element_value_102);
        Py_DECREF(tmp_called_value_151);
        Py_DECREF(tmp_args_element_value_102);
        if (tmp_args_element_value_101 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);
            Py_DECREF(tmp_called_value_145);
            Py_DECREF(tmp_called_value_147);
            Py_DECREF(tmp_called_value_149);

            exception_lineno = 268;

            goto try_except_handler_99;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 267;
        tmp_args_element_value_100 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_149, tmp_args_element_value_101);
        Py_DECREF(tmp_called_value_149);
        Py_DECREF(tmp_args_element_value_101);
        if (tmp_args_element_value_100 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);
            Py_DECREF(tmp_called_value_145);
            Py_DECREF(tmp_called_value_147);

            exception_lineno = 267;

            goto try_except_handler_99;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 266;
        tmp_args_element_value_99 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_147, tmp_args_element_value_100);
        Py_DECREF(tmp_called_value_147);
        Py_DECREF(tmp_args_element_value_100);
        if (tmp_args_element_value_99 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);
            Py_DECREF(tmp_called_value_145);

            exception_lineno = 266;

            goto try_except_handler_99;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 265;
        tmp_args_element_value_98 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_145, tmp_args_element_value_99);
        Py_DECREF(tmp_called_value_145);
        Py_DECREF(tmp_args_element_value_99);
        if (tmp_args_element_value_98 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);
            Py_DECREF(tmp_called_value_143);

            exception_lineno = 265;

            goto try_except_handler_99;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 264;
        tmp_args_element_value_97 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_143, tmp_args_element_value_98);
        Py_DECREF(tmp_called_value_143);
        Py_DECREF(tmp_args_element_value_98);
        if (tmp_args_element_value_97 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_141);

            exception_lineno = 264;

            goto try_except_handler_99;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 263;
        tmp_assign_source_256 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_141, tmp_args_element_value_97);
        Py_DECREF(tmp_called_value_141);
        Py_DECREF(tmp_args_element_value_97);
        if (tmp_assign_source_256 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 263;

            goto try_except_handler_99;
        }
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[208], tmp_assign_source_256);
    }
    goto try_end_27;
    // Exception handler code:
    try_except_handler_99:;
    exception_keeper_type_103 = exception_type;
    exception_keeper_value_103 = exception_value;
    exception_keeper_tb_103 = exception_tb;
    exception_keeper_lineno_103 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_18__bases_orig);
    tmp_class_creation_18__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_18__bases);
    tmp_class_creation_18__bases = NULL;
    Py_XDECREF(tmp_class_creation_18__class_decl_dict);
    tmp_class_creation_18__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_18__metaclass);
    tmp_class_creation_18__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_18__prepared);
    tmp_class_creation_18__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_103;
    exception_value = exception_keeper_value_103;
    exception_tb = exception_keeper_tb_103;
    exception_lineno = exception_keeper_lineno_103;

    goto frame_exception_exit_1;
    // End of try:
    try_end_27:;
    CHECK_OBJECT(tmp_class_creation_18__bases_orig);
    Py_DECREF(tmp_class_creation_18__bases_orig);
    tmp_class_creation_18__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_18__bases);
    Py_DECREF(tmp_class_creation_18__bases);
    tmp_class_creation_18__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
    Py_DECREF(tmp_class_creation_18__class_decl_dict);
    tmp_class_creation_18__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_18__metaclass);
    Py_DECREF(tmp_class_creation_18__metaclass);
    tmp_class_creation_18__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_18__prepared);
    Py_DECREF(tmp_class_creation_18__prepared);
    tmp_class_creation_18__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_262;
        PyObject *tmp_tuple_element_122;
        tmp_tuple_element_122 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[99]);

        if (unlikely(tmp_tuple_element_122 == NULL)) {
            tmp_tuple_element_122 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[99]);
        }

        if (tmp_tuple_element_122 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;

            goto try_except_handler_104;
        }
        tmp_assign_source_262 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_262, 0, tmp_tuple_element_122);
        assert(tmp_class_creation_19__bases_orig == NULL);
        tmp_class_creation_19__bases_orig = tmp_assign_source_262;
    }
    {
        PyObject *tmp_assign_source_263;
        PyObject *tmp_dircall_arg1_19;
        CHECK_OBJECT(tmp_class_creation_19__bases_orig);
        tmp_dircall_arg1_19 = tmp_class_creation_19__bases_orig;
        Py_INCREF(tmp_dircall_arg1_19);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_19};
            tmp_assign_source_263 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_263 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;

            goto try_except_handler_104;
        }
        assert(tmp_class_creation_19__bases == NULL);
        tmp_class_creation_19__bases = tmp_assign_source_263;
    }
    {
        PyObject *tmp_assign_source_264;
        tmp_assign_source_264 = PyDict_New();
        assert(tmp_class_creation_19__class_decl_dict == NULL);
        tmp_class_creation_19__class_decl_dict = tmp_assign_source_264;
    }
    {
        PyObject *tmp_assign_source_265;
        PyObject *tmp_metaclass_value_19;
        bool tmp_condition_result_110;
        PyObject *tmp_key_value_55;
        PyObject *tmp_dict_arg_value_55;
        PyObject *tmp_dict_arg_value_56;
        PyObject *tmp_key_value_56;
        nuitka_bool tmp_condition_result_111;
        int tmp_truth_name_19;
        PyObject *tmp_type_arg_37;
        PyObject *tmp_expression_value_188;
        PyObject *tmp_subscript_value_19;
        PyObject *tmp_bases_value_19;
        tmp_key_value_55 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
        tmp_dict_arg_value_55 = tmp_class_creation_19__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_55, tmp_key_value_55);
        assert(!(tmp_res == -1));
        tmp_condition_result_110 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_110 != false) {
            goto condexpr_true_37;
        } else {
            goto condexpr_false_37;
        }
        condexpr_true_37:;
        CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
        tmp_dict_arg_value_56 = tmp_class_creation_19__class_decl_dict;
        tmp_key_value_56 = mod_consts[87];
        tmp_metaclass_value_19 = DICT_GET_ITEM0(tmp_dict_arg_value_56, tmp_key_value_56);
        if (tmp_metaclass_value_19 == NULL) {
            tmp_metaclass_value_19 = Py_None;
        }
        assert(!(tmp_metaclass_value_19 == NULL));
        Py_INCREF(tmp_metaclass_value_19);
        goto condexpr_end_37;
        condexpr_false_37:;
        CHECK_OBJECT(tmp_class_creation_19__bases);
        tmp_truth_name_19 = CHECK_IF_TRUE(tmp_class_creation_19__bases);
        if (tmp_truth_name_19 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;

            goto try_except_handler_104;
        }
        tmp_condition_result_111 = tmp_truth_name_19 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_111 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_38;
        } else {
            goto condexpr_false_38;
        }
        condexpr_true_38:;
        CHECK_OBJECT(tmp_class_creation_19__bases);
        tmp_expression_value_188 = tmp_class_creation_19__bases;
        tmp_subscript_value_19 = mod_consts[13];
        tmp_type_arg_37 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_188, tmp_subscript_value_19, 0);
        if (tmp_type_arg_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;

            goto try_except_handler_104;
        }
        tmp_metaclass_value_19 = BUILTIN_TYPE1(tmp_type_arg_37);
        Py_DECREF(tmp_type_arg_37);
        if (tmp_metaclass_value_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;

            goto try_except_handler_104;
        }
        goto condexpr_end_38;
        condexpr_false_38:;
        tmp_metaclass_value_19 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_19);
        condexpr_end_38:;
        condexpr_end_37:;
        CHECK_OBJECT(tmp_class_creation_19__bases);
        tmp_bases_value_19 = tmp_class_creation_19__bases;
        tmp_assign_source_265 = SELECT_METACLASS(tmp_metaclass_value_19, tmp_bases_value_19);
        Py_DECREF(tmp_metaclass_value_19);
        if (tmp_assign_source_265 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;

            goto try_except_handler_104;
        }
        assert(tmp_class_creation_19__metaclass == NULL);
        tmp_class_creation_19__metaclass = tmp_assign_source_265;
    }
    {
        bool tmp_condition_result_112;
        PyObject *tmp_key_value_57;
        PyObject *tmp_dict_arg_value_57;
        tmp_key_value_57 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
        tmp_dict_arg_value_57 = tmp_class_creation_19__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_57, tmp_key_value_57);
        assert(!(tmp_res == -1));
        tmp_condition_result_112 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_112 != false) {
            goto branch_yes_74;
        } else {
            goto branch_no_74;
        }
    }
    branch_yes_74:;
    CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_19__class_decl_dict;
    tmp_dictdel_key = mod_consts[87];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 286;

        goto try_except_handler_104;
    }
    branch_no_74:;
    {
        nuitka_bool tmp_condition_result_113;
        PyObject *tmp_expression_value_189;
        CHECK_OBJECT(tmp_class_creation_19__metaclass);
        tmp_expression_value_189 = tmp_class_creation_19__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_189, mod_consts[88]);
        tmp_condition_result_113 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_113 == NUITKA_BOOL_TRUE) {
            goto branch_yes_75;
        } else {
            goto branch_no_75;
        }
    }
    branch_yes_75:;
    {
        PyObject *tmp_assign_source_266;
        PyObject *tmp_called_value_159;
        PyObject *tmp_expression_value_190;
        PyObject *tmp_args_value_85;
        PyObject *tmp_tuple_element_123;
        PyObject *tmp_kwargs_value_85;
        CHECK_OBJECT(tmp_class_creation_19__metaclass);
        tmp_expression_value_190 = tmp_class_creation_19__metaclass;
        tmp_called_value_159 = LOOKUP_ATTRIBUTE(tmp_expression_value_190, mod_consts[88]);
        if (tmp_called_value_159 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;

            goto try_except_handler_104;
        }
        tmp_tuple_element_123 = mod_consts[226];
        tmp_args_value_85 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_85, 0, tmp_tuple_element_123);
        CHECK_OBJECT(tmp_class_creation_19__bases);
        tmp_tuple_element_123 = tmp_class_creation_19__bases;
        PyTuple_SET_ITEM0(tmp_args_value_85, 1, tmp_tuple_element_123);
        CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
        tmp_kwargs_value_85 = tmp_class_creation_19__class_decl_dict;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 286;
        tmp_assign_source_266 = CALL_FUNCTION(tmp_called_value_159, tmp_args_value_85, tmp_kwargs_value_85);
        Py_DECREF(tmp_called_value_159);
        Py_DECREF(tmp_args_value_85);
        if (tmp_assign_source_266 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;

            goto try_except_handler_104;
        }
        assert(tmp_class_creation_19__prepared == NULL);
        tmp_class_creation_19__prepared = tmp_assign_source_266;
    }
    {
        bool tmp_condition_result_114;
        PyObject *tmp_operand_value_19;
        PyObject *tmp_expression_value_191;
        CHECK_OBJECT(tmp_class_creation_19__prepared);
        tmp_expression_value_191 = tmp_class_creation_19__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_191, mod_consts[89]);
        tmp_operand_value_19 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_19);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;

            goto try_except_handler_104;
        }
        tmp_condition_result_114 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_114 != false) {
            goto branch_yes_76;
        } else {
            goto branch_no_76;
        }
    }
    branch_yes_76:;
    {
        PyObject *tmp_raise_type_19;
        PyObject *tmp_raise_value_19;
        PyObject *tmp_left_value_27;
        PyObject *tmp_right_value_27;
        PyObject *tmp_tuple_element_124;
        PyObject *tmp_getattr_target_19;
        PyObject *tmp_getattr_attr_19;
        PyObject *tmp_getattr_default_19;
        tmp_raise_type_19 = PyExc_TypeError;
        tmp_left_value_27 = mod_consts[90];
        CHECK_OBJECT(tmp_class_creation_19__metaclass);
        tmp_getattr_target_19 = tmp_class_creation_19__metaclass;
        tmp_getattr_attr_19 = mod_consts[91];
        tmp_getattr_default_19 = mod_consts[92];
        tmp_tuple_element_124 = BUILTIN_GETATTR(tmp_getattr_target_19, tmp_getattr_attr_19, tmp_getattr_default_19);
        if (tmp_tuple_element_124 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;

            goto try_except_handler_104;
        }
        tmp_right_value_27 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_192;
            PyObject *tmp_type_arg_38;
            PyTuple_SET_ITEM(tmp_right_value_27, 0, tmp_tuple_element_124);
            CHECK_OBJECT(tmp_class_creation_19__prepared);
            tmp_type_arg_38 = tmp_class_creation_19__prepared;
            tmp_expression_value_192 = BUILTIN_TYPE1(tmp_type_arg_38);
            assert(!(tmp_expression_value_192 == NULL));
            tmp_tuple_element_124 = LOOKUP_ATTRIBUTE(tmp_expression_value_192, mod_consts[91]);
            Py_DECREF(tmp_expression_value_192);
            if (tmp_tuple_element_124 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 286;

                goto tuple_build_exception_20;
            }
            PyTuple_SET_ITEM(tmp_right_value_27, 1, tmp_tuple_element_124);
        }
        goto tuple_build_noexception_20;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_20:;
        Py_DECREF(tmp_right_value_27);
        goto try_except_handler_104;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_20:;
        tmp_raise_value_19 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_27, tmp_right_value_27);
        Py_DECREF(tmp_right_value_27);
        if (tmp_raise_value_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;

            goto try_except_handler_104;
        }
        exception_type = tmp_raise_type_19;
        Py_INCREF(tmp_raise_type_19);
        exception_value = tmp_raise_value_19;
        exception_lineno = 286;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_104;
    }
    branch_no_76:;
    goto branch_end_75;
    branch_no_75:;
    {
        PyObject *tmp_assign_source_267;
        tmp_assign_source_267 = PyDict_New();
        assert(tmp_class_creation_19__prepared == NULL);
        tmp_class_creation_19__prepared = tmp_assign_source_267;
    }
    branch_end_75:;
    {
        PyObject *tmp_assign_source_268;
        PyObject *tmp_called_value_160;
        PyObject *tmp_called_value_161;
        PyObject *tmp_args_value_86;
        PyObject *tmp_tuple_element_125;
        PyObject *tmp_expression_value_193;
        PyObject *tmp_expression_value_194;
        PyObject *tmp_kwargs_value_86;
        PyObject *tmp_args_element_value_107;
        PyObject *tmp_called_value_162;
        PyObject *tmp_called_value_163;
        PyObject *tmp_args_value_87;
        PyObject *tmp_tuple_element_126;
        PyObject *tmp_expression_value_195;
        PyObject *tmp_expression_value_196;
        PyObject *tmp_kwargs_value_87;
        PyObject *tmp_args_element_value_108;
        PyObject *tmp_called_value_164;
        PyObject *tmp_called_value_165;
        PyObject *tmp_args_value_88;
        PyObject *tmp_tuple_element_127;
        PyObject *tmp_expression_value_197;
        PyObject *tmp_expression_value_198;
        PyObject *tmp_kwargs_value_88;
        PyObject *tmp_args_element_value_109;
        tmp_called_value_161 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_161 == NULL)) {
            tmp_called_value_161 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_161 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 280;

            goto try_except_handler_104;
        }
        tmp_expression_value_194 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_194 == NULL)) {
            tmp_expression_value_194 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_194 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 280;

            goto try_except_handler_104;
        }
        tmp_expression_value_193 = LOOKUP_ATTRIBUTE(tmp_expression_value_194, mod_consts[19]);
        if (tmp_expression_value_193 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 280;

            goto try_except_handler_104;
        }
        tmp_tuple_element_125 = LOOKUP_ATTRIBUTE(tmp_expression_value_193, mod_consts[227]);
        Py_DECREF(tmp_expression_value_193);
        if (tmp_tuple_element_125 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 280;

            goto try_except_handler_104;
        }
        tmp_args_value_86 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_86, 0, tmp_tuple_element_125);
        tmp_kwargs_value_86 = PyDict_Copy(mod_consts[228]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 280;
        tmp_called_value_160 = CALL_FUNCTION(tmp_called_value_161, tmp_args_value_86, tmp_kwargs_value_86);
        Py_DECREF(tmp_args_value_86);
        Py_DECREF(tmp_kwargs_value_86);
        if (tmp_called_value_160 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 280;

            goto try_except_handler_104;
        }
        tmp_called_value_163 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_163 == NULL)) {
            tmp_called_value_163 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_163 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_160);

            exception_lineno = 282;

            goto try_except_handler_104;
        }
        tmp_expression_value_196 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_196 == NULL)) {
            tmp_expression_value_196 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_196 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_160);

            exception_lineno = 282;

            goto try_except_handler_104;
        }
        tmp_expression_value_195 = LOOKUP_ATTRIBUTE(tmp_expression_value_196, mod_consts[19]);
        if (tmp_expression_value_195 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_160);

            exception_lineno = 282;

            goto try_except_handler_104;
        }
        tmp_tuple_element_126 = LOOKUP_ATTRIBUTE(tmp_expression_value_195, mod_consts[229]);
        Py_DECREF(tmp_expression_value_195);
        if (tmp_tuple_element_126 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_160);

            exception_lineno = 282;

            goto try_except_handler_104;
        }
        tmp_args_value_87 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_87, 0, tmp_tuple_element_126);
        tmp_kwargs_value_87 = PyDict_Copy(mod_consts[230]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 282;
        tmp_called_value_162 = CALL_FUNCTION(tmp_called_value_163, tmp_args_value_87, tmp_kwargs_value_87);
        Py_DECREF(tmp_args_value_87);
        Py_DECREF(tmp_kwargs_value_87);
        if (tmp_called_value_162 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_160);

            exception_lineno = 282;

            goto try_except_handler_104;
        }
        tmp_called_value_165 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_165 == NULL)) {
            tmp_called_value_165 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_165 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_160);
            Py_DECREF(tmp_called_value_162);

            exception_lineno = 284;

            goto try_except_handler_104;
        }
        tmp_expression_value_198 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_expression_value_198 == NULL)) {
            tmp_expression_value_198 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_expression_value_198 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_160);
            Py_DECREF(tmp_called_value_162);

            exception_lineno = 284;

            goto try_except_handler_104;
        }
        tmp_expression_value_197 = LOOKUP_ATTRIBUTE(tmp_expression_value_198, mod_consts[19]);
        if (tmp_expression_value_197 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_160);
            Py_DECREF(tmp_called_value_162);

            exception_lineno = 284;

            goto try_except_handler_104;
        }
        tmp_tuple_element_127 = LOOKUP_ATTRIBUTE(tmp_expression_value_197, mod_consts[231]);
        Py_DECREF(tmp_expression_value_197);
        if (tmp_tuple_element_127 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_160);
            Py_DECREF(tmp_called_value_162);

            exception_lineno = 284;

            goto try_except_handler_104;
        }
        tmp_args_value_88 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_88, 0, tmp_tuple_element_127);
        tmp_kwargs_value_88 = PyDict_Copy(mod_consts[232]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 284;
        tmp_called_value_164 = CALL_FUNCTION(tmp_called_value_165, tmp_args_value_88, tmp_kwargs_value_88);
        Py_DECREF(tmp_args_value_88);
        Py_DECREF(tmp_kwargs_value_88);
        if (tmp_called_value_164 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_160);
            Py_DECREF(tmp_called_value_162);

            exception_lineno = 284;

            goto try_except_handler_104;
        }
        {
            PyObject *tmp_set_locals_19;
            CHECK_OBJECT(tmp_class_creation_19__prepared);
            tmp_set_locals_19 = tmp_class_creation_19__prepared;
            locals_numba$core$typing$randomdecl$$$class__19_Random_nullary_distribution_286 = tmp_set_locals_19;
            Py_INCREF(tmp_set_locals_19);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[93];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__19_Random_nullary_distribution_286, mod_consts[94], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;

            goto try_except_handler_106;
        }
        tmp_dictset_value = mod_consts[226];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__19_Random_nullary_distribution_286, mod_consts[96], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;

            goto try_except_handler_106;
        }
        if (isFrameUnusable(cache_frame_f2e699d865c5d4cdbac9e050321aa5f5_40)) {
            Py_XDECREF(cache_frame_f2e699d865c5d4cdbac9e050321aa5f5_40);

#if _DEBUG_REFCOUNTS
            if (cache_frame_f2e699d865c5d4cdbac9e050321aa5f5_40 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_f2e699d865c5d4cdbac9e050321aa5f5_40 = MAKE_FUNCTION_FRAME(codeobj_f2e699d865c5d4cdbac9e050321aa5f5, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_f2e699d865c5d4cdbac9e050321aa5f5_40->m_type_description == NULL);
        frame_f2e699d865c5d4cdbac9e050321aa5f5_40 = cache_frame_f2e699d865c5d4cdbac9e050321aa5f5_40;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_f2e699d865c5d4cdbac9e050321aa5f5_40);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_f2e699d865c5d4cdbac9e050321aa5f5_40) == 2); // Frame stack

        // Framed code:
        // Tried code:
        {
            PyObject *tmp_assign_source_269;
            PyObject *tmp_iter_arg_21;
            tmp_iter_arg_21 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__19_Random_nullary_distribution_286, mod_consts[86]);

            if (tmp_iter_arg_21 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_iter_arg_21 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[86]);

                    if (unlikely(tmp_iter_arg_21 == NULL)) {
                        tmp_iter_arg_21 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[86]);
                    }

                    if (tmp_iter_arg_21 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 287;
                        type_description_2 = "o";
                        goto try_except_handler_107;
                    }
                    Py_INCREF(tmp_iter_arg_21);
                } else {
                    goto try_except_handler_107;
                }
            }

            tmp_assign_source_269 = MAKE_ITERATOR(tmp_iter_arg_21);
            Py_DECREF(tmp_iter_arg_21);
            if (tmp_assign_source_269 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 287;
                type_description_2 = "o";
                goto try_except_handler_107;
            }
            assert(tmp_Random_nullary_distribution$listcomp_1__$0 == NULL);
            tmp_Random_nullary_distribution$listcomp_1__$0 = tmp_assign_source_269;
        }
        {
            PyObject *tmp_assign_source_270;
            tmp_assign_source_270 = PyList_New(0);
            assert(tmp_Random_nullary_distribution$listcomp_1__contraction == NULL);
            tmp_Random_nullary_distribution$listcomp_1__contraction = tmp_assign_source_270;
        }
        if (isFrameUnusable(cache_frame_e6c084536d36ccf44cfde2641359fedb_41)) {
            Py_XDECREF(cache_frame_e6c084536d36ccf44cfde2641359fedb_41);

#if _DEBUG_REFCOUNTS
            if (cache_frame_e6c084536d36ccf44cfde2641359fedb_41 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_e6c084536d36ccf44cfde2641359fedb_41 = MAKE_FUNCTION_FRAME(codeobj_e6c084536d36ccf44cfde2641359fedb, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_e6c084536d36ccf44cfde2641359fedb_41->m_type_description == NULL);
        frame_e6c084536d36ccf44cfde2641359fedb_41 = cache_frame_e6c084536d36ccf44cfde2641359fedb_41;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_e6c084536d36ccf44cfde2641359fedb_41);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_e6c084536d36ccf44cfde2641359fedb_41) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_21:;
        {
            PyObject *tmp_next_source_21;
            PyObject *tmp_assign_source_271;
            CHECK_OBJECT(tmp_Random_nullary_distribution$listcomp_1__$0);
            tmp_next_source_21 = tmp_Random_nullary_distribution$listcomp_1__$0;
            tmp_assign_source_271 = ITERATOR_NEXT(tmp_next_source_21);
            if (tmp_assign_source_271 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_21;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_3 = "o";
                    exception_lineno = 287;
                    goto try_except_handler_108;
                }
            }

            {
                PyObject *old = tmp_Random_nullary_distribution$listcomp_1__iter_value_0;
                tmp_Random_nullary_distribution$listcomp_1__iter_value_0 = tmp_assign_source_271;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_272;
            CHECK_OBJECT(tmp_Random_nullary_distribution$listcomp_1__iter_value_0);
            tmp_assign_source_272 = tmp_Random_nullary_distribution$listcomp_1__iter_value_0;
            {
                PyObject *old = outline_39_var_tp;
                outline_39_var_tp = tmp_assign_source_272;
                Py_INCREF(outline_39_var_tp);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_21;
            PyObject *tmp_append_value_21;
            PyObject *tmp_called_value_166;
            PyObject *tmp_args_element_value_110;
            CHECK_OBJECT(tmp_Random_nullary_distribution$listcomp_1__contraction);
            tmp_append_list_21 = tmp_Random_nullary_distribution$listcomp_1__contraction;
            tmp_called_value_166 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[25]);

            if (unlikely(tmp_called_value_166 == NULL)) {
                tmp_called_value_166 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[25]);
            }

            if (tmp_called_value_166 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 287;
                type_description_3 = "o";
                goto try_except_handler_108;
            }
            CHECK_OBJECT(outline_39_var_tp);
            tmp_args_element_value_110 = outline_39_var_tp;
            frame_e6c084536d36ccf44cfde2641359fedb_41->m_frame.f_lineno = 287;
            tmp_append_value_21 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_166, tmp_args_element_value_110);
            if (tmp_append_value_21 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 287;
                type_description_3 = "o";
                goto try_except_handler_108;
            }
            assert(PyList_Check(tmp_append_list_21));
            tmp_result = LIST_APPEND1(tmp_append_list_21, tmp_append_value_21);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 287;
                type_description_3 = "o";
                goto try_except_handler_108;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 287;
            type_description_3 = "o";
            goto try_except_handler_108;
        }
        goto loop_start_21;
        loop_end_21:;
        CHECK_OBJECT(tmp_Random_nullary_distribution$listcomp_1__contraction);
        tmp_dictset_value = tmp_Random_nullary_distribution$listcomp_1__contraction;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_108;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_108:;
        CHECK_OBJECT(tmp_Random_nullary_distribution$listcomp_1__$0);
        Py_DECREF(tmp_Random_nullary_distribution$listcomp_1__$0);
        tmp_Random_nullary_distribution$listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_Random_nullary_distribution$listcomp_1__contraction);
        Py_DECREF(tmp_Random_nullary_distribution$listcomp_1__contraction);
        tmp_Random_nullary_distribution$listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_Random_nullary_distribution$listcomp_1__iter_value_0);
        tmp_Random_nullary_distribution$listcomp_1__iter_value_0 = NULL;
        goto frame_return_exit_21;
        // Exception handler code:
        try_except_handler_108:;
        exception_keeper_type_104 = exception_type;
        exception_keeper_value_104 = exception_value;
        exception_keeper_tb_104 = exception_tb;
        exception_keeper_lineno_104 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Random_nullary_distribution$listcomp_1__$0);
        Py_DECREF(tmp_Random_nullary_distribution$listcomp_1__$0);
        tmp_Random_nullary_distribution$listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_Random_nullary_distribution$listcomp_1__contraction);
        Py_DECREF(tmp_Random_nullary_distribution$listcomp_1__contraction);
        tmp_Random_nullary_distribution$listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_Random_nullary_distribution$listcomp_1__iter_value_0);
        tmp_Random_nullary_distribution$listcomp_1__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_104;
        exception_value = exception_keeper_value_104;
        exception_tb = exception_keeper_tb_104;
        exception_lineno = exception_keeper_lineno_104;

        goto frame_exception_exit_41;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e6c084536d36ccf44cfde2641359fedb_41);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_39;

        frame_return_exit_21:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_e6c084536d36ccf44cfde2641359fedb_41);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_107;

        frame_exception_exit_41:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e6c084536d36ccf44cfde2641359fedb_41);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_e6c084536d36ccf44cfde2641359fedb_41, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_e6c084536d36ccf44cfde2641359fedb_41->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_e6c084536d36ccf44cfde2641359fedb_41, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_e6c084536d36ccf44cfde2641359fedb_41,
            type_description_3,
            outline_39_var_tp
        );


        // Release cached frame if used for exception.
        if (frame_e6c084536d36ccf44cfde2641359fedb_41 == cache_frame_e6c084536d36ccf44cfde2641359fedb_41) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_e6c084536d36ccf44cfde2641359fedb_41);
            cache_frame_e6c084536d36ccf44cfde2641359fedb_41 = NULL;
        }

        assertFrameObject(frame_e6c084536d36ccf44cfde2641359fedb_41);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_40;

        frame_no_exception_39:;
        goto skip_nested_handling_39;
        nested_frame_exit_40:;
        type_description_2 = "o";
        goto try_except_handler_107;
        skip_nested_handling_39:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_107:;
        Py_XDECREF(outline_39_var_tp);
        outline_39_var_tp = NULL;
        goto outline_result_40;
        // Exception handler code:
        try_except_handler_107:;
        exception_keeper_type_105 = exception_type;
        exception_keeper_value_105 = exception_value;
        exception_keeper_tb_105 = exception_tb;
        exception_keeper_lineno_105 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_39_var_tp);
        outline_39_var_tp = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_105;
        exception_value = exception_keeper_value_105;
        exception_tb = exception_keeper_tb_105;
        exception_lineno = exception_keeper_lineno_105;

        goto outline_exception_40;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_40:;
        exception_lineno = 287;
        goto frame_exception_exit_40;
        outline_result_40:;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__19_Random_nullary_distribution_286, mod_consts[30], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 287;
            type_description_2 = "o";
            goto frame_exception_exit_40;
        }


        tmp_dictset_value = MAKE_FUNCTION_numba$core$typing$randomdecl$$$function__16_generic();

        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__19_Random_nullary_distribution_286, mod_consts[110], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 289;
            type_description_2 = "o";
            goto frame_exception_exit_40;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_f2e699d865c5d4cdbac9e050321aa5f5_40);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_40;

        frame_exception_exit_40:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_f2e699d865c5d4cdbac9e050321aa5f5_40);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_f2e699d865c5d4cdbac9e050321aa5f5_40, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_f2e699d865c5d4cdbac9e050321aa5f5_40->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_f2e699d865c5d4cdbac9e050321aa5f5_40, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_f2e699d865c5d4cdbac9e050321aa5f5_40,
            type_description_2,
            outline_38_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_f2e699d865c5d4cdbac9e050321aa5f5_40 == cache_frame_f2e699d865c5d4cdbac9e050321aa5f5_40) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_f2e699d865c5d4cdbac9e050321aa5f5_40);
            cache_frame_f2e699d865c5d4cdbac9e050321aa5f5_40 = NULL;
        }

        assertFrameObject(frame_f2e699d865c5d4cdbac9e050321aa5f5_40);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_39;

        frame_no_exception_40:;
        goto skip_nested_handling_40;
        nested_frame_exit_39:;

        goto try_except_handler_106;
        skip_nested_handling_40:;
        {
            nuitka_bool tmp_condition_result_115;
            PyObject *tmp_cmp_expr_left_20;
            PyObject *tmp_cmp_expr_right_20;
            CHECK_OBJECT(tmp_class_creation_19__bases);
            tmp_cmp_expr_left_20 = tmp_class_creation_19__bases;
            CHECK_OBJECT(tmp_class_creation_19__bases_orig);
            tmp_cmp_expr_right_20 = tmp_class_creation_19__bases_orig;
            tmp_condition_result_115 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_20, tmp_cmp_expr_right_20);
            if (tmp_condition_result_115 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 286;

                goto try_except_handler_106;
            }
            if (tmp_condition_result_115 == NUITKA_BOOL_TRUE) {
                goto branch_yes_77;
            } else {
                goto branch_no_77;
            }
            assert(tmp_condition_result_115 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_77:;
        CHECK_OBJECT(tmp_class_creation_19__bases_orig);
        tmp_dictset_value = tmp_class_creation_19__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__19_Random_nullary_distribution_286, mod_consts[98], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;

            goto try_except_handler_106;
        }
        branch_no_77:;
        {
            PyObject *tmp_assign_source_273;
            PyObject *tmp_called_value_167;
            PyObject *tmp_args_value_89;
            PyObject *tmp_tuple_element_128;
            PyObject *tmp_kwargs_value_89;
            CHECK_OBJECT(tmp_class_creation_19__metaclass);
            tmp_called_value_167 = tmp_class_creation_19__metaclass;
            tmp_tuple_element_128 = mod_consts[226];
            tmp_args_value_89 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_89, 0, tmp_tuple_element_128);
            CHECK_OBJECT(tmp_class_creation_19__bases);
            tmp_tuple_element_128 = tmp_class_creation_19__bases;
            PyTuple_SET_ITEM0(tmp_args_value_89, 1, tmp_tuple_element_128);
            tmp_tuple_element_128 = locals_numba$core$typing$randomdecl$$$class__19_Random_nullary_distribution_286;
            PyTuple_SET_ITEM0(tmp_args_value_89, 2, tmp_tuple_element_128);
            CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
            tmp_kwargs_value_89 = tmp_class_creation_19__class_decl_dict;
            frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 286;
            tmp_assign_source_273 = CALL_FUNCTION(tmp_called_value_167, tmp_args_value_89, tmp_kwargs_value_89);
            Py_DECREF(tmp_args_value_89);
            if (tmp_assign_source_273 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 286;

                goto try_except_handler_106;
            }
            assert(outline_38_var___class__ == NULL);
            outline_38_var___class__ = tmp_assign_source_273;
        }
        CHECK_OBJECT(outline_38_var___class__);
        tmp_args_element_value_109 = outline_38_var___class__;
        Py_INCREF(tmp_args_element_value_109);
        goto try_return_handler_106;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_106:;
        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__19_Random_nullary_distribution_286);
        locals_numba$core$typing$randomdecl$$$class__19_Random_nullary_distribution_286 = NULL;
        goto try_return_handler_105;
        // Exception handler code:
        try_except_handler_106:;
        exception_keeper_type_106 = exception_type;
        exception_keeper_value_106 = exception_value;
        exception_keeper_tb_106 = exception_tb;
        exception_keeper_lineno_106 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__19_Random_nullary_distribution_286);
        locals_numba$core$typing$randomdecl$$$class__19_Random_nullary_distribution_286 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_106;
        exception_value = exception_keeper_value_106;
        exception_tb = exception_keeper_tb_106;
        exception_lineno = exception_keeper_lineno_106;

        goto try_except_handler_105;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_105:;
        CHECK_OBJECT(outline_38_var___class__);
        Py_DECREF(outline_38_var___class__);
        outline_38_var___class__ = NULL;
        goto outline_result_39;
        // Exception handler code:
        try_except_handler_105:;
        exception_keeper_type_107 = exception_type;
        exception_keeper_value_107 = exception_value;
        exception_keeper_tb_107 = exception_tb;
        exception_keeper_lineno_107 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_107;
        exception_value = exception_keeper_value_107;
        exception_tb = exception_keeper_tb_107;
        exception_lineno = exception_keeper_lineno_107;

        goto outline_exception_39;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_39:;
        exception_lineno = 286;
        goto try_except_handler_104;
        outline_result_39:;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 284;
        tmp_args_element_value_108 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_164, tmp_args_element_value_109);
        Py_DECREF(tmp_called_value_164);
        Py_DECREF(tmp_args_element_value_109);
        if (tmp_args_element_value_108 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_160);
            Py_DECREF(tmp_called_value_162);

            exception_lineno = 284;

            goto try_except_handler_104;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 282;
        tmp_args_element_value_107 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_162, tmp_args_element_value_108);
        Py_DECREF(tmp_called_value_162);
        Py_DECREF(tmp_args_element_value_108);
        if (tmp_args_element_value_107 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_160);

            exception_lineno = 282;

            goto try_except_handler_104;
        }
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 280;
        tmp_assign_source_268 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_160, tmp_args_element_value_107);
        Py_DECREF(tmp_called_value_160);
        Py_DECREF(tmp_args_element_value_107);
        if (tmp_assign_source_268 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 280;

            goto try_except_handler_104;
        }
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[226], tmp_assign_source_268);
    }
    goto try_end_28;
    // Exception handler code:
    try_except_handler_104:;
    exception_keeper_type_108 = exception_type;
    exception_keeper_value_108 = exception_value;
    exception_keeper_tb_108 = exception_tb;
    exception_keeper_lineno_108 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_19__bases_orig);
    tmp_class_creation_19__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_19__bases);
    tmp_class_creation_19__bases = NULL;
    Py_XDECREF(tmp_class_creation_19__class_decl_dict);
    tmp_class_creation_19__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_19__metaclass);
    tmp_class_creation_19__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_19__prepared);
    tmp_class_creation_19__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_108;
    exception_value = exception_keeper_value_108;
    exception_tb = exception_keeper_tb_108;
    exception_lineno = exception_keeper_lineno_108;

    goto frame_exception_exit_1;
    // End of try:
    try_end_28:;
    CHECK_OBJECT(tmp_class_creation_19__bases_orig);
    Py_DECREF(tmp_class_creation_19__bases_orig);
    tmp_class_creation_19__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_19__bases);
    Py_DECREF(tmp_class_creation_19__bases);
    tmp_class_creation_19__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
    Py_DECREF(tmp_class_creation_19__class_decl_dict);
    tmp_class_creation_19__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_19__metaclass);
    Py_DECREF(tmp_class_creation_19__metaclass);
    tmp_class_creation_19__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_19__prepared);
    Py_DECREF(tmp_class_creation_19__prepared);
    tmp_class_creation_19__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_274;
        PyObject *tmp_tuple_element_129;
        tmp_tuple_element_129 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[67]);

        if (unlikely(tmp_tuple_element_129 == NULL)) {
            tmp_tuple_element_129 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[67]);
        }

        if (tmp_tuple_element_129 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;

            goto try_except_handler_109;
        }
        tmp_assign_source_274 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_274, 0, tmp_tuple_element_129);
        assert(tmp_class_creation_20__bases_orig == NULL);
        tmp_class_creation_20__bases_orig = tmp_assign_source_274;
    }
    {
        PyObject *tmp_assign_source_275;
        PyObject *tmp_dircall_arg1_20;
        CHECK_OBJECT(tmp_class_creation_20__bases_orig);
        tmp_dircall_arg1_20 = tmp_class_creation_20__bases_orig;
        Py_INCREF(tmp_dircall_arg1_20);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_20};
            tmp_assign_source_275 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_275 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;

            goto try_except_handler_109;
        }
        assert(tmp_class_creation_20__bases == NULL);
        tmp_class_creation_20__bases = tmp_assign_source_275;
    }
    {
        PyObject *tmp_assign_source_276;
        tmp_assign_source_276 = PyDict_New();
        assert(tmp_class_creation_20__class_decl_dict == NULL);
        tmp_class_creation_20__class_decl_dict = tmp_assign_source_276;
    }
    {
        PyObject *tmp_assign_source_277;
        PyObject *tmp_metaclass_value_20;
        bool tmp_condition_result_116;
        PyObject *tmp_key_value_58;
        PyObject *tmp_dict_arg_value_58;
        PyObject *tmp_dict_arg_value_59;
        PyObject *tmp_key_value_59;
        nuitka_bool tmp_condition_result_117;
        int tmp_truth_name_20;
        PyObject *tmp_type_arg_39;
        PyObject *tmp_expression_value_199;
        PyObject *tmp_subscript_value_20;
        PyObject *tmp_bases_value_20;
        tmp_key_value_58 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
        tmp_dict_arg_value_58 = tmp_class_creation_20__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_58, tmp_key_value_58);
        assert(!(tmp_res == -1));
        tmp_condition_result_116 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_116 != false) {
            goto condexpr_true_39;
        } else {
            goto condexpr_false_39;
        }
        condexpr_true_39:;
        CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
        tmp_dict_arg_value_59 = tmp_class_creation_20__class_decl_dict;
        tmp_key_value_59 = mod_consts[87];
        tmp_metaclass_value_20 = DICT_GET_ITEM0(tmp_dict_arg_value_59, tmp_key_value_59);
        if (tmp_metaclass_value_20 == NULL) {
            tmp_metaclass_value_20 = Py_None;
        }
        assert(!(tmp_metaclass_value_20 == NULL));
        Py_INCREF(tmp_metaclass_value_20);
        goto condexpr_end_39;
        condexpr_false_39:;
        CHECK_OBJECT(tmp_class_creation_20__bases);
        tmp_truth_name_20 = CHECK_IF_TRUE(tmp_class_creation_20__bases);
        if (tmp_truth_name_20 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;

            goto try_except_handler_109;
        }
        tmp_condition_result_117 = tmp_truth_name_20 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_117 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_40;
        } else {
            goto condexpr_false_40;
        }
        condexpr_true_40:;
        CHECK_OBJECT(tmp_class_creation_20__bases);
        tmp_expression_value_199 = tmp_class_creation_20__bases;
        tmp_subscript_value_20 = mod_consts[13];
        tmp_type_arg_39 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_199, tmp_subscript_value_20, 0);
        if (tmp_type_arg_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;

            goto try_except_handler_109;
        }
        tmp_metaclass_value_20 = BUILTIN_TYPE1(tmp_type_arg_39);
        Py_DECREF(tmp_type_arg_39);
        if (tmp_metaclass_value_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;

            goto try_except_handler_109;
        }
        goto condexpr_end_40;
        condexpr_false_40:;
        tmp_metaclass_value_20 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_20);
        condexpr_end_40:;
        condexpr_end_39:;
        CHECK_OBJECT(tmp_class_creation_20__bases);
        tmp_bases_value_20 = tmp_class_creation_20__bases;
        tmp_assign_source_277 = SELECT_METACLASS(tmp_metaclass_value_20, tmp_bases_value_20);
        Py_DECREF(tmp_metaclass_value_20);
        if (tmp_assign_source_277 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;

            goto try_except_handler_109;
        }
        assert(tmp_class_creation_20__metaclass == NULL);
        tmp_class_creation_20__metaclass = tmp_assign_source_277;
    }
    {
        bool tmp_condition_result_118;
        PyObject *tmp_key_value_60;
        PyObject *tmp_dict_arg_value_60;
        tmp_key_value_60 = mod_consts[87];
        CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
        tmp_dict_arg_value_60 = tmp_class_creation_20__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_60, tmp_key_value_60);
        assert(!(tmp_res == -1));
        tmp_condition_result_118 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_118 != false) {
            goto branch_yes_78;
        } else {
            goto branch_no_78;
        }
    }
    branch_yes_78:;
    CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_20__class_decl_dict;
    tmp_dictdel_key = mod_consts[87];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 296;

        goto try_except_handler_109;
    }
    branch_no_78:;
    {
        nuitka_bool tmp_condition_result_119;
        PyObject *tmp_expression_value_200;
        CHECK_OBJECT(tmp_class_creation_20__metaclass);
        tmp_expression_value_200 = tmp_class_creation_20__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_200, mod_consts[88]);
        tmp_condition_result_119 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_119 == NUITKA_BOOL_TRUE) {
            goto branch_yes_79;
        } else {
            goto branch_no_79;
        }
    }
    branch_yes_79:;
    {
        PyObject *tmp_assign_source_278;
        PyObject *tmp_called_value_168;
        PyObject *tmp_expression_value_201;
        PyObject *tmp_args_value_90;
        PyObject *tmp_tuple_element_130;
        PyObject *tmp_kwargs_value_90;
        CHECK_OBJECT(tmp_class_creation_20__metaclass);
        tmp_expression_value_201 = tmp_class_creation_20__metaclass;
        tmp_called_value_168 = LOOKUP_ATTRIBUTE(tmp_expression_value_201, mod_consts[88]);
        if (tmp_called_value_168 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;

            goto try_except_handler_109;
        }
        tmp_tuple_element_130 = mod_consts[234];
        tmp_args_value_90 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_90, 0, tmp_tuple_element_130);
        CHECK_OBJECT(tmp_class_creation_20__bases);
        tmp_tuple_element_130 = tmp_class_creation_20__bases;
        PyTuple_SET_ITEM0(tmp_args_value_90, 1, tmp_tuple_element_130);
        CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
        tmp_kwargs_value_90 = tmp_class_creation_20__class_decl_dict;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 296;
        tmp_assign_source_278 = CALL_FUNCTION(tmp_called_value_168, tmp_args_value_90, tmp_kwargs_value_90);
        Py_DECREF(tmp_called_value_168);
        Py_DECREF(tmp_args_value_90);
        if (tmp_assign_source_278 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;

            goto try_except_handler_109;
        }
        assert(tmp_class_creation_20__prepared == NULL);
        tmp_class_creation_20__prepared = tmp_assign_source_278;
    }
    {
        bool tmp_condition_result_120;
        PyObject *tmp_operand_value_20;
        PyObject *tmp_expression_value_202;
        CHECK_OBJECT(tmp_class_creation_20__prepared);
        tmp_expression_value_202 = tmp_class_creation_20__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_202, mod_consts[89]);
        tmp_operand_value_20 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_20);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;

            goto try_except_handler_109;
        }
        tmp_condition_result_120 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_120 != false) {
            goto branch_yes_80;
        } else {
            goto branch_no_80;
        }
    }
    branch_yes_80:;
    {
        PyObject *tmp_raise_type_20;
        PyObject *tmp_raise_value_20;
        PyObject *tmp_left_value_28;
        PyObject *tmp_right_value_28;
        PyObject *tmp_tuple_element_131;
        PyObject *tmp_getattr_target_20;
        PyObject *tmp_getattr_attr_20;
        PyObject *tmp_getattr_default_20;
        tmp_raise_type_20 = PyExc_TypeError;
        tmp_left_value_28 = mod_consts[90];
        CHECK_OBJECT(tmp_class_creation_20__metaclass);
        tmp_getattr_target_20 = tmp_class_creation_20__metaclass;
        tmp_getattr_attr_20 = mod_consts[91];
        tmp_getattr_default_20 = mod_consts[92];
        tmp_tuple_element_131 = BUILTIN_GETATTR(tmp_getattr_target_20, tmp_getattr_attr_20, tmp_getattr_default_20);
        if (tmp_tuple_element_131 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;

            goto try_except_handler_109;
        }
        tmp_right_value_28 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_203;
            PyObject *tmp_type_arg_40;
            PyTuple_SET_ITEM(tmp_right_value_28, 0, tmp_tuple_element_131);
            CHECK_OBJECT(tmp_class_creation_20__prepared);
            tmp_type_arg_40 = tmp_class_creation_20__prepared;
            tmp_expression_value_203 = BUILTIN_TYPE1(tmp_type_arg_40);
            assert(!(tmp_expression_value_203 == NULL));
            tmp_tuple_element_131 = LOOKUP_ATTRIBUTE(tmp_expression_value_203, mod_consts[91]);
            Py_DECREF(tmp_expression_value_203);
            if (tmp_tuple_element_131 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 296;

                goto tuple_build_exception_21;
            }
            PyTuple_SET_ITEM(tmp_right_value_28, 1, tmp_tuple_element_131);
        }
        goto tuple_build_noexception_21;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_21:;
        Py_DECREF(tmp_right_value_28);
        goto try_except_handler_109;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_21:;
        tmp_raise_value_20 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_28, tmp_right_value_28);
        Py_DECREF(tmp_right_value_28);
        if (tmp_raise_value_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;

            goto try_except_handler_109;
        }
        exception_type = tmp_raise_type_20;
        Py_INCREF(tmp_raise_type_20);
        exception_value = tmp_raise_value_20;
        exception_lineno = 296;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_109;
    }
    branch_no_80:;
    goto branch_end_79;
    branch_no_79:;
    {
        PyObject *tmp_assign_source_279;
        tmp_assign_source_279 = PyDict_New();
        assert(tmp_class_creation_20__prepared == NULL);
        tmp_class_creation_20__prepared = tmp_assign_source_279;
    }
    branch_end_79:;
    {
        PyObject *tmp_assign_source_280;
        PyObject *tmp_called_value_169;
        PyObject *tmp_called_value_170;
        PyObject *tmp_args_value_91;
        PyObject *tmp_tuple_element_132;
        PyObject *tmp_expression_value_204;
        PyObject *tmp_kwargs_value_91;
        PyObject *tmp_args_element_value_111;
        tmp_called_value_170 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_called_value_170 == NULL)) {
            tmp_called_value_170 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_called_value_170 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 295;

            goto try_except_handler_109;
        }
        tmp_expression_value_204 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[19]);

        if (unlikely(tmp_expression_value_204 == NULL)) {
            tmp_expression_value_204 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[19]);
        }

        if (tmp_expression_value_204 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 295;

            goto try_except_handler_109;
        }
        tmp_tuple_element_132 = LOOKUP_ATTRIBUTE(tmp_expression_value_204, mod_consts[176]);
        if (tmp_tuple_element_132 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 295;

            goto try_except_handler_109;
        }
        tmp_args_value_91 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_91, 0, tmp_tuple_element_132);
        tmp_kwargs_value_91 = PyDict_Copy(mod_consts[235]);
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 295;
        tmp_called_value_169 = CALL_FUNCTION(tmp_called_value_170, tmp_args_value_91, tmp_kwargs_value_91);
        Py_DECREF(tmp_args_value_91);
        Py_DECREF(tmp_kwargs_value_91);
        if (tmp_called_value_169 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 295;

            goto try_except_handler_109;
        }
        {
            PyObject *tmp_set_locals_20;
            CHECK_OBJECT(tmp_class_creation_20__prepared);
            tmp_set_locals_20 = tmp_class_creation_20__prepared;
            locals_numba$core$typing$randomdecl$$$class__20_Random_triangular_296 = tmp_set_locals_20;
            Py_INCREF(tmp_set_locals_20);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[93];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__20_Random_triangular_296, mod_consts[94], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;

            goto try_except_handler_111;
        }
        tmp_dictset_value = mod_consts[234];
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__20_Random_triangular_296, mod_consts[96], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;

            goto try_except_handler_111;
        }
        if (isFrameUnusable(cache_frame_97a7f6be985da5ee9a7f03aa3318ed54_42)) {
            Py_XDECREF(cache_frame_97a7f6be985da5ee9a7f03aa3318ed54_42);

#if _DEBUG_REFCOUNTS
            if (cache_frame_97a7f6be985da5ee9a7f03aa3318ed54_42 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_97a7f6be985da5ee9a7f03aa3318ed54_42 = MAKE_FUNCTION_FRAME(codeobj_97a7f6be985da5ee9a7f03aa3318ed54, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_97a7f6be985da5ee9a7f03aa3318ed54_42->m_type_description == NULL);
        frame_97a7f6be985da5ee9a7f03aa3318ed54_42 = cache_frame_97a7f6be985da5ee9a7f03aa3318ed54_42;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_97a7f6be985da5ee9a7f03aa3318ed54_42);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_97a7f6be985da5ee9a7f03aa3318ed54_42) == 2); // Frame stack

        // Framed code:
        // Tried code:
        {
            PyObject *tmp_assign_source_281;
            PyObject *tmp_iter_arg_22;
            tmp_iter_arg_22 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__20_Random_triangular_296, mod_consts[86]);

            if (tmp_iter_arg_22 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_iter_arg_22 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[86]);

                    if (unlikely(tmp_iter_arg_22 == NULL)) {
                        tmp_iter_arg_22 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[86]);
                    }

                    if (tmp_iter_arg_22 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 297;
                        type_description_2 = "o";
                        goto try_except_handler_112;
                    }
                    Py_INCREF(tmp_iter_arg_22);
                } else {
                    goto try_except_handler_112;
                }
            }

            tmp_assign_source_281 = MAKE_ITERATOR(tmp_iter_arg_22);
            Py_DECREF(tmp_iter_arg_22);
            if (tmp_assign_source_281 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 297;
                type_description_2 = "o";
                goto try_except_handler_112;
            }
            assert(tmp_Random_triangular$listcomp_1__$0 == NULL);
            tmp_Random_triangular$listcomp_1__$0 = tmp_assign_source_281;
        }
        {
            PyObject *tmp_assign_source_282;
            tmp_assign_source_282 = PyList_New(0);
            assert(tmp_Random_triangular$listcomp_1__contraction == NULL);
            tmp_Random_triangular$listcomp_1__contraction = tmp_assign_source_282;
        }
        if (isFrameUnusable(cache_frame_b5c51f87e954de12490f3cdc22809f65_43)) {
            Py_XDECREF(cache_frame_b5c51f87e954de12490f3cdc22809f65_43);

#if _DEBUG_REFCOUNTS
            if (cache_frame_b5c51f87e954de12490f3cdc22809f65_43 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_b5c51f87e954de12490f3cdc22809f65_43 = MAKE_FUNCTION_FRAME(codeobj_b5c51f87e954de12490f3cdc22809f65, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_b5c51f87e954de12490f3cdc22809f65_43->m_type_description == NULL);
        frame_b5c51f87e954de12490f3cdc22809f65_43 = cache_frame_b5c51f87e954de12490f3cdc22809f65_43;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_b5c51f87e954de12490f3cdc22809f65_43);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_b5c51f87e954de12490f3cdc22809f65_43) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_22:;
        {
            PyObject *tmp_next_source_22;
            PyObject *tmp_assign_source_283;
            CHECK_OBJECT(tmp_Random_triangular$listcomp_1__$0);
            tmp_next_source_22 = tmp_Random_triangular$listcomp_1__$0;
            tmp_assign_source_283 = ITERATOR_NEXT(tmp_next_source_22);
            if (tmp_assign_source_283 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_22;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_3 = "o";
                    exception_lineno = 297;
                    goto try_except_handler_113;
                }
            }

            {
                PyObject *old = tmp_Random_triangular$listcomp_1__iter_value_0;
                tmp_Random_triangular$listcomp_1__iter_value_0 = tmp_assign_source_283;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_284;
            CHECK_OBJECT(tmp_Random_triangular$listcomp_1__iter_value_0);
            tmp_assign_source_284 = tmp_Random_triangular$listcomp_1__iter_value_0;
            {
                PyObject *old = outline_41_var_tp;
                outline_41_var_tp = tmp_assign_source_284;
                Py_INCREF(outline_41_var_tp);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_22;
            PyObject *tmp_append_value_22;
            PyObject *tmp_called_value_171;
            PyObject *tmp_args_element_value_112;
            PyObject *tmp_args_element_value_113;
            PyObject *tmp_args_element_value_114;
            CHECK_OBJECT(tmp_Random_triangular$listcomp_1__contraction);
            tmp_append_list_22 = tmp_Random_triangular$listcomp_1__contraction;
            tmp_called_value_171 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[25]);

            if (unlikely(tmp_called_value_171 == NULL)) {
                tmp_called_value_171 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[25]);
            }

            if (tmp_called_value_171 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 297;
                type_description_3 = "o";
                goto try_except_handler_113;
            }
            CHECK_OBJECT(outline_41_var_tp);
            tmp_args_element_value_112 = outline_41_var_tp;
            CHECK_OBJECT(outline_41_var_tp);
            tmp_args_element_value_113 = outline_41_var_tp;
            CHECK_OBJECT(outline_41_var_tp);
            tmp_args_element_value_114 = outline_41_var_tp;
            frame_b5c51f87e954de12490f3cdc22809f65_43->m_frame.f_lineno = 297;
            {
                PyObject *call_args[] = {tmp_args_element_value_112, tmp_args_element_value_113, tmp_args_element_value_114};
                tmp_append_value_22 = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_171, call_args);
            }

            if (tmp_append_value_22 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 297;
                type_description_3 = "o";
                goto try_except_handler_113;
            }
            assert(PyList_Check(tmp_append_list_22));
            tmp_result = LIST_APPEND1(tmp_append_list_22, tmp_append_value_22);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 297;
                type_description_3 = "o";
                goto try_except_handler_113;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 297;
            type_description_3 = "o";
            goto try_except_handler_113;
        }
        goto loop_start_22;
        loop_end_22:;
        CHECK_OBJECT(tmp_Random_triangular$listcomp_1__contraction);
        tmp_dictset_value = tmp_Random_triangular$listcomp_1__contraction;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_113;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_113:;
        CHECK_OBJECT(tmp_Random_triangular$listcomp_1__$0);
        Py_DECREF(tmp_Random_triangular$listcomp_1__$0);
        tmp_Random_triangular$listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_Random_triangular$listcomp_1__contraction);
        Py_DECREF(tmp_Random_triangular$listcomp_1__contraction);
        tmp_Random_triangular$listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_Random_triangular$listcomp_1__iter_value_0);
        tmp_Random_triangular$listcomp_1__iter_value_0 = NULL;
        goto frame_return_exit_22;
        // Exception handler code:
        try_except_handler_113:;
        exception_keeper_type_109 = exception_type;
        exception_keeper_value_109 = exception_value;
        exception_keeper_tb_109 = exception_tb;
        exception_keeper_lineno_109 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Random_triangular$listcomp_1__$0);
        Py_DECREF(tmp_Random_triangular$listcomp_1__$0);
        tmp_Random_triangular$listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_Random_triangular$listcomp_1__contraction);
        Py_DECREF(tmp_Random_triangular$listcomp_1__contraction);
        tmp_Random_triangular$listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_Random_triangular$listcomp_1__iter_value_0);
        tmp_Random_triangular$listcomp_1__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_109;
        exception_value = exception_keeper_value_109;
        exception_tb = exception_keeper_tb_109;
        exception_lineno = exception_keeper_lineno_109;

        goto frame_exception_exit_43;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_b5c51f87e954de12490f3cdc22809f65_43);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_41;

        frame_return_exit_22:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_b5c51f87e954de12490f3cdc22809f65_43);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_112;

        frame_exception_exit_43:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_b5c51f87e954de12490f3cdc22809f65_43);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_b5c51f87e954de12490f3cdc22809f65_43, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_b5c51f87e954de12490f3cdc22809f65_43->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_b5c51f87e954de12490f3cdc22809f65_43, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_b5c51f87e954de12490f3cdc22809f65_43,
            type_description_3,
            outline_41_var_tp
        );


        // Release cached frame if used for exception.
        if (frame_b5c51f87e954de12490f3cdc22809f65_43 == cache_frame_b5c51f87e954de12490f3cdc22809f65_43) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_b5c51f87e954de12490f3cdc22809f65_43);
            cache_frame_b5c51f87e954de12490f3cdc22809f65_43 = NULL;
        }

        assertFrameObject(frame_b5c51f87e954de12490f3cdc22809f65_43);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_42;

        frame_no_exception_41:;
        goto skip_nested_handling_41;
        nested_frame_exit_42:;
        type_description_2 = "o";
        goto try_except_handler_112;
        skip_nested_handling_41:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_112:;
        Py_XDECREF(outline_41_var_tp);
        outline_41_var_tp = NULL;
        goto outline_result_42;
        // Exception handler code:
        try_except_handler_112:;
        exception_keeper_type_110 = exception_type;
        exception_keeper_value_110 = exception_value;
        exception_keeper_tb_110 = exception_tb;
        exception_keeper_lineno_110 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_41_var_tp);
        outline_41_var_tp = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_110;
        exception_value = exception_keeper_value_110;
        exception_tb = exception_keeper_tb_110;
        exception_lineno = exception_keeper_lineno_110;

        goto outline_exception_42;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_42:;
        exception_lineno = 297;
        goto frame_exception_exit_42;
        outline_result_42:;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__20_Random_triangular_296, mod_consts[30], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 297;
            type_description_2 = "o";
            goto frame_exception_exit_42;
        }
        {
            PyObject *tmp_assign_source_285;
            tmp_assign_source_285 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__20_Random_triangular_296, mod_consts[30]);

            if (unlikely(tmp_assign_source_285 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[30]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 298;
                type_description_2 = "o";
                goto frame_exception_exit_42;
            }

            if (tmp_assign_source_285 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 298;
                type_description_2 = "o";
                goto frame_exception_exit_42;
            }
            assert(tmp_Random_triangular$class_inplace_1__value == NULL);
            tmp_Random_triangular$class_inplace_1__value = tmp_assign_source_285;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_286;
            PyObject *tmp_left_value_29;
            PyObject *tmp_right_value_29;
            CHECK_OBJECT(tmp_Random_triangular$class_inplace_1__value);
            tmp_left_value_29 = tmp_Random_triangular$class_inplace_1__value;
            // Tried code:
            {
                PyObject *tmp_assign_source_287;
                PyObject *tmp_iter_arg_23;
                tmp_iter_arg_23 = PyObject_GetItem(locals_numba$core$typing$randomdecl$$$class__20_Random_triangular_296, mod_consts[86]);

                if (tmp_iter_arg_23 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_iter_arg_23 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[86]);

                        if (unlikely(tmp_iter_arg_23 == NULL)) {
                            tmp_iter_arg_23 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[86]);
                        }

                        if (tmp_iter_arg_23 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 298;
                            type_description_2 = "o";
                            goto try_except_handler_115;
                        }
                        Py_INCREF(tmp_iter_arg_23);
                    } else {
                        goto try_except_handler_115;
                    }
                }

                tmp_assign_source_287 = MAKE_ITERATOR(tmp_iter_arg_23);
                Py_DECREF(tmp_iter_arg_23);
                if (tmp_assign_source_287 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 298;
                    type_description_2 = "o";
                    goto try_except_handler_115;
                }
                assert(tmp_Random_triangular$listcomp_2__$0 == NULL);
                tmp_Random_triangular$listcomp_2__$0 = tmp_assign_source_287;
            }
            {
                PyObject *tmp_assign_source_288;
                tmp_assign_source_288 = PyList_New(0);
                assert(tmp_Random_triangular$listcomp_2__contraction == NULL);
                tmp_Random_triangular$listcomp_2__contraction = tmp_assign_source_288;
            }
            if (isFrameUnusable(cache_frame_52dbc07b92665a53497ee55930828bee_44)) {
                Py_XDECREF(cache_frame_52dbc07b92665a53497ee55930828bee_44);

#if _DEBUG_REFCOUNTS
                if (cache_frame_52dbc07b92665a53497ee55930828bee_44 == NULL) {
                    count_active_frame_cache_instances += 1;
                } else {
                    count_released_frame_cache_instances += 1;
                }
                count_allocated_frame_cache_instances += 1;
#endif
                cache_frame_52dbc07b92665a53497ee55930828bee_44 = MAKE_FUNCTION_FRAME(codeobj_52dbc07b92665a53497ee55930828bee, module_numba$core$typing$randomdecl, sizeof(void *));
#if _DEBUG_REFCOUNTS
            } else {
                count_hit_frame_cache_instances += 1;
#endif
            }
            assert(cache_frame_52dbc07b92665a53497ee55930828bee_44->m_type_description == NULL);
            frame_52dbc07b92665a53497ee55930828bee_44 = cache_frame_52dbc07b92665a53497ee55930828bee_44;

            // Push the new frame as the currently active one.
            pushFrameStack(frame_52dbc07b92665a53497ee55930828bee_44);

            // Mark the frame object as in use, ref count 1 will be up for reuse.
            assert(Py_REFCNT(frame_52dbc07b92665a53497ee55930828bee_44) == 2); // Frame stack

            // Framed code:
            // Tried code:
            loop_start_23:;
            {
                PyObject *tmp_next_source_23;
                PyObject *tmp_assign_source_289;
                CHECK_OBJECT(tmp_Random_triangular$listcomp_2__$0);
                tmp_next_source_23 = tmp_Random_triangular$listcomp_2__$0;
                tmp_assign_source_289 = ITERATOR_NEXT(tmp_next_source_23);
                if (tmp_assign_source_289 == NULL) {
                    if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                        goto loop_end_23;
                    } else {

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        type_description_3 = "o";
                        exception_lineno = 298;
                        goto try_except_handler_116;
                    }
                }

                {
                    PyObject *old = tmp_Random_triangular$listcomp_2__iter_value_0;
                    tmp_Random_triangular$listcomp_2__iter_value_0 = tmp_assign_source_289;
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_assign_source_290;
                CHECK_OBJECT(tmp_Random_triangular$listcomp_2__iter_value_0);
                tmp_assign_source_290 = tmp_Random_triangular$listcomp_2__iter_value_0;
                {
                    PyObject *old = outline_42_var_tp;
                    outline_42_var_tp = tmp_assign_source_290;
                    Py_INCREF(outline_42_var_tp);
                    Py_XDECREF(old);
                }

            }
            {
                PyObject *tmp_append_list_23;
                PyObject *tmp_append_value_23;
                PyObject *tmp_called_value_172;
                PyObject *tmp_args_element_value_115;
                PyObject *tmp_args_element_value_116;
                PyObject *tmp_args_element_value_117;
                PyObject *tmp_args_element_value_118;
                CHECK_OBJECT(tmp_Random_triangular$listcomp_2__contraction);
                tmp_append_list_23 = tmp_Random_triangular$listcomp_2__contraction;
                tmp_called_value_172 = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[25]);

                if (unlikely(tmp_called_value_172 == NULL)) {
                    tmp_called_value_172 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[25]);
                }

                if (tmp_called_value_172 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 298;
                    type_description_3 = "o";
                    goto try_except_handler_116;
                }
                CHECK_OBJECT(outline_42_var_tp);
                tmp_args_element_value_115 = outline_42_var_tp;
                CHECK_OBJECT(outline_42_var_tp);
                tmp_args_element_value_116 = outline_42_var_tp;
                CHECK_OBJECT(outline_42_var_tp);
                tmp_args_element_value_117 = outline_42_var_tp;
                CHECK_OBJECT(outline_42_var_tp);
                tmp_args_element_value_118 = outline_42_var_tp;
                frame_52dbc07b92665a53497ee55930828bee_44->m_frame.f_lineno = 298;
                {
                    PyObject *call_args[] = {tmp_args_element_value_115, tmp_args_element_value_116, tmp_args_element_value_117, tmp_args_element_value_118};
                    tmp_append_value_23 = CALL_FUNCTION_WITH_ARGS4(tmp_called_value_172, call_args);
                }

                if (tmp_append_value_23 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 298;
                    type_description_3 = "o";
                    goto try_except_handler_116;
                }
                assert(PyList_Check(tmp_append_list_23));
                tmp_result = LIST_APPEND1(tmp_append_list_23, tmp_append_value_23);
                if (tmp_result == false) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 298;
                    type_description_3 = "o";
                    goto try_except_handler_116;
                }
            }
            if (CONSIDER_THREADING() == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 298;
                type_description_3 = "o";
                goto try_except_handler_116;
            }
            goto loop_start_23;
            loop_end_23:;
            CHECK_OBJECT(tmp_Random_triangular$listcomp_2__contraction);
            tmp_right_value_29 = tmp_Random_triangular$listcomp_2__contraction;
            Py_INCREF(tmp_right_value_29);
            goto try_return_handler_116;
            NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
            return NULL;
            // Return handler code:
            try_return_handler_116:;
            CHECK_OBJECT(tmp_Random_triangular$listcomp_2__$0);
            Py_DECREF(tmp_Random_triangular$listcomp_2__$0);
            tmp_Random_triangular$listcomp_2__$0 = NULL;
            CHECK_OBJECT(tmp_Random_triangular$listcomp_2__contraction);
            Py_DECREF(tmp_Random_triangular$listcomp_2__contraction);
            tmp_Random_triangular$listcomp_2__contraction = NULL;
            Py_XDECREF(tmp_Random_triangular$listcomp_2__iter_value_0);
            tmp_Random_triangular$listcomp_2__iter_value_0 = NULL;
            goto frame_return_exit_23;
            // Exception handler code:
            try_except_handler_116:;
            exception_keeper_type_111 = exception_type;
            exception_keeper_value_111 = exception_value;
            exception_keeper_tb_111 = exception_tb;
            exception_keeper_lineno_111 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            CHECK_OBJECT(tmp_Random_triangular$listcomp_2__$0);
            Py_DECREF(tmp_Random_triangular$listcomp_2__$0);
            tmp_Random_triangular$listcomp_2__$0 = NULL;
            CHECK_OBJECT(tmp_Random_triangular$listcomp_2__contraction);
            Py_DECREF(tmp_Random_triangular$listcomp_2__contraction);
            tmp_Random_triangular$listcomp_2__contraction = NULL;
            Py_XDECREF(tmp_Random_triangular$listcomp_2__iter_value_0);
            tmp_Random_triangular$listcomp_2__iter_value_0 = NULL;
            // Re-raise.
            exception_type = exception_keeper_type_111;
            exception_value = exception_keeper_value_111;
            exception_tb = exception_keeper_tb_111;
            exception_lineno = exception_keeper_lineno_111;

            goto frame_exception_exit_44;
            // End of try:

#if 0
            RESTORE_FRAME_EXCEPTION(frame_52dbc07b92665a53497ee55930828bee_44);
#endif

            // Put the previous frame back on top.
            popFrameStack();

            goto frame_no_exception_42;

            frame_return_exit_23:;
#if 0
            RESTORE_FRAME_EXCEPTION(frame_52dbc07b92665a53497ee55930828bee_44);
#endif

            // Put the previous frame back on top.
            popFrameStack();

            goto try_return_handler_115;

            frame_exception_exit_44:;

#if 0
            RESTORE_FRAME_EXCEPTION(frame_52dbc07b92665a53497ee55930828bee_44);
#endif

            if (exception_tb == NULL) {
                exception_tb = MAKE_TRACEBACK(frame_52dbc07b92665a53497ee55930828bee_44, exception_lineno);
            } else if (exception_tb->tb_frame != &frame_52dbc07b92665a53497ee55930828bee_44->m_frame) {
                exception_tb = ADD_TRACEBACK(exception_tb, frame_52dbc07b92665a53497ee55930828bee_44, exception_lineno);
            }

            // Attaches locals to frame if any.
            Nuitka_Frame_AttachLocals(
                frame_52dbc07b92665a53497ee55930828bee_44,
                type_description_3,
                outline_42_var_tp
            );


            // Release cached frame if used for exception.
            if (frame_52dbc07b92665a53497ee55930828bee_44 == cache_frame_52dbc07b92665a53497ee55930828bee_44) {
#if _DEBUG_REFCOUNTS
                count_active_frame_cache_instances -= 1;
                count_released_frame_cache_instances += 1;
#endif

                Py_DECREF(cache_frame_52dbc07b92665a53497ee55930828bee_44);
                cache_frame_52dbc07b92665a53497ee55930828bee_44 = NULL;
            }

            assertFrameObject(frame_52dbc07b92665a53497ee55930828bee_44);

            // Put the previous frame back on top.
            popFrameStack();

            // Return the error.
            goto nested_frame_exit_43;

            frame_no_exception_42:;
            goto skip_nested_handling_42;
            nested_frame_exit_43:;
            type_description_2 = "o";
            goto try_except_handler_115;
            skip_nested_handling_42:;
            NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
            return NULL;
            // Return handler code:
            try_return_handler_115:;
            Py_XDECREF(outline_42_var_tp);
            outline_42_var_tp = NULL;
            goto outline_result_43;
            // Exception handler code:
            try_except_handler_115:;
            exception_keeper_type_112 = exception_type;
            exception_keeper_value_112 = exception_value;
            exception_keeper_tb_112 = exception_tb;
            exception_keeper_lineno_112 = exception_lineno;
            exception_type = NULL;
            exception_value = NULL;
            exception_tb = NULL;
            exception_lineno = 0;

            Py_XDECREF(outline_42_var_tp);
            outline_42_var_tp = NULL;
            // Re-raise.
            exception_type = exception_keeper_type_112;
            exception_value = exception_keeper_value_112;
            exception_tb = exception_keeper_tb_112;
            exception_lineno = exception_keeper_lineno_112;

            goto outline_exception_43;
            // End of try:
            NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
            return NULL;
            outline_exception_43:;
            exception_lineno = 298;
            goto try_except_handler_114;
            outline_result_43:;
            tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE(&tmp_left_value_29, tmp_right_value_29);
            Py_DECREF(tmp_right_value_29);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 298;
                type_description_2 = "o";
                goto try_except_handler_114;
            }
            tmp_assign_source_286 = tmp_left_value_29;
            tmp_Random_triangular$class_inplace_1__value = tmp_assign_source_286;

        }
        CHECK_OBJECT(tmp_Random_triangular$class_inplace_1__value);
        tmp_dictset_value = tmp_Random_triangular$class_inplace_1__value;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__20_Random_triangular_296, mod_consts[30], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 298;
            type_description_2 = "o";
            goto try_except_handler_114;
        }
        goto try_end_29;
        // Exception handler code:
        try_except_handler_114:;
        exception_keeper_type_113 = exception_type;
        exception_keeper_value_113 = exception_value;
        exception_keeper_tb_113 = exception_tb;
        exception_keeper_lineno_113 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_Random_triangular$class_inplace_1__value);
        Py_DECREF(tmp_Random_triangular$class_inplace_1__value);
        tmp_Random_triangular$class_inplace_1__value = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_113;
        exception_value = exception_keeper_value_113;
        exception_tb = exception_keeper_tb_113;
        exception_lineno = exception_keeper_lineno_113;

        goto frame_exception_exit_42;
        // End of try:
        try_end_29:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_97a7f6be985da5ee9a7f03aa3318ed54_42);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_43;

        frame_exception_exit_42:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_97a7f6be985da5ee9a7f03aa3318ed54_42);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_97a7f6be985da5ee9a7f03aa3318ed54_42, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_97a7f6be985da5ee9a7f03aa3318ed54_42->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_97a7f6be985da5ee9a7f03aa3318ed54_42, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_97a7f6be985da5ee9a7f03aa3318ed54_42,
            type_description_2,
            outline_40_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_97a7f6be985da5ee9a7f03aa3318ed54_42 == cache_frame_97a7f6be985da5ee9a7f03aa3318ed54_42) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_97a7f6be985da5ee9a7f03aa3318ed54_42);
            cache_frame_97a7f6be985da5ee9a7f03aa3318ed54_42 = NULL;
        }

        assertFrameObject(frame_97a7f6be985da5ee9a7f03aa3318ed54_42);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_41;

        frame_no_exception_43:;
        goto skip_nested_handling_43;
        nested_frame_exit_41:;

        goto try_except_handler_111;
        skip_nested_handling_43:;
        CHECK_OBJECT(tmp_Random_triangular$class_inplace_1__value);
        Py_DECREF(tmp_Random_triangular$class_inplace_1__value);
        tmp_Random_triangular$class_inplace_1__value = NULL;
        {
            nuitka_bool tmp_condition_result_121;
            PyObject *tmp_cmp_expr_left_21;
            PyObject *tmp_cmp_expr_right_21;
            CHECK_OBJECT(tmp_class_creation_20__bases);
            tmp_cmp_expr_left_21 = tmp_class_creation_20__bases;
            CHECK_OBJECT(tmp_class_creation_20__bases_orig);
            tmp_cmp_expr_right_21 = tmp_class_creation_20__bases_orig;
            tmp_condition_result_121 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_21, tmp_cmp_expr_right_21);
            if (tmp_condition_result_121 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 296;

                goto try_except_handler_111;
            }
            if (tmp_condition_result_121 == NUITKA_BOOL_TRUE) {
                goto branch_yes_81;
            } else {
                goto branch_no_81;
            }
            assert(tmp_condition_result_121 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_81:;
        CHECK_OBJECT(tmp_class_creation_20__bases_orig);
        tmp_dictset_value = tmp_class_creation_20__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$core$typing$randomdecl$$$class__20_Random_triangular_296, mod_consts[98], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;

            goto try_except_handler_111;
        }
        branch_no_81:;
        {
            PyObject *tmp_assign_source_291;
            PyObject *tmp_called_value_173;
            PyObject *tmp_args_value_92;
            PyObject *tmp_tuple_element_133;
            PyObject *tmp_kwargs_value_92;
            CHECK_OBJECT(tmp_class_creation_20__metaclass);
            tmp_called_value_173 = tmp_class_creation_20__metaclass;
            tmp_tuple_element_133 = mod_consts[234];
            tmp_args_value_92 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_92, 0, tmp_tuple_element_133);
            CHECK_OBJECT(tmp_class_creation_20__bases);
            tmp_tuple_element_133 = tmp_class_creation_20__bases;
            PyTuple_SET_ITEM0(tmp_args_value_92, 1, tmp_tuple_element_133);
            tmp_tuple_element_133 = locals_numba$core$typing$randomdecl$$$class__20_Random_triangular_296;
            PyTuple_SET_ITEM0(tmp_args_value_92, 2, tmp_tuple_element_133);
            CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
            tmp_kwargs_value_92 = tmp_class_creation_20__class_decl_dict;
            frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 296;
            tmp_assign_source_291 = CALL_FUNCTION(tmp_called_value_173, tmp_args_value_92, tmp_kwargs_value_92);
            Py_DECREF(tmp_args_value_92);
            if (tmp_assign_source_291 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 296;

                goto try_except_handler_111;
            }
            assert(outline_40_var___class__ == NULL);
            outline_40_var___class__ = tmp_assign_source_291;
        }
        CHECK_OBJECT(outline_40_var___class__);
        tmp_args_element_value_111 = outline_40_var___class__;
        Py_INCREF(tmp_args_element_value_111);
        goto try_return_handler_111;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_111:;
        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__20_Random_triangular_296);
        locals_numba$core$typing$randomdecl$$$class__20_Random_triangular_296 = NULL;
        goto try_return_handler_110;
        // Exception handler code:
        try_except_handler_111:;
        exception_keeper_type_114 = exception_type;
        exception_keeper_value_114 = exception_value;
        exception_keeper_tb_114 = exception_tb;
        exception_keeper_lineno_114 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$core$typing$randomdecl$$$class__20_Random_triangular_296);
        locals_numba$core$typing$randomdecl$$$class__20_Random_triangular_296 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_114;
        exception_value = exception_keeper_value_114;
        exception_tb = exception_keeper_tb_114;
        exception_lineno = exception_keeper_lineno_114;

        goto try_except_handler_110;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_110:;
        CHECK_OBJECT(outline_40_var___class__);
        Py_DECREF(outline_40_var___class__);
        outline_40_var___class__ = NULL;
        goto outline_result_41;
        // Exception handler code:
        try_except_handler_110:;
        exception_keeper_type_115 = exception_type;
        exception_keeper_value_115 = exception_value;
        exception_keeper_tb_115 = exception_tb;
        exception_keeper_lineno_115 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_115;
        exception_value = exception_keeper_value_115;
        exception_tb = exception_keeper_tb_115;
        exception_lineno = exception_keeper_lineno_115;

        goto outline_exception_41;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_41:;
        exception_lineno = 296;
        goto try_except_handler_109;
        outline_result_41:;
        frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame.f_lineno = 295;
        tmp_assign_source_280 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_169, tmp_args_element_value_111);
        Py_DECREF(tmp_called_value_169);
        Py_DECREF(tmp_args_element_value_111);
        if (tmp_assign_source_280 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 295;

            goto try_except_handler_109;
        }
        UPDATE_STRING_DICT1(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)mod_consts[234], tmp_assign_source_280);
    }
    goto try_end_30;
    // Exception handler code:
    try_except_handler_109:;
    exception_keeper_type_116 = exception_type;
    exception_keeper_value_116 = exception_value;
    exception_keeper_tb_116 = exception_tb;
    exception_keeper_lineno_116 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_20__bases_orig);
    tmp_class_creation_20__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_20__bases);
    tmp_class_creation_20__bases = NULL;
    Py_XDECREF(tmp_class_creation_20__class_decl_dict);
    tmp_class_creation_20__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_20__metaclass);
    tmp_class_creation_20__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_20__prepared);
    tmp_class_creation_20__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_116;
    exception_value = exception_keeper_value_116;
    exception_tb = exception_keeper_tb_116;
    exception_lineno = exception_keeper_lineno_116;

    goto frame_exception_exit_1;
    // End of try:
    try_end_30:;

    // Restore frame exception if necessary.
#if 0
    RESTORE_FRAME_EXCEPTION(frame_67c4cca428b0d1121581f2e5bfdef9ad);
#endif
    popFrameStack();

    assertFrameObject(frame_67c4cca428b0d1121581f2e5bfdef9ad);

    goto frame_no_exception_44;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_67c4cca428b0d1121581f2e5bfdef9ad);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_67c4cca428b0d1121581f2e5bfdef9ad, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_67c4cca428b0d1121581f2e5bfdef9ad->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_67c4cca428b0d1121581f2e5bfdef9ad, exception_lineno);
    }

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto module_exception_exit;

    frame_no_exception_44:;
    CHECK_OBJECT(tmp_class_creation_20__bases_orig);
    Py_DECREF(tmp_class_creation_20__bases_orig);
    tmp_class_creation_20__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_20__bases);
    Py_DECREF(tmp_class_creation_20__bases);
    tmp_class_creation_20__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
    Py_DECREF(tmp_class_creation_20__class_decl_dict);
    tmp_class_creation_20__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_20__metaclass);
    Py_DECREF(tmp_class_creation_20__metaclass);
    tmp_class_creation_20__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_20__prepared);
    Py_DECREF(tmp_class_creation_20__prepared);
    tmp_class_creation_20__prepared = NULL;

    // Report to PGO about leaving the module without error.
    PGO_onModuleExit("numba.core.typing.randomdecl", false);

    Py_INCREF(module_numba$core$typing$randomdecl);
    return module_numba$core$typing$randomdecl;
    module_exception_exit:

#if defined(_NUITKA_MODULE) && 0
    {
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_numba$core$typing$randomdecl, (Nuitka_StringObject *)const_str_plain___name__);

        if (module_name != NULL) {
            Nuitka_DelModule(module_name);
        }
    }
#endif
    PGO_onModuleExit("numba$core$typing$randomdecl", false);

    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);
    return NULL;
}
