/* Generated code for Python module 'numba.roc.hsadrv.drvapi'
 * created by Nuitka version 0.9.6
 *
 * This code is in part copyright 2022 Kay Hayen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "nuitka/prelude.h"

#include "nuitka/unfreezing.h"

#include "__helpers.h"

/* The "module_numba$roc$hsadrv$drvapi" is a Python object pointer of module type.
 *
 * Note: For full compatibility with CPython, every module variable access
 * needs to go through it except for cases where the module cannot possibly
 * have changed in the mean time.
 */

PyObject *module_numba$roc$hsadrv$drvapi;
PyDictObject *moduledict_numba$roc$hsadrv$drvapi;

/* The declarations of module constants used, if any. */
static PyObject *mod_consts[382];
#ifndef __NUITKA_NO_ASSERT__
static Py_hash_t mod_consts_hash[382];
#endif

static PyObject *module_filename_obj = NULL;

/* Indicator if this modules private constants were created yet. */
static bool constants_created = false;

/* Function to create module private constants. */
static void createModuleConstants(void) {
    if (constants_created == false) {
        loadConstantsBlob(&mod_consts[0], UNTRANSLATE("numba.roc.hsadrv.drvapi"));
        constants_created = true;

#ifndef __NUITKA_NO_ASSERT__
        for (int i = 0; i < 382; i++) {
            mod_consts_hash[i] = DEEP_HASH(mod_consts[i]);
        }
#endif
    }
}

// We want to be able to initialize the "__main__" constants in any case.
#if 0
void createMainModuleConstants(void) {
    createModuleConstants();
}
#endif

/* Function to verify module private constants for non-corruption. */
#ifndef __NUITKA_NO_ASSERT__
void checkModuleConstants_numba$roc$hsadrv$drvapi(void) {
    // The module may not have been used at all, then ignore this.
    if (constants_created == false) return;

    for (int i = 0; i < 382; i++) {
        assert(mod_consts_hash[i] == DEEP_HASH(mod_consts[i]));
        CHECK_OBJECT_DEEP(mod_consts[i]);
    }
}
#endif

// The module code objects.
static PyCodeObject *codeobj_cab721a8a857ec3773aa7f7de5c980d9;
static PyCodeObject *codeobj_277c99bb5820295c4a793963c6d9675f;
static PyCodeObject *codeobj_a5bf7593a9cd0e0ec263ccaa03091d5f;
static PyCodeObject *codeobj_ca1ea4c5a97b83bc8a29925e6ee54843;
static PyCodeObject *codeobj_26aa06568d90b6773700b3e42758eca6;
static PyCodeObject *codeobj_4189e9452107b225be7a7cd4ff8ba23a;
static PyCodeObject *codeobj_2d7080f784f56c1d1310fc32beecb145;
static PyCodeObject *codeobj_4308947db4300a5ec14040e5f466a735;
static PyCodeObject *codeobj_8f1038c8de2eafcc8378d2a867a429a5;
static PyCodeObject *codeobj_d167d81cc15b833c76f7772221f1c650;
static PyCodeObject *codeobj_683cd77f6d77439eb8619ecb5cd128ce;
static PyCodeObject *codeobj_bc9f612c35d7f980bec2555e74a060ce;
static PyCodeObject *codeobj_49394c7c8beb9c9b30705d981c1289c9;
static PyCodeObject *codeobj_16704068b6246c21baeae1cb7753c931;
static PyCodeObject *codeobj_bb8128588c1f0f62d387274ecc3aca59;
static PyCodeObject *codeobj_6050eba5412bb6113d2af9826b315903;
static PyCodeObject *codeobj_bf4dc8548fa109c9509d32a0d9bcab4b;
static PyCodeObject *codeobj_a691ad939bd4c09d7c61a188cb9026c5;
static PyCodeObject *codeobj_a441998b0ea2dc83684515950f20f5ec;

static void createModuleCodeObjects(void) {
    module_filename_obj = MAKE_RELATIVE_PATH(mod_consts[374]); CHECK_OBJECT(module_filename_obj);
    codeobj_cab721a8a857ec3773aa7f7de5c980d9 = MAKE_CODEOBJECT(module_filename_obj, 382, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[375], mod_consts[376], NULL, 1, 0, 0);
    codeobj_277c99bb5820295c4a793963c6d9675f = MAKE_CODEOBJECT(module_filename_obj, 1, CO_NOFREE, mod_consts[377], NULL, NULL, 0, 0, 0);
    codeobj_a5bf7593a9cd0e0ec263ccaa03091d5f = MAKE_CODEOBJECT(module_filename_obj, 139, CO_NOFREE, mod_consts[147], mod_consts[378], NULL, 0, 0, 0);
    codeobj_ca1ea4c5a97b83bc8a29925e6ee54843 = MAKE_CODEOBJECT(module_filename_obj, 378, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[249], mod_consts[379], NULL, 0, 0, 0);
    codeobj_26aa06568d90b6773700b3e42758eca6 = MAKE_CODEOBJECT(module_filename_obj, 395, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[251], mod_consts[380], NULL, 3, 0, 0);
    codeobj_4189e9452107b225be7a7cd4ff8ba23a = MAKE_CODEOBJECT(module_filename_obj, 83, CO_NOFREE, mod_consts[112], mod_consts[378], NULL, 0, 0, 0);
    codeobj_2d7080f784f56c1d1310fc32beecb145 = MAKE_CODEOBJECT(module_filename_obj, 182, CO_NOFREE, mod_consts[177], mod_consts[378], NULL, 0, 0, 0);
    codeobj_4308947db4300a5ec14040e5f466a735 = MAKE_CODEOBJECT(module_filename_obj, 161, CO_NOFREE, mod_consts[163], mod_consts[378], NULL, 0, 0, 0);
    codeobj_8f1038c8de2eafcc8378d2a867a429a5 = MAKE_CODEOBJECT(module_filename_obj, 95, CO_NOFREE, mod_consts[117], mod_consts[378], NULL, 0, 0, 0);
    codeobj_d167d81cc15b833c76f7772221f1c650 = MAKE_CODEOBJECT(module_filename_obj, 19, CO_NOFREE, mod_consts[46], mod_consts[378], NULL, 0, 0, 0);
    codeobj_683cd77f6d77439eb8619ecb5cd128ce = MAKE_CODEOBJECT(module_filename_obj, 198, CO_NOFREE, mod_consts[185], mod_consts[378], NULL, 0, 0, 0);
    codeobj_bc9f612c35d7f980bec2555e74a060ce = MAKE_CODEOBJECT(module_filename_obj, 261, CO_NOFREE, mod_consts[206], mod_consts[378], NULL, 0, 0, 0);
    codeobj_49394c7c8beb9c9b30705d981c1289c9 = MAKE_CODEOBJECT(module_filename_obj, 302, CO_NOFREE, mod_consts[229], mod_consts[378], NULL, 0, 0, 0);
    codeobj_16704068b6246c21baeae1cb7753c931 = MAKE_CODEOBJECT(module_filename_obj, 290, CO_NOFREE, mod_consts[220], mod_consts[378], NULL, 0, 0, 0);
    codeobj_bb8128588c1f0f62d387274ecc3aca59 = MAKE_CODEOBJECT(module_filename_obj, 284, CO_NOFREE, mod_consts[217], mod_consts[378], NULL, 0, 0, 0);
    codeobj_6050eba5412bb6113d2af9826b315903 = MAKE_CODEOBJECT(module_filename_obj, 308, CO_NOFREE, mod_consts[231], mod_consts[378], NULL, 0, 0, 0);
    codeobj_bf4dc8548fa109c9509d32a0d9bcab4b = MAKE_CODEOBJECT(module_filename_obj, 319, CO_NOFREE, mod_consts[237], mod_consts[378], NULL, 0, 0, 0);
    codeobj_a691ad939bd4c09d7c61a188cb9026c5 = MAKE_CODEOBJECT(module_filename_obj, 62, CO_NOFREE, mod_consts[95], mod_consts[378], NULL, 0, 0, 0);
    codeobj_a441998b0ea2dc83684515950f20f5ec = MAKE_CODEOBJECT(module_filename_obj, 44, CO_NOFREE, mod_consts[79], mod_consts[378], NULL, 0, 0, 0);
}

// The module function declarations.
NUITKA_CROSS_MODULE PyObject *impl___main__$$$function__1__mro_entries_conversion(PyObject **python_pars);


static PyObject *MAKE_FUNCTION_numba$roc$hsadrv$drvapi$$$function__1__build_reverse_error_warn_maps();


static PyObject *MAKE_FUNCTION_numba$roc$hsadrv$drvapi$$$function__2__check_error();


// The module function definitions.
static PyObject *impl_numba$roc$hsadrv$drvapi$$$function__1__build_reverse_error_warn_maps(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *var_err_map = NULL;
    PyObject *var_warn_map = NULL;
    PyObject *var_name = NULL;
    PyObject *var_code = NULL;
    PyObject *outline_0_var_name = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_listcomp_1__$0 = NULL;
    PyObject *tmp_listcomp_1__contraction = NULL;
    PyObject *tmp_listcomp_1__iter_value_0 = NULL;
    struct Nuitka_FrameObject *frame_ca1ea4c5a97b83bc8a29925e6ee54843;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    struct Nuitka_FrameObject *frame_cab721a8a857ec3773aa7f7de5c980d9_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    bool tmp_result;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    static struct Nuitka_FrameObject *cache_frame_cab721a8a857ec3773aa7f7de5c980d9_2 = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    int tmp_res;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_ca1ea4c5a97b83bc8a29925e6ee54843 = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_ca1ea4c5a97b83bc8a29925e6ee54843)) {
        Py_XDECREF(cache_frame_ca1ea4c5a97b83bc8a29925e6ee54843);

#if _DEBUG_REFCOUNTS
        if (cache_frame_ca1ea4c5a97b83bc8a29925e6ee54843 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_ca1ea4c5a97b83bc8a29925e6ee54843 = MAKE_FUNCTION_FRAME(codeobj_ca1ea4c5a97b83bc8a29925e6ee54843, module_numba$roc$hsadrv$drvapi, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_ca1ea4c5a97b83bc8a29925e6ee54843->m_type_description == NULL);
    frame_ca1ea4c5a97b83bc8a29925e6ee54843 = cache_frame_ca1ea4c5a97b83bc8a29925e6ee54843;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_ca1ea4c5a97b83bc8a29925e6ee54843);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_ca1ea4c5a97b83bc8a29925e6ee54843) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        tmp_called_instance_1 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[0]);

        if (unlikely(tmp_called_instance_1 == NULL)) {
            tmp_called_instance_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[0]);
        }

        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 379;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_ca1ea4c5a97b83bc8a29925e6ee54843->m_frame.f_lineno = 379;
        tmp_assign_source_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, mod_consts[1]);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 379;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(var_err_map == NULL);
        var_err_map = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_2;
        tmp_called_instance_2 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[0]);

        if (unlikely(tmp_called_instance_2 == NULL)) {
            tmp_called_instance_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[0]);
        }

        if (tmp_called_instance_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 380;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_ca1ea4c5a97b83bc8a29925e6ee54843->m_frame.f_lineno = 380;
        tmp_assign_source_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_2, mod_consts[1]);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 380;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(var_warn_map == NULL);
        var_warn_map = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_iter_arg_1;
        // Tried code:
        {
            PyObject *tmp_assign_source_4;
            PyObject *tmp_iter_arg_2;
            PyObject *tmp_dir_arg_1;
            tmp_dir_arg_1 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[2]);

            if (unlikely(tmp_dir_arg_1 == NULL)) {
                tmp_dir_arg_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[2]);
            }

            if (tmp_dir_arg_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 382;
                type_description_1 = "oooo";
                goto try_except_handler_2;
            }
            tmp_iter_arg_2 = PyObject_Dir(tmp_dir_arg_1);
            if (tmp_iter_arg_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 382;
                type_description_1 = "oooo";
                goto try_except_handler_2;
            }
            tmp_assign_source_4 = MAKE_ITERATOR(tmp_iter_arg_2);
            Py_DECREF(tmp_iter_arg_2);
            if (tmp_assign_source_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 382;
                type_description_1 = "oooo";
                goto try_except_handler_2;
            }
            assert(tmp_listcomp_1__$0 == NULL);
            tmp_listcomp_1__$0 = tmp_assign_source_4;
        }
        {
            PyObject *tmp_assign_source_5;
            tmp_assign_source_5 = PyList_New(0);
            assert(tmp_listcomp_1__contraction == NULL);
            tmp_listcomp_1__contraction = tmp_assign_source_5;
        }
        if (isFrameUnusable(cache_frame_cab721a8a857ec3773aa7f7de5c980d9_2)) {
            Py_XDECREF(cache_frame_cab721a8a857ec3773aa7f7de5c980d9_2);

#if _DEBUG_REFCOUNTS
            if (cache_frame_cab721a8a857ec3773aa7f7de5c980d9_2 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_cab721a8a857ec3773aa7f7de5c980d9_2 = MAKE_FUNCTION_FRAME(codeobj_cab721a8a857ec3773aa7f7de5c980d9, module_numba$roc$hsadrv$drvapi, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_cab721a8a857ec3773aa7f7de5c980d9_2->m_type_description == NULL);
        frame_cab721a8a857ec3773aa7f7de5c980d9_2 = cache_frame_cab721a8a857ec3773aa7f7de5c980d9_2;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_cab721a8a857ec3773aa7f7de5c980d9_2);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_cab721a8a857ec3773aa7f7de5c980d9_2) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_1:;
        {
            PyObject *tmp_next_source_1;
            PyObject *tmp_assign_source_6;
            CHECK_OBJECT(tmp_listcomp_1__$0);
            tmp_next_source_1 = tmp_listcomp_1__$0;
            tmp_assign_source_6 = ITERATOR_NEXT(tmp_next_source_1);
            if (tmp_assign_source_6 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_1;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "o";
                    exception_lineno = 382;
                    goto try_except_handler_3;
                }
            }

            {
                PyObject *old = tmp_listcomp_1__iter_value_0;
                tmp_listcomp_1__iter_value_0 = tmp_assign_source_6;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_7;
            CHECK_OBJECT(tmp_listcomp_1__iter_value_0);
            tmp_assign_source_7 = tmp_listcomp_1__iter_value_0;
            {
                PyObject *old = outline_0_var_name;
                outline_0_var_name = tmp_assign_source_7;
                Py_INCREF(outline_0_var_name);
                Py_XDECREF(old);
            }

        }
        {
            nuitka_bool tmp_condition_result_1;
            PyObject *tmp_called_value_1;
            PyObject *tmp_expression_value_1;
            PyObject *tmp_call_result_1;
            int tmp_truth_name_1;
            CHECK_OBJECT(outline_0_var_name);
            tmp_expression_value_1 = outline_0_var_name;
            tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[3]);
            if (tmp_called_value_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 382;
                type_description_2 = "o";
                goto try_except_handler_3;
            }
            frame_cab721a8a857ec3773aa7f7de5c980d9_2->m_frame.f_lineno = 382;
            tmp_call_result_1 = CALL_FUNCTION_WITH_POSARGS1(tmp_called_value_1, mod_consts[4]);

            Py_DECREF(tmp_called_value_1);
            if (tmp_call_result_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 382;
                type_description_2 = "o";
                goto try_except_handler_3;
            }
            tmp_truth_name_1 = CHECK_IF_TRUE(tmp_call_result_1);
            if (tmp_truth_name_1 == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_call_result_1);

                exception_lineno = 382;
                type_description_2 = "o";
                goto try_except_handler_3;
            }
            tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
            Py_DECREF(tmp_call_result_1);
            if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
                goto branch_yes_1;
            } else {
                goto branch_no_1;
            }
        }
        branch_yes_1:;
        {
            PyObject *tmp_append_list_1;
            PyObject *tmp_append_value_1;
            CHECK_OBJECT(tmp_listcomp_1__contraction);
            tmp_append_list_1 = tmp_listcomp_1__contraction;
            CHECK_OBJECT(outline_0_var_name);
            tmp_append_value_1 = outline_0_var_name;
            assert(PyList_Check(tmp_append_list_1));
            tmp_result = LIST_APPEND0(tmp_append_list_1, tmp_append_value_1);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 382;
                type_description_2 = "o";
                goto try_except_handler_3;
            }
        }
        branch_no_1:;
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 382;
            type_description_2 = "o";
            goto try_except_handler_3;
        }
        goto loop_start_1;
        loop_end_1:;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        tmp_iter_arg_1 = tmp_listcomp_1__contraction;
        Py_INCREF(tmp_iter_arg_1);
        goto try_return_handler_3;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_3:;
        CHECK_OBJECT(tmp_listcomp_1__$0);
        Py_DECREF(tmp_listcomp_1__$0);
        tmp_listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        Py_DECREF(tmp_listcomp_1__contraction);
        tmp_listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_listcomp_1__iter_value_0);
        tmp_listcomp_1__iter_value_0 = NULL;
        goto frame_return_exit_2;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_1__$0);
        Py_DECREF(tmp_listcomp_1__$0);
        tmp_listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        Py_DECREF(tmp_listcomp_1__contraction);
        tmp_listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_listcomp_1__iter_value_0);
        tmp_listcomp_1__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto frame_exception_exit_2;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_cab721a8a857ec3773aa7f7de5c980d9_2);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_1;

        frame_return_exit_2:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_cab721a8a857ec3773aa7f7de5c980d9_2);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_2;

        frame_exception_exit_2:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_cab721a8a857ec3773aa7f7de5c980d9_2);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_cab721a8a857ec3773aa7f7de5c980d9_2, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_cab721a8a857ec3773aa7f7de5c980d9_2->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_cab721a8a857ec3773aa7f7de5c980d9_2, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_cab721a8a857ec3773aa7f7de5c980d9_2,
            type_description_2,
            outline_0_var_name
        );


        // Release cached frame if used for exception.
        if (frame_cab721a8a857ec3773aa7f7de5c980d9_2 == cache_frame_cab721a8a857ec3773aa7f7de5c980d9_2) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_cab721a8a857ec3773aa7f7de5c980d9_2);
            cache_frame_cab721a8a857ec3773aa7f7de5c980d9_2 = NULL;
        }

        assertFrameObject(frame_cab721a8a857ec3773aa7f7de5c980d9_2);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_1;

        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_1:;
        type_description_1 = "oooo";
        goto try_except_handler_2;
        skip_nested_handling_1:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        Py_XDECREF(outline_0_var_name);
        outline_0_var_name = NULL;
        goto outline_result_1;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_0_var_name);
        outline_0_var_name = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto outline_exception_1;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_1:;
        exception_lineno = 382;
        goto frame_exception_exit_1;
        outline_result_1:;
        tmp_assign_source_3 = MAKE_ITERATOR(tmp_iter_arg_1);
        Py_DECREF(tmp_iter_arg_1);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 382;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_3;
    }
    // Tried code:
    loop_start_2:;
    {
        PyObject *tmp_next_source_2;
        PyObject *tmp_assign_source_8;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_2 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_8 = ITERATOR_NEXT(tmp_next_source_2);
        if (tmp_assign_source_8 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_2;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooo";
                exception_lineno = 382;
                goto try_except_handler_4;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_8;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_9;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_assign_source_9 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_name;
            var_name = tmp_assign_source_9;
            Py_INCREF(var_name);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_getattr_target_1;
        PyObject *tmp_getattr_attr_1;
        tmp_getattr_target_1 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[2]);

        if (unlikely(tmp_getattr_target_1 == NULL)) {
            tmp_getattr_target_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[2]);
        }

        if (tmp_getattr_target_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 383;
            type_description_1 = "oooo";
            goto try_except_handler_4;
        }
        CHECK_OBJECT(var_name);
        tmp_getattr_attr_1 = var_name;
        tmp_assign_source_10 = BUILTIN_GETATTR(tmp_getattr_target_1, tmp_getattr_attr_1, NULL);
        if (tmp_assign_source_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 383;
            type_description_1 = "oooo";
            goto try_except_handler_4;
        }
        {
            PyObject *old = var_code;
            var_code = tmp_assign_source_10;
            Py_XDECREF(old);
        }

    }
    {
        bool tmp_condition_result_2;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        tmp_cmp_expr_left_1 = mod_consts[5];
        CHECK_OBJECT(var_name);
        tmp_cmp_expr_right_1 = var_name;
        tmp_res = PySequence_Contains(tmp_cmp_expr_right_1, tmp_cmp_expr_left_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 384;
            type_description_1 = "oooo";
            goto try_except_handler_4;
        }
        tmp_condition_result_2 = (tmp_res == 1) ? true : false;
        if (tmp_condition_result_2 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_ass_subscript_1;
        CHECK_OBJECT(var_name);
        tmp_ass_subvalue_1 = var_name;
        if (var_err_map == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[6]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 385;
            type_description_1 = "oooo";
            goto try_except_handler_4;
        }

        tmp_ass_subscribed_1 = var_err_map;
        CHECK_OBJECT(var_code);
        tmp_ass_subscript_1 = var_code;
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 385;
            type_description_1 = "oooo";
            goto try_except_handler_4;
        }
    }
    goto branch_end_2;
    branch_no_2:;
    {
        bool tmp_condition_result_3;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        tmp_cmp_expr_left_2 = mod_consts[7];
        CHECK_OBJECT(var_name);
        tmp_cmp_expr_right_2 = var_name;
        tmp_res = PySequence_Contains(tmp_cmp_expr_right_2, tmp_cmp_expr_left_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 386;
            type_description_1 = "oooo";
            goto try_except_handler_4;
        }
        tmp_condition_result_3 = (tmp_res == 1) ? true : false;
        if (tmp_condition_result_3 != false) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_ass_subvalue_2;
        PyObject *tmp_ass_subscribed_2;
        PyObject *tmp_ass_subscript_2;
        CHECK_OBJECT(var_name);
        tmp_ass_subvalue_2 = var_name;
        if (var_warn_map == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[8]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 387;
            type_description_1 = "oooo";
            goto try_except_handler_4;
        }

        tmp_ass_subscribed_2 = var_warn_map;
        CHECK_OBJECT(var_code);
        tmp_ass_subscript_2 = var_code;
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 387;
            type_description_1 = "oooo";
            goto try_except_handler_4;
        }
    }
    branch_no_3:;
    branch_end_2:;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 382;
        type_description_1 = "oooo";
        goto try_except_handler_4;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    {
        PyObject *tmp_tuple_element_1;
        if (var_err_map == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[6]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 390;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = var_err_map;
        tmp_return_value = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_return_value, 0, tmp_tuple_element_1);
        if (var_warn_map == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[8]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 390;
            type_description_1 = "oooo";
            goto tuple_build_exception_1;
        }

        tmp_tuple_element_1 = var_warn_map;
        PyTuple_SET_ITEM0(tmp_return_value, 1, tmp_tuple_element_1);
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_return_value);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ca1ea4c5a97b83bc8a29925e6ee54843);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_2;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_ca1ea4c5a97b83bc8a29925e6ee54843);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ca1ea4c5a97b83bc8a29925e6ee54843);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_ca1ea4c5a97b83bc8a29925e6ee54843, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_ca1ea4c5a97b83bc8a29925e6ee54843->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_ca1ea4c5a97b83bc8a29925e6ee54843, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_ca1ea4c5a97b83bc8a29925e6ee54843,
        type_description_1,
        var_err_map,
        var_warn_map,
        var_name,
        var_code
    );


    // Release cached frame if used for exception.
    if (frame_ca1ea4c5a97b83bc8a29925e6ee54843 == cache_frame_ca1ea4c5a97b83bc8a29925e6ee54843) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_ca1ea4c5a97b83bc8a29925e6ee54843);
        cache_frame_ca1ea4c5a97b83bc8a29925e6ee54843 = NULL;
    }

    assertFrameObject(frame_ca1ea4c5a97b83bc8a29925e6ee54843);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_2:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_err_map);
    var_err_map = NULL;
    Py_XDECREF(var_warn_map);
    var_warn_map = NULL;
    Py_XDECREF(var_name);
    var_name = NULL;
    Py_XDECREF(var_code);
    var_code = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_err_map);
    var_err_map = NULL;
    Py_XDECREF(var_warn_map);
    var_warn_map = NULL;
    Py_XDECREF(var_name);
    var_name = NULL;
    Py_XDECREF(var_code);
    var_code = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_numba$roc$hsadrv$drvapi$$$function__2__check_error(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_result = python_pars[0];
    PyObject *par_func = python_pars[1];
    PyObject *par_arguments = python_pars[2];
    PyObject *var_errname = NULL;
    PyObject *var_msg = NULL;
    PyObject *var_warnname = NULL;
    struct Nuitka_FrameObject *frame_26aa06568d90b6773700b3e42758eca6;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_26aa06568d90b6773700b3e42758eca6 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_26aa06568d90b6773700b3e42758eca6)) {
        Py_XDECREF(cache_frame_26aa06568d90b6773700b3e42758eca6);

#if _DEBUG_REFCOUNTS
        if (cache_frame_26aa06568d90b6773700b3e42758eca6 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_26aa06568d90b6773700b3e42758eca6 = MAKE_FUNCTION_FRAME(codeobj_26aa06568d90b6773700b3e42758eca6, module_numba$roc$hsadrv$drvapi, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_26aa06568d90b6773700b3e42758eca6->m_type_description == NULL);
    frame_26aa06568d90b6773700b3e42758eca6 = cache_frame_26aa06568d90b6773700b3e42758eca6;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_26aa06568d90b6773700b3e42758eca6);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_26aa06568d90b6773700b3e42758eca6) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_result);
        tmp_cmp_expr_left_1 = par_result;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[2]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[2]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 396;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[9]);
        if (tmp_cmp_expr_right_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 396;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = RICH_COMPARE_NE_NBOOL_OBJECT_OBJECT(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
        Py_DECREF(tmp_cmp_expr_right_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 396;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        assert(tmp_condition_result_1 != NUITKA_BOOL_UNASSIGNED);
    }
    branch_yes_1:;
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(par_result);
        tmp_cmp_expr_left_2 = par_result;
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[2]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[2]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 397;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[10]);
        if (tmp_cmp_expr_right_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 397;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = RICH_COMPARE_GE_NBOOL_OBJECT_OBJECT(tmp_cmp_expr_left_2, tmp_cmp_expr_right_2);
        Py_DECREF(tmp_cmp_expr_right_2);
        if (tmp_condition_result_2 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 397;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
        assert(tmp_condition_result_2 != NUITKA_BOOL_UNASSIGNED);
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[11]);

        if (unlikely(tmp_expression_value_3 == NULL)) {
            tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[11]);
        }

        if (tmp_expression_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 398;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[12]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 398;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_result);
        tmp_args_element_value_1 = par_result;
        tmp_args_element_value_2 = mod_consts[13];
        frame_26aa06568d90b6773700b3e42758eca6->m_frame.f_lineno = 398;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 398;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(var_errname == NULL);
        var_errname = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_kw_call_arg_value_1_1;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_kw_call_arg_value_2_1;
        tmp_kw_call_arg_value_0_1 = mod_consts[14];
        CHECK_OBJECT(par_func);
        tmp_expression_value_4 = par_func;
        tmp_kw_call_arg_value_1_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[15]);
        if (tmp_kw_call_arg_value_1_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 399;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_errname);
        tmp_kw_call_arg_value_2_1 = var_errname;
        frame_26aa06568d90b6773700b3e42758eca6->m_frame.f_lineno = 399;
        {
            PyObject *call_args[] = {tmp_kw_call_arg_value_0_1, tmp_kw_call_arg_value_1_1, tmp_kw_call_arg_value_2_1};
            tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS3(unicode_builtin_format, call_args);
        }

        Py_DECREF(tmp_kw_call_arg_value_1_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 399;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(var_msg == NULL);
        var_msg = tmp_assign_source_2;
    }
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[16]);

        if (unlikely(tmp_called_value_2 == NULL)) {
            tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[16]);
        }

        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 400;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_result);
        tmp_args_element_value_3 = par_result;
        CHECK_OBJECT(var_msg);
        tmp_args_element_value_4 = var_msg;
        frame_26aa06568d90b6773700b3e42758eca6->m_frame.f_lineno = 400;
        {
            PyObject *call_args[] = {tmp_args_element_value_3, tmp_args_element_value_4};
            tmp_raise_type_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_2, call_args);
        }

        if (tmp_raise_type_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 400;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        exception_type = tmp_raise_type_1;
        exception_lineno = 400;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_value_3;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_args_element_value_6;
        tmp_expression_value_5 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[17]);

        if (unlikely(tmp_expression_value_5 == NULL)) {
            tmp_expression_value_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[17]);
        }

        if (tmp_expression_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 402;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[12]);
        if (tmp_called_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 402;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_result);
        tmp_args_element_value_5 = par_result;
        tmp_args_element_value_6 = mod_consts[18];
        frame_26aa06568d90b6773700b3e42758eca6->m_frame.f_lineno = 402;
        {
            PyObject *call_args[] = {tmp_args_element_value_5, tmp_args_element_value_6};
            tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_3, call_args);
        }

        Py_DECREF(tmp_called_value_3);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 402;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(var_warnname == NULL);
        var_warnname = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_kw_call_arg_value_0_2;
        PyObject *tmp_kw_call_arg_value_1_2;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_kw_call_arg_value_2_2;
        tmp_kw_call_arg_value_0_2 = mod_consts[14];
        CHECK_OBJECT(par_func);
        tmp_expression_value_6 = par_func;
        tmp_kw_call_arg_value_1_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[15]);
        if (tmp_kw_call_arg_value_1_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 403;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_warnname);
        tmp_kw_call_arg_value_2_2 = var_warnname;
        frame_26aa06568d90b6773700b3e42758eca6->m_frame.f_lineno = 403;
        {
            PyObject *call_args[] = {tmp_kw_call_arg_value_0_2, tmp_kw_call_arg_value_1_2, tmp_kw_call_arg_value_2_2};
            tmp_assign_source_4 = CALL_FUNCTION_WITH_ARGS3(unicode_builtin_format, call_args);
        }

        Py_DECREF(tmp_kw_call_arg_value_1_2);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 403;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(var_msg == NULL);
        var_msg = tmp_assign_source_4;
    }
    {
        PyObject *tmp_called_value_4;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_7;
        PyObject *tmp_args_element_value_8;
        tmp_expression_value_7 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[19]);

        if (unlikely(tmp_expression_value_7 == NULL)) {
            tmp_expression_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[19]);
        }

        if (tmp_expression_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_7, mod_consts[20]);
        if (tmp_called_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_msg);
        tmp_args_element_value_7 = var_msg;
        tmp_args_element_value_8 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_args_element_value_8 == NULL)) {
            tmp_args_element_value_8 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_args_element_value_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_4);

            exception_lineno = 404;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        frame_26aa06568d90b6773700b3e42758eca6->m_frame.f_lineno = 404;
        {
            PyObject *call_args[] = {tmp_args_element_value_7, tmp_args_element_value_8};
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_4, call_args);
        }

        Py_DECREF(tmp_called_value_4);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 404;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    branch_end_2:;
    branch_no_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_26aa06568d90b6773700b3e42758eca6);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_26aa06568d90b6773700b3e42758eca6);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_26aa06568d90b6773700b3e42758eca6, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_26aa06568d90b6773700b3e42758eca6->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_26aa06568d90b6773700b3e42758eca6, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_26aa06568d90b6773700b3e42758eca6,
        type_description_1,
        par_result,
        par_func,
        par_arguments,
        var_errname,
        var_msg,
        var_warnname
    );


    // Release cached frame if used for exception.
    if (frame_26aa06568d90b6773700b3e42758eca6 == cache_frame_26aa06568d90b6773700b3e42758eca6) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_26aa06568d90b6773700b3e42758eca6);
        cache_frame_26aa06568d90b6773700b3e42758eca6 = NULL;
    }

    assertFrameObject(frame_26aa06568d90b6773700b3e42758eca6);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_msg);
    var_msg = NULL;
    Py_XDECREF(var_warnname);
    var_warnname = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_errname);
    var_errname = NULL;
    Py_XDECREF(var_msg);
    var_msg = NULL;
    Py_XDECREF(var_warnname);
    var_warnname = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_result);
    Py_DECREF(par_result);
    CHECK_OBJECT(par_func);
    Py_DECREF(par_func);
    CHECK_OBJECT(par_arguments);
    Py_DECREF(par_arguments);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_result);
    Py_DECREF(par_result);
    CHECK_OBJECT(par_func);
    Py_DECREF(par_func);
    CHECK_OBJECT(par_arguments);
    Py_DECREF(par_arguments);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



static PyObject *MAKE_FUNCTION_numba$roc$hsadrv$drvapi$$$function__1__build_reverse_error_warn_maps() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$roc$hsadrv$drvapi$$$function__1__build_reverse_error_warn_maps,
        mod_consts[249],
#if PYTHON_VERSION >= 0x300
        NULL,
#endif
        codeobj_ca1ea4c5a97b83bc8a29925e6ee54843,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$roc$hsadrv$drvapi,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_numba$roc$hsadrv$drvapi$$$function__2__check_error() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_numba$roc$hsadrv$drvapi$$$function__2__check_error,
        mod_consts[251],
#if PYTHON_VERSION >= 0x300
        NULL,
#endif
        codeobj_26aa06568d90b6773700b3e42758eca6,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_numba$roc$hsadrv$drvapi,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}


extern void _initCompiledCellType();
extern void _initCompiledGeneratorType();
extern void _initCompiledFunctionType();
extern void _initCompiledMethodType();
extern void _initCompiledFrameType();

extern PyTypeObject Nuitka_Loader_Type;

#ifdef _NUITKA_PLUGIN_DILL_ENABLED
// Provide a way to create find a function via its C code and create it back
// in another process, useful for multiprocessing extensions like dill
extern void registerDillPluginTables(char const *module_name, PyMethodDef *reduce_compiled_function, PyMethodDef *create_compiled_function);

function_impl_code functable_numba$roc$hsadrv$drvapi[] = {
    impl_numba$roc$hsadrv$drvapi$$$function__1__build_reverse_error_warn_maps,
    impl_numba$roc$hsadrv$drvapi$$$function__2__check_error,
    NULL
};

static char const *_reduce_compiled_function_argnames[] = {
    "func",
    NULL
};

static PyObject *_reduce_compiled_function(PyObject *self, PyObject *args, PyObject *kwds) {
    PyObject *func;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "O:reduce_compiled_function", (char **)_reduce_compiled_function_argnames, &func, NULL)) {
        return NULL;
    }

    if (Nuitka_Function_Check(func) == false) {
        SET_CURRENT_EXCEPTION_TYPE0_STR(PyExc_TypeError, "not a compiled function");
        return NULL;
    }

    struct Nuitka_FunctionObject *function = (struct Nuitka_FunctionObject *)func;

    function_impl_code *current = functable_numba$roc$hsadrv$drvapi;
    int offset = 0;

    while (*current != NULL) {
        if (*current == function->m_c_code) {
            break;
        }

        current += 1;
        offset += 1;
    }

    if (*current == NULL) {
        SET_CURRENT_EXCEPTION_TYPE0_STR(PyExc_TypeError, "Cannot find compiled function in module.");
        return NULL;
    }

    PyObject *code_object_desc = PyTuple_New(6);
    PyTuple_SET_ITEM0(code_object_desc, 0, function->m_code_object->co_filename);
    PyTuple_SET_ITEM0(code_object_desc, 1, function->m_code_object->co_name);
    PyTuple_SET_ITEM(code_object_desc, 2, PyLong_FromLong(function->m_code_object->co_firstlineno));
    PyTuple_SET_ITEM0(code_object_desc, 3, function->m_code_object->co_varnames);
    PyTuple_SET_ITEM(code_object_desc, 4, PyLong_FromLong(function->m_code_object->co_argcount));
    PyTuple_SET_ITEM(code_object_desc, 5, PyLong_FromLong(function->m_code_object->co_flags));

    CHECK_OBJECT_DEEP(code_object_desc);

    PyObject *result = PyTuple_New(4);
    PyTuple_SET_ITEM(result, 0, PyLong_FromLong(offset));
    PyTuple_SET_ITEM(result, 1, code_object_desc);
    PyTuple_SET_ITEM0(result, 2, function->m_defaults);
    PyTuple_SET_ITEM0(result, 3, function->m_doc != NULL ? function->m_doc : Py_None);

    CHECK_OBJECT_DEEP(result);

    return result;
}

static PyMethodDef _method_def_reduce_compiled_function = {"reduce_compiled_function", (PyCFunction)_reduce_compiled_function,
                                                           METH_VARARGS | METH_KEYWORDS, NULL};

static char const *_create_compiled_function_argnames[] = {
    "func",
    "code_object_desc",
    "defaults",
    "doc",
    NULL
};


static PyObject *_create_compiled_function(PyObject *self, PyObject *args, PyObject *kwds) {
    CHECK_OBJECT_DEEP(args);

    PyObject *func;
    PyObject *code_object_desc;
    PyObject *defaults;
    PyObject *doc;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "OOOO:create_compiled_function", (char **)_create_compiled_function_argnames, &func, &code_object_desc, &defaults, &doc, NULL)) {
        return NULL;
    }

    int offset = PyLong_AsLong(func);

    if (offset == -1 && ERROR_OCCURRED()) {
        return NULL;
    }

    if (offset > sizeof(functable_numba$roc$hsadrv$drvapi) || offset < 0) {
        SET_CURRENT_EXCEPTION_TYPE0_STR(PyExc_TypeError, "Wrong offset for compiled function.");
        return NULL;
    }

    PyObject *filename = PyTuple_GET_ITEM(code_object_desc, 0);
    PyObject *function_name = PyTuple_GET_ITEM(code_object_desc, 1);
    PyObject *line = PyTuple_GET_ITEM(code_object_desc, 2);
    int line_int = PyLong_AsLong(line);
    assert(!ERROR_OCCURRED());

    PyObject *argnames = PyTuple_GET_ITEM(code_object_desc, 3);
    PyObject *arg_count = PyTuple_GET_ITEM(code_object_desc, 4);
    int arg_count_int = PyLong_AsLong(arg_count);
    assert(!ERROR_OCCURRED());
    PyObject *flags = PyTuple_GET_ITEM(code_object_desc, 5);
    int flags_int = PyLong_AsLong(flags);
    assert(!ERROR_OCCURRED());

    PyCodeObject *code_object = MAKE_CODEOBJECT(
        filename,
        line_int,
        flags_int,
        function_name,
        argnames,
        NULL, // freevars
        arg_count_int,
        0, // TODO: Missing kw_only_count
        0 // TODO: Missing pos_only_count
    );

    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        functable_numba$roc$hsadrv$drvapi[offset],
        code_object->co_name,
#if PYTHON_VERSION >= 0x300
        NULL, // TODO: Not transferring qualname yet
#endif
        code_object,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL, // kwdefaults are done on the outside currently
        NULL, // TODO: Not transferring annotations
#endif
        module_numba$roc$hsadrv$drvapi,
        doc,
        NULL,
        0
    );

    return (PyObject *)result;
}

static PyMethodDef _method_def_create_compiled_function = {
    "create_compiled_function",
    (PyCFunction)_create_compiled_function,
    METH_VARARGS | METH_KEYWORDS, NULL
};


#endif

// Internal entry point for module code.
PyObject *modulecode_numba$roc$hsadrv$drvapi(PyObject *module, struct Nuitka_MetaPathBasedLoaderEntry const *loader_entry) {
    // Report entry to PGO.
    PGO_onModuleEntered("numba.roc.hsadrv.drvapi");

    // Store the module for future use.
    module_numba$roc$hsadrv$drvapi = module;

    // Modules can be loaded again in case of errors, avoid the init being done again.
    static bool init_done = false;

    if (init_done == false) {
#if defined(_NUITKA_MODULE) && 0
        // In case of an extension module loaded into a process, we need to call
        // initialization here because that's the first and potentially only time
        // we are going called.

        // Initialize the constant values used.
        _initBuiltinModule();
        createGlobalConstants();

        /* Initialize the compiled types of Nuitka. */
        _initCompiledCellType();
        _initCompiledGeneratorType();
        _initCompiledFunctionType();
        _initCompiledMethodType();
        _initCompiledFrameType();

        _initSlotCompare();
#if PYTHON_VERSION >= 0x270
        _initSlotIterNext();
#endif

        patchTypeComparison();

        // Enable meta path based loader if not already done.
#ifdef _NUITKA_TRACE
        PRINT_STRING("numba.roc.hsadrv.drvapi: Calling setupMetaPathBasedLoader().\n");
#endif
        setupMetaPathBasedLoader();

#if PYTHON_VERSION >= 0x300
        patchInspectModule();
#endif

#endif

        /* The constants only used by this module are created now. */
#ifdef _NUITKA_TRACE
        PRINT_STRING("numba.roc.hsadrv.drvapi: Calling createModuleConstants().\n");
#endif
        createModuleConstants();

        /* The code objects used by this module are created now. */
#ifdef _NUITKA_TRACE
        PRINT_STRING("numba.roc.hsadrv.drvapi: Calling createModuleCodeObjects().\n");
#endif
        createModuleCodeObjects();

        init_done = true;
    }

    // PRINT_STRING("in initnumba$roc$hsadrv$drvapi\n");

    moduledict_numba$roc$hsadrv$drvapi = MODULE_DICT(module_numba$roc$hsadrv$drvapi);

#ifdef _NUITKA_PLUGIN_DILL_ENABLED
    registerDillPluginTables(loader_entry->name, &_method_def_reduce_compiled_function, &_method_def_create_compiled_function);
#endif

    // Set "__compiled__" to what version information we have.
    UPDATE_STRING_DICT0(
        moduledict_numba$roc$hsadrv$drvapi,
        (Nuitka_StringObject *)const_str_plain___compiled__,
        Nuitka_dunder_compiled_value
    );

    // Update "__package__" value to what it ought to be.
    {
#if 0
        UPDATE_STRING_DICT0(
            moduledict_numba$roc$hsadrv$drvapi,
            (Nuitka_StringObject *)const_str_plain___package__,
            mod_consts[381]
        );
#elif 0
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)const_str_plain___name__);

        UPDATE_STRING_DICT0(
            moduledict_numba$roc$hsadrv$drvapi,
            (Nuitka_StringObject *)const_str_plain___package__,
            module_name
        );
#else

#if PYTHON_VERSION < 0x300
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)const_str_plain___name__);
        char const *module_name_cstr = PyString_AS_STRING(module_name);

        char const *last_dot = strrchr(module_name_cstr, '.');

        if (last_dot != NULL) {
            UPDATE_STRING_DICT1(
                moduledict_numba$roc$hsadrv$drvapi,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyString_FromStringAndSize(module_name_cstr, last_dot - module_name_cstr)
            );
        }
#else
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)const_str_plain___name__);
        Py_ssize_t dot_index = PyUnicode_Find(module_name, const_str_dot, 0, PyUnicode_GetLength(module_name), -1);

        if (dot_index != -1) {
            UPDATE_STRING_DICT1(
                moduledict_numba$roc$hsadrv$drvapi,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyUnicode_Substring(module_name, 0, dot_index)
            );
        }
#endif
#endif
    }

    CHECK_OBJECT(module_numba$roc$hsadrv$drvapi);

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    if (GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)const_str_plain___builtins__) == NULL) {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then but the module itself.
#if defined(_NUITKA_MODULE) || !0
        value = PyModule_GetDict(value);
#endif

        UPDATE_STRING_DICT0(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)const_str_plain___builtins__, value);
    }

#if PYTHON_VERSION >= 0x300
    UPDATE_STRING_DICT0(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)const_str_plain___loader__, (PyObject *)&Nuitka_Loader_Type);
#endif

#if PYTHON_VERSION >= 0x340
// Set the "__spec__" value

#if 0
    // Main modules just get "None" as spec.
    UPDATE_STRING_DICT0(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)const_str_plain___spec__, Py_None);
#else
    // Other modules get a "ModuleSpec" from the standard mechanism.
    {
        PyObject *bootstrap_module = getImportLibBootstrapModule();
        CHECK_OBJECT(bootstrap_module);

        PyObject *_spec_from_module = PyObject_GetAttrString(bootstrap_module, "_spec_from_module");
        CHECK_OBJECT(_spec_from_module);

        PyObject *spec_value = CALL_FUNCTION_WITH_SINGLE_ARG(_spec_from_module, module_numba$roc$hsadrv$drvapi);
        Py_DECREF(_spec_from_module);

        // We can assume this to never fail, or else we are in trouble anyway.
        // CHECK_OBJECT(spec_value);

        if (spec_value == NULL) {
            PyErr_PrintEx(0);
            abort();
        }

// Mark the execution in the "__spec__" value.
        SET_ATTRIBUTE(spec_value, const_str_plain__initializing, Py_True);

        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)const_str_plain___spec__, spec_value);
    }
#endif
#endif

    // Temp variables if any
    PyObject *outline_0_var___class__ = NULL;
    PyObject *outline_1_var___class__ = NULL;
    PyObject *outline_2_var___class__ = NULL;
    PyObject *outline_3_var___class__ = NULL;
    PyObject *outline_4_var___class__ = NULL;
    PyObject *outline_5_var___class__ = NULL;
    PyObject *outline_6_var___class__ = NULL;
    PyObject *outline_7_var___class__ = NULL;
    PyObject *outline_8_var___class__ = NULL;
    PyObject *outline_9_var___class__ = NULL;
    PyObject *outline_10_var___class__ = NULL;
    PyObject *outline_11_var___class__ = NULL;
    PyObject *outline_12_var___class__ = NULL;
    PyObject *outline_13_var___class__ = NULL;
    PyObject *outline_14_var___class__ = NULL;
    PyObject *tmp_class_creation_10__bases = NULL;
    PyObject *tmp_class_creation_10__bases_orig = NULL;
    PyObject *tmp_class_creation_10__class_decl_dict = NULL;
    PyObject *tmp_class_creation_10__metaclass = NULL;
    PyObject *tmp_class_creation_10__prepared = NULL;
    PyObject *tmp_class_creation_11__bases = NULL;
    PyObject *tmp_class_creation_11__bases_orig = NULL;
    PyObject *tmp_class_creation_11__class_decl_dict = NULL;
    PyObject *tmp_class_creation_11__metaclass = NULL;
    PyObject *tmp_class_creation_11__prepared = NULL;
    PyObject *tmp_class_creation_12__bases = NULL;
    PyObject *tmp_class_creation_12__bases_orig = NULL;
    PyObject *tmp_class_creation_12__class_decl_dict = NULL;
    PyObject *tmp_class_creation_12__metaclass = NULL;
    PyObject *tmp_class_creation_12__prepared = NULL;
    PyObject *tmp_class_creation_13__bases = NULL;
    PyObject *tmp_class_creation_13__bases_orig = NULL;
    PyObject *tmp_class_creation_13__class_decl_dict = NULL;
    PyObject *tmp_class_creation_13__metaclass = NULL;
    PyObject *tmp_class_creation_13__prepared = NULL;
    PyObject *tmp_class_creation_14__bases = NULL;
    PyObject *tmp_class_creation_14__bases_orig = NULL;
    PyObject *tmp_class_creation_14__class_decl_dict = NULL;
    PyObject *tmp_class_creation_14__metaclass = NULL;
    PyObject *tmp_class_creation_14__prepared = NULL;
    PyObject *tmp_class_creation_15__bases = NULL;
    PyObject *tmp_class_creation_15__bases_orig = NULL;
    PyObject *tmp_class_creation_15__class_decl_dict = NULL;
    PyObject *tmp_class_creation_15__metaclass = NULL;
    PyObject *tmp_class_creation_15__prepared = NULL;
    PyObject *tmp_class_creation_1__bases = NULL;
    PyObject *tmp_class_creation_1__bases_orig = NULL;
    PyObject *tmp_class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_class_creation_1__metaclass = NULL;
    PyObject *tmp_class_creation_1__prepared = NULL;
    PyObject *tmp_class_creation_2__bases = NULL;
    PyObject *tmp_class_creation_2__bases_orig = NULL;
    PyObject *tmp_class_creation_2__class_decl_dict = NULL;
    PyObject *tmp_class_creation_2__metaclass = NULL;
    PyObject *tmp_class_creation_2__prepared = NULL;
    PyObject *tmp_class_creation_3__bases = NULL;
    PyObject *tmp_class_creation_3__bases_orig = NULL;
    PyObject *tmp_class_creation_3__class_decl_dict = NULL;
    PyObject *tmp_class_creation_3__metaclass = NULL;
    PyObject *tmp_class_creation_3__prepared = NULL;
    PyObject *tmp_class_creation_4__bases = NULL;
    PyObject *tmp_class_creation_4__bases_orig = NULL;
    PyObject *tmp_class_creation_4__class_decl_dict = NULL;
    PyObject *tmp_class_creation_4__metaclass = NULL;
    PyObject *tmp_class_creation_4__prepared = NULL;
    PyObject *tmp_class_creation_5__bases = NULL;
    PyObject *tmp_class_creation_5__bases_orig = NULL;
    PyObject *tmp_class_creation_5__class_decl_dict = NULL;
    PyObject *tmp_class_creation_5__metaclass = NULL;
    PyObject *tmp_class_creation_5__prepared = NULL;
    PyObject *tmp_class_creation_6__bases = NULL;
    PyObject *tmp_class_creation_6__bases_orig = NULL;
    PyObject *tmp_class_creation_6__class_decl_dict = NULL;
    PyObject *tmp_class_creation_6__metaclass = NULL;
    PyObject *tmp_class_creation_6__prepared = NULL;
    PyObject *tmp_class_creation_7__bases = NULL;
    PyObject *tmp_class_creation_7__bases_orig = NULL;
    PyObject *tmp_class_creation_7__class_decl_dict = NULL;
    PyObject *tmp_class_creation_7__metaclass = NULL;
    PyObject *tmp_class_creation_7__prepared = NULL;
    PyObject *tmp_class_creation_8__bases = NULL;
    PyObject *tmp_class_creation_8__bases_orig = NULL;
    PyObject *tmp_class_creation_8__class_decl_dict = NULL;
    PyObject *tmp_class_creation_8__metaclass = NULL;
    PyObject *tmp_class_creation_8__prepared = NULL;
    PyObject *tmp_class_creation_9__bases = NULL;
    PyObject *tmp_class_creation_9__bases_orig = NULL;
    PyObject *tmp_class_creation_9__class_decl_dict = NULL;
    PyObject *tmp_class_creation_9__metaclass = NULL;
    PyObject *tmp_class_creation_9__prepared = NULL;
    PyObject *tmp_import_from_1__module = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_277c99bb5820295c4a793963c6d9675f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    int tmp_res;
    PyObject *tmp_dictdel_dict;
    PyObject *tmp_dictdel_key;
    PyObject *locals_numba$roc$hsadrv$drvapi$$$class__1_hsa_dim3_t_19 = NULL;
    PyObject *tmp_dictset_value;
    struct Nuitka_FrameObject *frame_d167d81cc15b833c76f7772221f1c650_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    static struct Nuitka_FrameObject *cache_frame_d167d81cc15b833c76f7772221f1c650_2 = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *locals_numba$roc$hsadrv$drvapi$$$class__2_hsa_queue_t_44 = NULL;
    struct Nuitka_FrameObject *frame_a441998b0ea2dc83684515950f20f5ec_3;
    NUITKA_MAY_BE_UNUSED char const *type_description_3 = NULL;
    static struct Nuitka_FrameObject *cache_frame_a441998b0ea2dc83684515950f20f5ec_3 = NULL;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *locals_numba$roc$hsadrv$drvapi$$$class__3_hsa_kernel_dispatch_packet_t_62 = NULL;
    struct Nuitka_FrameObject *frame_a691ad939bd4c09d7c61a188cb9026c5_4;
    NUITKA_MAY_BE_UNUSED char const *type_description_4 = NULL;
    static struct Nuitka_FrameObject *cache_frame_a691ad939bd4c09d7c61a188cb9026c5_4 = NULL;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *locals_numba$roc$hsadrv$drvapi$$$class__4_hsa_agent_dispatch_packet_t_83 = NULL;
    struct Nuitka_FrameObject *frame_4189e9452107b225be7a7cd4ff8ba23a_5;
    NUITKA_MAY_BE_UNUSED char const *type_description_5 = NULL;
    static struct Nuitka_FrameObject *cache_frame_4189e9452107b225be7a7cd4ff8ba23a_5 = NULL;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    PyObject *locals_numba$roc$hsadrv$drvapi$$$class__5_hsa_barrier_and_packet_t_95 = NULL;
    struct Nuitka_FrameObject *frame_8f1038c8de2eafcc8378d2a867a429a5_6;
    NUITKA_MAY_BE_UNUSED char const *type_description_6 = NULL;
    static struct Nuitka_FrameObject *cache_frame_8f1038c8de2eafcc8378d2a867a429a5_6 = NULL;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_16;
    PyObject *locals_numba$roc$hsadrv$drvapi$$$class__6_BrigModuleHeader_139 = NULL;
    struct Nuitka_FrameObject *frame_a5bf7593a9cd0e0ec263ccaa03091d5f_7;
    NUITKA_MAY_BE_UNUSED char const *type_description_7 = NULL;
    static struct Nuitka_FrameObject *cache_frame_a5bf7593a9cd0e0ec263ccaa03091d5f_7 = NULL;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_17;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_18;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_19;
    PyObject *locals_numba$roc$hsadrv$drvapi$$$class__7_hsa_amd_profiling_dispatch_time_t_161 = NULL;
    struct Nuitka_FrameObject *frame_4308947db4300a5ec14040e5f466a735_8;
    NUITKA_MAY_BE_UNUSED char const *type_description_8 = NULL;
    static struct Nuitka_FrameObject *cache_frame_4308947db4300a5ec14040e5f466a735_8 = NULL;
    PyObject *exception_keeper_type_20;
    PyObject *exception_keeper_value_20;
    PyTracebackObject *exception_keeper_tb_20;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_20;
    PyObject *exception_keeper_type_21;
    PyObject *exception_keeper_value_21;
    PyTracebackObject *exception_keeper_tb_21;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_21;
    PyObject *exception_keeper_type_22;
    PyObject *exception_keeper_value_22;
    PyTracebackObject *exception_keeper_tb_22;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_22;
    PyObject *locals_numba$roc$hsadrv$drvapi$$$class__8_hsa_amd_image_descriptor_t_182 = NULL;
    struct Nuitka_FrameObject *frame_2d7080f784f56c1d1310fc32beecb145_9;
    NUITKA_MAY_BE_UNUSED char const *type_description_9 = NULL;
    static struct Nuitka_FrameObject *cache_frame_2d7080f784f56c1d1310fc32beecb145_9 = NULL;
    PyObject *exception_keeper_type_23;
    PyObject *exception_keeper_value_23;
    PyTracebackObject *exception_keeper_tb_23;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_23;
    PyObject *exception_keeper_type_24;
    PyObject *exception_keeper_value_24;
    PyTracebackObject *exception_keeper_tb_24;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_24;
    PyObject *exception_keeper_type_25;
    PyObject *exception_keeper_value_25;
    PyTracebackObject *exception_keeper_tb_25;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_25;
    PyObject *locals_numba$roc$hsadrv$drvapi$$$class__9_hsa_ext_control_directives_t_198 = NULL;
    struct Nuitka_FrameObject *frame_683cd77f6d77439eb8619ecb5cd128ce_10;
    NUITKA_MAY_BE_UNUSED char const *type_description_10 = NULL;
    static struct Nuitka_FrameObject *cache_frame_683cd77f6d77439eb8619ecb5cd128ce_10 = NULL;
    PyObject *exception_keeper_type_26;
    PyObject *exception_keeper_value_26;
    PyTracebackObject *exception_keeper_tb_26;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_26;
    PyObject *exception_keeper_type_27;
    PyObject *exception_keeper_value_27;
    PyTracebackObject *exception_keeper_tb_27;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_27;
    PyObject *exception_keeper_type_28;
    PyObject *exception_keeper_value_28;
    PyTracebackObject *exception_keeper_tb_28;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_28;
    PyObject *locals_numba$roc$hsadrv$drvapi$$$class__10_hsa_ext_finalizer_1_00_pfn_t_261 = NULL;
    struct Nuitka_FrameObject *frame_bc9f612c35d7f980bec2555e74a060ce_11;
    NUITKA_MAY_BE_UNUSED char const *type_description_11 = NULL;
    static struct Nuitka_FrameObject *cache_frame_bc9f612c35d7f980bec2555e74a060ce_11 = NULL;
    PyObject *exception_keeper_type_29;
    PyObject *exception_keeper_value_29;
    PyTracebackObject *exception_keeper_tb_29;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_29;
    PyObject *exception_keeper_type_30;
    PyObject *exception_keeper_value_30;
    PyTracebackObject *exception_keeper_tb_30;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_30;
    PyObject *exception_keeper_type_31;
    PyObject *exception_keeper_value_31;
    PyTracebackObject *exception_keeper_tb_31;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_31;
    PyObject *locals_numba$roc$hsadrv$drvapi$$$class__11_hsa_ext_image_format_t_284 = NULL;
    struct Nuitka_FrameObject *frame_bb8128588c1f0f62d387274ecc3aca59_12;
    NUITKA_MAY_BE_UNUSED char const *type_description_12 = NULL;
    static struct Nuitka_FrameObject *cache_frame_bb8128588c1f0f62d387274ecc3aca59_12 = NULL;
    PyObject *exception_keeper_type_32;
    PyObject *exception_keeper_value_32;
    PyTracebackObject *exception_keeper_tb_32;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_32;
    PyObject *exception_keeper_type_33;
    PyObject *exception_keeper_value_33;
    PyTracebackObject *exception_keeper_tb_33;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_33;
    PyObject *exception_keeper_type_34;
    PyObject *exception_keeper_value_34;
    PyTracebackObject *exception_keeper_tb_34;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_34;
    PyObject *locals_numba$roc$hsadrv$drvapi$$$class__12_hsa_ext_image_descriptor_t_290 = NULL;
    struct Nuitka_FrameObject *frame_16704068b6246c21baeae1cb7753c931_13;
    NUITKA_MAY_BE_UNUSED char const *type_description_13 = NULL;
    static struct Nuitka_FrameObject *cache_frame_16704068b6246c21baeae1cb7753c931_13 = NULL;
    PyObject *exception_keeper_type_35;
    PyObject *exception_keeper_value_35;
    PyTracebackObject *exception_keeper_tb_35;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_35;
    PyObject *exception_keeper_type_36;
    PyObject *exception_keeper_value_36;
    PyTracebackObject *exception_keeper_tb_36;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_36;
    PyObject *exception_keeper_type_37;
    PyObject *exception_keeper_value_37;
    PyTracebackObject *exception_keeper_tb_37;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_37;
    PyObject *locals_numba$roc$hsadrv$drvapi$$$class__13_hsa_ext_image_data_info_t_302 = NULL;
    struct Nuitka_FrameObject *frame_49394c7c8beb9c9b30705d981c1289c9_14;
    NUITKA_MAY_BE_UNUSED char const *type_description_14 = NULL;
    static struct Nuitka_FrameObject *cache_frame_49394c7c8beb9c9b30705d981c1289c9_14 = NULL;
    PyObject *exception_keeper_type_38;
    PyObject *exception_keeper_value_38;
    PyTracebackObject *exception_keeper_tb_38;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_38;
    PyObject *exception_keeper_type_39;
    PyObject *exception_keeper_value_39;
    PyTracebackObject *exception_keeper_tb_39;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_39;
    PyObject *exception_keeper_type_40;
    PyObject *exception_keeper_value_40;
    PyTracebackObject *exception_keeper_tb_40;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_40;
    PyObject *locals_numba$roc$hsadrv$drvapi$$$class__14_hsa_ext_image_region_t_308 = NULL;
    struct Nuitka_FrameObject *frame_6050eba5412bb6113d2af9826b315903_15;
    NUITKA_MAY_BE_UNUSED char const *type_description_15 = NULL;
    static struct Nuitka_FrameObject *cache_frame_6050eba5412bb6113d2af9826b315903_15 = NULL;
    PyObject *exception_keeper_type_41;
    PyObject *exception_keeper_value_41;
    PyTracebackObject *exception_keeper_tb_41;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_41;
    PyObject *exception_keeper_type_42;
    PyObject *exception_keeper_value_42;
    PyTracebackObject *exception_keeper_tb_42;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_42;
    PyObject *exception_keeper_type_43;
    PyObject *exception_keeper_value_43;
    PyTracebackObject *exception_keeper_tb_43;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_43;
    PyObject *locals_numba$roc$hsadrv$drvapi$$$class__15_hsa_ext_sampler_descriptor_t_319 = NULL;
    struct Nuitka_FrameObject *frame_bf4dc8548fa109c9509d32a0d9bcab4b_16;
    NUITKA_MAY_BE_UNUSED char const *type_description_16 = NULL;
    static struct Nuitka_FrameObject *cache_frame_bf4dc8548fa109c9509d32a0d9bcab4b_16 = NULL;
    PyObject *exception_keeper_type_44;
    PyObject *exception_keeper_value_44;
    PyTracebackObject *exception_keeper_tb_44;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_44;
    PyObject *exception_keeper_type_45;
    PyObject *exception_keeper_value_45;
    PyTracebackObject *exception_keeper_tb_45;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_45;
    PyObject *exception_keeper_type_46;
    PyObject *exception_keeper_value_46;
    PyTracebackObject *exception_keeper_tb_46;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_46;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_47;
    PyObject *exception_keeper_value_47;
    PyTracebackObject *exception_keeper_tb_47;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_47;
    PyObject *exception_keeper_type_48;
    PyObject *exception_keeper_value_48;
    PyTracebackObject *exception_keeper_tb_48;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_48;

    // Module code.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = Py_None;
        UPDATE_STRING_DICT0(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[22], tmp_assign_source_1);
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = module_filename_obj;
        UPDATE_STRING_DICT0(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[23], tmp_assign_source_2);
    }
    // Frame without reuse.
    frame_277c99bb5820295c4a793963c6d9675f = MAKE_MODULE_FRAME(codeobj_277c99bb5820295c4a793963c6d9675f, module_numba$roc$hsadrv$drvapi);

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStack(frame_277c99bb5820295c4a793963c6d9675f);
    assert(Py_REFCNT(frame_277c99bb5820295c4a793963c6d9675f) == 2);

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_assattr_value_1 = module_filename_obj;
        tmp_assattr_target_1 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[24]);

        if (unlikely(tmp_assattr_target_1 == NULL)) {
            tmp_assattr_target_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[24]);
        }

        assert(!(tmp_assattr_target_1 == NULL));
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[25], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_value_2 = Py_True;
        tmp_assattr_target_2 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[24]);

        if (unlikely(tmp_assattr_target_2 == NULL)) {
            tmp_assattr_target_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[24]);
        }

        assert(!(tmp_assattr_target_2 == NULL));
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[26], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_3;
        tmp_assign_source_3 = Py_None;
        UPDATE_STRING_DICT0(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[27], tmp_assign_source_3);
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_name_value_1;
        PyObject *tmp_globals_arg_value_1;
        PyObject *tmp_locals_arg_value_1;
        PyObject *tmp_fromlist_value_1;
        PyObject *tmp_level_value_1;
        tmp_name_value_1 = mod_consts[28];
        tmp_globals_arg_value_1 = (PyObject *)moduledict_numba$roc$hsadrv$drvapi;
        tmp_locals_arg_value_1 = Py_None;
        tmp_fromlist_value_1 = Py_None;
        tmp_level_value_1 = mod_consts[29];
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1;
        tmp_assign_source_4 = IMPORT_MODULE5(tmp_name_value_1, tmp_globals_arg_value_1, tmp_locals_arg_value_1, tmp_fromlist_value_1, tmp_level_value_1);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28], tmp_assign_source_4);
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_name_value_2;
        PyObject *tmp_globals_arg_value_2;
        PyObject *tmp_locals_arg_value_2;
        PyObject *tmp_fromlist_value_2;
        PyObject *tmp_level_value_2;
        tmp_name_value_2 = mod_consts[19];
        tmp_globals_arg_value_2 = (PyObject *)moduledict_numba$roc$hsadrv$drvapi;
        tmp_locals_arg_value_2 = Py_None;
        tmp_fromlist_value_2 = Py_None;
        tmp_level_value_2 = mod_consts[29];
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 2;
        tmp_assign_source_5 = IMPORT_MODULE5(tmp_name_value_2, tmp_globals_arg_value_2, tmp_locals_arg_value_2, tmp_fromlist_value_2, tmp_level_value_2);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[19], tmp_assign_source_5);
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_import_name_from_1;
        PyObject *tmp_name_value_3;
        PyObject *tmp_globals_arg_value_3;
        PyObject *tmp_locals_arg_value_3;
        PyObject *tmp_fromlist_value_3;
        PyObject *tmp_level_value_3;
        tmp_name_value_3 = mod_consts[30];
        tmp_globals_arg_value_3 = (PyObject *)moduledict_numba$roc$hsadrv$drvapi;
        tmp_locals_arg_value_3 = Py_None;
        tmp_fromlist_value_3 = mod_consts[31];
        tmp_level_value_3 = mod_consts[29];
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 4;
        tmp_import_name_from_1 = IMPORT_MODULE5(tmp_name_value_3, tmp_globals_arg_value_3, tmp_locals_arg_value_3, tmp_fromlist_value_3, tmp_level_value_3);
        if (tmp_import_name_from_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 4;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_1)) {
            tmp_assign_source_6 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_1,
                (PyObject *)moduledict_numba$roc$hsadrv$drvapi,
                mod_consts[0],
                mod_consts[29]
            );
        } else {
            tmp_assign_source_6 = IMPORT_NAME(tmp_import_name_from_1, mod_consts[0]);
        }

        Py_DECREF(tmp_import_name_from_1);
        if (tmp_assign_source_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 4;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[0], tmp_assign_source_6);
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_import_name_from_2;
        PyObject *tmp_name_value_4;
        PyObject *tmp_globals_arg_value_4;
        PyObject *tmp_locals_arg_value_4;
        PyObject *tmp_fromlist_value_4;
        PyObject *tmp_level_value_4;
        tmp_name_value_4 = mod_consts[32];
        tmp_globals_arg_value_4 = (PyObject *)moduledict_numba$roc$hsadrv$drvapi;
        tmp_locals_arg_value_4 = Py_None;
        tmp_fromlist_value_4 = mod_consts[33];
        tmp_level_value_4 = mod_consts[29];
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 6;
        tmp_import_name_from_2 = IMPORT_MODULE5(tmp_name_value_4, tmp_globals_arg_value_4, tmp_locals_arg_value_4, tmp_fromlist_value_4, tmp_level_value_4);
        if (tmp_import_name_from_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 6;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_2)) {
            tmp_assign_source_7 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_2,
                (PyObject *)moduledict_numba$roc$hsadrv$drvapi,
                mod_consts[2],
                mod_consts[29]
            );
        } else {
            tmp_assign_source_7 = IMPORT_NAME(tmp_import_name_from_2, mod_consts[2]);
        }

        Py_DECREF(tmp_import_name_from_2);
        if (tmp_assign_source_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 6;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[2], tmp_assign_source_7);
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_name_value_5;
        PyObject *tmp_globals_arg_value_5;
        PyObject *tmp_locals_arg_value_5;
        PyObject *tmp_fromlist_value_5;
        PyObject *tmp_level_value_5;
        tmp_name_value_5 = mod_consts[34];
        tmp_globals_arg_value_5 = (PyObject *)moduledict_numba$roc$hsadrv$drvapi;
        tmp_locals_arg_value_5 = Py_None;
        tmp_fromlist_value_5 = mod_consts[35];
        tmp_level_value_5 = mod_consts[36];
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 7;
        tmp_assign_source_8 = IMPORT_MODULE5(tmp_name_value_5, tmp_globals_arg_value_5, tmp_locals_arg_value_5, tmp_fromlist_value_5, tmp_level_value_5);
        if (tmp_assign_source_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 7;

            goto frame_exception_exit_1;
        }
        assert(tmp_import_from_1__module == NULL);
        tmp_import_from_1__module = tmp_assign_source_8;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_import_name_from_3;
        CHECK_OBJECT(tmp_import_from_1__module);
        tmp_import_name_from_3 = tmp_import_from_1__module;
        if (PyModule_Check(tmp_import_name_from_3)) {
            tmp_assign_source_9 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_3,
                (PyObject *)moduledict_numba$roc$hsadrv$drvapi,
                mod_consts[16],
                mod_consts[29]
            );
        } else {
            tmp_assign_source_9 = IMPORT_NAME(tmp_import_name_from_3, mod_consts[16]);
        }

        if (tmp_assign_source_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 7;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[16], tmp_assign_source_9);
    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_import_name_from_4;
        CHECK_OBJECT(tmp_import_from_1__module);
        tmp_import_name_from_4 = tmp_import_from_1__module;
        if (PyModule_Check(tmp_import_name_from_4)) {
            tmp_assign_source_10 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_4,
                (PyObject *)moduledict_numba$roc$hsadrv$drvapi,
                mod_consts[21],
                mod_consts[29]
            );
        } else {
            tmp_assign_source_10 = IMPORT_NAME(tmp_import_name_from_4, mod_consts[21]);
        }

        if (tmp_assign_source_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 7;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[21], tmp_assign_source_10);
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_import_from_1__module);
    Py_DECREF(tmp_import_from_1__module);
    tmp_import_from_1__module = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    CHECK_OBJECT(tmp_import_from_1__module);
    Py_DECREF(tmp_import_from_1__module);
    tmp_import_from_1__module = NULL;
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_expression_value_1;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 9;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_11 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[37]);
        if (tmp_assign_source_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 9;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38], tmp_assign_source_11);
    }
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_expression_value_2;
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 13;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_12 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[39]);
        if (tmp_assign_source_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 13;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[40], tmp_assign_source_12);
    }
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_expression_value_3;
        tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_3 == NULL)) {
            tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 18;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_13 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[41]);
        if (tmp_assign_source_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 18;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42], tmp_assign_source_13);
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_expression_value_4;
        tmp_expression_value_4 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_4 == NULL)) {
            tmp_expression_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto try_except_handler_2;
        }
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[43]);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto try_except_handler_2;
        }
        tmp_assign_source_14 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_assign_source_14, 0, tmp_tuple_element_1);
        assert(tmp_class_creation_1__bases_orig == NULL);
        tmp_class_creation_1__bases_orig = tmp_assign_source_14;
    }
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_dircall_arg1_1;
        CHECK_OBJECT(tmp_class_creation_1__bases_orig);
        tmp_dircall_arg1_1 = tmp_class_creation_1__bases_orig;
        Py_INCREF(tmp_dircall_arg1_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1};
            tmp_assign_source_15 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto try_except_handler_2;
        }
        assert(tmp_class_creation_1__bases == NULL);
        tmp_class_creation_1__bases = tmp_assign_source_15;
    }
    {
        PyObject *tmp_assign_source_16;
        tmp_assign_source_16 = PyDict_New();
        assert(tmp_class_creation_1__class_decl_dict == NULL);
        tmp_class_creation_1__class_decl_dict = tmp_assign_source_16;
    }
    {
        PyObject *tmp_assign_source_17;
        PyObject *tmp_metaclass_value_1;
        bool tmp_condition_result_1;
        PyObject *tmp_key_value_1;
        PyObject *tmp_dict_arg_value_1;
        PyObject *tmp_dict_arg_value_2;
        PyObject *tmp_key_value_2;
        nuitka_bool tmp_condition_result_2;
        int tmp_truth_name_1;
        PyObject *tmp_type_arg_1;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_subscript_value_1;
        PyObject *tmp_bases_value_1;
        tmp_key_value_1 = mod_consts[44];
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dict_arg_value_1 = tmp_class_creation_1__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_1, tmp_key_value_1);
        assert(!(tmp_res == -1));
        tmp_condition_result_1 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto condexpr_true_1;
        } else {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dict_arg_value_2 = tmp_class_creation_1__class_decl_dict;
        tmp_key_value_2 = mod_consts[44];
        tmp_metaclass_value_1 = DICT_GET_ITEM0(tmp_dict_arg_value_2, tmp_key_value_2);
        if (tmp_metaclass_value_1 == NULL) {
            tmp_metaclass_value_1 = Py_None;
        }
        assert(!(tmp_metaclass_value_1 == NULL));
        Py_INCREF(tmp_metaclass_value_1);
        goto condexpr_end_1;
        condexpr_false_1:;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_class_creation_1__bases);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto try_except_handler_2;
        }
        tmp_condition_result_2 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_2;
        } else {
            goto condexpr_false_2;
        }
        condexpr_true_2:;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_expression_value_5 = tmp_class_creation_1__bases;
        tmp_subscript_value_1 = mod_consts[29];
        tmp_type_arg_1 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_5, tmp_subscript_value_1, 0);
        if (tmp_type_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto try_except_handler_2;
        }
        tmp_metaclass_value_1 = BUILTIN_TYPE1(tmp_type_arg_1);
        Py_DECREF(tmp_type_arg_1);
        if (tmp_metaclass_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto try_except_handler_2;
        }
        goto condexpr_end_2;
        condexpr_false_2:;
        tmp_metaclass_value_1 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_1);
        condexpr_end_2:;
        condexpr_end_1:;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_bases_value_1 = tmp_class_creation_1__bases;
        tmp_assign_source_17 = SELECT_METACLASS(tmp_metaclass_value_1, tmp_bases_value_1);
        Py_DECREF(tmp_metaclass_value_1);
        if (tmp_assign_source_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto try_except_handler_2;
        }
        assert(tmp_class_creation_1__metaclass == NULL);
        tmp_class_creation_1__metaclass = tmp_assign_source_17;
    }
    {
        bool tmp_condition_result_3;
        PyObject *tmp_key_value_3;
        PyObject *tmp_dict_arg_value_3;
        tmp_key_value_3 = mod_consts[44];
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dict_arg_value_3 = tmp_class_creation_1__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_3, tmp_key_value_3);
        assert(!(tmp_res == -1));
        tmp_condition_result_3 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_3 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_1__class_decl_dict;
    tmp_dictdel_key = mod_consts[44];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 19;

        goto try_except_handler_2;
    }
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_expression_value_6;
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_expression_value_6 = tmp_class_creation_1__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_6, mod_consts[45]);
        tmp_condition_result_4 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_18;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_args_value_1;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_kwargs_value_1;
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_expression_value_7 = tmp_class_creation_1__metaclass;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_7, mod_consts[45]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto try_except_handler_2;
        }
        tmp_tuple_element_2 = mod_consts[46];
        tmp_args_value_1 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_1, 0, tmp_tuple_element_2);
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_tuple_element_2 = tmp_class_creation_1__bases;
        PyTuple_SET_ITEM0(tmp_args_value_1, 1, tmp_tuple_element_2);
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_kwargs_value_1 = tmp_class_creation_1__class_decl_dict;
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 19;
        tmp_assign_source_18 = CALL_FUNCTION(tmp_called_value_1, tmp_args_value_1, tmp_kwargs_value_1);
        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_value_1);
        if (tmp_assign_source_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto try_except_handler_2;
        }
        assert(tmp_class_creation_1__prepared == NULL);
        tmp_class_creation_1__prepared = tmp_assign_source_18;
    }
    {
        bool tmp_condition_result_5;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_expression_value_8;
        CHECK_OBJECT(tmp_class_creation_1__prepared);
        tmp_expression_value_8 = tmp_class_creation_1__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_8, mod_consts[47]);
        tmp_operand_value_1 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto try_except_handler_2;
        }
        tmp_condition_result_5 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_5 != false) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_raise_value_1;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        PyObject *tmp_tuple_element_3;
        PyObject *tmp_getattr_target_1;
        PyObject *tmp_getattr_attr_1;
        PyObject *tmp_getattr_default_1;
        tmp_raise_type_1 = PyExc_TypeError;
        tmp_left_value_1 = mod_consts[48];
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_getattr_target_1 = tmp_class_creation_1__metaclass;
        tmp_getattr_attr_1 = mod_consts[15];
        tmp_getattr_default_1 = mod_consts[49];
        tmp_tuple_element_3 = BUILTIN_GETATTR(tmp_getattr_target_1, tmp_getattr_attr_1, tmp_getattr_default_1);
        if (tmp_tuple_element_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto try_except_handler_2;
        }
        tmp_right_value_1 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_9;
            PyObject *tmp_type_arg_2;
            PyTuple_SET_ITEM(tmp_right_value_1, 0, tmp_tuple_element_3);
            CHECK_OBJECT(tmp_class_creation_1__prepared);
            tmp_type_arg_2 = tmp_class_creation_1__prepared;
            tmp_expression_value_9 = BUILTIN_TYPE1(tmp_type_arg_2);
            assert(!(tmp_expression_value_9 == NULL));
            tmp_tuple_element_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_9, mod_consts[15]);
            Py_DECREF(tmp_expression_value_9);
            if (tmp_tuple_element_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 19;

                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_right_value_1, 1, tmp_tuple_element_3);
        }
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_right_value_1);
        goto try_except_handler_2;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        tmp_raise_value_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_1, tmp_right_value_1);
        Py_DECREF(tmp_right_value_1);
        if (tmp_raise_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto try_except_handler_2;
        }
        exception_type = tmp_raise_type_1;
        Py_INCREF(tmp_raise_type_1);
        exception_value = tmp_raise_value_1;
        exception_lineno = 19;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_2;
    }
    branch_no_3:;
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_assign_source_19;
        tmp_assign_source_19 = PyDict_New();
        assert(tmp_class_creation_1__prepared == NULL);
        tmp_class_creation_1__prepared = tmp_assign_source_19;
    }
    branch_end_2:;
    {
        PyObject *tmp_assign_source_20;
        {
            PyObject *tmp_set_locals_1;
            CHECK_OBJECT(tmp_class_creation_1__prepared);
            tmp_set_locals_1 = tmp_class_creation_1__prepared;
            locals_numba$roc$hsadrv$drvapi$$$class__1_hsa_dim3_t_19 = tmp_set_locals_1;
            Py_INCREF(tmp_set_locals_1);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__1_hsa_dim3_t_19, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto try_except_handler_4;
        }
        tmp_dictset_value = mod_consts[46];
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__1_hsa_dim3_t_19, mod_consts[52], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto try_except_handler_4;
        }
        if (isFrameUnusable(cache_frame_d167d81cc15b833c76f7772221f1c650_2)) {
            Py_XDECREF(cache_frame_d167d81cc15b833c76f7772221f1c650_2);

#if _DEBUG_REFCOUNTS
            if (cache_frame_d167d81cc15b833c76f7772221f1c650_2 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_d167d81cc15b833c76f7772221f1c650_2 = MAKE_FUNCTION_FRAME(codeobj_d167d81cc15b833c76f7772221f1c650, module_numba$roc$hsadrv$drvapi, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_d167d81cc15b833c76f7772221f1c650_2->m_type_description == NULL);
        frame_d167d81cc15b833c76f7772221f1c650_2 = cache_frame_d167d81cc15b833c76f7772221f1c650_2;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_d167d81cc15b833c76f7772221f1c650_2);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_d167d81cc15b833c76f7772221f1c650_2) == 2); // Frame stack

        // Framed code:
        {
            PyObject *tmp_list_element_1;
            PyObject *tmp_tuple_element_4;
            tmp_tuple_element_4 = mod_consts[53];
            tmp_list_element_1 = PyTuple_New(2);
            {
                PyObject *tmp_expression_value_10;
                PyTuple_SET_ITEM0(tmp_list_element_1, 0, tmp_tuple_element_4);
                tmp_expression_value_10 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__1_hsa_dim3_t_19, mod_consts[28]);

                if (tmp_expression_value_10 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_10 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                        if (unlikely(tmp_expression_value_10 == NULL)) {
                            tmp_expression_value_10 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                        }

                        if (tmp_expression_value_10 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 21;
                            type_description_2 = "o";
                            goto tuple_build_exception_2;
                        }
                        Py_INCREF(tmp_expression_value_10);
                    } else {
                        goto tuple_build_exception_2;
                    }
                }

                tmp_tuple_element_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_10, mod_consts[54]);
                Py_DECREF(tmp_expression_value_10);
                if (tmp_tuple_element_4 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 21;
                    type_description_2 = "o";
                    goto tuple_build_exception_2;
                }
                PyTuple_SET_ITEM(tmp_list_element_1, 1, tmp_tuple_element_4);
            }
            goto tuple_build_noexception_2;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_2:;
            Py_DECREF(tmp_list_element_1);
            goto frame_exception_exit_2;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_2:;
            tmp_dictset_value = PyList_New(3);
            {
                PyObject *tmp_tuple_element_5;
                PyObject *tmp_tuple_element_6;
                PyList_SET_ITEM(tmp_dictset_value, 0, tmp_list_element_1);
                tmp_tuple_element_5 = mod_consts[55];
                tmp_list_element_1 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_11;
                    PyTuple_SET_ITEM0(tmp_list_element_1, 0, tmp_tuple_element_5);
                    tmp_expression_value_11 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__1_hsa_dim3_t_19, mod_consts[28]);

                    if (tmp_expression_value_11 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_11 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_11 == NULL)) {
                                tmp_expression_value_11 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_11 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 22;
                                type_description_2 = "o";
                                goto tuple_build_exception_3;
                            }
                            Py_INCREF(tmp_expression_value_11);
                        } else {
                            goto tuple_build_exception_3;
                        }
                    }

                    tmp_tuple_element_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_11, mod_consts[54]);
                    Py_DECREF(tmp_expression_value_11);
                    if (tmp_tuple_element_5 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 22;
                        type_description_2 = "o";
                        goto tuple_build_exception_3;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_1, 1, tmp_tuple_element_5);
                }
                goto tuple_build_noexception_3;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_3:;
                Py_DECREF(tmp_list_element_1);
                goto list_build_exception_1;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_3:;
                PyList_SET_ITEM(tmp_dictset_value, 1, tmp_list_element_1);
                tmp_tuple_element_6 = mod_consts[56];
                tmp_list_element_1 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_12;
                    PyTuple_SET_ITEM0(tmp_list_element_1, 0, tmp_tuple_element_6);
                    tmp_expression_value_12 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__1_hsa_dim3_t_19, mod_consts[28]);

                    if (tmp_expression_value_12 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_12 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_12 == NULL)) {
                                tmp_expression_value_12 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_12 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 23;
                                type_description_2 = "o";
                                goto tuple_build_exception_4;
                            }
                            Py_INCREF(tmp_expression_value_12);
                        } else {
                            goto tuple_build_exception_4;
                        }
                    }

                    tmp_tuple_element_6 = LOOKUP_ATTRIBUTE(tmp_expression_value_12, mod_consts[54]);
                    Py_DECREF(tmp_expression_value_12);
                    if (tmp_tuple_element_6 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 23;
                        type_description_2 = "o";
                        goto tuple_build_exception_4;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_1, 1, tmp_tuple_element_6);
                }
                goto tuple_build_noexception_4;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_4:;
                Py_DECREF(tmp_list_element_1);
                goto list_build_exception_1;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_4:;
                PyList_SET_ITEM(tmp_dictset_value, 2, tmp_list_element_1);
            }
            goto list_build_noexception_1;
            // Exception handling pass through code for list_build:
            list_build_exception_1:;
            Py_DECREF(tmp_dictset_value);
            goto frame_exception_exit_2;
            // Finished with no exception for list_build:
            list_build_noexception_1:;
            tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__1_hsa_dim3_t_19, mod_consts[57], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 20;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_d167d81cc15b833c76f7772221f1c650_2);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_1;

        frame_exception_exit_2:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_d167d81cc15b833c76f7772221f1c650_2);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_d167d81cc15b833c76f7772221f1c650_2, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_d167d81cc15b833c76f7772221f1c650_2->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_d167d81cc15b833c76f7772221f1c650_2, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_d167d81cc15b833c76f7772221f1c650_2,
            type_description_2,
            outline_0_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_d167d81cc15b833c76f7772221f1c650_2 == cache_frame_d167d81cc15b833c76f7772221f1c650_2) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_d167d81cc15b833c76f7772221f1c650_2);
            cache_frame_d167d81cc15b833c76f7772221f1c650_2 = NULL;
        }

        assertFrameObject(frame_d167d81cc15b833c76f7772221f1c650_2);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_1;

        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_1:;

        goto try_except_handler_4;
        skip_nested_handling_1:;
        {
            nuitka_bool tmp_condition_result_6;
            PyObject *tmp_cmp_expr_left_1;
            PyObject *tmp_cmp_expr_right_1;
            CHECK_OBJECT(tmp_class_creation_1__bases);
            tmp_cmp_expr_left_1 = tmp_class_creation_1__bases;
            CHECK_OBJECT(tmp_class_creation_1__bases_orig);
            tmp_cmp_expr_right_1 = tmp_class_creation_1__bases_orig;
            tmp_condition_result_6 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
            if (tmp_condition_result_6 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 19;

                goto try_except_handler_4;
            }
            if (tmp_condition_result_6 == NUITKA_BOOL_TRUE) {
                goto branch_yes_4;
            } else {
                goto branch_no_4;
            }
            assert(tmp_condition_result_6 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_4:;
        CHECK_OBJECT(tmp_class_creation_1__bases_orig);
        tmp_dictset_value = tmp_class_creation_1__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__1_hsa_dim3_t_19, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto try_except_handler_4;
        }
        branch_no_4:;
        {
            PyObject *tmp_assign_source_21;
            PyObject *tmp_called_value_2;
            PyObject *tmp_args_value_2;
            PyObject *tmp_tuple_element_7;
            PyObject *tmp_kwargs_value_2;
            CHECK_OBJECT(tmp_class_creation_1__metaclass);
            tmp_called_value_2 = tmp_class_creation_1__metaclass;
            tmp_tuple_element_7 = mod_consts[46];
            tmp_args_value_2 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_2, 0, tmp_tuple_element_7);
            CHECK_OBJECT(tmp_class_creation_1__bases);
            tmp_tuple_element_7 = tmp_class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_2, 1, tmp_tuple_element_7);
            tmp_tuple_element_7 = locals_numba$roc$hsadrv$drvapi$$$class__1_hsa_dim3_t_19;
            PyTuple_SET_ITEM0(tmp_args_value_2, 2, tmp_tuple_element_7);
            CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
            tmp_kwargs_value_2 = tmp_class_creation_1__class_decl_dict;
            frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 19;
            tmp_assign_source_21 = CALL_FUNCTION(tmp_called_value_2, tmp_args_value_2, tmp_kwargs_value_2);
            Py_DECREF(tmp_args_value_2);
            if (tmp_assign_source_21 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 19;

                goto try_except_handler_4;
            }
            assert(outline_0_var___class__ == NULL);
            outline_0_var___class__ = tmp_assign_source_21;
        }
        CHECK_OBJECT(outline_0_var___class__);
        tmp_assign_source_20 = outline_0_var___class__;
        Py_INCREF(tmp_assign_source_20);
        goto try_return_handler_4;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_4:;
        Py_DECREF(locals_numba$roc$hsadrv$drvapi$$$class__1_hsa_dim3_t_19);
        locals_numba$roc$hsadrv$drvapi$$$class__1_hsa_dim3_t_19 = NULL;
        goto try_return_handler_3;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$roc$hsadrv$drvapi$$$class__1_hsa_dim3_t_19);
        locals_numba$roc$hsadrv$drvapi$$$class__1_hsa_dim3_t_19 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto try_except_handler_3;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_3:;
        CHECK_OBJECT(outline_0_var___class__);
        Py_DECREF(outline_0_var___class__);
        outline_0_var___class__ = NULL;
        goto outline_result_1;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_3 = exception_type;
        exception_keeper_value_3 = exception_value;
        exception_keeper_tb_3 = exception_tb;
        exception_keeper_lineno_3 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;
        exception_lineno = exception_keeper_lineno_3;

        goto outline_exception_1;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_1:;
        exception_lineno = 19;
        goto try_except_handler_2;
        outline_result_1:;
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[46], tmp_assign_source_20);
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_1__bases_orig);
    tmp_class_creation_1__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_1__bases);
    tmp_class_creation_1__bases = NULL;
    Py_XDECREF(tmp_class_creation_1__class_decl_dict);
    tmp_class_creation_1__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_1__metaclass);
    tmp_class_creation_1__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_1__prepared);
    tmp_class_creation_1__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(tmp_class_creation_1__bases_orig);
    Py_DECREF(tmp_class_creation_1__bases_orig);
    tmp_class_creation_1__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_1__bases);
    Py_DECREF(tmp_class_creation_1__bases);
    tmp_class_creation_1__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
    Py_DECREF(tmp_class_creation_1__class_decl_dict);
    tmp_class_creation_1__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_1__metaclass);
    Py_DECREF(tmp_class_creation_1__metaclass);
    tmp_class_creation_1__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_1__prepared);
    Py_DECREF(tmp_class_creation_1__prepared);
    tmp_class_creation_1__prepared = NULL;
    {
        PyObject *tmp_assign_source_22;
        PyObject *tmp_expression_value_13;
        tmp_expression_value_13 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_13 == NULL)) {
            tmp_expression_value_13 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 25;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_22 = LOOKUP_ATTRIBUTE(tmp_expression_value_13, mod_consts[41]);
        if (tmp_assign_source_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 25;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[59], tmp_assign_source_22);
    }
    {
        PyObject *tmp_assign_source_23;
        PyObject *tmp_expression_value_14;
        tmp_expression_value_14 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_14 == NULL)) {
            tmp_expression_value_14 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 26;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_23 = LOOKUP_ATTRIBUTE(tmp_expression_value_14, mod_consts[41]);
        if (tmp_assign_source_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 26;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[60], tmp_assign_source_23);
    }
    {
        PyObject *tmp_assign_source_24;
        PyObject *tmp_expression_value_15;
        tmp_expression_value_15 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_15 == NULL)) {
            tmp_expression_value_15 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 27;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_24 = LOOKUP_ATTRIBUTE(tmp_expression_value_15, mod_consts[41]);
        if (tmp_assign_source_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 27;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[61], tmp_assign_source_24);
    }
    {
        PyObject *tmp_assign_source_25;
        PyObject *tmp_expression_value_16;
        tmp_expression_value_16 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_16 == NULL)) {
            tmp_expression_value_16 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 28;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_25 = LOOKUP_ATTRIBUTE(tmp_expression_value_16, mod_consts[41]);
        if (tmp_assign_source_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 28;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[62], tmp_assign_source_25);
    }
    {
        PyObject *tmp_assign_source_26;
        PyObject *tmp_expression_value_17;
        tmp_expression_value_17 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_17 == NULL)) {
            tmp_expression_value_17 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 29;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_26 = LOOKUP_ATTRIBUTE(tmp_expression_value_17, mod_consts[41]);
        if (tmp_assign_source_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 29;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[63], tmp_assign_source_26);
    }
    {
        PyObject *tmp_assign_source_27;
        PyObject *tmp_expression_value_18;
        tmp_expression_value_18 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_18 == NULL)) {
            tmp_expression_value_18 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 30;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_27 = LOOKUP_ATTRIBUTE(tmp_expression_value_18, mod_consts[41]);
        if (tmp_assign_source_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 30;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[64], tmp_assign_source_27);
    }
    {
        PyObject *tmp_assign_source_28;
        tmp_assign_source_28 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[40]);

        if (unlikely(tmp_assign_source_28 == NULL)) {
            tmp_assign_source_28 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[40]);
        }

        if (tmp_assign_source_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 31;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT0(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[65], tmp_assign_source_28);
    }
    {
        PyObject *tmp_assign_source_29;
        PyObject *tmp_expression_value_19;
        tmp_expression_value_19 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_19 == NULL)) {
            tmp_expression_value_19 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 32;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_29 = LOOKUP_ATTRIBUTE(tmp_expression_value_19, mod_consts[41]);
        if (tmp_assign_source_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 32;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[66], tmp_assign_source_29);
    }
    {
        PyObject *tmp_assign_source_30;
        PyObject *tmp_expression_value_20;
        tmp_expression_value_20 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_20 == NULL)) {
            tmp_expression_value_20 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 33;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_30 = LOOKUP_ATTRIBUTE(tmp_expression_value_20, mod_consts[41]);
        if (tmp_assign_source_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 33;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[67], tmp_assign_source_30);
    }
    {
        PyObject *tmp_assign_source_31;
        PyObject *tmp_expression_value_21;
        tmp_expression_value_21 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_21 == NULL)) {
            tmp_expression_value_21 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 34;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_31 = LOOKUP_ATTRIBUTE(tmp_expression_value_21, mod_consts[41]);
        if (tmp_assign_source_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 34;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[68], tmp_assign_source_31);
    }
    {
        PyObject *tmp_assign_source_32;
        PyObject *tmp_expression_value_22;
        tmp_expression_value_22 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_22 == NULL)) {
            tmp_expression_value_22 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 35;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_32 = LOOKUP_ATTRIBUTE(tmp_expression_value_22, mod_consts[41]);
        if (tmp_assign_source_32 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 35;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[69], tmp_assign_source_32);
    }
    {
        PyObject *tmp_assign_source_33;
        PyObject *tmp_expression_value_23;
        tmp_expression_value_23 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_23 == NULL)) {
            tmp_expression_value_23 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 36;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_33 = LOOKUP_ATTRIBUTE(tmp_expression_value_23, mod_consts[41]);
        if (tmp_assign_source_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 36;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[70], tmp_assign_source_33);
    }
    {
        PyObject *tmp_assign_source_34;
        tmp_assign_source_34 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[40]);

        if (unlikely(tmp_assign_source_34 == NULL)) {
            tmp_assign_source_34 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[40]);
        }

        if (tmp_assign_source_34 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 37;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT0(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71], tmp_assign_source_34);
    }
    {
        PyObject *tmp_assign_source_35;
        nuitka_bool tmp_condition_result_7;
        PyObject *tmp_expression_value_24;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_2;
        PyObject *tmp_expression_value_25;
        PyObject *tmp_expression_value_26;
        tmp_expression_value_24 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[2]);

        if (unlikely(tmp_expression_value_24 == NULL)) {
            tmp_expression_value_24 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[2]);
        }

        if (tmp_expression_value_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 38;

            goto frame_exception_exit_1;
        }
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_24, mod_consts[72]);
        if (tmp_attribute_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 38;

            goto frame_exception_exit_1;
        }
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 38;

            goto frame_exception_exit_1;
        }
        tmp_condition_result_7 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        if (tmp_condition_result_7 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_3;
        } else {
            goto condexpr_false_3;
        }
        condexpr_true_3:;
        tmp_expression_value_25 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_25 == NULL)) {
            tmp_expression_value_25 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 38;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_35 = LOOKUP_ATTRIBUTE(tmp_expression_value_25, mod_consts[39]);
        if (tmp_assign_source_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 38;

            goto frame_exception_exit_1;
        }
        goto condexpr_end_3;
        condexpr_false_3:;
        tmp_expression_value_26 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_26 == NULL)) {
            tmp_expression_value_26 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 38;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_35 = LOOKUP_ATTRIBUTE(tmp_expression_value_26, mod_consts[54]);
        if (tmp_assign_source_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 38;

            goto frame_exception_exit_1;
        }
        condexpr_end_3:;
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73], tmp_assign_source_35);
    }
    {
        PyObject *tmp_assign_source_36;
        PyObject *tmp_expression_value_27;
        tmp_expression_value_27 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_27 == NULL)) {
            tmp_expression_value_27 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 39;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_36 = LOOKUP_ATTRIBUTE(tmp_expression_value_27, mod_consts[41]);
        if (tmp_assign_source_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 39;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[74], tmp_assign_source_36);
    }
    {
        PyObject *tmp_assign_source_37;
        PyObject *tmp_expression_value_28;
        tmp_expression_value_28 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_28 == NULL)) {
            tmp_expression_value_28 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 40;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_37 = LOOKUP_ATTRIBUTE(tmp_expression_value_28, mod_consts[41]);
        if (tmp_assign_source_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 40;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[75], tmp_assign_source_37);
    }
    {
        PyObject *tmp_assign_source_38;
        tmp_assign_source_38 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[40]);

        if (unlikely(tmp_assign_source_38 == NULL)) {
            tmp_assign_source_38 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[40]);
        }

        if (tmp_assign_source_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 41;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT0(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[76], tmp_assign_source_38);
    }
    {
        PyObject *tmp_assign_source_39;
        PyObject *tmp_expression_value_29;
        tmp_expression_value_29 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_29 == NULL)) {
            tmp_expression_value_29 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 42;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_39 = LOOKUP_ATTRIBUTE(tmp_expression_value_29, mod_consts[41]);
        if (tmp_assign_source_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 42;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[77], tmp_assign_source_39);
    }
    {
        PyObject *tmp_assign_source_40;
        PyObject *tmp_expression_value_30;
        tmp_expression_value_30 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_30 == NULL)) {
            tmp_expression_value_30 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 43;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_40 = LOOKUP_ATTRIBUTE(tmp_expression_value_30, mod_consts[41]);
        if (tmp_assign_source_40 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 43;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[78], tmp_assign_source_40);
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_41;
        PyObject *tmp_tuple_element_8;
        PyObject *tmp_expression_value_31;
        tmp_expression_value_31 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_31 == NULL)) {
            tmp_expression_value_31 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 44;

            goto try_except_handler_5;
        }
        tmp_tuple_element_8 = LOOKUP_ATTRIBUTE(tmp_expression_value_31, mod_consts[43]);
        if (tmp_tuple_element_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 44;

            goto try_except_handler_5;
        }
        tmp_assign_source_41 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_assign_source_41, 0, tmp_tuple_element_8);
        assert(tmp_class_creation_2__bases_orig == NULL);
        tmp_class_creation_2__bases_orig = tmp_assign_source_41;
    }
    {
        PyObject *tmp_assign_source_42;
        PyObject *tmp_dircall_arg1_2;
        CHECK_OBJECT(tmp_class_creation_2__bases_orig);
        tmp_dircall_arg1_2 = tmp_class_creation_2__bases_orig;
        Py_INCREF(tmp_dircall_arg1_2);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_2};
            tmp_assign_source_42 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_42 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 44;

            goto try_except_handler_5;
        }
        assert(tmp_class_creation_2__bases == NULL);
        tmp_class_creation_2__bases = tmp_assign_source_42;
    }
    {
        PyObject *tmp_assign_source_43;
        tmp_assign_source_43 = PyDict_New();
        assert(tmp_class_creation_2__class_decl_dict == NULL);
        tmp_class_creation_2__class_decl_dict = tmp_assign_source_43;
    }
    {
        PyObject *tmp_assign_source_44;
        PyObject *tmp_metaclass_value_2;
        bool tmp_condition_result_8;
        PyObject *tmp_key_value_4;
        PyObject *tmp_dict_arg_value_4;
        PyObject *tmp_dict_arg_value_5;
        PyObject *tmp_key_value_5;
        nuitka_bool tmp_condition_result_9;
        int tmp_truth_name_3;
        PyObject *tmp_type_arg_3;
        PyObject *tmp_expression_value_32;
        PyObject *tmp_subscript_value_2;
        PyObject *tmp_bases_value_2;
        tmp_key_value_4 = mod_consts[44];
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_dict_arg_value_4 = tmp_class_creation_2__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_4, tmp_key_value_4);
        assert(!(tmp_res == -1));
        tmp_condition_result_8 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_8 != false) {
            goto condexpr_true_4;
        } else {
            goto condexpr_false_4;
        }
        condexpr_true_4:;
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_dict_arg_value_5 = tmp_class_creation_2__class_decl_dict;
        tmp_key_value_5 = mod_consts[44];
        tmp_metaclass_value_2 = DICT_GET_ITEM0(tmp_dict_arg_value_5, tmp_key_value_5);
        if (tmp_metaclass_value_2 == NULL) {
            tmp_metaclass_value_2 = Py_None;
        }
        assert(!(tmp_metaclass_value_2 == NULL));
        Py_INCREF(tmp_metaclass_value_2);
        goto condexpr_end_4;
        condexpr_false_4:;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_truth_name_3 = CHECK_IF_TRUE(tmp_class_creation_2__bases);
        if (tmp_truth_name_3 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 44;

            goto try_except_handler_5;
        }
        tmp_condition_result_9 = tmp_truth_name_3 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_9 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_5;
        } else {
            goto condexpr_false_5;
        }
        condexpr_true_5:;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_expression_value_32 = tmp_class_creation_2__bases;
        tmp_subscript_value_2 = mod_consts[29];
        tmp_type_arg_3 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_32, tmp_subscript_value_2, 0);
        if (tmp_type_arg_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 44;

            goto try_except_handler_5;
        }
        tmp_metaclass_value_2 = BUILTIN_TYPE1(tmp_type_arg_3);
        Py_DECREF(tmp_type_arg_3);
        if (tmp_metaclass_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 44;

            goto try_except_handler_5;
        }
        goto condexpr_end_5;
        condexpr_false_5:;
        tmp_metaclass_value_2 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_2);
        condexpr_end_5:;
        condexpr_end_4:;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_bases_value_2 = tmp_class_creation_2__bases;
        tmp_assign_source_44 = SELECT_METACLASS(tmp_metaclass_value_2, tmp_bases_value_2);
        Py_DECREF(tmp_metaclass_value_2);
        if (tmp_assign_source_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 44;

            goto try_except_handler_5;
        }
        assert(tmp_class_creation_2__metaclass == NULL);
        tmp_class_creation_2__metaclass = tmp_assign_source_44;
    }
    {
        bool tmp_condition_result_10;
        PyObject *tmp_key_value_6;
        PyObject *tmp_dict_arg_value_6;
        tmp_key_value_6 = mod_consts[44];
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_dict_arg_value_6 = tmp_class_creation_2__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_6, tmp_key_value_6);
        assert(!(tmp_res == -1));
        tmp_condition_result_10 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_10 != false) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
    }
    branch_yes_5:;
    CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_2__class_decl_dict;
    tmp_dictdel_key = mod_consts[44];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 44;

        goto try_except_handler_5;
    }
    branch_no_5:;
    {
        nuitka_bool tmp_condition_result_11;
        PyObject *tmp_expression_value_33;
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_expression_value_33 = tmp_class_creation_2__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_33, mod_consts[45]);
        tmp_condition_result_11 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_11 == NUITKA_BOOL_TRUE) {
            goto branch_yes_6;
        } else {
            goto branch_no_6;
        }
    }
    branch_yes_6:;
    {
        PyObject *tmp_assign_source_45;
        PyObject *tmp_called_value_3;
        PyObject *tmp_expression_value_34;
        PyObject *tmp_args_value_3;
        PyObject *tmp_tuple_element_9;
        PyObject *tmp_kwargs_value_3;
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_expression_value_34 = tmp_class_creation_2__metaclass;
        tmp_called_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_34, mod_consts[45]);
        if (tmp_called_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 44;

            goto try_except_handler_5;
        }
        tmp_tuple_element_9 = mod_consts[79];
        tmp_args_value_3 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_3, 0, tmp_tuple_element_9);
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_tuple_element_9 = tmp_class_creation_2__bases;
        PyTuple_SET_ITEM0(tmp_args_value_3, 1, tmp_tuple_element_9);
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_kwargs_value_3 = tmp_class_creation_2__class_decl_dict;
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 44;
        tmp_assign_source_45 = CALL_FUNCTION(tmp_called_value_3, tmp_args_value_3, tmp_kwargs_value_3);
        Py_DECREF(tmp_called_value_3);
        Py_DECREF(tmp_args_value_3);
        if (tmp_assign_source_45 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 44;

            goto try_except_handler_5;
        }
        assert(tmp_class_creation_2__prepared == NULL);
        tmp_class_creation_2__prepared = tmp_assign_source_45;
    }
    {
        bool tmp_condition_result_12;
        PyObject *tmp_operand_value_2;
        PyObject *tmp_expression_value_35;
        CHECK_OBJECT(tmp_class_creation_2__prepared);
        tmp_expression_value_35 = tmp_class_creation_2__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_35, mod_consts[47]);
        tmp_operand_value_2 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 44;

            goto try_except_handler_5;
        }
        tmp_condition_result_12 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_12 != false) {
            goto branch_yes_7;
        } else {
            goto branch_no_7;
        }
    }
    branch_yes_7:;
    {
        PyObject *tmp_raise_type_2;
        PyObject *tmp_raise_value_2;
        PyObject *tmp_left_value_2;
        PyObject *tmp_right_value_2;
        PyObject *tmp_tuple_element_10;
        PyObject *tmp_getattr_target_2;
        PyObject *tmp_getattr_attr_2;
        PyObject *tmp_getattr_default_2;
        tmp_raise_type_2 = PyExc_TypeError;
        tmp_left_value_2 = mod_consts[48];
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_getattr_target_2 = tmp_class_creation_2__metaclass;
        tmp_getattr_attr_2 = mod_consts[15];
        tmp_getattr_default_2 = mod_consts[49];
        tmp_tuple_element_10 = BUILTIN_GETATTR(tmp_getattr_target_2, tmp_getattr_attr_2, tmp_getattr_default_2);
        if (tmp_tuple_element_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 44;

            goto try_except_handler_5;
        }
        tmp_right_value_2 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_36;
            PyObject *tmp_type_arg_4;
            PyTuple_SET_ITEM(tmp_right_value_2, 0, tmp_tuple_element_10);
            CHECK_OBJECT(tmp_class_creation_2__prepared);
            tmp_type_arg_4 = tmp_class_creation_2__prepared;
            tmp_expression_value_36 = BUILTIN_TYPE1(tmp_type_arg_4);
            assert(!(tmp_expression_value_36 == NULL));
            tmp_tuple_element_10 = LOOKUP_ATTRIBUTE(tmp_expression_value_36, mod_consts[15]);
            Py_DECREF(tmp_expression_value_36);
            if (tmp_tuple_element_10 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 44;

                goto tuple_build_exception_5;
            }
            PyTuple_SET_ITEM(tmp_right_value_2, 1, tmp_tuple_element_10);
        }
        goto tuple_build_noexception_5;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_5:;
        Py_DECREF(tmp_right_value_2);
        goto try_except_handler_5;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_5:;
        tmp_raise_value_2 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_2, tmp_right_value_2);
        Py_DECREF(tmp_right_value_2);
        if (tmp_raise_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 44;

            goto try_except_handler_5;
        }
        exception_type = tmp_raise_type_2;
        Py_INCREF(tmp_raise_type_2);
        exception_value = tmp_raise_value_2;
        exception_lineno = 44;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_5;
    }
    branch_no_7:;
    goto branch_end_6;
    branch_no_6:;
    {
        PyObject *tmp_assign_source_46;
        tmp_assign_source_46 = PyDict_New();
        assert(tmp_class_creation_2__prepared == NULL);
        tmp_class_creation_2__prepared = tmp_assign_source_46;
    }
    branch_end_6:;
    {
        PyObject *tmp_assign_source_47;
        {
            PyObject *tmp_set_locals_2;
            CHECK_OBJECT(tmp_class_creation_2__prepared);
            tmp_set_locals_2 = tmp_class_creation_2__prepared;
            locals_numba$roc$hsadrv$drvapi$$$class__2_hsa_queue_t_44 = tmp_set_locals_2;
            Py_INCREF(tmp_set_locals_2);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__2_hsa_queue_t_44, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 44;

            goto try_except_handler_7;
        }
        tmp_dictset_value = mod_consts[80];
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__2_hsa_queue_t_44, mod_consts[22], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 44;

            goto try_except_handler_7;
        }
        tmp_dictset_value = mod_consts[79];
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__2_hsa_queue_t_44, mod_consts[52], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 44;

            goto try_except_handler_7;
        }
        if (isFrameUnusable(cache_frame_a441998b0ea2dc83684515950f20f5ec_3)) {
            Py_XDECREF(cache_frame_a441998b0ea2dc83684515950f20f5ec_3);

#if _DEBUG_REFCOUNTS
            if (cache_frame_a441998b0ea2dc83684515950f20f5ec_3 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_a441998b0ea2dc83684515950f20f5ec_3 = MAKE_FUNCTION_FRAME(codeobj_a441998b0ea2dc83684515950f20f5ec, module_numba$roc$hsadrv$drvapi, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_a441998b0ea2dc83684515950f20f5ec_3->m_type_description == NULL);
        frame_a441998b0ea2dc83684515950f20f5ec_3 = cache_frame_a441998b0ea2dc83684515950f20f5ec_3;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_a441998b0ea2dc83684515950f20f5ec_3);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_a441998b0ea2dc83684515950f20f5ec_3) == 2); // Frame stack

        // Framed code:
        {
            PyObject *tmp_list_element_2;
            PyObject *tmp_tuple_element_11;
            tmp_tuple_element_11 = mod_consts[81];
            tmp_list_element_2 = PyTuple_New(2);
            PyTuple_SET_ITEM0(tmp_list_element_2, 0, tmp_tuple_element_11);
            tmp_tuple_element_11 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__2_hsa_queue_t_44, mod_consts[77]);

            if (tmp_tuple_element_11 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_tuple_element_11 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[77]);

                    if (unlikely(tmp_tuple_element_11 == NULL)) {
                        tmp_tuple_element_11 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[77]);
                    }

                    if (tmp_tuple_element_11 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 48;
                        type_description_2 = "o";
                        goto tuple_build_exception_6;
                    }
                    Py_INCREF(tmp_tuple_element_11);
                } else {
                    goto tuple_build_exception_6;
                }
            }

            PyTuple_SET_ITEM(tmp_list_element_2, 1, tmp_tuple_element_11);
            goto tuple_build_noexception_6;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_6:;
            Py_DECREF(tmp_list_element_2);
            goto frame_exception_exit_3;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_6:;
            tmp_dictset_value = PyList_New(7);
            {
                PyObject *tmp_tuple_element_12;
                PyObject *tmp_tuple_element_13;
                PyObject *tmp_tuple_element_14;
                PyObject *tmp_tuple_element_15;
                PyObject *tmp_tuple_element_16;
                PyObject *tmp_tuple_element_17;
                PyList_SET_ITEM(tmp_dictset_value, 0, tmp_list_element_2);
                tmp_tuple_element_12 = mod_consts[82];
                tmp_list_element_2 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_37;
                    PyTuple_SET_ITEM0(tmp_list_element_2, 0, tmp_tuple_element_12);
                    tmp_expression_value_37 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__2_hsa_queue_t_44, mod_consts[28]);

                    if (tmp_expression_value_37 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_37 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_37 == NULL)) {
                                tmp_expression_value_37 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_37 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 49;
                                type_description_2 = "o";
                                goto tuple_build_exception_7;
                            }
                            Py_INCREF(tmp_expression_value_37);
                        } else {
                            goto tuple_build_exception_7;
                        }
                    }

                    tmp_tuple_element_12 = LOOKUP_ATTRIBUTE(tmp_expression_value_37, mod_consts[54]);
                    Py_DECREF(tmp_expression_value_37);
                    if (tmp_tuple_element_12 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 49;
                        type_description_2 = "o";
                        goto tuple_build_exception_7;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_2, 1, tmp_tuple_element_12);
                }
                goto tuple_build_noexception_7;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_7:;
                Py_DECREF(tmp_list_element_2);
                goto list_build_exception_2;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_7:;
                PyList_SET_ITEM(tmp_dictset_value, 1, tmp_list_element_2);
                tmp_tuple_element_13 = mod_consts[83];
                tmp_list_element_2 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_38;
                    PyTuple_SET_ITEM0(tmp_list_element_2, 0, tmp_tuple_element_13);
                    tmp_expression_value_38 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__2_hsa_queue_t_44, mod_consts[28]);

                    if (tmp_expression_value_38 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_38 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_38 == NULL)) {
                                tmp_expression_value_38 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_38 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 50;
                                type_description_2 = "o";
                                goto tuple_build_exception_8;
                            }
                            Py_INCREF(tmp_expression_value_38);
                        } else {
                            goto tuple_build_exception_8;
                        }
                    }

                    tmp_tuple_element_13 = LOOKUP_ATTRIBUTE(tmp_expression_value_38, mod_consts[84]);
                    Py_DECREF(tmp_expression_value_38);
                    if (tmp_tuple_element_13 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 50;
                        type_description_2 = "o";
                        goto tuple_build_exception_8;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_2, 1, tmp_tuple_element_13);
                }
                goto tuple_build_noexception_8;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_8:;
                Py_DECREF(tmp_list_element_2);
                goto list_build_exception_2;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_8:;
                PyList_SET_ITEM(tmp_dictset_value, 2, tmp_list_element_2);
                tmp_tuple_element_14 = mod_consts[85];
                tmp_list_element_2 = PyTuple_New(2);
                PyTuple_SET_ITEM0(tmp_list_element_2, 0, tmp_tuple_element_14);
                tmp_tuple_element_14 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__2_hsa_queue_t_44, mod_consts[71]);

                if (tmp_tuple_element_14 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_tuple_element_14 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                        if (unlikely(tmp_tuple_element_14 == NULL)) {
                            tmp_tuple_element_14 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                        }

                        if (tmp_tuple_element_14 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 51;
                            type_description_2 = "o";
                            goto tuple_build_exception_9;
                        }
                        Py_INCREF(tmp_tuple_element_14);
                    } else {
                        goto tuple_build_exception_9;
                    }
                }

                PyTuple_SET_ITEM(tmp_list_element_2, 1, tmp_tuple_element_14);
                goto tuple_build_noexception_9;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_9:;
                Py_DECREF(tmp_list_element_2);
                goto list_build_exception_2;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_9:;
                PyList_SET_ITEM(tmp_dictset_value, 3, tmp_list_element_2);
                tmp_tuple_element_15 = mod_consts[86];
                tmp_list_element_2 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_39;
                    PyTuple_SET_ITEM0(tmp_list_element_2, 0, tmp_tuple_element_15);
                    tmp_expression_value_39 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__2_hsa_queue_t_44, mod_consts[28]);

                    if (tmp_expression_value_39 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_39 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_39 == NULL)) {
                                tmp_expression_value_39 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_39 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 52;
                                type_description_2 = "o";
                                goto tuple_build_exception_10;
                            }
                            Py_INCREF(tmp_expression_value_39);
                        } else {
                            goto tuple_build_exception_10;
                        }
                    }

                    tmp_tuple_element_15 = LOOKUP_ATTRIBUTE(tmp_expression_value_39, mod_consts[54]);
                    Py_DECREF(tmp_expression_value_39);
                    if (tmp_tuple_element_15 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 52;
                        type_description_2 = "o";
                        goto tuple_build_exception_10;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_2, 1, tmp_tuple_element_15);
                }
                goto tuple_build_noexception_10;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_10:;
                Py_DECREF(tmp_list_element_2);
                goto list_build_exception_2;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_10:;
                PyList_SET_ITEM(tmp_dictset_value, 4, tmp_list_element_2);
                tmp_tuple_element_16 = mod_consts[87];
                tmp_list_element_2 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_40;
                    PyTuple_SET_ITEM0(tmp_list_element_2, 0, tmp_tuple_element_16);
                    tmp_expression_value_40 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__2_hsa_queue_t_44, mod_consts[28]);

                    if (tmp_expression_value_40 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_40 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_40 == NULL)) {
                                tmp_expression_value_40 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_40 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 53;
                                type_description_2 = "o";
                                goto tuple_build_exception_11;
                            }
                            Py_INCREF(tmp_expression_value_40);
                        } else {
                            goto tuple_build_exception_11;
                        }
                    }

                    tmp_tuple_element_16 = LOOKUP_ATTRIBUTE(tmp_expression_value_40, mod_consts[54]);
                    Py_DECREF(tmp_expression_value_40);
                    if (tmp_tuple_element_16 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 53;
                        type_description_2 = "o";
                        goto tuple_build_exception_11;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_2, 1, tmp_tuple_element_16);
                }
                goto tuple_build_noexception_11;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_11:;
                Py_DECREF(tmp_list_element_2);
                goto list_build_exception_2;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_11:;
                PyList_SET_ITEM(tmp_dictset_value, 5, tmp_list_element_2);
                tmp_tuple_element_17 = mod_consts[88];
                tmp_list_element_2 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_41;
                    PyTuple_SET_ITEM0(tmp_list_element_2, 0, tmp_tuple_element_17);
                    tmp_expression_value_41 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__2_hsa_queue_t_44, mod_consts[28]);

                    if (tmp_expression_value_41 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_41 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_41 == NULL)) {
                                tmp_expression_value_41 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_41 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 54;
                                type_description_2 = "o";
                                goto tuple_build_exception_12;
                            }
                            Py_INCREF(tmp_expression_value_41);
                        } else {
                            goto tuple_build_exception_12;
                        }
                    }

                    tmp_tuple_element_17 = LOOKUP_ATTRIBUTE(tmp_expression_value_41, mod_consts[54]);
                    Py_DECREF(tmp_expression_value_41);
                    if (tmp_tuple_element_17 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 54;
                        type_description_2 = "o";
                        goto tuple_build_exception_12;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_2, 1, tmp_tuple_element_17);
                }
                goto tuple_build_noexception_12;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_12:;
                Py_DECREF(tmp_list_element_2);
                goto list_build_exception_2;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_12:;
                PyList_SET_ITEM(tmp_dictset_value, 6, tmp_list_element_2);
            }
            goto list_build_noexception_2;
            // Exception handling pass through code for list_build:
            list_build_exception_2:;
            Py_DECREF(tmp_dictset_value);
            goto frame_exception_exit_3;
            // Finished with no exception for list_build:
            list_build_noexception_2:;
            tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__2_hsa_queue_t_44, mod_consts[57], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 47;
                type_description_2 = "o";
                goto frame_exception_exit_3;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a441998b0ea2dc83684515950f20f5ec_3);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_2;

        frame_exception_exit_3:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a441998b0ea2dc83684515950f20f5ec_3);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_a441998b0ea2dc83684515950f20f5ec_3, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_a441998b0ea2dc83684515950f20f5ec_3->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_a441998b0ea2dc83684515950f20f5ec_3, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_a441998b0ea2dc83684515950f20f5ec_3,
            type_description_2,
            outline_1_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_a441998b0ea2dc83684515950f20f5ec_3 == cache_frame_a441998b0ea2dc83684515950f20f5ec_3) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_a441998b0ea2dc83684515950f20f5ec_3);
            cache_frame_a441998b0ea2dc83684515950f20f5ec_3 = NULL;
        }

        assertFrameObject(frame_a441998b0ea2dc83684515950f20f5ec_3);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_2;

        frame_no_exception_2:;
        goto skip_nested_handling_2;
        nested_frame_exit_2:;

        goto try_except_handler_7;
        skip_nested_handling_2:;
        {
            nuitka_bool tmp_condition_result_13;
            PyObject *tmp_cmp_expr_left_2;
            PyObject *tmp_cmp_expr_right_2;
            CHECK_OBJECT(tmp_class_creation_2__bases);
            tmp_cmp_expr_left_2 = tmp_class_creation_2__bases;
            CHECK_OBJECT(tmp_class_creation_2__bases_orig);
            tmp_cmp_expr_right_2 = tmp_class_creation_2__bases_orig;
            tmp_condition_result_13 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_2, tmp_cmp_expr_right_2);
            if (tmp_condition_result_13 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 44;

                goto try_except_handler_7;
            }
            if (tmp_condition_result_13 == NUITKA_BOOL_TRUE) {
                goto branch_yes_8;
            } else {
                goto branch_no_8;
            }
            assert(tmp_condition_result_13 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_8:;
        CHECK_OBJECT(tmp_class_creation_2__bases_orig);
        tmp_dictset_value = tmp_class_creation_2__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__2_hsa_queue_t_44, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 44;

            goto try_except_handler_7;
        }
        branch_no_8:;
        {
            PyObject *tmp_assign_source_48;
            PyObject *tmp_called_value_4;
            PyObject *tmp_args_value_4;
            PyObject *tmp_tuple_element_18;
            PyObject *tmp_kwargs_value_4;
            CHECK_OBJECT(tmp_class_creation_2__metaclass);
            tmp_called_value_4 = tmp_class_creation_2__metaclass;
            tmp_tuple_element_18 = mod_consts[79];
            tmp_args_value_4 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_4, 0, tmp_tuple_element_18);
            CHECK_OBJECT(tmp_class_creation_2__bases);
            tmp_tuple_element_18 = tmp_class_creation_2__bases;
            PyTuple_SET_ITEM0(tmp_args_value_4, 1, tmp_tuple_element_18);
            tmp_tuple_element_18 = locals_numba$roc$hsadrv$drvapi$$$class__2_hsa_queue_t_44;
            PyTuple_SET_ITEM0(tmp_args_value_4, 2, tmp_tuple_element_18);
            CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
            tmp_kwargs_value_4 = tmp_class_creation_2__class_decl_dict;
            frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 44;
            tmp_assign_source_48 = CALL_FUNCTION(tmp_called_value_4, tmp_args_value_4, tmp_kwargs_value_4);
            Py_DECREF(tmp_args_value_4);
            if (tmp_assign_source_48 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 44;

                goto try_except_handler_7;
            }
            assert(outline_1_var___class__ == NULL);
            outline_1_var___class__ = tmp_assign_source_48;
        }
        CHECK_OBJECT(outline_1_var___class__);
        tmp_assign_source_47 = outline_1_var___class__;
        Py_INCREF(tmp_assign_source_47);
        goto try_return_handler_7;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_7:;
        Py_DECREF(locals_numba$roc$hsadrv$drvapi$$$class__2_hsa_queue_t_44);
        locals_numba$roc$hsadrv$drvapi$$$class__2_hsa_queue_t_44 = NULL;
        goto try_return_handler_6;
        // Exception handler code:
        try_except_handler_7:;
        exception_keeper_type_5 = exception_type;
        exception_keeper_value_5 = exception_value;
        exception_keeper_tb_5 = exception_tb;
        exception_keeper_lineno_5 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$roc$hsadrv$drvapi$$$class__2_hsa_queue_t_44);
        locals_numba$roc$hsadrv$drvapi$$$class__2_hsa_queue_t_44 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;
        exception_lineno = exception_keeper_lineno_5;

        goto try_except_handler_6;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_6:;
        CHECK_OBJECT(outline_1_var___class__);
        Py_DECREF(outline_1_var___class__);
        outline_1_var___class__ = NULL;
        goto outline_result_2;
        // Exception handler code:
        try_except_handler_6:;
        exception_keeper_type_6 = exception_type;
        exception_keeper_value_6 = exception_value;
        exception_keeper_tb_6 = exception_tb;
        exception_keeper_lineno_6 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;
        exception_lineno = exception_keeper_lineno_6;

        goto outline_exception_2;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_2:;
        exception_lineno = 44;
        goto try_except_handler_5;
        outline_result_2:;
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[79], tmp_assign_source_47);
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_2__bases_orig);
    tmp_class_creation_2__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_2__bases);
    tmp_class_creation_2__bases = NULL;
    Py_XDECREF(tmp_class_creation_2__class_decl_dict);
    tmp_class_creation_2__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_2__metaclass);
    tmp_class_creation_2__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_2__prepared);
    tmp_class_creation_2__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    CHECK_OBJECT(tmp_class_creation_2__bases_orig);
    Py_DECREF(tmp_class_creation_2__bases_orig);
    tmp_class_creation_2__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_2__bases);
    Py_DECREF(tmp_class_creation_2__bases);
    tmp_class_creation_2__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
    Py_DECREF(tmp_class_creation_2__class_decl_dict);
    tmp_class_creation_2__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_2__metaclass);
    Py_DECREF(tmp_class_creation_2__metaclass);
    tmp_class_creation_2__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_2__prepared);
    Py_DECREF(tmp_class_creation_2__prepared);
    tmp_class_creation_2__prepared = NULL;
    {
        PyObject *tmp_assign_source_49;
        PyObject *tmp_expression_value_42;
        tmp_expression_value_42 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_42 == NULL)) {
            tmp_expression_value_42 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_42 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 56;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_49 = LOOKUP_ATTRIBUTE(tmp_expression_value_42, mod_consts[41]);
        if (tmp_assign_source_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 56;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[89], tmp_assign_source_49);
    }
    {
        PyObject *tmp_assign_source_50;
        PyObject *tmp_expression_value_43;
        tmp_expression_value_43 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_43 == NULL)) {
            tmp_expression_value_43 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_43 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_50 = LOOKUP_ATTRIBUTE(tmp_expression_value_43, mod_consts[41]);
        if (tmp_assign_source_50 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[90], tmp_assign_source_50);
    }
    {
        PyObject *tmp_assign_source_51;
        PyObject *tmp_expression_value_44;
        tmp_expression_value_44 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_44 == NULL)) {
            tmp_expression_value_44 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 58;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_51 = LOOKUP_ATTRIBUTE(tmp_expression_value_44, mod_consts[41]);
        if (tmp_assign_source_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 58;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[91], tmp_assign_source_51);
    }
    {
        PyObject *tmp_assign_source_52;
        PyObject *tmp_expression_value_45;
        tmp_expression_value_45 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_45 == NULL)) {
            tmp_expression_value_45 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_45 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 59;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_52 = LOOKUP_ATTRIBUTE(tmp_expression_value_45, mod_consts[41]);
        if (tmp_assign_source_52 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 59;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[92], tmp_assign_source_52);
    }
    {
        PyObject *tmp_assign_source_53;
        PyObject *tmp_expression_value_46;
        tmp_expression_value_46 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_46 == NULL)) {
            tmp_expression_value_46 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_46 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 60;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_53 = LOOKUP_ATTRIBUTE(tmp_expression_value_46, mod_consts[41]);
        if (tmp_assign_source_53 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 60;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[93], tmp_assign_source_53);
    }
    {
        PyObject *tmp_assign_source_54;
        PyObject *tmp_expression_value_47;
        tmp_expression_value_47 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_47 == NULL)) {
            tmp_expression_value_47 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_47 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 61;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_54 = LOOKUP_ATTRIBUTE(tmp_expression_value_47, mod_consts[41]);
        if (tmp_assign_source_54 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 61;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[94], tmp_assign_source_54);
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_55;
        PyObject *tmp_tuple_element_19;
        PyObject *tmp_expression_value_48;
        tmp_expression_value_48 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_48 == NULL)) {
            tmp_expression_value_48 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_48 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 62;

            goto try_except_handler_8;
        }
        tmp_tuple_element_19 = LOOKUP_ATTRIBUTE(tmp_expression_value_48, mod_consts[43]);
        if (tmp_tuple_element_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 62;

            goto try_except_handler_8;
        }
        tmp_assign_source_55 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_assign_source_55, 0, tmp_tuple_element_19);
        assert(tmp_class_creation_3__bases_orig == NULL);
        tmp_class_creation_3__bases_orig = tmp_assign_source_55;
    }
    {
        PyObject *tmp_assign_source_56;
        PyObject *tmp_dircall_arg1_3;
        CHECK_OBJECT(tmp_class_creation_3__bases_orig);
        tmp_dircall_arg1_3 = tmp_class_creation_3__bases_orig;
        Py_INCREF(tmp_dircall_arg1_3);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_3};
            tmp_assign_source_56 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_56 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 62;

            goto try_except_handler_8;
        }
        assert(tmp_class_creation_3__bases == NULL);
        tmp_class_creation_3__bases = tmp_assign_source_56;
    }
    {
        PyObject *tmp_assign_source_57;
        tmp_assign_source_57 = PyDict_New();
        assert(tmp_class_creation_3__class_decl_dict == NULL);
        tmp_class_creation_3__class_decl_dict = tmp_assign_source_57;
    }
    {
        PyObject *tmp_assign_source_58;
        PyObject *tmp_metaclass_value_3;
        bool tmp_condition_result_14;
        PyObject *tmp_key_value_7;
        PyObject *tmp_dict_arg_value_7;
        PyObject *tmp_dict_arg_value_8;
        PyObject *tmp_key_value_8;
        nuitka_bool tmp_condition_result_15;
        int tmp_truth_name_4;
        PyObject *tmp_type_arg_5;
        PyObject *tmp_expression_value_49;
        PyObject *tmp_subscript_value_3;
        PyObject *tmp_bases_value_3;
        tmp_key_value_7 = mod_consts[44];
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_dict_arg_value_7 = tmp_class_creation_3__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_7, tmp_key_value_7);
        assert(!(tmp_res == -1));
        tmp_condition_result_14 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_14 != false) {
            goto condexpr_true_6;
        } else {
            goto condexpr_false_6;
        }
        condexpr_true_6:;
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_dict_arg_value_8 = tmp_class_creation_3__class_decl_dict;
        tmp_key_value_8 = mod_consts[44];
        tmp_metaclass_value_3 = DICT_GET_ITEM0(tmp_dict_arg_value_8, tmp_key_value_8);
        if (tmp_metaclass_value_3 == NULL) {
            tmp_metaclass_value_3 = Py_None;
        }
        assert(!(tmp_metaclass_value_3 == NULL));
        Py_INCREF(tmp_metaclass_value_3);
        goto condexpr_end_6;
        condexpr_false_6:;
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_truth_name_4 = CHECK_IF_TRUE(tmp_class_creation_3__bases);
        if (tmp_truth_name_4 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 62;

            goto try_except_handler_8;
        }
        tmp_condition_result_15 = tmp_truth_name_4 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_15 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_7;
        } else {
            goto condexpr_false_7;
        }
        condexpr_true_7:;
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_expression_value_49 = tmp_class_creation_3__bases;
        tmp_subscript_value_3 = mod_consts[29];
        tmp_type_arg_5 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_49, tmp_subscript_value_3, 0);
        if (tmp_type_arg_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 62;

            goto try_except_handler_8;
        }
        tmp_metaclass_value_3 = BUILTIN_TYPE1(tmp_type_arg_5);
        Py_DECREF(tmp_type_arg_5);
        if (tmp_metaclass_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 62;

            goto try_except_handler_8;
        }
        goto condexpr_end_7;
        condexpr_false_7:;
        tmp_metaclass_value_3 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_3);
        condexpr_end_7:;
        condexpr_end_6:;
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_bases_value_3 = tmp_class_creation_3__bases;
        tmp_assign_source_58 = SELECT_METACLASS(tmp_metaclass_value_3, tmp_bases_value_3);
        Py_DECREF(tmp_metaclass_value_3);
        if (tmp_assign_source_58 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 62;

            goto try_except_handler_8;
        }
        assert(tmp_class_creation_3__metaclass == NULL);
        tmp_class_creation_3__metaclass = tmp_assign_source_58;
    }
    {
        bool tmp_condition_result_16;
        PyObject *tmp_key_value_9;
        PyObject *tmp_dict_arg_value_9;
        tmp_key_value_9 = mod_consts[44];
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_dict_arg_value_9 = tmp_class_creation_3__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_9, tmp_key_value_9);
        assert(!(tmp_res == -1));
        tmp_condition_result_16 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_16 != false) {
            goto branch_yes_9;
        } else {
            goto branch_no_9;
        }
    }
    branch_yes_9:;
    CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_3__class_decl_dict;
    tmp_dictdel_key = mod_consts[44];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 62;

        goto try_except_handler_8;
    }
    branch_no_9:;
    {
        nuitka_bool tmp_condition_result_17;
        PyObject *tmp_expression_value_50;
        CHECK_OBJECT(tmp_class_creation_3__metaclass);
        tmp_expression_value_50 = tmp_class_creation_3__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_50, mod_consts[45]);
        tmp_condition_result_17 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_17 == NUITKA_BOOL_TRUE) {
            goto branch_yes_10;
        } else {
            goto branch_no_10;
        }
    }
    branch_yes_10:;
    {
        PyObject *tmp_assign_source_59;
        PyObject *tmp_called_value_5;
        PyObject *tmp_expression_value_51;
        PyObject *tmp_args_value_5;
        PyObject *tmp_tuple_element_20;
        PyObject *tmp_kwargs_value_5;
        CHECK_OBJECT(tmp_class_creation_3__metaclass);
        tmp_expression_value_51 = tmp_class_creation_3__metaclass;
        tmp_called_value_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_51, mod_consts[45]);
        if (tmp_called_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 62;

            goto try_except_handler_8;
        }
        tmp_tuple_element_20 = mod_consts[95];
        tmp_args_value_5 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_5, 0, tmp_tuple_element_20);
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_tuple_element_20 = tmp_class_creation_3__bases;
        PyTuple_SET_ITEM0(tmp_args_value_5, 1, tmp_tuple_element_20);
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_kwargs_value_5 = tmp_class_creation_3__class_decl_dict;
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 62;
        tmp_assign_source_59 = CALL_FUNCTION(tmp_called_value_5, tmp_args_value_5, tmp_kwargs_value_5);
        Py_DECREF(tmp_called_value_5);
        Py_DECREF(tmp_args_value_5);
        if (tmp_assign_source_59 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 62;

            goto try_except_handler_8;
        }
        assert(tmp_class_creation_3__prepared == NULL);
        tmp_class_creation_3__prepared = tmp_assign_source_59;
    }
    {
        bool tmp_condition_result_18;
        PyObject *tmp_operand_value_3;
        PyObject *tmp_expression_value_52;
        CHECK_OBJECT(tmp_class_creation_3__prepared);
        tmp_expression_value_52 = tmp_class_creation_3__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_52, mod_consts[47]);
        tmp_operand_value_3 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_3);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 62;

            goto try_except_handler_8;
        }
        tmp_condition_result_18 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_18 != false) {
            goto branch_yes_11;
        } else {
            goto branch_no_11;
        }
    }
    branch_yes_11:;
    {
        PyObject *tmp_raise_type_3;
        PyObject *tmp_raise_value_3;
        PyObject *tmp_left_value_3;
        PyObject *tmp_right_value_3;
        PyObject *tmp_tuple_element_21;
        PyObject *tmp_getattr_target_3;
        PyObject *tmp_getattr_attr_3;
        PyObject *tmp_getattr_default_3;
        tmp_raise_type_3 = PyExc_TypeError;
        tmp_left_value_3 = mod_consts[48];
        CHECK_OBJECT(tmp_class_creation_3__metaclass);
        tmp_getattr_target_3 = tmp_class_creation_3__metaclass;
        tmp_getattr_attr_3 = mod_consts[15];
        tmp_getattr_default_3 = mod_consts[49];
        tmp_tuple_element_21 = BUILTIN_GETATTR(tmp_getattr_target_3, tmp_getattr_attr_3, tmp_getattr_default_3);
        if (tmp_tuple_element_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 62;

            goto try_except_handler_8;
        }
        tmp_right_value_3 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_53;
            PyObject *tmp_type_arg_6;
            PyTuple_SET_ITEM(tmp_right_value_3, 0, tmp_tuple_element_21);
            CHECK_OBJECT(tmp_class_creation_3__prepared);
            tmp_type_arg_6 = tmp_class_creation_3__prepared;
            tmp_expression_value_53 = BUILTIN_TYPE1(tmp_type_arg_6);
            assert(!(tmp_expression_value_53 == NULL));
            tmp_tuple_element_21 = LOOKUP_ATTRIBUTE(tmp_expression_value_53, mod_consts[15]);
            Py_DECREF(tmp_expression_value_53);
            if (tmp_tuple_element_21 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 62;

                goto tuple_build_exception_13;
            }
            PyTuple_SET_ITEM(tmp_right_value_3, 1, tmp_tuple_element_21);
        }
        goto tuple_build_noexception_13;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_13:;
        Py_DECREF(tmp_right_value_3);
        goto try_except_handler_8;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_13:;
        tmp_raise_value_3 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_3, tmp_right_value_3);
        Py_DECREF(tmp_right_value_3);
        if (tmp_raise_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 62;

            goto try_except_handler_8;
        }
        exception_type = tmp_raise_type_3;
        Py_INCREF(tmp_raise_type_3);
        exception_value = tmp_raise_value_3;
        exception_lineno = 62;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_8;
    }
    branch_no_11:;
    goto branch_end_10;
    branch_no_10:;
    {
        PyObject *tmp_assign_source_60;
        tmp_assign_source_60 = PyDict_New();
        assert(tmp_class_creation_3__prepared == NULL);
        tmp_class_creation_3__prepared = tmp_assign_source_60;
    }
    branch_end_10:;
    {
        PyObject *tmp_assign_source_61;
        {
            PyObject *tmp_set_locals_3;
            CHECK_OBJECT(tmp_class_creation_3__prepared);
            tmp_set_locals_3 = tmp_class_creation_3__prepared;
            locals_numba$roc$hsadrv$drvapi$$$class__3_hsa_kernel_dispatch_packet_t_62 = tmp_set_locals_3;
            Py_INCREF(tmp_set_locals_3);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__3_hsa_kernel_dispatch_packet_t_62, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 62;

            goto try_except_handler_10;
        }
        tmp_dictset_value = mod_consts[95];
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__3_hsa_kernel_dispatch_packet_t_62, mod_consts[52], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 62;

            goto try_except_handler_10;
        }
        if (isFrameUnusable(cache_frame_a691ad939bd4c09d7c61a188cb9026c5_4)) {
            Py_XDECREF(cache_frame_a691ad939bd4c09d7c61a188cb9026c5_4);

#if _DEBUG_REFCOUNTS
            if (cache_frame_a691ad939bd4c09d7c61a188cb9026c5_4 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_a691ad939bd4c09d7c61a188cb9026c5_4 = MAKE_FUNCTION_FRAME(codeobj_a691ad939bd4c09d7c61a188cb9026c5, module_numba$roc$hsadrv$drvapi, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_a691ad939bd4c09d7c61a188cb9026c5_4->m_type_description == NULL);
        frame_a691ad939bd4c09d7c61a188cb9026c5_4 = cache_frame_a691ad939bd4c09d7c61a188cb9026c5_4;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_a691ad939bd4c09d7c61a188cb9026c5_4);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_a691ad939bd4c09d7c61a188cb9026c5_4) == 2); // Frame stack

        // Framed code:
        {
            PyObject *tmp_list_element_3;
            PyObject *tmp_tuple_element_22;
            tmp_tuple_element_22 = mod_consts[96];
            tmp_list_element_3 = PyTuple_New(2);
            {
                PyObject *tmp_expression_value_54;
                PyTuple_SET_ITEM0(tmp_list_element_3, 0, tmp_tuple_element_22);
                tmp_expression_value_54 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__3_hsa_kernel_dispatch_packet_t_62, mod_consts[28]);

                if (tmp_expression_value_54 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_54 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                        if (unlikely(tmp_expression_value_54 == NULL)) {
                            tmp_expression_value_54 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                        }

                        if (tmp_expression_value_54 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 64;
                            type_description_2 = "o";
                            goto tuple_build_exception_14;
                        }
                        Py_INCREF(tmp_expression_value_54);
                    } else {
                        goto tuple_build_exception_14;
                    }
                }

                tmp_tuple_element_22 = LOOKUP_ATTRIBUTE(tmp_expression_value_54, mod_consts[97]);
                Py_DECREF(tmp_expression_value_54);
                if (tmp_tuple_element_22 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 64;
                    type_description_2 = "o";
                    goto tuple_build_exception_14;
                }
                PyTuple_SET_ITEM(tmp_list_element_3, 1, tmp_tuple_element_22);
            }
            goto tuple_build_noexception_14;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_14:;
            Py_DECREF(tmp_list_element_3);
            goto frame_exception_exit_4;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_14:;
            tmp_dictset_value = PyList_New(15);
            {
                PyObject *tmp_tuple_element_23;
                PyObject *tmp_tuple_element_24;
                PyObject *tmp_tuple_element_25;
                PyObject *tmp_tuple_element_26;
                PyObject *tmp_tuple_element_27;
                PyObject *tmp_tuple_element_28;
                PyObject *tmp_tuple_element_29;
                PyObject *tmp_tuple_element_30;
                PyObject *tmp_tuple_element_31;
                PyObject *tmp_tuple_element_32;
                PyObject *tmp_tuple_element_33;
                PyObject *tmp_tuple_element_34;
                PyObject *tmp_tuple_element_35;
                PyObject *tmp_tuple_element_36;
                PyList_SET_ITEM(tmp_dictset_value, 0, tmp_list_element_3);
                tmp_tuple_element_23 = mod_consts[98];
                tmp_list_element_3 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_55;
                    PyTuple_SET_ITEM0(tmp_list_element_3, 0, tmp_tuple_element_23);
                    tmp_expression_value_55 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__3_hsa_kernel_dispatch_packet_t_62, mod_consts[28]);

                    if (tmp_expression_value_55 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_55 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_55 == NULL)) {
                                tmp_expression_value_55 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_55 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 65;
                                type_description_2 = "o";
                                goto tuple_build_exception_15;
                            }
                            Py_INCREF(tmp_expression_value_55);
                        } else {
                            goto tuple_build_exception_15;
                        }
                    }

                    tmp_tuple_element_23 = LOOKUP_ATTRIBUTE(tmp_expression_value_55, mod_consts[97]);
                    Py_DECREF(tmp_expression_value_55);
                    if (tmp_tuple_element_23 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 65;
                        type_description_2 = "o";
                        goto tuple_build_exception_15;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_3, 1, tmp_tuple_element_23);
                }
                goto tuple_build_noexception_15;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_15:;
                Py_DECREF(tmp_list_element_3);
                goto list_build_exception_3;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_15:;
                PyList_SET_ITEM(tmp_dictset_value, 1, tmp_list_element_3);
                tmp_tuple_element_24 = mod_consts[99];
                tmp_list_element_3 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_56;
                    PyTuple_SET_ITEM0(tmp_list_element_3, 0, tmp_tuple_element_24);
                    tmp_expression_value_56 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__3_hsa_kernel_dispatch_packet_t_62, mod_consts[28]);

                    if (tmp_expression_value_56 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_56 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_56 == NULL)) {
                                tmp_expression_value_56 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_56 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 66;
                                type_description_2 = "o";
                                goto tuple_build_exception_16;
                            }
                            Py_INCREF(tmp_expression_value_56);
                        } else {
                            goto tuple_build_exception_16;
                        }
                    }

                    tmp_tuple_element_24 = LOOKUP_ATTRIBUTE(tmp_expression_value_56, mod_consts[97]);
                    Py_DECREF(tmp_expression_value_56);
                    if (tmp_tuple_element_24 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 66;
                        type_description_2 = "o";
                        goto tuple_build_exception_16;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_3, 1, tmp_tuple_element_24);
                }
                goto tuple_build_noexception_16;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_16:;
                Py_DECREF(tmp_list_element_3);
                goto list_build_exception_3;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_16:;
                PyList_SET_ITEM(tmp_dictset_value, 2, tmp_list_element_3);
                tmp_tuple_element_25 = mod_consts[100];
                tmp_list_element_3 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_57;
                    PyTuple_SET_ITEM0(tmp_list_element_3, 0, tmp_tuple_element_25);
                    tmp_expression_value_57 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__3_hsa_kernel_dispatch_packet_t_62, mod_consts[28]);

                    if (tmp_expression_value_57 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_57 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_57 == NULL)) {
                                tmp_expression_value_57 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_57 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 67;
                                type_description_2 = "o";
                                goto tuple_build_exception_17;
                            }
                            Py_INCREF(tmp_expression_value_57);
                        } else {
                            goto tuple_build_exception_17;
                        }
                    }

                    tmp_tuple_element_25 = LOOKUP_ATTRIBUTE(tmp_expression_value_57, mod_consts[97]);
                    Py_DECREF(tmp_expression_value_57);
                    if (tmp_tuple_element_25 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 67;
                        type_description_2 = "o";
                        goto tuple_build_exception_17;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_3, 1, tmp_tuple_element_25);
                }
                goto tuple_build_noexception_17;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_17:;
                Py_DECREF(tmp_list_element_3);
                goto list_build_exception_3;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_17:;
                PyList_SET_ITEM(tmp_dictset_value, 3, tmp_list_element_3);
                tmp_tuple_element_26 = mod_consts[101];
                tmp_list_element_3 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_58;
                    PyTuple_SET_ITEM0(tmp_list_element_3, 0, tmp_tuple_element_26);
                    tmp_expression_value_58 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__3_hsa_kernel_dispatch_packet_t_62, mod_consts[28]);

                    if (tmp_expression_value_58 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_58 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_58 == NULL)) {
                                tmp_expression_value_58 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_58 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 68;
                                type_description_2 = "o";
                                goto tuple_build_exception_18;
                            }
                            Py_INCREF(tmp_expression_value_58);
                        } else {
                            goto tuple_build_exception_18;
                        }
                    }

                    tmp_tuple_element_26 = LOOKUP_ATTRIBUTE(tmp_expression_value_58, mod_consts[97]);
                    Py_DECREF(tmp_expression_value_58);
                    if (tmp_tuple_element_26 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 68;
                        type_description_2 = "o";
                        goto tuple_build_exception_18;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_3, 1, tmp_tuple_element_26);
                }
                goto tuple_build_noexception_18;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_18:;
                Py_DECREF(tmp_list_element_3);
                goto list_build_exception_3;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_18:;
                PyList_SET_ITEM(tmp_dictset_value, 4, tmp_list_element_3);
                tmp_tuple_element_27 = mod_consts[102];
                tmp_list_element_3 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_59;
                    PyTuple_SET_ITEM0(tmp_list_element_3, 0, tmp_tuple_element_27);
                    tmp_expression_value_59 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__3_hsa_kernel_dispatch_packet_t_62, mod_consts[28]);

                    if (tmp_expression_value_59 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_59 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_59 == NULL)) {
                                tmp_expression_value_59 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_59 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 69;
                                type_description_2 = "o";
                                goto tuple_build_exception_19;
                            }
                            Py_INCREF(tmp_expression_value_59);
                        } else {
                            goto tuple_build_exception_19;
                        }
                    }

                    tmp_tuple_element_27 = LOOKUP_ATTRIBUTE(tmp_expression_value_59, mod_consts[97]);
                    Py_DECREF(tmp_expression_value_59);
                    if (tmp_tuple_element_27 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 69;
                        type_description_2 = "o";
                        goto tuple_build_exception_19;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_3, 1, tmp_tuple_element_27);
                }
                goto tuple_build_noexception_19;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_19:;
                Py_DECREF(tmp_list_element_3);
                goto list_build_exception_3;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_19:;
                PyList_SET_ITEM(tmp_dictset_value, 5, tmp_list_element_3);
                tmp_tuple_element_28 = mod_consts[103];
                tmp_list_element_3 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_60;
                    PyTuple_SET_ITEM0(tmp_list_element_3, 0, tmp_tuple_element_28);
                    tmp_expression_value_60 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__3_hsa_kernel_dispatch_packet_t_62, mod_consts[28]);

                    if (tmp_expression_value_60 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_60 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_60 == NULL)) {
                                tmp_expression_value_60 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_60 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 70;
                                type_description_2 = "o";
                                goto tuple_build_exception_20;
                            }
                            Py_INCREF(tmp_expression_value_60);
                        } else {
                            goto tuple_build_exception_20;
                        }
                    }

                    tmp_tuple_element_28 = LOOKUP_ATTRIBUTE(tmp_expression_value_60, mod_consts[54]);
                    Py_DECREF(tmp_expression_value_60);
                    if (tmp_tuple_element_28 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 70;
                        type_description_2 = "o";
                        goto tuple_build_exception_20;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_3, 1, tmp_tuple_element_28);
                }
                goto tuple_build_noexception_20;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_20:;
                Py_DECREF(tmp_list_element_3);
                goto list_build_exception_3;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_20:;
                PyList_SET_ITEM(tmp_dictset_value, 6, tmp_list_element_3);
                tmp_tuple_element_29 = mod_consts[104];
                tmp_list_element_3 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_61;
                    PyTuple_SET_ITEM0(tmp_list_element_3, 0, tmp_tuple_element_29);
                    tmp_expression_value_61 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__3_hsa_kernel_dispatch_packet_t_62, mod_consts[28]);

                    if (tmp_expression_value_61 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_61 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_61 == NULL)) {
                                tmp_expression_value_61 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_61 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 71;
                                type_description_2 = "o";
                                goto tuple_build_exception_21;
                            }
                            Py_INCREF(tmp_expression_value_61);
                        } else {
                            goto tuple_build_exception_21;
                        }
                    }

                    tmp_tuple_element_29 = LOOKUP_ATTRIBUTE(tmp_expression_value_61, mod_consts[54]);
                    Py_DECREF(tmp_expression_value_61);
                    if (tmp_tuple_element_29 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 71;
                        type_description_2 = "o";
                        goto tuple_build_exception_21;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_3, 1, tmp_tuple_element_29);
                }
                goto tuple_build_noexception_21;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_21:;
                Py_DECREF(tmp_list_element_3);
                goto list_build_exception_3;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_21:;
                PyList_SET_ITEM(tmp_dictset_value, 7, tmp_list_element_3);
                tmp_tuple_element_30 = mod_consts[105];
                tmp_list_element_3 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_62;
                    PyTuple_SET_ITEM0(tmp_list_element_3, 0, tmp_tuple_element_30);
                    tmp_expression_value_62 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__3_hsa_kernel_dispatch_packet_t_62, mod_consts[28]);

                    if (tmp_expression_value_62 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_62 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_62 == NULL)) {
                                tmp_expression_value_62 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_62 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 72;
                                type_description_2 = "o";
                                goto tuple_build_exception_22;
                            }
                            Py_INCREF(tmp_expression_value_62);
                        } else {
                            goto tuple_build_exception_22;
                        }
                    }

                    tmp_tuple_element_30 = LOOKUP_ATTRIBUTE(tmp_expression_value_62, mod_consts[54]);
                    Py_DECREF(tmp_expression_value_62);
                    if (tmp_tuple_element_30 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 72;
                        type_description_2 = "o";
                        goto tuple_build_exception_22;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_3, 1, tmp_tuple_element_30);
                }
                goto tuple_build_noexception_22;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_22:;
                Py_DECREF(tmp_list_element_3);
                goto list_build_exception_3;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_22:;
                PyList_SET_ITEM(tmp_dictset_value, 8, tmp_list_element_3);
                tmp_tuple_element_31 = mod_consts[106];
                tmp_list_element_3 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_63;
                    PyTuple_SET_ITEM0(tmp_list_element_3, 0, tmp_tuple_element_31);
                    tmp_expression_value_63 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__3_hsa_kernel_dispatch_packet_t_62, mod_consts[28]);

                    if (tmp_expression_value_63 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_63 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_63 == NULL)) {
                                tmp_expression_value_63 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_63 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 73;
                                type_description_2 = "o";
                                goto tuple_build_exception_23;
                            }
                            Py_INCREF(tmp_expression_value_63);
                        } else {
                            goto tuple_build_exception_23;
                        }
                    }

                    tmp_tuple_element_31 = LOOKUP_ATTRIBUTE(tmp_expression_value_63, mod_consts[54]);
                    Py_DECREF(tmp_expression_value_63);
                    if (tmp_tuple_element_31 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 73;
                        type_description_2 = "o";
                        goto tuple_build_exception_23;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_3, 1, tmp_tuple_element_31);
                }
                goto tuple_build_noexception_23;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_23:;
                Py_DECREF(tmp_list_element_3);
                goto list_build_exception_3;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_23:;
                PyList_SET_ITEM(tmp_dictset_value, 9, tmp_list_element_3);
                tmp_tuple_element_32 = mod_consts[107];
                tmp_list_element_3 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_64;
                    PyTuple_SET_ITEM0(tmp_list_element_3, 0, tmp_tuple_element_32);
                    tmp_expression_value_64 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__3_hsa_kernel_dispatch_packet_t_62, mod_consts[28]);

                    if (tmp_expression_value_64 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_64 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_64 == NULL)) {
                                tmp_expression_value_64 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_64 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 74;
                                type_description_2 = "o";
                                goto tuple_build_exception_24;
                            }
                            Py_INCREF(tmp_expression_value_64);
                        } else {
                            goto tuple_build_exception_24;
                        }
                    }

                    tmp_tuple_element_32 = LOOKUP_ATTRIBUTE(tmp_expression_value_64, mod_consts[54]);
                    Py_DECREF(tmp_expression_value_64);
                    if (tmp_tuple_element_32 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 74;
                        type_description_2 = "o";
                        goto tuple_build_exception_24;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_3, 1, tmp_tuple_element_32);
                }
                goto tuple_build_noexception_24;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_24:;
                Py_DECREF(tmp_list_element_3);
                goto list_build_exception_3;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_24:;
                PyList_SET_ITEM(tmp_dictset_value, 10, tmp_list_element_3);
                tmp_tuple_element_33 = mod_consts[108];
                tmp_list_element_3 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_65;
                    PyTuple_SET_ITEM0(tmp_list_element_3, 0, tmp_tuple_element_33);
                    tmp_expression_value_65 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__3_hsa_kernel_dispatch_packet_t_62, mod_consts[28]);

                    if (tmp_expression_value_65 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_65 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_65 == NULL)) {
                                tmp_expression_value_65 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_65 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 75;
                                type_description_2 = "o";
                                goto tuple_build_exception_25;
                            }
                            Py_INCREF(tmp_expression_value_65);
                        } else {
                            goto tuple_build_exception_25;
                        }
                    }

                    tmp_tuple_element_33 = LOOKUP_ATTRIBUTE(tmp_expression_value_65, mod_consts[39]);
                    Py_DECREF(tmp_expression_value_65);
                    if (tmp_tuple_element_33 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 75;
                        type_description_2 = "o";
                        goto tuple_build_exception_25;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_3, 1, tmp_tuple_element_33);
                }
                goto tuple_build_noexception_25;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_25:;
                Py_DECREF(tmp_list_element_3);
                goto list_build_exception_3;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_25:;
                PyList_SET_ITEM(tmp_dictset_value, 11, tmp_list_element_3);
                tmp_tuple_element_34 = mod_consts[109];
                tmp_list_element_3 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_66;
                    PyTuple_SET_ITEM0(tmp_list_element_3, 0, tmp_tuple_element_34);
                    tmp_expression_value_66 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__3_hsa_kernel_dispatch_packet_t_62, mod_consts[28]);

                    if (tmp_expression_value_66 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_66 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_66 == NULL)) {
                                tmp_expression_value_66 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_66 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 78;
                                type_description_2 = "o";
                                goto tuple_build_exception_26;
                            }
                            Py_INCREF(tmp_expression_value_66);
                        } else {
                            goto tuple_build_exception_26;
                        }
                    }

                    tmp_tuple_element_34 = LOOKUP_ATTRIBUTE(tmp_expression_value_66, mod_consts[39]);
                    Py_DECREF(tmp_expression_value_66);
                    if (tmp_tuple_element_34 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 78;
                        type_description_2 = "o";
                        goto tuple_build_exception_26;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_3, 1, tmp_tuple_element_34);
                }
                goto tuple_build_noexception_26;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_26:;
                Py_DECREF(tmp_list_element_3);
                goto list_build_exception_3;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_26:;
                PyList_SET_ITEM(tmp_dictset_value, 12, tmp_list_element_3);
                tmp_tuple_element_35 = mod_consts[110];
                tmp_list_element_3 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_67;
                    PyTuple_SET_ITEM0(tmp_list_element_3, 0, tmp_tuple_element_35);
                    tmp_expression_value_67 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__3_hsa_kernel_dispatch_packet_t_62, mod_consts[28]);

                    if (tmp_expression_value_67 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_67 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_67 == NULL)) {
                                tmp_expression_value_67 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_67 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 80;
                                type_description_2 = "o";
                                goto tuple_build_exception_27;
                            }
                            Py_INCREF(tmp_expression_value_67);
                        } else {
                            goto tuple_build_exception_27;
                        }
                    }

                    tmp_tuple_element_35 = LOOKUP_ATTRIBUTE(tmp_expression_value_67, mod_consts[39]);
                    Py_DECREF(tmp_expression_value_67);
                    if (tmp_tuple_element_35 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 80;
                        type_description_2 = "o";
                        goto tuple_build_exception_27;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_3, 1, tmp_tuple_element_35);
                }
                goto tuple_build_noexception_27;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_27:;
                Py_DECREF(tmp_list_element_3);
                goto list_build_exception_3;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_27:;
                PyList_SET_ITEM(tmp_dictset_value, 13, tmp_list_element_3);
                tmp_tuple_element_36 = mod_consts[111];
                tmp_list_element_3 = PyTuple_New(2);
                PyTuple_SET_ITEM0(tmp_list_element_3, 0, tmp_tuple_element_36);
                tmp_tuple_element_36 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__3_hsa_kernel_dispatch_packet_t_62, mod_consts[71]);

                if (tmp_tuple_element_36 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_tuple_element_36 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                        if (unlikely(tmp_tuple_element_36 == NULL)) {
                            tmp_tuple_element_36 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                        }

                        if (tmp_tuple_element_36 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 81;
                            type_description_2 = "o";
                            goto tuple_build_exception_28;
                        }
                        Py_INCREF(tmp_tuple_element_36);
                    } else {
                        goto tuple_build_exception_28;
                    }
                }

                PyTuple_SET_ITEM(tmp_list_element_3, 1, tmp_tuple_element_36);
                goto tuple_build_noexception_28;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_28:;
                Py_DECREF(tmp_list_element_3);
                goto list_build_exception_3;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_28:;
                PyList_SET_ITEM(tmp_dictset_value, 14, tmp_list_element_3);
            }
            goto list_build_noexception_3;
            // Exception handling pass through code for list_build:
            list_build_exception_3:;
            Py_DECREF(tmp_dictset_value);
            goto frame_exception_exit_4;
            // Finished with no exception for list_build:
            list_build_noexception_3:;
            tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__3_hsa_kernel_dispatch_packet_t_62, mod_consts[57], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 63;
                type_description_2 = "o";
                goto frame_exception_exit_4;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a691ad939bd4c09d7c61a188cb9026c5_4);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_3;

        frame_exception_exit_4:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a691ad939bd4c09d7c61a188cb9026c5_4);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_a691ad939bd4c09d7c61a188cb9026c5_4, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_a691ad939bd4c09d7c61a188cb9026c5_4->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_a691ad939bd4c09d7c61a188cb9026c5_4, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_a691ad939bd4c09d7c61a188cb9026c5_4,
            type_description_2,
            outline_2_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_a691ad939bd4c09d7c61a188cb9026c5_4 == cache_frame_a691ad939bd4c09d7c61a188cb9026c5_4) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_a691ad939bd4c09d7c61a188cb9026c5_4);
            cache_frame_a691ad939bd4c09d7c61a188cb9026c5_4 = NULL;
        }

        assertFrameObject(frame_a691ad939bd4c09d7c61a188cb9026c5_4);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_3;

        frame_no_exception_3:;
        goto skip_nested_handling_3;
        nested_frame_exit_3:;

        goto try_except_handler_10;
        skip_nested_handling_3:;
        {
            nuitka_bool tmp_condition_result_19;
            PyObject *tmp_cmp_expr_left_3;
            PyObject *tmp_cmp_expr_right_3;
            CHECK_OBJECT(tmp_class_creation_3__bases);
            tmp_cmp_expr_left_3 = tmp_class_creation_3__bases;
            CHECK_OBJECT(tmp_class_creation_3__bases_orig);
            tmp_cmp_expr_right_3 = tmp_class_creation_3__bases_orig;
            tmp_condition_result_19 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_3, tmp_cmp_expr_right_3);
            if (tmp_condition_result_19 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 62;

                goto try_except_handler_10;
            }
            if (tmp_condition_result_19 == NUITKA_BOOL_TRUE) {
                goto branch_yes_12;
            } else {
                goto branch_no_12;
            }
            assert(tmp_condition_result_19 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_12:;
        CHECK_OBJECT(tmp_class_creation_3__bases_orig);
        tmp_dictset_value = tmp_class_creation_3__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__3_hsa_kernel_dispatch_packet_t_62, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 62;

            goto try_except_handler_10;
        }
        branch_no_12:;
        {
            PyObject *tmp_assign_source_62;
            PyObject *tmp_called_value_6;
            PyObject *tmp_args_value_6;
            PyObject *tmp_tuple_element_37;
            PyObject *tmp_kwargs_value_6;
            CHECK_OBJECT(tmp_class_creation_3__metaclass);
            tmp_called_value_6 = tmp_class_creation_3__metaclass;
            tmp_tuple_element_37 = mod_consts[95];
            tmp_args_value_6 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_6, 0, tmp_tuple_element_37);
            CHECK_OBJECT(tmp_class_creation_3__bases);
            tmp_tuple_element_37 = tmp_class_creation_3__bases;
            PyTuple_SET_ITEM0(tmp_args_value_6, 1, tmp_tuple_element_37);
            tmp_tuple_element_37 = locals_numba$roc$hsadrv$drvapi$$$class__3_hsa_kernel_dispatch_packet_t_62;
            PyTuple_SET_ITEM0(tmp_args_value_6, 2, tmp_tuple_element_37);
            CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
            tmp_kwargs_value_6 = tmp_class_creation_3__class_decl_dict;
            frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 62;
            tmp_assign_source_62 = CALL_FUNCTION(tmp_called_value_6, tmp_args_value_6, tmp_kwargs_value_6);
            Py_DECREF(tmp_args_value_6);
            if (tmp_assign_source_62 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 62;

                goto try_except_handler_10;
            }
            assert(outline_2_var___class__ == NULL);
            outline_2_var___class__ = tmp_assign_source_62;
        }
        CHECK_OBJECT(outline_2_var___class__);
        tmp_assign_source_61 = outline_2_var___class__;
        Py_INCREF(tmp_assign_source_61);
        goto try_return_handler_10;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_10:;
        Py_DECREF(locals_numba$roc$hsadrv$drvapi$$$class__3_hsa_kernel_dispatch_packet_t_62);
        locals_numba$roc$hsadrv$drvapi$$$class__3_hsa_kernel_dispatch_packet_t_62 = NULL;
        goto try_return_handler_9;
        // Exception handler code:
        try_except_handler_10:;
        exception_keeper_type_8 = exception_type;
        exception_keeper_value_8 = exception_value;
        exception_keeper_tb_8 = exception_tb;
        exception_keeper_lineno_8 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$roc$hsadrv$drvapi$$$class__3_hsa_kernel_dispatch_packet_t_62);
        locals_numba$roc$hsadrv$drvapi$$$class__3_hsa_kernel_dispatch_packet_t_62 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;
        exception_lineno = exception_keeper_lineno_8;

        goto try_except_handler_9;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_9:;
        CHECK_OBJECT(outline_2_var___class__);
        Py_DECREF(outline_2_var___class__);
        outline_2_var___class__ = NULL;
        goto outline_result_3;
        // Exception handler code:
        try_except_handler_9:;
        exception_keeper_type_9 = exception_type;
        exception_keeper_value_9 = exception_value;
        exception_keeper_tb_9 = exception_tb;
        exception_keeper_lineno_9 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_9;
        exception_value = exception_keeper_value_9;
        exception_tb = exception_keeper_tb_9;
        exception_lineno = exception_keeper_lineno_9;

        goto outline_exception_3;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_3:;
        exception_lineno = 62;
        goto try_except_handler_8;
        outline_result_3:;
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[95], tmp_assign_source_61);
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_10 = exception_type;
    exception_keeper_value_10 = exception_value;
    exception_keeper_tb_10 = exception_tb;
    exception_keeper_lineno_10 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_3__bases_orig);
    tmp_class_creation_3__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_3__bases);
    tmp_class_creation_3__bases = NULL;
    Py_XDECREF(tmp_class_creation_3__class_decl_dict);
    tmp_class_creation_3__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_3__metaclass);
    tmp_class_creation_3__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_3__prepared);
    tmp_class_creation_3__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_10;
    exception_value = exception_keeper_value_10;
    exception_tb = exception_keeper_tb_10;
    exception_lineno = exception_keeper_lineno_10;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    CHECK_OBJECT(tmp_class_creation_3__bases_orig);
    Py_DECREF(tmp_class_creation_3__bases_orig);
    tmp_class_creation_3__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_3__bases);
    Py_DECREF(tmp_class_creation_3__bases);
    tmp_class_creation_3__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
    Py_DECREF(tmp_class_creation_3__class_decl_dict);
    tmp_class_creation_3__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_3__metaclass);
    Py_DECREF(tmp_class_creation_3__metaclass);
    tmp_class_creation_3__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_3__prepared);
    Py_DECREF(tmp_class_creation_3__prepared);
    tmp_class_creation_3__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_63;
        PyObject *tmp_tuple_element_38;
        PyObject *tmp_expression_value_68;
        tmp_expression_value_68 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_68 == NULL)) {
            tmp_expression_value_68 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_68 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 83;

            goto try_except_handler_11;
        }
        tmp_tuple_element_38 = LOOKUP_ATTRIBUTE(tmp_expression_value_68, mod_consts[43]);
        if (tmp_tuple_element_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 83;

            goto try_except_handler_11;
        }
        tmp_assign_source_63 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_assign_source_63, 0, tmp_tuple_element_38);
        assert(tmp_class_creation_4__bases_orig == NULL);
        tmp_class_creation_4__bases_orig = tmp_assign_source_63;
    }
    {
        PyObject *tmp_assign_source_64;
        PyObject *tmp_dircall_arg1_4;
        CHECK_OBJECT(tmp_class_creation_4__bases_orig);
        tmp_dircall_arg1_4 = tmp_class_creation_4__bases_orig;
        Py_INCREF(tmp_dircall_arg1_4);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_4};
            tmp_assign_source_64 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_64 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 83;

            goto try_except_handler_11;
        }
        assert(tmp_class_creation_4__bases == NULL);
        tmp_class_creation_4__bases = tmp_assign_source_64;
    }
    {
        PyObject *tmp_assign_source_65;
        tmp_assign_source_65 = PyDict_New();
        assert(tmp_class_creation_4__class_decl_dict == NULL);
        tmp_class_creation_4__class_decl_dict = tmp_assign_source_65;
    }
    {
        PyObject *tmp_assign_source_66;
        PyObject *tmp_metaclass_value_4;
        bool tmp_condition_result_20;
        PyObject *tmp_key_value_10;
        PyObject *tmp_dict_arg_value_10;
        PyObject *tmp_dict_arg_value_11;
        PyObject *tmp_key_value_11;
        nuitka_bool tmp_condition_result_21;
        int tmp_truth_name_5;
        PyObject *tmp_type_arg_7;
        PyObject *tmp_expression_value_69;
        PyObject *tmp_subscript_value_4;
        PyObject *tmp_bases_value_4;
        tmp_key_value_10 = mod_consts[44];
        CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
        tmp_dict_arg_value_10 = tmp_class_creation_4__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_10, tmp_key_value_10);
        assert(!(tmp_res == -1));
        tmp_condition_result_20 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_20 != false) {
            goto condexpr_true_8;
        } else {
            goto condexpr_false_8;
        }
        condexpr_true_8:;
        CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
        tmp_dict_arg_value_11 = tmp_class_creation_4__class_decl_dict;
        tmp_key_value_11 = mod_consts[44];
        tmp_metaclass_value_4 = DICT_GET_ITEM0(tmp_dict_arg_value_11, tmp_key_value_11);
        if (tmp_metaclass_value_4 == NULL) {
            tmp_metaclass_value_4 = Py_None;
        }
        assert(!(tmp_metaclass_value_4 == NULL));
        Py_INCREF(tmp_metaclass_value_4);
        goto condexpr_end_8;
        condexpr_false_8:;
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_truth_name_5 = CHECK_IF_TRUE(tmp_class_creation_4__bases);
        if (tmp_truth_name_5 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 83;

            goto try_except_handler_11;
        }
        tmp_condition_result_21 = tmp_truth_name_5 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_21 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_9;
        } else {
            goto condexpr_false_9;
        }
        condexpr_true_9:;
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_expression_value_69 = tmp_class_creation_4__bases;
        tmp_subscript_value_4 = mod_consts[29];
        tmp_type_arg_7 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_69, tmp_subscript_value_4, 0);
        if (tmp_type_arg_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 83;

            goto try_except_handler_11;
        }
        tmp_metaclass_value_4 = BUILTIN_TYPE1(tmp_type_arg_7);
        Py_DECREF(tmp_type_arg_7);
        if (tmp_metaclass_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 83;

            goto try_except_handler_11;
        }
        goto condexpr_end_9;
        condexpr_false_9:;
        tmp_metaclass_value_4 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_4);
        condexpr_end_9:;
        condexpr_end_8:;
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_bases_value_4 = tmp_class_creation_4__bases;
        tmp_assign_source_66 = SELECT_METACLASS(tmp_metaclass_value_4, tmp_bases_value_4);
        Py_DECREF(tmp_metaclass_value_4);
        if (tmp_assign_source_66 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 83;

            goto try_except_handler_11;
        }
        assert(tmp_class_creation_4__metaclass == NULL);
        tmp_class_creation_4__metaclass = tmp_assign_source_66;
    }
    {
        bool tmp_condition_result_22;
        PyObject *tmp_key_value_12;
        PyObject *tmp_dict_arg_value_12;
        tmp_key_value_12 = mod_consts[44];
        CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
        tmp_dict_arg_value_12 = tmp_class_creation_4__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_12, tmp_key_value_12);
        assert(!(tmp_res == -1));
        tmp_condition_result_22 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_22 != false) {
            goto branch_yes_13;
        } else {
            goto branch_no_13;
        }
    }
    branch_yes_13:;
    CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_4__class_decl_dict;
    tmp_dictdel_key = mod_consts[44];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 83;

        goto try_except_handler_11;
    }
    branch_no_13:;
    {
        nuitka_bool tmp_condition_result_23;
        PyObject *tmp_expression_value_70;
        CHECK_OBJECT(tmp_class_creation_4__metaclass);
        tmp_expression_value_70 = tmp_class_creation_4__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_70, mod_consts[45]);
        tmp_condition_result_23 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_23 == NUITKA_BOOL_TRUE) {
            goto branch_yes_14;
        } else {
            goto branch_no_14;
        }
    }
    branch_yes_14:;
    {
        PyObject *tmp_assign_source_67;
        PyObject *tmp_called_value_7;
        PyObject *tmp_expression_value_71;
        PyObject *tmp_args_value_7;
        PyObject *tmp_tuple_element_39;
        PyObject *tmp_kwargs_value_7;
        CHECK_OBJECT(tmp_class_creation_4__metaclass);
        tmp_expression_value_71 = tmp_class_creation_4__metaclass;
        tmp_called_value_7 = LOOKUP_ATTRIBUTE(tmp_expression_value_71, mod_consts[45]);
        if (tmp_called_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 83;

            goto try_except_handler_11;
        }
        tmp_tuple_element_39 = mod_consts[112];
        tmp_args_value_7 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_7, 0, tmp_tuple_element_39);
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_tuple_element_39 = tmp_class_creation_4__bases;
        PyTuple_SET_ITEM0(tmp_args_value_7, 1, tmp_tuple_element_39);
        CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
        tmp_kwargs_value_7 = tmp_class_creation_4__class_decl_dict;
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 83;
        tmp_assign_source_67 = CALL_FUNCTION(tmp_called_value_7, tmp_args_value_7, tmp_kwargs_value_7);
        Py_DECREF(tmp_called_value_7);
        Py_DECREF(tmp_args_value_7);
        if (tmp_assign_source_67 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 83;

            goto try_except_handler_11;
        }
        assert(tmp_class_creation_4__prepared == NULL);
        tmp_class_creation_4__prepared = tmp_assign_source_67;
    }
    {
        bool tmp_condition_result_24;
        PyObject *tmp_operand_value_4;
        PyObject *tmp_expression_value_72;
        CHECK_OBJECT(tmp_class_creation_4__prepared);
        tmp_expression_value_72 = tmp_class_creation_4__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_72, mod_consts[47]);
        tmp_operand_value_4 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_4);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 83;

            goto try_except_handler_11;
        }
        tmp_condition_result_24 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_24 != false) {
            goto branch_yes_15;
        } else {
            goto branch_no_15;
        }
    }
    branch_yes_15:;
    {
        PyObject *tmp_raise_type_4;
        PyObject *tmp_raise_value_4;
        PyObject *tmp_left_value_4;
        PyObject *tmp_right_value_4;
        PyObject *tmp_tuple_element_40;
        PyObject *tmp_getattr_target_4;
        PyObject *tmp_getattr_attr_4;
        PyObject *tmp_getattr_default_4;
        tmp_raise_type_4 = PyExc_TypeError;
        tmp_left_value_4 = mod_consts[48];
        CHECK_OBJECT(tmp_class_creation_4__metaclass);
        tmp_getattr_target_4 = tmp_class_creation_4__metaclass;
        tmp_getattr_attr_4 = mod_consts[15];
        tmp_getattr_default_4 = mod_consts[49];
        tmp_tuple_element_40 = BUILTIN_GETATTR(tmp_getattr_target_4, tmp_getattr_attr_4, tmp_getattr_default_4);
        if (tmp_tuple_element_40 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 83;

            goto try_except_handler_11;
        }
        tmp_right_value_4 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_73;
            PyObject *tmp_type_arg_8;
            PyTuple_SET_ITEM(tmp_right_value_4, 0, tmp_tuple_element_40);
            CHECK_OBJECT(tmp_class_creation_4__prepared);
            tmp_type_arg_8 = tmp_class_creation_4__prepared;
            tmp_expression_value_73 = BUILTIN_TYPE1(tmp_type_arg_8);
            assert(!(tmp_expression_value_73 == NULL));
            tmp_tuple_element_40 = LOOKUP_ATTRIBUTE(tmp_expression_value_73, mod_consts[15]);
            Py_DECREF(tmp_expression_value_73);
            if (tmp_tuple_element_40 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 83;

                goto tuple_build_exception_29;
            }
            PyTuple_SET_ITEM(tmp_right_value_4, 1, tmp_tuple_element_40);
        }
        goto tuple_build_noexception_29;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_29:;
        Py_DECREF(tmp_right_value_4);
        goto try_except_handler_11;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_29:;
        tmp_raise_value_4 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_4, tmp_right_value_4);
        Py_DECREF(tmp_right_value_4);
        if (tmp_raise_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 83;

            goto try_except_handler_11;
        }
        exception_type = tmp_raise_type_4;
        Py_INCREF(tmp_raise_type_4);
        exception_value = tmp_raise_value_4;
        exception_lineno = 83;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_11;
    }
    branch_no_15:;
    goto branch_end_14;
    branch_no_14:;
    {
        PyObject *tmp_assign_source_68;
        tmp_assign_source_68 = PyDict_New();
        assert(tmp_class_creation_4__prepared == NULL);
        tmp_class_creation_4__prepared = tmp_assign_source_68;
    }
    branch_end_14:;
    {
        PyObject *tmp_assign_source_69;
        {
            PyObject *tmp_set_locals_4;
            CHECK_OBJECT(tmp_class_creation_4__prepared);
            tmp_set_locals_4 = tmp_class_creation_4__prepared;
            locals_numba$roc$hsadrv$drvapi$$$class__4_hsa_agent_dispatch_packet_t_83 = tmp_set_locals_4;
            Py_INCREF(tmp_set_locals_4);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__4_hsa_agent_dispatch_packet_t_83, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 83;

            goto try_except_handler_13;
        }
        tmp_dictset_value = mod_consts[113];
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__4_hsa_agent_dispatch_packet_t_83, mod_consts[22], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 83;

            goto try_except_handler_13;
        }
        tmp_dictset_value = mod_consts[112];
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__4_hsa_agent_dispatch_packet_t_83, mod_consts[52], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 83;

            goto try_except_handler_13;
        }
        if (isFrameUnusable(cache_frame_4189e9452107b225be7a7cd4ff8ba23a_5)) {
            Py_XDECREF(cache_frame_4189e9452107b225be7a7cd4ff8ba23a_5);

#if _DEBUG_REFCOUNTS
            if (cache_frame_4189e9452107b225be7a7cd4ff8ba23a_5 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_4189e9452107b225be7a7cd4ff8ba23a_5 = MAKE_FUNCTION_FRAME(codeobj_4189e9452107b225be7a7cd4ff8ba23a, module_numba$roc$hsadrv$drvapi, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_4189e9452107b225be7a7cd4ff8ba23a_5->m_type_description == NULL);
        frame_4189e9452107b225be7a7cd4ff8ba23a_5 = cache_frame_4189e9452107b225be7a7cd4ff8ba23a_5;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_4189e9452107b225be7a7cd4ff8ba23a_5);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_4189e9452107b225be7a7cd4ff8ba23a_5) == 2); // Frame stack

        // Framed code:
        {
            PyObject *tmp_list_element_4;
            PyObject *tmp_tuple_element_41;
            tmp_tuple_element_41 = mod_consts[96];
            tmp_list_element_4 = PyTuple_New(2);
            {
                PyObject *tmp_expression_value_74;
                PyTuple_SET_ITEM0(tmp_list_element_4, 0, tmp_tuple_element_41);
                tmp_expression_value_74 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__4_hsa_agent_dispatch_packet_t_83, mod_consts[28]);

                if (tmp_expression_value_74 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_74 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                        if (unlikely(tmp_expression_value_74 == NULL)) {
                            tmp_expression_value_74 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                        }

                        if (tmp_expression_value_74 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 86;
                            type_description_2 = "o";
                            goto tuple_build_exception_30;
                        }
                        Py_INCREF(tmp_expression_value_74);
                    } else {
                        goto tuple_build_exception_30;
                    }
                }

                tmp_tuple_element_41 = LOOKUP_ATTRIBUTE(tmp_expression_value_74, mod_consts[97]);
                Py_DECREF(tmp_expression_value_74);
                if (tmp_tuple_element_41 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 86;
                    type_description_2 = "o";
                    goto tuple_build_exception_30;
                }
                PyTuple_SET_ITEM(tmp_list_element_4, 1, tmp_tuple_element_41);
            }
            goto tuple_build_noexception_30;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_30:;
            Py_DECREF(tmp_list_element_4);
            goto frame_exception_exit_5;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_30:;
            tmp_dictset_value = PyList_New(7);
            {
                PyObject *tmp_tuple_element_42;
                PyObject *tmp_tuple_element_43;
                PyObject *tmp_tuple_element_44;
                PyObject *tmp_tuple_element_45;
                PyObject *tmp_tuple_element_46;
                PyObject *tmp_tuple_element_47;
                PyList_SET_ITEM(tmp_dictset_value, 0, tmp_list_element_4);
                tmp_tuple_element_42 = mod_consts[81];
                tmp_list_element_4 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_75;
                    PyTuple_SET_ITEM0(tmp_list_element_4, 0, tmp_tuple_element_42);
                    tmp_expression_value_75 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__4_hsa_agent_dispatch_packet_t_83, mod_consts[28]);

                    if (tmp_expression_value_75 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_75 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_75 == NULL)) {
                                tmp_expression_value_75 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_75 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 87;
                                type_description_2 = "o";
                                goto tuple_build_exception_31;
                            }
                            Py_INCREF(tmp_expression_value_75);
                        } else {
                            goto tuple_build_exception_31;
                        }
                    }

                    tmp_tuple_element_42 = LOOKUP_ATTRIBUTE(tmp_expression_value_75, mod_consts[97]);
                    Py_DECREF(tmp_expression_value_75);
                    if (tmp_tuple_element_42 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 87;
                        type_description_2 = "o";
                        goto tuple_build_exception_31;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_4, 1, tmp_tuple_element_42);
                }
                goto tuple_build_noexception_31;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_31:;
                Py_DECREF(tmp_list_element_4);
                goto list_build_exception_4;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_31:;
                PyList_SET_ITEM(tmp_dictset_value, 1, tmp_list_element_4);
                tmp_tuple_element_43 = mod_consts[102];
                tmp_list_element_4 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_76;
                    PyTuple_SET_ITEM0(tmp_list_element_4, 0, tmp_tuple_element_43);
                    tmp_expression_value_76 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__4_hsa_agent_dispatch_packet_t_83, mod_consts[28]);

                    if (tmp_expression_value_76 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_76 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_76 == NULL)) {
                                tmp_expression_value_76 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_76 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 88;
                                type_description_2 = "o";
                                goto tuple_build_exception_32;
                            }
                            Py_INCREF(tmp_expression_value_76);
                        } else {
                            goto tuple_build_exception_32;
                        }
                    }

                    tmp_tuple_element_43 = LOOKUP_ATTRIBUTE(tmp_expression_value_76, mod_consts[54]);
                    Py_DECREF(tmp_expression_value_76);
                    if (tmp_tuple_element_43 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 88;
                        type_description_2 = "o";
                        goto tuple_build_exception_32;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_4, 1, tmp_tuple_element_43);
                }
                goto tuple_build_noexception_32;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_32:;
                Py_DECREF(tmp_list_element_4);
                goto list_build_exception_4;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_32:;
                PyList_SET_ITEM(tmp_dictset_value, 2, tmp_list_element_4);
                tmp_tuple_element_44 = mod_consts[114];
                tmp_list_element_4 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_77;
                    PyTuple_SET_ITEM0(tmp_list_element_4, 0, tmp_tuple_element_44);
                    tmp_expression_value_77 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__4_hsa_agent_dispatch_packet_t_83, mod_consts[28]);

                    if (tmp_expression_value_77 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_77 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_77 == NULL)) {
                                tmp_expression_value_77 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_77 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 90;
                                type_description_2 = "o";
                                goto tuple_build_exception_33;
                            }
                            Py_INCREF(tmp_expression_value_77);
                        } else {
                            goto tuple_build_exception_33;
                        }
                    }

                    tmp_tuple_element_44 = LOOKUP_ATTRIBUTE(tmp_expression_value_77, mod_consts[84]);
                    Py_DECREF(tmp_expression_value_77);
                    if (tmp_tuple_element_44 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 90;
                        type_description_2 = "o";
                        goto tuple_build_exception_33;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_4, 1, tmp_tuple_element_44);
                }
                goto tuple_build_noexception_33;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_33:;
                Py_DECREF(tmp_list_element_4);
                goto list_build_exception_4;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_33:;
                PyList_SET_ITEM(tmp_dictset_value, 3, tmp_list_element_4);
                tmp_tuple_element_45 = mod_consts[115];
                tmp_list_element_4 = PyTuple_New(2);
                {
                    PyObject *tmp_left_value_5;
                    PyObject *tmp_expression_value_78;
                    PyObject *tmp_right_value_5;
                    PyTuple_SET_ITEM0(tmp_list_element_4, 0, tmp_tuple_element_45);
                    tmp_expression_value_78 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__4_hsa_agent_dispatch_packet_t_83, mod_consts[28]);

                    if (tmp_expression_value_78 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_78 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_78 == NULL)) {
                                tmp_expression_value_78 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_78 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 91;
                                type_description_2 = "o";
                                goto tuple_build_exception_34;
                            }
                            Py_INCREF(tmp_expression_value_78);
                        } else {
                            goto tuple_build_exception_34;
                        }
                    }

                    tmp_left_value_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_78, mod_consts[39]);
                    Py_DECREF(tmp_expression_value_78);
                    if (tmp_left_value_5 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 91;
                        type_description_2 = "o";
                        goto tuple_build_exception_34;
                    }
                    tmp_right_value_5 = mod_consts[116];
                    tmp_tuple_element_45 = BINARY_OPERATION_MULT_OBJECT_OBJECT_LONG(tmp_left_value_5, tmp_right_value_5);
                    Py_DECREF(tmp_left_value_5);
                    if (tmp_tuple_element_45 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 91;
                        type_description_2 = "o";
                        goto tuple_build_exception_34;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_4, 1, tmp_tuple_element_45);
                }
                goto tuple_build_noexception_34;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_34:;
                Py_DECREF(tmp_list_element_4);
                goto list_build_exception_4;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_34:;
                PyList_SET_ITEM(tmp_dictset_value, 4, tmp_list_element_4);
                tmp_tuple_element_46 = mod_consts[110];
                tmp_list_element_4 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_79;
                    PyTuple_SET_ITEM0(tmp_list_element_4, 0, tmp_tuple_element_46);
                    tmp_expression_value_79 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__4_hsa_agent_dispatch_packet_t_83, mod_consts[28]);

                    if (tmp_expression_value_79 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_79 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_79 == NULL)) {
                                tmp_expression_value_79 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_79 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 92;
                                type_description_2 = "o";
                                goto tuple_build_exception_35;
                            }
                            Py_INCREF(tmp_expression_value_79);
                        } else {
                            goto tuple_build_exception_35;
                        }
                    }

                    tmp_tuple_element_46 = LOOKUP_ATTRIBUTE(tmp_expression_value_79, mod_consts[39]);
                    Py_DECREF(tmp_expression_value_79);
                    if (tmp_tuple_element_46 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 92;
                        type_description_2 = "o";
                        goto tuple_build_exception_35;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_4, 1, tmp_tuple_element_46);
                }
                goto tuple_build_noexception_35;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_35:;
                Py_DECREF(tmp_list_element_4);
                goto list_build_exception_4;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_35:;
                PyList_SET_ITEM(tmp_dictset_value, 5, tmp_list_element_4);
                tmp_tuple_element_47 = mod_consts[111];
                tmp_list_element_4 = PyTuple_New(2);
                PyTuple_SET_ITEM0(tmp_list_element_4, 0, tmp_tuple_element_47);
                tmp_tuple_element_47 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__4_hsa_agent_dispatch_packet_t_83, mod_consts[71]);

                if (tmp_tuple_element_47 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_tuple_element_47 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                        if (unlikely(tmp_tuple_element_47 == NULL)) {
                            tmp_tuple_element_47 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                        }

                        if (tmp_tuple_element_47 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 93;
                            type_description_2 = "o";
                            goto tuple_build_exception_36;
                        }
                        Py_INCREF(tmp_tuple_element_47);
                    } else {
                        goto tuple_build_exception_36;
                    }
                }

                PyTuple_SET_ITEM(tmp_list_element_4, 1, tmp_tuple_element_47);
                goto tuple_build_noexception_36;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_36:;
                Py_DECREF(tmp_list_element_4);
                goto list_build_exception_4;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_36:;
                PyList_SET_ITEM(tmp_dictset_value, 6, tmp_list_element_4);
            }
            goto list_build_noexception_4;
            // Exception handling pass through code for list_build:
            list_build_exception_4:;
            Py_DECREF(tmp_dictset_value);
            goto frame_exception_exit_5;
            // Finished with no exception for list_build:
            list_build_noexception_4:;
            tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__4_hsa_agent_dispatch_packet_t_83, mod_consts[57], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 85;
                type_description_2 = "o";
                goto frame_exception_exit_5;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_4189e9452107b225be7a7cd4ff8ba23a_5);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_4;

        frame_exception_exit_5:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_4189e9452107b225be7a7cd4ff8ba23a_5);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_4189e9452107b225be7a7cd4ff8ba23a_5, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_4189e9452107b225be7a7cd4ff8ba23a_5->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_4189e9452107b225be7a7cd4ff8ba23a_5, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_4189e9452107b225be7a7cd4ff8ba23a_5,
            type_description_2,
            outline_3_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_4189e9452107b225be7a7cd4ff8ba23a_5 == cache_frame_4189e9452107b225be7a7cd4ff8ba23a_5) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_4189e9452107b225be7a7cd4ff8ba23a_5);
            cache_frame_4189e9452107b225be7a7cd4ff8ba23a_5 = NULL;
        }

        assertFrameObject(frame_4189e9452107b225be7a7cd4ff8ba23a_5);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_4;

        frame_no_exception_4:;
        goto skip_nested_handling_4;
        nested_frame_exit_4:;

        goto try_except_handler_13;
        skip_nested_handling_4:;
        {
            nuitka_bool tmp_condition_result_25;
            PyObject *tmp_cmp_expr_left_4;
            PyObject *tmp_cmp_expr_right_4;
            CHECK_OBJECT(tmp_class_creation_4__bases);
            tmp_cmp_expr_left_4 = tmp_class_creation_4__bases;
            CHECK_OBJECT(tmp_class_creation_4__bases_orig);
            tmp_cmp_expr_right_4 = tmp_class_creation_4__bases_orig;
            tmp_condition_result_25 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_4, tmp_cmp_expr_right_4);
            if (tmp_condition_result_25 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 83;

                goto try_except_handler_13;
            }
            if (tmp_condition_result_25 == NUITKA_BOOL_TRUE) {
                goto branch_yes_16;
            } else {
                goto branch_no_16;
            }
            assert(tmp_condition_result_25 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_16:;
        CHECK_OBJECT(tmp_class_creation_4__bases_orig);
        tmp_dictset_value = tmp_class_creation_4__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__4_hsa_agent_dispatch_packet_t_83, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 83;

            goto try_except_handler_13;
        }
        branch_no_16:;
        {
            PyObject *tmp_assign_source_70;
            PyObject *tmp_called_value_8;
            PyObject *tmp_args_value_8;
            PyObject *tmp_tuple_element_48;
            PyObject *tmp_kwargs_value_8;
            CHECK_OBJECT(tmp_class_creation_4__metaclass);
            tmp_called_value_8 = tmp_class_creation_4__metaclass;
            tmp_tuple_element_48 = mod_consts[112];
            tmp_args_value_8 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_8, 0, tmp_tuple_element_48);
            CHECK_OBJECT(tmp_class_creation_4__bases);
            tmp_tuple_element_48 = tmp_class_creation_4__bases;
            PyTuple_SET_ITEM0(tmp_args_value_8, 1, tmp_tuple_element_48);
            tmp_tuple_element_48 = locals_numba$roc$hsadrv$drvapi$$$class__4_hsa_agent_dispatch_packet_t_83;
            PyTuple_SET_ITEM0(tmp_args_value_8, 2, tmp_tuple_element_48);
            CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
            tmp_kwargs_value_8 = tmp_class_creation_4__class_decl_dict;
            frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 83;
            tmp_assign_source_70 = CALL_FUNCTION(tmp_called_value_8, tmp_args_value_8, tmp_kwargs_value_8);
            Py_DECREF(tmp_args_value_8);
            if (tmp_assign_source_70 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 83;

                goto try_except_handler_13;
            }
            assert(outline_3_var___class__ == NULL);
            outline_3_var___class__ = tmp_assign_source_70;
        }
        CHECK_OBJECT(outline_3_var___class__);
        tmp_assign_source_69 = outline_3_var___class__;
        Py_INCREF(tmp_assign_source_69);
        goto try_return_handler_13;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_13:;
        Py_DECREF(locals_numba$roc$hsadrv$drvapi$$$class__4_hsa_agent_dispatch_packet_t_83);
        locals_numba$roc$hsadrv$drvapi$$$class__4_hsa_agent_dispatch_packet_t_83 = NULL;
        goto try_return_handler_12;
        // Exception handler code:
        try_except_handler_13:;
        exception_keeper_type_11 = exception_type;
        exception_keeper_value_11 = exception_value;
        exception_keeper_tb_11 = exception_tb;
        exception_keeper_lineno_11 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$roc$hsadrv$drvapi$$$class__4_hsa_agent_dispatch_packet_t_83);
        locals_numba$roc$hsadrv$drvapi$$$class__4_hsa_agent_dispatch_packet_t_83 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_11;
        exception_value = exception_keeper_value_11;
        exception_tb = exception_keeper_tb_11;
        exception_lineno = exception_keeper_lineno_11;

        goto try_except_handler_12;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_12:;
        CHECK_OBJECT(outline_3_var___class__);
        Py_DECREF(outline_3_var___class__);
        outline_3_var___class__ = NULL;
        goto outline_result_4;
        // Exception handler code:
        try_except_handler_12:;
        exception_keeper_type_12 = exception_type;
        exception_keeper_value_12 = exception_value;
        exception_keeper_tb_12 = exception_tb;
        exception_keeper_lineno_12 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_12;
        exception_value = exception_keeper_value_12;
        exception_tb = exception_keeper_tb_12;
        exception_lineno = exception_keeper_lineno_12;

        goto outline_exception_4;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_4:;
        exception_lineno = 83;
        goto try_except_handler_11;
        outline_result_4:;
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[112], tmp_assign_source_69);
    }
    goto try_end_5;
    // Exception handler code:
    try_except_handler_11:;
    exception_keeper_type_13 = exception_type;
    exception_keeper_value_13 = exception_value;
    exception_keeper_tb_13 = exception_tb;
    exception_keeper_lineno_13 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_4__bases_orig);
    tmp_class_creation_4__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_4__bases);
    tmp_class_creation_4__bases = NULL;
    Py_XDECREF(tmp_class_creation_4__class_decl_dict);
    tmp_class_creation_4__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_4__metaclass);
    tmp_class_creation_4__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_4__prepared);
    tmp_class_creation_4__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_13;
    exception_value = exception_keeper_value_13;
    exception_tb = exception_keeper_tb_13;
    exception_lineno = exception_keeper_lineno_13;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    CHECK_OBJECT(tmp_class_creation_4__bases_orig);
    Py_DECREF(tmp_class_creation_4__bases_orig);
    tmp_class_creation_4__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_4__bases);
    Py_DECREF(tmp_class_creation_4__bases);
    tmp_class_creation_4__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
    Py_DECREF(tmp_class_creation_4__class_decl_dict);
    tmp_class_creation_4__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_4__metaclass);
    Py_DECREF(tmp_class_creation_4__metaclass);
    tmp_class_creation_4__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_4__prepared);
    Py_DECREF(tmp_class_creation_4__prepared);
    tmp_class_creation_4__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_71;
        PyObject *tmp_tuple_element_49;
        PyObject *tmp_expression_value_80;
        tmp_expression_value_80 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_80 == NULL)) {
            tmp_expression_value_80 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_80 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_14;
        }
        tmp_tuple_element_49 = LOOKUP_ATTRIBUTE(tmp_expression_value_80, mod_consts[43]);
        if (tmp_tuple_element_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_14;
        }
        tmp_assign_source_71 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_assign_source_71, 0, tmp_tuple_element_49);
        assert(tmp_class_creation_5__bases_orig == NULL);
        tmp_class_creation_5__bases_orig = tmp_assign_source_71;
    }
    {
        PyObject *tmp_assign_source_72;
        PyObject *tmp_dircall_arg1_5;
        CHECK_OBJECT(tmp_class_creation_5__bases_orig);
        tmp_dircall_arg1_5 = tmp_class_creation_5__bases_orig;
        Py_INCREF(tmp_dircall_arg1_5);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_5};
            tmp_assign_source_72 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_72 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_14;
        }
        assert(tmp_class_creation_5__bases == NULL);
        tmp_class_creation_5__bases = tmp_assign_source_72;
    }
    {
        PyObject *tmp_assign_source_73;
        tmp_assign_source_73 = PyDict_New();
        assert(tmp_class_creation_5__class_decl_dict == NULL);
        tmp_class_creation_5__class_decl_dict = tmp_assign_source_73;
    }
    {
        PyObject *tmp_assign_source_74;
        PyObject *tmp_metaclass_value_5;
        bool tmp_condition_result_26;
        PyObject *tmp_key_value_13;
        PyObject *tmp_dict_arg_value_13;
        PyObject *tmp_dict_arg_value_14;
        PyObject *tmp_key_value_14;
        nuitka_bool tmp_condition_result_27;
        int tmp_truth_name_6;
        PyObject *tmp_type_arg_9;
        PyObject *tmp_expression_value_81;
        PyObject *tmp_subscript_value_5;
        PyObject *tmp_bases_value_5;
        tmp_key_value_13 = mod_consts[44];
        CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
        tmp_dict_arg_value_13 = tmp_class_creation_5__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_13, tmp_key_value_13);
        assert(!(tmp_res == -1));
        tmp_condition_result_26 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_26 != false) {
            goto condexpr_true_10;
        } else {
            goto condexpr_false_10;
        }
        condexpr_true_10:;
        CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
        tmp_dict_arg_value_14 = tmp_class_creation_5__class_decl_dict;
        tmp_key_value_14 = mod_consts[44];
        tmp_metaclass_value_5 = DICT_GET_ITEM0(tmp_dict_arg_value_14, tmp_key_value_14);
        if (tmp_metaclass_value_5 == NULL) {
            tmp_metaclass_value_5 = Py_None;
        }
        assert(!(tmp_metaclass_value_5 == NULL));
        Py_INCREF(tmp_metaclass_value_5);
        goto condexpr_end_10;
        condexpr_false_10:;
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_truth_name_6 = CHECK_IF_TRUE(tmp_class_creation_5__bases);
        if (tmp_truth_name_6 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_14;
        }
        tmp_condition_result_27 = tmp_truth_name_6 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_27 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_11;
        } else {
            goto condexpr_false_11;
        }
        condexpr_true_11:;
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_expression_value_81 = tmp_class_creation_5__bases;
        tmp_subscript_value_5 = mod_consts[29];
        tmp_type_arg_9 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_81, tmp_subscript_value_5, 0);
        if (tmp_type_arg_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_14;
        }
        tmp_metaclass_value_5 = BUILTIN_TYPE1(tmp_type_arg_9);
        Py_DECREF(tmp_type_arg_9);
        if (tmp_metaclass_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_14;
        }
        goto condexpr_end_11;
        condexpr_false_11:;
        tmp_metaclass_value_5 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_5);
        condexpr_end_11:;
        condexpr_end_10:;
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_bases_value_5 = tmp_class_creation_5__bases;
        tmp_assign_source_74 = SELECT_METACLASS(tmp_metaclass_value_5, tmp_bases_value_5);
        Py_DECREF(tmp_metaclass_value_5);
        if (tmp_assign_source_74 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_14;
        }
        assert(tmp_class_creation_5__metaclass == NULL);
        tmp_class_creation_5__metaclass = tmp_assign_source_74;
    }
    {
        bool tmp_condition_result_28;
        PyObject *tmp_key_value_15;
        PyObject *tmp_dict_arg_value_15;
        tmp_key_value_15 = mod_consts[44];
        CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
        tmp_dict_arg_value_15 = tmp_class_creation_5__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_15, tmp_key_value_15);
        assert(!(tmp_res == -1));
        tmp_condition_result_28 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_28 != false) {
            goto branch_yes_17;
        } else {
            goto branch_no_17;
        }
    }
    branch_yes_17:;
    CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_5__class_decl_dict;
    tmp_dictdel_key = mod_consts[44];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 95;

        goto try_except_handler_14;
    }
    branch_no_17:;
    {
        nuitka_bool tmp_condition_result_29;
        PyObject *tmp_expression_value_82;
        CHECK_OBJECT(tmp_class_creation_5__metaclass);
        tmp_expression_value_82 = tmp_class_creation_5__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_82, mod_consts[45]);
        tmp_condition_result_29 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_29 == NUITKA_BOOL_TRUE) {
            goto branch_yes_18;
        } else {
            goto branch_no_18;
        }
    }
    branch_yes_18:;
    {
        PyObject *tmp_assign_source_75;
        PyObject *tmp_called_value_9;
        PyObject *tmp_expression_value_83;
        PyObject *tmp_args_value_9;
        PyObject *tmp_tuple_element_50;
        PyObject *tmp_kwargs_value_9;
        CHECK_OBJECT(tmp_class_creation_5__metaclass);
        tmp_expression_value_83 = tmp_class_creation_5__metaclass;
        tmp_called_value_9 = LOOKUP_ATTRIBUTE(tmp_expression_value_83, mod_consts[45]);
        if (tmp_called_value_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_14;
        }
        tmp_tuple_element_50 = mod_consts[117];
        tmp_args_value_9 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_9, 0, tmp_tuple_element_50);
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_tuple_element_50 = tmp_class_creation_5__bases;
        PyTuple_SET_ITEM0(tmp_args_value_9, 1, tmp_tuple_element_50);
        CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
        tmp_kwargs_value_9 = tmp_class_creation_5__class_decl_dict;
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 95;
        tmp_assign_source_75 = CALL_FUNCTION(tmp_called_value_9, tmp_args_value_9, tmp_kwargs_value_9);
        Py_DECREF(tmp_called_value_9);
        Py_DECREF(tmp_args_value_9);
        if (tmp_assign_source_75 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_14;
        }
        assert(tmp_class_creation_5__prepared == NULL);
        tmp_class_creation_5__prepared = tmp_assign_source_75;
    }
    {
        bool tmp_condition_result_30;
        PyObject *tmp_operand_value_5;
        PyObject *tmp_expression_value_84;
        CHECK_OBJECT(tmp_class_creation_5__prepared);
        tmp_expression_value_84 = tmp_class_creation_5__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_84, mod_consts[47]);
        tmp_operand_value_5 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_5);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_14;
        }
        tmp_condition_result_30 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_30 != false) {
            goto branch_yes_19;
        } else {
            goto branch_no_19;
        }
    }
    branch_yes_19:;
    {
        PyObject *tmp_raise_type_5;
        PyObject *tmp_raise_value_5;
        PyObject *tmp_left_value_6;
        PyObject *tmp_right_value_6;
        PyObject *tmp_tuple_element_51;
        PyObject *tmp_getattr_target_5;
        PyObject *tmp_getattr_attr_5;
        PyObject *tmp_getattr_default_5;
        tmp_raise_type_5 = PyExc_TypeError;
        tmp_left_value_6 = mod_consts[48];
        CHECK_OBJECT(tmp_class_creation_5__metaclass);
        tmp_getattr_target_5 = tmp_class_creation_5__metaclass;
        tmp_getattr_attr_5 = mod_consts[15];
        tmp_getattr_default_5 = mod_consts[49];
        tmp_tuple_element_51 = BUILTIN_GETATTR(tmp_getattr_target_5, tmp_getattr_attr_5, tmp_getattr_default_5);
        if (tmp_tuple_element_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_14;
        }
        tmp_right_value_6 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_85;
            PyObject *tmp_type_arg_10;
            PyTuple_SET_ITEM(tmp_right_value_6, 0, tmp_tuple_element_51);
            CHECK_OBJECT(tmp_class_creation_5__prepared);
            tmp_type_arg_10 = tmp_class_creation_5__prepared;
            tmp_expression_value_85 = BUILTIN_TYPE1(tmp_type_arg_10);
            assert(!(tmp_expression_value_85 == NULL));
            tmp_tuple_element_51 = LOOKUP_ATTRIBUTE(tmp_expression_value_85, mod_consts[15]);
            Py_DECREF(tmp_expression_value_85);
            if (tmp_tuple_element_51 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 95;

                goto tuple_build_exception_37;
            }
            PyTuple_SET_ITEM(tmp_right_value_6, 1, tmp_tuple_element_51);
        }
        goto tuple_build_noexception_37;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_37:;
        Py_DECREF(tmp_right_value_6);
        goto try_except_handler_14;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_37:;
        tmp_raise_value_5 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_6, tmp_right_value_6);
        Py_DECREF(tmp_right_value_6);
        if (tmp_raise_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_14;
        }
        exception_type = tmp_raise_type_5;
        Py_INCREF(tmp_raise_type_5);
        exception_value = tmp_raise_value_5;
        exception_lineno = 95;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_14;
    }
    branch_no_19:;
    goto branch_end_18;
    branch_no_18:;
    {
        PyObject *tmp_assign_source_76;
        tmp_assign_source_76 = PyDict_New();
        assert(tmp_class_creation_5__prepared == NULL);
        tmp_class_creation_5__prepared = tmp_assign_source_76;
    }
    branch_end_18:;
    {
        PyObject *tmp_assign_source_77;
        {
            PyObject *tmp_set_locals_5;
            CHECK_OBJECT(tmp_class_creation_5__prepared);
            tmp_set_locals_5 = tmp_class_creation_5__prepared;
            locals_numba$roc$hsadrv$drvapi$$$class__5_hsa_barrier_and_packet_t_95 = tmp_set_locals_5;
            Py_INCREF(tmp_set_locals_5);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__5_hsa_barrier_and_packet_t_95, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_16;
        }
        tmp_dictset_value = mod_consts[117];
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__5_hsa_barrier_and_packet_t_95, mod_consts[52], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_16;
        }
        if (isFrameUnusable(cache_frame_8f1038c8de2eafcc8378d2a867a429a5_6)) {
            Py_XDECREF(cache_frame_8f1038c8de2eafcc8378d2a867a429a5_6);

#if _DEBUG_REFCOUNTS
            if (cache_frame_8f1038c8de2eafcc8378d2a867a429a5_6 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_8f1038c8de2eafcc8378d2a867a429a5_6 = MAKE_FUNCTION_FRAME(codeobj_8f1038c8de2eafcc8378d2a867a429a5, module_numba$roc$hsadrv$drvapi, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_8f1038c8de2eafcc8378d2a867a429a5_6->m_type_description == NULL);
        frame_8f1038c8de2eafcc8378d2a867a429a5_6 = cache_frame_8f1038c8de2eafcc8378d2a867a429a5_6;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_8f1038c8de2eafcc8378d2a867a429a5_6);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_8f1038c8de2eafcc8378d2a867a429a5_6) == 2); // Frame stack

        // Framed code:
        {
            PyObject *tmp_list_element_5;
            PyObject *tmp_tuple_element_52;
            tmp_tuple_element_52 = mod_consts[96];
            tmp_list_element_5 = PyTuple_New(2);
            {
                PyObject *tmp_expression_value_86;
                PyTuple_SET_ITEM0(tmp_list_element_5, 0, tmp_tuple_element_52);
                tmp_expression_value_86 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__5_hsa_barrier_and_packet_t_95, mod_consts[28]);

                if (tmp_expression_value_86 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_86 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                        if (unlikely(tmp_expression_value_86 == NULL)) {
                            tmp_expression_value_86 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                        }

                        if (tmp_expression_value_86 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 97;
                            type_description_2 = "o";
                            goto tuple_build_exception_38;
                        }
                        Py_INCREF(tmp_expression_value_86);
                    } else {
                        goto tuple_build_exception_38;
                    }
                }

                tmp_tuple_element_52 = LOOKUP_ATTRIBUTE(tmp_expression_value_86, mod_consts[97]);
                Py_DECREF(tmp_expression_value_86);
                if (tmp_tuple_element_52 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 97;
                    type_description_2 = "o";
                    goto tuple_build_exception_38;
                }
                PyTuple_SET_ITEM(tmp_list_element_5, 1, tmp_tuple_element_52);
            }
            goto tuple_build_noexception_38;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_38:;
            Py_DECREF(tmp_list_element_5);
            goto frame_exception_exit_6;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_38:;
            tmp_dictset_value = PyList_New(10);
            {
                PyObject *tmp_tuple_element_53;
                PyObject *tmp_tuple_element_54;
                PyObject *tmp_tuple_element_55;
                PyObject *tmp_tuple_element_56;
                PyObject *tmp_tuple_element_57;
                PyObject *tmp_tuple_element_58;
                PyObject *tmp_tuple_element_59;
                PyObject *tmp_tuple_element_60;
                PyObject *tmp_tuple_element_61;
                PyList_SET_ITEM(tmp_dictset_value, 0, tmp_list_element_5);
                tmp_tuple_element_53 = mod_consts[102];
                tmp_list_element_5 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_87;
                    PyTuple_SET_ITEM0(tmp_list_element_5, 0, tmp_tuple_element_53);
                    tmp_expression_value_87 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__5_hsa_barrier_and_packet_t_95, mod_consts[28]);

                    if (tmp_expression_value_87 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_87 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_87 == NULL)) {
                                tmp_expression_value_87 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_87 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 98;
                                type_description_2 = "o";
                                goto tuple_build_exception_39;
                            }
                            Py_INCREF(tmp_expression_value_87);
                        } else {
                            goto tuple_build_exception_39;
                        }
                    }

                    tmp_tuple_element_53 = LOOKUP_ATTRIBUTE(tmp_expression_value_87, mod_consts[97]);
                    Py_DECREF(tmp_expression_value_87);
                    if (tmp_tuple_element_53 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 98;
                        type_description_2 = "o";
                        goto tuple_build_exception_39;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_5, 1, tmp_tuple_element_53);
                }
                goto tuple_build_noexception_39;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_39:;
                Py_DECREF(tmp_list_element_5);
                goto list_build_exception_5;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_39:;
                PyList_SET_ITEM(tmp_dictset_value, 1, tmp_list_element_5);
                tmp_tuple_element_54 = mod_consts[87];
                tmp_list_element_5 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_88;
                    PyTuple_SET_ITEM0(tmp_list_element_5, 0, tmp_tuple_element_54);
                    tmp_expression_value_88 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__5_hsa_barrier_and_packet_t_95, mod_consts[28]);

                    if (tmp_expression_value_88 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_88 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_88 == NULL)) {
                                tmp_expression_value_88 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_88 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 99;
                                type_description_2 = "o";
                                goto tuple_build_exception_40;
                            }
                            Py_INCREF(tmp_expression_value_88);
                        } else {
                            goto tuple_build_exception_40;
                        }
                    }

                    tmp_tuple_element_54 = LOOKUP_ATTRIBUTE(tmp_expression_value_88, mod_consts[54]);
                    Py_DECREF(tmp_expression_value_88);
                    if (tmp_tuple_element_54 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 99;
                        type_description_2 = "o";
                        goto tuple_build_exception_40;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_5, 1, tmp_tuple_element_54);
                }
                goto tuple_build_noexception_40;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_40:;
                Py_DECREF(tmp_list_element_5);
                goto list_build_exception_5;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_40:;
                PyList_SET_ITEM(tmp_dictset_value, 2, tmp_list_element_5);
                tmp_tuple_element_55 = mod_consts[118];
                tmp_list_element_5 = PyTuple_New(2);
                PyTuple_SET_ITEM0(tmp_list_element_5, 0, tmp_tuple_element_55);
                tmp_tuple_element_55 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__5_hsa_barrier_and_packet_t_95, mod_consts[71]);

                if (tmp_tuple_element_55 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_tuple_element_55 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                        if (unlikely(tmp_tuple_element_55 == NULL)) {
                            tmp_tuple_element_55 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                        }

                        if (tmp_tuple_element_55 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 100;
                            type_description_2 = "o";
                            goto tuple_build_exception_41;
                        }
                        Py_INCREF(tmp_tuple_element_55);
                    } else {
                        goto tuple_build_exception_41;
                    }
                }

                PyTuple_SET_ITEM(tmp_list_element_5, 1, tmp_tuple_element_55);
                goto tuple_build_noexception_41;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_41:;
                Py_DECREF(tmp_list_element_5);
                goto list_build_exception_5;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_41:;
                PyList_SET_ITEM(tmp_dictset_value, 3, tmp_list_element_5);
                tmp_tuple_element_56 = mod_consts[119];
                tmp_list_element_5 = PyTuple_New(2);
                PyTuple_SET_ITEM0(tmp_list_element_5, 0, tmp_tuple_element_56);
                tmp_tuple_element_56 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__5_hsa_barrier_and_packet_t_95, mod_consts[71]);

                if (tmp_tuple_element_56 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_tuple_element_56 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                        if (unlikely(tmp_tuple_element_56 == NULL)) {
                            tmp_tuple_element_56 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                        }

                        if (tmp_tuple_element_56 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 101;
                            type_description_2 = "o";
                            goto tuple_build_exception_42;
                        }
                        Py_INCREF(tmp_tuple_element_56);
                    } else {
                        goto tuple_build_exception_42;
                    }
                }

                PyTuple_SET_ITEM(tmp_list_element_5, 1, tmp_tuple_element_56);
                goto tuple_build_noexception_42;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_42:;
                Py_DECREF(tmp_list_element_5);
                goto list_build_exception_5;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_42:;
                PyList_SET_ITEM(tmp_dictset_value, 4, tmp_list_element_5);
                tmp_tuple_element_57 = mod_consts[120];
                tmp_list_element_5 = PyTuple_New(2);
                PyTuple_SET_ITEM0(tmp_list_element_5, 0, tmp_tuple_element_57);
                tmp_tuple_element_57 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__5_hsa_barrier_and_packet_t_95, mod_consts[71]);

                if (tmp_tuple_element_57 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_tuple_element_57 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                        if (unlikely(tmp_tuple_element_57 == NULL)) {
                            tmp_tuple_element_57 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                        }

                        if (tmp_tuple_element_57 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 102;
                            type_description_2 = "o";
                            goto tuple_build_exception_43;
                        }
                        Py_INCREF(tmp_tuple_element_57);
                    } else {
                        goto tuple_build_exception_43;
                    }
                }

                PyTuple_SET_ITEM(tmp_list_element_5, 1, tmp_tuple_element_57);
                goto tuple_build_noexception_43;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_43:;
                Py_DECREF(tmp_list_element_5);
                goto list_build_exception_5;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_43:;
                PyList_SET_ITEM(tmp_dictset_value, 5, tmp_list_element_5);
                tmp_tuple_element_58 = mod_consts[121];
                tmp_list_element_5 = PyTuple_New(2);
                PyTuple_SET_ITEM0(tmp_list_element_5, 0, tmp_tuple_element_58);
                tmp_tuple_element_58 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__5_hsa_barrier_and_packet_t_95, mod_consts[71]);

                if (tmp_tuple_element_58 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_tuple_element_58 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                        if (unlikely(tmp_tuple_element_58 == NULL)) {
                            tmp_tuple_element_58 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                        }

                        if (tmp_tuple_element_58 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 103;
                            type_description_2 = "o";
                            goto tuple_build_exception_44;
                        }
                        Py_INCREF(tmp_tuple_element_58);
                    } else {
                        goto tuple_build_exception_44;
                    }
                }

                PyTuple_SET_ITEM(tmp_list_element_5, 1, tmp_tuple_element_58);
                goto tuple_build_noexception_44;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_44:;
                Py_DECREF(tmp_list_element_5);
                goto list_build_exception_5;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_44:;
                PyList_SET_ITEM(tmp_dictset_value, 6, tmp_list_element_5);
                tmp_tuple_element_59 = mod_consts[122];
                tmp_list_element_5 = PyTuple_New(2);
                PyTuple_SET_ITEM0(tmp_list_element_5, 0, tmp_tuple_element_59);
                tmp_tuple_element_59 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__5_hsa_barrier_and_packet_t_95, mod_consts[71]);

                if (tmp_tuple_element_59 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_tuple_element_59 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                        if (unlikely(tmp_tuple_element_59 == NULL)) {
                            tmp_tuple_element_59 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                        }

                        if (tmp_tuple_element_59 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 104;
                            type_description_2 = "o";
                            goto tuple_build_exception_45;
                        }
                        Py_INCREF(tmp_tuple_element_59);
                    } else {
                        goto tuple_build_exception_45;
                    }
                }

                PyTuple_SET_ITEM(tmp_list_element_5, 1, tmp_tuple_element_59);
                goto tuple_build_noexception_45;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_45:;
                Py_DECREF(tmp_list_element_5);
                goto list_build_exception_5;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_45:;
                PyList_SET_ITEM(tmp_dictset_value, 7, tmp_list_element_5);
                tmp_tuple_element_60 = mod_consts[110];
                tmp_list_element_5 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_89;
                    PyTuple_SET_ITEM0(tmp_list_element_5, 0, tmp_tuple_element_60);
                    tmp_expression_value_89 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__5_hsa_barrier_and_packet_t_95, mod_consts[28]);

                    if (tmp_expression_value_89 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_89 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_89 == NULL)) {
                                tmp_expression_value_89 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_89 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 105;
                                type_description_2 = "o";
                                goto tuple_build_exception_46;
                            }
                            Py_INCREF(tmp_expression_value_89);
                        } else {
                            goto tuple_build_exception_46;
                        }
                    }

                    tmp_tuple_element_60 = LOOKUP_ATTRIBUTE(tmp_expression_value_89, mod_consts[39]);
                    Py_DECREF(tmp_expression_value_89);
                    if (tmp_tuple_element_60 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 105;
                        type_description_2 = "o";
                        goto tuple_build_exception_46;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_5, 1, tmp_tuple_element_60);
                }
                goto tuple_build_noexception_46;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_46:;
                Py_DECREF(tmp_list_element_5);
                goto list_build_exception_5;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_46:;
                PyList_SET_ITEM(tmp_dictset_value, 8, tmp_list_element_5);
                tmp_tuple_element_61 = mod_consts[111];
                tmp_list_element_5 = PyTuple_New(2);
                PyTuple_SET_ITEM0(tmp_list_element_5, 0, tmp_tuple_element_61);
                tmp_tuple_element_61 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__5_hsa_barrier_and_packet_t_95, mod_consts[71]);

                if (tmp_tuple_element_61 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_tuple_element_61 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                        if (unlikely(tmp_tuple_element_61 == NULL)) {
                            tmp_tuple_element_61 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                        }

                        if (tmp_tuple_element_61 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 106;
                            type_description_2 = "o";
                            goto tuple_build_exception_47;
                        }
                        Py_INCREF(tmp_tuple_element_61);
                    } else {
                        goto tuple_build_exception_47;
                    }
                }

                PyTuple_SET_ITEM(tmp_list_element_5, 1, tmp_tuple_element_61);
                goto tuple_build_noexception_47;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_47:;
                Py_DECREF(tmp_list_element_5);
                goto list_build_exception_5;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_47:;
                PyList_SET_ITEM(tmp_dictset_value, 9, tmp_list_element_5);
            }
            goto list_build_noexception_5;
            // Exception handling pass through code for list_build:
            list_build_exception_5:;
            Py_DECREF(tmp_dictset_value);
            goto frame_exception_exit_6;
            // Finished with no exception for list_build:
            list_build_noexception_5:;
            tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__5_hsa_barrier_and_packet_t_95, mod_consts[57], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 96;
                type_description_2 = "o";
                goto frame_exception_exit_6;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_8f1038c8de2eafcc8378d2a867a429a5_6);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_5;

        frame_exception_exit_6:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_8f1038c8de2eafcc8378d2a867a429a5_6);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_8f1038c8de2eafcc8378d2a867a429a5_6, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_8f1038c8de2eafcc8378d2a867a429a5_6->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_8f1038c8de2eafcc8378d2a867a429a5_6, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_8f1038c8de2eafcc8378d2a867a429a5_6,
            type_description_2,
            outline_4_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_8f1038c8de2eafcc8378d2a867a429a5_6 == cache_frame_8f1038c8de2eafcc8378d2a867a429a5_6) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_8f1038c8de2eafcc8378d2a867a429a5_6);
            cache_frame_8f1038c8de2eafcc8378d2a867a429a5_6 = NULL;
        }

        assertFrameObject(frame_8f1038c8de2eafcc8378d2a867a429a5_6);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_5;

        frame_no_exception_5:;
        goto skip_nested_handling_5;
        nested_frame_exit_5:;

        goto try_except_handler_16;
        skip_nested_handling_5:;
        {
            nuitka_bool tmp_condition_result_31;
            PyObject *tmp_cmp_expr_left_5;
            PyObject *tmp_cmp_expr_right_5;
            CHECK_OBJECT(tmp_class_creation_5__bases);
            tmp_cmp_expr_left_5 = tmp_class_creation_5__bases;
            CHECK_OBJECT(tmp_class_creation_5__bases_orig);
            tmp_cmp_expr_right_5 = tmp_class_creation_5__bases_orig;
            tmp_condition_result_31 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_5, tmp_cmp_expr_right_5);
            if (tmp_condition_result_31 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 95;

                goto try_except_handler_16;
            }
            if (tmp_condition_result_31 == NUITKA_BOOL_TRUE) {
                goto branch_yes_20;
            } else {
                goto branch_no_20;
            }
            assert(tmp_condition_result_31 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_20:;
        CHECK_OBJECT(tmp_class_creation_5__bases_orig);
        tmp_dictset_value = tmp_class_creation_5__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__5_hsa_barrier_and_packet_t_95, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;

            goto try_except_handler_16;
        }
        branch_no_20:;
        {
            PyObject *tmp_assign_source_78;
            PyObject *tmp_called_value_10;
            PyObject *tmp_args_value_10;
            PyObject *tmp_tuple_element_62;
            PyObject *tmp_kwargs_value_10;
            CHECK_OBJECT(tmp_class_creation_5__metaclass);
            tmp_called_value_10 = tmp_class_creation_5__metaclass;
            tmp_tuple_element_62 = mod_consts[117];
            tmp_args_value_10 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_10, 0, tmp_tuple_element_62);
            CHECK_OBJECT(tmp_class_creation_5__bases);
            tmp_tuple_element_62 = tmp_class_creation_5__bases;
            PyTuple_SET_ITEM0(tmp_args_value_10, 1, tmp_tuple_element_62);
            tmp_tuple_element_62 = locals_numba$roc$hsadrv$drvapi$$$class__5_hsa_barrier_and_packet_t_95;
            PyTuple_SET_ITEM0(tmp_args_value_10, 2, tmp_tuple_element_62);
            CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
            tmp_kwargs_value_10 = tmp_class_creation_5__class_decl_dict;
            frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 95;
            tmp_assign_source_78 = CALL_FUNCTION(tmp_called_value_10, tmp_args_value_10, tmp_kwargs_value_10);
            Py_DECREF(tmp_args_value_10);
            if (tmp_assign_source_78 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 95;

                goto try_except_handler_16;
            }
            assert(outline_4_var___class__ == NULL);
            outline_4_var___class__ = tmp_assign_source_78;
        }
        CHECK_OBJECT(outline_4_var___class__);
        tmp_assign_source_77 = outline_4_var___class__;
        Py_INCREF(tmp_assign_source_77);
        goto try_return_handler_16;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_16:;
        Py_DECREF(locals_numba$roc$hsadrv$drvapi$$$class__5_hsa_barrier_and_packet_t_95);
        locals_numba$roc$hsadrv$drvapi$$$class__5_hsa_barrier_and_packet_t_95 = NULL;
        goto try_return_handler_15;
        // Exception handler code:
        try_except_handler_16:;
        exception_keeper_type_14 = exception_type;
        exception_keeper_value_14 = exception_value;
        exception_keeper_tb_14 = exception_tb;
        exception_keeper_lineno_14 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$roc$hsadrv$drvapi$$$class__5_hsa_barrier_and_packet_t_95);
        locals_numba$roc$hsadrv$drvapi$$$class__5_hsa_barrier_and_packet_t_95 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_14;
        exception_value = exception_keeper_value_14;
        exception_tb = exception_keeper_tb_14;
        exception_lineno = exception_keeper_lineno_14;

        goto try_except_handler_15;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_15:;
        CHECK_OBJECT(outline_4_var___class__);
        Py_DECREF(outline_4_var___class__);
        outline_4_var___class__ = NULL;
        goto outline_result_5;
        // Exception handler code:
        try_except_handler_15:;
        exception_keeper_type_15 = exception_type;
        exception_keeper_value_15 = exception_value;
        exception_keeper_tb_15 = exception_tb;
        exception_keeper_lineno_15 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_15;
        exception_value = exception_keeper_value_15;
        exception_tb = exception_keeper_tb_15;
        exception_lineno = exception_keeper_lineno_15;

        goto outline_exception_5;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_5:;
        exception_lineno = 95;
        goto try_except_handler_14;
        outline_result_5:;
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[117], tmp_assign_source_77);
    }
    goto try_end_6;
    // Exception handler code:
    try_except_handler_14:;
    exception_keeper_type_16 = exception_type;
    exception_keeper_value_16 = exception_value;
    exception_keeper_tb_16 = exception_tb;
    exception_keeper_lineno_16 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_5__bases_orig);
    tmp_class_creation_5__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_5__bases);
    tmp_class_creation_5__bases = NULL;
    Py_XDECREF(tmp_class_creation_5__class_decl_dict);
    tmp_class_creation_5__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_5__metaclass);
    tmp_class_creation_5__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_5__prepared);
    tmp_class_creation_5__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_16;
    exception_value = exception_keeper_value_16;
    exception_tb = exception_keeper_tb_16;
    exception_lineno = exception_keeper_lineno_16;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    CHECK_OBJECT(tmp_class_creation_5__bases_orig);
    Py_DECREF(tmp_class_creation_5__bases_orig);
    tmp_class_creation_5__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_5__bases);
    Py_DECREF(tmp_class_creation_5__bases);
    tmp_class_creation_5__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
    Py_DECREF(tmp_class_creation_5__class_decl_dict);
    tmp_class_creation_5__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_5__metaclass);
    Py_DECREF(tmp_class_creation_5__metaclass);
    tmp_class_creation_5__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_5__prepared);
    Py_DECREF(tmp_class_creation_5__prepared);
    tmp_class_creation_5__prepared = NULL;
    {
        PyObject *tmp_assign_source_79;
        tmp_assign_source_79 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[117]);

        if (unlikely(tmp_assign_source_79 == NULL)) {
            tmp_assign_source_79 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[117]);
        }

        if (tmp_assign_source_79 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 109;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT0(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[123], tmp_assign_source_79);
    }
    {
        PyObject *tmp_assign_source_80;
        PyObject *tmp_expression_value_90;
        tmp_expression_value_90 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_90 == NULL)) {
            tmp_expression_value_90 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_90 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 111;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_80 = LOOKUP_ATTRIBUTE(tmp_expression_value_90, mod_consts[41]);
        if (tmp_assign_source_80 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 111;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[124], tmp_assign_source_80);
    }
    {
        PyObject *tmp_assign_source_81;
        PyObject *tmp_expression_value_91;
        tmp_expression_value_91 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_91 == NULL)) {
            tmp_expression_value_91 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_91 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 112;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_81 = LOOKUP_ATTRIBUTE(tmp_expression_value_91, mod_consts[41]);
        if (tmp_assign_source_81 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 112;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[125], tmp_assign_source_81);
    }
    {
        PyObject *tmp_assign_source_82;
        PyObject *tmp_expression_value_92;
        tmp_expression_value_92 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_92 == NULL)) {
            tmp_expression_value_92 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_92 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 113;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_82 = LOOKUP_ATTRIBUTE(tmp_expression_value_92, mod_consts[41]);
        if (tmp_assign_source_82 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 113;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[126], tmp_assign_source_82);
    }
    {
        PyObject *tmp_assign_source_83;
        PyObject *tmp_expression_value_93;
        tmp_expression_value_93 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_93 == NULL)) {
            tmp_expression_value_93 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_93 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 114;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_83 = LOOKUP_ATTRIBUTE(tmp_expression_value_93, mod_consts[41]);
        if (tmp_assign_source_83 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 114;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[127], tmp_assign_source_83);
    }
    {
        PyObject *tmp_assign_source_84;
        PyObject *tmp_expression_value_94;
        tmp_expression_value_94 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_94 == NULL)) {
            tmp_expression_value_94 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_94 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 115;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_84 = LOOKUP_ATTRIBUTE(tmp_expression_value_94, mod_consts[41]);
        if (tmp_assign_source_84 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 115;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[128], tmp_assign_source_84);
    }
    {
        PyObject *tmp_assign_source_85;
        PyObject *tmp_expression_value_95;
        tmp_expression_value_95 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_95 == NULL)) {
            tmp_expression_value_95 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_95 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 116;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_85 = LOOKUP_ATTRIBUTE(tmp_expression_value_95, mod_consts[41]);
        if (tmp_assign_source_85 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 116;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[129], tmp_assign_source_85);
    }
    {
        PyObject *tmp_assign_source_86;
        PyObject *tmp_expression_value_96;
        tmp_expression_value_96 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_96 == NULL)) {
            tmp_expression_value_96 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_96 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 117;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_86 = LOOKUP_ATTRIBUTE(tmp_expression_value_96, mod_consts[41]);
        if (tmp_assign_source_86 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 117;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[130], tmp_assign_source_86);
    }
    {
        PyObject *tmp_assign_source_87;
        tmp_assign_source_87 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[40]);

        if (unlikely(tmp_assign_source_87 == NULL)) {
            tmp_assign_source_87 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[40]);
        }

        if (tmp_assign_source_87 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 118;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT0(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[131], tmp_assign_source_87);
    }
    {
        PyObject *tmp_assign_source_88;
        PyObject *tmp_expression_value_97;
        tmp_expression_value_97 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_97 == NULL)) {
            tmp_expression_value_97 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_97 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 119;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_88 = LOOKUP_ATTRIBUTE(tmp_expression_value_97, mod_consts[41]);
        if (tmp_assign_source_88 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 119;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[132], tmp_assign_source_88);
    }
    {
        PyObject *tmp_assign_source_89;
        tmp_assign_source_89 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[40]);

        if (unlikely(tmp_assign_source_89 == NULL)) {
            tmp_assign_source_89 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[40]);
        }

        if (tmp_assign_source_89 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 120;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT0(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[133], tmp_assign_source_89);
    }
    {
        PyObject *tmp_assign_source_90;
        tmp_assign_source_90 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[40]);

        if (unlikely(tmp_assign_source_90 == NULL)) {
            tmp_assign_source_90 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[40]);
        }

        if (tmp_assign_source_90 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 121;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT0(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[134], tmp_assign_source_90);
    }
    {
        PyObject *tmp_assign_source_91;
        PyObject *tmp_expression_value_98;
        tmp_expression_value_98 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_98 == NULL)) {
            tmp_expression_value_98 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_98 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 122;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_91 = LOOKUP_ATTRIBUTE(tmp_expression_value_98, mod_consts[41]);
        if (tmp_assign_source_91 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 122;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[135], tmp_assign_source_91);
    }
    {
        PyObject *tmp_assign_source_92;
        PyObject *tmp_expression_value_99;
        tmp_expression_value_99 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_99 == NULL)) {
            tmp_expression_value_99 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_99 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 123;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_92 = LOOKUP_ATTRIBUTE(tmp_expression_value_99, mod_consts[41]);
        if (tmp_assign_source_92 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 123;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[136], tmp_assign_source_92);
    }
    {
        PyObject *tmp_assign_source_93;
        tmp_assign_source_93 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[40]);

        if (unlikely(tmp_assign_source_93 == NULL)) {
            tmp_assign_source_93 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[40]);
        }

        if (tmp_assign_source_93 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 124;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT0(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[137], tmp_assign_source_93);
    }
    {
        PyObject *tmp_assign_source_94;
        PyObject *tmp_expression_value_100;
        tmp_expression_value_100 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_100 == NULL)) {
            tmp_expression_value_100 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_100 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 125;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_94 = LOOKUP_ATTRIBUTE(tmp_expression_value_100, mod_consts[41]);
        if (tmp_assign_source_94 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 125;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[138], tmp_assign_source_94);
    }
    {
        PyObject *tmp_assign_source_95;
        tmp_assign_source_95 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[40]);

        if (unlikely(tmp_assign_source_95 == NULL)) {
            tmp_assign_source_95 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[40]);
        }

        if (tmp_assign_source_95 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT0(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[139], tmp_assign_source_95);
    }
    {
        PyObject *tmp_assign_source_96;
        PyObject *tmp_expression_value_101;
        tmp_expression_value_101 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_101 == NULL)) {
            tmp_expression_value_101 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_101 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 127;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_96 = LOOKUP_ATTRIBUTE(tmp_expression_value_101, mod_consts[41]);
        if (tmp_assign_source_96 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 127;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[140], tmp_assign_source_96);
    }
    {
        PyObject *tmp_assign_source_97;
        PyObject *tmp_expression_value_102;
        tmp_expression_value_102 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_102 == NULL)) {
            tmp_expression_value_102 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_102 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 128;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_97 = LOOKUP_ATTRIBUTE(tmp_expression_value_102, mod_consts[41]);
        if (tmp_assign_source_97 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 128;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[141], tmp_assign_source_97);
    }
    {
        PyObject *tmp_assign_source_98;
        tmp_assign_source_98 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[40]);

        if (unlikely(tmp_assign_source_98 == NULL)) {
            tmp_assign_source_98 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[40]);
        }

        if (tmp_assign_source_98 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 129;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT0(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[142], tmp_assign_source_98);
    }
    {
        PyObject *tmp_assign_source_99;
        PyObject *tmp_expression_value_103;
        tmp_expression_value_103 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_103 == NULL)) {
            tmp_expression_value_103 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_103 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 130;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_99 = LOOKUP_ATTRIBUTE(tmp_expression_value_103, mod_consts[41]);
        if (tmp_assign_source_99 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 130;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[143], tmp_assign_source_99);
    }
    {
        PyObject *tmp_assign_source_100;
        PyObject *tmp_expression_value_104;
        tmp_expression_value_104 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_104 == NULL)) {
            tmp_expression_value_104 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_104 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 137;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_100 = LOOKUP_ATTRIBUTE(tmp_expression_value_104, mod_consts[54]);
        if (tmp_assign_source_100 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 137;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[144], tmp_assign_source_100);
    }
    {
        PyObject *tmp_assign_source_101;
        tmp_assign_source_101 = mod_consts[145];
        UPDATE_STRING_DICT0(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[146], tmp_assign_source_101);
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_102;
        PyObject *tmp_tuple_element_63;
        PyObject *tmp_expression_value_105;
        tmp_expression_value_105 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_105 == NULL)) {
            tmp_expression_value_105 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_105 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 139;

            goto try_except_handler_17;
        }
        tmp_tuple_element_63 = LOOKUP_ATTRIBUTE(tmp_expression_value_105, mod_consts[43]);
        if (tmp_tuple_element_63 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 139;

            goto try_except_handler_17;
        }
        tmp_assign_source_102 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_assign_source_102, 0, tmp_tuple_element_63);
        assert(tmp_class_creation_6__bases_orig == NULL);
        tmp_class_creation_6__bases_orig = tmp_assign_source_102;
    }
    {
        PyObject *tmp_assign_source_103;
        PyObject *tmp_dircall_arg1_6;
        CHECK_OBJECT(tmp_class_creation_6__bases_orig);
        tmp_dircall_arg1_6 = tmp_class_creation_6__bases_orig;
        Py_INCREF(tmp_dircall_arg1_6);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_6};
            tmp_assign_source_103 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_103 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 139;

            goto try_except_handler_17;
        }
        assert(tmp_class_creation_6__bases == NULL);
        tmp_class_creation_6__bases = tmp_assign_source_103;
    }
    {
        PyObject *tmp_assign_source_104;
        tmp_assign_source_104 = PyDict_New();
        assert(tmp_class_creation_6__class_decl_dict == NULL);
        tmp_class_creation_6__class_decl_dict = tmp_assign_source_104;
    }
    {
        PyObject *tmp_assign_source_105;
        PyObject *tmp_metaclass_value_6;
        bool tmp_condition_result_32;
        PyObject *tmp_key_value_16;
        PyObject *tmp_dict_arg_value_16;
        PyObject *tmp_dict_arg_value_17;
        PyObject *tmp_key_value_17;
        nuitka_bool tmp_condition_result_33;
        int tmp_truth_name_7;
        PyObject *tmp_type_arg_11;
        PyObject *tmp_expression_value_106;
        PyObject *tmp_subscript_value_6;
        PyObject *tmp_bases_value_6;
        tmp_key_value_16 = mod_consts[44];
        CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
        tmp_dict_arg_value_16 = tmp_class_creation_6__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_16, tmp_key_value_16);
        assert(!(tmp_res == -1));
        tmp_condition_result_32 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_32 != false) {
            goto condexpr_true_12;
        } else {
            goto condexpr_false_12;
        }
        condexpr_true_12:;
        CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
        tmp_dict_arg_value_17 = tmp_class_creation_6__class_decl_dict;
        tmp_key_value_17 = mod_consts[44];
        tmp_metaclass_value_6 = DICT_GET_ITEM0(tmp_dict_arg_value_17, tmp_key_value_17);
        if (tmp_metaclass_value_6 == NULL) {
            tmp_metaclass_value_6 = Py_None;
        }
        assert(!(tmp_metaclass_value_6 == NULL));
        Py_INCREF(tmp_metaclass_value_6);
        goto condexpr_end_12;
        condexpr_false_12:;
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_truth_name_7 = CHECK_IF_TRUE(tmp_class_creation_6__bases);
        if (tmp_truth_name_7 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 139;

            goto try_except_handler_17;
        }
        tmp_condition_result_33 = tmp_truth_name_7 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_33 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_13;
        } else {
            goto condexpr_false_13;
        }
        condexpr_true_13:;
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_expression_value_106 = tmp_class_creation_6__bases;
        tmp_subscript_value_6 = mod_consts[29];
        tmp_type_arg_11 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_106, tmp_subscript_value_6, 0);
        if (tmp_type_arg_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 139;

            goto try_except_handler_17;
        }
        tmp_metaclass_value_6 = BUILTIN_TYPE1(tmp_type_arg_11);
        Py_DECREF(tmp_type_arg_11);
        if (tmp_metaclass_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 139;

            goto try_except_handler_17;
        }
        goto condexpr_end_13;
        condexpr_false_13:;
        tmp_metaclass_value_6 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_6);
        condexpr_end_13:;
        condexpr_end_12:;
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_bases_value_6 = tmp_class_creation_6__bases;
        tmp_assign_source_105 = SELECT_METACLASS(tmp_metaclass_value_6, tmp_bases_value_6);
        Py_DECREF(tmp_metaclass_value_6);
        if (tmp_assign_source_105 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 139;

            goto try_except_handler_17;
        }
        assert(tmp_class_creation_6__metaclass == NULL);
        tmp_class_creation_6__metaclass = tmp_assign_source_105;
    }
    {
        bool tmp_condition_result_34;
        PyObject *tmp_key_value_18;
        PyObject *tmp_dict_arg_value_18;
        tmp_key_value_18 = mod_consts[44];
        CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
        tmp_dict_arg_value_18 = tmp_class_creation_6__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_18, tmp_key_value_18);
        assert(!(tmp_res == -1));
        tmp_condition_result_34 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_34 != false) {
            goto branch_yes_21;
        } else {
            goto branch_no_21;
        }
    }
    branch_yes_21:;
    CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_6__class_decl_dict;
    tmp_dictdel_key = mod_consts[44];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 139;

        goto try_except_handler_17;
    }
    branch_no_21:;
    {
        nuitka_bool tmp_condition_result_35;
        PyObject *tmp_expression_value_107;
        CHECK_OBJECT(tmp_class_creation_6__metaclass);
        tmp_expression_value_107 = tmp_class_creation_6__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_107, mod_consts[45]);
        tmp_condition_result_35 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_35 == NUITKA_BOOL_TRUE) {
            goto branch_yes_22;
        } else {
            goto branch_no_22;
        }
    }
    branch_yes_22:;
    {
        PyObject *tmp_assign_source_106;
        PyObject *tmp_called_value_11;
        PyObject *tmp_expression_value_108;
        PyObject *tmp_args_value_11;
        PyObject *tmp_tuple_element_64;
        PyObject *tmp_kwargs_value_11;
        CHECK_OBJECT(tmp_class_creation_6__metaclass);
        tmp_expression_value_108 = tmp_class_creation_6__metaclass;
        tmp_called_value_11 = LOOKUP_ATTRIBUTE(tmp_expression_value_108, mod_consts[45]);
        if (tmp_called_value_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 139;

            goto try_except_handler_17;
        }
        tmp_tuple_element_64 = mod_consts[147];
        tmp_args_value_11 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_11, 0, tmp_tuple_element_64);
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_tuple_element_64 = tmp_class_creation_6__bases;
        PyTuple_SET_ITEM0(tmp_args_value_11, 1, tmp_tuple_element_64);
        CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
        tmp_kwargs_value_11 = tmp_class_creation_6__class_decl_dict;
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 139;
        tmp_assign_source_106 = CALL_FUNCTION(tmp_called_value_11, tmp_args_value_11, tmp_kwargs_value_11);
        Py_DECREF(tmp_called_value_11);
        Py_DECREF(tmp_args_value_11);
        if (tmp_assign_source_106 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 139;

            goto try_except_handler_17;
        }
        assert(tmp_class_creation_6__prepared == NULL);
        tmp_class_creation_6__prepared = tmp_assign_source_106;
    }
    {
        bool tmp_condition_result_36;
        PyObject *tmp_operand_value_6;
        PyObject *tmp_expression_value_109;
        CHECK_OBJECT(tmp_class_creation_6__prepared);
        tmp_expression_value_109 = tmp_class_creation_6__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_109, mod_consts[47]);
        tmp_operand_value_6 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_6);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 139;

            goto try_except_handler_17;
        }
        tmp_condition_result_36 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_36 != false) {
            goto branch_yes_23;
        } else {
            goto branch_no_23;
        }
    }
    branch_yes_23:;
    {
        PyObject *tmp_raise_type_6;
        PyObject *tmp_raise_value_6;
        PyObject *tmp_left_value_7;
        PyObject *tmp_right_value_7;
        PyObject *tmp_tuple_element_65;
        PyObject *tmp_getattr_target_6;
        PyObject *tmp_getattr_attr_6;
        PyObject *tmp_getattr_default_6;
        tmp_raise_type_6 = PyExc_TypeError;
        tmp_left_value_7 = mod_consts[48];
        CHECK_OBJECT(tmp_class_creation_6__metaclass);
        tmp_getattr_target_6 = tmp_class_creation_6__metaclass;
        tmp_getattr_attr_6 = mod_consts[15];
        tmp_getattr_default_6 = mod_consts[49];
        tmp_tuple_element_65 = BUILTIN_GETATTR(tmp_getattr_target_6, tmp_getattr_attr_6, tmp_getattr_default_6);
        if (tmp_tuple_element_65 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 139;

            goto try_except_handler_17;
        }
        tmp_right_value_7 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_110;
            PyObject *tmp_type_arg_12;
            PyTuple_SET_ITEM(tmp_right_value_7, 0, tmp_tuple_element_65);
            CHECK_OBJECT(tmp_class_creation_6__prepared);
            tmp_type_arg_12 = tmp_class_creation_6__prepared;
            tmp_expression_value_110 = BUILTIN_TYPE1(tmp_type_arg_12);
            assert(!(tmp_expression_value_110 == NULL));
            tmp_tuple_element_65 = LOOKUP_ATTRIBUTE(tmp_expression_value_110, mod_consts[15]);
            Py_DECREF(tmp_expression_value_110);
            if (tmp_tuple_element_65 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 139;

                goto tuple_build_exception_48;
            }
            PyTuple_SET_ITEM(tmp_right_value_7, 1, tmp_tuple_element_65);
        }
        goto tuple_build_noexception_48;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_48:;
        Py_DECREF(tmp_right_value_7);
        goto try_except_handler_17;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_48:;
        tmp_raise_value_6 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_7, tmp_right_value_7);
        Py_DECREF(tmp_right_value_7);
        if (tmp_raise_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 139;

            goto try_except_handler_17;
        }
        exception_type = tmp_raise_type_6;
        Py_INCREF(tmp_raise_type_6);
        exception_value = tmp_raise_value_6;
        exception_lineno = 139;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_17;
    }
    branch_no_23:;
    goto branch_end_22;
    branch_no_22:;
    {
        PyObject *tmp_assign_source_107;
        tmp_assign_source_107 = PyDict_New();
        assert(tmp_class_creation_6__prepared == NULL);
        tmp_class_creation_6__prepared = tmp_assign_source_107;
    }
    branch_end_22:;
    {
        PyObject *tmp_assign_source_108;
        {
            PyObject *tmp_set_locals_6;
            CHECK_OBJECT(tmp_class_creation_6__prepared);
            tmp_set_locals_6 = tmp_class_creation_6__prepared;
            locals_numba$roc$hsadrv$drvapi$$$class__6_BrigModuleHeader_139 = tmp_set_locals_6;
            Py_INCREF(tmp_set_locals_6);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__6_BrigModuleHeader_139, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 139;

            goto try_except_handler_19;
        }
        tmp_dictset_value = mod_consts[147];
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__6_BrigModuleHeader_139, mod_consts[52], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 139;

            goto try_except_handler_19;
        }
        if (isFrameUnusable(cache_frame_a5bf7593a9cd0e0ec263ccaa03091d5f_7)) {
            Py_XDECREF(cache_frame_a5bf7593a9cd0e0ec263ccaa03091d5f_7);

#if _DEBUG_REFCOUNTS
            if (cache_frame_a5bf7593a9cd0e0ec263ccaa03091d5f_7 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_a5bf7593a9cd0e0ec263ccaa03091d5f_7 = MAKE_FUNCTION_FRAME(codeobj_a5bf7593a9cd0e0ec263ccaa03091d5f, module_numba$roc$hsadrv$drvapi, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_a5bf7593a9cd0e0ec263ccaa03091d5f_7->m_type_description == NULL);
        frame_a5bf7593a9cd0e0ec263ccaa03091d5f_7 = cache_frame_a5bf7593a9cd0e0ec263ccaa03091d5f_7;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_a5bf7593a9cd0e0ec263ccaa03091d5f_7);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_a5bf7593a9cd0e0ec263ccaa03091d5f_7) == 2); // Frame stack

        // Framed code:
        {
            PyObject *tmp_list_element_6;
            PyObject *tmp_tuple_element_66;
            tmp_tuple_element_66 = mod_consts[148];
            tmp_list_element_6 = PyTuple_New(2);
            {
                PyObject *tmp_left_value_8;
                PyObject *tmp_expression_value_111;
                PyObject *tmp_right_value_8;
                PyTuple_SET_ITEM0(tmp_list_element_6, 0, tmp_tuple_element_66);
                tmp_expression_value_111 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__6_BrigModuleHeader_139, mod_consts[28]);

                if (tmp_expression_value_111 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_111 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                        if (unlikely(tmp_expression_value_111 == NULL)) {
                            tmp_expression_value_111 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                        }

                        if (tmp_expression_value_111 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 141;
                            type_description_2 = "o";
                            goto tuple_build_exception_49;
                        }
                        Py_INCREF(tmp_expression_value_111);
                    } else {
                        goto tuple_build_exception_49;
                    }
                }

                tmp_left_value_8 = LOOKUP_ATTRIBUTE(tmp_expression_value_111, mod_consts[149]);
                Py_DECREF(tmp_expression_value_111);
                if (tmp_left_value_8 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 141;
                    type_description_2 = "o";
                    goto tuple_build_exception_49;
                }
                tmp_right_value_8 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__6_BrigModuleHeader_139, mod_consts[146]);

                if (tmp_right_value_8 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_right_value_8 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[146]);

                        if (unlikely(tmp_right_value_8 == NULL)) {
                            tmp_right_value_8 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[146]);
                        }

                        if (tmp_right_value_8 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                            Py_DECREF(tmp_left_value_8);

                            exception_lineno = 141;
                            type_description_2 = "o";
                            goto tuple_build_exception_49;
                        }
                        Py_INCREF(tmp_right_value_8);
                    } else {
                        goto tuple_build_exception_49;
                    }
                }

                tmp_tuple_element_66 = BINARY_OPERATION_MULT_OBJECT_OBJECT_OBJECT(tmp_left_value_8, tmp_right_value_8);
                Py_DECREF(tmp_left_value_8);
                Py_DECREF(tmp_right_value_8);
                if (tmp_tuple_element_66 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 141;
                    type_description_2 = "o";
                    goto tuple_build_exception_49;
                }
                PyTuple_SET_ITEM(tmp_list_element_6, 1, tmp_tuple_element_66);
            }
            goto tuple_build_noexception_49;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_49:;
            Py_DECREF(tmp_list_element_6);
            goto frame_exception_exit_7;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_49:;
            tmp_dictset_value = PyList_New(8);
            {
                PyObject *tmp_tuple_element_67;
                PyObject *tmp_tuple_element_68;
                PyObject *tmp_tuple_element_69;
                PyObject *tmp_tuple_element_70;
                PyObject *tmp_tuple_element_71;
                PyObject *tmp_tuple_element_72;
                PyObject *tmp_tuple_element_73;
                PyList_SET_ITEM(tmp_dictset_value, 0, tmp_list_element_6);
                tmp_tuple_element_67 = mod_consts[150];
                tmp_list_element_6 = PyTuple_New(2);
                PyTuple_SET_ITEM0(tmp_list_element_6, 0, tmp_tuple_element_67);
                tmp_tuple_element_67 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__6_BrigModuleHeader_139, mod_consts[144]);

                if (tmp_tuple_element_67 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_tuple_element_67 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[144]);

                        if (unlikely(tmp_tuple_element_67 == NULL)) {
                            tmp_tuple_element_67 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[144]);
                        }

                        if (tmp_tuple_element_67 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 142;
                            type_description_2 = "o";
                            goto tuple_build_exception_50;
                        }
                        Py_INCREF(tmp_tuple_element_67);
                    } else {
                        goto tuple_build_exception_50;
                    }
                }

                PyTuple_SET_ITEM(tmp_list_element_6, 1, tmp_tuple_element_67);
                goto tuple_build_noexception_50;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_50:;
                Py_DECREF(tmp_list_element_6);
                goto list_build_exception_6;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_50:;
                PyList_SET_ITEM(tmp_dictset_value, 1, tmp_list_element_6);
                tmp_tuple_element_68 = mod_consts[151];
                tmp_list_element_6 = PyTuple_New(2);
                PyTuple_SET_ITEM0(tmp_list_element_6, 0, tmp_tuple_element_68);
                tmp_tuple_element_68 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__6_BrigModuleHeader_139, mod_consts[144]);

                if (tmp_tuple_element_68 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_tuple_element_68 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[144]);

                        if (unlikely(tmp_tuple_element_68 == NULL)) {
                            tmp_tuple_element_68 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[144]);
                        }

                        if (tmp_tuple_element_68 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 143;
                            type_description_2 = "o";
                            goto tuple_build_exception_51;
                        }
                        Py_INCREF(tmp_tuple_element_68);
                    } else {
                        goto tuple_build_exception_51;
                    }
                }

                PyTuple_SET_ITEM(tmp_list_element_6, 1, tmp_tuple_element_68);
                goto tuple_build_noexception_51;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_51:;
                Py_DECREF(tmp_list_element_6);
                goto list_build_exception_6;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_51:;
                PyList_SET_ITEM(tmp_dictset_value, 2, tmp_list_element_6);
                tmp_tuple_element_69 = mod_consts[152];
                tmp_list_element_6 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_112;
                    PyTuple_SET_ITEM0(tmp_list_element_6, 0, tmp_tuple_element_69);
                    tmp_expression_value_112 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__6_BrigModuleHeader_139, mod_consts[28]);

                    if (tmp_expression_value_112 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_112 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_112 == NULL)) {
                                tmp_expression_value_112 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_112 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 144;
                                type_description_2 = "o";
                                goto tuple_build_exception_52;
                            }
                            Py_INCREF(tmp_expression_value_112);
                        } else {
                            goto tuple_build_exception_52;
                        }
                    }

                    tmp_tuple_element_69 = LOOKUP_ATTRIBUTE(tmp_expression_value_112, mod_consts[39]);
                    Py_DECREF(tmp_expression_value_112);
                    if (tmp_tuple_element_69 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 144;
                        type_description_2 = "o";
                        goto tuple_build_exception_52;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_6, 1, tmp_tuple_element_69);
                }
                goto tuple_build_noexception_52;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_52:;
                Py_DECREF(tmp_list_element_6);
                goto list_build_exception_6;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_52:;
                PyList_SET_ITEM(tmp_dictset_value, 3, tmp_list_element_6);
                tmp_tuple_element_70 = mod_consts[153];
                tmp_list_element_6 = PyTuple_New(2);
                {
                    PyObject *tmp_left_value_9;
                    PyObject *tmp_expression_value_113;
                    PyObject *tmp_right_value_9;
                    PyTuple_SET_ITEM0(tmp_list_element_6, 0, tmp_tuple_element_70);
                    tmp_expression_value_113 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__6_BrigModuleHeader_139, mod_consts[28]);

                    if (tmp_expression_value_113 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_113 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_113 == NULL)) {
                                tmp_expression_value_113 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_113 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 145;
                                type_description_2 = "o";
                                goto tuple_build_exception_53;
                            }
                            Py_INCREF(tmp_expression_value_113);
                        } else {
                            goto tuple_build_exception_53;
                        }
                    }

                    tmp_left_value_9 = LOOKUP_ATTRIBUTE(tmp_expression_value_113, mod_consts[154]);
                    Py_DECREF(tmp_expression_value_113);
                    if (tmp_left_value_9 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 145;
                        type_description_2 = "o";
                        goto tuple_build_exception_53;
                    }
                    tmp_right_value_9 = mod_consts[155];
                    tmp_tuple_element_70 = BINARY_OPERATION_MULT_OBJECT_OBJECT_LONG(tmp_left_value_9, tmp_right_value_9);
                    Py_DECREF(tmp_left_value_9);
                    if (tmp_tuple_element_70 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 145;
                        type_description_2 = "o";
                        goto tuple_build_exception_53;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_6, 1, tmp_tuple_element_70);
                }
                goto tuple_build_noexception_53;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_53:;
                Py_DECREF(tmp_list_element_6);
                goto list_build_exception_6;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_53:;
                PyList_SET_ITEM(tmp_dictset_value, 4, tmp_list_element_6);
                tmp_tuple_element_71 = mod_consts[156];
                tmp_list_element_6 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_114;
                    PyTuple_SET_ITEM0(tmp_list_element_6, 0, tmp_tuple_element_71);
                    tmp_expression_value_114 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__6_BrigModuleHeader_139, mod_consts[28]);

                    if (tmp_expression_value_114 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_114 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_114 == NULL)) {
                                tmp_expression_value_114 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_114 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 146;
                                type_description_2 = "o";
                                goto tuple_build_exception_54;
                            }
                            Py_INCREF(tmp_expression_value_114);
                        } else {
                            goto tuple_build_exception_54;
                        }
                    }

                    tmp_tuple_element_71 = LOOKUP_ATTRIBUTE(tmp_expression_value_114, mod_consts[54]);
                    Py_DECREF(tmp_expression_value_114);
                    if (tmp_tuple_element_71 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 146;
                        type_description_2 = "o";
                        goto tuple_build_exception_54;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_6, 1, tmp_tuple_element_71);
                }
                goto tuple_build_noexception_54;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_54:;
                Py_DECREF(tmp_list_element_6);
                goto list_build_exception_6;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_54:;
                PyList_SET_ITEM(tmp_dictset_value, 5, tmp_list_element_6);
                tmp_tuple_element_72 = mod_consts[157];
                tmp_list_element_6 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_115;
                    PyTuple_SET_ITEM0(tmp_list_element_6, 0, tmp_tuple_element_72);
                    tmp_expression_value_115 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__6_BrigModuleHeader_139, mod_consts[28]);

                    if (tmp_expression_value_115 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_115 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_115 == NULL)) {
                                tmp_expression_value_115 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_115 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 147;
                                type_description_2 = "o";
                                goto tuple_build_exception_55;
                            }
                            Py_INCREF(tmp_expression_value_115);
                        } else {
                            goto tuple_build_exception_55;
                        }
                    }

                    tmp_tuple_element_72 = LOOKUP_ATTRIBUTE(tmp_expression_value_115, mod_consts[54]);
                    Py_DECREF(tmp_expression_value_115);
                    if (tmp_tuple_element_72 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 147;
                        type_description_2 = "o";
                        goto tuple_build_exception_55;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_6, 1, tmp_tuple_element_72);
                }
                goto tuple_build_noexception_55;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_55:;
                Py_DECREF(tmp_list_element_6);
                goto list_build_exception_6;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_55:;
                PyList_SET_ITEM(tmp_dictset_value, 6, tmp_list_element_6);
                tmp_tuple_element_73 = mod_consts[158];
                tmp_list_element_6 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_116;
                    PyTuple_SET_ITEM0(tmp_list_element_6, 0, tmp_tuple_element_73);
                    tmp_expression_value_116 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__6_BrigModuleHeader_139, mod_consts[28]);

                    if (tmp_expression_value_116 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_116 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_116 == NULL)) {
                                tmp_expression_value_116 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_116 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 148;
                                type_description_2 = "o";
                                goto tuple_build_exception_56;
                            }
                            Py_INCREF(tmp_expression_value_116);
                        } else {
                            goto tuple_build_exception_56;
                        }
                    }

                    tmp_tuple_element_73 = LOOKUP_ATTRIBUTE(tmp_expression_value_116, mod_consts[39]);
                    Py_DECREF(tmp_expression_value_116);
                    if (tmp_tuple_element_73 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 148;
                        type_description_2 = "o";
                        goto tuple_build_exception_56;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_6, 1, tmp_tuple_element_73);
                }
                goto tuple_build_noexception_56;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_56:;
                Py_DECREF(tmp_list_element_6);
                goto list_build_exception_6;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_56:;
                PyList_SET_ITEM(tmp_dictset_value, 7, tmp_list_element_6);
            }
            goto list_build_noexception_6;
            // Exception handling pass through code for list_build:
            list_build_exception_6:;
            Py_DECREF(tmp_dictset_value);
            goto frame_exception_exit_7;
            // Finished with no exception for list_build:
            list_build_noexception_6:;
            tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__6_BrigModuleHeader_139, mod_consts[57], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 140;
                type_description_2 = "o";
                goto frame_exception_exit_7;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a5bf7593a9cd0e0ec263ccaa03091d5f_7);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_6;

        frame_exception_exit_7:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a5bf7593a9cd0e0ec263ccaa03091d5f_7);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_a5bf7593a9cd0e0ec263ccaa03091d5f_7, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_a5bf7593a9cd0e0ec263ccaa03091d5f_7->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_a5bf7593a9cd0e0ec263ccaa03091d5f_7, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_a5bf7593a9cd0e0ec263ccaa03091d5f_7,
            type_description_2,
            outline_5_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_a5bf7593a9cd0e0ec263ccaa03091d5f_7 == cache_frame_a5bf7593a9cd0e0ec263ccaa03091d5f_7) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_a5bf7593a9cd0e0ec263ccaa03091d5f_7);
            cache_frame_a5bf7593a9cd0e0ec263ccaa03091d5f_7 = NULL;
        }

        assertFrameObject(frame_a5bf7593a9cd0e0ec263ccaa03091d5f_7);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_6;

        frame_no_exception_6:;
        goto skip_nested_handling_6;
        nested_frame_exit_6:;

        goto try_except_handler_19;
        skip_nested_handling_6:;
        {
            nuitka_bool tmp_condition_result_37;
            PyObject *tmp_cmp_expr_left_6;
            PyObject *tmp_cmp_expr_right_6;
            CHECK_OBJECT(tmp_class_creation_6__bases);
            tmp_cmp_expr_left_6 = tmp_class_creation_6__bases;
            CHECK_OBJECT(tmp_class_creation_6__bases_orig);
            tmp_cmp_expr_right_6 = tmp_class_creation_6__bases_orig;
            tmp_condition_result_37 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_6, tmp_cmp_expr_right_6);
            if (tmp_condition_result_37 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 139;

                goto try_except_handler_19;
            }
            if (tmp_condition_result_37 == NUITKA_BOOL_TRUE) {
                goto branch_yes_24;
            } else {
                goto branch_no_24;
            }
            assert(tmp_condition_result_37 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_24:;
        CHECK_OBJECT(tmp_class_creation_6__bases_orig);
        tmp_dictset_value = tmp_class_creation_6__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__6_BrigModuleHeader_139, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 139;

            goto try_except_handler_19;
        }
        branch_no_24:;
        {
            PyObject *tmp_assign_source_109;
            PyObject *tmp_called_value_12;
            PyObject *tmp_args_value_12;
            PyObject *tmp_tuple_element_74;
            PyObject *tmp_kwargs_value_12;
            CHECK_OBJECT(tmp_class_creation_6__metaclass);
            tmp_called_value_12 = tmp_class_creation_6__metaclass;
            tmp_tuple_element_74 = mod_consts[147];
            tmp_args_value_12 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_12, 0, tmp_tuple_element_74);
            CHECK_OBJECT(tmp_class_creation_6__bases);
            tmp_tuple_element_74 = tmp_class_creation_6__bases;
            PyTuple_SET_ITEM0(tmp_args_value_12, 1, tmp_tuple_element_74);
            tmp_tuple_element_74 = locals_numba$roc$hsadrv$drvapi$$$class__6_BrigModuleHeader_139;
            PyTuple_SET_ITEM0(tmp_args_value_12, 2, tmp_tuple_element_74);
            CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
            tmp_kwargs_value_12 = tmp_class_creation_6__class_decl_dict;
            frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 139;
            tmp_assign_source_109 = CALL_FUNCTION(tmp_called_value_12, tmp_args_value_12, tmp_kwargs_value_12);
            Py_DECREF(tmp_args_value_12);
            if (tmp_assign_source_109 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 139;

                goto try_except_handler_19;
            }
            assert(outline_5_var___class__ == NULL);
            outline_5_var___class__ = tmp_assign_source_109;
        }
        CHECK_OBJECT(outline_5_var___class__);
        tmp_assign_source_108 = outline_5_var___class__;
        Py_INCREF(tmp_assign_source_108);
        goto try_return_handler_19;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_19:;
        Py_DECREF(locals_numba$roc$hsadrv$drvapi$$$class__6_BrigModuleHeader_139);
        locals_numba$roc$hsadrv$drvapi$$$class__6_BrigModuleHeader_139 = NULL;
        goto try_return_handler_18;
        // Exception handler code:
        try_except_handler_19:;
        exception_keeper_type_17 = exception_type;
        exception_keeper_value_17 = exception_value;
        exception_keeper_tb_17 = exception_tb;
        exception_keeper_lineno_17 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$roc$hsadrv$drvapi$$$class__6_BrigModuleHeader_139);
        locals_numba$roc$hsadrv$drvapi$$$class__6_BrigModuleHeader_139 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_17;
        exception_value = exception_keeper_value_17;
        exception_tb = exception_keeper_tb_17;
        exception_lineno = exception_keeper_lineno_17;

        goto try_except_handler_18;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_18:;
        CHECK_OBJECT(outline_5_var___class__);
        Py_DECREF(outline_5_var___class__);
        outline_5_var___class__ = NULL;
        goto outline_result_6;
        // Exception handler code:
        try_except_handler_18:;
        exception_keeper_type_18 = exception_type;
        exception_keeper_value_18 = exception_value;
        exception_keeper_tb_18 = exception_tb;
        exception_keeper_lineno_18 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_18;
        exception_value = exception_keeper_value_18;
        exception_tb = exception_keeper_tb_18;
        exception_lineno = exception_keeper_lineno_18;

        goto outline_exception_6;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_6:;
        exception_lineno = 139;
        goto try_except_handler_17;
        outline_result_6:;
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[147], tmp_assign_source_108);
    }
    goto try_end_7;
    // Exception handler code:
    try_except_handler_17:;
    exception_keeper_type_19 = exception_type;
    exception_keeper_value_19 = exception_value;
    exception_keeper_tb_19 = exception_tb;
    exception_keeper_lineno_19 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_6__bases_orig);
    tmp_class_creation_6__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_6__bases);
    tmp_class_creation_6__bases = NULL;
    Py_XDECREF(tmp_class_creation_6__class_decl_dict);
    tmp_class_creation_6__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_6__metaclass);
    tmp_class_creation_6__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_6__prepared);
    tmp_class_creation_6__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_19;
    exception_value = exception_keeper_value_19;
    exception_tb = exception_keeper_tb_19;
    exception_lineno = exception_keeper_lineno_19;

    goto frame_exception_exit_1;
    // End of try:
    try_end_7:;
    CHECK_OBJECT(tmp_class_creation_6__bases_orig);
    Py_DECREF(tmp_class_creation_6__bases_orig);
    tmp_class_creation_6__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_6__bases);
    Py_DECREF(tmp_class_creation_6__bases);
    tmp_class_creation_6__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
    Py_DECREF(tmp_class_creation_6__class_decl_dict);
    tmp_class_creation_6__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_6__metaclass);
    Py_DECREF(tmp_class_creation_6__metaclass);
    tmp_class_creation_6__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_6__prepared);
    Py_DECREF(tmp_class_creation_6__prepared);
    tmp_class_creation_6__prepared = NULL;
    {
        PyObject *tmp_assign_source_110;
        PyObject *tmp_called_value_13;
        PyObject *tmp_args_element_value_1;
        tmp_called_value_13 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

        if (unlikely(tmp_called_value_13 == NULL)) {
            tmp_called_value_13 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
        }

        if (tmp_called_value_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 151;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[147]);

        if (unlikely(tmp_args_element_value_1 == NULL)) {
            tmp_args_element_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[147]);
        }

        if (tmp_args_element_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 151;

            goto frame_exception_exit_1;
        }
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 151;
        tmp_assign_source_110 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_13, tmp_args_element_value_1);
        if (tmp_assign_source_110 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 151;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[159], tmp_assign_source_110);
    }
    {
        PyObject *tmp_assign_source_111;
        PyObject *tmp_expression_value_117;
        tmp_expression_value_117 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_117 == NULL)) {
            tmp_expression_value_117 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_117 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 158;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_111 = LOOKUP_ATTRIBUTE(tmp_expression_value_117, mod_consts[41]);
        if (tmp_assign_source_111 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 158;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[160], tmp_assign_source_111);
    }
    {
        PyObject *tmp_assign_source_112;
        PyObject *tmp_expression_value_118;
        tmp_expression_value_118 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_118 == NULL)) {
            tmp_expression_value_118 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_118 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 159;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_112 = LOOKUP_ATTRIBUTE(tmp_expression_value_118, mod_consts[41]);
        if (tmp_assign_source_112 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 159;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[161], tmp_assign_source_112);
    }
    {
        PyObject *tmp_assign_source_113;
        PyObject *tmp_expression_value_119;
        tmp_expression_value_119 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_119 == NULL)) {
            tmp_expression_value_119 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_119 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 160;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_113 = LOOKUP_ATTRIBUTE(tmp_expression_value_119, mod_consts[41]);
        if (tmp_assign_source_113 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 160;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[162], tmp_assign_source_113);
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_114;
        PyObject *tmp_tuple_element_75;
        PyObject *tmp_expression_value_120;
        tmp_expression_value_120 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_120 == NULL)) {
            tmp_expression_value_120 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_120 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 161;

            goto try_except_handler_20;
        }
        tmp_tuple_element_75 = LOOKUP_ATTRIBUTE(tmp_expression_value_120, mod_consts[43]);
        if (tmp_tuple_element_75 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 161;

            goto try_except_handler_20;
        }
        tmp_assign_source_114 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_assign_source_114, 0, tmp_tuple_element_75);
        assert(tmp_class_creation_7__bases_orig == NULL);
        tmp_class_creation_7__bases_orig = tmp_assign_source_114;
    }
    {
        PyObject *tmp_assign_source_115;
        PyObject *tmp_dircall_arg1_7;
        CHECK_OBJECT(tmp_class_creation_7__bases_orig);
        tmp_dircall_arg1_7 = tmp_class_creation_7__bases_orig;
        Py_INCREF(tmp_dircall_arg1_7);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_7};
            tmp_assign_source_115 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_115 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 161;

            goto try_except_handler_20;
        }
        assert(tmp_class_creation_7__bases == NULL);
        tmp_class_creation_7__bases = tmp_assign_source_115;
    }
    {
        PyObject *tmp_assign_source_116;
        tmp_assign_source_116 = PyDict_New();
        assert(tmp_class_creation_7__class_decl_dict == NULL);
        tmp_class_creation_7__class_decl_dict = tmp_assign_source_116;
    }
    {
        PyObject *tmp_assign_source_117;
        PyObject *tmp_metaclass_value_7;
        bool tmp_condition_result_38;
        PyObject *tmp_key_value_19;
        PyObject *tmp_dict_arg_value_19;
        PyObject *tmp_dict_arg_value_20;
        PyObject *tmp_key_value_20;
        nuitka_bool tmp_condition_result_39;
        int tmp_truth_name_8;
        PyObject *tmp_type_arg_13;
        PyObject *tmp_expression_value_121;
        PyObject *tmp_subscript_value_7;
        PyObject *tmp_bases_value_7;
        tmp_key_value_19 = mod_consts[44];
        CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
        tmp_dict_arg_value_19 = tmp_class_creation_7__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_19, tmp_key_value_19);
        assert(!(tmp_res == -1));
        tmp_condition_result_38 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_38 != false) {
            goto condexpr_true_14;
        } else {
            goto condexpr_false_14;
        }
        condexpr_true_14:;
        CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
        tmp_dict_arg_value_20 = tmp_class_creation_7__class_decl_dict;
        tmp_key_value_20 = mod_consts[44];
        tmp_metaclass_value_7 = DICT_GET_ITEM0(tmp_dict_arg_value_20, tmp_key_value_20);
        if (tmp_metaclass_value_7 == NULL) {
            tmp_metaclass_value_7 = Py_None;
        }
        assert(!(tmp_metaclass_value_7 == NULL));
        Py_INCREF(tmp_metaclass_value_7);
        goto condexpr_end_14;
        condexpr_false_14:;
        CHECK_OBJECT(tmp_class_creation_7__bases);
        tmp_truth_name_8 = CHECK_IF_TRUE(tmp_class_creation_7__bases);
        if (tmp_truth_name_8 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 161;

            goto try_except_handler_20;
        }
        tmp_condition_result_39 = tmp_truth_name_8 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_39 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_15;
        } else {
            goto condexpr_false_15;
        }
        condexpr_true_15:;
        CHECK_OBJECT(tmp_class_creation_7__bases);
        tmp_expression_value_121 = tmp_class_creation_7__bases;
        tmp_subscript_value_7 = mod_consts[29];
        tmp_type_arg_13 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_121, tmp_subscript_value_7, 0);
        if (tmp_type_arg_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 161;

            goto try_except_handler_20;
        }
        tmp_metaclass_value_7 = BUILTIN_TYPE1(tmp_type_arg_13);
        Py_DECREF(tmp_type_arg_13);
        if (tmp_metaclass_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 161;

            goto try_except_handler_20;
        }
        goto condexpr_end_15;
        condexpr_false_15:;
        tmp_metaclass_value_7 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_7);
        condexpr_end_15:;
        condexpr_end_14:;
        CHECK_OBJECT(tmp_class_creation_7__bases);
        tmp_bases_value_7 = tmp_class_creation_7__bases;
        tmp_assign_source_117 = SELECT_METACLASS(tmp_metaclass_value_7, tmp_bases_value_7);
        Py_DECREF(tmp_metaclass_value_7);
        if (tmp_assign_source_117 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 161;

            goto try_except_handler_20;
        }
        assert(tmp_class_creation_7__metaclass == NULL);
        tmp_class_creation_7__metaclass = tmp_assign_source_117;
    }
    {
        bool tmp_condition_result_40;
        PyObject *tmp_key_value_21;
        PyObject *tmp_dict_arg_value_21;
        tmp_key_value_21 = mod_consts[44];
        CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
        tmp_dict_arg_value_21 = tmp_class_creation_7__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_21, tmp_key_value_21);
        assert(!(tmp_res == -1));
        tmp_condition_result_40 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_40 != false) {
            goto branch_yes_25;
        } else {
            goto branch_no_25;
        }
    }
    branch_yes_25:;
    CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_7__class_decl_dict;
    tmp_dictdel_key = mod_consts[44];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 161;

        goto try_except_handler_20;
    }
    branch_no_25:;
    {
        nuitka_bool tmp_condition_result_41;
        PyObject *tmp_expression_value_122;
        CHECK_OBJECT(tmp_class_creation_7__metaclass);
        tmp_expression_value_122 = tmp_class_creation_7__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_122, mod_consts[45]);
        tmp_condition_result_41 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_41 == NUITKA_BOOL_TRUE) {
            goto branch_yes_26;
        } else {
            goto branch_no_26;
        }
    }
    branch_yes_26:;
    {
        PyObject *tmp_assign_source_118;
        PyObject *tmp_called_value_14;
        PyObject *tmp_expression_value_123;
        PyObject *tmp_args_value_13;
        PyObject *tmp_tuple_element_76;
        PyObject *tmp_kwargs_value_13;
        CHECK_OBJECT(tmp_class_creation_7__metaclass);
        tmp_expression_value_123 = tmp_class_creation_7__metaclass;
        tmp_called_value_14 = LOOKUP_ATTRIBUTE(tmp_expression_value_123, mod_consts[45]);
        if (tmp_called_value_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 161;

            goto try_except_handler_20;
        }
        tmp_tuple_element_76 = mod_consts[163];
        tmp_args_value_13 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_13, 0, tmp_tuple_element_76);
        CHECK_OBJECT(tmp_class_creation_7__bases);
        tmp_tuple_element_76 = tmp_class_creation_7__bases;
        PyTuple_SET_ITEM0(tmp_args_value_13, 1, tmp_tuple_element_76);
        CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
        tmp_kwargs_value_13 = tmp_class_creation_7__class_decl_dict;
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 161;
        tmp_assign_source_118 = CALL_FUNCTION(tmp_called_value_14, tmp_args_value_13, tmp_kwargs_value_13);
        Py_DECREF(tmp_called_value_14);
        Py_DECREF(tmp_args_value_13);
        if (tmp_assign_source_118 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 161;

            goto try_except_handler_20;
        }
        assert(tmp_class_creation_7__prepared == NULL);
        tmp_class_creation_7__prepared = tmp_assign_source_118;
    }
    {
        bool tmp_condition_result_42;
        PyObject *tmp_operand_value_7;
        PyObject *tmp_expression_value_124;
        CHECK_OBJECT(tmp_class_creation_7__prepared);
        tmp_expression_value_124 = tmp_class_creation_7__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_124, mod_consts[47]);
        tmp_operand_value_7 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_7);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 161;

            goto try_except_handler_20;
        }
        tmp_condition_result_42 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_42 != false) {
            goto branch_yes_27;
        } else {
            goto branch_no_27;
        }
    }
    branch_yes_27:;
    {
        PyObject *tmp_raise_type_7;
        PyObject *tmp_raise_value_7;
        PyObject *tmp_left_value_10;
        PyObject *tmp_right_value_10;
        PyObject *tmp_tuple_element_77;
        PyObject *tmp_getattr_target_7;
        PyObject *tmp_getattr_attr_7;
        PyObject *tmp_getattr_default_7;
        tmp_raise_type_7 = PyExc_TypeError;
        tmp_left_value_10 = mod_consts[48];
        CHECK_OBJECT(tmp_class_creation_7__metaclass);
        tmp_getattr_target_7 = tmp_class_creation_7__metaclass;
        tmp_getattr_attr_7 = mod_consts[15];
        tmp_getattr_default_7 = mod_consts[49];
        tmp_tuple_element_77 = BUILTIN_GETATTR(tmp_getattr_target_7, tmp_getattr_attr_7, tmp_getattr_default_7);
        if (tmp_tuple_element_77 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 161;

            goto try_except_handler_20;
        }
        tmp_right_value_10 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_125;
            PyObject *tmp_type_arg_14;
            PyTuple_SET_ITEM(tmp_right_value_10, 0, tmp_tuple_element_77);
            CHECK_OBJECT(tmp_class_creation_7__prepared);
            tmp_type_arg_14 = tmp_class_creation_7__prepared;
            tmp_expression_value_125 = BUILTIN_TYPE1(tmp_type_arg_14);
            assert(!(tmp_expression_value_125 == NULL));
            tmp_tuple_element_77 = LOOKUP_ATTRIBUTE(tmp_expression_value_125, mod_consts[15]);
            Py_DECREF(tmp_expression_value_125);
            if (tmp_tuple_element_77 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 161;

                goto tuple_build_exception_57;
            }
            PyTuple_SET_ITEM(tmp_right_value_10, 1, tmp_tuple_element_77);
        }
        goto tuple_build_noexception_57;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_57:;
        Py_DECREF(tmp_right_value_10);
        goto try_except_handler_20;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_57:;
        tmp_raise_value_7 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_10, tmp_right_value_10);
        Py_DECREF(tmp_right_value_10);
        if (tmp_raise_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 161;

            goto try_except_handler_20;
        }
        exception_type = tmp_raise_type_7;
        Py_INCREF(tmp_raise_type_7);
        exception_value = tmp_raise_value_7;
        exception_lineno = 161;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_20;
    }
    branch_no_27:;
    goto branch_end_26;
    branch_no_26:;
    {
        PyObject *tmp_assign_source_119;
        tmp_assign_source_119 = PyDict_New();
        assert(tmp_class_creation_7__prepared == NULL);
        tmp_class_creation_7__prepared = tmp_assign_source_119;
    }
    branch_end_26:;
    {
        PyObject *tmp_assign_source_120;
        {
            PyObject *tmp_set_locals_7;
            CHECK_OBJECT(tmp_class_creation_7__prepared);
            tmp_set_locals_7 = tmp_class_creation_7__prepared;
            locals_numba$roc$hsadrv$drvapi$$$class__7_hsa_amd_profiling_dispatch_time_t_161 = tmp_set_locals_7;
            Py_INCREF(tmp_set_locals_7);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__7_hsa_amd_profiling_dispatch_time_t_161, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 161;

            goto try_except_handler_22;
        }
        tmp_dictset_value = mod_consts[163];
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__7_hsa_amd_profiling_dispatch_time_t_161, mod_consts[52], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 161;

            goto try_except_handler_22;
        }
        if (isFrameUnusable(cache_frame_4308947db4300a5ec14040e5f466a735_8)) {
            Py_XDECREF(cache_frame_4308947db4300a5ec14040e5f466a735_8);

#if _DEBUG_REFCOUNTS
            if (cache_frame_4308947db4300a5ec14040e5f466a735_8 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_4308947db4300a5ec14040e5f466a735_8 = MAKE_FUNCTION_FRAME(codeobj_4308947db4300a5ec14040e5f466a735, module_numba$roc$hsadrv$drvapi, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_4308947db4300a5ec14040e5f466a735_8->m_type_description == NULL);
        frame_4308947db4300a5ec14040e5f466a735_8 = cache_frame_4308947db4300a5ec14040e5f466a735_8;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_4308947db4300a5ec14040e5f466a735_8);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_4308947db4300a5ec14040e5f466a735_8) == 2); // Frame stack

        // Framed code:
        {
            PyObject *tmp_list_element_7;
            PyObject *tmp_tuple_element_78;
            tmp_tuple_element_78 = mod_consts[164];
            tmp_list_element_7 = PyTuple_New(2);
            {
                PyObject *tmp_expression_value_126;
                PyTuple_SET_ITEM0(tmp_list_element_7, 0, tmp_tuple_element_78);
                tmp_expression_value_126 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__7_hsa_amd_profiling_dispatch_time_t_161, mod_consts[28]);

                if (tmp_expression_value_126 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_126 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                        if (unlikely(tmp_expression_value_126 == NULL)) {
                            tmp_expression_value_126 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                        }

                        if (tmp_expression_value_126 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 163;
                            type_description_2 = "o";
                            goto tuple_build_exception_58;
                        }
                        Py_INCREF(tmp_expression_value_126);
                    } else {
                        goto tuple_build_exception_58;
                    }
                }

                tmp_tuple_element_78 = LOOKUP_ATTRIBUTE(tmp_expression_value_126, mod_consts[39]);
                Py_DECREF(tmp_expression_value_126);
                if (tmp_tuple_element_78 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 163;
                    type_description_2 = "o";
                    goto tuple_build_exception_58;
                }
                PyTuple_SET_ITEM(tmp_list_element_7, 1, tmp_tuple_element_78);
            }
            goto tuple_build_noexception_58;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_58:;
            Py_DECREF(tmp_list_element_7);
            goto frame_exception_exit_8;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_58:;
            tmp_dictset_value = PyList_New(2);
            {
                PyObject *tmp_tuple_element_79;
                PyList_SET_ITEM(tmp_dictset_value, 0, tmp_list_element_7);
                tmp_tuple_element_79 = mod_consts[165];
                tmp_list_element_7 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_127;
                    PyTuple_SET_ITEM0(tmp_list_element_7, 0, tmp_tuple_element_79);
                    tmp_expression_value_127 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__7_hsa_amd_profiling_dispatch_time_t_161, mod_consts[28]);

                    if (tmp_expression_value_127 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_127 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_127 == NULL)) {
                                tmp_expression_value_127 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_127 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 164;
                                type_description_2 = "o";
                                goto tuple_build_exception_59;
                            }
                            Py_INCREF(tmp_expression_value_127);
                        } else {
                            goto tuple_build_exception_59;
                        }
                    }

                    tmp_tuple_element_79 = LOOKUP_ATTRIBUTE(tmp_expression_value_127, mod_consts[39]);
                    Py_DECREF(tmp_expression_value_127);
                    if (tmp_tuple_element_79 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 164;
                        type_description_2 = "o";
                        goto tuple_build_exception_59;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_7, 1, tmp_tuple_element_79);
                }
                goto tuple_build_noexception_59;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_59:;
                Py_DECREF(tmp_list_element_7);
                goto list_build_exception_7;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_59:;
                PyList_SET_ITEM(tmp_dictset_value, 1, tmp_list_element_7);
            }
            goto list_build_noexception_7;
            // Exception handling pass through code for list_build:
            list_build_exception_7:;
            Py_DECREF(tmp_dictset_value);
            goto frame_exception_exit_8;
            // Finished with no exception for list_build:
            list_build_noexception_7:;
            tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__7_hsa_amd_profiling_dispatch_time_t_161, mod_consts[57], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 162;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_4308947db4300a5ec14040e5f466a735_8);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_7;

        frame_exception_exit_8:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_4308947db4300a5ec14040e5f466a735_8);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_4308947db4300a5ec14040e5f466a735_8, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_4308947db4300a5ec14040e5f466a735_8->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_4308947db4300a5ec14040e5f466a735_8, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_4308947db4300a5ec14040e5f466a735_8,
            type_description_2,
            outline_6_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_4308947db4300a5ec14040e5f466a735_8 == cache_frame_4308947db4300a5ec14040e5f466a735_8) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_4308947db4300a5ec14040e5f466a735_8);
            cache_frame_4308947db4300a5ec14040e5f466a735_8 = NULL;
        }

        assertFrameObject(frame_4308947db4300a5ec14040e5f466a735_8);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_7;

        frame_no_exception_7:;
        goto skip_nested_handling_7;
        nested_frame_exit_7:;

        goto try_except_handler_22;
        skip_nested_handling_7:;
        {
            nuitka_bool tmp_condition_result_43;
            PyObject *tmp_cmp_expr_left_7;
            PyObject *tmp_cmp_expr_right_7;
            CHECK_OBJECT(tmp_class_creation_7__bases);
            tmp_cmp_expr_left_7 = tmp_class_creation_7__bases;
            CHECK_OBJECT(tmp_class_creation_7__bases_orig);
            tmp_cmp_expr_right_7 = tmp_class_creation_7__bases_orig;
            tmp_condition_result_43 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_7, tmp_cmp_expr_right_7);
            if (tmp_condition_result_43 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 161;

                goto try_except_handler_22;
            }
            if (tmp_condition_result_43 == NUITKA_BOOL_TRUE) {
                goto branch_yes_28;
            } else {
                goto branch_no_28;
            }
            assert(tmp_condition_result_43 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_28:;
        CHECK_OBJECT(tmp_class_creation_7__bases_orig);
        tmp_dictset_value = tmp_class_creation_7__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__7_hsa_amd_profiling_dispatch_time_t_161, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 161;

            goto try_except_handler_22;
        }
        branch_no_28:;
        {
            PyObject *tmp_assign_source_121;
            PyObject *tmp_called_value_15;
            PyObject *tmp_args_value_14;
            PyObject *tmp_tuple_element_80;
            PyObject *tmp_kwargs_value_14;
            CHECK_OBJECT(tmp_class_creation_7__metaclass);
            tmp_called_value_15 = tmp_class_creation_7__metaclass;
            tmp_tuple_element_80 = mod_consts[163];
            tmp_args_value_14 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_14, 0, tmp_tuple_element_80);
            CHECK_OBJECT(tmp_class_creation_7__bases);
            tmp_tuple_element_80 = tmp_class_creation_7__bases;
            PyTuple_SET_ITEM0(tmp_args_value_14, 1, tmp_tuple_element_80);
            tmp_tuple_element_80 = locals_numba$roc$hsadrv$drvapi$$$class__7_hsa_amd_profiling_dispatch_time_t_161;
            PyTuple_SET_ITEM0(tmp_args_value_14, 2, tmp_tuple_element_80);
            CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
            tmp_kwargs_value_14 = tmp_class_creation_7__class_decl_dict;
            frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 161;
            tmp_assign_source_121 = CALL_FUNCTION(tmp_called_value_15, tmp_args_value_14, tmp_kwargs_value_14);
            Py_DECREF(tmp_args_value_14);
            if (tmp_assign_source_121 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 161;

                goto try_except_handler_22;
            }
            assert(outline_6_var___class__ == NULL);
            outline_6_var___class__ = tmp_assign_source_121;
        }
        CHECK_OBJECT(outline_6_var___class__);
        tmp_assign_source_120 = outline_6_var___class__;
        Py_INCREF(tmp_assign_source_120);
        goto try_return_handler_22;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_22:;
        Py_DECREF(locals_numba$roc$hsadrv$drvapi$$$class__7_hsa_amd_profiling_dispatch_time_t_161);
        locals_numba$roc$hsadrv$drvapi$$$class__7_hsa_amd_profiling_dispatch_time_t_161 = NULL;
        goto try_return_handler_21;
        // Exception handler code:
        try_except_handler_22:;
        exception_keeper_type_20 = exception_type;
        exception_keeper_value_20 = exception_value;
        exception_keeper_tb_20 = exception_tb;
        exception_keeper_lineno_20 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$roc$hsadrv$drvapi$$$class__7_hsa_amd_profiling_dispatch_time_t_161);
        locals_numba$roc$hsadrv$drvapi$$$class__7_hsa_amd_profiling_dispatch_time_t_161 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_20;
        exception_value = exception_keeper_value_20;
        exception_tb = exception_keeper_tb_20;
        exception_lineno = exception_keeper_lineno_20;

        goto try_except_handler_21;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_21:;
        CHECK_OBJECT(outline_6_var___class__);
        Py_DECREF(outline_6_var___class__);
        outline_6_var___class__ = NULL;
        goto outline_result_7;
        // Exception handler code:
        try_except_handler_21:;
        exception_keeper_type_21 = exception_type;
        exception_keeper_value_21 = exception_value;
        exception_keeper_tb_21 = exception_tb;
        exception_keeper_lineno_21 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_21;
        exception_value = exception_keeper_value_21;
        exception_tb = exception_keeper_tb_21;
        exception_lineno = exception_keeper_lineno_21;

        goto outline_exception_7;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_7:;
        exception_lineno = 161;
        goto try_except_handler_20;
        outline_result_7:;
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[163], tmp_assign_source_120);
    }
    goto try_end_8;
    // Exception handler code:
    try_except_handler_20:;
    exception_keeper_type_22 = exception_type;
    exception_keeper_value_22 = exception_value;
    exception_keeper_tb_22 = exception_tb;
    exception_keeper_lineno_22 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_7__bases_orig);
    tmp_class_creation_7__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_7__bases);
    tmp_class_creation_7__bases = NULL;
    Py_XDECREF(tmp_class_creation_7__class_decl_dict);
    tmp_class_creation_7__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_7__metaclass);
    tmp_class_creation_7__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_7__prepared);
    tmp_class_creation_7__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_22;
    exception_value = exception_keeper_value_22;
    exception_tb = exception_keeper_tb_22;
    exception_lineno = exception_keeper_lineno_22;

    goto frame_exception_exit_1;
    // End of try:
    try_end_8:;
    CHECK_OBJECT(tmp_class_creation_7__bases_orig);
    Py_DECREF(tmp_class_creation_7__bases_orig);
    tmp_class_creation_7__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_7__bases);
    Py_DECREF(tmp_class_creation_7__bases);
    tmp_class_creation_7__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
    Py_DECREF(tmp_class_creation_7__class_decl_dict);
    tmp_class_creation_7__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_7__metaclass);
    Py_DECREF(tmp_class_creation_7__metaclass);
    tmp_class_creation_7__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_7__prepared);
    Py_DECREF(tmp_class_creation_7__prepared);
    tmp_class_creation_7__prepared = NULL;
    {
        PyObject *tmp_assign_source_122;
        PyObject *tmp_called_value_16;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_called_value_17;
        PyObject *tmp_expression_value_128;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_expression_value_129;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_expression_value_130;
        tmp_called_value_16 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

        if (unlikely(tmp_called_value_16 == NULL)) {
            tmp_called_value_16 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
        }

        if (tmp_called_value_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 168;

            goto frame_exception_exit_1;
        }
        tmp_expression_value_128 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_128 == NULL)) {
            tmp_expression_value_128 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_128 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;

            goto frame_exception_exit_1;
        }
        tmp_called_value_17 = LOOKUP_ATTRIBUTE(tmp_expression_value_128, mod_consts[166]);
        if (tmp_called_value_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;

            goto frame_exception_exit_1;
        }
        tmp_expression_value_129 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_129 == NULL)) {
            tmp_expression_value_129 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_129 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_17);

            exception_lineno = 169;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_129, mod_consts[167]);
        if (tmp_args_element_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_17);

            exception_lineno = 169;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_4 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

        if (unlikely(tmp_args_element_value_4 == NULL)) {
            tmp_args_element_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
        }

        if (tmp_args_element_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_17);
            Py_DECREF(tmp_args_element_value_3);

            exception_lineno = 170;

            goto frame_exception_exit_1;
        }
        tmp_expression_value_130 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_130 == NULL)) {
            tmp_expression_value_130 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_130 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_17);
            Py_DECREF(tmp_args_element_value_3);

            exception_lineno = 171;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_130, mod_consts[84]);
        if (tmp_args_element_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_17);
            Py_DECREF(tmp_args_element_value_3);

            exception_lineno = 171;

            goto frame_exception_exit_1;
        }
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 169;
        {
            PyObject *call_args[] = {tmp_args_element_value_3, tmp_args_element_value_4, tmp_args_element_value_5};
            tmp_args_element_value_2 = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_17, call_args);
        }

        Py_DECREF(tmp_called_value_17);
        Py_DECREF(tmp_args_element_value_3);
        Py_DECREF(tmp_args_element_value_5);
        if (tmp_args_element_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;

            goto frame_exception_exit_1;
        }
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 168;
        tmp_assign_source_122 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_16, tmp_args_element_value_2);
        Py_DECREF(tmp_args_element_value_2);
        if (tmp_assign_source_122 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 168;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[168], tmp_assign_source_122);
    }
    {
        PyObject *tmp_assign_source_123;
        PyObject *tmp_expression_value_131;
        tmp_expression_value_131 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_131 == NULL)) {
            tmp_expression_value_131 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_131 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 174;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_123 = LOOKUP_ATTRIBUTE(tmp_expression_value_131, mod_consts[41]);
        if (tmp_assign_source_123 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 174;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[169], tmp_assign_source_123);
    }
    {
        PyObject *tmp_assign_source_124;
        tmp_assign_source_124 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[40]);

        if (unlikely(tmp_assign_source_124 == NULL)) {
            tmp_assign_source_124 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[40]);
        }

        if (tmp_assign_source_124 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 175;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT0(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[170], tmp_assign_source_124);
    }
    {
        PyObject *tmp_assign_source_125;
        PyObject *tmp_expression_value_132;
        tmp_expression_value_132 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_132 == NULL)) {
            tmp_expression_value_132 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_132 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 176;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_125 = LOOKUP_ATTRIBUTE(tmp_expression_value_132, mod_consts[41]);
        if (tmp_assign_source_125 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 176;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[171], tmp_assign_source_125);
    }
    {
        PyObject *tmp_assign_source_126;
        PyObject *tmp_expression_value_133;
        tmp_expression_value_133 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_133 == NULL)) {
            tmp_expression_value_133 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_133 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 177;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_126 = LOOKUP_ATTRIBUTE(tmp_expression_value_133, mod_consts[41]);
        if (tmp_assign_source_126 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 177;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[172], tmp_assign_source_126);
    }
    {
        PyObject *tmp_assign_source_127;
        PyObject *tmp_expression_value_134;
        tmp_expression_value_134 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_134 == NULL)) {
            tmp_expression_value_134 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_134 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 178;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_127 = LOOKUP_ATTRIBUTE(tmp_expression_value_134, mod_consts[41]);
        if (tmp_assign_source_127 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 178;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[173], tmp_assign_source_127);
    }
    {
        PyObject *tmp_assign_source_128;
        PyObject *tmp_expression_value_135;
        tmp_expression_value_135 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_135 == NULL)) {
            tmp_expression_value_135 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_135 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 179;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_128 = LOOKUP_ATTRIBUTE(tmp_expression_value_135, mod_consts[41]);
        if (tmp_assign_source_128 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 179;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[174], tmp_assign_source_128);
    }
    {
        PyObject *tmp_assign_source_129;
        PyObject *tmp_expression_value_136;
        tmp_expression_value_136 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_136 == NULL)) {
            tmp_expression_value_136 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_136 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 180;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_129 = LOOKUP_ATTRIBUTE(tmp_expression_value_136, mod_consts[41]);
        if (tmp_assign_source_129 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 180;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[175], tmp_assign_source_129);
    }
    {
        PyObject *tmp_assign_source_130;
        PyObject *tmp_expression_value_137;
        tmp_expression_value_137 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_137 == NULL)) {
            tmp_expression_value_137 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_137 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 181;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_130 = LOOKUP_ATTRIBUTE(tmp_expression_value_137, mod_consts[41]);
        if (tmp_assign_source_130 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 181;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[176], tmp_assign_source_130);
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_131;
        PyObject *tmp_tuple_element_81;
        PyObject *tmp_expression_value_138;
        tmp_expression_value_138 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_138 == NULL)) {
            tmp_expression_value_138 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_138 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 182;

            goto try_except_handler_23;
        }
        tmp_tuple_element_81 = LOOKUP_ATTRIBUTE(tmp_expression_value_138, mod_consts[43]);
        if (tmp_tuple_element_81 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 182;

            goto try_except_handler_23;
        }
        tmp_assign_source_131 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_assign_source_131, 0, tmp_tuple_element_81);
        assert(tmp_class_creation_8__bases_orig == NULL);
        tmp_class_creation_8__bases_orig = tmp_assign_source_131;
    }
    {
        PyObject *tmp_assign_source_132;
        PyObject *tmp_dircall_arg1_8;
        CHECK_OBJECT(tmp_class_creation_8__bases_orig);
        tmp_dircall_arg1_8 = tmp_class_creation_8__bases_orig;
        Py_INCREF(tmp_dircall_arg1_8);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_8};
            tmp_assign_source_132 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_132 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 182;

            goto try_except_handler_23;
        }
        assert(tmp_class_creation_8__bases == NULL);
        tmp_class_creation_8__bases = tmp_assign_source_132;
    }
    {
        PyObject *tmp_assign_source_133;
        tmp_assign_source_133 = PyDict_New();
        assert(tmp_class_creation_8__class_decl_dict == NULL);
        tmp_class_creation_8__class_decl_dict = tmp_assign_source_133;
    }
    {
        PyObject *tmp_assign_source_134;
        PyObject *tmp_metaclass_value_8;
        bool tmp_condition_result_44;
        PyObject *tmp_key_value_22;
        PyObject *tmp_dict_arg_value_22;
        PyObject *tmp_dict_arg_value_23;
        PyObject *tmp_key_value_23;
        nuitka_bool tmp_condition_result_45;
        int tmp_truth_name_9;
        PyObject *tmp_type_arg_15;
        PyObject *tmp_expression_value_139;
        PyObject *tmp_subscript_value_8;
        PyObject *tmp_bases_value_8;
        tmp_key_value_22 = mod_consts[44];
        CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
        tmp_dict_arg_value_22 = tmp_class_creation_8__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_22, tmp_key_value_22);
        assert(!(tmp_res == -1));
        tmp_condition_result_44 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_44 != false) {
            goto condexpr_true_16;
        } else {
            goto condexpr_false_16;
        }
        condexpr_true_16:;
        CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
        tmp_dict_arg_value_23 = tmp_class_creation_8__class_decl_dict;
        tmp_key_value_23 = mod_consts[44];
        tmp_metaclass_value_8 = DICT_GET_ITEM0(tmp_dict_arg_value_23, tmp_key_value_23);
        if (tmp_metaclass_value_8 == NULL) {
            tmp_metaclass_value_8 = Py_None;
        }
        assert(!(tmp_metaclass_value_8 == NULL));
        Py_INCREF(tmp_metaclass_value_8);
        goto condexpr_end_16;
        condexpr_false_16:;
        CHECK_OBJECT(tmp_class_creation_8__bases);
        tmp_truth_name_9 = CHECK_IF_TRUE(tmp_class_creation_8__bases);
        if (tmp_truth_name_9 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 182;

            goto try_except_handler_23;
        }
        tmp_condition_result_45 = tmp_truth_name_9 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_45 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_17;
        } else {
            goto condexpr_false_17;
        }
        condexpr_true_17:;
        CHECK_OBJECT(tmp_class_creation_8__bases);
        tmp_expression_value_139 = tmp_class_creation_8__bases;
        tmp_subscript_value_8 = mod_consts[29];
        tmp_type_arg_15 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_139, tmp_subscript_value_8, 0);
        if (tmp_type_arg_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 182;

            goto try_except_handler_23;
        }
        tmp_metaclass_value_8 = BUILTIN_TYPE1(tmp_type_arg_15);
        Py_DECREF(tmp_type_arg_15);
        if (tmp_metaclass_value_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 182;

            goto try_except_handler_23;
        }
        goto condexpr_end_17;
        condexpr_false_17:;
        tmp_metaclass_value_8 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_8);
        condexpr_end_17:;
        condexpr_end_16:;
        CHECK_OBJECT(tmp_class_creation_8__bases);
        tmp_bases_value_8 = tmp_class_creation_8__bases;
        tmp_assign_source_134 = SELECT_METACLASS(tmp_metaclass_value_8, tmp_bases_value_8);
        Py_DECREF(tmp_metaclass_value_8);
        if (tmp_assign_source_134 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 182;

            goto try_except_handler_23;
        }
        assert(tmp_class_creation_8__metaclass == NULL);
        tmp_class_creation_8__metaclass = tmp_assign_source_134;
    }
    {
        bool tmp_condition_result_46;
        PyObject *tmp_key_value_24;
        PyObject *tmp_dict_arg_value_24;
        tmp_key_value_24 = mod_consts[44];
        CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
        tmp_dict_arg_value_24 = tmp_class_creation_8__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_24, tmp_key_value_24);
        assert(!(tmp_res == -1));
        tmp_condition_result_46 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_46 != false) {
            goto branch_yes_29;
        } else {
            goto branch_no_29;
        }
    }
    branch_yes_29:;
    CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_8__class_decl_dict;
    tmp_dictdel_key = mod_consts[44];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 182;

        goto try_except_handler_23;
    }
    branch_no_29:;
    {
        nuitka_bool tmp_condition_result_47;
        PyObject *tmp_expression_value_140;
        CHECK_OBJECT(tmp_class_creation_8__metaclass);
        tmp_expression_value_140 = tmp_class_creation_8__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_140, mod_consts[45]);
        tmp_condition_result_47 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_47 == NUITKA_BOOL_TRUE) {
            goto branch_yes_30;
        } else {
            goto branch_no_30;
        }
    }
    branch_yes_30:;
    {
        PyObject *tmp_assign_source_135;
        PyObject *tmp_called_value_18;
        PyObject *tmp_expression_value_141;
        PyObject *tmp_args_value_15;
        PyObject *tmp_tuple_element_82;
        PyObject *tmp_kwargs_value_15;
        CHECK_OBJECT(tmp_class_creation_8__metaclass);
        tmp_expression_value_141 = tmp_class_creation_8__metaclass;
        tmp_called_value_18 = LOOKUP_ATTRIBUTE(tmp_expression_value_141, mod_consts[45]);
        if (tmp_called_value_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 182;

            goto try_except_handler_23;
        }
        tmp_tuple_element_82 = mod_consts[177];
        tmp_args_value_15 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_15, 0, tmp_tuple_element_82);
        CHECK_OBJECT(tmp_class_creation_8__bases);
        tmp_tuple_element_82 = tmp_class_creation_8__bases;
        PyTuple_SET_ITEM0(tmp_args_value_15, 1, tmp_tuple_element_82);
        CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
        tmp_kwargs_value_15 = tmp_class_creation_8__class_decl_dict;
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 182;
        tmp_assign_source_135 = CALL_FUNCTION(tmp_called_value_18, tmp_args_value_15, tmp_kwargs_value_15);
        Py_DECREF(tmp_called_value_18);
        Py_DECREF(tmp_args_value_15);
        if (tmp_assign_source_135 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 182;

            goto try_except_handler_23;
        }
        assert(tmp_class_creation_8__prepared == NULL);
        tmp_class_creation_8__prepared = tmp_assign_source_135;
    }
    {
        bool tmp_condition_result_48;
        PyObject *tmp_operand_value_8;
        PyObject *tmp_expression_value_142;
        CHECK_OBJECT(tmp_class_creation_8__prepared);
        tmp_expression_value_142 = tmp_class_creation_8__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_142, mod_consts[47]);
        tmp_operand_value_8 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_8);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 182;

            goto try_except_handler_23;
        }
        tmp_condition_result_48 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_48 != false) {
            goto branch_yes_31;
        } else {
            goto branch_no_31;
        }
    }
    branch_yes_31:;
    {
        PyObject *tmp_raise_type_8;
        PyObject *tmp_raise_value_8;
        PyObject *tmp_left_value_11;
        PyObject *tmp_right_value_11;
        PyObject *tmp_tuple_element_83;
        PyObject *tmp_getattr_target_8;
        PyObject *tmp_getattr_attr_8;
        PyObject *tmp_getattr_default_8;
        tmp_raise_type_8 = PyExc_TypeError;
        tmp_left_value_11 = mod_consts[48];
        CHECK_OBJECT(tmp_class_creation_8__metaclass);
        tmp_getattr_target_8 = tmp_class_creation_8__metaclass;
        tmp_getattr_attr_8 = mod_consts[15];
        tmp_getattr_default_8 = mod_consts[49];
        tmp_tuple_element_83 = BUILTIN_GETATTR(tmp_getattr_target_8, tmp_getattr_attr_8, tmp_getattr_default_8);
        if (tmp_tuple_element_83 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 182;

            goto try_except_handler_23;
        }
        tmp_right_value_11 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_143;
            PyObject *tmp_type_arg_16;
            PyTuple_SET_ITEM(tmp_right_value_11, 0, tmp_tuple_element_83);
            CHECK_OBJECT(tmp_class_creation_8__prepared);
            tmp_type_arg_16 = tmp_class_creation_8__prepared;
            tmp_expression_value_143 = BUILTIN_TYPE1(tmp_type_arg_16);
            assert(!(tmp_expression_value_143 == NULL));
            tmp_tuple_element_83 = LOOKUP_ATTRIBUTE(tmp_expression_value_143, mod_consts[15]);
            Py_DECREF(tmp_expression_value_143);
            if (tmp_tuple_element_83 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 182;

                goto tuple_build_exception_60;
            }
            PyTuple_SET_ITEM(tmp_right_value_11, 1, tmp_tuple_element_83);
        }
        goto tuple_build_noexception_60;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_60:;
        Py_DECREF(tmp_right_value_11);
        goto try_except_handler_23;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_60:;
        tmp_raise_value_8 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_11, tmp_right_value_11);
        Py_DECREF(tmp_right_value_11);
        if (tmp_raise_value_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 182;

            goto try_except_handler_23;
        }
        exception_type = tmp_raise_type_8;
        Py_INCREF(tmp_raise_type_8);
        exception_value = tmp_raise_value_8;
        exception_lineno = 182;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_23;
    }
    branch_no_31:;
    goto branch_end_30;
    branch_no_30:;
    {
        PyObject *tmp_assign_source_136;
        tmp_assign_source_136 = PyDict_New();
        assert(tmp_class_creation_8__prepared == NULL);
        tmp_class_creation_8__prepared = tmp_assign_source_136;
    }
    branch_end_30:;
    {
        PyObject *tmp_assign_source_137;
        {
            PyObject *tmp_set_locals_8;
            CHECK_OBJECT(tmp_class_creation_8__prepared);
            tmp_set_locals_8 = tmp_class_creation_8__prepared;
            locals_numba$roc$hsadrv$drvapi$$$class__8_hsa_amd_image_descriptor_t_182 = tmp_set_locals_8;
            Py_INCREF(tmp_set_locals_8);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__8_hsa_amd_image_descriptor_t_182, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 182;

            goto try_except_handler_25;
        }
        tmp_dictset_value = mod_consts[177];
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__8_hsa_amd_image_descriptor_t_182, mod_consts[52], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 182;

            goto try_except_handler_25;
        }
        if (isFrameUnusable(cache_frame_2d7080f784f56c1d1310fc32beecb145_9)) {
            Py_XDECREF(cache_frame_2d7080f784f56c1d1310fc32beecb145_9);

#if _DEBUG_REFCOUNTS
            if (cache_frame_2d7080f784f56c1d1310fc32beecb145_9 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_2d7080f784f56c1d1310fc32beecb145_9 = MAKE_FUNCTION_FRAME(codeobj_2d7080f784f56c1d1310fc32beecb145, module_numba$roc$hsadrv$drvapi, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_2d7080f784f56c1d1310fc32beecb145_9->m_type_description == NULL);
        frame_2d7080f784f56c1d1310fc32beecb145_9 = cache_frame_2d7080f784f56c1d1310fc32beecb145_9;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_2d7080f784f56c1d1310fc32beecb145_9);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_2d7080f784f56c1d1310fc32beecb145_9) == 2); // Frame stack

        // Framed code:
        {
            PyObject *tmp_list_element_8;
            PyObject *tmp_tuple_element_84;
            tmp_tuple_element_84 = mod_consts[178];
            tmp_list_element_8 = PyTuple_New(2);
            {
                PyObject *tmp_expression_value_144;
                PyTuple_SET_ITEM0(tmp_list_element_8, 0, tmp_tuple_element_84);
                tmp_expression_value_144 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__8_hsa_amd_image_descriptor_t_182, mod_consts[28]);

                if (tmp_expression_value_144 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_144 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                        if (unlikely(tmp_expression_value_144 == NULL)) {
                            tmp_expression_value_144 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                        }

                        if (tmp_expression_value_144 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 184;
                            type_description_2 = "o";
                            goto tuple_build_exception_61;
                        }
                        Py_INCREF(tmp_expression_value_144);
                    } else {
                        goto tuple_build_exception_61;
                    }
                }

                tmp_tuple_element_84 = LOOKUP_ATTRIBUTE(tmp_expression_value_144, mod_consts[54]);
                Py_DECREF(tmp_expression_value_144);
                if (tmp_tuple_element_84 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 184;
                    type_description_2 = "o";
                    goto tuple_build_exception_61;
                }
                PyTuple_SET_ITEM(tmp_list_element_8, 1, tmp_tuple_element_84);
            }
            goto tuple_build_noexception_61;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_61:;
            Py_DECREF(tmp_list_element_8);
            goto frame_exception_exit_9;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_61:;
            tmp_dictset_value = PyList_New(3);
            {
                PyObject *tmp_tuple_element_85;
                PyObject *tmp_tuple_element_86;
                PyList_SET_ITEM(tmp_dictset_value, 0, tmp_list_element_8);
                tmp_tuple_element_85 = mod_consts[179];
                tmp_list_element_8 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_145;
                    PyTuple_SET_ITEM0(tmp_list_element_8, 0, tmp_tuple_element_85);
                    tmp_expression_value_145 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__8_hsa_amd_image_descriptor_t_182, mod_consts[28]);

                    if (tmp_expression_value_145 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_145 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_145 == NULL)) {
                                tmp_expression_value_145 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_145 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 185;
                                type_description_2 = "o";
                                goto tuple_build_exception_62;
                            }
                            Py_INCREF(tmp_expression_value_145);
                        } else {
                            goto tuple_build_exception_62;
                        }
                    }

                    tmp_tuple_element_85 = LOOKUP_ATTRIBUTE(tmp_expression_value_145, mod_consts[54]);
                    Py_DECREF(tmp_expression_value_145);
                    if (tmp_tuple_element_85 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 185;
                        type_description_2 = "o";
                        goto tuple_build_exception_62;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_8, 1, tmp_tuple_element_85);
                }
                goto tuple_build_noexception_62;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_62:;
                Py_DECREF(tmp_list_element_8);
                goto list_build_exception_8;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_62:;
                PyList_SET_ITEM(tmp_dictset_value, 1, tmp_list_element_8);
                tmp_tuple_element_86 = mod_consts[180];
                tmp_list_element_8 = PyTuple_New(2);
                {
                    PyObject *tmp_left_value_12;
                    PyObject *tmp_expression_value_146;
                    PyObject *tmp_right_value_12;
                    PyTuple_SET_ITEM0(tmp_list_element_8, 0, tmp_tuple_element_86);
                    tmp_expression_value_146 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__8_hsa_amd_image_descriptor_t_182, mod_consts[28]);

                    if (tmp_expression_value_146 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_146 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_146 == NULL)) {
                                tmp_expression_value_146 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_146 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 186;
                                type_description_2 = "o";
                                goto tuple_build_exception_63;
                            }
                            Py_INCREF(tmp_expression_value_146);
                        } else {
                            goto tuple_build_exception_63;
                        }
                    }

                    tmp_left_value_12 = LOOKUP_ATTRIBUTE(tmp_expression_value_146, mod_consts[54]);
                    Py_DECREF(tmp_expression_value_146);
                    if (tmp_left_value_12 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 186;
                        type_description_2 = "o";
                        goto tuple_build_exception_63;
                    }
                    tmp_right_value_12 = mod_consts[36];
                    tmp_tuple_element_86 = BINARY_OPERATION_MULT_OBJECT_OBJECT_LONG(tmp_left_value_12, tmp_right_value_12);
                    Py_DECREF(tmp_left_value_12);
                    if (tmp_tuple_element_86 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 186;
                        type_description_2 = "o";
                        goto tuple_build_exception_63;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_8, 1, tmp_tuple_element_86);
                }
                goto tuple_build_noexception_63;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_63:;
                Py_DECREF(tmp_list_element_8);
                goto list_build_exception_8;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_63:;
                PyList_SET_ITEM(tmp_dictset_value, 2, tmp_list_element_8);
            }
            goto list_build_noexception_8;
            // Exception handling pass through code for list_build:
            list_build_exception_8:;
            Py_DECREF(tmp_dictset_value);
            goto frame_exception_exit_9;
            // Finished with no exception for list_build:
            list_build_noexception_8:;
            tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__8_hsa_amd_image_descriptor_t_182, mod_consts[57], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 183;
                type_description_2 = "o";
                goto frame_exception_exit_9;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_2d7080f784f56c1d1310fc32beecb145_9);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_8;

        frame_exception_exit_9:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_2d7080f784f56c1d1310fc32beecb145_9);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_2d7080f784f56c1d1310fc32beecb145_9, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_2d7080f784f56c1d1310fc32beecb145_9->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_2d7080f784f56c1d1310fc32beecb145_9, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_2d7080f784f56c1d1310fc32beecb145_9,
            type_description_2,
            outline_7_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_2d7080f784f56c1d1310fc32beecb145_9 == cache_frame_2d7080f784f56c1d1310fc32beecb145_9) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_2d7080f784f56c1d1310fc32beecb145_9);
            cache_frame_2d7080f784f56c1d1310fc32beecb145_9 = NULL;
        }

        assertFrameObject(frame_2d7080f784f56c1d1310fc32beecb145_9);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_8;

        frame_no_exception_8:;
        goto skip_nested_handling_8;
        nested_frame_exit_8:;

        goto try_except_handler_25;
        skip_nested_handling_8:;
        {
            nuitka_bool tmp_condition_result_49;
            PyObject *tmp_cmp_expr_left_8;
            PyObject *tmp_cmp_expr_right_8;
            CHECK_OBJECT(tmp_class_creation_8__bases);
            tmp_cmp_expr_left_8 = tmp_class_creation_8__bases;
            CHECK_OBJECT(tmp_class_creation_8__bases_orig);
            tmp_cmp_expr_right_8 = tmp_class_creation_8__bases_orig;
            tmp_condition_result_49 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_8, tmp_cmp_expr_right_8);
            if (tmp_condition_result_49 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 182;

                goto try_except_handler_25;
            }
            if (tmp_condition_result_49 == NUITKA_BOOL_TRUE) {
                goto branch_yes_32;
            } else {
                goto branch_no_32;
            }
            assert(tmp_condition_result_49 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_32:;
        CHECK_OBJECT(tmp_class_creation_8__bases_orig);
        tmp_dictset_value = tmp_class_creation_8__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__8_hsa_amd_image_descriptor_t_182, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 182;

            goto try_except_handler_25;
        }
        branch_no_32:;
        {
            PyObject *tmp_assign_source_138;
            PyObject *tmp_called_value_19;
            PyObject *tmp_args_value_16;
            PyObject *tmp_tuple_element_87;
            PyObject *tmp_kwargs_value_16;
            CHECK_OBJECT(tmp_class_creation_8__metaclass);
            tmp_called_value_19 = tmp_class_creation_8__metaclass;
            tmp_tuple_element_87 = mod_consts[177];
            tmp_args_value_16 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_16, 0, tmp_tuple_element_87);
            CHECK_OBJECT(tmp_class_creation_8__bases);
            tmp_tuple_element_87 = tmp_class_creation_8__bases;
            PyTuple_SET_ITEM0(tmp_args_value_16, 1, tmp_tuple_element_87);
            tmp_tuple_element_87 = locals_numba$roc$hsadrv$drvapi$$$class__8_hsa_amd_image_descriptor_t_182;
            PyTuple_SET_ITEM0(tmp_args_value_16, 2, tmp_tuple_element_87);
            CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
            tmp_kwargs_value_16 = tmp_class_creation_8__class_decl_dict;
            frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 182;
            tmp_assign_source_138 = CALL_FUNCTION(tmp_called_value_19, tmp_args_value_16, tmp_kwargs_value_16);
            Py_DECREF(tmp_args_value_16);
            if (tmp_assign_source_138 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 182;

                goto try_except_handler_25;
            }
            assert(outline_7_var___class__ == NULL);
            outline_7_var___class__ = tmp_assign_source_138;
        }
        CHECK_OBJECT(outline_7_var___class__);
        tmp_assign_source_137 = outline_7_var___class__;
        Py_INCREF(tmp_assign_source_137);
        goto try_return_handler_25;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_25:;
        Py_DECREF(locals_numba$roc$hsadrv$drvapi$$$class__8_hsa_amd_image_descriptor_t_182);
        locals_numba$roc$hsadrv$drvapi$$$class__8_hsa_amd_image_descriptor_t_182 = NULL;
        goto try_return_handler_24;
        // Exception handler code:
        try_except_handler_25:;
        exception_keeper_type_23 = exception_type;
        exception_keeper_value_23 = exception_value;
        exception_keeper_tb_23 = exception_tb;
        exception_keeper_lineno_23 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$roc$hsadrv$drvapi$$$class__8_hsa_amd_image_descriptor_t_182);
        locals_numba$roc$hsadrv$drvapi$$$class__8_hsa_amd_image_descriptor_t_182 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_23;
        exception_value = exception_keeper_value_23;
        exception_tb = exception_keeper_tb_23;
        exception_lineno = exception_keeper_lineno_23;

        goto try_except_handler_24;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_24:;
        CHECK_OBJECT(outline_7_var___class__);
        Py_DECREF(outline_7_var___class__);
        outline_7_var___class__ = NULL;
        goto outline_result_8;
        // Exception handler code:
        try_except_handler_24:;
        exception_keeper_type_24 = exception_type;
        exception_keeper_value_24 = exception_value;
        exception_keeper_tb_24 = exception_tb;
        exception_keeper_lineno_24 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_24;
        exception_value = exception_keeper_value_24;
        exception_tb = exception_keeper_tb_24;
        exception_lineno = exception_keeper_lineno_24;

        goto outline_exception_8;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_8:;
        exception_lineno = 182;
        goto try_except_handler_23;
        outline_result_8:;
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[177], tmp_assign_source_137);
    }
    goto try_end_9;
    // Exception handler code:
    try_except_handler_23:;
    exception_keeper_type_25 = exception_type;
    exception_keeper_value_25 = exception_value;
    exception_keeper_tb_25 = exception_tb;
    exception_keeper_lineno_25 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_8__bases_orig);
    tmp_class_creation_8__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_8__bases);
    tmp_class_creation_8__bases = NULL;
    Py_XDECREF(tmp_class_creation_8__class_decl_dict);
    tmp_class_creation_8__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_8__metaclass);
    tmp_class_creation_8__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_8__prepared);
    tmp_class_creation_8__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_25;
    exception_value = exception_keeper_value_25;
    exception_tb = exception_keeper_tb_25;
    exception_lineno = exception_keeper_lineno_25;

    goto frame_exception_exit_1;
    // End of try:
    try_end_9:;
    CHECK_OBJECT(tmp_class_creation_8__bases_orig);
    Py_DECREF(tmp_class_creation_8__bases_orig);
    tmp_class_creation_8__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_8__bases);
    Py_DECREF(tmp_class_creation_8__bases);
    tmp_class_creation_8__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
    Py_DECREF(tmp_class_creation_8__class_decl_dict);
    tmp_class_creation_8__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_8__metaclass);
    Py_DECREF(tmp_class_creation_8__metaclass);
    tmp_class_creation_8__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_8__prepared);
    Py_DECREF(tmp_class_creation_8__prepared);
    tmp_class_creation_8__prepared = NULL;
    {
        PyObject *tmp_assign_source_139;
        tmp_assign_source_139 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[159]);

        if (unlikely(tmp_assign_source_139 == NULL)) {
            tmp_assign_source_139 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[159]);
        }

        if (tmp_assign_source_139 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 193;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT0(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[181], tmp_assign_source_139);
    }
    {
        PyObject *tmp_assign_source_140;
        tmp_assign_source_140 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[40]);

        if (unlikely(tmp_assign_source_140 == NULL)) {
            tmp_assign_source_140 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[40]);
        }

        if (tmp_assign_source_140 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 195;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT0(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[182], tmp_assign_source_140);
    }
    {
        PyObject *tmp_assign_source_141;
        PyObject *tmp_expression_value_147;
        tmp_expression_value_147 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_147 == NULL)) {
            tmp_expression_value_147 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_147 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 196;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_141 = LOOKUP_ATTRIBUTE(tmp_expression_value_147, mod_consts[41]);
        if (tmp_assign_source_141 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 196;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[183], tmp_assign_source_141);
    }
    {
        PyObject *tmp_assign_source_142;
        PyObject *tmp_expression_value_148;
        tmp_expression_value_148 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_148 == NULL)) {
            tmp_expression_value_148 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_148 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 197;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_142 = LOOKUP_ATTRIBUTE(tmp_expression_value_148, mod_consts[41]);
        if (tmp_assign_source_142 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 197;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[184], tmp_assign_source_142);
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_143;
        PyObject *tmp_tuple_element_88;
        PyObject *tmp_expression_value_149;
        tmp_expression_value_149 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_149 == NULL)) {
            tmp_expression_value_149 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_149 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 198;

            goto try_except_handler_26;
        }
        tmp_tuple_element_88 = LOOKUP_ATTRIBUTE(tmp_expression_value_149, mod_consts[43]);
        if (tmp_tuple_element_88 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 198;

            goto try_except_handler_26;
        }
        tmp_assign_source_143 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_assign_source_143, 0, tmp_tuple_element_88);
        assert(tmp_class_creation_9__bases_orig == NULL);
        tmp_class_creation_9__bases_orig = tmp_assign_source_143;
    }
    {
        PyObject *tmp_assign_source_144;
        PyObject *tmp_dircall_arg1_9;
        CHECK_OBJECT(tmp_class_creation_9__bases_orig);
        tmp_dircall_arg1_9 = tmp_class_creation_9__bases_orig;
        Py_INCREF(tmp_dircall_arg1_9);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_9};
            tmp_assign_source_144 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_144 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 198;

            goto try_except_handler_26;
        }
        assert(tmp_class_creation_9__bases == NULL);
        tmp_class_creation_9__bases = tmp_assign_source_144;
    }
    {
        PyObject *tmp_assign_source_145;
        tmp_assign_source_145 = PyDict_New();
        assert(tmp_class_creation_9__class_decl_dict == NULL);
        tmp_class_creation_9__class_decl_dict = tmp_assign_source_145;
    }
    {
        PyObject *tmp_assign_source_146;
        PyObject *tmp_metaclass_value_9;
        bool tmp_condition_result_50;
        PyObject *tmp_key_value_25;
        PyObject *tmp_dict_arg_value_25;
        PyObject *tmp_dict_arg_value_26;
        PyObject *tmp_key_value_26;
        nuitka_bool tmp_condition_result_51;
        int tmp_truth_name_10;
        PyObject *tmp_type_arg_17;
        PyObject *tmp_expression_value_150;
        PyObject *tmp_subscript_value_9;
        PyObject *tmp_bases_value_9;
        tmp_key_value_25 = mod_consts[44];
        CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
        tmp_dict_arg_value_25 = tmp_class_creation_9__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_25, tmp_key_value_25);
        assert(!(tmp_res == -1));
        tmp_condition_result_50 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_50 != false) {
            goto condexpr_true_18;
        } else {
            goto condexpr_false_18;
        }
        condexpr_true_18:;
        CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
        tmp_dict_arg_value_26 = tmp_class_creation_9__class_decl_dict;
        tmp_key_value_26 = mod_consts[44];
        tmp_metaclass_value_9 = DICT_GET_ITEM0(tmp_dict_arg_value_26, tmp_key_value_26);
        if (tmp_metaclass_value_9 == NULL) {
            tmp_metaclass_value_9 = Py_None;
        }
        assert(!(tmp_metaclass_value_9 == NULL));
        Py_INCREF(tmp_metaclass_value_9);
        goto condexpr_end_18;
        condexpr_false_18:;
        CHECK_OBJECT(tmp_class_creation_9__bases);
        tmp_truth_name_10 = CHECK_IF_TRUE(tmp_class_creation_9__bases);
        if (tmp_truth_name_10 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 198;

            goto try_except_handler_26;
        }
        tmp_condition_result_51 = tmp_truth_name_10 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_51 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_19;
        } else {
            goto condexpr_false_19;
        }
        condexpr_true_19:;
        CHECK_OBJECT(tmp_class_creation_9__bases);
        tmp_expression_value_150 = tmp_class_creation_9__bases;
        tmp_subscript_value_9 = mod_consts[29];
        tmp_type_arg_17 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_150, tmp_subscript_value_9, 0);
        if (tmp_type_arg_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 198;

            goto try_except_handler_26;
        }
        tmp_metaclass_value_9 = BUILTIN_TYPE1(tmp_type_arg_17);
        Py_DECREF(tmp_type_arg_17);
        if (tmp_metaclass_value_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 198;

            goto try_except_handler_26;
        }
        goto condexpr_end_19;
        condexpr_false_19:;
        tmp_metaclass_value_9 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_9);
        condexpr_end_19:;
        condexpr_end_18:;
        CHECK_OBJECT(tmp_class_creation_9__bases);
        tmp_bases_value_9 = tmp_class_creation_9__bases;
        tmp_assign_source_146 = SELECT_METACLASS(tmp_metaclass_value_9, tmp_bases_value_9);
        Py_DECREF(tmp_metaclass_value_9);
        if (tmp_assign_source_146 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 198;

            goto try_except_handler_26;
        }
        assert(tmp_class_creation_9__metaclass == NULL);
        tmp_class_creation_9__metaclass = tmp_assign_source_146;
    }
    {
        bool tmp_condition_result_52;
        PyObject *tmp_key_value_27;
        PyObject *tmp_dict_arg_value_27;
        tmp_key_value_27 = mod_consts[44];
        CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
        tmp_dict_arg_value_27 = tmp_class_creation_9__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_27, tmp_key_value_27);
        assert(!(tmp_res == -1));
        tmp_condition_result_52 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_52 != false) {
            goto branch_yes_33;
        } else {
            goto branch_no_33;
        }
    }
    branch_yes_33:;
    CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_9__class_decl_dict;
    tmp_dictdel_key = mod_consts[44];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 198;

        goto try_except_handler_26;
    }
    branch_no_33:;
    {
        nuitka_bool tmp_condition_result_53;
        PyObject *tmp_expression_value_151;
        CHECK_OBJECT(tmp_class_creation_9__metaclass);
        tmp_expression_value_151 = tmp_class_creation_9__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_151, mod_consts[45]);
        tmp_condition_result_53 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_53 == NUITKA_BOOL_TRUE) {
            goto branch_yes_34;
        } else {
            goto branch_no_34;
        }
    }
    branch_yes_34:;
    {
        PyObject *tmp_assign_source_147;
        PyObject *tmp_called_value_20;
        PyObject *tmp_expression_value_152;
        PyObject *tmp_args_value_17;
        PyObject *tmp_tuple_element_89;
        PyObject *tmp_kwargs_value_17;
        CHECK_OBJECT(tmp_class_creation_9__metaclass);
        tmp_expression_value_152 = tmp_class_creation_9__metaclass;
        tmp_called_value_20 = LOOKUP_ATTRIBUTE(tmp_expression_value_152, mod_consts[45]);
        if (tmp_called_value_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 198;

            goto try_except_handler_26;
        }
        tmp_tuple_element_89 = mod_consts[185];
        tmp_args_value_17 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_17, 0, tmp_tuple_element_89);
        CHECK_OBJECT(tmp_class_creation_9__bases);
        tmp_tuple_element_89 = tmp_class_creation_9__bases;
        PyTuple_SET_ITEM0(tmp_args_value_17, 1, tmp_tuple_element_89);
        CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
        tmp_kwargs_value_17 = tmp_class_creation_9__class_decl_dict;
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 198;
        tmp_assign_source_147 = CALL_FUNCTION(tmp_called_value_20, tmp_args_value_17, tmp_kwargs_value_17);
        Py_DECREF(tmp_called_value_20);
        Py_DECREF(tmp_args_value_17);
        if (tmp_assign_source_147 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 198;

            goto try_except_handler_26;
        }
        assert(tmp_class_creation_9__prepared == NULL);
        tmp_class_creation_9__prepared = tmp_assign_source_147;
    }
    {
        bool tmp_condition_result_54;
        PyObject *tmp_operand_value_9;
        PyObject *tmp_expression_value_153;
        CHECK_OBJECT(tmp_class_creation_9__prepared);
        tmp_expression_value_153 = tmp_class_creation_9__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_153, mod_consts[47]);
        tmp_operand_value_9 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_9);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 198;

            goto try_except_handler_26;
        }
        tmp_condition_result_54 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_54 != false) {
            goto branch_yes_35;
        } else {
            goto branch_no_35;
        }
    }
    branch_yes_35:;
    {
        PyObject *tmp_raise_type_9;
        PyObject *tmp_raise_value_9;
        PyObject *tmp_left_value_13;
        PyObject *tmp_right_value_13;
        PyObject *tmp_tuple_element_90;
        PyObject *tmp_getattr_target_9;
        PyObject *tmp_getattr_attr_9;
        PyObject *tmp_getattr_default_9;
        tmp_raise_type_9 = PyExc_TypeError;
        tmp_left_value_13 = mod_consts[48];
        CHECK_OBJECT(tmp_class_creation_9__metaclass);
        tmp_getattr_target_9 = tmp_class_creation_9__metaclass;
        tmp_getattr_attr_9 = mod_consts[15];
        tmp_getattr_default_9 = mod_consts[49];
        tmp_tuple_element_90 = BUILTIN_GETATTR(tmp_getattr_target_9, tmp_getattr_attr_9, tmp_getattr_default_9);
        if (tmp_tuple_element_90 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 198;

            goto try_except_handler_26;
        }
        tmp_right_value_13 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_154;
            PyObject *tmp_type_arg_18;
            PyTuple_SET_ITEM(tmp_right_value_13, 0, tmp_tuple_element_90);
            CHECK_OBJECT(tmp_class_creation_9__prepared);
            tmp_type_arg_18 = tmp_class_creation_9__prepared;
            tmp_expression_value_154 = BUILTIN_TYPE1(tmp_type_arg_18);
            assert(!(tmp_expression_value_154 == NULL));
            tmp_tuple_element_90 = LOOKUP_ATTRIBUTE(tmp_expression_value_154, mod_consts[15]);
            Py_DECREF(tmp_expression_value_154);
            if (tmp_tuple_element_90 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 198;

                goto tuple_build_exception_64;
            }
            PyTuple_SET_ITEM(tmp_right_value_13, 1, tmp_tuple_element_90);
        }
        goto tuple_build_noexception_64;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_64:;
        Py_DECREF(tmp_right_value_13);
        goto try_except_handler_26;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_64:;
        tmp_raise_value_9 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_13, tmp_right_value_13);
        Py_DECREF(tmp_right_value_13);
        if (tmp_raise_value_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 198;

            goto try_except_handler_26;
        }
        exception_type = tmp_raise_type_9;
        Py_INCREF(tmp_raise_type_9);
        exception_value = tmp_raise_value_9;
        exception_lineno = 198;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_26;
    }
    branch_no_35:;
    goto branch_end_34;
    branch_no_34:;
    {
        PyObject *tmp_assign_source_148;
        tmp_assign_source_148 = PyDict_New();
        assert(tmp_class_creation_9__prepared == NULL);
        tmp_class_creation_9__prepared = tmp_assign_source_148;
    }
    branch_end_34:;
    {
        PyObject *tmp_assign_source_149;
        {
            PyObject *tmp_set_locals_9;
            CHECK_OBJECT(tmp_class_creation_9__prepared);
            tmp_set_locals_9 = tmp_class_creation_9__prepared;
            locals_numba$roc$hsadrv$drvapi$$$class__9_hsa_ext_control_directives_t_198 = tmp_set_locals_9;
            Py_INCREF(tmp_set_locals_9);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__9_hsa_ext_control_directives_t_198, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 198;

            goto try_except_handler_28;
        }
        tmp_dictset_value = mod_consts[185];
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__9_hsa_ext_control_directives_t_198, mod_consts[52], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 198;

            goto try_except_handler_28;
        }
        if (isFrameUnusable(cache_frame_683cd77f6d77439eb8619ecb5cd128ce_10)) {
            Py_XDECREF(cache_frame_683cd77f6d77439eb8619ecb5cd128ce_10);

#if _DEBUG_REFCOUNTS
            if (cache_frame_683cd77f6d77439eb8619ecb5cd128ce_10 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_683cd77f6d77439eb8619ecb5cd128ce_10 = MAKE_FUNCTION_FRAME(codeobj_683cd77f6d77439eb8619ecb5cd128ce, module_numba$roc$hsadrv$drvapi, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_683cd77f6d77439eb8619ecb5cd128ce_10->m_type_description == NULL);
        frame_683cd77f6d77439eb8619ecb5cd128ce_10 = cache_frame_683cd77f6d77439eb8619ecb5cd128ce_10;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_683cd77f6d77439eb8619ecb5cd128ce_10);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_683cd77f6d77439eb8619ecb5cd128ce_10) == 2); // Frame stack

        // Framed code:
        {
            PyObject *tmp_list_element_9;
            PyObject *tmp_tuple_element_91;
            tmp_tuple_element_91 = mod_consts[186];
            tmp_list_element_9 = PyTuple_New(2);
            {
                PyObject *tmp_expression_value_155;
                PyTuple_SET_ITEM0(tmp_list_element_9, 0, tmp_tuple_element_91);
                tmp_expression_value_155 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__9_hsa_ext_control_directives_t_198, mod_consts[28]);

                if (tmp_expression_value_155 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_155 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                        if (unlikely(tmp_expression_value_155 == NULL)) {
                            tmp_expression_value_155 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                        }

                        if (tmp_expression_value_155 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 200;
                            type_description_2 = "o";
                            goto tuple_build_exception_65;
                        }
                        Py_INCREF(tmp_expression_value_155);
                    } else {
                        goto tuple_build_exception_65;
                    }
                }

                tmp_tuple_element_91 = LOOKUP_ATTRIBUTE(tmp_expression_value_155, mod_consts[39]);
                Py_DECREF(tmp_expression_value_155);
                if (tmp_tuple_element_91 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 200;
                    type_description_2 = "o";
                    goto tuple_build_exception_65;
                }
                PyTuple_SET_ITEM(tmp_list_element_9, 1, tmp_tuple_element_91);
            }
            goto tuple_build_noexception_65;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_65:;
            Py_DECREF(tmp_list_element_9);
            goto frame_exception_exit_10;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_65:;
            tmp_dictset_value = PyList_New(11);
            {
                PyObject *tmp_tuple_element_92;
                PyObject *tmp_tuple_element_93;
                PyObject *tmp_tuple_element_94;
                PyObject *tmp_tuple_element_95;
                PyObject *tmp_tuple_element_96;
                PyObject *tmp_tuple_element_97;
                PyObject *tmp_tuple_element_98;
                PyObject *tmp_tuple_element_99;
                PyObject *tmp_tuple_element_100;
                PyObject *tmp_tuple_element_101;
                PyList_SET_ITEM(tmp_dictset_value, 0, tmp_list_element_9);
                tmp_tuple_element_92 = mod_consts[187];
                tmp_list_element_9 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_156;
                    PyTuple_SET_ITEM0(tmp_list_element_9, 0, tmp_tuple_element_92);
                    tmp_expression_value_156 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__9_hsa_ext_control_directives_t_198, mod_consts[28]);

                    if (tmp_expression_value_156 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_156 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_156 == NULL)) {
                                tmp_expression_value_156 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_156 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 201;
                                type_description_2 = "o";
                                goto tuple_build_exception_66;
                            }
                            Py_INCREF(tmp_expression_value_156);
                        } else {
                            goto tuple_build_exception_66;
                        }
                    }

                    tmp_tuple_element_92 = LOOKUP_ATTRIBUTE(tmp_expression_value_156, mod_consts[97]);
                    Py_DECREF(tmp_expression_value_156);
                    if (tmp_tuple_element_92 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 201;
                        type_description_2 = "o";
                        goto tuple_build_exception_66;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_9, 1, tmp_tuple_element_92);
                }
                goto tuple_build_noexception_66;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_66:;
                Py_DECREF(tmp_list_element_9);
                goto list_build_exception_9;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_66:;
                PyList_SET_ITEM(tmp_dictset_value, 1, tmp_list_element_9);
                tmp_tuple_element_93 = mod_consts[188];
                tmp_list_element_9 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_157;
                    PyTuple_SET_ITEM0(tmp_list_element_9, 0, tmp_tuple_element_93);
                    tmp_expression_value_157 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__9_hsa_ext_control_directives_t_198, mod_consts[28]);

                    if (tmp_expression_value_157 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_157 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_157 == NULL)) {
                                tmp_expression_value_157 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_157 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 202;
                                type_description_2 = "o";
                                goto tuple_build_exception_67;
                            }
                            Py_INCREF(tmp_expression_value_157);
                        } else {
                            goto tuple_build_exception_67;
                        }
                    }

                    tmp_tuple_element_93 = LOOKUP_ATTRIBUTE(tmp_expression_value_157, mod_consts[97]);
                    Py_DECREF(tmp_expression_value_157);
                    if (tmp_tuple_element_93 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 202;
                        type_description_2 = "o";
                        goto tuple_build_exception_67;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_9, 1, tmp_tuple_element_93);
                }
                goto tuple_build_noexception_67;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_67:;
                Py_DECREF(tmp_list_element_9);
                goto list_build_exception_9;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_67:;
                PyList_SET_ITEM(tmp_dictset_value, 2, tmp_list_element_9);
                tmp_tuple_element_94 = mod_consts[189];
                tmp_list_element_9 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_158;
                    PyTuple_SET_ITEM0(tmp_list_element_9, 0, tmp_tuple_element_94);
                    tmp_expression_value_158 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__9_hsa_ext_control_directives_t_198, mod_consts[28]);

                    if (tmp_expression_value_158 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_158 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_158 == NULL)) {
                                tmp_expression_value_158 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_158 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 203;
                                type_description_2 = "o";
                                goto tuple_build_exception_68;
                            }
                            Py_INCREF(tmp_expression_value_158);
                        } else {
                            goto tuple_build_exception_68;
                        }
                    }

                    tmp_tuple_element_94 = LOOKUP_ATTRIBUTE(tmp_expression_value_158, mod_consts[54]);
                    Py_DECREF(tmp_expression_value_158);
                    if (tmp_tuple_element_94 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 203;
                        type_description_2 = "o";
                        goto tuple_build_exception_68;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_9, 1, tmp_tuple_element_94);
                }
                goto tuple_build_noexception_68;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_68:;
                Py_DECREF(tmp_list_element_9);
                goto list_build_exception_9;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_68:;
                PyList_SET_ITEM(tmp_dictset_value, 3, tmp_list_element_9);
                tmp_tuple_element_95 = mod_consts[190];
                tmp_list_element_9 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_159;
                    PyTuple_SET_ITEM0(tmp_list_element_9, 0, tmp_tuple_element_95);
                    tmp_expression_value_159 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__9_hsa_ext_control_directives_t_198, mod_consts[28]);

                    if (tmp_expression_value_159 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_159 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_159 == NULL)) {
                                tmp_expression_value_159 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_159 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 204;
                                type_description_2 = "o";
                                goto tuple_build_exception_69;
                            }
                            Py_INCREF(tmp_expression_value_159);
                        } else {
                            goto tuple_build_exception_69;
                        }
                    }

                    tmp_tuple_element_95 = LOOKUP_ATTRIBUTE(tmp_expression_value_159, mod_consts[39]);
                    Py_DECREF(tmp_expression_value_159);
                    if (tmp_tuple_element_95 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 204;
                        type_description_2 = "o";
                        goto tuple_build_exception_69;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_9, 1, tmp_tuple_element_95);
                }
                goto tuple_build_noexception_69;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_69:;
                Py_DECREF(tmp_list_element_9);
                goto list_build_exception_9;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_69:;
                PyList_SET_ITEM(tmp_dictset_value, 4, tmp_list_element_9);
                tmp_tuple_element_96 = mod_consts[191];
                tmp_list_element_9 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_160;
                    PyTuple_SET_ITEM0(tmp_list_element_9, 0, tmp_tuple_element_96);
                    tmp_expression_value_160 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__9_hsa_ext_control_directives_t_198, mod_consts[28]);

                    if (tmp_expression_value_160 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_160 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_160 == NULL)) {
                                tmp_expression_value_160 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_160 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 205;
                                type_description_2 = "o";
                                goto tuple_build_exception_70;
                            }
                            Py_INCREF(tmp_expression_value_160);
                        } else {
                            goto tuple_build_exception_70;
                        }
                    }

                    tmp_tuple_element_96 = LOOKUP_ATTRIBUTE(tmp_expression_value_160, mod_consts[54]);
                    Py_DECREF(tmp_expression_value_160);
                    if (tmp_tuple_element_96 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 205;
                        type_description_2 = "o";
                        goto tuple_build_exception_70;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_9, 1, tmp_tuple_element_96);
                }
                goto tuple_build_noexception_70;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_70:;
                Py_DECREF(tmp_list_element_9);
                goto list_build_exception_9;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_70:;
                PyList_SET_ITEM(tmp_dictset_value, 5, tmp_list_element_9);
                tmp_tuple_element_97 = mod_consts[87];
                tmp_list_element_9 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_161;
                    PyTuple_SET_ITEM0(tmp_list_element_9, 0, tmp_tuple_element_97);
                    tmp_expression_value_161 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__9_hsa_ext_control_directives_t_198, mod_consts[28]);

                    if (tmp_expression_value_161 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_161 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_161 == NULL)) {
                                tmp_expression_value_161 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_161 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 206;
                                type_description_2 = "o";
                                goto tuple_build_exception_71;
                            }
                            Py_INCREF(tmp_expression_value_161);
                        } else {
                            goto tuple_build_exception_71;
                        }
                    }

                    tmp_tuple_element_97 = LOOKUP_ATTRIBUTE(tmp_expression_value_161, mod_consts[54]);
                    Py_DECREF(tmp_expression_value_161);
                    if (tmp_tuple_element_97 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 206;
                        type_description_2 = "o";
                        goto tuple_build_exception_71;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_9, 1, tmp_tuple_element_97);
                }
                goto tuple_build_noexception_71;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_71:;
                Py_DECREF(tmp_list_element_9);
                goto list_build_exception_9;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_71:;
                PyList_SET_ITEM(tmp_dictset_value, 6, tmp_list_element_9);
                tmp_tuple_element_98 = mod_consts[192];
                tmp_list_element_9 = PyTuple_New(2);
                {
                    PyObject *tmp_left_value_14;
                    PyObject *tmp_expression_value_162;
                    PyObject *tmp_right_value_14;
                    PyTuple_SET_ITEM0(tmp_list_element_9, 0, tmp_tuple_element_98);
                    tmp_expression_value_162 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__9_hsa_ext_control_directives_t_198, mod_consts[28]);

                    if (tmp_expression_value_162 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_162 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_162 == NULL)) {
                                tmp_expression_value_162 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_162 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 207;
                                type_description_2 = "o";
                                goto tuple_build_exception_72;
                            }
                            Py_INCREF(tmp_expression_value_162);
                        } else {
                            goto tuple_build_exception_72;
                        }
                    }

                    tmp_left_value_14 = LOOKUP_ATTRIBUTE(tmp_expression_value_162, mod_consts[39]);
                    Py_DECREF(tmp_expression_value_162);
                    if (tmp_left_value_14 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 207;
                        type_description_2 = "o";
                        goto tuple_build_exception_72;
                    }
                    tmp_right_value_14 = mod_consts[193];
                    tmp_tuple_element_98 = BINARY_OPERATION_MULT_OBJECT_OBJECT_LONG(tmp_left_value_14, tmp_right_value_14);
                    Py_DECREF(tmp_left_value_14);
                    if (tmp_tuple_element_98 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 207;
                        type_description_2 = "o";
                        goto tuple_build_exception_72;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_9, 1, tmp_tuple_element_98);
                }
                goto tuple_build_noexception_72;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_72:;
                Py_DECREF(tmp_list_element_9);
                goto list_build_exception_9;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_72:;
                PyList_SET_ITEM(tmp_dictset_value, 7, tmp_list_element_9);
                tmp_tuple_element_99 = mod_consts[194];
                tmp_list_element_9 = PyTuple_New(2);
                PyTuple_SET_ITEM0(tmp_list_element_9, 0, tmp_tuple_element_99);
                tmp_tuple_element_99 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__9_hsa_ext_control_directives_t_198, mod_consts[46]);

                if (tmp_tuple_element_99 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_tuple_element_99 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[46]);

                        if (unlikely(tmp_tuple_element_99 == NULL)) {
                            tmp_tuple_element_99 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[46]);
                        }

                        if (tmp_tuple_element_99 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 208;
                            type_description_2 = "o";
                            goto tuple_build_exception_73;
                        }
                        Py_INCREF(tmp_tuple_element_99);
                    } else {
                        goto tuple_build_exception_73;
                    }
                }

                PyTuple_SET_ITEM(tmp_list_element_9, 1, tmp_tuple_element_99);
                goto tuple_build_noexception_73;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_73:;
                Py_DECREF(tmp_list_element_9);
                goto list_build_exception_9;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_73:;
                PyList_SET_ITEM(tmp_dictset_value, 8, tmp_list_element_9);
                tmp_tuple_element_100 = mod_consts[195];
                tmp_list_element_9 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_163;
                    PyTuple_SET_ITEM0(tmp_list_element_9, 0, tmp_tuple_element_100);
                    tmp_expression_value_163 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__9_hsa_ext_control_directives_t_198, mod_consts[28]);

                    if (tmp_expression_value_163 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_163 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_163 == NULL)) {
                                tmp_expression_value_163 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_163 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 209;
                                type_description_2 = "o";
                                goto tuple_build_exception_74;
                            }
                            Py_INCREF(tmp_expression_value_163);
                        } else {
                            goto tuple_build_exception_74;
                        }
                    }

                    tmp_tuple_element_100 = LOOKUP_ATTRIBUTE(tmp_expression_value_163, mod_consts[154]);
                    Py_DECREF(tmp_expression_value_163);
                    if (tmp_tuple_element_100 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 209;
                        type_description_2 = "o";
                        goto tuple_build_exception_74;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_9, 1, tmp_tuple_element_100);
                }
                goto tuple_build_noexception_74;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_74:;
                Py_DECREF(tmp_list_element_9);
                goto list_build_exception_9;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_74:;
                PyList_SET_ITEM(tmp_dictset_value, 9, tmp_list_element_9);
                tmp_tuple_element_101 = mod_consts[110];
                tmp_list_element_9 = PyTuple_New(2);
                {
                    PyObject *tmp_left_value_15;
                    PyObject *tmp_expression_value_164;
                    PyObject *tmp_right_value_15;
                    PyTuple_SET_ITEM0(tmp_list_element_9, 0, tmp_tuple_element_101);
                    tmp_expression_value_164 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__9_hsa_ext_control_directives_t_198, mod_consts[28]);

                    if (tmp_expression_value_164 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_164 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_164 == NULL)) {
                                tmp_expression_value_164 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_164 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 210;
                                type_description_2 = "o";
                                goto tuple_build_exception_75;
                            }
                            Py_INCREF(tmp_expression_value_164);
                        } else {
                            goto tuple_build_exception_75;
                        }
                    }

                    tmp_left_value_15 = LOOKUP_ATTRIBUTE(tmp_expression_value_164, mod_consts[154]);
                    Py_DECREF(tmp_expression_value_164);
                    if (tmp_left_value_15 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 210;
                        type_description_2 = "o";
                        goto tuple_build_exception_75;
                    }
                    tmp_right_value_15 = mod_consts[196];
                    tmp_tuple_element_101 = BINARY_OPERATION_MULT_OBJECT_OBJECT_LONG(tmp_left_value_15, tmp_right_value_15);
                    Py_DECREF(tmp_left_value_15);
                    if (tmp_tuple_element_101 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 210;
                        type_description_2 = "o";
                        goto tuple_build_exception_75;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_9, 1, tmp_tuple_element_101);
                }
                goto tuple_build_noexception_75;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_75:;
                Py_DECREF(tmp_list_element_9);
                goto list_build_exception_9;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_75:;
                PyList_SET_ITEM(tmp_dictset_value, 10, tmp_list_element_9);
            }
            goto list_build_noexception_9;
            // Exception handling pass through code for list_build:
            list_build_exception_9:;
            Py_DECREF(tmp_dictset_value);
            goto frame_exception_exit_10;
            // Finished with no exception for list_build:
            list_build_noexception_9:;
            tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__9_hsa_ext_control_directives_t_198, mod_consts[57], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 199;
                type_description_2 = "o";
                goto frame_exception_exit_10;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_683cd77f6d77439eb8619ecb5cd128ce_10);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_9;

        frame_exception_exit_10:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_683cd77f6d77439eb8619ecb5cd128ce_10);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_683cd77f6d77439eb8619ecb5cd128ce_10, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_683cd77f6d77439eb8619ecb5cd128ce_10->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_683cd77f6d77439eb8619ecb5cd128ce_10, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_683cd77f6d77439eb8619ecb5cd128ce_10,
            type_description_2,
            outline_8_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_683cd77f6d77439eb8619ecb5cd128ce_10 == cache_frame_683cd77f6d77439eb8619ecb5cd128ce_10) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_683cd77f6d77439eb8619ecb5cd128ce_10);
            cache_frame_683cd77f6d77439eb8619ecb5cd128ce_10 = NULL;
        }

        assertFrameObject(frame_683cd77f6d77439eb8619ecb5cd128ce_10);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_9;

        frame_no_exception_9:;
        goto skip_nested_handling_9;
        nested_frame_exit_9:;

        goto try_except_handler_28;
        skip_nested_handling_9:;
        {
            nuitka_bool tmp_condition_result_55;
            PyObject *tmp_cmp_expr_left_9;
            PyObject *tmp_cmp_expr_right_9;
            CHECK_OBJECT(tmp_class_creation_9__bases);
            tmp_cmp_expr_left_9 = tmp_class_creation_9__bases;
            CHECK_OBJECT(tmp_class_creation_9__bases_orig);
            tmp_cmp_expr_right_9 = tmp_class_creation_9__bases_orig;
            tmp_condition_result_55 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_9, tmp_cmp_expr_right_9);
            if (tmp_condition_result_55 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 198;

                goto try_except_handler_28;
            }
            if (tmp_condition_result_55 == NUITKA_BOOL_TRUE) {
                goto branch_yes_36;
            } else {
                goto branch_no_36;
            }
            assert(tmp_condition_result_55 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_36:;
        CHECK_OBJECT(tmp_class_creation_9__bases_orig);
        tmp_dictset_value = tmp_class_creation_9__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__9_hsa_ext_control_directives_t_198, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 198;

            goto try_except_handler_28;
        }
        branch_no_36:;
        {
            PyObject *tmp_assign_source_150;
            PyObject *tmp_called_value_21;
            PyObject *tmp_args_value_18;
            PyObject *tmp_tuple_element_102;
            PyObject *tmp_kwargs_value_18;
            CHECK_OBJECT(tmp_class_creation_9__metaclass);
            tmp_called_value_21 = tmp_class_creation_9__metaclass;
            tmp_tuple_element_102 = mod_consts[185];
            tmp_args_value_18 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_18, 0, tmp_tuple_element_102);
            CHECK_OBJECT(tmp_class_creation_9__bases);
            tmp_tuple_element_102 = tmp_class_creation_9__bases;
            PyTuple_SET_ITEM0(tmp_args_value_18, 1, tmp_tuple_element_102);
            tmp_tuple_element_102 = locals_numba$roc$hsadrv$drvapi$$$class__9_hsa_ext_control_directives_t_198;
            PyTuple_SET_ITEM0(tmp_args_value_18, 2, tmp_tuple_element_102);
            CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
            tmp_kwargs_value_18 = tmp_class_creation_9__class_decl_dict;
            frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 198;
            tmp_assign_source_150 = CALL_FUNCTION(tmp_called_value_21, tmp_args_value_18, tmp_kwargs_value_18);
            Py_DECREF(tmp_args_value_18);
            if (tmp_assign_source_150 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 198;

                goto try_except_handler_28;
            }
            assert(outline_8_var___class__ == NULL);
            outline_8_var___class__ = tmp_assign_source_150;
        }
        CHECK_OBJECT(outline_8_var___class__);
        tmp_assign_source_149 = outline_8_var___class__;
        Py_INCREF(tmp_assign_source_149);
        goto try_return_handler_28;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_28:;
        Py_DECREF(locals_numba$roc$hsadrv$drvapi$$$class__9_hsa_ext_control_directives_t_198);
        locals_numba$roc$hsadrv$drvapi$$$class__9_hsa_ext_control_directives_t_198 = NULL;
        goto try_return_handler_27;
        // Exception handler code:
        try_except_handler_28:;
        exception_keeper_type_26 = exception_type;
        exception_keeper_value_26 = exception_value;
        exception_keeper_tb_26 = exception_tb;
        exception_keeper_lineno_26 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$roc$hsadrv$drvapi$$$class__9_hsa_ext_control_directives_t_198);
        locals_numba$roc$hsadrv$drvapi$$$class__9_hsa_ext_control_directives_t_198 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_26;
        exception_value = exception_keeper_value_26;
        exception_tb = exception_keeper_tb_26;
        exception_lineno = exception_keeper_lineno_26;

        goto try_except_handler_27;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_27:;
        CHECK_OBJECT(outline_8_var___class__);
        Py_DECREF(outline_8_var___class__);
        outline_8_var___class__ = NULL;
        goto outline_result_9;
        // Exception handler code:
        try_except_handler_27:;
        exception_keeper_type_27 = exception_type;
        exception_keeper_value_27 = exception_value;
        exception_keeper_tb_27 = exception_tb;
        exception_keeper_lineno_27 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_27;
        exception_value = exception_keeper_value_27;
        exception_tb = exception_keeper_tb_27;
        exception_lineno = exception_keeper_lineno_27;

        goto outline_exception_9;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_9:;
        exception_lineno = 198;
        goto try_except_handler_26;
        outline_result_9:;
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[185], tmp_assign_source_149);
    }
    goto try_end_10;
    // Exception handler code:
    try_except_handler_26:;
    exception_keeper_type_28 = exception_type;
    exception_keeper_value_28 = exception_value;
    exception_keeper_tb_28 = exception_tb;
    exception_keeper_lineno_28 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_9__bases_orig);
    tmp_class_creation_9__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_9__bases);
    tmp_class_creation_9__bases = NULL;
    Py_XDECREF(tmp_class_creation_9__class_decl_dict);
    tmp_class_creation_9__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_9__metaclass);
    tmp_class_creation_9__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_9__prepared);
    tmp_class_creation_9__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_28;
    exception_value = exception_keeper_value_28;
    exception_tb = exception_keeper_tb_28;
    exception_lineno = exception_keeper_lineno_28;

    goto frame_exception_exit_1;
    // End of try:
    try_end_10:;
    CHECK_OBJECT(tmp_class_creation_9__bases_orig);
    Py_DECREF(tmp_class_creation_9__bases_orig);
    tmp_class_creation_9__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_9__bases);
    Py_DECREF(tmp_class_creation_9__bases);
    tmp_class_creation_9__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
    Py_DECREF(tmp_class_creation_9__class_decl_dict);
    tmp_class_creation_9__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_9__metaclass);
    Py_DECREF(tmp_class_creation_9__metaclass);
    tmp_class_creation_9__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_9__prepared);
    Py_DECREF(tmp_class_creation_9__prepared);
    tmp_class_creation_9__prepared = NULL;
    {
        PyObject *tmp_assign_source_151;
        PyObject *tmp_called_value_22;
        PyObject *tmp_expression_value_165;
        PyObject *tmp_args_element_value_6;
        PyObject *tmp_args_element_value_7;
        PyObject *tmp_args_element_value_8;
        PyObject *tmp_args_element_value_9;
        PyObject *tmp_args_element_value_10;
        PyObject *tmp_expression_value_166;
        PyObject *tmp_args_element_value_11;
        PyObject *tmp_called_value_23;
        PyObject *tmp_args_element_value_12;
        tmp_expression_value_165 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_165 == NULL)) {
            tmp_expression_value_165 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_165 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 215;

            goto frame_exception_exit_1;
        }
        tmp_called_value_22 = LOOKUP_ATTRIBUTE(tmp_expression_value_165, mod_consts[166]);
        if (tmp_called_value_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 215;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_6 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

        if (unlikely(tmp_args_element_value_6 == NULL)) {
            tmp_args_element_value_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
        }

        if (tmp_args_element_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_22);

            exception_lineno = 216;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_7 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[61]);

        if (unlikely(tmp_args_element_value_7 == NULL)) {
            tmp_args_element_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[61]);
        }

        if (tmp_args_element_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_22);

            exception_lineno = 217;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_8 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[62]);

        if (unlikely(tmp_args_element_value_8 == NULL)) {
            tmp_args_element_value_8 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
        }

        if (tmp_args_element_value_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_22);

            exception_lineno = 218;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_9 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[68]);

        if (unlikely(tmp_args_element_value_9 == NULL)) {
            tmp_args_element_value_9 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[68]);
        }

        if (tmp_args_element_value_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_22);

            exception_lineno = 219;

            goto frame_exception_exit_1;
        }
        tmp_expression_value_166 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_166 == NULL)) {
            tmp_expression_value_166 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_166 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_22);

            exception_lineno = 220;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_10 = LOOKUP_ATTRIBUTE(tmp_expression_value_166, mod_consts[197]);
        if (tmp_args_element_value_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_22);

            exception_lineno = 220;

            goto frame_exception_exit_1;
        }
        tmp_called_value_23 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

        if (unlikely(tmp_called_value_23 == NULL)) {
            tmp_called_value_23 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
        }

        if (tmp_called_value_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_22);
            Py_DECREF(tmp_args_element_value_10);

            exception_lineno = 221;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_12 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[182]);

        if (unlikely(tmp_args_element_value_12 == NULL)) {
            tmp_args_element_value_12 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[182]);
        }

        if (tmp_args_element_value_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_22);
            Py_DECREF(tmp_args_element_value_10);

            exception_lineno = 221;

            goto frame_exception_exit_1;
        }
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 221;
        tmp_args_element_value_11 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_23, tmp_args_element_value_12);
        if (tmp_args_element_value_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_22);
            Py_DECREF(tmp_args_element_value_10);

            exception_lineno = 221;

            goto frame_exception_exit_1;
        }
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 215;
        {
            PyObject *call_args[] = {tmp_args_element_value_6, tmp_args_element_value_7, tmp_args_element_value_8, tmp_args_element_value_9, tmp_args_element_value_10, tmp_args_element_value_11};
            tmp_assign_source_151 = CALL_FUNCTION_WITH_ARGS6(tmp_called_value_22, call_args);
        }

        Py_DECREF(tmp_called_value_22);
        Py_DECREF(tmp_args_element_value_10);
        Py_DECREF(tmp_args_element_value_11);
        if (tmp_assign_source_151 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 215;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[198], tmp_assign_source_151);
    }
    {
        PyObject *tmp_assign_source_152;
        PyObject *tmp_called_value_24;
        PyObject *tmp_expression_value_167;
        PyObject *tmp_args_element_value_13;
        PyObject *tmp_args_element_value_14;
        tmp_expression_value_167 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_167 == NULL)) {
            tmp_expression_value_167 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_167 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 223;

            goto frame_exception_exit_1;
        }
        tmp_called_value_24 = LOOKUP_ATTRIBUTE(tmp_expression_value_167, mod_consts[166]);
        if (tmp_called_value_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 223;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_13 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

        if (unlikely(tmp_args_element_value_13 == NULL)) {
            tmp_args_element_value_13 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
        }

        if (tmp_args_element_value_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_24);

            exception_lineno = 224;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_14 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[182]);

        if (unlikely(tmp_args_element_value_14 == NULL)) {
            tmp_args_element_value_14 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[182]);
        }

        if (tmp_args_element_value_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_24);

            exception_lineno = 225;

            goto frame_exception_exit_1;
        }
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 223;
        {
            PyObject *call_args[] = {tmp_args_element_value_13, tmp_args_element_value_14};
            tmp_assign_source_152 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_24, call_args);
        }

        Py_DECREF(tmp_called_value_24);
        if (tmp_assign_source_152 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 223;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[199], tmp_assign_source_152);
    }
    {
        PyObject *tmp_assign_source_153;
        PyObject *tmp_called_value_25;
        PyObject *tmp_expression_value_168;
        PyObject *tmp_args_element_value_15;
        PyObject *tmp_args_element_value_16;
        PyObject *tmp_args_element_value_17;
        tmp_expression_value_168 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_168 == NULL)) {
            tmp_expression_value_168 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_168 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 227;

            goto frame_exception_exit_1;
        }
        tmp_called_value_25 = LOOKUP_ATTRIBUTE(tmp_expression_value_168, mod_consts[166]);
        if (tmp_called_value_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 227;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_15 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

        if (unlikely(tmp_args_element_value_15 == NULL)) {
            tmp_args_element_value_15 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
        }

        if (tmp_args_element_value_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_25);

            exception_lineno = 228;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_16 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[182]);

        if (unlikely(tmp_args_element_value_16 == NULL)) {
            tmp_args_element_value_16 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[182]);
        }

        if (tmp_args_element_value_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_25);

            exception_lineno = 229;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_17 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[181]);

        if (unlikely(tmp_args_element_value_17 == NULL)) {
            tmp_args_element_value_17 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[181]);
        }

        if (tmp_args_element_value_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_25);

            exception_lineno = 230;

            goto frame_exception_exit_1;
        }
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 227;
        {
            PyObject *call_args[] = {tmp_args_element_value_15, tmp_args_element_value_16, tmp_args_element_value_17};
            tmp_assign_source_153 = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_25, call_args);
        }

        Py_DECREF(tmp_called_value_25);
        if (tmp_assign_source_153 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 227;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[200], tmp_assign_source_153);
    }
    {
        PyObject *tmp_assign_source_154;
        PyObject *tmp_called_value_26;
        PyObject *tmp_expression_value_169;
        PyObject *tmp_args_element_value_18;
        PyObject *tmp_args_element_value_19;
        PyObject *tmp_args_element_value_20;
        PyObject *tmp_args_element_value_21;
        PyObject *tmp_expression_value_170;
        tmp_expression_value_169 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_169 == NULL)) {
            tmp_expression_value_169 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_169 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 232;

            goto frame_exception_exit_1;
        }
        tmp_called_value_26 = LOOKUP_ATTRIBUTE(tmp_expression_value_169, mod_consts[166]);
        if (tmp_called_value_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 232;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_18 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

        if (unlikely(tmp_args_element_value_18 == NULL)) {
            tmp_args_element_value_18 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
        }

        if (tmp_args_element_value_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_26);

            exception_lineno = 233;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_19 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[182]);

        if (unlikely(tmp_args_element_value_19 == NULL)) {
            tmp_args_element_value_19 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[182]);
        }

        if (tmp_args_element_value_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_26);

            exception_lineno = 234;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_20 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[181]);

        if (unlikely(tmp_args_element_value_20 == NULL)) {
            tmp_args_element_value_20 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[181]);
        }

        if (tmp_args_element_value_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_26);

            exception_lineno = 235;

            goto frame_exception_exit_1;
        }
        tmp_expression_value_170 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_170 == NULL)) {
            tmp_expression_value_170 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_170 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_26);

            exception_lineno = 236;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_21 = LOOKUP_ATTRIBUTE(tmp_expression_value_170, mod_consts[84]);
        if (tmp_args_element_value_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_26);

            exception_lineno = 236;

            goto frame_exception_exit_1;
        }
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 232;
        {
            PyObject *call_args[] = {tmp_args_element_value_18, tmp_args_element_value_19, tmp_args_element_value_20, tmp_args_element_value_21};
            tmp_assign_source_154 = CALL_FUNCTION_WITH_ARGS4(tmp_called_value_26, call_args);
        }

        Py_DECREF(tmp_called_value_26);
        Py_DECREF(tmp_args_element_value_21);
        if (tmp_assign_source_154 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 232;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[201], tmp_assign_source_154);
    }
    {
        PyObject *tmp_assign_source_155;
        PyObject *tmp_called_value_27;
        PyObject *tmp_expression_value_171;
        PyObject *tmp_args_element_value_22;
        PyObject *tmp_args_element_value_23;
        PyObject *tmp_args_element_value_24;
        PyObject *tmp_args_element_value_25;
        PyObject *tmp_expression_value_172;
        tmp_expression_value_171 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_171 == NULL)) {
            tmp_expression_value_171 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_171 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 238;

            goto frame_exception_exit_1;
        }
        tmp_called_value_27 = LOOKUP_ATTRIBUTE(tmp_expression_value_171, mod_consts[166]);
        if (tmp_called_value_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 238;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_22 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

        if (unlikely(tmp_args_element_value_22 == NULL)) {
            tmp_args_element_value_22 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
        }

        if (tmp_args_element_value_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_27);

            exception_lineno = 239;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_23 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[182]);

        if (unlikely(tmp_args_element_value_23 == NULL)) {
            tmp_args_element_value_23 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[182]);
        }

        if (tmp_args_element_value_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_27);

            exception_lineno = 240;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_24 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[201]);

        if (unlikely(tmp_args_element_value_24 == NULL)) {
            tmp_args_element_value_24 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[201]);
        }

        if (tmp_args_element_value_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_27);

            exception_lineno = 241;

            goto frame_exception_exit_1;
        }
        tmp_expression_value_172 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_172 == NULL)) {
            tmp_expression_value_172 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_172 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_27);

            exception_lineno = 242;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_25 = LOOKUP_ATTRIBUTE(tmp_expression_value_172, mod_consts[84]);
        if (tmp_args_element_value_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_27);

            exception_lineno = 242;

            goto frame_exception_exit_1;
        }
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 238;
        {
            PyObject *call_args[] = {tmp_args_element_value_22, tmp_args_element_value_23, tmp_args_element_value_24, tmp_args_element_value_25};
            tmp_assign_source_155 = CALL_FUNCTION_WITH_ARGS4(tmp_called_value_27, call_args);
        }

        Py_DECREF(tmp_called_value_27);
        Py_DECREF(tmp_args_element_value_25);
        if (tmp_assign_source_155 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 238;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[202], tmp_assign_source_155);
    }
    {
        PyObject *tmp_assign_source_156;
        PyObject *tmp_called_value_28;
        PyObject *tmp_expression_value_173;
        PyObject *tmp_args_element_value_26;
        PyObject *tmp_args_element_value_27;
        PyObject *tmp_args_element_value_28;
        PyObject *tmp_args_element_value_29;
        PyObject *tmp_expression_value_174;
        tmp_expression_value_173 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_173 == NULL)) {
            tmp_expression_value_173 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_173 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 244;

            goto frame_exception_exit_1;
        }
        tmp_called_value_28 = LOOKUP_ATTRIBUTE(tmp_expression_value_173, mod_consts[166]);
        if (tmp_called_value_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 244;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_26 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

        if (unlikely(tmp_args_element_value_26 == NULL)) {
            tmp_args_element_value_26 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
        }

        if (tmp_args_element_value_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_28);

            exception_lineno = 245;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_27 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[182]);

        if (unlikely(tmp_args_element_value_27 == NULL)) {
            tmp_args_element_value_27 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[182]);
        }

        if (tmp_args_element_value_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_28);

            exception_lineno = 246;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_28 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[183]);

        if (unlikely(tmp_args_element_value_28 == NULL)) {
            tmp_args_element_value_28 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[183]);
        }

        if (tmp_args_element_value_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_28);

            exception_lineno = 247;

            goto frame_exception_exit_1;
        }
        tmp_expression_value_174 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_174 == NULL)) {
            tmp_expression_value_174 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_174 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_28);

            exception_lineno = 248;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_29 = LOOKUP_ATTRIBUTE(tmp_expression_value_174, mod_consts[84]);
        if (tmp_args_element_value_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_28);

            exception_lineno = 248;

            goto frame_exception_exit_1;
        }
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 244;
        {
            PyObject *call_args[] = {tmp_args_element_value_26, tmp_args_element_value_27, tmp_args_element_value_28, tmp_args_element_value_29};
            tmp_assign_source_156 = CALL_FUNCTION_WITH_ARGS4(tmp_called_value_28, call_args);
        }

        Py_DECREF(tmp_called_value_28);
        Py_DECREF(tmp_args_element_value_29);
        if (tmp_assign_source_156 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 244;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[203], tmp_assign_source_156);
    }
    {
        PyObject *tmp_assign_source_157;
        PyObject *tmp_called_value_29;
        PyObject *tmp_expression_value_175;
        PyObject *tmp_args_element_value_30;
        PyObject *tmp_args_element_value_31;
        PyObject *tmp_args_element_value_32;
        PyObject *tmp_args_element_value_33;
        PyObject *tmp_expression_value_176;
        PyObject *tmp_args_element_value_34;
        PyObject *tmp_args_element_value_35;
        PyObject *tmp_expression_value_177;
        PyObject *tmp_args_element_value_36;
        PyObject *tmp_args_element_value_37;
        PyObject *tmp_called_value_30;
        PyObject *tmp_args_element_value_38;
        tmp_expression_value_175 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_175 == NULL)) {
            tmp_expression_value_175 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_175 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 250;

            goto frame_exception_exit_1;
        }
        tmp_called_value_29 = LOOKUP_ATTRIBUTE(tmp_expression_value_175, mod_consts[166]);
        if (tmp_called_value_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 250;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_30 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

        if (unlikely(tmp_args_element_value_30 == NULL)) {
            tmp_args_element_value_30 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
        }

        if (tmp_args_element_value_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_29);

            exception_lineno = 251;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_31 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[182]);

        if (unlikely(tmp_args_element_value_31 == NULL)) {
            tmp_args_element_value_31 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[182]);
        }

        if (tmp_args_element_value_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_29);

            exception_lineno = 252;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_32 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[131]);

        if (unlikely(tmp_args_element_value_32 == NULL)) {
            tmp_args_element_value_32 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[131]);
        }

        if (tmp_args_element_value_32 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_29);

            exception_lineno = 253;

            goto frame_exception_exit_1;
        }
        tmp_expression_value_176 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_176 == NULL)) {
            tmp_expression_value_176 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_176 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_29);

            exception_lineno = 254;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_33 = LOOKUP_ATTRIBUTE(tmp_expression_value_176, mod_consts[204]);
        if (tmp_args_element_value_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_29);

            exception_lineno = 254;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_34 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[185]);

        if (unlikely(tmp_args_element_value_34 == NULL)) {
            tmp_args_element_value_34 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[185]);
        }

        if (tmp_args_element_value_34 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_29);
            Py_DECREF(tmp_args_element_value_33);

            exception_lineno = 255;

            goto frame_exception_exit_1;
        }
        tmp_expression_value_177 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_177 == NULL)) {
            tmp_expression_value_177 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_177 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_29);
            Py_DECREF(tmp_args_element_value_33);

            exception_lineno = 256;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_35 = LOOKUP_ATTRIBUTE(tmp_expression_value_177, mod_consts[197]);
        if (tmp_args_element_value_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_29);
            Py_DECREF(tmp_args_element_value_33);

            exception_lineno = 256;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_36 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[135]);

        if (unlikely(tmp_args_element_value_36 == NULL)) {
            tmp_args_element_value_36 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[135]);
        }

        if (tmp_args_element_value_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_29);
            Py_DECREF(tmp_args_element_value_33);
            Py_DECREF(tmp_args_element_value_35);

            exception_lineno = 257;

            goto frame_exception_exit_1;
        }
        tmp_called_value_30 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

        if (unlikely(tmp_called_value_30 == NULL)) {
            tmp_called_value_30 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
        }

        if (tmp_called_value_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_29);
            Py_DECREF(tmp_args_element_value_33);
            Py_DECREF(tmp_args_element_value_35);

            exception_lineno = 258;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_38 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[133]);

        if (unlikely(tmp_args_element_value_38 == NULL)) {
            tmp_args_element_value_38 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[133]);
        }

        if (tmp_args_element_value_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_29);
            Py_DECREF(tmp_args_element_value_33);
            Py_DECREF(tmp_args_element_value_35);

            exception_lineno = 258;

            goto frame_exception_exit_1;
        }
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 258;
        tmp_args_element_value_37 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_30, tmp_args_element_value_38);
        if (tmp_args_element_value_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_29);
            Py_DECREF(tmp_args_element_value_33);
            Py_DECREF(tmp_args_element_value_35);

            exception_lineno = 258;

            goto frame_exception_exit_1;
        }
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 250;
        {
            PyObject *call_args[] = {tmp_args_element_value_30, tmp_args_element_value_31, tmp_args_element_value_32, tmp_args_element_value_33, tmp_args_element_value_34, tmp_args_element_value_35, tmp_args_element_value_36, tmp_args_element_value_37};
            tmp_assign_source_157 = CALL_FUNCTION_WITH_ARGS8(tmp_called_value_29, call_args);
        }

        Py_DECREF(tmp_called_value_29);
        Py_DECREF(tmp_args_element_value_33);
        Py_DECREF(tmp_args_element_value_35);
        Py_DECREF(tmp_args_element_value_37);
        if (tmp_assign_source_157 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 250;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[205], tmp_assign_source_157);
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_158;
        PyObject *tmp_tuple_element_103;
        PyObject *tmp_expression_value_178;
        tmp_expression_value_178 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_178 == NULL)) {
            tmp_expression_value_178 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_178 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 261;

            goto try_except_handler_29;
        }
        tmp_tuple_element_103 = LOOKUP_ATTRIBUTE(tmp_expression_value_178, mod_consts[43]);
        if (tmp_tuple_element_103 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 261;

            goto try_except_handler_29;
        }
        tmp_assign_source_158 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_assign_source_158, 0, tmp_tuple_element_103);
        assert(tmp_class_creation_10__bases_orig == NULL);
        tmp_class_creation_10__bases_orig = tmp_assign_source_158;
    }
    {
        PyObject *tmp_assign_source_159;
        PyObject *tmp_dircall_arg1_10;
        CHECK_OBJECT(tmp_class_creation_10__bases_orig);
        tmp_dircall_arg1_10 = tmp_class_creation_10__bases_orig;
        Py_INCREF(tmp_dircall_arg1_10);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_10};
            tmp_assign_source_159 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_159 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 261;

            goto try_except_handler_29;
        }
        assert(tmp_class_creation_10__bases == NULL);
        tmp_class_creation_10__bases = tmp_assign_source_159;
    }
    {
        PyObject *tmp_assign_source_160;
        tmp_assign_source_160 = PyDict_New();
        assert(tmp_class_creation_10__class_decl_dict == NULL);
        tmp_class_creation_10__class_decl_dict = tmp_assign_source_160;
    }
    {
        PyObject *tmp_assign_source_161;
        PyObject *tmp_metaclass_value_10;
        bool tmp_condition_result_56;
        PyObject *tmp_key_value_28;
        PyObject *tmp_dict_arg_value_28;
        PyObject *tmp_dict_arg_value_29;
        PyObject *tmp_key_value_29;
        nuitka_bool tmp_condition_result_57;
        int tmp_truth_name_11;
        PyObject *tmp_type_arg_19;
        PyObject *tmp_expression_value_179;
        PyObject *tmp_subscript_value_10;
        PyObject *tmp_bases_value_10;
        tmp_key_value_28 = mod_consts[44];
        CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
        tmp_dict_arg_value_28 = tmp_class_creation_10__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_28, tmp_key_value_28);
        assert(!(tmp_res == -1));
        tmp_condition_result_56 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_56 != false) {
            goto condexpr_true_20;
        } else {
            goto condexpr_false_20;
        }
        condexpr_true_20:;
        CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
        tmp_dict_arg_value_29 = tmp_class_creation_10__class_decl_dict;
        tmp_key_value_29 = mod_consts[44];
        tmp_metaclass_value_10 = DICT_GET_ITEM0(tmp_dict_arg_value_29, tmp_key_value_29);
        if (tmp_metaclass_value_10 == NULL) {
            tmp_metaclass_value_10 = Py_None;
        }
        assert(!(tmp_metaclass_value_10 == NULL));
        Py_INCREF(tmp_metaclass_value_10);
        goto condexpr_end_20;
        condexpr_false_20:;
        CHECK_OBJECT(tmp_class_creation_10__bases);
        tmp_truth_name_11 = CHECK_IF_TRUE(tmp_class_creation_10__bases);
        if (tmp_truth_name_11 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 261;

            goto try_except_handler_29;
        }
        tmp_condition_result_57 = tmp_truth_name_11 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_57 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_21;
        } else {
            goto condexpr_false_21;
        }
        condexpr_true_21:;
        CHECK_OBJECT(tmp_class_creation_10__bases);
        tmp_expression_value_179 = tmp_class_creation_10__bases;
        tmp_subscript_value_10 = mod_consts[29];
        tmp_type_arg_19 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_179, tmp_subscript_value_10, 0);
        if (tmp_type_arg_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 261;

            goto try_except_handler_29;
        }
        tmp_metaclass_value_10 = BUILTIN_TYPE1(tmp_type_arg_19);
        Py_DECREF(tmp_type_arg_19);
        if (tmp_metaclass_value_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 261;

            goto try_except_handler_29;
        }
        goto condexpr_end_21;
        condexpr_false_21:;
        tmp_metaclass_value_10 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_10);
        condexpr_end_21:;
        condexpr_end_20:;
        CHECK_OBJECT(tmp_class_creation_10__bases);
        tmp_bases_value_10 = tmp_class_creation_10__bases;
        tmp_assign_source_161 = SELECT_METACLASS(tmp_metaclass_value_10, tmp_bases_value_10);
        Py_DECREF(tmp_metaclass_value_10);
        if (tmp_assign_source_161 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 261;

            goto try_except_handler_29;
        }
        assert(tmp_class_creation_10__metaclass == NULL);
        tmp_class_creation_10__metaclass = tmp_assign_source_161;
    }
    {
        bool tmp_condition_result_58;
        PyObject *tmp_key_value_30;
        PyObject *tmp_dict_arg_value_30;
        tmp_key_value_30 = mod_consts[44];
        CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
        tmp_dict_arg_value_30 = tmp_class_creation_10__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_30, tmp_key_value_30);
        assert(!(tmp_res == -1));
        tmp_condition_result_58 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_58 != false) {
            goto branch_yes_37;
        } else {
            goto branch_no_37;
        }
    }
    branch_yes_37:;
    CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_10__class_decl_dict;
    tmp_dictdel_key = mod_consts[44];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 261;

        goto try_except_handler_29;
    }
    branch_no_37:;
    {
        nuitka_bool tmp_condition_result_59;
        PyObject *tmp_expression_value_180;
        CHECK_OBJECT(tmp_class_creation_10__metaclass);
        tmp_expression_value_180 = tmp_class_creation_10__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_180, mod_consts[45]);
        tmp_condition_result_59 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_59 == NUITKA_BOOL_TRUE) {
            goto branch_yes_38;
        } else {
            goto branch_no_38;
        }
    }
    branch_yes_38:;
    {
        PyObject *tmp_assign_source_162;
        PyObject *tmp_called_value_31;
        PyObject *tmp_expression_value_181;
        PyObject *tmp_args_value_19;
        PyObject *tmp_tuple_element_104;
        PyObject *tmp_kwargs_value_19;
        CHECK_OBJECT(tmp_class_creation_10__metaclass);
        tmp_expression_value_181 = tmp_class_creation_10__metaclass;
        tmp_called_value_31 = LOOKUP_ATTRIBUTE(tmp_expression_value_181, mod_consts[45]);
        if (tmp_called_value_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 261;

            goto try_except_handler_29;
        }
        tmp_tuple_element_104 = mod_consts[206];
        tmp_args_value_19 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_19, 0, tmp_tuple_element_104);
        CHECK_OBJECT(tmp_class_creation_10__bases);
        tmp_tuple_element_104 = tmp_class_creation_10__bases;
        PyTuple_SET_ITEM0(tmp_args_value_19, 1, tmp_tuple_element_104);
        CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
        tmp_kwargs_value_19 = tmp_class_creation_10__class_decl_dict;
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 261;
        tmp_assign_source_162 = CALL_FUNCTION(tmp_called_value_31, tmp_args_value_19, tmp_kwargs_value_19);
        Py_DECREF(tmp_called_value_31);
        Py_DECREF(tmp_args_value_19);
        if (tmp_assign_source_162 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 261;

            goto try_except_handler_29;
        }
        assert(tmp_class_creation_10__prepared == NULL);
        tmp_class_creation_10__prepared = tmp_assign_source_162;
    }
    {
        bool tmp_condition_result_60;
        PyObject *tmp_operand_value_10;
        PyObject *tmp_expression_value_182;
        CHECK_OBJECT(tmp_class_creation_10__prepared);
        tmp_expression_value_182 = tmp_class_creation_10__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_182, mod_consts[47]);
        tmp_operand_value_10 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_10);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 261;

            goto try_except_handler_29;
        }
        tmp_condition_result_60 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_60 != false) {
            goto branch_yes_39;
        } else {
            goto branch_no_39;
        }
    }
    branch_yes_39:;
    {
        PyObject *tmp_raise_type_10;
        PyObject *tmp_raise_value_10;
        PyObject *tmp_left_value_16;
        PyObject *tmp_right_value_16;
        PyObject *tmp_tuple_element_105;
        PyObject *tmp_getattr_target_10;
        PyObject *tmp_getattr_attr_10;
        PyObject *tmp_getattr_default_10;
        tmp_raise_type_10 = PyExc_TypeError;
        tmp_left_value_16 = mod_consts[48];
        CHECK_OBJECT(tmp_class_creation_10__metaclass);
        tmp_getattr_target_10 = tmp_class_creation_10__metaclass;
        tmp_getattr_attr_10 = mod_consts[15];
        tmp_getattr_default_10 = mod_consts[49];
        tmp_tuple_element_105 = BUILTIN_GETATTR(tmp_getattr_target_10, tmp_getattr_attr_10, tmp_getattr_default_10);
        if (tmp_tuple_element_105 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 261;

            goto try_except_handler_29;
        }
        tmp_right_value_16 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_183;
            PyObject *tmp_type_arg_20;
            PyTuple_SET_ITEM(tmp_right_value_16, 0, tmp_tuple_element_105);
            CHECK_OBJECT(tmp_class_creation_10__prepared);
            tmp_type_arg_20 = tmp_class_creation_10__prepared;
            tmp_expression_value_183 = BUILTIN_TYPE1(tmp_type_arg_20);
            assert(!(tmp_expression_value_183 == NULL));
            tmp_tuple_element_105 = LOOKUP_ATTRIBUTE(tmp_expression_value_183, mod_consts[15]);
            Py_DECREF(tmp_expression_value_183);
            if (tmp_tuple_element_105 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 261;

                goto tuple_build_exception_76;
            }
            PyTuple_SET_ITEM(tmp_right_value_16, 1, tmp_tuple_element_105);
        }
        goto tuple_build_noexception_76;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_76:;
        Py_DECREF(tmp_right_value_16);
        goto try_except_handler_29;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_76:;
        tmp_raise_value_10 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_16, tmp_right_value_16);
        Py_DECREF(tmp_right_value_16);
        if (tmp_raise_value_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 261;

            goto try_except_handler_29;
        }
        exception_type = tmp_raise_type_10;
        Py_INCREF(tmp_raise_type_10);
        exception_value = tmp_raise_value_10;
        exception_lineno = 261;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_29;
    }
    branch_no_39:;
    goto branch_end_38;
    branch_no_38:;
    {
        PyObject *tmp_assign_source_163;
        tmp_assign_source_163 = PyDict_New();
        assert(tmp_class_creation_10__prepared == NULL);
        tmp_class_creation_10__prepared = tmp_assign_source_163;
    }
    branch_end_38:;
    {
        PyObject *tmp_assign_source_164;
        {
            PyObject *tmp_set_locals_10;
            CHECK_OBJECT(tmp_class_creation_10__prepared);
            tmp_set_locals_10 = tmp_class_creation_10__prepared;
            locals_numba$roc$hsadrv$drvapi$$$class__10_hsa_ext_finalizer_1_00_pfn_t_261 = tmp_set_locals_10;
            Py_INCREF(tmp_set_locals_10);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__10_hsa_ext_finalizer_1_00_pfn_t_261, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 261;

            goto try_except_handler_31;
        }
        tmp_dictset_value = mod_consts[206];
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__10_hsa_ext_finalizer_1_00_pfn_t_261, mod_consts[52], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 261;

            goto try_except_handler_31;
        }
        if (isFrameUnusable(cache_frame_bc9f612c35d7f980bec2555e74a060ce_11)) {
            Py_XDECREF(cache_frame_bc9f612c35d7f980bec2555e74a060ce_11);

#if _DEBUG_REFCOUNTS
            if (cache_frame_bc9f612c35d7f980bec2555e74a060ce_11 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_bc9f612c35d7f980bec2555e74a060ce_11 = MAKE_FUNCTION_FRAME(codeobj_bc9f612c35d7f980bec2555e74a060ce, module_numba$roc$hsadrv$drvapi, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_bc9f612c35d7f980bec2555e74a060ce_11->m_type_description == NULL);
        frame_bc9f612c35d7f980bec2555e74a060ce_11 = cache_frame_bc9f612c35d7f980bec2555e74a060ce_11;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_bc9f612c35d7f980bec2555e74a060ce_11);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_bc9f612c35d7f980bec2555e74a060ce_11) == 2); // Frame stack

        // Framed code:
        {
            PyObject *tmp_list_element_10;
            PyObject *tmp_tuple_element_106;
            tmp_tuple_element_106 = mod_consts[207];
            tmp_list_element_10 = PyTuple_New(2);
            PyTuple_SET_ITEM0(tmp_list_element_10, 0, tmp_tuple_element_106);
            tmp_tuple_element_106 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__10_hsa_ext_finalizer_1_00_pfn_t_261, mod_consts[198]);

            if (tmp_tuple_element_106 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_tuple_element_106 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[198]);

                    if (unlikely(tmp_tuple_element_106 == NULL)) {
                        tmp_tuple_element_106 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[198]);
                    }

                    if (tmp_tuple_element_106 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 263;
                        type_description_2 = "o";
                        goto tuple_build_exception_77;
                    }
                    Py_INCREF(tmp_tuple_element_106);
                } else {
                    goto tuple_build_exception_77;
                }
            }

            PyTuple_SET_ITEM(tmp_list_element_10, 1, tmp_tuple_element_106);
            goto tuple_build_noexception_77;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_77:;
            Py_DECREF(tmp_list_element_10);
            goto frame_exception_exit_11;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_77:;
            tmp_dictset_value = PyList_New(6);
            {
                PyObject *tmp_tuple_element_107;
                PyObject *tmp_tuple_element_108;
                PyObject *tmp_tuple_element_109;
                PyObject *tmp_tuple_element_110;
                PyObject *tmp_tuple_element_111;
                PyList_SET_ITEM(tmp_dictset_value, 0, tmp_list_element_10);
                tmp_tuple_element_107 = mod_consts[208];
                tmp_list_element_10 = PyTuple_New(2);
                PyTuple_SET_ITEM0(tmp_list_element_10, 0, tmp_tuple_element_107);
                tmp_tuple_element_107 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__10_hsa_ext_finalizer_1_00_pfn_t_261, mod_consts[199]);

                if (tmp_tuple_element_107 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_tuple_element_107 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[199]);

                        if (unlikely(tmp_tuple_element_107 == NULL)) {
                            tmp_tuple_element_107 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[199]);
                        }

                        if (tmp_tuple_element_107 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 264;
                            type_description_2 = "o";
                            goto tuple_build_exception_78;
                        }
                        Py_INCREF(tmp_tuple_element_107);
                    } else {
                        goto tuple_build_exception_78;
                    }
                }

                PyTuple_SET_ITEM(tmp_list_element_10, 1, tmp_tuple_element_107);
                goto tuple_build_noexception_78;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_78:;
                Py_DECREF(tmp_list_element_10);
                goto list_build_exception_10;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_78:;
                PyList_SET_ITEM(tmp_dictset_value, 1, tmp_list_element_10);
                tmp_tuple_element_108 = mod_consts[209];
                tmp_list_element_10 = PyTuple_New(2);
                PyTuple_SET_ITEM0(tmp_list_element_10, 0, tmp_tuple_element_108);
                tmp_tuple_element_108 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__10_hsa_ext_finalizer_1_00_pfn_t_261, mod_consts[200]);

                if (tmp_tuple_element_108 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_tuple_element_108 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[200]);

                        if (unlikely(tmp_tuple_element_108 == NULL)) {
                            tmp_tuple_element_108 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[200]);
                        }

                        if (tmp_tuple_element_108 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 265;
                            type_description_2 = "o";
                            goto tuple_build_exception_79;
                        }
                        Py_INCREF(tmp_tuple_element_108);
                    } else {
                        goto tuple_build_exception_79;
                    }
                }

                PyTuple_SET_ITEM(tmp_list_element_10, 1, tmp_tuple_element_108);
                goto tuple_build_noexception_79;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_79:;
                Py_DECREF(tmp_list_element_10);
                goto list_build_exception_10;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_79:;
                PyList_SET_ITEM(tmp_dictset_value, 2, tmp_list_element_10);
                tmp_tuple_element_109 = mod_consts[210];
                tmp_list_element_10 = PyTuple_New(2);
                PyTuple_SET_ITEM0(tmp_list_element_10, 0, tmp_tuple_element_109);
                tmp_tuple_element_109 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__10_hsa_ext_finalizer_1_00_pfn_t_261, mod_consts[202]);

                if (tmp_tuple_element_109 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_tuple_element_109 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[202]);

                        if (unlikely(tmp_tuple_element_109 == NULL)) {
                            tmp_tuple_element_109 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[202]);
                        }

                        if (tmp_tuple_element_109 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 267;
                            type_description_2 = "o";
                            goto tuple_build_exception_80;
                        }
                        Py_INCREF(tmp_tuple_element_109);
                    } else {
                        goto tuple_build_exception_80;
                    }
                }

                PyTuple_SET_ITEM(tmp_list_element_10, 1, tmp_tuple_element_109);
                goto tuple_build_noexception_80;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_80:;
                Py_DECREF(tmp_list_element_10);
                goto list_build_exception_10;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_80:;
                PyList_SET_ITEM(tmp_dictset_value, 3, tmp_list_element_10);
                tmp_tuple_element_110 = mod_consts[211];
                tmp_list_element_10 = PyTuple_New(2);
                PyTuple_SET_ITEM0(tmp_list_element_10, 0, tmp_tuple_element_110);
                tmp_tuple_element_110 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__10_hsa_ext_finalizer_1_00_pfn_t_261, mod_consts[203]);

                if (tmp_tuple_element_110 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_tuple_element_110 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[203]);

                        if (unlikely(tmp_tuple_element_110 == NULL)) {
                            tmp_tuple_element_110 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[203]);
                        }

                        if (tmp_tuple_element_110 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 268;
                            type_description_2 = "o";
                            goto tuple_build_exception_81;
                        }
                        Py_INCREF(tmp_tuple_element_110);
                    } else {
                        goto tuple_build_exception_81;
                    }
                }

                PyTuple_SET_ITEM(tmp_list_element_10, 1, tmp_tuple_element_110);
                goto tuple_build_noexception_81;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_81:;
                Py_DECREF(tmp_list_element_10);
                goto list_build_exception_10;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_81:;
                PyList_SET_ITEM(tmp_dictset_value, 4, tmp_list_element_10);
                tmp_tuple_element_111 = mod_consts[212];
                tmp_list_element_10 = PyTuple_New(2);
                PyTuple_SET_ITEM0(tmp_list_element_10, 0, tmp_tuple_element_111);
                tmp_tuple_element_111 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__10_hsa_ext_finalizer_1_00_pfn_t_261, mod_consts[205]);

                if (tmp_tuple_element_111 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_tuple_element_111 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[205]);

                        if (unlikely(tmp_tuple_element_111 == NULL)) {
                            tmp_tuple_element_111 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[205]);
                        }

                        if (tmp_tuple_element_111 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 269;
                            type_description_2 = "o";
                            goto tuple_build_exception_82;
                        }
                        Py_INCREF(tmp_tuple_element_111);
                    } else {
                        goto tuple_build_exception_82;
                    }
                }

                PyTuple_SET_ITEM(tmp_list_element_10, 1, tmp_tuple_element_111);
                goto tuple_build_noexception_82;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_82:;
                Py_DECREF(tmp_list_element_10);
                goto list_build_exception_10;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_82:;
                PyList_SET_ITEM(tmp_dictset_value, 5, tmp_list_element_10);
            }
            goto list_build_noexception_10;
            // Exception handling pass through code for list_build:
            list_build_exception_10:;
            Py_DECREF(tmp_dictset_value);
            goto frame_exception_exit_11;
            // Finished with no exception for list_build:
            list_build_noexception_10:;
            tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__10_hsa_ext_finalizer_1_00_pfn_t_261, mod_consts[57], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 262;
                type_description_2 = "o";
                goto frame_exception_exit_11;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_bc9f612c35d7f980bec2555e74a060ce_11);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_10;

        frame_exception_exit_11:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_bc9f612c35d7f980bec2555e74a060ce_11);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_bc9f612c35d7f980bec2555e74a060ce_11, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_bc9f612c35d7f980bec2555e74a060ce_11->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_bc9f612c35d7f980bec2555e74a060ce_11, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_bc9f612c35d7f980bec2555e74a060ce_11,
            type_description_2,
            outline_9_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_bc9f612c35d7f980bec2555e74a060ce_11 == cache_frame_bc9f612c35d7f980bec2555e74a060ce_11) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_bc9f612c35d7f980bec2555e74a060ce_11);
            cache_frame_bc9f612c35d7f980bec2555e74a060ce_11 = NULL;
        }

        assertFrameObject(frame_bc9f612c35d7f980bec2555e74a060ce_11);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_10;

        frame_no_exception_10:;
        goto skip_nested_handling_10;
        nested_frame_exit_10:;

        goto try_except_handler_31;
        skip_nested_handling_10:;
        {
            nuitka_bool tmp_condition_result_61;
            PyObject *tmp_cmp_expr_left_10;
            PyObject *tmp_cmp_expr_right_10;
            CHECK_OBJECT(tmp_class_creation_10__bases);
            tmp_cmp_expr_left_10 = tmp_class_creation_10__bases;
            CHECK_OBJECT(tmp_class_creation_10__bases_orig);
            tmp_cmp_expr_right_10 = tmp_class_creation_10__bases_orig;
            tmp_condition_result_61 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_10, tmp_cmp_expr_right_10);
            if (tmp_condition_result_61 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 261;

                goto try_except_handler_31;
            }
            if (tmp_condition_result_61 == NUITKA_BOOL_TRUE) {
                goto branch_yes_40;
            } else {
                goto branch_no_40;
            }
            assert(tmp_condition_result_61 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_40:;
        CHECK_OBJECT(tmp_class_creation_10__bases_orig);
        tmp_dictset_value = tmp_class_creation_10__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__10_hsa_ext_finalizer_1_00_pfn_t_261, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 261;

            goto try_except_handler_31;
        }
        branch_no_40:;
        {
            PyObject *tmp_assign_source_165;
            PyObject *tmp_called_value_32;
            PyObject *tmp_args_value_20;
            PyObject *tmp_tuple_element_112;
            PyObject *tmp_kwargs_value_20;
            CHECK_OBJECT(tmp_class_creation_10__metaclass);
            tmp_called_value_32 = tmp_class_creation_10__metaclass;
            tmp_tuple_element_112 = mod_consts[206];
            tmp_args_value_20 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_20, 0, tmp_tuple_element_112);
            CHECK_OBJECT(tmp_class_creation_10__bases);
            tmp_tuple_element_112 = tmp_class_creation_10__bases;
            PyTuple_SET_ITEM0(tmp_args_value_20, 1, tmp_tuple_element_112);
            tmp_tuple_element_112 = locals_numba$roc$hsadrv$drvapi$$$class__10_hsa_ext_finalizer_1_00_pfn_t_261;
            PyTuple_SET_ITEM0(tmp_args_value_20, 2, tmp_tuple_element_112);
            CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
            tmp_kwargs_value_20 = tmp_class_creation_10__class_decl_dict;
            frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 261;
            tmp_assign_source_165 = CALL_FUNCTION(tmp_called_value_32, tmp_args_value_20, tmp_kwargs_value_20);
            Py_DECREF(tmp_args_value_20);
            if (tmp_assign_source_165 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 261;

                goto try_except_handler_31;
            }
            assert(outline_9_var___class__ == NULL);
            outline_9_var___class__ = tmp_assign_source_165;
        }
        CHECK_OBJECT(outline_9_var___class__);
        tmp_assign_source_164 = outline_9_var___class__;
        Py_INCREF(tmp_assign_source_164);
        goto try_return_handler_31;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_31:;
        Py_DECREF(locals_numba$roc$hsadrv$drvapi$$$class__10_hsa_ext_finalizer_1_00_pfn_t_261);
        locals_numba$roc$hsadrv$drvapi$$$class__10_hsa_ext_finalizer_1_00_pfn_t_261 = NULL;
        goto try_return_handler_30;
        // Exception handler code:
        try_except_handler_31:;
        exception_keeper_type_29 = exception_type;
        exception_keeper_value_29 = exception_value;
        exception_keeper_tb_29 = exception_tb;
        exception_keeper_lineno_29 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$roc$hsadrv$drvapi$$$class__10_hsa_ext_finalizer_1_00_pfn_t_261);
        locals_numba$roc$hsadrv$drvapi$$$class__10_hsa_ext_finalizer_1_00_pfn_t_261 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_29;
        exception_value = exception_keeper_value_29;
        exception_tb = exception_keeper_tb_29;
        exception_lineno = exception_keeper_lineno_29;

        goto try_except_handler_30;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_30:;
        CHECK_OBJECT(outline_9_var___class__);
        Py_DECREF(outline_9_var___class__);
        outline_9_var___class__ = NULL;
        goto outline_result_10;
        // Exception handler code:
        try_except_handler_30:;
        exception_keeper_type_30 = exception_type;
        exception_keeper_value_30 = exception_value;
        exception_keeper_tb_30 = exception_tb;
        exception_keeper_lineno_30 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_30;
        exception_value = exception_keeper_value_30;
        exception_tb = exception_keeper_tb_30;
        exception_lineno = exception_keeper_lineno_30;

        goto outline_exception_10;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_10:;
        exception_lineno = 261;
        goto try_except_handler_29;
        outline_result_10:;
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[206], tmp_assign_source_164);
    }
    goto try_end_11;
    // Exception handler code:
    try_except_handler_29:;
    exception_keeper_type_31 = exception_type;
    exception_keeper_value_31 = exception_value;
    exception_keeper_tb_31 = exception_tb;
    exception_keeper_lineno_31 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_10__bases_orig);
    tmp_class_creation_10__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_10__bases);
    tmp_class_creation_10__bases = NULL;
    Py_XDECREF(tmp_class_creation_10__class_decl_dict);
    tmp_class_creation_10__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_10__metaclass);
    tmp_class_creation_10__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_10__prepared);
    tmp_class_creation_10__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_31;
    exception_value = exception_keeper_value_31;
    exception_tb = exception_keeper_tb_31;
    exception_lineno = exception_keeper_lineno_31;

    goto frame_exception_exit_1;
    // End of try:
    try_end_11:;
    CHECK_OBJECT(tmp_class_creation_10__bases_orig);
    Py_DECREF(tmp_class_creation_10__bases_orig);
    tmp_class_creation_10__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_10__bases);
    Py_DECREF(tmp_class_creation_10__bases);
    tmp_class_creation_10__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
    Py_DECREF(tmp_class_creation_10__class_decl_dict);
    tmp_class_creation_10__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_10__metaclass);
    Py_DECREF(tmp_class_creation_10__metaclass);
    tmp_class_creation_10__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_10__prepared);
    Py_DECREF(tmp_class_creation_10__prepared);
    tmp_class_creation_10__prepared = NULL;
    {
        PyObject *tmp_assign_source_166;
        tmp_assign_source_166 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[40]);

        if (unlikely(tmp_assign_source_166 == NULL)) {
            tmp_assign_source_166 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[40]);
        }

        if (tmp_assign_source_166 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 279;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT0(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[213], tmp_assign_source_166);
    }
    {
        PyObject *tmp_assign_source_167;
        PyObject *tmp_expression_value_184;
        tmp_expression_value_184 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_184 == NULL)) {
            tmp_expression_value_184 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_184 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 280;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_167 = LOOKUP_ATTRIBUTE(tmp_expression_value_184, mod_consts[41]);
        if (tmp_assign_source_167 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 280;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[214], tmp_assign_source_167);
    }
    {
        PyObject *tmp_assign_source_168;
        PyObject *tmp_expression_value_185;
        tmp_expression_value_185 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_185 == NULL)) {
            tmp_expression_value_185 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_185 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 281;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_168 = LOOKUP_ATTRIBUTE(tmp_expression_value_185, mod_consts[41]);
        if (tmp_assign_source_168 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 281;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[215], tmp_assign_source_168);
    }
    {
        PyObject *tmp_assign_source_169;
        PyObject *tmp_expression_value_186;
        tmp_expression_value_186 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_186 == NULL)) {
            tmp_expression_value_186 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_186 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 282;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_169 = LOOKUP_ATTRIBUTE(tmp_expression_value_186, mod_consts[41]);
        if (tmp_assign_source_169 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 282;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[216], tmp_assign_source_169);
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_170;
        PyObject *tmp_tuple_element_113;
        PyObject *tmp_expression_value_187;
        tmp_expression_value_187 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_187 == NULL)) {
            tmp_expression_value_187 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_187 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;

            goto try_except_handler_32;
        }
        tmp_tuple_element_113 = LOOKUP_ATTRIBUTE(tmp_expression_value_187, mod_consts[43]);
        if (tmp_tuple_element_113 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;

            goto try_except_handler_32;
        }
        tmp_assign_source_170 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_assign_source_170, 0, tmp_tuple_element_113);
        assert(tmp_class_creation_11__bases_orig == NULL);
        tmp_class_creation_11__bases_orig = tmp_assign_source_170;
    }
    {
        PyObject *tmp_assign_source_171;
        PyObject *tmp_dircall_arg1_11;
        CHECK_OBJECT(tmp_class_creation_11__bases_orig);
        tmp_dircall_arg1_11 = tmp_class_creation_11__bases_orig;
        Py_INCREF(tmp_dircall_arg1_11);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_11};
            tmp_assign_source_171 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_171 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;

            goto try_except_handler_32;
        }
        assert(tmp_class_creation_11__bases == NULL);
        tmp_class_creation_11__bases = tmp_assign_source_171;
    }
    {
        PyObject *tmp_assign_source_172;
        tmp_assign_source_172 = PyDict_New();
        assert(tmp_class_creation_11__class_decl_dict == NULL);
        tmp_class_creation_11__class_decl_dict = tmp_assign_source_172;
    }
    {
        PyObject *tmp_assign_source_173;
        PyObject *tmp_metaclass_value_11;
        bool tmp_condition_result_62;
        PyObject *tmp_key_value_31;
        PyObject *tmp_dict_arg_value_31;
        PyObject *tmp_dict_arg_value_32;
        PyObject *tmp_key_value_32;
        nuitka_bool tmp_condition_result_63;
        int tmp_truth_name_12;
        PyObject *tmp_type_arg_21;
        PyObject *tmp_expression_value_188;
        PyObject *tmp_subscript_value_11;
        PyObject *tmp_bases_value_11;
        tmp_key_value_31 = mod_consts[44];
        CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
        tmp_dict_arg_value_31 = tmp_class_creation_11__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_31, tmp_key_value_31);
        assert(!(tmp_res == -1));
        tmp_condition_result_62 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_62 != false) {
            goto condexpr_true_22;
        } else {
            goto condexpr_false_22;
        }
        condexpr_true_22:;
        CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
        tmp_dict_arg_value_32 = tmp_class_creation_11__class_decl_dict;
        tmp_key_value_32 = mod_consts[44];
        tmp_metaclass_value_11 = DICT_GET_ITEM0(tmp_dict_arg_value_32, tmp_key_value_32);
        if (tmp_metaclass_value_11 == NULL) {
            tmp_metaclass_value_11 = Py_None;
        }
        assert(!(tmp_metaclass_value_11 == NULL));
        Py_INCREF(tmp_metaclass_value_11);
        goto condexpr_end_22;
        condexpr_false_22:;
        CHECK_OBJECT(tmp_class_creation_11__bases);
        tmp_truth_name_12 = CHECK_IF_TRUE(tmp_class_creation_11__bases);
        if (tmp_truth_name_12 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;

            goto try_except_handler_32;
        }
        tmp_condition_result_63 = tmp_truth_name_12 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_63 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_23;
        } else {
            goto condexpr_false_23;
        }
        condexpr_true_23:;
        CHECK_OBJECT(tmp_class_creation_11__bases);
        tmp_expression_value_188 = tmp_class_creation_11__bases;
        tmp_subscript_value_11 = mod_consts[29];
        tmp_type_arg_21 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_188, tmp_subscript_value_11, 0);
        if (tmp_type_arg_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;

            goto try_except_handler_32;
        }
        tmp_metaclass_value_11 = BUILTIN_TYPE1(tmp_type_arg_21);
        Py_DECREF(tmp_type_arg_21);
        if (tmp_metaclass_value_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;

            goto try_except_handler_32;
        }
        goto condexpr_end_23;
        condexpr_false_23:;
        tmp_metaclass_value_11 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_11);
        condexpr_end_23:;
        condexpr_end_22:;
        CHECK_OBJECT(tmp_class_creation_11__bases);
        tmp_bases_value_11 = tmp_class_creation_11__bases;
        tmp_assign_source_173 = SELECT_METACLASS(tmp_metaclass_value_11, tmp_bases_value_11);
        Py_DECREF(tmp_metaclass_value_11);
        if (tmp_assign_source_173 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;

            goto try_except_handler_32;
        }
        assert(tmp_class_creation_11__metaclass == NULL);
        tmp_class_creation_11__metaclass = tmp_assign_source_173;
    }
    {
        bool tmp_condition_result_64;
        PyObject *tmp_key_value_33;
        PyObject *tmp_dict_arg_value_33;
        tmp_key_value_33 = mod_consts[44];
        CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
        tmp_dict_arg_value_33 = tmp_class_creation_11__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_33, tmp_key_value_33);
        assert(!(tmp_res == -1));
        tmp_condition_result_64 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_64 != false) {
            goto branch_yes_41;
        } else {
            goto branch_no_41;
        }
    }
    branch_yes_41:;
    CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_11__class_decl_dict;
    tmp_dictdel_key = mod_consts[44];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 284;

        goto try_except_handler_32;
    }
    branch_no_41:;
    {
        nuitka_bool tmp_condition_result_65;
        PyObject *tmp_expression_value_189;
        CHECK_OBJECT(tmp_class_creation_11__metaclass);
        tmp_expression_value_189 = tmp_class_creation_11__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_189, mod_consts[45]);
        tmp_condition_result_65 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_65 == NUITKA_BOOL_TRUE) {
            goto branch_yes_42;
        } else {
            goto branch_no_42;
        }
    }
    branch_yes_42:;
    {
        PyObject *tmp_assign_source_174;
        PyObject *tmp_called_value_33;
        PyObject *tmp_expression_value_190;
        PyObject *tmp_args_value_21;
        PyObject *tmp_tuple_element_114;
        PyObject *tmp_kwargs_value_21;
        CHECK_OBJECT(tmp_class_creation_11__metaclass);
        tmp_expression_value_190 = tmp_class_creation_11__metaclass;
        tmp_called_value_33 = LOOKUP_ATTRIBUTE(tmp_expression_value_190, mod_consts[45]);
        if (tmp_called_value_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;

            goto try_except_handler_32;
        }
        tmp_tuple_element_114 = mod_consts[217];
        tmp_args_value_21 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_21, 0, tmp_tuple_element_114);
        CHECK_OBJECT(tmp_class_creation_11__bases);
        tmp_tuple_element_114 = tmp_class_creation_11__bases;
        PyTuple_SET_ITEM0(tmp_args_value_21, 1, tmp_tuple_element_114);
        CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
        tmp_kwargs_value_21 = tmp_class_creation_11__class_decl_dict;
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 284;
        tmp_assign_source_174 = CALL_FUNCTION(tmp_called_value_33, tmp_args_value_21, tmp_kwargs_value_21);
        Py_DECREF(tmp_called_value_33);
        Py_DECREF(tmp_args_value_21);
        if (tmp_assign_source_174 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;

            goto try_except_handler_32;
        }
        assert(tmp_class_creation_11__prepared == NULL);
        tmp_class_creation_11__prepared = tmp_assign_source_174;
    }
    {
        bool tmp_condition_result_66;
        PyObject *tmp_operand_value_11;
        PyObject *tmp_expression_value_191;
        CHECK_OBJECT(tmp_class_creation_11__prepared);
        tmp_expression_value_191 = tmp_class_creation_11__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_191, mod_consts[47]);
        tmp_operand_value_11 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_11);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;

            goto try_except_handler_32;
        }
        tmp_condition_result_66 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_66 != false) {
            goto branch_yes_43;
        } else {
            goto branch_no_43;
        }
    }
    branch_yes_43:;
    {
        PyObject *tmp_raise_type_11;
        PyObject *tmp_raise_value_11;
        PyObject *tmp_left_value_17;
        PyObject *tmp_right_value_17;
        PyObject *tmp_tuple_element_115;
        PyObject *tmp_getattr_target_11;
        PyObject *tmp_getattr_attr_11;
        PyObject *tmp_getattr_default_11;
        tmp_raise_type_11 = PyExc_TypeError;
        tmp_left_value_17 = mod_consts[48];
        CHECK_OBJECT(tmp_class_creation_11__metaclass);
        tmp_getattr_target_11 = tmp_class_creation_11__metaclass;
        tmp_getattr_attr_11 = mod_consts[15];
        tmp_getattr_default_11 = mod_consts[49];
        tmp_tuple_element_115 = BUILTIN_GETATTR(tmp_getattr_target_11, tmp_getattr_attr_11, tmp_getattr_default_11);
        if (tmp_tuple_element_115 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;

            goto try_except_handler_32;
        }
        tmp_right_value_17 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_192;
            PyObject *tmp_type_arg_22;
            PyTuple_SET_ITEM(tmp_right_value_17, 0, tmp_tuple_element_115);
            CHECK_OBJECT(tmp_class_creation_11__prepared);
            tmp_type_arg_22 = tmp_class_creation_11__prepared;
            tmp_expression_value_192 = BUILTIN_TYPE1(tmp_type_arg_22);
            assert(!(tmp_expression_value_192 == NULL));
            tmp_tuple_element_115 = LOOKUP_ATTRIBUTE(tmp_expression_value_192, mod_consts[15]);
            Py_DECREF(tmp_expression_value_192);
            if (tmp_tuple_element_115 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 284;

                goto tuple_build_exception_83;
            }
            PyTuple_SET_ITEM(tmp_right_value_17, 1, tmp_tuple_element_115);
        }
        goto tuple_build_noexception_83;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_83:;
        Py_DECREF(tmp_right_value_17);
        goto try_except_handler_32;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_83:;
        tmp_raise_value_11 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_17, tmp_right_value_17);
        Py_DECREF(tmp_right_value_17);
        if (tmp_raise_value_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;

            goto try_except_handler_32;
        }
        exception_type = tmp_raise_type_11;
        Py_INCREF(tmp_raise_type_11);
        exception_value = tmp_raise_value_11;
        exception_lineno = 284;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_32;
    }
    branch_no_43:;
    goto branch_end_42;
    branch_no_42:;
    {
        PyObject *tmp_assign_source_175;
        tmp_assign_source_175 = PyDict_New();
        assert(tmp_class_creation_11__prepared == NULL);
        tmp_class_creation_11__prepared = tmp_assign_source_175;
    }
    branch_end_42:;
    {
        PyObject *tmp_assign_source_176;
        {
            PyObject *tmp_set_locals_11;
            CHECK_OBJECT(tmp_class_creation_11__prepared);
            tmp_set_locals_11 = tmp_class_creation_11__prepared;
            locals_numba$roc$hsadrv$drvapi$$$class__11_hsa_ext_image_format_t_284 = tmp_set_locals_11;
            Py_INCREF(tmp_set_locals_11);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__11_hsa_ext_image_format_t_284, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;

            goto try_except_handler_34;
        }
        tmp_dictset_value = mod_consts[217];
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__11_hsa_ext_image_format_t_284, mod_consts[52], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;

            goto try_except_handler_34;
        }
        if (isFrameUnusable(cache_frame_bb8128588c1f0f62d387274ecc3aca59_12)) {
            Py_XDECREF(cache_frame_bb8128588c1f0f62d387274ecc3aca59_12);

#if _DEBUG_REFCOUNTS
            if (cache_frame_bb8128588c1f0f62d387274ecc3aca59_12 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_bb8128588c1f0f62d387274ecc3aca59_12 = MAKE_FUNCTION_FRAME(codeobj_bb8128588c1f0f62d387274ecc3aca59, module_numba$roc$hsadrv$drvapi, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_bb8128588c1f0f62d387274ecc3aca59_12->m_type_description == NULL);
        frame_bb8128588c1f0f62d387274ecc3aca59_12 = cache_frame_bb8128588c1f0f62d387274ecc3aca59_12;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_bb8128588c1f0f62d387274ecc3aca59_12);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_bb8128588c1f0f62d387274ecc3aca59_12) == 2); // Frame stack

        // Framed code:
        {
            PyObject *tmp_list_element_11;
            PyObject *tmp_tuple_element_116;
            tmp_tuple_element_116 = mod_consts[218];
            tmp_list_element_11 = PyTuple_New(2);
            PyTuple_SET_ITEM0(tmp_list_element_11, 0, tmp_tuple_element_116);
            tmp_tuple_element_116 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__11_hsa_ext_image_format_t_284, mod_consts[215]);

            if (tmp_tuple_element_116 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_tuple_element_116 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[215]);

                    if (unlikely(tmp_tuple_element_116 == NULL)) {
                        tmp_tuple_element_116 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[215]);
                    }

                    if (tmp_tuple_element_116 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 286;
                        type_description_2 = "o";
                        goto tuple_build_exception_84;
                    }
                    Py_INCREF(tmp_tuple_element_116);
                } else {
                    goto tuple_build_exception_84;
                }
            }

            PyTuple_SET_ITEM(tmp_list_element_11, 1, tmp_tuple_element_116);
            goto tuple_build_noexception_84;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_84:;
            Py_DECREF(tmp_list_element_11);
            goto frame_exception_exit_12;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_84:;
            tmp_dictset_value = PyList_New(2);
            {
                PyObject *tmp_tuple_element_117;
                PyList_SET_ITEM(tmp_dictset_value, 0, tmp_list_element_11);
                tmp_tuple_element_117 = mod_consts[219];
                tmp_list_element_11 = PyTuple_New(2);
                PyTuple_SET_ITEM0(tmp_list_element_11, 0, tmp_tuple_element_117);
                tmp_tuple_element_117 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__11_hsa_ext_image_format_t_284, mod_consts[216]);

                if (tmp_tuple_element_117 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_tuple_element_117 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[216]);

                        if (unlikely(tmp_tuple_element_117 == NULL)) {
                            tmp_tuple_element_117 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[216]);
                        }

                        if (tmp_tuple_element_117 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 287;
                            type_description_2 = "o";
                            goto tuple_build_exception_85;
                        }
                        Py_INCREF(tmp_tuple_element_117);
                    } else {
                        goto tuple_build_exception_85;
                    }
                }

                PyTuple_SET_ITEM(tmp_list_element_11, 1, tmp_tuple_element_117);
                goto tuple_build_noexception_85;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_85:;
                Py_DECREF(tmp_list_element_11);
                goto list_build_exception_11;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_85:;
                PyList_SET_ITEM(tmp_dictset_value, 1, tmp_list_element_11);
            }
            goto list_build_noexception_11;
            // Exception handling pass through code for list_build:
            list_build_exception_11:;
            Py_DECREF(tmp_dictset_value);
            goto frame_exception_exit_12;
            // Finished with no exception for list_build:
            list_build_noexception_11:;
            tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__11_hsa_ext_image_format_t_284, mod_consts[57], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 285;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_bb8128588c1f0f62d387274ecc3aca59_12);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_11;

        frame_exception_exit_12:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_bb8128588c1f0f62d387274ecc3aca59_12);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_bb8128588c1f0f62d387274ecc3aca59_12, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_bb8128588c1f0f62d387274ecc3aca59_12->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_bb8128588c1f0f62d387274ecc3aca59_12, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_bb8128588c1f0f62d387274ecc3aca59_12,
            type_description_2,
            outline_10_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_bb8128588c1f0f62d387274ecc3aca59_12 == cache_frame_bb8128588c1f0f62d387274ecc3aca59_12) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_bb8128588c1f0f62d387274ecc3aca59_12);
            cache_frame_bb8128588c1f0f62d387274ecc3aca59_12 = NULL;
        }

        assertFrameObject(frame_bb8128588c1f0f62d387274ecc3aca59_12);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_11;

        frame_no_exception_11:;
        goto skip_nested_handling_11;
        nested_frame_exit_11:;

        goto try_except_handler_34;
        skip_nested_handling_11:;
        {
            nuitka_bool tmp_condition_result_67;
            PyObject *tmp_cmp_expr_left_11;
            PyObject *tmp_cmp_expr_right_11;
            CHECK_OBJECT(tmp_class_creation_11__bases);
            tmp_cmp_expr_left_11 = tmp_class_creation_11__bases;
            CHECK_OBJECT(tmp_class_creation_11__bases_orig);
            tmp_cmp_expr_right_11 = tmp_class_creation_11__bases_orig;
            tmp_condition_result_67 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_11, tmp_cmp_expr_right_11);
            if (tmp_condition_result_67 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 284;

                goto try_except_handler_34;
            }
            if (tmp_condition_result_67 == NUITKA_BOOL_TRUE) {
                goto branch_yes_44;
            } else {
                goto branch_no_44;
            }
            assert(tmp_condition_result_67 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_44:;
        CHECK_OBJECT(tmp_class_creation_11__bases_orig);
        tmp_dictset_value = tmp_class_creation_11__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__11_hsa_ext_image_format_t_284, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;

            goto try_except_handler_34;
        }
        branch_no_44:;
        {
            PyObject *tmp_assign_source_177;
            PyObject *tmp_called_value_34;
            PyObject *tmp_args_value_22;
            PyObject *tmp_tuple_element_118;
            PyObject *tmp_kwargs_value_22;
            CHECK_OBJECT(tmp_class_creation_11__metaclass);
            tmp_called_value_34 = tmp_class_creation_11__metaclass;
            tmp_tuple_element_118 = mod_consts[217];
            tmp_args_value_22 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_22, 0, tmp_tuple_element_118);
            CHECK_OBJECT(tmp_class_creation_11__bases);
            tmp_tuple_element_118 = tmp_class_creation_11__bases;
            PyTuple_SET_ITEM0(tmp_args_value_22, 1, tmp_tuple_element_118);
            tmp_tuple_element_118 = locals_numba$roc$hsadrv$drvapi$$$class__11_hsa_ext_image_format_t_284;
            PyTuple_SET_ITEM0(tmp_args_value_22, 2, tmp_tuple_element_118);
            CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
            tmp_kwargs_value_22 = tmp_class_creation_11__class_decl_dict;
            frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 284;
            tmp_assign_source_177 = CALL_FUNCTION(tmp_called_value_34, tmp_args_value_22, tmp_kwargs_value_22);
            Py_DECREF(tmp_args_value_22);
            if (tmp_assign_source_177 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 284;

                goto try_except_handler_34;
            }
            assert(outline_10_var___class__ == NULL);
            outline_10_var___class__ = tmp_assign_source_177;
        }
        CHECK_OBJECT(outline_10_var___class__);
        tmp_assign_source_176 = outline_10_var___class__;
        Py_INCREF(tmp_assign_source_176);
        goto try_return_handler_34;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_34:;
        Py_DECREF(locals_numba$roc$hsadrv$drvapi$$$class__11_hsa_ext_image_format_t_284);
        locals_numba$roc$hsadrv$drvapi$$$class__11_hsa_ext_image_format_t_284 = NULL;
        goto try_return_handler_33;
        // Exception handler code:
        try_except_handler_34:;
        exception_keeper_type_32 = exception_type;
        exception_keeper_value_32 = exception_value;
        exception_keeper_tb_32 = exception_tb;
        exception_keeper_lineno_32 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$roc$hsadrv$drvapi$$$class__11_hsa_ext_image_format_t_284);
        locals_numba$roc$hsadrv$drvapi$$$class__11_hsa_ext_image_format_t_284 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_32;
        exception_value = exception_keeper_value_32;
        exception_tb = exception_keeper_tb_32;
        exception_lineno = exception_keeper_lineno_32;

        goto try_except_handler_33;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_33:;
        CHECK_OBJECT(outline_10_var___class__);
        Py_DECREF(outline_10_var___class__);
        outline_10_var___class__ = NULL;
        goto outline_result_11;
        // Exception handler code:
        try_except_handler_33:;
        exception_keeper_type_33 = exception_type;
        exception_keeper_value_33 = exception_value;
        exception_keeper_tb_33 = exception_tb;
        exception_keeper_lineno_33 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_33;
        exception_value = exception_keeper_value_33;
        exception_tb = exception_keeper_tb_33;
        exception_lineno = exception_keeper_lineno_33;

        goto outline_exception_11;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_11:;
        exception_lineno = 284;
        goto try_except_handler_32;
        outline_result_11:;
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[217], tmp_assign_source_176);
    }
    goto try_end_12;
    // Exception handler code:
    try_except_handler_32:;
    exception_keeper_type_34 = exception_type;
    exception_keeper_value_34 = exception_value;
    exception_keeper_tb_34 = exception_tb;
    exception_keeper_lineno_34 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_11__bases_orig);
    tmp_class_creation_11__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_11__bases);
    tmp_class_creation_11__bases = NULL;
    Py_XDECREF(tmp_class_creation_11__class_decl_dict);
    tmp_class_creation_11__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_11__metaclass);
    tmp_class_creation_11__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_11__prepared);
    tmp_class_creation_11__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_34;
    exception_value = exception_keeper_value_34;
    exception_tb = exception_keeper_tb_34;
    exception_lineno = exception_keeper_lineno_34;

    goto frame_exception_exit_1;
    // End of try:
    try_end_12:;
    CHECK_OBJECT(tmp_class_creation_11__bases_orig);
    Py_DECREF(tmp_class_creation_11__bases_orig);
    tmp_class_creation_11__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_11__bases);
    Py_DECREF(tmp_class_creation_11__bases);
    tmp_class_creation_11__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
    Py_DECREF(tmp_class_creation_11__class_decl_dict);
    tmp_class_creation_11__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_11__metaclass);
    Py_DECREF(tmp_class_creation_11__metaclass);
    tmp_class_creation_11__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_11__prepared);
    Py_DECREF(tmp_class_creation_11__prepared);
    tmp_class_creation_11__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_178;
        PyObject *tmp_tuple_element_119;
        PyObject *tmp_expression_value_193;
        tmp_expression_value_193 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_193 == NULL)) {
            tmp_expression_value_193 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_193 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 290;

            goto try_except_handler_35;
        }
        tmp_tuple_element_119 = LOOKUP_ATTRIBUTE(tmp_expression_value_193, mod_consts[43]);
        if (tmp_tuple_element_119 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 290;

            goto try_except_handler_35;
        }
        tmp_assign_source_178 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_assign_source_178, 0, tmp_tuple_element_119);
        assert(tmp_class_creation_12__bases_orig == NULL);
        tmp_class_creation_12__bases_orig = tmp_assign_source_178;
    }
    {
        PyObject *tmp_assign_source_179;
        PyObject *tmp_dircall_arg1_12;
        CHECK_OBJECT(tmp_class_creation_12__bases_orig);
        tmp_dircall_arg1_12 = tmp_class_creation_12__bases_orig;
        Py_INCREF(tmp_dircall_arg1_12);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_12};
            tmp_assign_source_179 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_179 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 290;

            goto try_except_handler_35;
        }
        assert(tmp_class_creation_12__bases == NULL);
        tmp_class_creation_12__bases = tmp_assign_source_179;
    }
    {
        PyObject *tmp_assign_source_180;
        tmp_assign_source_180 = PyDict_New();
        assert(tmp_class_creation_12__class_decl_dict == NULL);
        tmp_class_creation_12__class_decl_dict = tmp_assign_source_180;
    }
    {
        PyObject *tmp_assign_source_181;
        PyObject *tmp_metaclass_value_12;
        bool tmp_condition_result_68;
        PyObject *tmp_key_value_34;
        PyObject *tmp_dict_arg_value_34;
        PyObject *tmp_dict_arg_value_35;
        PyObject *tmp_key_value_35;
        nuitka_bool tmp_condition_result_69;
        int tmp_truth_name_13;
        PyObject *tmp_type_arg_23;
        PyObject *tmp_expression_value_194;
        PyObject *tmp_subscript_value_12;
        PyObject *tmp_bases_value_12;
        tmp_key_value_34 = mod_consts[44];
        CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
        tmp_dict_arg_value_34 = tmp_class_creation_12__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_34, tmp_key_value_34);
        assert(!(tmp_res == -1));
        tmp_condition_result_68 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_68 != false) {
            goto condexpr_true_24;
        } else {
            goto condexpr_false_24;
        }
        condexpr_true_24:;
        CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
        tmp_dict_arg_value_35 = tmp_class_creation_12__class_decl_dict;
        tmp_key_value_35 = mod_consts[44];
        tmp_metaclass_value_12 = DICT_GET_ITEM0(tmp_dict_arg_value_35, tmp_key_value_35);
        if (tmp_metaclass_value_12 == NULL) {
            tmp_metaclass_value_12 = Py_None;
        }
        assert(!(tmp_metaclass_value_12 == NULL));
        Py_INCREF(tmp_metaclass_value_12);
        goto condexpr_end_24;
        condexpr_false_24:;
        CHECK_OBJECT(tmp_class_creation_12__bases);
        tmp_truth_name_13 = CHECK_IF_TRUE(tmp_class_creation_12__bases);
        if (tmp_truth_name_13 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 290;

            goto try_except_handler_35;
        }
        tmp_condition_result_69 = tmp_truth_name_13 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_69 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_25;
        } else {
            goto condexpr_false_25;
        }
        condexpr_true_25:;
        CHECK_OBJECT(tmp_class_creation_12__bases);
        tmp_expression_value_194 = tmp_class_creation_12__bases;
        tmp_subscript_value_12 = mod_consts[29];
        tmp_type_arg_23 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_194, tmp_subscript_value_12, 0);
        if (tmp_type_arg_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 290;

            goto try_except_handler_35;
        }
        tmp_metaclass_value_12 = BUILTIN_TYPE1(tmp_type_arg_23);
        Py_DECREF(tmp_type_arg_23);
        if (tmp_metaclass_value_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 290;

            goto try_except_handler_35;
        }
        goto condexpr_end_25;
        condexpr_false_25:;
        tmp_metaclass_value_12 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_12);
        condexpr_end_25:;
        condexpr_end_24:;
        CHECK_OBJECT(tmp_class_creation_12__bases);
        tmp_bases_value_12 = tmp_class_creation_12__bases;
        tmp_assign_source_181 = SELECT_METACLASS(tmp_metaclass_value_12, tmp_bases_value_12);
        Py_DECREF(tmp_metaclass_value_12);
        if (tmp_assign_source_181 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 290;

            goto try_except_handler_35;
        }
        assert(tmp_class_creation_12__metaclass == NULL);
        tmp_class_creation_12__metaclass = tmp_assign_source_181;
    }
    {
        bool tmp_condition_result_70;
        PyObject *tmp_key_value_36;
        PyObject *tmp_dict_arg_value_36;
        tmp_key_value_36 = mod_consts[44];
        CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
        tmp_dict_arg_value_36 = tmp_class_creation_12__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_36, tmp_key_value_36);
        assert(!(tmp_res == -1));
        tmp_condition_result_70 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_70 != false) {
            goto branch_yes_45;
        } else {
            goto branch_no_45;
        }
    }
    branch_yes_45:;
    CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_12__class_decl_dict;
    tmp_dictdel_key = mod_consts[44];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 290;

        goto try_except_handler_35;
    }
    branch_no_45:;
    {
        nuitka_bool tmp_condition_result_71;
        PyObject *tmp_expression_value_195;
        CHECK_OBJECT(tmp_class_creation_12__metaclass);
        tmp_expression_value_195 = tmp_class_creation_12__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_195, mod_consts[45]);
        tmp_condition_result_71 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_71 == NUITKA_BOOL_TRUE) {
            goto branch_yes_46;
        } else {
            goto branch_no_46;
        }
    }
    branch_yes_46:;
    {
        PyObject *tmp_assign_source_182;
        PyObject *tmp_called_value_35;
        PyObject *tmp_expression_value_196;
        PyObject *tmp_args_value_23;
        PyObject *tmp_tuple_element_120;
        PyObject *tmp_kwargs_value_23;
        CHECK_OBJECT(tmp_class_creation_12__metaclass);
        tmp_expression_value_196 = tmp_class_creation_12__metaclass;
        tmp_called_value_35 = LOOKUP_ATTRIBUTE(tmp_expression_value_196, mod_consts[45]);
        if (tmp_called_value_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 290;

            goto try_except_handler_35;
        }
        tmp_tuple_element_120 = mod_consts[220];
        tmp_args_value_23 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_23, 0, tmp_tuple_element_120);
        CHECK_OBJECT(tmp_class_creation_12__bases);
        tmp_tuple_element_120 = tmp_class_creation_12__bases;
        PyTuple_SET_ITEM0(tmp_args_value_23, 1, tmp_tuple_element_120);
        CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
        tmp_kwargs_value_23 = tmp_class_creation_12__class_decl_dict;
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 290;
        tmp_assign_source_182 = CALL_FUNCTION(tmp_called_value_35, tmp_args_value_23, tmp_kwargs_value_23);
        Py_DECREF(tmp_called_value_35);
        Py_DECREF(tmp_args_value_23);
        if (tmp_assign_source_182 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 290;

            goto try_except_handler_35;
        }
        assert(tmp_class_creation_12__prepared == NULL);
        tmp_class_creation_12__prepared = tmp_assign_source_182;
    }
    {
        bool tmp_condition_result_72;
        PyObject *tmp_operand_value_12;
        PyObject *tmp_expression_value_197;
        CHECK_OBJECT(tmp_class_creation_12__prepared);
        tmp_expression_value_197 = tmp_class_creation_12__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_197, mod_consts[47]);
        tmp_operand_value_12 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_12);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 290;

            goto try_except_handler_35;
        }
        tmp_condition_result_72 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_72 != false) {
            goto branch_yes_47;
        } else {
            goto branch_no_47;
        }
    }
    branch_yes_47:;
    {
        PyObject *tmp_raise_type_12;
        PyObject *tmp_raise_value_12;
        PyObject *tmp_left_value_18;
        PyObject *tmp_right_value_18;
        PyObject *tmp_tuple_element_121;
        PyObject *tmp_getattr_target_12;
        PyObject *tmp_getattr_attr_12;
        PyObject *tmp_getattr_default_12;
        tmp_raise_type_12 = PyExc_TypeError;
        tmp_left_value_18 = mod_consts[48];
        CHECK_OBJECT(tmp_class_creation_12__metaclass);
        tmp_getattr_target_12 = tmp_class_creation_12__metaclass;
        tmp_getattr_attr_12 = mod_consts[15];
        tmp_getattr_default_12 = mod_consts[49];
        tmp_tuple_element_121 = BUILTIN_GETATTR(tmp_getattr_target_12, tmp_getattr_attr_12, tmp_getattr_default_12);
        if (tmp_tuple_element_121 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 290;

            goto try_except_handler_35;
        }
        tmp_right_value_18 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_198;
            PyObject *tmp_type_arg_24;
            PyTuple_SET_ITEM(tmp_right_value_18, 0, tmp_tuple_element_121);
            CHECK_OBJECT(tmp_class_creation_12__prepared);
            tmp_type_arg_24 = tmp_class_creation_12__prepared;
            tmp_expression_value_198 = BUILTIN_TYPE1(tmp_type_arg_24);
            assert(!(tmp_expression_value_198 == NULL));
            tmp_tuple_element_121 = LOOKUP_ATTRIBUTE(tmp_expression_value_198, mod_consts[15]);
            Py_DECREF(tmp_expression_value_198);
            if (tmp_tuple_element_121 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 290;

                goto tuple_build_exception_86;
            }
            PyTuple_SET_ITEM(tmp_right_value_18, 1, tmp_tuple_element_121);
        }
        goto tuple_build_noexception_86;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_86:;
        Py_DECREF(tmp_right_value_18);
        goto try_except_handler_35;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_86:;
        tmp_raise_value_12 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_18, tmp_right_value_18);
        Py_DECREF(tmp_right_value_18);
        if (tmp_raise_value_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 290;

            goto try_except_handler_35;
        }
        exception_type = tmp_raise_type_12;
        Py_INCREF(tmp_raise_type_12);
        exception_value = tmp_raise_value_12;
        exception_lineno = 290;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_35;
    }
    branch_no_47:;
    goto branch_end_46;
    branch_no_46:;
    {
        PyObject *tmp_assign_source_183;
        tmp_assign_source_183 = PyDict_New();
        assert(tmp_class_creation_12__prepared == NULL);
        tmp_class_creation_12__prepared = tmp_assign_source_183;
    }
    branch_end_46:;
    {
        PyObject *tmp_assign_source_184;
        {
            PyObject *tmp_set_locals_12;
            CHECK_OBJECT(tmp_class_creation_12__prepared);
            tmp_set_locals_12 = tmp_class_creation_12__prepared;
            locals_numba$roc$hsadrv$drvapi$$$class__12_hsa_ext_image_descriptor_t_290 = tmp_set_locals_12;
            Py_INCREF(tmp_set_locals_12);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__12_hsa_ext_image_descriptor_t_290, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 290;

            goto try_except_handler_37;
        }
        tmp_dictset_value = mod_consts[220];
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__12_hsa_ext_image_descriptor_t_290, mod_consts[52], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 290;

            goto try_except_handler_37;
        }
        if (isFrameUnusable(cache_frame_16704068b6246c21baeae1cb7753c931_13)) {
            Py_XDECREF(cache_frame_16704068b6246c21baeae1cb7753c931_13);

#if _DEBUG_REFCOUNTS
            if (cache_frame_16704068b6246c21baeae1cb7753c931_13 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_16704068b6246c21baeae1cb7753c931_13 = MAKE_FUNCTION_FRAME(codeobj_16704068b6246c21baeae1cb7753c931, module_numba$roc$hsadrv$drvapi, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_16704068b6246c21baeae1cb7753c931_13->m_type_description == NULL);
        frame_16704068b6246c21baeae1cb7753c931_13 = cache_frame_16704068b6246c21baeae1cb7753c931_13;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_16704068b6246c21baeae1cb7753c931_13);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_16704068b6246c21baeae1cb7753c931_13) == 2); // Frame stack

        // Framed code:
        {
            PyObject *tmp_list_element_12;
            PyObject *tmp_tuple_element_122;
            tmp_tuple_element_122 = mod_consts[221];
            tmp_list_element_12 = PyTuple_New(2);
            PyTuple_SET_ITEM0(tmp_list_element_12, 0, tmp_tuple_element_122);
            tmp_tuple_element_122 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__12_hsa_ext_image_descriptor_t_290, mod_consts[214]);

            if (tmp_tuple_element_122 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_tuple_element_122 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[214]);

                    if (unlikely(tmp_tuple_element_122 == NULL)) {
                        tmp_tuple_element_122 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[214]);
                    }

                    if (tmp_tuple_element_122 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 292;
                        type_description_2 = "o";
                        goto tuple_build_exception_87;
                    }
                    Py_INCREF(tmp_tuple_element_122);
                } else {
                    goto tuple_build_exception_87;
                }
            }

            PyTuple_SET_ITEM(tmp_list_element_12, 1, tmp_tuple_element_122);
            goto tuple_build_noexception_87;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_87:;
            Py_DECREF(tmp_list_element_12);
            goto frame_exception_exit_13;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_87:;
            tmp_dictset_value = PyList_New(6);
            {
                PyObject *tmp_tuple_element_123;
                PyObject *tmp_tuple_element_124;
                PyObject *tmp_tuple_element_125;
                PyObject *tmp_tuple_element_126;
                PyObject *tmp_tuple_element_127;
                PyList_SET_ITEM(tmp_dictset_value, 0, tmp_list_element_12);
                tmp_tuple_element_123 = mod_consts[222];
                tmp_list_element_12 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_199;
                    PyTuple_SET_ITEM0(tmp_list_element_12, 0, tmp_tuple_element_123);
                    tmp_expression_value_199 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__12_hsa_ext_image_descriptor_t_290, mod_consts[28]);

                    if (tmp_expression_value_199 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_199 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_199 == NULL)) {
                                tmp_expression_value_199 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_199 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 293;
                                type_description_2 = "o";
                                goto tuple_build_exception_88;
                            }
                            Py_INCREF(tmp_expression_value_199);
                        } else {
                            goto tuple_build_exception_88;
                        }
                    }

                    tmp_tuple_element_123 = LOOKUP_ATTRIBUTE(tmp_expression_value_199, mod_consts[223]);
                    Py_DECREF(tmp_expression_value_199);
                    if (tmp_tuple_element_123 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 293;
                        type_description_2 = "o";
                        goto tuple_build_exception_88;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_12, 1, tmp_tuple_element_123);
                }
                goto tuple_build_noexception_88;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_88:;
                Py_DECREF(tmp_list_element_12);
                goto list_build_exception_12;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_88:;
                PyList_SET_ITEM(tmp_dictset_value, 1, tmp_list_element_12);
                tmp_tuple_element_124 = mod_consts[224];
                tmp_list_element_12 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_200;
                    PyTuple_SET_ITEM0(tmp_list_element_12, 0, tmp_tuple_element_124);
                    tmp_expression_value_200 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__12_hsa_ext_image_descriptor_t_290, mod_consts[28]);

                    if (tmp_expression_value_200 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_200 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_200 == NULL)) {
                                tmp_expression_value_200 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_200 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 294;
                                type_description_2 = "o";
                                goto tuple_build_exception_89;
                            }
                            Py_INCREF(tmp_expression_value_200);
                        } else {
                            goto tuple_build_exception_89;
                        }
                    }

                    tmp_tuple_element_124 = LOOKUP_ATTRIBUTE(tmp_expression_value_200, mod_consts[223]);
                    Py_DECREF(tmp_expression_value_200);
                    if (tmp_tuple_element_124 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 294;
                        type_description_2 = "o";
                        goto tuple_build_exception_89;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_12, 1, tmp_tuple_element_124);
                }
                goto tuple_build_noexception_89;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_89:;
                Py_DECREF(tmp_list_element_12);
                goto list_build_exception_12;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_89:;
                PyList_SET_ITEM(tmp_dictset_value, 2, tmp_list_element_12);
                tmp_tuple_element_125 = mod_consts[225];
                tmp_list_element_12 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_201;
                    PyTuple_SET_ITEM0(tmp_list_element_12, 0, tmp_tuple_element_125);
                    tmp_expression_value_201 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__12_hsa_ext_image_descriptor_t_290, mod_consts[28]);

                    if (tmp_expression_value_201 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_201 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_201 == NULL)) {
                                tmp_expression_value_201 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_201 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 295;
                                type_description_2 = "o";
                                goto tuple_build_exception_90;
                            }
                            Py_INCREF(tmp_expression_value_201);
                        } else {
                            goto tuple_build_exception_90;
                        }
                    }

                    tmp_tuple_element_125 = LOOKUP_ATTRIBUTE(tmp_expression_value_201, mod_consts[223]);
                    Py_DECREF(tmp_expression_value_201);
                    if (tmp_tuple_element_125 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 295;
                        type_description_2 = "o";
                        goto tuple_build_exception_90;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_12, 1, tmp_tuple_element_125);
                }
                goto tuple_build_noexception_90;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_90:;
                Py_DECREF(tmp_list_element_12);
                goto list_build_exception_12;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_90:;
                PyList_SET_ITEM(tmp_dictset_value, 3, tmp_list_element_12);
                tmp_tuple_element_126 = mod_consts[226];
                tmp_list_element_12 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_202;
                    PyTuple_SET_ITEM0(tmp_list_element_12, 0, tmp_tuple_element_126);
                    tmp_expression_value_202 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__12_hsa_ext_image_descriptor_t_290, mod_consts[28]);

                    if (tmp_expression_value_202 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_202 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_202 == NULL)) {
                                tmp_expression_value_202 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_202 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 296;
                                type_description_2 = "o";
                                goto tuple_build_exception_91;
                            }
                            Py_INCREF(tmp_expression_value_202);
                        } else {
                            goto tuple_build_exception_91;
                        }
                    }

                    tmp_tuple_element_126 = LOOKUP_ATTRIBUTE(tmp_expression_value_202, mod_consts[223]);
                    Py_DECREF(tmp_expression_value_202);
                    if (tmp_tuple_element_126 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 296;
                        type_description_2 = "o";
                        goto tuple_build_exception_91;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_12, 1, tmp_tuple_element_126);
                }
                goto tuple_build_noexception_91;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_91:;
                Py_DECREF(tmp_list_element_12);
                goto list_build_exception_12;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_91:;
                PyList_SET_ITEM(tmp_dictset_value, 4, tmp_list_element_12);
                tmp_tuple_element_127 = mod_consts[227];
                tmp_list_element_12 = PyTuple_New(2);
                PyTuple_SET_ITEM0(tmp_list_element_12, 0, tmp_tuple_element_127);
                tmp_tuple_element_127 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__12_hsa_ext_image_descriptor_t_290, mod_consts[217]);

                if (tmp_tuple_element_127 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_tuple_element_127 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[217]);

                        if (unlikely(tmp_tuple_element_127 == NULL)) {
                            tmp_tuple_element_127 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[217]);
                        }

                        if (tmp_tuple_element_127 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 297;
                            type_description_2 = "o";
                            goto tuple_build_exception_92;
                        }
                        Py_INCREF(tmp_tuple_element_127);
                    } else {
                        goto tuple_build_exception_92;
                    }
                }

                PyTuple_SET_ITEM(tmp_list_element_12, 1, tmp_tuple_element_127);
                goto tuple_build_noexception_92;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_92:;
                Py_DECREF(tmp_list_element_12);
                goto list_build_exception_12;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_92:;
                PyList_SET_ITEM(tmp_dictset_value, 5, tmp_list_element_12);
            }
            goto list_build_noexception_12;
            // Exception handling pass through code for list_build:
            list_build_exception_12:;
            Py_DECREF(tmp_dictset_value);
            goto frame_exception_exit_13;
            // Finished with no exception for list_build:
            list_build_noexception_12:;
            tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__12_hsa_ext_image_descriptor_t_290, mod_consts[57], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 291;
                type_description_2 = "o";
                goto frame_exception_exit_13;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_16704068b6246c21baeae1cb7753c931_13);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_12;

        frame_exception_exit_13:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_16704068b6246c21baeae1cb7753c931_13);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_16704068b6246c21baeae1cb7753c931_13, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_16704068b6246c21baeae1cb7753c931_13->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_16704068b6246c21baeae1cb7753c931_13, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_16704068b6246c21baeae1cb7753c931_13,
            type_description_2,
            outline_11_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_16704068b6246c21baeae1cb7753c931_13 == cache_frame_16704068b6246c21baeae1cb7753c931_13) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_16704068b6246c21baeae1cb7753c931_13);
            cache_frame_16704068b6246c21baeae1cb7753c931_13 = NULL;
        }

        assertFrameObject(frame_16704068b6246c21baeae1cb7753c931_13);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_12;

        frame_no_exception_12:;
        goto skip_nested_handling_12;
        nested_frame_exit_12:;

        goto try_except_handler_37;
        skip_nested_handling_12:;
        {
            nuitka_bool tmp_condition_result_73;
            PyObject *tmp_cmp_expr_left_12;
            PyObject *tmp_cmp_expr_right_12;
            CHECK_OBJECT(tmp_class_creation_12__bases);
            tmp_cmp_expr_left_12 = tmp_class_creation_12__bases;
            CHECK_OBJECT(tmp_class_creation_12__bases_orig);
            tmp_cmp_expr_right_12 = tmp_class_creation_12__bases_orig;
            tmp_condition_result_73 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_12, tmp_cmp_expr_right_12);
            if (tmp_condition_result_73 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 290;

                goto try_except_handler_37;
            }
            if (tmp_condition_result_73 == NUITKA_BOOL_TRUE) {
                goto branch_yes_48;
            } else {
                goto branch_no_48;
            }
            assert(tmp_condition_result_73 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_48:;
        CHECK_OBJECT(tmp_class_creation_12__bases_orig);
        tmp_dictset_value = tmp_class_creation_12__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__12_hsa_ext_image_descriptor_t_290, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 290;

            goto try_except_handler_37;
        }
        branch_no_48:;
        {
            PyObject *tmp_assign_source_185;
            PyObject *tmp_called_value_36;
            PyObject *tmp_args_value_24;
            PyObject *tmp_tuple_element_128;
            PyObject *tmp_kwargs_value_24;
            CHECK_OBJECT(tmp_class_creation_12__metaclass);
            tmp_called_value_36 = tmp_class_creation_12__metaclass;
            tmp_tuple_element_128 = mod_consts[220];
            tmp_args_value_24 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_24, 0, tmp_tuple_element_128);
            CHECK_OBJECT(tmp_class_creation_12__bases);
            tmp_tuple_element_128 = tmp_class_creation_12__bases;
            PyTuple_SET_ITEM0(tmp_args_value_24, 1, tmp_tuple_element_128);
            tmp_tuple_element_128 = locals_numba$roc$hsadrv$drvapi$$$class__12_hsa_ext_image_descriptor_t_290;
            PyTuple_SET_ITEM0(tmp_args_value_24, 2, tmp_tuple_element_128);
            CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
            tmp_kwargs_value_24 = tmp_class_creation_12__class_decl_dict;
            frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 290;
            tmp_assign_source_185 = CALL_FUNCTION(tmp_called_value_36, tmp_args_value_24, tmp_kwargs_value_24);
            Py_DECREF(tmp_args_value_24);
            if (tmp_assign_source_185 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 290;

                goto try_except_handler_37;
            }
            assert(outline_11_var___class__ == NULL);
            outline_11_var___class__ = tmp_assign_source_185;
        }
        CHECK_OBJECT(outline_11_var___class__);
        tmp_assign_source_184 = outline_11_var___class__;
        Py_INCREF(tmp_assign_source_184);
        goto try_return_handler_37;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_37:;
        Py_DECREF(locals_numba$roc$hsadrv$drvapi$$$class__12_hsa_ext_image_descriptor_t_290);
        locals_numba$roc$hsadrv$drvapi$$$class__12_hsa_ext_image_descriptor_t_290 = NULL;
        goto try_return_handler_36;
        // Exception handler code:
        try_except_handler_37:;
        exception_keeper_type_35 = exception_type;
        exception_keeper_value_35 = exception_value;
        exception_keeper_tb_35 = exception_tb;
        exception_keeper_lineno_35 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$roc$hsadrv$drvapi$$$class__12_hsa_ext_image_descriptor_t_290);
        locals_numba$roc$hsadrv$drvapi$$$class__12_hsa_ext_image_descriptor_t_290 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_35;
        exception_value = exception_keeper_value_35;
        exception_tb = exception_keeper_tb_35;
        exception_lineno = exception_keeper_lineno_35;

        goto try_except_handler_36;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_36:;
        CHECK_OBJECT(outline_11_var___class__);
        Py_DECREF(outline_11_var___class__);
        outline_11_var___class__ = NULL;
        goto outline_result_12;
        // Exception handler code:
        try_except_handler_36:;
        exception_keeper_type_36 = exception_type;
        exception_keeper_value_36 = exception_value;
        exception_keeper_tb_36 = exception_tb;
        exception_keeper_lineno_36 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_36;
        exception_value = exception_keeper_value_36;
        exception_tb = exception_keeper_tb_36;
        exception_lineno = exception_keeper_lineno_36;

        goto outline_exception_12;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_12:;
        exception_lineno = 290;
        goto try_except_handler_35;
        outline_result_12:;
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[220], tmp_assign_source_184);
    }
    goto try_end_13;
    // Exception handler code:
    try_except_handler_35:;
    exception_keeper_type_37 = exception_type;
    exception_keeper_value_37 = exception_value;
    exception_keeper_tb_37 = exception_tb;
    exception_keeper_lineno_37 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_12__bases_orig);
    tmp_class_creation_12__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_12__bases);
    tmp_class_creation_12__bases = NULL;
    Py_XDECREF(tmp_class_creation_12__class_decl_dict);
    tmp_class_creation_12__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_12__metaclass);
    tmp_class_creation_12__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_12__prepared);
    tmp_class_creation_12__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_37;
    exception_value = exception_keeper_value_37;
    exception_tb = exception_keeper_tb_37;
    exception_lineno = exception_keeper_lineno_37;

    goto frame_exception_exit_1;
    // End of try:
    try_end_13:;
    CHECK_OBJECT(tmp_class_creation_12__bases_orig);
    Py_DECREF(tmp_class_creation_12__bases_orig);
    tmp_class_creation_12__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_12__bases);
    Py_DECREF(tmp_class_creation_12__bases);
    tmp_class_creation_12__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
    Py_DECREF(tmp_class_creation_12__class_decl_dict);
    tmp_class_creation_12__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_12__metaclass);
    Py_DECREF(tmp_class_creation_12__metaclass);
    tmp_class_creation_12__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_12__prepared);
    Py_DECREF(tmp_class_creation_12__prepared);
    tmp_class_creation_12__prepared = NULL;
    {
        PyObject *tmp_assign_source_186;
        PyObject *tmp_expression_value_203;
        tmp_expression_value_203 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_203 == NULL)) {
            tmp_expression_value_203 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_203 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_186 = LOOKUP_ATTRIBUTE(tmp_expression_value_203, mod_consts[41]);
        if (tmp_assign_source_186 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[228], tmp_assign_source_186);
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_187;
        PyObject *tmp_tuple_element_129;
        PyObject *tmp_expression_value_204;
        tmp_expression_value_204 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_204 == NULL)) {
            tmp_expression_value_204 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_204 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 302;

            goto try_except_handler_38;
        }
        tmp_tuple_element_129 = LOOKUP_ATTRIBUTE(tmp_expression_value_204, mod_consts[43]);
        if (tmp_tuple_element_129 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 302;

            goto try_except_handler_38;
        }
        tmp_assign_source_187 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_assign_source_187, 0, tmp_tuple_element_129);
        assert(tmp_class_creation_13__bases_orig == NULL);
        tmp_class_creation_13__bases_orig = tmp_assign_source_187;
    }
    {
        PyObject *tmp_assign_source_188;
        PyObject *tmp_dircall_arg1_13;
        CHECK_OBJECT(tmp_class_creation_13__bases_orig);
        tmp_dircall_arg1_13 = tmp_class_creation_13__bases_orig;
        Py_INCREF(tmp_dircall_arg1_13);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_13};
            tmp_assign_source_188 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_188 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 302;

            goto try_except_handler_38;
        }
        assert(tmp_class_creation_13__bases == NULL);
        tmp_class_creation_13__bases = tmp_assign_source_188;
    }
    {
        PyObject *tmp_assign_source_189;
        tmp_assign_source_189 = PyDict_New();
        assert(tmp_class_creation_13__class_decl_dict == NULL);
        tmp_class_creation_13__class_decl_dict = tmp_assign_source_189;
    }
    {
        PyObject *tmp_assign_source_190;
        PyObject *tmp_metaclass_value_13;
        bool tmp_condition_result_74;
        PyObject *tmp_key_value_37;
        PyObject *tmp_dict_arg_value_37;
        PyObject *tmp_dict_arg_value_38;
        PyObject *tmp_key_value_38;
        nuitka_bool tmp_condition_result_75;
        int tmp_truth_name_14;
        PyObject *tmp_type_arg_25;
        PyObject *tmp_expression_value_205;
        PyObject *tmp_subscript_value_13;
        PyObject *tmp_bases_value_13;
        tmp_key_value_37 = mod_consts[44];
        CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
        tmp_dict_arg_value_37 = tmp_class_creation_13__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_37, tmp_key_value_37);
        assert(!(tmp_res == -1));
        tmp_condition_result_74 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_74 != false) {
            goto condexpr_true_26;
        } else {
            goto condexpr_false_26;
        }
        condexpr_true_26:;
        CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
        tmp_dict_arg_value_38 = tmp_class_creation_13__class_decl_dict;
        tmp_key_value_38 = mod_consts[44];
        tmp_metaclass_value_13 = DICT_GET_ITEM0(tmp_dict_arg_value_38, tmp_key_value_38);
        if (tmp_metaclass_value_13 == NULL) {
            tmp_metaclass_value_13 = Py_None;
        }
        assert(!(tmp_metaclass_value_13 == NULL));
        Py_INCREF(tmp_metaclass_value_13);
        goto condexpr_end_26;
        condexpr_false_26:;
        CHECK_OBJECT(tmp_class_creation_13__bases);
        tmp_truth_name_14 = CHECK_IF_TRUE(tmp_class_creation_13__bases);
        if (tmp_truth_name_14 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 302;

            goto try_except_handler_38;
        }
        tmp_condition_result_75 = tmp_truth_name_14 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_75 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_27;
        } else {
            goto condexpr_false_27;
        }
        condexpr_true_27:;
        CHECK_OBJECT(tmp_class_creation_13__bases);
        tmp_expression_value_205 = tmp_class_creation_13__bases;
        tmp_subscript_value_13 = mod_consts[29];
        tmp_type_arg_25 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_205, tmp_subscript_value_13, 0);
        if (tmp_type_arg_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 302;

            goto try_except_handler_38;
        }
        tmp_metaclass_value_13 = BUILTIN_TYPE1(tmp_type_arg_25);
        Py_DECREF(tmp_type_arg_25);
        if (tmp_metaclass_value_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 302;

            goto try_except_handler_38;
        }
        goto condexpr_end_27;
        condexpr_false_27:;
        tmp_metaclass_value_13 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_13);
        condexpr_end_27:;
        condexpr_end_26:;
        CHECK_OBJECT(tmp_class_creation_13__bases);
        tmp_bases_value_13 = tmp_class_creation_13__bases;
        tmp_assign_source_190 = SELECT_METACLASS(tmp_metaclass_value_13, tmp_bases_value_13);
        Py_DECREF(tmp_metaclass_value_13);
        if (tmp_assign_source_190 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 302;

            goto try_except_handler_38;
        }
        assert(tmp_class_creation_13__metaclass == NULL);
        tmp_class_creation_13__metaclass = tmp_assign_source_190;
    }
    {
        bool tmp_condition_result_76;
        PyObject *tmp_key_value_39;
        PyObject *tmp_dict_arg_value_39;
        tmp_key_value_39 = mod_consts[44];
        CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
        tmp_dict_arg_value_39 = tmp_class_creation_13__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_39, tmp_key_value_39);
        assert(!(tmp_res == -1));
        tmp_condition_result_76 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_76 != false) {
            goto branch_yes_49;
        } else {
            goto branch_no_49;
        }
    }
    branch_yes_49:;
    CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_13__class_decl_dict;
    tmp_dictdel_key = mod_consts[44];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 302;

        goto try_except_handler_38;
    }
    branch_no_49:;
    {
        nuitka_bool tmp_condition_result_77;
        PyObject *tmp_expression_value_206;
        CHECK_OBJECT(tmp_class_creation_13__metaclass);
        tmp_expression_value_206 = tmp_class_creation_13__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_206, mod_consts[45]);
        tmp_condition_result_77 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_77 == NUITKA_BOOL_TRUE) {
            goto branch_yes_50;
        } else {
            goto branch_no_50;
        }
    }
    branch_yes_50:;
    {
        PyObject *tmp_assign_source_191;
        PyObject *tmp_called_value_37;
        PyObject *tmp_expression_value_207;
        PyObject *tmp_args_value_25;
        PyObject *tmp_tuple_element_130;
        PyObject *tmp_kwargs_value_25;
        CHECK_OBJECT(tmp_class_creation_13__metaclass);
        tmp_expression_value_207 = tmp_class_creation_13__metaclass;
        tmp_called_value_37 = LOOKUP_ATTRIBUTE(tmp_expression_value_207, mod_consts[45]);
        if (tmp_called_value_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 302;

            goto try_except_handler_38;
        }
        tmp_tuple_element_130 = mod_consts[229];
        tmp_args_value_25 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_25, 0, tmp_tuple_element_130);
        CHECK_OBJECT(tmp_class_creation_13__bases);
        tmp_tuple_element_130 = tmp_class_creation_13__bases;
        PyTuple_SET_ITEM0(tmp_args_value_25, 1, tmp_tuple_element_130);
        CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
        tmp_kwargs_value_25 = tmp_class_creation_13__class_decl_dict;
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 302;
        tmp_assign_source_191 = CALL_FUNCTION(tmp_called_value_37, tmp_args_value_25, tmp_kwargs_value_25);
        Py_DECREF(tmp_called_value_37);
        Py_DECREF(tmp_args_value_25);
        if (tmp_assign_source_191 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 302;

            goto try_except_handler_38;
        }
        assert(tmp_class_creation_13__prepared == NULL);
        tmp_class_creation_13__prepared = tmp_assign_source_191;
    }
    {
        bool tmp_condition_result_78;
        PyObject *tmp_operand_value_13;
        PyObject *tmp_expression_value_208;
        CHECK_OBJECT(tmp_class_creation_13__prepared);
        tmp_expression_value_208 = tmp_class_creation_13__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_208, mod_consts[47]);
        tmp_operand_value_13 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_13);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 302;

            goto try_except_handler_38;
        }
        tmp_condition_result_78 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_78 != false) {
            goto branch_yes_51;
        } else {
            goto branch_no_51;
        }
    }
    branch_yes_51:;
    {
        PyObject *tmp_raise_type_13;
        PyObject *tmp_raise_value_13;
        PyObject *tmp_left_value_19;
        PyObject *tmp_right_value_19;
        PyObject *tmp_tuple_element_131;
        PyObject *tmp_getattr_target_13;
        PyObject *tmp_getattr_attr_13;
        PyObject *tmp_getattr_default_13;
        tmp_raise_type_13 = PyExc_TypeError;
        tmp_left_value_19 = mod_consts[48];
        CHECK_OBJECT(tmp_class_creation_13__metaclass);
        tmp_getattr_target_13 = tmp_class_creation_13__metaclass;
        tmp_getattr_attr_13 = mod_consts[15];
        tmp_getattr_default_13 = mod_consts[49];
        tmp_tuple_element_131 = BUILTIN_GETATTR(tmp_getattr_target_13, tmp_getattr_attr_13, tmp_getattr_default_13);
        if (tmp_tuple_element_131 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 302;

            goto try_except_handler_38;
        }
        tmp_right_value_19 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_209;
            PyObject *tmp_type_arg_26;
            PyTuple_SET_ITEM(tmp_right_value_19, 0, tmp_tuple_element_131);
            CHECK_OBJECT(tmp_class_creation_13__prepared);
            tmp_type_arg_26 = tmp_class_creation_13__prepared;
            tmp_expression_value_209 = BUILTIN_TYPE1(tmp_type_arg_26);
            assert(!(tmp_expression_value_209 == NULL));
            tmp_tuple_element_131 = LOOKUP_ATTRIBUTE(tmp_expression_value_209, mod_consts[15]);
            Py_DECREF(tmp_expression_value_209);
            if (tmp_tuple_element_131 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 302;

                goto tuple_build_exception_93;
            }
            PyTuple_SET_ITEM(tmp_right_value_19, 1, tmp_tuple_element_131);
        }
        goto tuple_build_noexception_93;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_93:;
        Py_DECREF(tmp_right_value_19);
        goto try_except_handler_38;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_93:;
        tmp_raise_value_13 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_19, tmp_right_value_19);
        Py_DECREF(tmp_right_value_19);
        if (tmp_raise_value_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 302;

            goto try_except_handler_38;
        }
        exception_type = tmp_raise_type_13;
        Py_INCREF(tmp_raise_type_13);
        exception_value = tmp_raise_value_13;
        exception_lineno = 302;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_38;
    }
    branch_no_51:;
    goto branch_end_50;
    branch_no_50:;
    {
        PyObject *tmp_assign_source_192;
        tmp_assign_source_192 = PyDict_New();
        assert(tmp_class_creation_13__prepared == NULL);
        tmp_class_creation_13__prepared = tmp_assign_source_192;
    }
    branch_end_50:;
    {
        PyObject *tmp_assign_source_193;
        {
            PyObject *tmp_set_locals_13;
            CHECK_OBJECT(tmp_class_creation_13__prepared);
            tmp_set_locals_13 = tmp_class_creation_13__prepared;
            locals_numba$roc$hsadrv$drvapi$$$class__13_hsa_ext_image_data_info_t_302 = tmp_set_locals_13;
            Py_INCREF(tmp_set_locals_13);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__13_hsa_ext_image_data_info_t_302, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 302;

            goto try_except_handler_40;
        }
        tmp_dictset_value = mod_consts[229];
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__13_hsa_ext_image_data_info_t_302, mod_consts[52], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 302;

            goto try_except_handler_40;
        }
        if (isFrameUnusable(cache_frame_49394c7c8beb9c9b30705d981c1289c9_14)) {
            Py_XDECREF(cache_frame_49394c7c8beb9c9b30705d981c1289c9_14);

#if _DEBUG_REFCOUNTS
            if (cache_frame_49394c7c8beb9c9b30705d981c1289c9_14 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_49394c7c8beb9c9b30705d981c1289c9_14 = MAKE_FUNCTION_FRAME(codeobj_49394c7c8beb9c9b30705d981c1289c9, module_numba$roc$hsadrv$drvapi, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_49394c7c8beb9c9b30705d981c1289c9_14->m_type_description == NULL);
        frame_49394c7c8beb9c9b30705d981c1289c9_14 = cache_frame_49394c7c8beb9c9b30705d981c1289c9_14;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_49394c7c8beb9c9b30705d981c1289c9_14);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_49394c7c8beb9c9b30705d981c1289c9_14) == 2); // Frame stack

        // Framed code:
        {
            PyObject *tmp_list_element_13;
            PyObject *tmp_tuple_element_132;
            tmp_tuple_element_132 = mod_consts[86];
            tmp_list_element_13 = PyTuple_New(2);
            {
                PyObject *tmp_expression_value_210;
                PyTuple_SET_ITEM0(tmp_list_element_13, 0, tmp_tuple_element_132);
                tmp_expression_value_210 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__13_hsa_ext_image_data_info_t_302, mod_consts[28]);

                if (tmp_expression_value_210 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_210 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                        if (unlikely(tmp_expression_value_210 == NULL)) {
                            tmp_expression_value_210 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                        }

                        if (tmp_expression_value_210 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 304;
                            type_description_2 = "o";
                            goto tuple_build_exception_94;
                        }
                        Py_INCREF(tmp_expression_value_210);
                    } else {
                        goto tuple_build_exception_94;
                    }
                }

                tmp_tuple_element_132 = LOOKUP_ATTRIBUTE(tmp_expression_value_210, mod_consts[223]);
                Py_DECREF(tmp_expression_value_210);
                if (tmp_tuple_element_132 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 304;
                    type_description_2 = "o";
                    goto tuple_build_exception_94;
                }
                PyTuple_SET_ITEM(tmp_list_element_13, 1, tmp_tuple_element_132);
            }
            goto tuple_build_noexception_94;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_94:;
            Py_DECREF(tmp_list_element_13);
            goto frame_exception_exit_14;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_94:;
            tmp_dictset_value = PyList_New(2);
            {
                PyObject *tmp_tuple_element_133;
                PyList_SET_ITEM(tmp_dictset_value, 0, tmp_list_element_13);
                tmp_tuple_element_133 = mod_consts[230];
                tmp_list_element_13 = PyTuple_New(2);
                {
                    PyObject *tmp_expression_value_211;
                    PyTuple_SET_ITEM0(tmp_list_element_13, 0, tmp_tuple_element_133);
                    tmp_expression_value_211 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__13_hsa_ext_image_data_info_t_302, mod_consts[28]);

                    if (tmp_expression_value_211 == NULL) {
                        if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                            tmp_expression_value_211 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                            if (unlikely(tmp_expression_value_211 == NULL)) {
                                tmp_expression_value_211 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                            }

                            if (tmp_expression_value_211 == NULL) {
                                assert(ERROR_OCCURRED());

                                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                                exception_lineno = 305;
                                type_description_2 = "o";
                                goto tuple_build_exception_95;
                            }
                            Py_INCREF(tmp_expression_value_211);
                        } else {
                            goto tuple_build_exception_95;
                        }
                    }

                    tmp_tuple_element_133 = LOOKUP_ATTRIBUTE(tmp_expression_value_211, mod_consts[223]);
                    Py_DECREF(tmp_expression_value_211);
                    if (tmp_tuple_element_133 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 305;
                        type_description_2 = "o";
                        goto tuple_build_exception_95;
                    }
                    PyTuple_SET_ITEM(tmp_list_element_13, 1, tmp_tuple_element_133);
                }
                goto tuple_build_noexception_95;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_95:;
                Py_DECREF(tmp_list_element_13);
                goto list_build_exception_13;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_95:;
                PyList_SET_ITEM(tmp_dictset_value, 1, tmp_list_element_13);
            }
            goto list_build_noexception_13;
            // Exception handling pass through code for list_build:
            list_build_exception_13:;
            Py_DECREF(tmp_dictset_value);
            goto frame_exception_exit_14;
            // Finished with no exception for list_build:
            list_build_noexception_13:;
            tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__13_hsa_ext_image_data_info_t_302, mod_consts[57], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 303;
                type_description_2 = "o";
                goto frame_exception_exit_14;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_49394c7c8beb9c9b30705d981c1289c9_14);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_13;

        frame_exception_exit_14:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_49394c7c8beb9c9b30705d981c1289c9_14);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_49394c7c8beb9c9b30705d981c1289c9_14, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_49394c7c8beb9c9b30705d981c1289c9_14->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_49394c7c8beb9c9b30705d981c1289c9_14, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_49394c7c8beb9c9b30705d981c1289c9_14,
            type_description_2,
            outline_12_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_49394c7c8beb9c9b30705d981c1289c9_14 == cache_frame_49394c7c8beb9c9b30705d981c1289c9_14) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_49394c7c8beb9c9b30705d981c1289c9_14);
            cache_frame_49394c7c8beb9c9b30705d981c1289c9_14 = NULL;
        }

        assertFrameObject(frame_49394c7c8beb9c9b30705d981c1289c9_14);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_13;

        frame_no_exception_13:;
        goto skip_nested_handling_13;
        nested_frame_exit_13:;

        goto try_except_handler_40;
        skip_nested_handling_13:;
        {
            nuitka_bool tmp_condition_result_79;
            PyObject *tmp_cmp_expr_left_13;
            PyObject *tmp_cmp_expr_right_13;
            CHECK_OBJECT(tmp_class_creation_13__bases);
            tmp_cmp_expr_left_13 = tmp_class_creation_13__bases;
            CHECK_OBJECT(tmp_class_creation_13__bases_orig);
            tmp_cmp_expr_right_13 = tmp_class_creation_13__bases_orig;
            tmp_condition_result_79 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_13, tmp_cmp_expr_right_13);
            if (tmp_condition_result_79 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 302;

                goto try_except_handler_40;
            }
            if (tmp_condition_result_79 == NUITKA_BOOL_TRUE) {
                goto branch_yes_52;
            } else {
                goto branch_no_52;
            }
            assert(tmp_condition_result_79 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_52:;
        CHECK_OBJECT(tmp_class_creation_13__bases_orig);
        tmp_dictset_value = tmp_class_creation_13__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__13_hsa_ext_image_data_info_t_302, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 302;

            goto try_except_handler_40;
        }
        branch_no_52:;
        {
            PyObject *tmp_assign_source_194;
            PyObject *tmp_called_value_38;
            PyObject *tmp_args_value_26;
            PyObject *tmp_tuple_element_134;
            PyObject *tmp_kwargs_value_26;
            CHECK_OBJECT(tmp_class_creation_13__metaclass);
            tmp_called_value_38 = tmp_class_creation_13__metaclass;
            tmp_tuple_element_134 = mod_consts[229];
            tmp_args_value_26 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_26, 0, tmp_tuple_element_134);
            CHECK_OBJECT(tmp_class_creation_13__bases);
            tmp_tuple_element_134 = tmp_class_creation_13__bases;
            PyTuple_SET_ITEM0(tmp_args_value_26, 1, tmp_tuple_element_134);
            tmp_tuple_element_134 = locals_numba$roc$hsadrv$drvapi$$$class__13_hsa_ext_image_data_info_t_302;
            PyTuple_SET_ITEM0(tmp_args_value_26, 2, tmp_tuple_element_134);
            CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
            tmp_kwargs_value_26 = tmp_class_creation_13__class_decl_dict;
            frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 302;
            tmp_assign_source_194 = CALL_FUNCTION(tmp_called_value_38, tmp_args_value_26, tmp_kwargs_value_26);
            Py_DECREF(tmp_args_value_26);
            if (tmp_assign_source_194 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 302;

                goto try_except_handler_40;
            }
            assert(outline_12_var___class__ == NULL);
            outline_12_var___class__ = tmp_assign_source_194;
        }
        CHECK_OBJECT(outline_12_var___class__);
        tmp_assign_source_193 = outline_12_var___class__;
        Py_INCREF(tmp_assign_source_193);
        goto try_return_handler_40;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_40:;
        Py_DECREF(locals_numba$roc$hsadrv$drvapi$$$class__13_hsa_ext_image_data_info_t_302);
        locals_numba$roc$hsadrv$drvapi$$$class__13_hsa_ext_image_data_info_t_302 = NULL;
        goto try_return_handler_39;
        // Exception handler code:
        try_except_handler_40:;
        exception_keeper_type_38 = exception_type;
        exception_keeper_value_38 = exception_value;
        exception_keeper_tb_38 = exception_tb;
        exception_keeper_lineno_38 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$roc$hsadrv$drvapi$$$class__13_hsa_ext_image_data_info_t_302);
        locals_numba$roc$hsadrv$drvapi$$$class__13_hsa_ext_image_data_info_t_302 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_38;
        exception_value = exception_keeper_value_38;
        exception_tb = exception_keeper_tb_38;
        exception_lineno = exception_keeper_lineno_38;

        goto try_except_handler_39;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_39:;
        CHECK_OBJECT(outline_12_var___class__);
        Py_DECREF(outline_12_var___class__);
        outline_12_var___class__ = NULL;
        goto outline_result_13;
        // Exception handler code:
        try_except_handler_39:;
        exception_keeper_type_39 = exception_type;
        exception_keeper_value_39 = exception_value;
        exception_keeper_tb_39 = exception_tb;
        exception_keeper_lineno_39 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_39;
        exception_value = exception_keeper_value_39;
        exception_tb = exception_keeper_tb_39;
        exception_lineno = exception_keeper_lineno_39;

        goto outline_exception_13;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_13:;
        exception_lineno = 302;
        goto try_except_handler_38;
        outline_result_13:;
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[229], tmp_assign_source_193);
    }
    goto try_end_14;
    // Exception handler code:
    try_except_handler_38:;
    exception_keeper_type_40 = exception_type;
    exception_keeper_value_40 = exception_value;
    exception_keeper_tb_40 = exception_tb;
    exception_keeper_lineno_40 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_13__bases_orig);
    tmp_class_creation_13__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_13__bases);
    tmp_class_creation_13__bases = NULL;
    Py_XDECREF(tmp_class_creation_13__class_decl_dict);
    tmp_class_creation_13__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_13__metaclass);
    tmp_class_creation_13__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_13__prepared);
    tmp_class_creation_13__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_40;
    exception_value = exception_keeper_value_40;
    exception_tb = exception_keeper_tb_40;
    exception_lineno = exception_keeper_lineno_40;

    goto frame_exception_exit_1;
    // End of try:
    try_end_14:;
    CHECK_OBJECT(tmp_class_creation_13__bases_orig);
    Py_DECREF(tmp_class_creation_13__bases_orig);
    tmp_class_creation_13__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_13__bases);
    Py_DECREF(tmp_class_creation_13__bases);
    tmp_class_creation_13__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
    Py_DECREF(tmp_class_creation_13__class_decl_dict);
    tmp_class_creation_13__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_13__metaclass);
    Py_DECREF(tmp_class_creation_13__metaclass);
    tmp_class_creation_13__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_13__prepared);
    Py_DECREF(tmp_class_creation_13__prepared);
    tmp_class_creation_13__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_195;
        PyObject *tmp_tuple_element_135;
        PyObject *tmp_expression_value_212;
        tmp_expression_value_212 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_212 == NULL)) {
            tmp_expression_value_212 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_212 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;

            goto try_except_handler_41;
        }
        tmp_tuple_element_135 = LOOKUP_ATTRIBUTE(tmp_expression_value_212, mod_consts[43]);
        if (tmp_tuple_element_135 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;

            goto try_except_handler_41;
        }
        tmp_assign_source_195 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_assign_source_195, 0, tmp_tuple_element_135);
        assert(tmp_class_creation_14__bases_orig == NULL);
        tmp_class_creation_14__bases_orig = tmp_assign_source_195;
    }
    {
        PyObject *tmp_assign_source_196;
        PyObject *tmp_dircall_arg1_14;
        CHECK_OBJECT(tmp_class_creation_14__bases_orig);
        tmp_dircall_arg1_14 = tmp_class_creation_14__bases_orig;
        Py_INCREF(tmp_dircall_arg1_14);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_14};
            tmp_assign_source_196 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_196 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;

            goto try_except_handler_41;
        }
        assert(tmp_class_creation_14__bases == NULL);
        tmp_class_creation_14__bases = tmp_assign_source_196;
    }
    {
        PyObject *tmp_assign_source_197;
        tmp_assign_source_197 = PyDict_New();
        assert(tmp_class_creation_14__class_decl_dict == NULL);
        tmp_class_creation_14__class_decl_dict = tmp_assign_source_197;
    }
    {
        PyObject *tmp_assign_source_198;
        PyObject *tmp_metaclass_value_14;
        bool tmp_condition_result_80;
        PyObject *tmp_key_value_40;
        PyObject *tmp_dict_arg_value_40;
        PyObject *tmp_dict_arg_value_41;
        PyObject *tmp_key_value_41;
        nuitka_bool tmp_condition_result_81;
        int tmp_truth_name_15;
        PyObject *tmp_type_arg_27;
        PyObject *tmp_expression_value_213;
        PyObject *tmp_subscript_value_14;
        PyObject *tmp_bases_value_14;
        tmp_key_value_40 = mod_consts[44];
        CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
        tmp_dict_arg_value_40 = tmp_class_creation_14__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_40, tmp_key_value_40);
        assert(!(tmp_res == -1));
        tmp_condition_result_80 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_80 != false) {
            goto condexpr_true_28;
        } else {
            goto condexpr_false_28;
        }
        condexpr_true_28:;
        CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
        tmp_dict_arg_value_41 = tmp_class_creation_14__class_decl_dict;
        tmp_key_value_41 = mod_consts[44];
        tmp_metaclass_value_14 = DICT_GET_ITEM0(tmp_dict_arg_value_41, tmp_key_value_41);
        if (tmp_metaclass_value_14 == NULL) {
            tmp_metaclass_value_14 = Py_None;
        }
        assert(!(tmp_metaclass_value_14 == NULL));
        Py_INCREF(tmp_metaclass_value_14);
        goto condexpr_end_28;
        condexpr_false_28:;
        CHECK_OBJECT(tmp_class_creation_14__bases);
        tmp_truth_name_15 = CHECK_IF_TRUE(tmp_class_creation_14__bases);
        if (tmp_truth_name_15 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;

            goto try_except_handler_41;
        }
        tmp_condition_result_81 = tmp_truth_name_15 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_81 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_29;
        } else {
            goto condexpr_false_29;
        }
        condexpr_true_29:;
        CHECK_OBJECT(tmp_class_creation_14__bases);
        tmp_expression_value_213 = tmp_class_creation_14__bases;
        tmp_subscript_value_14 = mod_consts[29];
        tmp_type_arg_27 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_213, tmp_subscript_value_14, 0);
        if (tmp_type_arg_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;

            goto try_except_handler_41;
        }
        tmp_metaclass_value_14 = BUILTIN_TYPE1(tmp_type_arg_27);
        Py_DECREF(tmp_type_arg_27);
        if (tmp_metaclass_value_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;

            goto try_except_handler_41;
        }
        goto condexpr_end_29;
        condexpr_false_29:;
        tmp_metaclass_value_14 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_14);
        condexpr_end_29:;
        condexpr_end_28:;
        CHECK_OBJECT(tmp_class_creation_14__bases);
        tmp_bases_value_14 = tmp_class_creation_14__bases;
        tmp_assign_source_198 = SELECT_METACLASS(tmp_metaclass_value_14, tmp_bases_value_14);
        Py_DECREF(tmp_metaclass_value_14);
        if (tmp_assign_source_198 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;

            goto try_except_handler_41;
        }
        assert(tmp_class_creation_14__metaclass == NULL);
        tmp_class_creation_14__metaclass = tmp_assign_source_198;
    }
    {
        bool tmp_condition_result_82;
        PyObject *tmp_key_value_42;
        PyObject *tmp_dict_arg_value_42;
        tmp_key_value_42 = mod_consts[44];
        CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
        tmp_dict_arg_value_42 = tmp_class_creation_14__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_42, tmp_key_value_42);
        assert(!(tmp_res == -1));
        tmp_condition_result_82 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_82 != false) {
            goto branch_yes_53;
        } else {
            goto branch_no_53;
        }
    }
    branch_yes_53:;
    CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_14__class_decl_dict;
    tmp_dictdel_key = mod_consts[44];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 308;

        goto try_except_handler_41;
    }
    branch_no_53:;
    {
        nuitka_bool tmp_condition_result_83;
        PyObject *tmp_expression_value_214;
        CHECK_OBJECT(tmp_class_creation_14__metaclass);
        tmp_expression_value_214 = tmp_class_creation_14__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_214, mod_consts[45]);
        tmp_condition_result_83 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_83 == NUITKA_BOOL_TRUE) {
            goto branch_yes_54;
        } else {
            goto branch_no_54;
        }
    }
    branch_yes_54:;
    {
        PyObject *tmp_assign_source_199;
        PyObject *tmp_called_value_39;
        PyObject *tmp_expression_value_215;
        PyObject *tmp_args_value_27;
        PyObject *tmp_tuple_element_136;
        PyObject *tmp_kwargs_value_27;
        CHECK_OBJECT(tmp_class_creation_14__metaclass);
        tmp_expression_value_215 = tmp_class_creation_14__metaclass;
        tmp_called_value_39 = LOOKUP_ATTRIBUTE(tmp_expression_value_215, mod_consts[45]);
        if (tmp_called_value_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;

            goto try_except_handler_41;
        }
        tmp_tuple_element_136 = mod_consts[231];
        tmp_args_value_27 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_27, 0, tmp_tuple_element_136);
        CHECK_OBJECT(tmp_class_creation_14__bases);
        tmp_tuple_element_136 = tmp_class_creation_14__bases;
        PyTuple_SET_ITEM0(tmp_args_value_27, 1, tmp_tuple_element_136);
        CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
        tmp_kwargs_value_27 = tmp_class_creation_14__class_decl_dict;
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 308;
        tmp_assign_source_199 = CALL_FUNCTION(tmp_called_value_39, tmp_args_value_27, tmp_kwargs_value_27);
        Py_DECREF(tmp_called_value_39);
        Py_DECREF(tmp_args_value_27);
        if (tmp_assign_source_199 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;

            goto try_except_handler_41;
        }
        assert(tmp_class_creation_14__prepared == NULL);
        tmp_class_creation_14__prepared = tmp_assign_source_199;
    }
    {
        bool tmp_condition_result_84;
        PyObject *tmp_operand_value_14;
        PyObject *tmp_expression_value_216;
        CHECK_OBJECT(tmp_class_creation_14__prepared);
        tmp_expression_value_216 = tmp_class_creation_14__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_216, mod_consts[47]);
        tmp_operand_value_14 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_14);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;

            goto try_except_handler_41;
        }
        tmp_condition_result_84 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_84 != false) {
            goto branch_yes_55;
        } else {
            goto branch_no_55;
        }
    }
    branch_yes_55:;
    {
        PyObject *tmp_raise_type_14;
        PyObject *tmp_raise_value_14;
        PyObject *tmp_left_value_20;
        PyObject *tmp_right_value_20;
        PyObject *tmp_tuple_element_137;
        PyObject *tmp_getattr_target_14;
        PyObject *tmp_getattr_attr_14;
        PyObject *tmp_getattr_default_14;
        tmp_raise_type_14 = PyExc_TypeError;
        tmp_left_value_20 = mod_consts[48];
        CHECK_OBJECT(tmp_class_creation_14__metaclass);
        tmp_getattr_target_14 = tmp_class_creation_14__metaclass;
        tmp_getattr_attr_14 = mod_consts[15];
        tmp_getattr_default_14 = mod_consts[49];
        tmp_tuple_element_137 = BUILTIN_GETATTR(tmp_getattr_target_14, tmp_getattr_attr_14, tmp_getattr_default_14);
        if (tmp_tuple_element_137 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;

            goto try_except_handler_41;
        }
        tmp_right_value_20 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_217;
            PyObject *tmp_type_arg_28;
            PyTuple_SET_ITEM(tmp_right_value_20, 0, tmp_tuple_element_137);
            CHECK_OBJECT(tmp_class_creation_14__prepared);
            tmp_type_arg_28 = tmp_class_creation_14__prepared;
            tmp_expression_value_217 = BUILTIN_TYPE1(tmp_type_arg_28);
            assert(!(tmp_expression_value_217 == NULL));
            tmp_tuple_element_137 = LOOKUP_ATTRIBUTE(tmp_expression_value_217, mod_consts[15]);
            Py_DECREF(tmp_expression_value_217);
            if (tmp_tuple_element_137 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 308;

                goto tuple_build_exception_96;
            }
            PyTuple_SET_ITEM(tmp_right_value_20, 1, tmp_tuple_element_137);
        }
        goto tuple_build_noexception_96;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_96:;
        Py_DECREF(tmp_right_value_20);
        goto try_except_handler_41;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_96:;
        tmp_raise_value_14 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_20, tmp_right_value_20);
        Py_DECREF(tmp_right_value_20);
        if (tmp_raise_value_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;

            goto try_except_handler_41;
        }
        exception_type = tmp_raise_type_14;
        Py_INCREF(tmp_raise_type_14);
        exception_value = tmp_raise_value_14;
        exception_lineno = 308;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_41;
    }
    branch_no_55:;
    goto branch_end_54;
    branch_no_54:;
    {
        PyObject *tmp_assign_source_200;
        tmp_assign_source_200 = PyDict_New();
        assert(tmp_class_creation_14__prepared == NULL);
        tmp_class_creation_14__prepared = tmp_assign_source_200;
    }
    branch_end_54:;
    {
        PyObject *tmp_assign_source_201;
        {
            PyObject *tmp_set_locals_14;
            CHECK_OBJECT(tmp_class_creation_14__prepared);
            tmp_set_locals_14 = tmp_class_creation_14__prepared;
            locals_numba$roc$hsadrv$drvapi$$$class__14_hsa_ext_image_region_t_308 = tmp_set_locals_14;
            Py_INCREF(tmp_set_locals_14);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__14_hsa_ext_image_region_t_308, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;

            goto try_except_handler_43;
        }
        tmp_dictset_value = mod_consts[231];
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__14_hsa_ext_image_region_t_308, mod_consts[52], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;

            goto try_except_handler_43;
        }
        if (isFrameUnusable(cache_frame_6050eba5412bb6113d2af9826b315903_15)) {
            Py_XDECREF(cache_frame_6050eba5412bb6113d2af9826b315903_15);

#if _DEBUG_REFCOUNTS
            if (cache_frame_6050eba5412bb6113d2af9826b315903_15 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_6050eba5412bb6113d2af9826b315903_15 = MAKE_FUNCTION_FRAME(codeobj_6050eba5412bb6113d2af9826b315903, module_numba$roc$hsadrv$drvapi, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_6050eba5412bb6113d2af9826b315903_15->m_type_description == NULL);
        frame_6050eba5412bb6113d2af9826b315903_15 = cache_frame_6050eba5412bb6113d2af9826b315903_15;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_6050eba5412bb6113d2af9826b315903_15);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_6050eba5412bb6113d2af9826b315903_15) == 2); // Frame stack

        // Framed code:
        {
            PyObject *tmp_list_element_14;
            PyObject *tmp_tuple_element_138;
            tmp_tuple_element_138 = mod_consts[232];
            tmp_list_element_14 = PyTuple_New(2);
            PyTuple_SET_ITEM0(tmp_list_element_14, 0, tmp_tuple_element_138);
            tmp_tuple_element_138 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__14_hsa_ext_image_region_t_308, mod_consts[46]);

            if (tmp_tuple_element_138 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_tuple_element_138 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[46]);

                    if (unlikely(tmp_tuple_element_138 == NULL)) {
                        tmp_tuple_element_138 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[46]);
                    }

                    if (tmp_tuple_element_138 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 310;
                        type_description_2 = "o";
                        goto tuple_build_exception_97;
                    }
                    Py_INCREF(tmp_tuple_element_138);
                } else {
                    goto tuple_build_exception_97;
                }
            }

            PyTuple_SET_ITEM(tmp_list_element_14, 1, tmp_tuple_element_138);
            goto tuple_build_noexception_97;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_97:;
            Py_DECREF(tmp_list_element_14);
            goto frame_exception_exit_15;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_97:;
            tmp_dictset_value = PyList_New(2);
            {
                PyObject *tmp_tuple_element_139;
                PyList_SET_ITEM(tmp_dictset_value, 0, tmp_list_element_14);
                tmp_tuple_element_139 = mod_consts[232];
                tmp_list_element_14 = PyTuple_New(2);
                PyTuple_SET_ITEM0(tmp_list_element_14, 0, tmp_tuple_element_139);
                tmp_tuple_element_139 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__14_hsa_ext_image_region_t_308, mod_consts[46]);

                if (tmp_tuple_element_139 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_tuple_element_139 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[46]);

                        if (unlikely(tmp_tuple_element_139 == NULL)) {
                            tmp_tuple_element_139 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[46]);
                        }

                        if (tmp_tuple_element_139 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 311;
                            type_description_2 = "o";
                            goto tuple_build_exception_98;
                        }
                        Py_INCREF(tmp_tuple_element_139);
                    } else {
                        goto tuple_build_exception_98;
                    }
                }

                PyTuple_SET_ITEM(tmp_list_element_14, 1, tmp_tuple_element_139);
                goto tuple_build_noexception_98;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_98:;
                Py_DECREF(tmp_list_element_14);
                goto list_build_exception_14;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_98:;
                PyList_SET_ITEM(tmp_dictset_value, 1, tmp_list_element_14);
            }
            goto list_build_noexception_14;
            // Exception handling pass through code for list_build:
            list_build_exception_14:;
            Py_DECREF(tmp_dictset_value);
            goto frame_exception_exit_15;
            // Finished with no exception for list_build:
            list_build_noexception_14:;
            tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__14_hsa_ext_image_region_t_308, mod_consts[57], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 309;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_6050eba5412bb6113d2af9826b315903_15);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_14;

        frame_exception_exit_15:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_6050eba5412bb6113d2af9826b315903_15);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_6050eba5412bb6113d2af9826b315903_15, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_6050eba5412bb6113d2af9826b315903_15->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_6050eba5412bb6113d2af9826b315903_15, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_6050eba5412bb6113d2af9826b315903_15,
            type_description_2,
            outline_13_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_6050eba5412bb6113d2af9826b315903_15 == cache_frame_6050eba5412bb6113d2af9826b315903_15) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_6050eba5412bb6113d2af9826b315903_15);
            cache_frame_6050eba5412bb6113d2af9826b315903_15 = NULL;
        }

        assertFrameObject(frame_6050eba5412bb6113d2af9826b315903_15);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_14;

        frame_no_exception_14:;
        goto skip_nested_handling_14;
        nested_frame_exit_14:;

        goto try_except_handler_43;
        skip_nested_handling_14:;
        {
            nuitka_bool tmp_condition_result_85;
            PyObject *tmp_cmp_expr_left_14;
            PyObject *tmp_cmp_expr_right_14;
            CHECK_OBJECT(tmp_class_creation_14__bases);
            tmp_cmp_expr_left_14 = tmp_class_creation_14__bases;
            CHECK_OBJECT(tmp_class_creation_14__bases_orig);
            tmp_cmp_expr_right_14 = tmp_class_creation_14__bases_orig;
            tmp_condition_result_85 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_14, tmp_cmp_expr_right_14);
            if (tmp_condition_result_85 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 308;

                goto try_except_handler_43;
            }
            if (tmp_condition_result_85 == NUITKA_BOOL_TRUE) {
                goto branch_yes_56;
            } else {
                goto branch_no_56;
            }
            assert(tmp_condition_result_85 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_56:;
        CHECK_OBJECT(tmp_class_creation_14__bases_orig);
        tmp_dictset_value = tmp_class_creation_14__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__14_hsa_ext_image_region_t_308, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;

            goto try_except_handler_43;
        }
        branch_no_56:;
        {
            PyObject *tmp_assign_source_202;
            PyObject *tmp_called_value_40;
            PyObject *tmp_args_value_28;
            PyObject *tmp_tuple_element_140;
            PyObject *tmp_kwargs_value_28;
            CHECK_OBJECT(tmp_class_creation_14__metaclass);
            tmp_called_value_40 = tmp_class_creation_14__metaclass;
            tmp_tuple_element_140 = mod_consts[231];
            tmp_args_value_28 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_28, 0, tmp_tuple_element_140);
            CHECK_OBJECT(tmp_class_creation_14__bases);
            tmp_tuple_element_140 = tmp_class_creation_14__bases;
            PyTuple_SET_ITEM0(tmp_args_value_28, 1, tmp_tuple_element_140);
            tmp_tuple_element_140 = locals_numba$roc$hsadrv$drvapi$$$class__14_hsa_ext_image_region_t_308;
            PyTuple_SET_ITEM0(tmp_args_value_28, 2, tmp_tuple_element_140);
            CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
            tmp_kwargs_value_28 = tmp_class_creation_14__class_decl_dict;
            frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 308;
            tmp_assign_source_202 = CALL_FUNCTION(tmp_called_value_40, tmp_args_value_28, tmp_kwargs_value_28);
            Py_DECREF(tmp_args_value_28);
            if (tmp_assign_source_202 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 308;

                goto try_except_handler_43;
            }
            assert(outline_13_var___class__ == NULL);
            outline_13_var___class__ = tmp_assign_source_202;
        }
        CHECK_OBJECT(outline_13_var___class__);
        tmp_assign_source_201 = outline_13_var___class__;
        Py_INCREF(tmp_assign_source_201);
        goto try_return_handler_43;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_43:;
        Py_DECREF(locals_numba$roc$hsadrv$drvapi$$$class__14_hsa_ext_image_region_t_308);
        locals_numba$roc$hsadrv$drvapi$$$class__14_hsa_ext_image_region_t_308 = NULL;
        goto try_return_handler_42;
        // Exception handler code:
        try_except_handler_43:;
        exception_keeper_type_41 = exception_type;
        exception_keeper_value_41 = exception_value;
        exception_keeper_tb_41 = exception_tb;
        exception_keeper_lineno_41 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$roc$hsadrv$drvapi$$$class__14_hsa_ext_image_region_t_308);
        locals_numba$roc$hsadrv$drvapi$$$class__14_hsa_ext_image_region_t_308 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_41;
        exception_value = exception_keeper_value_41;
        exception_tb = exception_keeper_tb_41;
        exception_lineno = exception_keeper_lineno_41;

        goto try_except_handler_42;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_42:;
        CHECK_OBJECT(outline_13_var___class__);
        Py_DECREF(outline_13_var___class__);
        outline_13_var___class__ = NULL;
        goto outline_result_14;
        // Exception handler code:
        try_except_handler_42:;
        exception_keeper_type_42 = exception_type;
        exception_keeper_value_42 = exception_value;
        exception_keeper_tb_42 = exception_tb;
        exception_keeper_lineno_42 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_42;
        exception_value = exception_keeper_value_42;
        exception_tb = exception_keeper_tb_42;
        exception_lineno = exception_keeper_lineno_42;

        goto outline_exception_14;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_14:;
        exception_lineno = 308;
        goto try_except_handler_41;
        outline_result_14:;
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[231], tmp_assign_source_201);
    }
    goto try_end_15;
    // Exception handler code:
    try_except_handler_41:;
    exception_keeper_type_43 = exception_type;
    exception_keeper_value_43 = exception_value;
    exception_keeper_tb_43 = exception_tb;
    exception_keeper_lineno_43 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_14__bases_orig);
    tmp_class_creation_14__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_14__bases);
    tmp_class_creation_14__bases = NULL;
    Py_XDECREF(tmp_class_creation_14__class_decl_dict);
    tmp_class_creation_14__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_14__metaclass);
    tmp_class_creation_14__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_14__prepared);
    tmp_class_creation_14__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_43;
    exception_value = exception_keeper_value_43;
    exception_tb = exception_keeper_tb_43;
    exception_lineno = exception_keeper_lineno_43;

    goto frame_exception_exit_1;
    // End of try:
    try_end_15:;
    CHECK_OBJECT(tmp_class_creation_14__bases_orig);
    Py_DECREF(tmp_class_creation_14__bases_orig);
    tmp_class_creation_14__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_14__bases);
    Py_DECREF(tmp_class_creation_14__bases);
    tmp_class_creation_14__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
    Py_DECREF(tmp_class_creation_14__class_decl_dict);
    tmp_class_creation_14__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_14__metaclass);
    Py_DECREF(tmp_class_creation_14__metaclass);
    tmp_class_creation_14__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_14__prepared);
    Py_DECREF(tmp_class_creation_14__prepared);
    tmp_class_creation_14__prepared = NULL;
    {
        PyObject *tmp_assign_source_203;
        tmp_assign_source_203 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[40]);

        if (unlikely(tmp_assign_source_203 == NULL)) {
            tmp_assign_source_203 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[40]);
        }

        if (tmp_assign_source_203 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 314;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT0(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[233], tmp_assign_source_203);
    }
    {
        PyObject *tmp_assign_source_204;
        PyObject *tmp_expression_value_218;
        tmp_expression_value_218 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_218 == NULL)) {
            tmp_expression_value_218 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_218 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 315;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_204 = LOOKUP_ATTRIBUTE(tmp_expression_value_218, mod_consts[41]);
        if (tmp_assign_source_204 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 315;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[234], tmp_assign_source_204);
    }
    {
        PyObject *tmp_assign_source_205;
        PyObject *tmp_expression_value_219;
        tmp_expression_value_219 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_219 == NULL)) {
            tmp_expression_value_219 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_219 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_205 = LOOKUP_ATTRIBUTE(tmp_expression_value_219, mod_consts[41]);
        if (tmp_assign_source_205 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[235], tmp_assign_source_205);
    }
    {
        PyObject *tmp_assign_source_206;
        PyObject *tmp_expression_value_220;
        tmp_expression_value_220 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_220 == NULL)) {
            tmp_expression_value_220 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_220 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 317;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_206 = LOOKUP_ATTRIBUTE(tmp_expression_value_220, mod_consts[41]);
        if (tmp_assign_source_206 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 317;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[236], tmp_assign_source_206);
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_207;
        PyObject *tmp_tuple_element_141;
        PyObject *tmp_expression_value_221;
        tmp_expression_value_221 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_221 == NULL)) {
            tmp_expression_value_221 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_221 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 319;

            goto try_except_handler_44;
        }
        tmp_tuple_element_141 = LOOKUP_ATTRIBUTE(tmp_expression_value_221, mod_consts[43]);
        if (tmp_tuple_element_141 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 319;

            goto try_except_handler_44;
        }
        tmp_assign_source_207 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_assign_source_207, 0, tmp_tuple_element_141);
        assert(tmp_class_creation_15__bases_orig == NULL);
        tmp_class_creation_15__bases_orig = tmp_assign_source_207;
    }
    {
        PyObject *tmp_assign_source_208;
        PyObject *tmp_dircall_arg1_15;
        CHECK_OBJECT(tmp_class_creation_15__bases_orig);
        tmp_dircall_arg1_15 = tmp_class_creation_15__bases_orig;
        Py_INCREF(tmp_dircall_arg1_15);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_15};
            tmp_assign_source_208 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_208 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 319;

            goto try_except_handler_44;
        }
        assert(tmp_class_creation_15__bases == NULL);
        tmp_class_creation_15__bases = tmp_assign_source_208;
    }
    {
        PyObject *tmp_assign_source_209;
        tmp_assign_source_209 = PyDict_New();
        assert(tmp_class_creation_15__class_decl_dict == NULL);
        tmp_class_creation_15__class_decl_dict = tmp_assign_source_209;
    }
    {
        PyObject *tmp_assign_source_210;
        PyObject *tmp_metaclass_value_15;
        bool tmp_condition_result_86;
        PyObject *tmp_key_value_43;
        PyObject *tmp_dict_arg_value_43;
        PyObject *tmp_dict_arg_value_44;
        PyObject *tmp_key_value_44;
        nuitka_bool tmp_condition_result_87;
        int tmp_truth_name_16;
        PyObject *tmp_type_arg_29;
        PyObject *tmp_expression_value_222;
        PyObject *tmp_subscript_value_15;
        PyObject *tmp_bases_value_15;
        tmp_key_value_43 = mod_consts[44];
        CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
        tmp_dict_arg_value_43 = tmp_class_creation_15__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_43, tmp_key_value_43);
        assert(!(tmp_res == -1));
        tmp_condition_result_86 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_86 != false) {
            goto condexpr_true_30;
        } else {
            goto condexpr_false_30;
        }
        condexpr_true_30:;
        CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
        tmp_dict_arg_value_44 = tmp_class_creation_15__class_decl_dict;
        tmp_key_value_44 = mod_consts[44];
        tmp_metaclass_value_15 = DICT_GET_ITEM0(tmp_dict_arg_value_44, tmp_key_value_44);
        if (tmp_metaclass_value_15 == NULL) {
            tmp_metaclass_value_15 = Py_None;
        }
        assert(!(tmp_metaclass_value_15 == NULL));
        Py_INCREF(tmp_metaclass_value_15);
        goto condexpr_end_30;
        condexpr_false_30:;
        CHECK_OBJECT(tmp_class_creation_15__bases);
        tmp_truth_name_16 = CHECK_IF_TRUE(tmp_class_creation_15__bases);
        if (tmp_truth_name_16 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 319;

            goto try_except_handler_44;
        }
        tmp_condition_result_87 = tmp_truth_name_16 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_87 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_31;
        } else {
            goto condexpr_false_31;
        }
        condexpr_true_31:;
        CHECK_OBJECT(tmp_class_creation_15__bases);
        tmp_expression_value_222 = tmp_class_creation_15__bases;
        tmp_subscript_value_15 = mod_consts[29];
        tmp_type_arg_29 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_222, tmp_subscript_value_15, 0);
        if (tmp_type_arg_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 319;

            goto try_except_handler_44;
        }
        tmp_metaclass_value_15 = BUILTIN_TYPE1(tmp_type_arg_29);
        Py_DECREF(tmp_type_arg_29);
        if (tmp_metaclass_value_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 319;

            goto try_except_handler_44;
        }
        goto condexpr_end_31;
        condexpr_false_31:;
        tmp_metaclass_value_15 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_15);
        condexpr_end_31:;
        condexpr_end_30:;
        CHECK_OBJECT(tmp_class_creation_15__bases);
        tmp_bases_value_15 = tmp_class_creation_15__bases;
        tmp_assign_source_210 = SELECT_METACLASS(tmp_metaclass_value_15, tmp_bases_value_15);
        Py_DECREF(tmp_metaclass_value_15);
        if (tmp_assign_source_210 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 319;

            goto try_except_handler_44;
        }
        assert(tmp_class_creation_15__metaclass == NULL);
        tmp_class_creation_15__metaclass = tmp_assign_source_210;
    }
    {
        bool tmp_condition_result_88;
        PyObject *tmp_key_value_45;
        PyObject *tmp_dict_arg_value_45;
        tmp_key_value_45 = mod_consts[44];
        CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
        tmp_dict_arg_value_45 = tmp_class_creation_15__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_45, tmp_key_value_45);
        assert(!(tmp_res == -1));
        tmp_condition_result_88 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_88 != false) {
            goto branch_yes_57;
        } else {
            goto branch_no_57;
        }
    }
    branch_yes_57:;
    CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_15__class_decl_dict;
    tmp_dictdel_key = mod_consts[44];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 319;

        goto try_except_handler_44;
    }
    branch_no_57:;
    {
        nuitka_bool tmp_condition_result_89;
        PyObject *tmp_expression_value_223;
        CHECK_OBJECT(tmp_class_creation_15__metaclass);
        tmp_expression_value_223 = tmp_class_creation_15__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_223, mod_consts[45]);
        tmp_condition_result_89 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_89 == NUITKA_BOOL_TRUE) {
            goto branch_yes_58;
        } else {
            goto branch_no_58;
        }
    }
    branch_yes_58:;
    {
        PyObject *tmp_assign_source_211;
        PyObject *tmp_called_value_41;
        PyObject *tmp_expression_value_224;
        PyObject *tmp_args_value_29;
        PyObject *tmp_tuple_element_142;
        PyObject *tmp_kwargs_value_29;
        CHECK_OBJECT(tmp_class_creation_15__metaclass);
        tmp_expression_value_224 = tmp_class_creation_15__metaclass;
        tmp_called_value_41 = LOOKUP_ATTRIBUTE(tmp_expression_value_224, mod_consts[45]);
        if (tmp_called_value_41 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 319;

            goto try_except_handler_44;
        }
        tmp_tuple_element_142 = mod_consts[237];
        tmp_args_value_29 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_29, 0, tmp_tuple_element_142);
        CHECK_OBJECT(tmp_class_creation_15__bases);
        tmp_tuple_element_142 = tmp_class_creation_15__bases;
        PyTuple_SET_ITEM0(tmp_args_value_29, 1, tmp_tuple_element_142);
        CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
        tmp_kwargs_value_29 = tmp_class_creation_15__class_decl_dict;
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 319;
        tmp_assign_source_211 = CALL_FUNCTION(tmp_called_value_41, tmp_args_value_29, tmp_kwargs_value_29);
        Py_DECREF(tmp_called_value_41);
        Py_DECREF(tmp_args_value_29);
        if (tmp_assign_source_211 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 319;

            goto try_except_handler_44;
        }
        assert(tmp_class_creation_15__prepared == NULL);
        tmp_class_creation_15__prepared = tmp_assign_source_211;
    }
    {
        bool tmp_condition_result_90;
        PyObject *tmp_operand_value_15;
        PyObject *tmp_expression_value_225;
        CHECK_OBJECT(tmp_class_creation_15__prepared);
        tmp_expression_value_225 = tmp_class_creation_15__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_225, mod_consts[47]);
        tmp_operand_value_15 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_15);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 319;

            goto try_except_handler_44;
        }
        tmp_condition_result_90 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_90 != false) {
            goto branch_yes_59;
        } else {
            goto branch_no_59;
        }
    }
    branch_yes_59:;
    {
        PyObject *tmp_raise_type_15;
        PyObject *tmp_raise_value_15;
        PyObject *tmp_left_value_21;
        PyObject *tmp_right_value_21;
        PyObject *tmp_tuple_element_143;
        PyObject *tmp_getattr_target_15;
        PyObject *tmp_getattr_attr_15;
        PyObject *tmp_getattr_default_15;
        tmp_raise_type_15 = PyExc_TypeError;
        tmp_left_value_21 = mod_consts[48];
        CHECK_OBJECT(tmp_class_creation_15__metaclass);
        tmp_getattr_target_15 = tmp_class_creation_15__metaclass;
        tmp_getattr_attr_15 = mod_consts[15];
        tmp_getattr_default_15 = mod_consts[49];
        tmp_tuple_element_143 = BUILTIN_GETATTR(tmp_getattr_target_15, tmp_getattr_attr_15, tmp_getattr_default_15);
        if (tmp_tuple_element_143 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 319;

            goto try_except_handler_44;
        }
        tmp_right_value_21 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_226;
            PyObject *tmp_type_arg_30;
            PyTuple_SET_ITEM(tmp_right_value_21, 0, tmp_tuple_element_143);
            CHECK_OBJECT(tmp_class_creation_15__prepared);
            tmp_type_arg_30 = tmp_class_creation_15__prepared;
            tmp_expression_value_226 = BUILTIN_TYPE1(tmp_type_arg_30);
            assert(!(tmp_expression_value_226 == NULL));
            tmp_tuple_element_143 = LOOKUP_ATTRIBUTE(tmp_expression_value_226, mod_consts[15]);
            Py_DECREF(tmp_expression_value_226);
            if (tmp_tuple_element_143 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 319;

                goto tuple_build_exception_99;
            }
            PyTuple_SET_ITEM(tmp_right_value_21, 1, tmp_tuple_element_143);
        }
        goto tuple_build_noexception_99;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_99:;
        Py_DECREF(tmp_right_value_21);
        goto try_except_handler_44;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_99:;
        tmp_raise_value_15 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_21, tmp_right_value_21);
        Py_DECREF(tmp_right_value_21);
        if (tmp_raise_value_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 319;

            goto try_except_handler_44;
        }
        exception_type = tmp_raise_type_15;
        Py_INCREF(tmp_raise_type_15);
        exception_value = tmp_raise_value_15;
        exception_lineno = 319;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_44;
    }
    branch_no_59:;
    goto branch_end_58;
    branch_no_58:;
    {
        PyObject *tmp_assign_source_212;
        tmp_assign_source_212 = PyDict_New();
        assert(tmp_class_creation_15__prepared == NULL);
        tmp_class_creation_15__prepared = tmp_assign_source_212;
    }
    branch_end_58:;
    {
        PyObject *tmp_assign_source_213;
        {
            PyObject *tmp_set_locals_15;
            CHECK_OBJECT(tmp_class_creation_15__prepared);
            tmp_set_locals_15 = tmp_class_creation_15__prepared;
            locals_numba$roc$hsadrv$drvapi$$$class__15_hsa_ext_sampler_descriptor_t_319 = tmp_set_locals_15;
            Py_INCREF(tmp_set_locals_15);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[50];
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__15_hsa_ext_sampler_descriptor_t_319, mod_consts[51], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 319;

            goto try_except_handler_46;
        }
        tmp_dictset_value = mod_consts[237];
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__15_hsa_ext_sampler_descriptor_t_319, mod_consts[52], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 319;

            goto try_except_handler_46;
        }
        if (isFrameUnusable(cache_frame_bf4dc8548fa109c9509d32a0d9bcab4b_16)) {
            Py_XDECREF(cache_frame_bf4dc8548fa109c9509d32a0d9bcab4b_16);

#if _DEBUG_REFCOUNTS
            if (cache_frame_bf4dc8548fa109c9509d32a0d9bcab4b_16 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_bf4dc8548fa109c9509d32a0d9bcab4b_16 = MAKE_FUNCTION_FRAME(codeobj_bf4dc8548fa109c9509d32a0d9bcab4b, module_numba$roc$hsadrv$drvapi, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_bf4dc8548fa109c9509d32a0d9bcab4b_16->m_type_description == NULL);
        frame_bf4dc8548fa109c9509d32a0d9bcab4b_16 = cache_frame_bf4dc8548fa109c9509d32a0d9bcab4b_16;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_bf4dc8548fa109c9509d32a0d9bcab4b_16);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_bf4dc8548fa109c9509d32a0d9bcab4b_16) == 2); // Frame stack

        // Framed code:
        {
            PyObject *tmp_list_element_15;
            PyObject *tmp_tuple_element_144;
            tmp_tuple_element_144 = mod_consts[238];
            tmp_list_element_15 = PyTuple_New(2);
            PyTuple_SET_ITEM0(tmp_list_element_15, 0, tmp_tuple_element_144);
            tmp_tuple_element_144 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__15_hsa_ext_sampler_descriptor_t_319, mod_consts[235]);

            if (tmp_tuple_element_144 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_tuple_element_144 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[235]);

                    if (unlikely(tmp_tuple_element_144 == NULL)) {
                        tmp_tuple_element_144 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[235]);
                    }

                    if (tmp_tuple_element_144 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 321;
                        type_description_2 = "o";
                        goto tuple_build_exception_100;
                    }
                    Py_INCREF(tmp_tuple_element_144);
                } else {
                    goto tuple_build_exception_100;
                }
            }

            PyTuple_SET_ITEM(tmp_list_element_15, 1, tmp_tuple_element_144);
            goto tuple_build_noexception_100;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_100:;
            Py_DECREF(tmp_list_element_15);
            goto frame_exception_exit_16;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_100:;
            tmp_dictset_value = PyList_New(3);
            {
                PyObject *tmp_tuple_element_145;
                PyObject *tmp_tuple_element_146;
                PyList_SET_ITEM(tmp_dictset_value, 0, tmp_list_element_15);
                tmp_tuple_element_145 = mod_consts[239];
                tmp_list_element_15 = PyTuple_New(2);
                PyTuple_SET_ITEM0(tmp_list_element_15, 0, tmp_tuple_element_145);
                tmp_tuple_element_145 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__15_hsa_ext_sampler_descriptor_t_319, mod_consts[236]);

                if (tmp_tuple_element_145 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_tuple_element_145 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[236]);

                        if (unlikely(tmp_tuple_element_145 == NULL)) {
                            tmp_tuple_element_145 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
                        }

                        if (tmp_tuple_element_145 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 322;
                            type_description_2 = "o";
                            goto tuple_build_exception_101;
                        }
                        Py_INCREF(tmp_tuple_element_145);
                    } else {
                        goto tuple_build_exception_101;
                    }
                }

                PyTuple_SET_ITEM(tmp_list_element_15, 1, tmp_tuple_element_145);
                goto tuple_build_noexception_101;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_101:;
                Py_DECREF(tmp_list_element_15);
                goto list_build_exception_15;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_101:;
                PyList_SET_ITEM(tmp_dictset_value, 1, tmp_list_element_15);
                tmp_tuple_element_146 = mod_consts[240];
                tmp_list_element_15 = PyTuple_New(2);
                PyTuple_SET_ITEM0(tmp_list_element_15, 0, tmp_tuple_element_146);
                tmp_tuple_element_146 = PyObject_GetItem(locals_numba$roc$hsadrv$drvapi$$$class__15_hsa_ext_sampler_descriptor_t_319, mod_consts[234]);

                if (tmp_tuple_element_146 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_tuple_element_146 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[234]);

                        if (unlikely(tmp_tuple_element_146 == NULL)) {
                            tmp_tuple_element_146 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[234]);
                        }

                        if (tmp_tuple_element_146 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 323;
                            type_description_2 = "o";
                            goto tuple_build_exception_102;
                        }
                        Py_INCREF(tmp_tuple_element_146);
                    } else {
                        goto tuple_build_exception_102;
                    }
                }

                PyTuple_SET_ITEM(tmp_list_element_15, 1, tmp_tuple_element_146);
                goto tuple_build_noexception_102;
                // Exception handling pass through code for tuple_build:
                tuple_build_exception_102:;
                Py_DECREF(tmp_list_element_15);
                goto list_build_exception_15;
                // Finished with no exception for tuple_build:
                tuple_build_noexception_102:;
                PyList_SET_ITEM(tmp_dictset_value, 2, tmp_list_element_15);
            }
            goto list_build_noexception_15;
            // Exception handling pass through code for list_build:
            list_build_exception_15:;
            Py_DECREF(tmp_dictset_value);
            goto frame_exception_exit_16;
            // Finished with no exception for list_build:
            list_build_noexception_15:;
            tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__15_hsa_ext_sampler_descriptor_t_319, mod_consts[57], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 320;
                type_description_2 = "o";
                goto frame_exception_exit_16;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_bf4dc8548fa109c9509d32a0d9bcab4b_16);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_15;

        frame_exception_exit_16:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_bf4dc8548fa109c9509d32a0d9bcab4b_16);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_bf4dc8548fa109c9509d32a0d9bcab4b_16, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_bf4dc8548fa109c9509d32a0d9bcab4b_16->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_bf4dc8548fa109c9509d32a0d9bcab4b_16, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_bf4dc8548fa109c9509d32a0d9bcab4b_16,
            type_description_2,
            outline_14_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_bf4dc8548fa109c9509d32a0d9bcab4b_16 == cache_frame_bf4dc8548fa109c9509d32a0d9bcab4b_16) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_bf4dc8548fa109c9509d32a0d9bcab4b_16);
            cache_frame_bf4dc8548fa109c9509d32a0d9bcab4b_16 = NULL;
        }

        assertFrameObject(frame_bf4dc8548fa109c9509d32a0d9bcab4b_16);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_15;

        frame_no_exception_15:;
        goto skip_nested_handling_15;
        nested_frame_exit_15:;

        goto try_except_handler_46;
        skip_nested_handling_15:;
        {
            nuitka_bool tmp_condition_result_91;
            PyObject *tmp_cmp_expr_left_15;
            PyObject *tmp_cmp_expr_right_15;
            CHECK_OBJECT(tmp_class_creation_15__bases);
            tmp_cmp_expr_left_15 = tmp_class_creation_15__bases;
            CHECK_OBJECT(tmp_class_creation_15__bases_orig);
            tmp_cmp_expr_right_15 = tmp_class_creation_15__bases_orig;
            tmp_condition_result_91 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_15, tmp_cmp_expr_right_15);
            if (tmp_condition_result_91 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 319;

                goto try_except_handler_46;
            }
            if (tmp_condition_result_91 == NUITKA_BOOL_TRUE) {
                goto branch_yes_60;
            } else {
                goto branch_no_60;
            }
            assert(tmp_condition_result_91 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_60:;
        CHECK_OBJECT(tmp_class_creation_15__bases_orig);
        tmp_dictset_value = tmp_class_creation_15__bases_orig;
        tmp_res = PyObject_SetItem(locals_numba$roc$hsadrv$drvapi$$$class__15_hsa_ext_sampler_descriptor_t_319, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 319;

            goto try_except_handler_46;
        }
        branch_no_60:;
        {
            PyObject *tmp_assign_source_214;
            PyObject *tmp_called_value_42;
            PyObject *tmp_args_value_30;
            PyObject *tmp_tuple_element_147;
            PyObject *tmp_kwargs_value_30;
            CHECK_OBJECT(tmp_class_creation_15__metaclass);
            tmp_called_value_42 = tmp_class_creation_15__metaclass;
            tmp_tuple_element_147 = mod_consts[237];
            tmp_args_value_30 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_30, 0, tmp_tuple_element_147);
            CHECK_OBJECT(tmp_class_creation_15__bases);
            tmp_tuple_element_147 = tmp_class_creation_15__bases;
            PyTuple_SET_ITEM0(tmp_args_value_30, 1, tmp_tuple_element_147);
            tmp_tuple_element_147 = locals_numba$roc$hsadrv$drvapi$$$class__15_hsa_ext_sampler_descriptor_t_319;
            PyTuple_SET_ITEM0(tmp_args_value_30, 2, tmp_tuple_element_147);
            CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
            tmp_kwargs_value_30 = tmp_class_creation_15__class_decl_dict;
            frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 319;
            tmp_assign_source_214 = CALL_FUNCTION(tmp_called_value_42, tmp_args_value_30, tmp_kwargs_value_30);
            Py_DECREF(tmp_args_value_30);
            if (tmp_assign_source_214 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 319;

                goto try_except_handler_46;
            }
            assert(outline_14_var___class__ == NULL);
            outline_14_var___class__ = tmp_assign_source_214;
        }
        CHECK_OBJECT(outline_14_var___class__);
        tmp_assign_source_213 = outline_14_var___class__;
        Py_INCREF(tmp_assign_source_213);
        goto try_return_handler_46;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_46:;
        Py_DECREF(locals_numba$roc$hsadrv$drvapi$$$class__15_hsa_ext_sampler_descriptor_t_319);
        locals_numba$roc$hsadrv$drvapi$$$class__15_hsa_ext_sampler_descriptor_t_319 = NULL;
        goto try_return_handler_45;
        // Exception handler code:
        try_except_handler_46:;
        exception_keeper_type_44 = exception_type;
        exception_keeper_value_44 = exception_value;
        exception_keeper_tb_44 = exception_tb;
        exception_keeper_lineno_44 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_numba$roc$hsadrv$drvapi$$$class__15_hsa_ext_sampler_descriptor_t_319);
        locals_numba$roc$hsadrv$drvapi$$$class__15_hsa_ext_sampler_descriptor_t_319 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_44;
        exception_value = exception_keeper_value_44;
        exception_tb = exception_keeper_tb_44;
        exception_lineno = exception_keeper_lineno_44;

        goto try_except_handler_45;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_45:;
        CHECK_OBJECT(outline_14_var___class__);
        Py_DECREF(outline_14_var___class__);
        outline_14_var___class__ = NULL;
        goto outline_result_15;
        // Exception handler code:
        try_except_handler_45:;
        exception_keeper_type_45 = exception_type;
        exception_keeper_value_45 = exception_value;
        exception_keeper_tb_45 = exception_tb;
        exception_keeper_lineno_45 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_45;
        exception_value = exception_keeper_value_45;
        exception_tb = exception_keeper_tb_45;
        exception_lineno = exception_keeper_lineno_45;

        goto outline_exception_15;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_15:;
        exception_lineno = 319;
        goto try_except_handler_44;
        outline_result_15:;
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[237], tmp_assign_source_213);
    }
    goto try_end_16;
    // Exception handler code:
    try_except_handler_44:;
    exception_keeper_type_46 = exception_type;
    exception_keeper_value_46 = exception_value;
    exception_keeper_tb_46 = exception_tb;
    exception_keeper_lineno_46 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_15__bases_orig);
    tmp_class_creation_15__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_15__bases);
    tmp_class_creation_15__bases = NULL;
    Py_XDECREF(tmp_class_creation_15__class_decl_dict);
    tmp_class_creation_15__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_15__metaclass);
    tmp_class_creation_15__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_15__prepared);
    tmp_class_creation_15__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_46;
    exception_value = exception_keeper_value_46;
    exception_tb = exception_keeper_tb_46;
    exception_lineno = exception_keeper_lineno_46;

    goto frame_exception_exit_1;
    // End of try:
    try_end_16:;
    CHECK_OBJECT(tmp_class_creation_15__bases_orig);
    Py_DECREF(tmp_class_creation_15__bases_orig);
    tmp_class_creation_15__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_15__bases);
    Py_DECREF(tmp_class_creation_15__bases);
    tmp_class_creation_15__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
    Py_DECREF(tmp_class_creation_15__class_decl_dict);
    tmp_class_creation_15__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_15__metaclass);
    Py_DECREF(tmp_class_creation_15__metaclass);
    tmp_class_creation_15__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_15__prepared);
    Py_DECREF(tmp_class_creation_15__prepared);
    tmp_class_creation_15__prepared = NULL;
    {
        PyObject *tmp_assign_source_215;
        PyObject *tmp_called_value_43;
        PyObject *tmp_expression_value_227;
        PyObject *tmp_args_element_value_39;
        PyObject *tmp_args_element_value_40;
        PyObject *tmp_args_element_value_41;
        PyObject *tmp_expression_value_228;
        tmp_expression_value_227 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_227 == NULL)) {
            tmp_expression_value_227 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_227 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto frame_exception_exit_1;
        }
        tmp_called_value_43 = LOOKUP_ATTRIBUTE(tmp_expression_value_227, mod_consts[166]);
        if (tmp_called_value_43 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_39 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

        if (unlikely(tmp_args_element_value_39 == NULL)) {
            tmp_args_element_value_39 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
        }

        if (tmp_args_element_value_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_43);

            exception_lineno = 333;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_40 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[65]);

        if (unlikely(tmp_args_element_value_40 == NULL)) {
            tmp_args_element_value_40 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[65]);
        }

        if (tmp_args_element_value_40 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_43);

            exception_lineno = 334;

            goto frame_exception_exit_1;
        }
        tmp_expression_value_228 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_228 == NULL)) {
            tmp_expression_value_228 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_228 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_43);

            exception_lineno = 335;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_41 = LOOKUP_ATTRIBUTE(tmp_expression_value_228, mod_consts[241]);
        if (tmp_args_element_value_41 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_43);

            exception_lineno = 335;

            goto frame_exception_exit_1;
        }
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 332;
        {
            PyObject *call_args[] = {tmp_args_element_value_39, tmp_args_element_value_40, tmp_args_element_value_41};
            tmp_assign_source_215 = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_43, call_args);
        }

        Py_DECREF(tmp_called_value_43);
        Py_DECREF(tmp_args_element_value_41);
        if (tmp_assign_source_215 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[242], tmp_assign_source_215);
    }
    {
        PyObject *tmp_assign_source_216;
        PyObject *tmp_called_value_44;
        PyObject *tmp_expression_value_229;
        PyObject *tmp_args_element_value_42;
        PyObject *tmp_args_element_value_43;
        PyObject *tmp_args_element_value_44;
        PyObject *tmp_called_value_45;
        PyObject *tmp_args_element_value_45;
        PyObject *tmp_args_element_value_46;
        PyObject *tmp_expression_value_230;
        tmp_expression_value_229 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_229 == NULL)) {
            tmp_expression_value_229 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_229 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 337;

            goto frame_exception_exit_1;
        }
        tmp_called_value_44 = LOOKUP_ATTRIBUTE(tmp_expression_value_229, mod_consts[166]);
        if (tmp_called_value_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 337;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_42 = Py_None;
        tmp_args_element_value_43 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

        if (unlikely(tmp_args_element_value_43 == NULL)) {
            tmp_args_element_value_43 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
        }

        if (tmp_args_element_value_43 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_44);

            exception_lineno = 339;

            goto frame_exception_exit_1;
        }
        tmp_called_value_45 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

        if (unlikely(tmp_called_value_45 == NULL)) {
            tmp_called_value_45 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
        }

        if (tmp_called_value_45 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_44);

            exception_lineno = 340;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_45 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[79]);

        if (unlikely(tmp_args_element_value_45 == NULL)) {
            tmp_args_element_value_45 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
        }

        if (tmp_args_element_value_45 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_44);

            exception_lineno = 340;

            goto frame_exception_exit_1;
        }
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 340;
        tmp_args_element_value_44 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_45, tmp_args_element_value_45);
        if (tmp_args_element_value_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_44);

            exception_lineno = 340;

            goto frame_exception_exit_1;
        }
        tmp_expression_value_230 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_230 == NULL)) {
            tmp_expression_value_230 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_230 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_44);
            Py_DECREF(tmp_args_element_value_44);

            exception_lineno = 341;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_46 = LOOKUP_ATTRIBUTE(tmp_expression_value_230, mod_consts[241]);
        if (tmp_args_element_value_46 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_44);
            Py_DECREF(tmp_args_element_value_44);

            exception_lineno = 341;

            goto frame_exception_exit_1;
        }
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 337;
        {
            PyObject *call_args[] = {tmp_args_element_value_42, tmp_args_element_value_43, tmp_args_element_value_44, tmp_args_element_value_46};
            tmp_assign_source_216 = CALL_FUNCTION_WITH_ARGS4(tmp_called_value_44, call_args);
        }

        Py_DECREF(tmp_called_value_44);
        Py_DECREF(tmp_args_element_value_44);
        Py_DECREF(tmp_args_element_value_46);
        if (tmp_assign_source_216 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 337;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[243], tmp_assign_source_216);
    }
    {
        PyObject *tmp_assign_source_217;
        PyObject *tmp_called_value_46;
        PyObject *tmp_expression_value_231;
        PyObject *tmp_args_element_value_47;
        PyObject *tmp_args_element_value_48;
        PyObject *tmp_args_element_value_49;
        PyObject *tmp_expression_value_232;
        tmp_expression_value_231 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_231 == NULL)) {
            tmp_expression_value_231 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_231 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 343;

            goto frame_exception_exit_1;
        }
        tmp_called_value_46 = LOOKUP_ATTRIBUTE(tmp_expression_value_231, mod_consts[166]);
        if (tmp_called_value_46 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 343;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_47 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

        if (unlikely(tmp_args_element_value_47 == NULL)) {
            tmp_args_element_value_47 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
        }

        if (tmp_args_element_value_47 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_46);

            exception_lineno = 344;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_48 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[76]);

        if (unlikely(tmp_args_element_value_48 == NULL)) {
            tmp_args_element_value_48 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[76]);
        }

        if (tmp_args_element_value_48 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_46);

            exception_lineno = 345;

            goto frame_exception_exit_1;
        }
        tmp_expression_value_232 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_232 == NULL)) {
            tmp_expression_value_232 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_232 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_46);

            exception_lineno = 346;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_49 = LOOKUP_ATTRIBUTE(tmp_expression_value_232, mod_consts[241]);
        if (tmp_args_element_value_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_46);

            exception_lineno = 346;

            goto frame_exception_exit_1;
        }
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 343;
        {
            PyObject *call_args[] = {tmp_args_element_value_47, tmp_args_element_value_48, tmp_args_element_value_49};
            tmp_assign_source_217 = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_46, call_args);
        }

        Py_DECREF(tmp_called_value_46);
        Py_DECREF(tmp_args_element_value_49);
        if (tmp_assign_source_217 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 343;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[244], tmp_assign_source_217);
    }
    {
        PyObject *tmp_assign_source_218;
        PyObject *tmp_called_value_47;
        PyObject *tmp_expression_value_233;
        PyObject *tmp_args_element_value_50;
        PyObject *tmp_args_element_value_51;
        PyObject *tmp_args_element_value_52;
        PyObject *tmp_args_element_value_53;
        PyObject *tmp_expression_value_234;
        tmp_expression_value_233 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_233 == NULL)) {
            tmp_expression_value_233 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_233 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 349;

            goto frame_exception_exit_1;
        }
        tmp_called_value_47 = LOOKUP_ATTRIBUTE(tmp_expression_value_233, mod_consts[166]);
        if (tmp_called_value_47 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 349;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_50 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

        if (unlikely(tmp_args_element_value_50 == NULL)) {
            tmp_args_element_value_50 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
        }

        if (tmp_args_element_value_50 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_47);

            exception_lineno = 350;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_51 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[133]);

        if (unlikely(tmp_args_element_value_51 == NULL)) {
            tmp_args_element_value_51 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[133]);
        }

        if (tmp_args_element_value_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_47);

            exception_lineno = 351;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_52 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[137]);

        if (unlikely(tmp_args_element_value_52 == NULL)) {
            tmp_args_element_value_52 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[137]);
        }

        if (tmp_args_element_value_52 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_47);

            exception_lineno = 352;

            goto frame_exception_exit_1;
        }
        tmp_expression_value_234 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_234 == NULL)) {
            tmp_expression_value_234 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_234 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_47);

            exception_lineno = 353;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_53 = LOOKUP_ATTRIBUTE(tmp_expression_value_234, mod_consts[241]);
        if (tmp_args_element_value_53 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_47);

            exception_lineno = 353;

            goto frame_exception_exit_1;
        }
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 349;
        {
            PyObject *call_args[] = {tmp_args_element_value_50, tmp_args_element_value_51, tmp_args_element_value_52, tmp_args_element_value_53};
            tmp_assign_source_218 = CALL_FUNCTION_WITH_ARGS4(tmp_called_value_47, call_args);
        }

        Py_DECREF(tmp_called_value_47);
        Py_DECREF(tmp_args_element_value_53);
        if (tmp_assign_source_218 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 349;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[245], tmp_assign_source_218);
    }
    {
        PyObject *tmp_assign_source_219;
        PyObject *tmp_called_value_48;
        PyObject *tmp_expression_value_235;
        PyObject *tmp_args_element_value_54;
        PyObject *tmp_args_element_value_55;
        PyObject *tmp_expression_value_236;
        PyObject *tmp_args_element_value_56;
        PyObject *tmp_args_element_value_57;
        PyObject *tmp_called_value_49;
        PyObject *tmp_args_element_value_58;
        PyObject *tmp_expression_value_237;
        tmp_expression_value_235 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_235 == NULL)) {
            tmp_expression_value_235 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_235 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto frame_exception_exit_1;
        }
        tmp_called_value_48 = LOOKUP_ATTRIBUTE(tmp_expression_value_235, mod_consts[166]);
        if (tmp_called_value_48 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_54 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

        if (unlikely(tmp_args_element_value_54 == NULL)) {
            tmp_args_element_value_54 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
        }

        if (tmp_args_element_value_54 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_48);

            exception_lineno = 357;

            goto frame_exception_exit_1;
        }
        tmp_expression_value_236 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_236 == NULL)) {
            tmp_expression_value_236 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_236 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_48);

            exception_lineno = 358;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_55 = LOOKUP_ATTRIBUTE(tmp_expression_value_236, mod_consts[223]);
        if (tmp_args_element_value_55 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_48);

            exception_lineno = 358;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_56 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[134]);

        if (unlikely(tmp_args_element_value_56 == NULL)) {
            tmp_args_element_value_56 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[134]);
        }

        if (tmp_args_element_value_56 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_48);
            Py_DECREF(tmp_args_element_value_55);

            exception_lineno = 359;

            goto frame_exception_exit_1;
        }
        tmp_called_value_49 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

        if (unlikely(tmp_called_value_49 == NULL)) {
            tmp_called_value_49 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
        }

        if (tmp_called_value_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_48);
            Py_DECREF(tmp_args_element_value_55);

            exception_lineno = 360;

            goto frame_exception_exit_1;
        }
        tmp_expression_value_237 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_237 == NULL)) {
            tmp_expression_value_237 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_237 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_48);
            Py_DECREF(tmp_args_element_value_55);

            exception_lineno = 360;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_58 = LOOKUP_ATTRIBUTE(tmp_expression_value_237, mod_consts[84]);
        if (tmp_args_element_value_58 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_48);
            Py_DECREF(tmp_args_element_value_55);

            exception_lineno = 360;

            goto frame_exception_exit_1;
        }
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 360;
        tmp_args_element_value_57 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_49, tmp_args_element_value_58);
        Py_DECREF(tmp_args_element_value_58);
        if (tmp_args_element_value_57 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_48);
            Py_DECREF(tmp_args_element_value_55);

            exception_lineno = 360;

            goto frame_exception_exit_1;
        }
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 356;
        {
            PyObject *call_args[] = {tmp_args_element_value_54, tmp_args_element_value_55, tmp_args_element_value_56, tmp_args_element_value_57};
            tmp_assign_source_219 = CALL_FUNCTION_WITH_ARGS4(tmp_called_value_48, call_args);
        }

        Py_DECREF(tmp_called_value_48);
        Py_DECREF(tmp_args_element_value_55);
        Py_DECREF(tmp_args_element_value_57);
        if (tmp_assign_source_219 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[246], tmp_assign_source_219);
    }
    {
        PyObject *tmp_assign_source_220;
        PyObject *tmp_called_value_50;
        PyObject *tmp_expression_value_238;
        PyObject *tmp_args_element_value_59;
        PyObject *tmp_args_element_value_60;
        PyObject *tmp_expression_value_239;
        tmp_expression_value_238 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_238 == NULL)) {
            tmp_expression_value_238 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_238 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 363;

            goto frame_exception_exit_1;
        }
        tmp_called_value_50 = LOOKUP_ATTRIBUTE(tmp_expression_value_238, mod_consts[166]);
        if (tmp_called_value_50 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 363;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_59 = Py_None;
        tmp_expression_value_239 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_239 == NULL)) {
            tmp_expression_value_239 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_239 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_50);

            exception_lineno = 365;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_60 = LOOKUP_ATTRIBUTE(tmp_expression_value_239, mod_consts[84]);
        if (tmp_args_element_value_60 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_50);

            exception_lineno = 365;

            goto frame_exception_exit_1;
        }
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 363;
        {
            PyObject *call_args[] = {tmp_args_element_value_59, tmp_args_element_value_60};
            tmp_assign_source_220 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_50, call_args);
        }

        Py_DECREF(tmp_called_value_50);
        Py_DECREF(tmp_args_element_value_60);
        if (tmp_assign_source_220 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 363;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[247], tmp_assign_source_220);
    }
    {
        PyObject *tmp_assign_source_221;
        PyObject *tmp_called_value_51;
        PyObject *tmp_expression_value_240;
        PyObject *tmp_args_element_value_61;
        PyObject *tmp_args_element_value_62;
        PyObject *tmp_args_element_value_63;
        PyObject *tmp_expression_value_241;
        tmp_expression_value_240 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_240 == NULL)) {
            tmp_expression_value_240 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_240 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 368;

            goto frame_exception_exit_1;
        }
        tmp_called_value_51 = LOOKUP_ATTRIBUTE(tmp_expression_value_240, mod_consts[166]);
        if (tmp_called_value_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 368;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_61 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

        if (unlikely(tmp_args_element_value_61 == NULL)) {
            tmp_args_element_value_61 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
        }

        if (tmp_args_element_value_61 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_51);

            exception_lineno = 369;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_62 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[170]);

        if (unlikely(tmp_args_element_value_62 == NULL)) {
            tmp_args_element_value_62 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[170]);
        }

        if (tmp_args_element_value_62 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_51);

            exception_lineno = 370;

            goto frame_exception_exit_1;
        }
        tmp_expression_value_241 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

        if (unlikely(tmp_expression_value_241 == NULL)) {
            tmp_expression_value_241 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
        }

        if (tmp_expression_value_241 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_51);

            exception_lineno = 371;

            goto frame_exception_exit_1;
        }
        tmp_args_element_value_63 = LOOKUP_ATTRIBUTE(tmp_expression_value_241, mod_consts[84]);
        if (tmp_args_element_value_63 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_51);

            exception_lineno = 371;

            goto frame_exception_exit_1;
        }
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 368;
        {
            PyObject *call_args[] = {tmp_args_element_value_61, tmp_args_element_value_62, tmp_args_element_value_63};
            tmp_assign_source_221 = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_51, call_args);
        }

        Py_DECREF(tmp_called_value_51);
        Py_DECREF(tmp_args_element_value_63);
        if (tmp_assign_source_221 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 368;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[248], tmp_assign_source_221);
    }
    {
        PyObject *tmp_assign_source_222;


        tmp_assign_source_222 = MAKE_FUNCTION_numba$roc$hsadrv$drvapi$$$function__1__build_reverse_error_warn_maps();

        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[249], tmp_assign_source_222);
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_223;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_value_52;
        tmp_called_value_52 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[249]);

        if (unlikely(tmp_called_value_52 == NULL)) {
            tmp_called_value_52 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[249]);
        }

        assert(!(tmp_called_value_52 == NULL));
        frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 392;
        tmp_iter_arg_1 = CALL_FUNCTION_NO_ARGS(tmp_called_value_52);
        if (tmp_iter_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 392;

            goto try_except_handler_47;
        }
        tmp_assign_source_223 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_1);
        Py_DECREF(tmp_iter_arg_1);
        if (tmp_assign_source_223 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 392;

            goto try_except_handler_47;
        }
        assert(tmp_tuple_unpack_1__source_iter == NULL);
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_223;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_224;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_224 = UNPACK_NEXT(tmp_unpack_1, 0, 2);
        if (tmp_assign_source_224 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }



            exception_lineno = 392;
            goto try_except_handler_48;
        }
        assert(tmp_tuple_unpack_1__element_1 == NULL);
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_224;
    }
    {
        PyObject *tmp_assign_source_225;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_225 = UNPACK_NEXT(tmp_unpack_2, 1, 2);
        if (tmp_assign_source_225 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }



            exception_lineno = 392;
            goto try_except_handler_48;
        }
        assert(tmp_tuple_unpack_1__element_2 == NULL);
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_225;
    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 392;
                    goto try_except_handler_48;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[250];
            Py_INCREF(exception_value);
            exception_tb = NULL;


            exception_lineno = 392;
            goto try_except_handler_48;
        }
    }
    goto try_end_17;
    // Exception handler code:
    try_except_handler_48:;
    exception_keeper_type_47 = exception_type;
    exception_keeper_value_47 = exception_value;
    exception_keeper_tb_47 = exception_tb;
    exception_keeper_lineno_47 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_47;
    exception_value = exception_keeper_value_47;
    exception_tb = exception_keeper_tb_47;
    exception_lineno = exception_keeper_lineno_47;

    goto try_except_handler_47;
    // End of try:
    try_end_17:;
    goto try_end_18;
    // Exception handler code:
    try_except_handler_47:;
    exception_keeper_type_48 = exception_type;
    exception_keeper_value_48 = exception_value;
    exception_keeper_tb_48 = exception_tb;
    exception_keeper_lineno_48 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_48;
    exception_value = exception_keeper_value_48;
    exception_tb = exception_keeper_tb_48;
    exception_lineno = exception_keeper_lineno_48;

    goto frame_exception_exit_1;
    // End of try:
    try_end_18:;
    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    {
        PyObject *tmp_assign_source_226;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_1);
        tmp_assign_source_226 = tmp_tuple_unpack_1__element_1;
        UPDATE_STRING_DICT0(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[11], tmp_assign_source_226);
    }
    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_227;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_2);
        tmp_assign_source_227 = tmp_tuple_unpack_1__element_2;
        UPDATE_STRING_DICT0(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[17], tmp_assign_source_227);
    }
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_228;


        tmp_assign_source_228 = MAKE_FUNCTION_numba$roc$hsadrv$drvapi$$$function__2__check_error();

        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251], tmp_assign_source_228);
    }
    {
        PyObject *tmp_assign_source_229;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        tmp_dict_key_1 = mod_consts[252];
        tmp_dict_key_2 = mod_consts[253];
        tmp_dict_value_2 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

        if (unlikely(tmp_dict_value_2 == NULL)) {
            tmp_dict_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
        }

        if (tmp_dict_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 418;

            goto frame_exception_exit_1;
        }
        tmp_dict_value_1 = _PyDict_NewPresized( 3 );
        {
            PyObject *tmp_list_element_16;
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
            assert(!(tmp_res != 0));
            tmp_dict_key_2 = mod_consts[254];
            tmp_list_element_16 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_list_element_16 == NULL)) {
                tmp_list_element_16 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_list_element_16 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 419;

                goto dict_build_exception_1;
            }
            tmp_dict_value_2 = PyList_New(2);
            {
                PyObject *tmp_called_value_53;
                PyObject *tmp_args_element_value_64;
                PyObject *tmp_expression_value_242;
                PyList_SET_ITEM0(tmp_dict_value_2, 0, tmp_list_element_16);
                tmp_called_value_53 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                if (unlikely(tmp_called_value_53 == NULL)) {
                    tmp_called_value_53 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                }

                if (tmp_called_value_53 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 419;

                    goto list_build_exception_16;
                }
                tmp_expression_value_242 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                if (unlikely(tmp_expression_value_242 == NULL)) {
                    tmp_expression_value_242 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                }

                if (tmp_expression_value_242 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 419;

                    goto list_build_exception_16;
                }
                tmp_args_element_value_64 = LOOKUP_ATTRIBUTE(tmp_expression_value_242, mod_consts[197]);
                if (tmp_args_element_value_64 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 419;

                    goto list_build_exception_16;
                }
                frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 419;
                tmp_list_element_16 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_53, tmp_args_element_value_64);
                Py_DECREF(tmp_args_element_value_64);
                if (tmp_list_element_16 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 419;

                    goto list_build_exception_16;
                }
                PyList_SET_ITEM(tmp_dict_value_2, 1, tmp_list_element_16);
            }
            goto list_build_noexception_16;
            // Exception handling pass through code for list_build:
            list_build_exception_16:;
            Py_DECREF(tmp_dict_value_2);
            goto dict_build_exception_1;
            // Finished with no exception for list_build:
            list_build_noexception_16:;
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
            Py_DECREF(tmp_dict_value_2);
            assert(!(tmp_res != 0));
            tmp_dict_key_2 = mod_consts[255];
            tmp_dict_value_2 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_2 == NULL)) {
                tmp_dict_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 420;

                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
            assert(!(tmp_res != 0));
        }
        goto dict_build_noexception_1;
        // Exception handling pass through code for dict_build:
        dict_build_exception_1:;
        Py_DECREF(tmp_dict_value_1);
        goto frame_exception_exit_1;
        // Finished with no exception for dict_build:
        dict_build_noexception_1:;
        tmp_assign_source_229 = _PyDict_NewPresized( 121 );
        {
            PyObject *tmp_dict_key_3;
            PyObject *tmp_dict_value_3;
            PyObject *tmp_dict_key_4;
            PyObject *tmp_dict_value_4;
            PyObject *tmp_dict_key_5;
            PyObject *tmp_dict_value_5;
            PyObject *tmp_dict_key_6;
            PyObject *tmp_dict_value_6;
            PyObject *tmp_dict_key_7;
            PyObject *tmp_dict_value_7;
            PyObject *tmp_dict_key_8;
            PyObject *tmp_dict_value_8;
            PyObject *tmp_dict_key_9;
            PyObject *tmp_dict_value_9;
            PyObject *tmp_dict_key_10;
            PyObject *tmp_dict_value_10;
            PyObject *tmp_dict_key_11;
            PyObject *tmp_dict_value_11;
            PyObject *tmp_dict_key_12;
            PyObject *tmp_dict_value_12;
            PyObject *tmp_dict_key_13;
            PyObject *tmp_dict_value_13;
            PyObject *tmp_dict_key_14;
            PyObject *tmp_dict_value_14;
            PyObject *tmp_dict_key_15;
            PyObject *tmp_dict_value_15;
            PyObject *tmp_dict_key_16;
            PyObject *tmp_dict_value_16;
            PyObject *tmp_dict_key_17;
            PyObject *tmp_dict_value_17;
            PyObject *tmp_dict_key_18;
            PyObject *tmp_dict_value_18;
            PyObject *tmp_dict_key_19;
            PyObject *tmp_dict_value_19;
            PyObject *tmp_dict_key_20;
            PyObject *tmp_dict_value_20;
            PyObject *tmp_dict_key_21;
            PyObject *tmp_dict_value_21;
            PyObject *tmp_dict_key_22;
            PyObject *tmp_dict_value_22;
            PyObject *tmp_dict_key_23;
            PyObject *tmp_dict_value_23;
            PyObject *tmp_dict_key_24;
            PyObject *tmp_dict_value_24;
            PyObject *tmp_dict_key_25;
            PyObject *tmp_dict_value_25;
            PyObject *tmp_dict_key_26;
            PyObject *tmp_dict_value_26;
            PyObject *tmp_dict_key_27;
            PyObject *tmp_dict_value_27;
            PyObject *tmp_dict_key_28;
            PyObject *tmp_dict_value_28;
            PyObject *tmp_dict_key_29;
            PyObject *tmp_dict_value_29;
            PyObject *tmp_dict_key_30;
            PyObject *tmp_dict_value_30;
            PyObject *tmp_dict_key_31;
            PyObject *tmp_dict_value_31;
            PyObject *tmp_dict_key_32;
            PyObject *tmp_dict_value_32;
            PyObject *tmp_dict_key_33;
            PyObject *tmp_dict_value_33;
            PyObject *tmp_dict_key_34;
            PyObject *tmp_dict_value_34;
            PyObject *tmp_dict_key_35;
            PyObject *tmp_dict_value_35;
            PyObject *tmp_dict_key_36;
            PyObject *tmp_dict_value_36;
            PyObject *tmp_dict_key_37;
            PyObject *tmp_dict_value_37;
            PyObject *tmp_dict_key_38;
            PyObject *tmp_dict_value_38;
            PyObject *tmp_dict_key_39;
            PyObject *tmp_dict_value_39;
            PyObject *tmp_dict_key_40;
            PyObject *tmp_dict_value_40;
            PyObject *tmp_dict_key_41;
            PyObject *tmp_dict_value_41;
            PyObject *tmp_dict_key_42;
            PyObject *tmp_dict_value_42;
            PyObject *tmp_dict_key_43;
            PyObject *tmp_dict_value_43;
            PyObject *tmp_dict_key_44;
            PyObject *tmp_dict_value_44;
            PyObject *tmp_dict_key_45;
            PyObject *tmp_dict_value_45;
            PyObject *tmp_dict_key_46;
            PyObject *tmp_dict_value_46;
            PyObject *tmp_dict_key_47;
            PyObject *tmp_dict_value_47;
            PyObject *tmp_dict_key_48;
            PyObject *tmp_dict_value_48;
            PyObject *tmp_dict_key_49;
            PyObject *tmp_dict_value_49;
            PyObject *tmp_dict_key_50;
            PyObject *tmp_dict_value_50;
            PyObject *tmp_dict_key_51;
            PyObject *tmp_dict_value_51;
            PyObject *tmp_dict_key_52;
            PyObject *tmp_dict_value_52;
            PyObject *tmp_expression_value_268;
            PyObject *tmp_dict_key_53;
            PyObject *tmp_dict_value_53;
            PyObject *tmp_expression_value_269;
            PyObject *tmp_dict_key_54;
            PyObject *tmp_dict_value_54;
            PyObject *tmp_expression_value_270;
            PyObject *tmp_dict_key_55;
            PyObject *tmp_dict_value_55;
            PyObject *tmp_expression_value_271;
            PyObject *tmp_dict_key_56;
            PyObject *tmp_dict_value_56;
            PyObject *tmp_dict_key_57;
            PyObject *tmp_dict_value_57;
            PyObject *tmp_dict_key_58;
            PyObject *tmp_dict_value_58;
            PyObject *tmp_expression_value_274;
            PyObject *tmp_dict_key_59;
            PyObject *tmp_dict_value_59;
            PyObject *tmp_expression_value_277;
            PyObject *tmp_dict_key_60;
            PyObject *tmp_dict_value_60;
            PyObject *tmp_expression_value_280;
            PyObject *tmp_dict_key_61;
            PyObject *tmp_dict_value_61;
            PyObject *tmp_expression_value_283;
            PyObject *tmp_dict_key_62;
            PyObject *tmp_dict_value_62;
            PyObject *tmp_expression_value_286;
            PyObject *tmp_dict_key_63;
            PyObject *tmp_dict_value_63;
            PyObject *tmp_expression_value_288;
            PyObject *tmp_dict_key_64;
            PyObject *tmp_dict_value_64;
            PyObject *tmp_expression_value_290;
            PyObject *tmp_dict_key_65;
            PyObject *tmp_dict_value_65;
            PyObject *tmp_expression_value_292;
            PyObject *tmp_dict_key_66;
            PyObject *tmp_dict_value_66;
            PyObject *tmp_dict_key_67;
            PyObject *tmp_dict_value_67;
            PyObject *tmp_dict_key_68;
            PyObject *tmp_dict_value_68;
            PyObject *tmp_dict_key_69;
            PyObject *tmp_dict_value_69;
            PyObject *tmp_dict_key_70;
            PyObject *tmp_dict_value_70;
            PyObject *tmp_dict_key_71;
            PyObject *tmp_dict_value_71;
            PyObject *tmp_dict_key_72;
            PyObject *tmp_dict_value_72;
            PyObject *tmp_dict_key_73;
            PyObject *tmp_dict_value_73;
            PyObject *tmp_dict_key_74;
            PyObject *tmp_dict_value_74;
            PyObject *tmp_dict_key_75;
            PyObject *tmp_dict_value_75;
            PyObject *tmp_dict_key_76;
            PyObject *tmp_dict_value_76;
            PyObject *tmp_dict_key_77;
            PyObject *tmp_dict_value_77;
            PyObject *tmp_dict_key_78;
            PyObject *tmp_dict_value_78;
            PyObject *tmp_dict_key_79;
            PyObject *tmp_dict_value_79;
            PyObject *tmp_dict_key_80;
            PyObject *tmp_dict_value_80;
            PyObject *tmp_dict_key_81;
            PyObject *tmp_dict_value_81;
            PyObject *tmp_dict_key_82;
            PyObject *tmp_dict_value_82;
            PyObject *tmp_dict_key_83;
            PyObject *tmp_dict_value_83;
            PyObject *tmp_dict_key_84;
            PyObject *tmp_dict_value_84;
            PyObject *tmp_dict_key_85;
            PyObject *tmp_dict_value_85;
            PyObject *tmp_dict_key_86;
            PyObject *tmp_dict_value_86;
            PyObject *tmp_dict_key_87;
            PyObject *tmp_dict_value_87;
            PyObject *tmp_dict_key_88;
            PyObject *tmp_dict_value_88;
            PyObject *tmp_dict_key_89;
            PyObject *tmp_dict_value_89;
            PyObject *tmp_dict_key_90;
            PyObject *tmp_dict_value_90;
            PyObject *tmp_dict_key_91;
            PyObject *tmp_dict_value_91;
            PyObject *tmp_dict_key_92;
            PyObject *tmp_dict_value_92;
            PyObject *tmp_dict_key_93;
            PyObject *tmp_dict_value_93;
            PyObject *tmp_dict_key_94;
            PyObject *tmp_dict_value_94;
            PyObject *tmp_dict_key_95;
            PyObject *tmp_dict_value_95;
            PyObject *tmp_dict_key_96;
            PyObject *tmp_dict_value_96;
            PyObject *tmp_dict_key_97;
            PyObject *tmp_dict_value_97;
            PyObject *tmp_dict_key_98;
            PyObject *tmp_dict_value_98;
            PyObject *tmp_dict_key_99;
            PyObject *tmp_dict_value_99;
            PyObject *tmp_dict_key_100;
            PyObject *tmp_dict_value_100;
            PyObject *tmp_dict_key_101;
            PyObject *tmp_dict_value_101;
            PyObject *tmp_dict_key_102;
            PyObject *tmp_dict_value_102;
            PyObject *tmp_dict_key_103;
            PyObject *tmp_dict_value_103;
            PyObject *tmp_dict_key_104;
            PyObject *tmp_dict_value_104;
            PyObject *tmp_dict_key_105;
            PyObject *tmp_dict_value_105;
            PyObject *tmp_dict_key_106;
            PyObject *tmp_dict_value_106;
            PyObject *tmp_dict_key_107;
            PyObject *tmp_dict_value_107;
            PyObject *tmp_dict_key_108;
            PyObject *tmp_dict_value_108;
            PyObject *tmp_dict_key_109;
            PyObject *tmp_dict_value_109;
            PyObject *tmp_dict_key_110;
            PyObject *tmp_dict_value_110;
            PyObject *tmp_dict_key_111;
            PyObject *tmp_dict_value_111;
            PyObject *tmp_dict_key_112;
            PyObject *tmp_dict_value_112;
            PyObject *tmp_dict_key_113;
            PyObject *tmp_dict_value_113;
            PyObject *tmp_dict_key_114;
            PyObject *tmp_dict_value_114;
            PyObject *tmp_dict_key_115;
            PyObject *tmp_dict_value_115;
            PyObject *tmp_dict_key_116;
            PyObject *tmp_dict_value_116;
            PyObject *tmp_dict_key_117;
            PyObject *tmp_dict_value_117;
            PyObject *tmp_dict_key_118;
            PyObject *tmp_dict_value_118;
            PyObject *tmp_dict_key_119;
            PyObject *tmp_dict_value_119;
            PyObject *tmp_dict_key_120;
            PyObject *tmp_dict_value_120;
            PyObject *tmp_dict_key_121;
            PyObject *tmp_dict_value_121;
            PyObject *tmp_dict_key_122;
            PyObject *tmp_dict_value_122;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[256];
            tmp_dict_key_3 = mod_consts[253];
            tmp_dict_value_3 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_3 == NULL)) {
                tmp_dict_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 425;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_3, tmp_dict_value_3);
            assert(!(tmp_res != 0));
            tmp_dict_key_3 = mod_consts[254];
            tmp_dict_value_3 = PyList_New(0);
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_3, tmp_dict_value_3);
            Py_DECREF(tmp_dict_value_3);
            assert(!(tmp_res != 0));
            tmp_dict_key_3 = mod_consts[255];
            tmp_dict_value_3 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_3 == NULL)) {
                tmp_dict_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 427;

                goto dict_build_exception_3;
            }
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_3, tmp_dict_value_3);
            assert(!(tmp_res != 0));
            goto dict_build_noexception_2;
            // Exception handling pass through code for dict_build:
            dict_build_exception_3:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_2:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[257];
            tmp_dict_key_4 = mod_consts[253];
            tmp_dict_value_4 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_4 == NULL)) {
                tmp_dict_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 432;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_4, tmp_dict_value_4);
            assert(!(tmp_res != 0));
            tmp_dict_key_4 = mod_consts[254];
            tmp_dict_value_4 = PyList_New(0);
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_4, tmp_dict_value_4);
            Py_DECREF(tmp_dict_value_4);
            assert(!(tmp_res != 0));
            tmp_dict_key_4 = mod_consts[255];
            tmp_dict_value_4 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_4 == NULL)) {
                tmp_dict_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 434;

                goto dict_build_exception_4;
            }
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_4, tmp_dict_value_4);
            assert(!(tmp_res != 0));
            goto dict_build_noexception_3;
            // Exception handling pass through code for dict_build:
            dict_build_exception_4:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_3:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[258];
            tmp_dict_key_5 = mod_consts[253];
            tmp_dict_value_5 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_5 == NULL)) {
                tmp_dict_value_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 439;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_17;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_5, tmp_dict_value_5);
                assert(!(tmp_res != 0));
                tmp_dict_key_5 = mod_consts[254];
                tmp_list_element_17 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[63]);

                if (unlikely(tmp_list_element_17 == NULL)) {
                    tmp_list_element_17 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[63]);
                }

                if (tmp_list_element_17 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 440;

                    goto dict_build_exception_5;
                }
                tmp_dict_value_5 = PyList_New(2);
                {
                    PyObject *tmp_expression_value_243;
                    PyList_SET_ITEM0(tmp_dict_value_5, 0, tmp_list_element_17);
                    tmp_expression_value_243 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_243 == NULL)) {
                        tmp_expression_value_243 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_243 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 440;

                        goto list_build_exception_17;
                    }
                    tmp_list_element_17 = LOOKUP_ATTRIBUTE(tmp_expression_value_243, mod_consts[84]);
                    if (tmp_list_element_17 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 440;

                        goto list_build_exception_17;
                    }
                    PyList_SET_ITEM(tmp_dict_value_5, 1, tmp_list_element_17);
                }
                goto list_build_noexception_17;
                // Exception handling pass through code for list_build:
                list_build_exception_17:;
                Py_DECREF(tmp_dict_value_5);
                goto dict_build_exception_5;
                // Finished with no exception for list_build:
                list_build_noexception_17:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_5, tmp_dict_value_5);
                Py_DECREF(tmp_dict_value_5);
                assert(!(tmp_res != 0));
                tmp_dict_key_5 = mod_consts[255];
                tmp_dict_value_5 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_5 == NULL)) {
                    tmp_dict_value_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_5 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 441;

                    goto dict_build_exception_5;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_5, tmp_dict_value_5);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_4;
            // Exception handling pass through code for dict_build:
            dict_build_exception_5:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_4:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[259];
            tmp_dict_key_6 = mod_consts[253];
            tmp_dict_value_6 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_6 == NULL)) {
                tmp_dict_value_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 447;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_18;
                PyObject *tmp_expression_value_244;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_6, tmp_dict_value_6);
                assert(!(tmp_res != 0));
                tmp_dict_key_6 = mod_consts[254];
                tmp_expression_value_244 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                if (unlikely(tmp_expression_value_244 == NULL)) {
                    tmp_expression_value_244 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                }

                if (tmp_expression_value_244 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 448;

                    goto dict_build_exception_6;
                }
                tmp_list_element_18 = LOOKUP_ATTRIBUTE(tmp_expression_value_244, mod_consts[97]);
                if (tmp_list_element_18 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 448;

                    goto dict_build_exception_6;
                }
                tmp_dict_value_6 = PyList_New(4);
                {
                    PyObject *tmp_expression_value_245;
                    PyObject *tmp_expression_value_246;
                    PyObject *tmp_called_value_54;
                    PyObject *tmp_args_element_value_65;
                    PyObject *tmp_expression_value_247;
                    PyList_SET_ITEM(tmp_dict_value_6, 0, tmp_list_element_18);
                    tmp_expression_value_245 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_245 == NULL)) {
                        tmp_expression_value_245 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_245 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 449;

                        goto list_build_exception_18;
                    }
                    tmp_list_element_18 = LOOKUP_ATTRIBUTE(tmp_expression_value_245, mod_consts[97]);
                    if (tmp_list_element_18 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 449;

                        goto list_build_exception_18;
                    }
                    PyList_SET_ITEM(tmp_dict_value_6, 1, tmp_list_element_18);
                    tmp_expression_value_246 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_246 == NULL)) {
                        tmp_expression_value_246 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_246 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 450;

                        goto list_build_exception_18;
                    }
                    tmp_list_element_18 = LOOKUP_ATTRIBUTE(tmp_expression_value_246, mod_consts[97]);
                    if (tmp_list_element_18 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 450;

                        goto list_build_exception_18;
                    }
                    PyList_SET_ITEM(tmp_dict_value_6, 2, tmp_list_element_18);
                    tmp_called_value_54 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_54 == NULL)) {
                        tmp_called_value_54 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_54 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 451;

                        goto list_build_exception_18;
                    }
                    tmp_expression_value_247 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_247 == NULL)) {
                        tmp_expression_value_247 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_247 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 451;

                        goto list_build_exception_18;
                    }
                    tmp_args_element_value_65 = LOOKUP_ATTRIBUTE(tmp_expression_value_247, mod_consts[167]);
                    if (tmp_args_element_value_65 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 451;

                        goto list_build_exception_18;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 451;
                    tmp_list_element_18 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_54, tmp_args_element_value_65);
                    Py_DECREF(tmp_args_element_value_65);
                    if (tmp_list_element_18 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 451;

                        goto list_build_exception_18;
                    }
                    PyList_SET_ITEM(tmp_dict_value_6, 3, tmp_list_element_18);
                }
                goto list_build_noexception_18;
                // Exception handling pass through code for list_build:
                list_build_exception_18:;
                Py_DECREF(tmp_dict_value_6);
                goto dict_build_exception_6;
                // Finished with no exception for list_build:
                list_build_noexception_18:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_6, tmp_dict_value_6);
                Py_DECREF(tmp_dict_value_6);
                assert(!(tmp_res != 0));
                tmp_dict_key_6 = mod_consts[255];
                tmp_dict_value_6 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_6 == NULL)) {
                    tmp_dict_value_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_6 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 452;

                    goto dict_build_exception_6;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_6, tmp_dict_value_6);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_5;
            // Exception handling pass through code for dict_build:
            dict_build_exception_6:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_5:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[260];
            tmp_dict_key_7 = mod_consts[253];
            tmp_dict_value_7 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_7 == NULL)) {
                tmp_dict_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_7 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 458;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_19;
                PyObject *tmp_expression_value_248;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_7, tmp_dict_value_7);
                assert(!(tmp_res != 0));
                tmp_dict_key_7 = mod_consts[254];
                tmp_expression_value_248 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                if (unlikely(tmp_expression_value_248 == NULL)) {
                    tmp_expression_value_248 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                }

                if (tmp_expression_value_248 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 459;

                    goto dict_build_exception_7;
                }
                tmp_list_element_19 = LOOKUP_ATTRIBUTE(tmp_expression_value_248, mod_consts[97]);
                if (tmp_list_element_19 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 459;

                    goto dict_build_exception_7;
                }
                tmp_dict_value_7 = PyList_New(4);
                {
                    PyObject *tmp_expression_value_249;
                    PyObject *tmp_expression_value_250;
                    PyObject *tmp_expression_value_251;
                    PyList_SET_ITEM(tmp_dict_value_7, 0, tmp_list_element_19);
                    tmp_expression_value_249 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_249 == NULL)) {
                        tmp_expression_value_249 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_249 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 460;

                        goto list_build_exception_19;
                    }
                    tmp_list_element_19 = LOOKUP_ATTRIBUTE(tmp_expression_value_249, mod_consts[97]);
                    if (tmp_list_element_19 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 460;

                        goto list_build_exception_19;
                    }
                    PyList_SET_ITEM(tmp_dict_value_7, 1, tmp_list_element_19);
                    tmp_expression_value_250 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_250 == NULL)) {
                        tmp_expression_value_250 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_250 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 461;

                        goto list_build_exception_19;
                    }
                    tmp_list_element_19 = LOOKUP_ATTRIBUTE(tmp_expression_value_250, mod_consts[97]);
                    if (tmp_list_element_19 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 461;

                        goto list_build_exception_19;
                    }
                    PyList_SET_ITEM(tmp_dict_value_7, 2, tmp_list_element_19);
                    tmp_expression_value_251 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_251 == NULL)) {
                        tmp_expression_value_251 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_251 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 462;

                        goto list_build_exception_19;
                    }
                    tmp_list_element_19 = LOOKUP_ATTRIBUTE(tmp_expression_value_251, mod_consts[84]);
                    if (tmp_list_element_19 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 462;

                        goto list_build_exception_19;
                    }
                    PyList_SET_ITEM(tmp_dict_value_7, 3, tmp_list_element_19);
                }
                goto list_build_noexception_19;
                // Exception handling pass through code for list_build:
                list_build_exception_19:;
                Py_DECREF(tmp_dict_value_7);
                goto dict_build_exception_7;
                // Finished with no exception for list_build:
                list_build_noexception_19:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_7, tmp_dict_value_7);
                Py_DECREF(tmp_dict_value_7);
                assert(!(tmp_res != 0));
                tmp_dict_key_7 = mod_consts[255];
                tmp_dict_value_7 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_7 == NULL)) {
                    tmp_dict_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_7 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 463;

                    goto dict_build_exception_7;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_7, tmp_dict_value_7);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_6;
            // Exception handling pass through code for dict_build:
            dict_build_exception_7:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_6:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[261];
            tmp_dict_key_8 = mod_consts[253];
            tmp_dict_value_8 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_8 == NULL)) {
                tmp_dict_value_8 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_8 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 468;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_20;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_8, tmp_dict_value_8);
                assert(!(tmp_res != 0));
                tmp_dict_key_8 = mod_consts[254];
                tmp_list_element_20 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[65]);

                if (unlikely(tmp_list_element_20 == NULL)) {
                    tmp_list_element_20 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[65]);
                }

                if (tmp_list_element_20 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 469;

                    goto dict_build_exception_8;
                }
                tmp_dict_value_8 = PyList_New(3);
                {
                    PyObject *tmp_expression_value_252;
                    PyList_SET_ITEM0(tmp_dict_value_8, 0, tmp_list_element_20);
                    tmp_list_element_20 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[69]);

                    if (unlikely(tmp_list_element_20 == NULL)) {
                        tmp_list_element_20 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[69]);
                    }

                    if (tmp_list_element_20 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 469;

                        goto list_build_exception_20;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_8, 1, tmp_list_element_20);
                    tmp_expression_value_252 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_252 == NULL)) {
                        tmp_expression_value_252 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_252 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 469;

                        goto list_build_exception_20;
                    }
                    tmp_list_element_20 = LOOKUP_ATTRIBUTE(tmp_expression_value_252, mod_consts[84]);
                    if (tmp_list_element_20 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 469;

                        goto list_build_exception_20;
                    }
                    PyList_SET_ITEM(tmp_dict_value_8, 2, tmp_list_element_20);
                }
                goto list_build_noexception_20;
                // Exception handling pass through code for list_build:
                list_build_exception_20:;
                Py_DECREF(tmp_dict_value_8);
                goto dict_build_exception_8;
                // Finished with no exception for list_build:
                list_build_noexception_20:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_8, tmp_dict_value_8);
                Py_DECREF(tmp_dict_value_8);
                assert(!(tmp_res != 0));
                tmp_dict_key_8 = mod_consts[255];
                tmp_dict_value_8 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_8 == NULL)) {
                    tmp_dict_value_8 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_8 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 470;

                    goto dict_build_exception_8;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_8, tmp_dict_value_8);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_7;
            // Exception handling pass through code for dict_build:
            dict_build_exception_8:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_7:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[262];
            tmp_dict_key_9 = mod_consts[253];
            tmp_dict_value_9 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_9 == NULL)) {
                tmp_dict_value_9 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_9 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 476;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_21;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_9, tmp_dict_value_9);
                assert(!(tmp_res != 0));
                tmp_dict_key_9 = mod_consts[254];
                tmp_list_element_21 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[242]);

                if (unlikely(tmp_list_element_21 == NULL)) {
                    tmp_list_element_21 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[242]);
                }

                if (tmp_list_element_21 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 477;

                    goto dict_build_exception_9;
                }
                tmp_dict_value_9 = PyList_New(2);
                {
                    PyObject *tmp_expression_value_253;
                    PyList_SET_ITEM0(tmp_dict_value_9, 0, tmp_list_element_21);
                    tmp_expression_value_253 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_253 == NULL)) {
                        tmp_expression_value_253 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_253 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 477;

                        goto list_build_exception_21;
                    }
                    tmp_list_element_21 = LOOKUP_ATTRIBUTE(tmp_expression_value_253, mod_consts[241]);
                    if (tmp_list_element_21 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 477;

                        goto list_build_exception_21;
                    }
                    PyList_SET_ITEM(tmp_dict_value_9, 1, tmp_list_element_21);
                }
                goto list_build_noexception_21;
                // Exception handling pass through code for list_build:
                list_build_exception_21:;
                Py_DECREF(tmp_dict_value_9);
                goto dict_build_exception_9;
                // Finished with no exception for list_build:
                list_build_noexception_21:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_9, tmp_dict_value_9);
                Py_DECREF(tmp_dict_value_9);
                assert(!(tmp_res != 0));
                tmp_dict_key_9 = mod_consts[255];
                tmp_dict_value_9 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_9 == NULL)) {
                    tmp_dict_value_9 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_9 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 478;

                    goto dict_build_exception_9;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_9, tmp_dict_value_9);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_8;
            // Exception handling pass through code for dict_build:
            dict_build_exception_9:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_8:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[263];
            tmp_dict_key_10 = mod_consts[253];
            tmp_dict_value_10 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_10 == NULL)) {
                tmp_dict_value_10 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_10 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 485;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_22;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_10, tmp_dict_value_10);
                assert(!(tmp_res != 0));
                tmp_dict_key_10 = mod_consts[254];
                tmp_list_element_22 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[65]);

                if (unlikely(tmp_list_element_22 == NULL)) {
                    tmp_list_element_22 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[65]);
                }

                if (tmp_list_element_22 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 486;

                    goto dict_build_exception_10;
                }
                tmp_dict_value_10 = PyList_New(3);
                {
                    PyObject *tmp_called_value_55;
                    PyObject *tmp_args_element_value_66;
                    PyObject *tmp_expression_value_254;
                    PyList_SET_ITEM0(tmp_dict_value_10, 0, tmp_list_element_22);
                    tmp_list_element_22 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[62]);

                    if (unlikely(tmp_list_element_22 == NULL)) {
                        tmp_list_element_22 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
                    }

                    if (tmp_list_element_22 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 486;

                        goto list_build_exception_22;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_10, 1, tmp_list_element_22);
                    tmp_called_value_55 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_55 == NULL)) {
                        tmp_called_value_55 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_55 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 486;

                        goto list_build_exception_22;
                    }
                    tmp_expression_value_254 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_254 == NULL)) {
                        tmp_expression_value_254 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_254 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 486;

                        goto list_build_exception_22;
                    }
                    tmp_args_element_value_66 = LOOKUP_ATTRIBUTE(tmp_expression_value_254, mod_consts[97]);
                    if (tmp_args_element_value_66 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 486;

                        goto list_build_exception_22;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 486;
                    tmp_list_element_22 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_55, tmp_args_element_value_66);
                    Py_DECREF(tmp_args_element_value_66);
                    if (tmp_list_element_22 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 486;

                        goto list_build_exception_22;
                    }
                    PyList_SET_ITEM(tmp_dict_value_10, 2, tmp_list_element_22);
                }
                goto list_build_noexception_22;
                // Exception handling pass through code for list_build:
                list_build_exception_22:;
                Py_DECREF(tmp_dict_value_10);
                goto dict_build_exception_10;
                // Finished with no exception for list_build:
                list_build_noexception_22:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_10, tmp_dict_value_10);
                Py_DECREF(tmp_dict_value_10);
                assert(!(tmp_res != 0));
                tmp_dict_key_10 = mod_consts[255];
                tmp_dict_value_10 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_10 == NULL)) {
                    tmp_dict_value_10 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_10 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 487;

                    goto dict_build_exception_10;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_10, tmp_dict_value_10);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_9;
            // Exception handling pass through code for dict_build:
            dict_build_exception_10:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_9:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[264];
            tmp_dict_key_11 = mod_consts[253];
            tmp_dict_value_11 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_11 == NULL)) {
                tmp_dict_value_11 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_11 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 494;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_23;
                PyObject *tmp_expression_value_255;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_11, tmp_dict_value_11);
                assert(!(tmp_res != 0));
                tmp_dict_key_11 = mod_consts[254];
                tmp_expression_value_255 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                if (unlikely(tmp_expression_value_255 == NULL)) {
                    tmp_expression_value_255 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                }

                if (tmp_expression_value_255 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 495;

                    goto dict_build_exception_11;
                }
                tmp_list_element_23 = LOOKUP_ATTRIBUTE(tmp_expression_value_255, mod_consts[97]);
                if (tmp_list_element_23 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 495;

                    goto dict_build_exception_11;
                }
                tmp_dict_value_11 = PyList_New(5);
                {
                    PyObject *tmp_expression_value_256;
                    PyObject *tmp_expression_value_257;
                    PyObject *tmp_called_value_56;
                    PyObject *tmp_args_element_value_67;
                    PyObject *tmp_expression_value_258;
                    PyList_SET_ITEM(tmp_dict_value_11, 0, tmp_list_element_23);
                    tmp_list_element_23 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[65]);

                    if (unlikely(tmp_list_element_23 == NULL)) {
                        tmp_list_element_23 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[65]);
                    }

                    if (tmp_list_element_23 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 495;

                        goto list_build_exception_23;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_11, 1, tmp_list_element_23);
                    tmp_expression_value_256 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_256 == NULL)) {
                        tmp_expression_value_256 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_256 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 495;

                        goto list_build_exception_23;
                    }
                    tmp_list_element_23 = LOOKUP_ATTRIBUTE(tmp_expression_value_256, mod_consts[97]);
                    if (tmp_list_element_23 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 495;

                        goto list_build_exception_23;
                    }
                    PyList_SET_ITEM(tmp_dict_value_11, 2, tmp_list_element_23);
                    tmp_expression_value_257 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_257 == NULL)) {
                        tmp_expression_value_257 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_257 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 495;

                        goto list_build_exception_23;
                    }
                    tmp_list_element_23 = LOOKUP_ATTRIBUTE(tmp_expression_value_257, mod_consts[97]);
                    if (tmp_list_element_23 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 495;

                        goto list_build_exception_23;
                    }
                    PyList_SET_ITEM(tmp_dict_value_11, 3, tmp_list_element_23);
                    tmp_called_value_56 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_56 == NULL)) {
                        tmp_called_value_56 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_56 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 496;

                        goto list_build_exception_23;
                    }
                    tmp_expression_value_258 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_258 == NULL)) {
                        tmp_expression_value_258 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_258 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 496;

                        goto list_build_exception_23;
                    }
                    tmp_args_element_value_67 = LOOKUP_ATTRIBUTE(tmp_expression_value_258, mod_consts[167]);
                    if (tmp_args_element_value_67 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 496;

                        goto list_build_exception_23;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 496;
                    tmp_list_element_23 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_56, tmp_args_element_value_67);
                    Py_DECREF(tmp_args_element_value_67);
                    if (tmp_list_element_23 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 496;

                        goto list_build_exception_23;
                    }
                    PyList_SET_ITEM(tmp_dict_value_11, 4, tmp_list_element_23);
                }
                goto list_build_noexception_23;
                // Exception handling pass through code for list_build:
                list_build_exception_23:;
                Py_DECREF(tmp_dict_value_11);
                goto dict_build_exception_11;
                // Finished with no exception for list_build:
                list_build_noexception_23:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_11, tmp_dict_value_11);
                Py_DECREF(tmp_dict_value_11);
                assert(!(tmp_res != 0));
                tmp_dict_key_11 = mod_consts[255];
                tmp_dict_value_11 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_11 == NULL)) {
                    tmp_dict_value_11 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_11 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 497;

                    goto dict_build_exception_11;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_11, tmp_dict_value_11);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_10;
            // Exception handling pass through code for dict_build:
            dict_build_exception_11:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_10:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[265];
            tmp_dict_key_12 = mod_consts[253];
            tmp_dict_value_12 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_12 == NULL)) {
                tmp_dict_value_12 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_12 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 510;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_24;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_12, tmp_dict_value_12);
                assert(!(tmp_res != 0));
                tmp_dict_key_12 = mod_consts[254];
                tmp_list_element_24 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_24 == NULL)) {
                    tmp_list_element_24 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_24 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 511;

                    goto dict_build_exception_12;
                }
                tmp_dict_value_12 = PyList_New(4);
                {
                    PyObject *tmp_expression_value_259;
                    PyObject *tmp_called_value_57;
                    PyObject *tmp_args_element_value_68;
                    PyObject *tmp_called_value_58;
                    PyObject *tmp_args_element_value_69;
                    PyList_SET_ITEM0(tmp_dict_value_12, 0, tmp_list_element_24);
                    tmp_expression_value_259 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_259 == NULL)) {
                        tmp_expression_value_259 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_259 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 512;

                        goto list_build_exception_24;
                    }
                    tmp_list_element_24 = LOOKUP_ATTRIBUTE(tmp_expression_value_259, mod_consts[54]);
                    if (tmp_list_element_24 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 512;

                        goto list_build_exception_24;
                    }
                    PyList_SET_ITEM(tmp_dict_value_12, 1, tmp_list_element_24);
                    tmp_called_value_57 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_57 == NULL)) {
                        tmp_called_value_57 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_57 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 513;

                        goto list_build_exception_24;
                    }
                    tmp_args_element_value_68 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[65]);

                    if (unlikely(tmp_args_element_value_68 == NULL)) {
                        tmp_args_element_value_68 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[65]);
                    }

                    if (tmp_args_element_value_68 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 513;

                        goto list_build_exception_24;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 513;
                    tmp_list_element_24 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_57, tmp_args_element_value_68);
                    if (tmp_list_element_24 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 513;

                        goto list_build_exception_24;
                    }
                    PyList_SET_ITEM(tmp_dict_value_12, 2, tmp_list_element_24);
                    tmp_called_value_58 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_58 == NULL)) {
                        tmp_called_value_58 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_58 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 514;

                        goto list_build_exception_24;
                    }
                    tmp_args_element_value_69 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                    if (unlikely(tmp_args_element_value_69 == NULL)) {
                        tmp_args_element_value_69 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                    }

                    if (tmp_args_element_value_69 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 514;

                        goto list_build_exception_24;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 514;
                    tmp_list_element_24 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_58, tmp_args_element_value_69);
                    if (tmp_list_element_24 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 514;

                        goto list_build_exception_24;
                    }
                    PyList_SET_ITEM(tmp_dict_value_12, 3, tmp_list_element_24);
                }
                goto list_build_noexception_24;
                // Exception handling pass through code for list_build:
                list_build_exception_24:;
                Py_DECREF(tmp_dict_value_12);
                goto dict_build_exception_12;
                // Finished with no exception for list_build:
                list_build_noexception_24:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_12, tmp_dict_value_12);
                Py_DECREF(tmp_dict_value_12);
                assert(!(tmp_res != 0));
                tmp_dict_key_12 = mod_consts[255];
                tmp_dict_value_12 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_12 == NULL)) {
                    tmp_dict_value_12 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_12 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 515;

                    goto dict_build_exception_12;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_12, tmp_dict_value_12);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_11;
            // Exception handling pass through code for dict_build:
            dict_build_exception_12:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_11:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[266];
            tmp_dict_key_13 = mod_consts[253];
            tmp_dict_value_13 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_13 == NULL)) {
                tmp_dict_value_13 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_13 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 521;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_25;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_13, tmp_dict_value_13);
                assert(!(tmp_res != 0));
                tmp_dict_key_13 = mod_consts[254];
                tmp_list_element_25 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_25 == NULL)) {
                    tmp_list_element_25 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_25 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 522;

                    goto dict_build_exception_13;
                }
                tmp_dict_value_13 = PyList_New(1);
                PyList_SET_ITEM0(tmp_dict_value_13, 0, tmp_list_element_25);
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_13, tmp_dict_value_13);
                Py_DECREF(tmp_dict_value_13);
                assert(!(tmp_res != 0));
                tmp_dict_key_13 = mod_consts[255];
                tmp_dict_value_13 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_13 == NULL)) {
                    tmp_dict_value_13 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_13 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 523;

                    goto dict_build_exception_13;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_13, tmp_dict_value_13);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_12;
            // Exception handling pass through code for dict_build:
            dict_build_exception_13:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_12:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[267];
            tmp_dict_key_14 = mod_consts[253];
            tmp_dict_value_14 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

            if (unlikely(tmp_dict_value_14 == NULL)) {
                tmp_dict_value_14 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
            }

            if (tmp_dict_value_14 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 529;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_26;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_14, tmp_dict_value_14);
                assert(!(tmp_res != 0));
                tmp_dict_key_14 = mod_consts[254];
                tmp_list_element_26 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_26 == NULL)) {
                    tmp_list_element_26 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_26 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 530;

                    goto dict_build_exception_14;
                }
                tmp_dict_value_14 = PyList_New(1);
                PyList_SET_ITEM0(tmp_dict_value_14, 0, tmp_list_element_26);
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_14, tmp_dict_value_14);
                Py_DECREF(tmp_dict_value_14);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_13;
            // Exception handling pass through code for dict_build:
            dict_build_exception_14:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_13:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[268];
            tmp_dict_key_15 = mod_consts[253];
            tmp_dict_value_15 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

            if (unlikely(tmp_dict_value_15 == NULL)) {
                tmp_dict_value_15 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
            }

            if (tmp_dict_value_15 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 536;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_27;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_15, tmp_dict_value_15);
                assert(!(tmp_res != 0));
                tmp_dict_key_15 = mod_consts[254];
                tmp_list_element_27 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_27 == NULL)) {
                    tmp_list_element_27 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_27 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 537;

                    goto dict_build_exception_15;
                }
                tmp_dict_value_15 = PyList_New(1);
                PyList_SET_ITEM0(tmp_dict_value_15, 0, tmp_list_element_27);
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_15, tmp_dict_value_15);
                Py_DECREF(tmp_dict_value_15);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_14;
            // Exception handling pass through code for dict_build:
            dict_build_exception_15:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_14:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[269];
            tmp_dict_key_16 = mod_consts[253];
            tmp_dict_value_16 = Py_None;
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_28;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_16, tmp_dict_value_16);
                assert(!(tmp_res != 0));
                tmp_dict_key_16 = mod_consts[254];
                tmp_list_element_28 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_28 == NULL)) {
                    tmp_list_element_28 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_28 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 545;

                    goto dict_build_exception_16;
                }
                tmp_dict_value_16 = PyList_New(2);
                PyList_SET_ITEM0(tmp_dict_value_16, 0, tmp_list_element_28);
                tmp_list_element_28 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_28 == NULL)) {
                    tmp_list_element_28 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_28 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 545;

                    goto list_build_exception_25;
                }
                PyList_SET_ITEM0(tmp_dict_value_16, 1, tmp_list_element_28);
                goto list_build_noexception_25;
                // Exception handling pass through code for list_build:
                list_build_exception_25:;
                Py_DECREF(tmp_dict_value_16);
                goto dict_build_exception_16;
                // Finished with no exception for list_build:
                list_build_noexception_25:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_16, tmp_dict_value_16);
                Py_DECREF(tmp_dict_value_16);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_15;
            // Exception handling pass through code for dict_build:
            dict_build_exception_16:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_15:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[270];
            tmp_dict_key_17 = mod_consts[253];
            tmp_dict_value_17 = Py_None;
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_29;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_17, tmp_dict_value_17);
                assert(!(tmp_res != 0));
                tmp_dict_key_17 = mod_consts[254];
                tmp_list_element_29 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_29 == NULL)) {
                    tmp_list_element_29 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_29 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 553;

                    goto dict_build_exception_17;
                }
                tmp_dict_value_17 = PyList_New(2);
                PyList_SET_ITEM0(tmp_dict_value_17, 0, tmp_list_element_29);
                tmp_list_element_29 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_29 == NULL)) {
                    tmp_list_element_29 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_29 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 553;

                    goto list_build_exception_26;
                }
                PyList_SET_ITEM0(tmp_dict_value_17, 1, tmp_list_element_29);
                goto list_build_noexception_26;
                // Exception handling pass through code for list_build:
                list_build_exception_26:;
                Py_DECREF(tmp_dict_value_17);
                goto dict_build_exception_17;
                // Finished with no exception for list_build:
                list_build_noexception_26:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_17, tmp_dict_value_17);
                Py_DECREF(tmp_dict_value_17);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_16;
            // Exception handling pass through code for dict_build:
            dict_build_exception_17:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_16:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[271];
            tmp_dict_key_18 = mod_consts[253];
            tmp_dict_value_18 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

            if (unlikely(tmp_dict_value_18 == NULL)) {
                tmp_dict_value_18 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
            }

            if (tmp_dict_value_18 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 560;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_30;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_18, tmp_dict_value_18);
                assert(!(tmp_res != 0));
                tmp_dict_key_18 = mod_consts[254];
                tmp_list_element_30 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_30 == NULL)) {
                    tmp_list_element_30 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_30 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 561;

                    goto dict_build_exception_18;
                }
                tmp_dict_value_18 = PyList_New(2);
                PyList_SET_ITEM0(tmp_dict_value_18, 0, tmp_list_element_30);
                tmp_list_element_30 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_30 == NULL)) {
                    tmp_list_element_30 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_30 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 561;

                    goto list_build_exception_27;
                }
                PyList_SET_ITEM0(tmp_dict_value_18, 1, tmp_list_element_30);
                goto list_build_noexception_27;
                // Exception handling pass through code for list_build:
                list_build_exception_27:;
                Py_DECREF(tmp_dict_value_18);
                goto dict_build_exception_18;
                // Finished with no exception for list_build:
                list_build_noexception_27:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_18, tmp_dict_value_18);
                Py_DECREF(tmp_dict_value_18);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_17;
            // Exception handling pass through code for dict_build:
            dict_build_exception_18:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_17:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[272];
            tmp_dict_key_19 = mod_consts[253];
            tmp_dict_value_19 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

            if (unlikely(tmp_dict_value_19 == NULL)) {
                tmp_dict_value_19 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
            }

            if (tmp_dict_value_19 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 568;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_31;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_19, tmp_dict_value_19);
                assert(!(tmp_res != 0));
                tmp_dict_key_19 = mod_consts[254];
                tmp_list_element_31 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_31 == NULL)) {
                    tmp_list_element_31 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_31 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 569;

                    goto dict_build_exception_19;
                }
                tmp_dict_value_19 = PyList_New(2);
                PyList_SET_ITEM0(tmp_dict_value_19, 0, tmp_list_element_31);
                tmp_list_element_31 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_31 == NULL)) {
                    tmp_list_element_31 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_31 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 569;

                    goto list_build_exception_28;
                }
                PyList_SET_ITEM0(tmp_dict_value_19, 1, tmp_list_element_31);
                goto list_build_noexception_28;
                // Exception handling pass through code for list_build:
                list_build_exception_28:;
                Py_DECREF(tmp_dict_value_19);
                goto dict_build_exception_19;
                // Finished with no exception for list_build:
                list_build_noexception_28:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_19, tmp_dict_value_19);
                Py_DECREF(tmp_dict_value_19);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_18;
            // Exception handling pass through code for dict_build:
            dict_build_exception_19:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_18:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[273];
            tmp_dict_key_20 = mod_consts[253];
            tmp_dict_value_20 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

            if (unlikely(tmp_dict_value_20 == NULL)) {
                tmp_dict_value_20 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
            }

            if (tmp_dict_value_20 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 576;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_32;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_20, tmp_dict_value_20);
                assert(!(tmp_res != 0));
                tmp_dict_key_20 = mod_consts[254];
                tmp_list_element_32 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_32 == NULL)) {
                    tmp_list_element_32 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_32 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 577;

                    goto dict_build_exception_20;
                }
                tmp_dict_value_20 = PyList_New(2);
                PyList_SET_ITEM0(tmp_dict_value_20, 0, tmp_list_element_32);
                tmp_list_element_32 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_32 == NULL)) {
                    tmp_list_element_32 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_32 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 577;

                    goto list_build_exception_29;
                }
                PyList_SET_ITEM0(tmp_dict_value_20, 1, tmp_list_element_32);
                goto list_build_noexception_29;
                // Exception handling pass through code for list_build:
                list_build_exception_29:;
                Py_DECREF(tmp_dict_value_20);
                goto dict_build_exception_20;
                // Finished with no exception for list_build:
                list_build_noexception_29:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_20, tmp_dict_value_20);
                Py_DECREF(tmp_dict_value_20);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_19;
            // Exception handling pass through code for dict_build:
            dict_build_exception_20:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_19:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[274];
            tmp_dict_key_21 = mod_consts[253];
            tmp_dict_value_21 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

            if (unlikely(tmp_dict_value_21 == NULL)) {
                tmp_dict_value_21 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
            }

            if (tmp_dict_value_21 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 584;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_33;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_21, tmp_dict_value_21);
                assert(!(tmp_res != 0));
                tmp_dict_key_21 = mod_consts[254];
                tmp_list_element_33 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_33 == NULL)) {
                    tmp_list_element_33 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_33 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 585;

                    goto dict_build_exception_21;
                }
                tmp_dict_value_21 = PyList_New(2);
                PyList_SET_ITEM0(tmp_dict_value_21, 0, tmp_list_element_33);
                tmp_list_element_33 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_33 == NULL)) {
                    tmp_list_element_33 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_33 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 585;

                    goto list_build_exception_30;
                }
                PyList_SET_ITEM0(tmp_dict_value_21, 1, tmp_list_element_33);
                goto list_build_noexception_30;
                // Exception handling pass through code for list_build:
                list_build_exception_30:;
                Py_DECREF(tmp_dict_value_21);
                goto dict_build_exception_21;
                // Finished with no exception for list_build:
                list_build_noexception_30:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_21, tmp_dict_value_21);
                Py_DECREF(tmp_dict_value_21);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_20;
            // Exception handling pass through code for dict_build:
            dict_build_exception_21:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_20:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[275];
            tmp_dict_key_22 = mod_consts[253];
            tmp_dict_value_22 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

            if (unlikely(tmp_dict_value_22 == NULL)) {
                tmp_dict_value_22 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
            }

            if (tmp_dict_value_22 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 593;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_34;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_22, tmp_dict_value_22);
                assert(!(tmp_res != 0));
                tmp_dict_key_22 = mod_consts[254];
                tmp_list_element_34 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_34 == NULL)) {
                    tmp_list_element_34 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_34 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 594;

                    goto dict_build_exception_22;
                }
                tmp_dict_value_22 = PyList_New(3);
                PyList_SET_ITEM0(tmp_dict_value_22, 0, tmp_list_element_34);
                tmp_list_element_34 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_34 == NULL)) {
                    tmp_list_element_34 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_34 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 594;

                    goto list_build_exception_31;
                }
                PyList_SET_ITEM0(tmp_dict_value_22, 1, tmp_list_element_34);
                tmp_list_element_34 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_34 == NULL)) {
                    tmp_list_element_34 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_34 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 594;

                    goto list_build_exception_31;
                }
                PyList_SET_ITEM0(tmp_dict_value_22, 2, tmp_list_element_34);
                goto list_build_noexception_31;
                // Exception handling pass through code for list_build:
                list_build_exception_31:;
                Py_DECREF(tmp_dict_value_22);
                goto dict_build_exception_22;
                // Finished with no exception for list_build:
                list_build_noexception_31:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_22, tmp_dict_value_22);
                Py_DECREF(tmp_dict_value_22);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_21;
            // Exception handling pass through code for dict_build:
            dict_build_exception_22:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_21:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[276];
            tmp_dict_key_23 = mod_consts[253];
            tmp_dict_value_23 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

            if (unlikely(tmp_dict_value_23 == NULL)) {
                tmp_dict_value_23 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
            }

            if (tmp_dict_value_23 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 602;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_35;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_23, tmp_dict_value_23);
                assert(!(tmp_res != 0));
                tmp_dict_key_23 = mod_consts[254];
                tmp_list_element_35 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_35 == NULL)) {
                    tmp_list_element_35 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_35 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 603;

                    goto dict_build_exception_23;
                }
                tmp_dict_value_23 = PyList_New(3);
                PyList_SET_ITEM0(tmp_dict_value_23, 0, tmp_list_element_35);
                tmp_list_element_35 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_35 == NULL)) {
                    tmp_list_element_35 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_35 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 603;

                    goto list_build_exception_32;
                }
                PyList_SET_ITEM0(tmp_dict_value_23, 1, tmp_list_element_35);
                tmp_list_element_35 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_35 == NULL)) {
                    tmp_list_element_35 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_35 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 603;

                    goto list_build_exception_32;
                }
                PyList_SET_ITEM0(tmp_dict_value_23, 2, tmp_list_element_35);
                goto list_build_noexception_32;
                // Exception handling pass through code for list_build:
                list_build_exception_32:;
                Py_DECREF(tmp_dict_value_23);
                goto dict_build_exception_23;
                // Finished with no exception for list_build:
                list_build_noexception_32:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_23, tmp_dict_value_23);
                Py_DECREF(tmp_dict_value_23);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_22;
            // Exception handling pass through code for dict_build:
            dict_build_exception_23:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_22:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[277];
            tmp_dict_key_24 = mod_consts[253];
            tmp_dict_value_24 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

            if (unlikely(tmp_dict_value_24 == NULL)) {
                tmp_dict_value_24 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
            }

            if (tmp_dict_value_24 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 611;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_36;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_24, tmp_dict_value_24);
                assert(!(tmp_res != 0));
                tmp_dict_key_24 = mod_consts[254];
                tmp_list_element_36 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_36 == NULL)) {
                    tmp_list_element_36 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_36 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 612;

                    goto dict_build_exception_24;
                }
                tmp_dict_value_24 = PyList_New(3);
                PyList_SET_ITEM0(tmp_dict_value_24, 0, tmp_list_element_36);
                tmp_list_element_36 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_36 == NULL)) {
                    tmp_list_element_36 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_36 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 612;

                    goto list_build_exception_33;
                }
                PyList_SET_ITEM0(tmp_dict_value_24, 1, tmp_list_element_36);
                tmp_list_element_36 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_36 == NULL)) {
                    tmp_list_element_36 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_36 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 612;

                    goto list_build_exception_33;
                }
                PyList_SET_ITEM0(tmp_dict_value_24, 2, tmp_list_element_36);
                goto list_build_noexception_33;
                // Exception handling pass through code for list_build:
                list_build_exception_33:;
                Py_DECREF(tmp_dict_value_24);
                goto dict_build_exception_24;
                // Finished with no exception for list_build:
                list_build_noexception_33:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_24, tmp_dict_value_24);
                Py_DECREF(tmp_dict_value_24);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_23;
            // Exception handling pass through code for dict_build:
            dict_build_exception_24:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_23:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[278];
            tmp_dict_key_25 = mod_consts[253];
            tmp_dict_value_25 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

            if (unlikely(tmp_dict_value_25 == NULL)) {
                tmp_dict_value_25 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
            }

            if (tmp_dict_value_25 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 620;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_37;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_25, tmp_dict_value_25);
                assert(!(tmp_res != 0));
                tmp_dict_key_25 = mod_consts[254];
                tmp_list_element_37 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_37 == NULL)) {
                    tmp_list_element_37 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_37 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 621;

                    goto dict_build_exception_25;
                }
                tmp_dict_value_25 = PyList_New(3);
                PyList_SET_ITEM0(tmp_dict_value_25, 0, tmp_list_element_37);
                tmp_list_element_37 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_37 == NULL)) {
                    tmp_list_element_37 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_37 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 621;

                    goto list_build_exception_34;
                }
                PyList_SET_ITEM0(tmp_dict_value_25, 1, tmp_list_element_37);
                tmp_list_element_37 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_37 == NULL)) {
                    tmp_list_element_37 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_37 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 621;

                    goto list_build_exception_34;
                }
                PyList_SET_ITEM0(tmp_dict_value_25, 2, tmp_list_element_37);
                goto list_build_noexception_34;
                // Exception handling pass through code for list_build:
                list_build_exception_34:;
                Py_DECREF(tmp_dict_value_25);
                goto dict_build_exception_25;
                // Finished with no exception for list_build:
                list_build_noexception_34:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_25, tmp_dict_value_25);
                Py_DECREF(tmp_dict_value_25);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_24;
            // Exception handling pass through code for dict_build:
            dict_build_exception_25:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_24:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[279];
            tmp_dict_key_26 = mod_consts[253];
            tmp_dict_value_26 = Py_None;
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_38;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_26, tmp_dict_value_26);
                assert(!(tmp_res != 0));
                tmp_dict_key_26 = mod_consts[254];
                tmp_list_element_38 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_38 == NULL)) {
                    tmp_list_element_38 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_38 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 629;

                    goto dict_build_exception_26;
                }
                tmp_dict_value_26 = PyList_New(2);
                PyList_SET_ITEM0(tmp_dict_value_26, 0, tmp_list_element_38);
                tmp_list_element_38 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_38 == NULL)) {
                    tmp_list_element_38 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_38 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 629;

                    goto list_build_exception_35;
                }
                PyList_SET_ITEM0(tmp_dict_value_26, 1, tmp_list_element_38);
                goto list_build_noexception_35;
                // Exception handling pass through code for list_build:
                list_build_exception_35:;
                Py_DECREF(tmp_dict_value_26);
                goto dict_build_exception_26;
                // Finished with no exception for list_build:
                list_build_noexception_35:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_26, tmp_dict_value_26);
                Py_DECREF(tmp_dict_value_26);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_25;
            // Exception handling pass through code for dict_build:
            dict_build_exception_26:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_25:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[280];
            tmp_dict_key_27 = mod_consts[253];
            tmp_dict_value_27 = Py_None;
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_39;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_27, tmp_dict_value_27);
                assert(!(tmp_res != 0));
                tmp_dict_key_27 = mod_consts[254];
                tmp_list_element_39 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_39 == NULL)) {
                    tmp_list_element_39 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_39 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 637;

                    goto dict_build_exception_27;
                }
                tmp_dict_value_27 = PyList_New(2);
                PyList_SET_ITEM0(tmp_dict_value_27, 0, tmp_list_element_39);
                tmp_list_element_39 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_39 == NULL)) {
                    tmp_list_element_39 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_39 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 637;

                    goto list_build_exception_36;
                }
                PyList_SET_ITEM0(tmp_dict_value_27, 1, tmp_list_element_39);
                goto list_build_noexception_36;
                // Exception handling pass through code for list_build:
                list_build_exception_36:;
                Py_DECREF(tmp_dict_value_27);
                goto dict_build_exception_27;
                // Finished with no exception for list_build:
                list_build_noexception_36:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_27, tmp_dict_value_27);
                Py_DECREF(tmp_dict_value_27);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_26;
            // Exception handling pass through code for dict_build:
            dict_build_exception_27:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_26:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[281];
            tmp_dict_key_28 = mod_consts[253];
            tmp_dict_value_28 = Py_None;
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_40;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_28, tmp_dict_value_28);
                assert(!(tmp_res != 0));
                tmp_dict_key_28 = mod_consts[254];
                tmp_list_element_40 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_40 == NULL)) {
                    tmp_list_element_40 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_40 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 645;

                    goto dict_build_exception_28;
                }
                tmp_dict_value_28 = PyList_New(2);
                PyList_SET_ITEM0(tmp_dict_value_28, 0, tmp_list_element_40);
                tmp_list_element_40 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_40 == NULL)) {
                    tmp_list_element_40 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_40 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 645;

                    goto list_build_exception_37;
                }
                PyList_SET_ITEM0(tmp_dict_value_28, 1, tmp_list_element_40);
                goto list_build_noexception_37;
                // Exception handling pass through code for list_build:
                list_build_exception_37:;
                Py_DECREF(tmp_dict_value_28);
                goto dict_build_exception_28;
                // Finished with no exception for list_build:
                list_build_noexception_37:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_28, tmp_dict_value_28);
                Py_DECREF(tmp_dict_value_28);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_27;
            // Exception handling pass through code for dict_build:
            dict_build_exception_28:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_27:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[282];
            tmp_dict_key_29 = mod_consts[253];
            tmp_dict_value_29 = Py_None;
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_41;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_29, tmp_dict_value_29);
                assert(!(tmp_res != 0));
                tmp_dict_key_29 = mod_consts[254];
                tmp_list_element_41 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_41 == NULL)) {
                    tmp_list_element_41 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_41 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 653;

                    goto dict_build_exception_29;
                }
                tmp_dict_value_29 = PyList_New(2);
                PyList_SET_ITEM0(tmp_dict_value_29, 0, tmp_list_element_41);
                tmp_list_element_41 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_41 == NULL)) {
                    tmp_list_element_41 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_41 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 653;

                    goto list_build_exception_38;
                }
                PyList_SET_ITEM0(tmp_dict_value_29, 1, tmp_list_element_41);
                goto list_build_noexception_38;
                // Exception handling pass through code for list_build:
                list_build_exception_38:;
                Py_DECREF(tmp_dict_value_29);
                goto dict_build_exception_29;
                // Finished with no exception for list_build:
                list_build_noexception_38:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_29, tmp_dict_value_29);
                Py_DECREF(tmp_dict_value_29);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_28;
            // Exception handling pass through code for dict_build:
            dict_build_exception_29:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_28:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[283];
            tmp_dict_key_30 = mod_consts[253];
            tmp_dict_value_30 = Py_None;
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_42;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_30, tmp_dict_value_30);
                assert(!(tmp_res != 0));
                tmp_dict_key_30 = mod_consts[254];
                tmp_list_element_42 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_42 == NULL)) {
                    tmp_list_element_42 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_42 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 661;

                    goto dict_build_exception_30;
                }
                tmp_dict_value_30 = PyList_New(2);
                PyList_SET_ITEM0(tmp_dict_value_30, 0, tmp_list_element_42);
                tmp_list_element_42 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_42 == NULL)) {
                    tmp_list_element_42 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_42 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 661;

                    goto list_build_exception_39;
                }
                PyList_SET_ITEM0(tmp_dict_value_30, 1, tmp_list_element_42);
                goto list_build_noexception_39;
                // Exception handling pass through code for list_build:
                list_build_exception_39:;
                Py_DECREF(tmp_dict_value_30);
                goto dict_build_exception_30;
                // Finished with no exception for list_build:
                list_build_noexception_39:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_30, tmp_dict_value_30);
                Py_DECREF(tmp_dict_value_30);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_29;
            // Exception handling pass through code for dict_build:
            dict_build_exception_30:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_29:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[284];
            tmp_dict_key_31 = mod_consts[253];
            tmp_dict_value_31 = Py_None;
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_43;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_31, tmp_dict_value_31);
                assert(!(tmp_res != 0));
                tmp_dict_key_31 = mod_consts[254];
                tmp_list_element_43 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_43 == NULL)) {
                    tmp_list_element_43 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_43 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 669;

                    goto dict_build_exception_31;
                }
                tmp_dict_value_31 = PyList_New(2);
                PyList_SET_ITEM0(tmp_dict_value_31, 0, tmp_list_element_43);
                tmp_list_element_43 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_43 == NULL)) {
                    tmp_list_element_43 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_43 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 669;

                    goto list_build_exception_40;
                }
                PyList_SET_ITEM0(tmp_dict_value_31, 1, tmp_list_element_43);
                goto list_build_noexception_40;
                // Exception handling pass through code for list_build:
                list_build_exception_40:;
                Py_DECREF(tmp_dict_value_31);
                goto dict_build_exception_31;
                // Finished with no exception for list_build:
                list_build_noexception_40:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_31, tmp_dict_value_31);
                Py_DECREF(tmp_dict_value_31);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_30;
            // Exception handling pass through code for dict_build:
            dict_build_exception_31:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_30:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[285];
            tmp_dict_key_32 = mod_consts[253];
            tmp_dict_value_32 = Py_None;
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_44;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_32, tmp_dict_value_32);
                assert(!(tmp_res != 0));
                tmp_dict_key_32 = mod_consts[254];
                tmp_list_element_44 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_44 == NULL)) {
                    tmp_list_element_44 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_44 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 677;

                    goto dict_build_exception_32;
                }
                tmp_dict_value_32 = PyList_New(2);
                PyList_SET_ITEM0(tmp_dict_value_32, 0, tmp_list_element_44);
                tmp_list_element_44 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_44 == NULL)) {
                    tmp_list_element_44 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_44 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 677;

                    goto list_build_exception_41;
                }
                PyList_SET_ITEM0(tmp_dict_value_32, 1, tmp_list_element_44);
                goto list_build_noexception_41;
                // Exception handling pass through code for list_build:
                list_build_exception_41:;
                Py_DECREF(tmp_dict_value_32);
                goto dict_build_exception_32;
                // Finished with no exception for list_build:
                list_build_noexception_41:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_32, tmp_dict_value_32);
                Py_DECREF(tmp_dict_value_32);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_31;
            // Exception handling pass through code for dict_build:
            dict_build_exception_32:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_31:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[286];
            tmp_dict_key_33 = mod_consts[253];
            tmp_dict_value_33 = Py_None;
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_45;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_33, tmp_dict_value_33);
                assert(!(tmp_res != 0));
                tmp_dict_key_33 = mod_consts[254];
                tmp_list_element_45 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_45 == NULL)) {
                    tmp_list_element_45 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_45 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 685;

                    goto dict_build_exception_33;
                }
                tmp_dict_value_33 = PyList_New(2);
                PyList_SET_ITEM0(tmp_dict_value_33, 0, tmp_list_element_45);
                tmp_list_element_45 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_45 == NULL)) {
                    tmp_list_element_45 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_45 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 685;

                    goto list_build_exception_42;
                }
                PyList_SET_ITEM0(tmp_dict_value_33, 1, tmp_list_element_45);
                goto list_build_noexception_42;
                // Exception handling pass through code for list_build:
                list_build_exception_42:;
                Py_DECREF(tmp_dict_value_33);
                goto dict_build_exception_33;
                // Finished with no exception for list_build:
                list_build_noexception_42:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_33, tmp_dict_value_33);
                Py_DECREF(tmp_dict_value_33);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_32;
            // Exception handling pass through code for dict_build:
            dict_build_exception_33:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_32:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[287];
            tmp_dict_key_34 = mod_consts[253];
            tmp_dict_value_34 = Py_None;
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_46;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_34, tmp_dict_value_34);
                assert(!(tmp_res != 0));
                tmp_dict_key_34 = mod_consts[254];
                tmp_list_element_46 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_46 == NULL)) {
                    tmp_list_element_46 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_46 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 693;

                    goto dict_build_exception_34;
                }
                tmp_dict_value_34 = PyList_New(2);
                PyList_SET_ITEM0(tmp_dict_value_34, 0, tmp_list_element_46);
                tmp_list_element_46 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_46 == NULL)) {
                    tmp_list_element_46 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_46 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 693;

                    goto list_build_exception_43;
                }
                PyList_SET_ITEM0(tmp_dict_value_34, 1, tmp_list_element_46);
                goto list_build_noexception_43;
                // Exception handling pass through code for list_build:
                list_build_exception_43:;
                Py_DECREF(tmp_dict_value_34);
                goto dict_build_exception_34;
                // Finished with no exception for list_build:
                list_build_noexception_43:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_34, tmp_dict_value_34);
                Py_DECREF(tmp_dict_value_34);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_33;
            // Exception handling pass through code for dict_build:
            dict_build_exception_34:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_33:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[288];
            tmp_dict_key_35 = mod_consts[253];
            tmp_dict_value_35 = Py_None;
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_47;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_35, tmp_dict_value_35);
                assert(!(tmp_res != 0));
                tmp_dict_key_35 = mod_consts[254];
                tmp_list_element_47 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_47 == NULL)) {
                    tmp_list_element_47 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_47 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 701;

                    goto dict_build_exception_35;
                }
                tmp_dict_value_35 = PyList_New(2);
                PyList_SET_ITEM0(tmp_dict_value_35, 0, tmp_list_element_47);
                tmp_list_element_47 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_47 == NULL)) {
                    tmp_list_element_47 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_47 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 701;

                    goto list_build_exception_44;
                }
                PyList_SET_ITEM0(tmp_dict_value_35, 1, tmp_list_element_47);
                goto list_build_noexception_44;
                // Exception handling pass through code for list_build:
                list_build_exception_44:;
                Py_DECREF(tmp_dict_value_35);
                goto dict_build_exception_35;
                // Finished with no exception for list_build:
                list_build_noexception_44:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_35, tmp_dict_value_35);
                Py_DECREF(tmp_dict_value_35);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_34;
            // Exception handling pass through code for dict_build:
            dict_build_exception_35:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_34:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[289];
            tmp_dict_key_36 = mod_consts[253];
            tmp_dict_value_36 = Py_None;
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_48;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_36, tmp_dict_value_36);
                assert(!(tmp_res != 0));
                tmp_dict_key_36 = mod_consts[254];
                tmp_list_element_48 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_48 == NULL)) {
                    tmp_list_element_48 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_48 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 709;

                    goto dict_build_exception_36;
                }
                tmp_dict_value_36 = PyList_New(2);
                PyList_SET_ITEM0(tmp_dict_value_36, 0, tmp_list_element_48);
                tmp_list_element_48 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_48 == NULL)) {
                    tmp_list_element_48 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_48 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 709;

                    goto list_build_exception_45;
                }
                PyList_SET_ITEM0(tmp_dict_value_36, 1, tmp_list_element_48);
                goto list_build_noexception_45;
                // Exception handling pass through code for list_build:
                list_build_exception_45:;
                Py_DECREF(tmp_dict_value_36);
                goto dict_build_exception_36;
                // Finished with no exception for list_build:
                list_build_noexception_45:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_36, tmp_dict_value_36);
                Py_DECREF(tmp_dict_value_36);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_35;
            // Exception handling pass through code for dict_build:
            dict_build_exception_36:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_35:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[290];
            tmp_dict_key_37 = mod_consts[253];
            tmp_dict_value_37 = Py_None;
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_49;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_37, tmp_dict_value_37);
                assert(!(tmp_res != 0));
                tmp_dict_key_37 = mod_consts[254];
                tmp_list_element_49 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_49 == NULL)) {
                    tmp_list_element_49 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_49 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 717;

                    goto dict_build_exception_37;
                }
                tmp_dict_value_37 = PyList_New(2);
                PyList_SET_ITEM0(tmp_dict_value_37, 0, tmp_list_element_49);
                tmp_list_element_49 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_49 == NULL)) {
                    tmp_list_element_49 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_49 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 717;

                    goto list_build_exception_46;
                }
                PyList_SET_ITEM0(tmp_dict_value_37, 1, tmp_list_element_49);
                goto list_build_noexception_46;
                // Exception handling pass through code for list_build:
                list_build_exception_46:;
                Py_DECREF(tmp_dict_value_37);
                goto dict_build_exception_37;
                // Finished with no exception for list_build:
                list_build_noexception_46:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_37, tmp_dict_value_37);
                Py_DECREF(tmp_dict_value_37);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_36;
            // Exception handling pass through code for dict_build:
            dict_build_exception_37:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_36:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[291];
            tmp_dict_key_38 = mod_consts[253];
            tmp_dict_value_38 = Py_None;
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_50;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_38, tmp_dict_value_38);
                assert(!(tmp_res != 0));
                tmp_dict_key_38 = mod_consts[254];
                tmp_list_element_50 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_50 == NULL)) {
                    tmp_list_element_50 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_50 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 725;

                    goto dict_build_exception_38;
                }
                tmp_dict_value_38 = PyList_New(2);
                PyList_SET_ITEM0(tmp_dict_value_38, 0, tmp_list_element_50);
                tmp_list_element_50 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_50 == NULL)) {
                    tmp_list_element_50 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_50 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 726;

                    goto list_build_exception_47;
                }
                PyList_SET_ITEM0(tmp_dict_value_38, 1, tmp_list_element_50);
                goto list_build_noexception_47;
                // Exception handling pass through code for list_build:
                list_build_exception_47:;
                Py_DECREF(tmp_dict_value_38);
                goto dict_build_exception_38;
                // Finished with no exception for list_build:
                list_build_noexception_47:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_38, tmp_dict_value_38);
                Py_DECREF(tmp_dict_value_38);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_37;
            // Exception handling pass through code for dict_build:
            dict_build_exception_38:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_37:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[292];
            tmp_dict_key_39 = mod_consts[253];
            tmp_dict_value_39 = Py_None;
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_51;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_39, tmp_dict_value_39);
                assert(!(tmp_res != 0));
                tmp_dict_key_39 = mod_consts[254];
                tmp_list_element_51 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_51 == NULL)) {
                    tmp_list_element_51 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_51 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 734;

                    goto dict_build_exception_39;
                }
                tmp_dict_value_39 = PyList_New(2);
                PyList_SET_ITEM0(tmp_dict_value_39, 0, tmp_list_element_51);
                tmp_list_element_51 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_51 == NULL)) {
                    tmp_list_element_51 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_51 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 735;

                    goto list_build_exception_48;
                }
                PyList_SET_ITEM0(tmp_dict_value_39, 1, tmp_list_element_51);
                goto list_build_noexception_48;
                // Exception handling pass through code for list_build:
                list_build_exception_48:;
                Py_DECREF(tmp_dict_value_39);
                goto dict_build_exception_39;
                // Finished with no exception for list_build:
                list_build_noexception_48:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_39, tmp_dict_value_39);
                Py_DECREF(tmp_dict_value_39);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_38;
            // Exception handling pass through code for dict_build:
            dict_build_exception_39:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_38:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[293];
            tmp_dict_key_40 = mod_consts[253];
            tmp_dict_value_40 = Py_None;
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_52;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_40, tmp_dict_value_40);
                assert(!(tmp_res != 0));
                tmp_dict_key_40 = mod_consts[254];
                tmp_list_element_52 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_52 == NULL)) {
                    tmp_list_element_52 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_52 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 743;

                    goto dict_build_exception_40;
                }
                tmp_dict_value_40 = PyList_New(2);
                PyList_SET_ITEM0(tmp_dict_value_40, 0, tmp_list_element_52);
                tmp_list_element_52 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_52 == NULL)) {
                    tmp_list_element_52 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_52 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 744;

                    goto list_build_exception_49;
                }
                PyList_SET_ITEM0(tmp_dict_value_40, 1, tmp_list_element_52);
                goto list_build_noexception_49;
                // Exception handling pass through code for list_build:
                list_build_exception_49:;
                Py_DECREF(tmp_dict_value_40);
                goto dict_build_exception_40;
                // Finished with no exception for list_build:
                list_build_noexception_49:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_40, tmp_dict_value_40);
                Py_DECREF(tmp_dict_value_40);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_39;
            // Exception handling pass through code for dict_build:
            dict_build_exception_40:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_39:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[294];
            tmp_dict_key_41 = mod_consts[253];
            tmp_dict_value_41 = Py_None;
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_53;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_41, tmp_dict_value_41);
                assert(!(tmp_res != 0));
                tmp_dict_key_41 = mod_consts[254];
                tmp_list_element_53 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_53 == NULL)) {
                    tmp_list_element_53 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_53 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 752;

                    goto dict_build_exception_41;
                }
                tmp_dict_value_41 = PyList_New(2);
                PyList_SET_ITEM0(tmp_dict_value_41, 0, tmp_list_element_53);
                tmp_list_element_53 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_53 == NULL)) {
                    tmp_list_element_53 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_53 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 753;

                    goto list_build_exception_50;
                }
                PyList_SET_ITEM0(tmp_dict_value_41, 1, tmp_list_element_53);
                goto list_build_noexception_50;
                // Exception handling pass through code for list_build:
                list_build_exception_50:;
                Py_DECREF(tmp_dict_value_41);
                goto dict_build_exception_41;
                // Finished with no exception for list_build:
                list_build_noexception_50:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_41, tmp_dict_value_41);
                Py_DECREF(tmp_dict_value_41);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_40;
            // Exception handling pass through code for dict_build:
            dict_build_exception_41:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_40:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[295];
            tmp_dict_key_42 = mod_consts[253];
            tmp_dict_value_42 = Py_None;
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_54;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_42, tmp_dict_value_42);
                assert(!(tmp_res != 0));
                tmp_dict_key_42 = mod_consts[254];
                tmp_list_element_54 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_54 == NULL)) {
                    tmp_list_element_54 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_54 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 761;

                    goto dict_build_exception_42;
                }
                tmp_dict_value_42 = PyList_New(2);
                PyList_SET_ITEM0(tmp_dict_value_42, 0, tmp_list_element_54);
                tmp_list_element_54 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_54 == NULL)) {
                    tmp_list_element_54 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_54 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 761;

                    goto list_build_exception_51;
                }
                PyList_SET_ITEM0(tmp_dict_value_42, 1, tmp_list_element_54);
                goto list_build_noexception_51;
                // Exception handling pass through code for list_build:
                list_build_exception_51:;
                Py_DECREF(tmp_dict_value_42);
                goto dict_build_exception_42;
                // Finished with no exception for list_build:
                list_build_noexception_51:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_42, tmp_dict_value_42);
                Py_DECREF(tmp_dict_value_42);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_41;
            // Exception handling pass through code for dict_build:
            dict_build_exception_42:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_41:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[296];
            tmp_dict_key_43 = mod_consts[253];
            tmp_dict_value_43 = Py_None;
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_55;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_43, tmp_dict_value_43);
                assert(!(tmp_res != 0));
                tmp_dict_key_43 = mod_consts[254];
                tmp_list_element_55 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_55 == NULL)) {
                    tmp_list_element_55 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_55 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 769;

                    goto dict_build_exception_43;
                }
                tmp_dict_value_43 = PyList_New(2);
                PyList_SET_ITEM0(tmp_dict_value_43, 0, tmp_list_element_55);
                tmp_list_element_55 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_55 == NULL)) {
                    tmp_list_element_55 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_55 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 769;

                    goto list_build_exception_52;
                }
                PyList_SET_ITEM0(tmp_dict_value_43, 1, tmp_list_element_55);
                goto list_build_noexception_52;
                // Exception handling pass through code for list_build:
                list_build_exception_52:;
                Py_DECREF(tmp_dict_value_43);
                goto dict_build_exception_43;
                // Finished with no exception for list_build:
                list_build_noexception_52:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_43, tmp_dict_value_43);
                Py_DECREF(tmp_dict_value_43);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_42;
            // Exception handling pass through code for dict_build:
            dict_build_exception_43:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_42:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[297];
            tmp_dict_key_44 = mod_consts[253];
            tmp_dict_value_44 = Py_None;
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_56;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_44, tmp_dict_value_44);
                assert(!(tmp_res != 0));
                tmp_dict_key_44 = mod_consts[254];
                tmp_list_element_56 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_56 == NULL)) {
                    tmp_list_element_56 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_56 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 777;

                    goto dict_build_exception_44;
                }
                tmp_dict_value_44 = PyList_New(2);
                PyList_SET_ITEM0(tmp_dict_value_44, 0, tmp_list_element_56);
                tmp_list_element_56 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_56 == NULL)) {
                    tmp_list_element_56 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_56 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 777;

                    goto list_build_exception_53;
                }
                PyList_SET_ITEM0(tmp_dict_value_44, 1, tmp_list_element_56);
                goto list_build_noexception_53;
                // Exception handling pass through code for list_build:
                list_build_exception_53:;
                Py_DECREF(tmp_dict_value_44);
                goto dict_build_exception_44;
                // Finished with no exception for list_build:
                list_build_noexception_53:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_44, tmp_dict_value_44);
                Py_DECREF(tmp_dict_value_44);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_43;
            // Exception handling pass through code for dict_build:
            dict_build_exception_44:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_43:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[298];
            tmp_dict_key_45 = mod_consts[253];
            tmp_dict_value_45 = Py_None;
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_57;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_45, tmp_dict_value_45);
                assert(!(tmp_res != 0));
                tmp_dict_key_45 = mod_consts[254];
                tmp_list_element_57 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_57 == NULL)) {
                    tmp_list_element_57 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_57 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 785;

                    goto dict_build_exception_45;
                }
                tmp_dict_value_45 = PyList_New(2);
                PyList_SET_ITEM0(tmp_dict_value_45, 0, tmp_list_element_57);
                tmp_list_element_57 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_list_element_57 == NULL)) {
                    tmp_list_element_57 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_list_element_57 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 785;

                    goto list_build_exception_54;
                }
                PyList_SET_ITEM0(tmp_dict_value_45, 1, tmp_list_element_57);
                goto list_build_noexception_54;
                // Exception handling pass through code for list_build:
                list_build_exception_54:;
                Py_DECREF(tmp_dict_value_45);
                goto dict_build_exception_45;
                // Finished with no exception for list_build:
                list_build_noexception_54:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_45, tmp_dict_value_45);
                Py_DECREF(tmp_dict_value_45);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_44;
            // Exception handling pass through code for dict_build:
            dict_build_exception_45:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_44:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[299];
            tmp_dict_key_46 = mod_consts[253];
            tmp_dict_value_46 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

            if (unlikely(tmp_dict_value_46 == NULL)) {
                tmp_dict_value_46 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
            }

            if (tmp_dict_value_46 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 795;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_58;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_46, tmp_dict_value_46);
                assert(!(tmp_res != 0));
                tmp_dict_key_46 = mod_consts[254];
                tmp_list_element_58 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_58 == NULL)) {
                    tmp_list_element_58 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_58 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 796;

                    goto dict_build_exception_46;
                }
                tmp_dict_value_46 = PyList_New(5);
                {
                    PyObject *tmp_expression_value_260;
                    PyList_SET_ITEM0(tmp_dict_value_46, 0, tmp_list_element_58);
                    tmp_list_element_58 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[74]);

                    if (unlikely(tmp_list_element_58 == NULL)) {
                        tmp_list_element_58 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[74]);
                    }

                    if (tmp_list_element_58 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 797;

                        goto list_build_exception_55;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_46, 1, tmp_list_element_58);
                    tmp_list_element_58 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                    if (unlikely(tmp_list_element_58 == NULL)) {
                        tmp_list_element_58 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                    }

                    if (tmp_list_element_58 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 798;

                        goto list_build_exception_55;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_46, 2, tmp_list_element_58);
                    tmp_expression_value_260 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_260 == NULL)) {
                        tmp_expression_value_260 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_260 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 799;

                        goto list_build_exception_55;
                    }
                    tmp_list_element_58 = LOOKUP_ATTRIBUTE(tmp_expression_value_260, mod_consts[39]);
                    if (tmp_list_element_58 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 799;

                        goto list_build_exception_55;
                    }
                    PyList_SET_ITEM(tmp_dict_value_46, 3, tmp_list_element_58);
                    tmp_list_element_58 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[75]);

                    if (unlikely(tmp_list_element_58 == NULL)) {
                        tmp_list_element_58 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[75]);
                    }

                    if (tmp_list_element_58 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 800;

                        goto list_build_exception_55;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_46, 4, tmp_list_element_58);
                }
                goto list_build_noexception_55;
                // Exception handling pass through code for list_build:
                list_build_exception_55:;
                Py_DECREF(tmp_dict_value_46);
                goto dict_build_exception_46;
                // Finished with no exception for list_build:
                list_build_noexception_55:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_46, tmp_dict_value_46);
                Py_DECREF(tmp_dict_value_46);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_45;
            // Exception handling pass through code for dict_build:
            dict_build_exception_46:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_45:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[300];
            tmp_dict_key_47 = mod_consts[253];
            tmp_dict_value_47 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

            if (unlikely(tmp_dict_value_47 == NULL)) {
                tmp_dict_value_47 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
            }

            if (tmp_dict_value_47 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 810;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_59;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_47, tmp_dict_value_47);
                assert(!(tmp_res != 0));
                tmp_dict_key_47 = mod_consts[254];
                tmp_list_element_59 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_59 == NULL)) {
                    tmp_list_element_59 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_59 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 811;

                    goto dict_build_exception_47;
                }
                tmp_dict_value_47 = PyList_New(5);
                {
                    PyObject *tmp_expression_value_261;
                    PyList_SET_ITEM0(tmp_dict_value_47, 0, tmp_list_element_59);
                    tmp_list_element_59 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[74]);

                    if (unlikely(tmp_list_element_59 == NULL)) {
                        tmp_list_element_59 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[74]);
                    }

                    if (tmp_list_element_59 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 812;

                        goto list_build_exception_56;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_47, 1, tmp_list_element_59);
                    tmp_list_element_59 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                    if (unlikely(tmp_list_element_59 == NULL)) {
                        tmp_list_element_59 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                    }

                    if (tmp_list_element_59 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 813;

                        goto list_build_exception_56;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_47, 2, tmp_list_element_59);
                    tmp_expression_value_261 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_261 == NULL)) {
                        tmp_expression_value_261 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_261 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 814;

                        goto list_build_exception_56;
                    }
                    tmp_list_element_59 = LOOKUP_ATTRIBUTE(tmp_expression_value_261, mod_consts[39]);
                    if (tmp_list_element_59 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 814;

                        goto list_build_exception_56;
                    }
                    PyList_SET_ITEM(tmp_dict_value_47, 3, tmp_list_element_59);
                    tmp_list_element_59 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[75]);

                    if (unlikely(tmp_list_element_59 == NULL)) {
                        tmp_list_element_59 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[75]);
                    }

                    if (tmp_list_element_59 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 815;

                        goto list_build_exception_56;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_47, 4, tmp_list_element_59);
                }
                goto list_build_noexception_56;
                // Exception handling pass through code for list_build:
                list_build_exception_56:;
                Py_DECREF(tmp_dict_value_47);
                goto dict_build_exception_47;
                // Finished with no exception for list_build:
                list_build_noexception_56:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_47, tmp_dict_value_47);
                Py_DECREF(tmp_dict_value_47);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_46;
            // Exception handling pass through code for dict_build:
            dict_build_exception_47:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_46:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[301];
            tmp_dict_key_48 = mod_consts[253];
            tmp_dict_value_48 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_48 == NULL)) {
                tmp_dict_value_48 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_48 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 829;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_60;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_48, tmp_dict_value_48);
                assert(!(tmp_res != 0));
                tmp_dict_key_48 = mod_consts[254];
                tmp_list_element_60 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[65]);

                if (unlikely(tmp_list_element_60 == NULL)) {
                    tmp_list_element_60 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[65]);
                }

                if (tmp_list_element_60 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 830;

                    goto dict_build_exception_48;
                }
                tmp_dict_value_48 = PyList_New(8);
                {
                    PyObject *tmp_expression_value_262;
                    PyObject *tmp_expression_value_263;
                    PyObject *tmp_expression_value_264;
                    PyObject *tmp_expression_value_265;
                    PyObject *tmp_called_value_59;
                    PyObject *tmp_args_element_value_70;
                    PyObject *tmp_called_value_60;
                    PyObject *tmp_args_element_value_71;
                    PyList_SET_ITEM0(tmp_dict_value_48, 0, tmp_list_element_60);
                    tmp_expression_value_262 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_262 == NULL)) {
                        tmp_expression_value_262 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_262 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 831;

                        goto list_build_exception_57;
                    }
                    tmp_list_element_60 = LOOKUP_ATTRIBUTE(tmp_expression_value_262, mod_consts[54]);
                    if (tmp_list_element_60 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 831;

                        goto list_build_exception_57;
                    }
                    PyList_SET_ITEM(tmp_dict_value_48, 1, tmp_list_element_60);
                    tmp_list_element_60 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[77]);

                    if (unlikely(tmp_list_element_60 == NULL)) {
                        tmp_list_element_60 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[77]);
                    }

                    if (tmp_list_element_60 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 832;

                        goto list_build_exception_57;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_48, 2, tmp_list_element_60);
                    tmp_list_element_60 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[243]);

                    if (unlikely(tmp_list_element_60 == NULL)) {
                        tmp_list_element_60 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[243]);
                    }

                    if (tmp_list_element_60 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 833;

                        goto list_build_exception_57;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_48, 3, tmp_list_element_60);
                    tmp_expression_value_263 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_263 == NULL)) {
                        tmp_expression_value_263 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_263 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 834;

                        goto list_build_exception_57;
                    }
                    tmp_list_element_60 = LOOKUP_ATTRIBUTE(tmp_expression_value_263, mod_consts[84]);
                    if (tmp_list_element_60 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 834;

                        goto list_build_exception_57;
                    }
                    PyList_SET_ITEM(tmp_dict_value_48, 4, tmp_list_element_60);
                    tmp_expression_value_264 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_264 == NULL)) {
                        tmp_expression_value_264 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_264 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 835;

                        goto list_build_exception_57;
                    }
                    tmp_list_element_60 = LOOKUP_ATTRIBUTE(tmp_expression_value_264, mod_consts[54]);
                    if (tmp_list_element_60 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 835;

                        goto list_build_exception_57;
                    }
                    PyList_SET_ITEM(tmp_dict_value_48, 5, tmp_list_element_60);
                    tmp_expression_value_265 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_265 == NULL)) {
                        tmp_expression_value_265 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_265 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 836;

                        goto list_build_exception_57;
                    }
                    tmp_list_element_60 = LOOKUP_ATTRIBUTE(tmp_expression_value_265, mod_consts[54]);
                    if (tmp_list_element_60 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 836;

                        goto list_build_exception_57;
                    }
                    PyList_SET_ITEM(tmp_dict_value_48, 6, tmp_list_element_60);
                    tmp_called_value_59 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_59 == NULL)) {
                        tmp_called_value_59 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_59 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 837;

                        goto list_build_exception_57;
                    }
                    tmp_called_value_60 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_60 == NULL)) {
                        tmp_called_value_60 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_60 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 837;

                        goto list_build_exception_57;
                    }
                    tmp_args_element_value_71 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[79]);

                    if (unlikely(tmp_args_element_value_71 == NULL)) {
                        tmp_args_element_value_71 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
                    }

                    if (tmp_args_element_value_71 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 837;

                        goto list_build_exception_57;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 837;
                    tmp_args_element_value_70 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_60, tmp_args_element_value_71);
                    if (tmp_args_element_value_70 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 837;

                        goto list_build_exception_57;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 837;
                    tmp_list_element_60 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_59, tmp_args_element_value_70);
                    Py_DECREF(tmp_args_element_value_70);
                    if (tmp_list_element_60 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 837;

                        goto list_build_exception_57;
                    }
                    PyList_SET_ITEM(tmp_dict_value_48, 7, tmp_list_element_60);
                }
                goto list_build_noexception_57;
                // Exception handling pass through code for list_build:
                list_build_exception_57:;
                Py_DECREF(tmp_dict_value_48);
                goto dict_build_exception_48;
                // Finished with no exception for list_build:
                list_build_noexception_57:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_48, tmp_dict_value_48);
                Py_DECREF(tmp_dict_value_48);
                assert(!(tmp_res != 0));
                tmp_dict_key_48 = mod_consts[255];
                tmp_dict_value_48 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_48 == NULL)) {
                    tmp_dict_value_48 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_48 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 838;

                    goto dict_build_exception_48;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_48, tmp_dict_value_48);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_47;
            // Exception handling pass through code for dict_build:
            dict_build_exception_48:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_47:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[302];
            tmp_dict_key_49 = mod_consts[253];
            tmp_dict_value_49 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_49 == NULL)) {
                tmp_dict_value_49 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_49 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 846;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_61;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_49, tmp_dict_value_49);
                assert(!(tmp_res != 0));
                tmp_dict_key_49 = mod_consts[254];
                tmp_list_element_61 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[76]);

                if (unlikely(tmp_list_element_61 == NULL)) {
                    tmp_list_element_61 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[76]);
                }

                if (tmp_list_element_61 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 847;

                    goto dict_build_exception_49;
                }
                tmp_dict_value_49 = PyList_New(6);
                {
                    PyObject *tmp_expression_value_266;
                    PyObject *tmp_expression_value_267;
                    PyObject *tmp_called_value_61;
                    PyObject *tmp_args_element_value_72;
                    PyObject *tmp_called_value_62;
                    PyObject *tmp_args_element_value_73;
                    PyList_SET_ITEM0(tmp_dict_value_49, 0, tmp_list_element_61);
                    tmp_expression_value_266 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_266 == NULL)) {
                        tmp_expression_value_266 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_266 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 848;

                        goto list_build_exception_58;
                    }
                    tmp_list_element_61 = LOOKUP_ATTRIBUTE(tmp_expression_value_266, mod_consts[54]);
                    if (tmp_list_element_61 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 848;

                        goto list_build_exception_58;
                    }
                    PyList_SET_ITEM(tmp_dict_value_49, 1, tmp_list_element_61);
                    tmp_list_element_61 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[77]);

                    if (unlikely(tmp_list_element_61 == NULL)) {
                        tmp_list_element_61 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[77]);
                    }

                    if (tmp_list_element_61 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 849;

                        goto list_build_exception_58;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_49, 2, tmp_list_element_61);
                    tmp_expression_value_267 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_267 == NULL)) {
                        tmp_expression_value_267 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_267 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 850;

                        goto list_build_exception_58;
                    }
                    tmp_list_element_61 = LOOKUP_ATTRIBUTE(tmp_expression_value_267, mod_consts[54]);
                    if (tmp_list_element_61 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 850;

                        goto list_build_exception_58;
                    }
                    PyList_SET_ITEM(tmp_dict_value_49, 3, tmp_list_element_61);
                    tmp_list_element_61 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                    if (unlikely(tmp_list_element_61 == NULL)) {
                        tmp_list_element_61 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                    }

                    if (tmp_list_element_61 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 851;

                        goto list_build_exception_58;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_49, 4, tmp_list_element_61);
                    tmp_called_value_61 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_61 == NULL)) {
                        tmp_called_value_61 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_61 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 852;

                        goto list_build_exception_58;
                    }
                    tmp_called_value_62 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_62 == NULL)) {
                        tmp_called_value_62 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_62 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 852;

                        goto list_build_exception_58;
                    }
                    tmp_args_element_value_73 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[79]);

                    if (unlikely(tmp_args_element_value_73 == NULL)) {
                        tmp_args_element_value_73 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
                    }

                    if (tmp_args_element_value_73 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 852;

                        goto list_build_exception_58;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 852;
                    tmp_args_element_value_72 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_62, tmp_args_element_value_73);
                    if (tmp_args_element_value_72 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 852;

                        goto list_build_exception_58;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 852;
                    tmp_list_element_61 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_61, tmp_args_element_value_72);
                    Py_DECREF(tmp_args_element_value_72);
                    if (tmp_list_element_61 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 852;

                        goto list_build_exception_58;
                    }
                    PyList_SET_ITEM(tmp_dict_value_49, 5, tmp_list_element_61);
                }
                goto list_build_noexception_58;
                // Exception handling pass through code for list_build:
                list_build_exception_58:;
                Py_DECREF(tmp_dict_value_49);
                goto dict_build_exception_49;
                // Finished with no exception for list_build:
                list_build_noexception_58:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_49, tmp_dict_value_49);
                Py_DECREF(tmp_dict_value_49);
                assert(!(tmp_res != 0));
                tmp_dict_key_49 = mod_consts[255];
                tmp_dict_value_49 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_49 == NULL)) {
                    tmp_dict_value_49 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_49 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 853;

                    goto dict_build_exception_49;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_49, tmp_dict_value_49);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_48;
            // Exception handling pass through code for dict_build:
            dict_build_exception_49:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_48:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[303];
            tmp_dict_key_50 = mod_consts[253];
            tmp_dict_value_50 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_50 == NULL)) {
                tmp_dict_value_50 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_50 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 859;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_62;
                PyObject *tmp_called_value_63;
                PyObject *tmp_args_element_value_74;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_50, tmp_dict_value_50);
                assert(!(tmp_res != 0));
                tmp_dict_key_50 = mod_consts[254];
                tmp_called_value_63 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                if (unlikely(tmp_called_value_63 == NULL)) {
                    tmp_called_value_63 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                }

                if (tmp_called_value_63 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 860;

                    goto dict_build_exception_50;
                }
                tmp_args_element_value_74 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[79]);

                if (unlikely(tmp_args_element_value_74 == NULL)) {
                    tmp_args_element_value_74 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
                }

                if (tmp_args_element_value_74 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 860;

                    goto dict_build_exception_50;
                }
                frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 860;
                tmp_list_element_62 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_63, tmp_args_element_value_74);
                if (tmp_list_element_62 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 860;

                    goto dict_build_exception_50;
                }
                tmp_dict_value_50 = PyList_New(1);
                PyList_SET_ITEM(tmp_dict_value_50, 0, tmp_list_element_62);
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_50, tmp_dict_value_50);
                Py_DECREF(tmp_dict_value_50);
                assert(!(tmp_res != 0));
                tmp_dict_key_50 = mod_consts[255];
                tmp_dict_value_50 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_50 == NULL)) {
                    tmp_dict_value_50 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_50 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 861;

                    goto dict_build_exception_50;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_50, tmp_dict_value_50);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_49;
            // Exception handling pass through code for dict_build:
            dict_build_exception_50:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_49:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[304];
            tmp_dict_key_51 = mod_consts[253];
            tmp_dict_value_51 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_51 == NULL)) {
                tmp_dict_value_51 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_51 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 866;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_63;
                PyObject *tmp_called_value_64;
                PyObject *tmp_args_element_value_75;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_51, tmp_dict_value_51);
                assert(!(tmp_res != 0));
                tmp_dict_key_51 = mod_consts[254];
                tmp_called_value_64 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                if (unlikely(tmp_called_value_64 == NULL)) {
                    tmp_called_value_64 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                }

                if (tmp_called_value_64 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 867;

                    goto dict_build_exception_51;
                }
                tmp_args_element_value_75 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[79]);

                if (unlikely(tmp_args_element_value_75 == NULL)) {
                    tmp_args_element_value_75 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
                }

                if (tmp_args_element_value_75 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 867;

                    goto dict_build_exception_51;
                }
                frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 867;
                tmp_list_element_63 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_64, tmp_args_element_value_75);
                if (tmp_list_element_63 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 867;

                    goto dict_build_exception_51;
                }
                tmp_dict_value_51 = PyList_New(1);
                PyList_SET_ITEM(tmp_dict_value_51, 0, tmp_list_element_63);
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_51, tmp_dict_value_51);
                Py_DECREF(tmp_dict_value_51);
                assert(!(tmp_res != 0));
                tmp_dict_key_51 = mod_consts[255];
                tmp_dict_value_51 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_51 == NULL)) {
                    tmp_dict_value_51 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_51 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 868;

                    goto dict_build_exception_51;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_51, tmp_dict_value_51);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_50;
            // Exception handling pass through code for dict_build:
            dict_build_exception_51:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_50:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[305];
            tmp_dict_key_52 = mod_consts[253];
            tmp_expression_value_268 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

            if (unlikely(tmp_expression_value_268 == NULL)) {
                tmp_expression_value_268 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
            }

            if (tmp_expression_value_268 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 873;

                goto dict_build_exception_2;
            }
            tmp_dict_value_52 = LOOKUP_ATTRIBUTE(tmp_expression_value_268, mod_consts[39]);
            if (tmp_dict_value_52 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 873;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_64;
                PyObject *tmp_called_value_65;
                PyObject *tmp_args_element_value_76;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_52, tmp_dict_value_52);
                Py_DECREF(tmp_dict_value_52);
                assert(!(tmp_res != 0));
                tmp_dict_key_52 = mod_consts[254];
                tmp_called_value_65 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                if (unlikely(tmp_called_value_65 == NULL)) {
                    tmp_called_value_65 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                }

                if (tmp_called_value_65 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 874;

                    goto dict_build_exception_52;
                }
                tmp_args_element_value_76 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[79]);

                if (unlikely(tmp_args_element_value_76 == NULL)) {
                    tmp_args_element_value_76 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
                }

                if (tmp_args_element_value_76 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 874;

                    goto dict_build_exception_52;
                }
                frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 874;
                tmp_list_element_64 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_65, tmp_args_element_value_76);
                if (tmp_list_element_64 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 874;

                    goto dict_build_exception_52;
                }
                tmp_dict_value_52 = PyList_New(1);
                PyList_SET_ITEM(tmp_dict_value_52, 0, tmp_list_element_64);
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_52, tmp_dict_value_52);
                Py_DECREF(tmp_dict_value_52);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_51;
            // Exception handling pass through code for dict_build:
            dict_build_exception_52:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_51:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[306];
            tmp_dict_key_53 = mod_consts[253];
            tmp_expression_value_269 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

            if (unlikely(tmp_expression_value_269 == NULL)) {
                tmp_expression_value_269 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
            }

            if (tmp_expression_value_269 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 879;

                goto dict_build_exception_2;
            }
            tmp_dict_value_53 = LOOKUP_ATTRIBUTE(tmp_expression_value_269, mod_consts[39]);
            if (tmp_dict_value_53 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 879;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_65;
                PyObject *tmp_called_value_66;
                PyObject *tmp_args_element_value_77;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_53, tmp_dict_value_53);
                Py_DECREF(tmp_dict_value_53);
                assert(!(tmp_res != 0));
                tmp_dict_key_53 = mod_consts[254];
                tmp_called_value_66 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                if (unlikely(tmp_called_value_66 == NULL)) {
                    tmp_called_value_66 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                }

                if (tmp_called_value_66 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 880;

                    goto dict_build_exception_53;
                }
                tmp_args_element_value_77 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[79]);

                if (unlikely(tmp_args_element_value_77 == NULL)) {
                    tmp_args_element_value_77 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
                }

                if (tmp_args_element_value_77 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 880;

                    goto dict_build_exception_53;
                }
                frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 880;
                tmp_list_element_65 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_66, tmp_args_element_value_77);
                if (tmp_list_element_65 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 880;

                    goto dict_build_exception_53;
                }
                tmp_dict_value_53 = PyList_New(1);
                PyList_SET_ITEM(tmp_dict_value_53, 0, tmp_list_element_65);
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_53, tmp_dict_value_53);
                Py_DECREF(tmp_dict_value_53);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_52;
            // Exception handling pass through code for dict_build:
            dict_build_exception_53:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_52:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[307];
            tmp_dict_key_54 = mod_consts[253];
            tmp_expression_value_270 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

            if (unlikely(tmp_expression_value_270 == NULL)) {
                tmp_expression_value_270 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
            }

            if (tmp_expression_value_270 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 885;

                goto dict_build_exception_2;
            }
            tmp_dict_value_54 = LOOKUP_ATTRIBUTE(tmp_expression_value_270, mod_consts[39]);
            if (tmp_dict_value_54 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 885;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_66;
                PyObject *tmp_called_value_67;
                PyObject *tmp_args_element_value_78;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_54, tmp_dict_value_54);
                Py_DECREF(tmp_dict_value_54);
                assert(!(tmp_res != 0));
                tmp_dict_key_54 = mod_consts[254];
                tmp_called_value_67 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                if (unlikely(tmp_called_value_67 == NULL)) {
                    tmp_called_value_67 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                }

                if (tmp_called_value_67 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 886;

                    goto dict_build_exception_54;
                }
                tmp_args_element_value_78 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[79]);

                if (unlikely(tmp_args_element_value_78 == NULL)) {
                    tmp_args_element_value_78 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
                }

                if (tmp_args_element_value_78 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 886;

                    goto dict_build_exception_54;
                }
                frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 886;
                tmp_list_element_66 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_67, tmp_args_element_value_78);
                if (tmp_list_element_66 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 886;

                    goto dict_build_exception_54;
                }
                tmp_dict_value_54 = PyList_New(1);
                PyList_SET_ITEM(tmp_dict_value_54, 0, tmp_list_element_66);
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_54, tmp_dict_value_54);
                Py_DECREF(tmp_dict_value_54);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_53;
            // Exception handling pass through code for dict_build:
            dict_build_exception_54:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_53:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[308];
            tmp_dict_key_55 = mod_consts[253];
            tmp_expression_value_271 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

            if (unlikely(tmp_expression_value_271 == NULL)) {
                tmp_expression_value_271 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
            }

            if (tmp_expression_value_271 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 891;

                goto dict_build_exception_2;
            }
            tmp_dict_value_55 = LOOKUP_ATTRIBUTE(tmp_expression_value_271, mod_consts[39]);
            if (tmp_dict_value_55 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 891;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_67;
                PyObject *tmp_called_value_68;
                PyObject *tmp_args_element_value_79;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_55, tmp_dict_value_55);
                Py_DECREF(tmp_dict_value_55);
                assert(!(tmp_res != 0));
                tmp_dict_key_55 = mod_consts[254];
                tmp_called_value_68 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                if (unlikely(tmp_called_value_68 == NULL)) {
                    tmp_called_value_68 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                }

                if (tmp_called_value_68 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 892;

                    goto dict_build_exception_55;
                }
                tmp_args_element_value_79 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[79]);

                if (unlikely(tmp_args_element_value_79 == NULL)) {
                    tmp_args_element_value_79 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
                }

                if (tmp_args_element_value_79 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 892;

                    goto dict_build_exception_55;
                }
                frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 892;
                tmp_list_element_67 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_68, tmp_args_element_value_79);
                if (tmp_list_element_67 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 892;

                    goto dict_build_exception_55;
                }
                tmp_dict_value_55 = PyList_New(1);
                PyList_SET_ITEM(tmp_dict_value_55, 0, tmp_list_element_67);
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_55, tmp_dict_value_55);
                Py_DECREF(tmp_dict_value_55);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_54;
            // Exception handling pass through code for dict_build:
            dict_build_exception_55:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_54:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[309];
            tmp_dict_key_56 = mod_consts[253];
            tmp_dict_value_56 = Py_None;
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_68;
                PyObject *tmp_called_value_69;
                PyObject *tmp_args_element_value_80;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_56, tmp_dict_value_56);
                assert(!(tmp_res != 0));
                tmp_dict_key_56 = mod_consts[254];
                tmp_called_value_69 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                if (unlikely(tmp_called_value_69 == NULL)) {
                    tmp_called_value_69 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                }

                if (tmp_called_value_69 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 898;

                    goto dict_build_exception_56;
                }
                tmp_args_element_value_80 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[79]);

                if (unlikely(tmp_args_element_value_80 == NULL)) {
                    tmp_args_element_value_80 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
                }

                if (tmp_args_element_value_80 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 898;

                    goto dict_build_exception_56;
                }
                frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 898;
                tmp_list_element_68 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_69, tmp_args_element_value_80);
                if (tmp_list_element_68 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 898;

                    goto dict_build_exception_56;
                }
                tmp_dict_value_56 = PyList_New(2);
                {
                    PyObject *tmp_expression_value_272;
                    PyList_SET_ITEM(tmp_dict_value_56, 0, tmp_list_element_68);
                    tmp_expression_value_272 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_272 == NULL)) {
                        tmp_expression_value_272 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_272 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 898;

                        goto list_build_exception_59;
                    }
                    tmp_list_element_68 = LOOKUP_ATTRIBUTE(tmp_expression_value_272, mod_consts[39]);
                    if (tmp_list_element_68 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 898;

                        goto list_build_exception_59;
                    }
                    PyList_SET_ITEM(tmp_dict_value_56, 1, tmp_list_element_68);
                }
                goto list_build_noexception_59;
                // Exception handling pass through code for list_build:
                list_build_exception_59:;
                Py_DECREF(tmp_dict_value_56);
                goto dict_build_exception_56;
                // Finished with no exception for list_build:
                list_build_noexception_59:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_56, tmp_dict_value_56);
                Py_DECREF(tmp_dict_value_56);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_55;
            // Exception handling pass through code for dict_build:
            dict_build_exception_56:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_55:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[310];
            tmp_dict_key_57 = mod_consts[253];
            tmp_dict_value_57 = Py_None;
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_69;
                PyObject *tmp_called_value_70;
                PyObject *tmp_args_element_value_81;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_57, tmp_dict_value_57);
                assert(!(tmp_res != 0));
                tmp_dict_key_57 = mod_consts[254];
                tmp_called_value_70 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                if (unlikely(tmp_called_value_70 == NULL)) {
                    tmp_called_value_70 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                }

                if (tmp_called_value_70 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 904;

                    goto dict_build_exception_57;
                }
                tmp_args_element_value_81 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[79]);

                if (unlikely(tmp_args_element_value_81 == NULL)) {
                    tmp_args_element_value_81 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
                }

                if (tmp_args_element_value_81 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 904;

                    goto dict_build_exception_57;
                }
                frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 904;
                tmp_list_element_69 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_70, tmp_args_element_value_81);
                if (tmp_list_element_69 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 904;

                    goto dict_build_exception_57;
                }
                tmp_dict_value_57 = PyList_New(2);
                {
                    PyObject *tmp_expression_value_273;
                    PyList_SET_ITEM(tmp_dict_value_57, 0, tmp_list_element_69);
                    tmp_expression_value_273 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_273 == NULL)) {
                        tmp_expression_value_273 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_273 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 904;

                        goto list_build_exception_60;
                    }
                    tmp_list_element_69 = LOOKUP_ATTRIBUTE(tmp_expression_value_273, mod_consts[39]);
                    if (tmp_list_element_69 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 904;

                        goto list_build_exception_60;
                    }
                    PyList_SET_ITEM(tmp_dict_value_57, 1, tmp_list_element_69);
                }
                goto list_build_noexception_60;
                // Exception handling pass through code for list_build:
                list_build_exception_60:;
                Py_DECREF(tmp_dict_value_57);
                goto dict_build_exception_57;
                // Finished with no exception for list_build:
                list_build_noexception_60:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_57, tmp_dict_value_57);
                Py_DECREF(tmp_dict_value_57);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_56;
            // Exception handling pass through code for dict_build:
            dict_build_exception_57:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_56:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[311];
            tmp_dict_key_58 = mod_consts[253];
            tmp_expression_value_274 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

            if (unlikely(tmp_expression_value_274 == NULL)) {
                tmp_expression_value_274 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
            }

            if (tmp_expression_value_274 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 912;

                goto dict_build_exception_2;
            }
            tmp_dict_value_58 = LOOKUP_ATTRIBUTE(tmp_expression_value_274, mod_consts[39]);
            if (tmp_dict_value_58 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 912;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_70;
                PyObject *tmp_called_value_71;
                PyObject *tmp_args_element_value_82;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_58, tmp_dict_value_58);
                Py_DECREF(tmp_dict_value_58);
                assert(!(tmp_res != 0));
                tmp_dict_key_58 = mod_consts[254];
                tmp_called_value_71 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                if (unlikely(tmp_called_value_71 == NULL)) {
                    tmp_called_value_71 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                }

                if (tmp_called_value_71 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 913;

                    goto dict_build_exception_58;
                }
                tmp_args_element_value_82 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[79]);

                if (unlikely(tmp_args_element_value_82 == NULL)) {
                    tmp_args_element_value_82 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
                }

                if (tmp_args_element_value_82 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 913;

                    goto dict_build_exception_58;
                }
                frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 913;
                tmp_list_element_70 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_71, tmp_args_element_value_82);
                if (tmp_list_element_70 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 913;

                    goto dict_build_exception_58;
                }
                tmp_dict_value_58 = PyList_New(3);
                {
                    PyObject *tmp_expression_value_275;
                    PyObject *tmp_expression_value_276;
                    PyList_SET_ITEM(tmp_dict_value_58, 0, tmp_list_element_70);
                    tmp_expression_value_275 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_275 == NULL)) {
                        tmp_expression_value_275 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_275 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 913;

                        goto list_build_exception_61;
                    }
                    tmp_list_element_70 = LOOKUP_ATTRIBUTE(tmp_expression_value_275, mod_consts[39]);
                    if (tmp_list_element_70 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 913;

                        goto list_build_exception_61;
                    }
                    PyList_SET_ITEM(tmp_dict_value_58, 1, tmp_list_element_70);
                    tmp_expression_value_276 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_276 == NULL)) {
                        tmp_expression_value_276 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_276 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 913;

                        goto list_build_exception_61;
                    }
                    tmp_list_element_70 = LOOKUP_ATTRIBUTE(tmp_expression_value_276, mod_consts[39]);
                    if (tmp_list_element_70 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 913;

                        goto list_build_exception_61;
                    }
                    PyList_SET_ITEM(tmp_dict_value_58, 2, tmp_list_element_70);
                }
                goto list_build_noexception_61;
                // Exception handling pass through code for list_build:
                list_build_exception_61:;
                Py_DECREF(tmp_dict_value_58);
                goto dict_build_exception_58;
                // Finished with no exception for list_build:
                list_build_noexception_61:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_58, tmp_dict_value_58);
                Py_DECREF(tmp_dict_value_58);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_57;
            // Exception handling pass through code for dict_build:
            dict_build_exception_58:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_57:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[312];
            tmp_dict_key_59 = mod_consts[253];
            tmp_expression_value_277 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

            if (unlikely(tmp_expression_value_277 == NULL)) {
                tmp_expression_value_277 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
            }

            if (tmp_expression_value_277 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 921;

                goto dict_build_exception_2;
            }
            tmp_dict_value_59 = LOOKUP_ATTRIBUTE(tmp_expression_value_277, mod_consts[39]);
            if (tmp_dict_value_59 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 921;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_71;
                PyObject *tmp_called_value_72;
                PyObject *tmp_args_element_value_83;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_59, tmp_dict_value_59);
                Py_DECREF(tmp_dict_value_59);
                assert(!(tmp_res != 0));
                tmp_dict_key_59 = mod_consts[254];
                tmp_called_value_72 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                if (unlikely(tmp_called_value_72 == NULL)) {
                    tmp_called_value_72 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                }

                if (tmp_called_value_72 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 922;

                    goto dict_build_exception_59;
                }
                tmp_args_element_value_83 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[79]);

                if (unlikely(tmp_args_element_value_83 == NULL)) {
                    tmp_args_element_value_83 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
                }

                if (tmp_args_element_value_83 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 922;

                    goto dict_build_exception_59;
                }
                frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 922;
                tmp_list_element_71 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_72, tmp_args_element_value_83);
                if (tmp_list_element_71 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 922;

                    goto dict_build_exception_59;
                }
                tmp_dict_value_59 = PyList_New(3);
                {
                    PyObject *tmp_expression_value_278;
                    PyObject *tmp_expression_value_279;
                    PyList_SET_ITEM(tmp_dict_value_59, 0, tmp_list_element_71);
                    tmp_expression_value_278 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_278 == NULL)) {
                        tmp_expression_value_278 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_278 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 922;

                        goto list_build_exception_62;
                    }
                    tmp_list_element_71 = LOOKUP_ATTRIBUTE(tmp_expression_value_278, mod_consts[39]);
                    if (tmp_list_element_71 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 922;

                        goto list_build_exception_62;
                    }
                    PyList_SET_ITEM(tmp_dict_value_59, 1, tmp_list_element_71);
                    tmp_expression_value_279 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_279 == NULL)) {
                        tmp_expression_value_279 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_279 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 922;

                        goto list_build_exception_62;
                    }
                    tmp_list_element_71 = LOOKUP_ATTRIBUTE(tmp_expression_value_279, mod_consts[39]);
                    if (tmp_list_element_71 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 922;

                        goto list_build_exception_62;
                    }
                    PyList_SET_ITEM(tmp_dict_value_59, 2, tmp_list_element_71);
                }
                goto list_build_noexception_62;
                // Exception handling pass through code for list_build:
                list_build_exception_62:;
                Py_DECREF(tmp_dict_value_59);
                goto dict_build_exception_59;
                // Finished with no exception for list_build:
                list_build_noexception_62:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_59, tmp_dict_value_59);
                Py_DECREF(tmp_dict_value_59);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_58;
            // Exception handling pass through code for dict_build:
            dict_build_exception_59:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_58:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[313];
            tmp_dict_key_60 = mod_consts[253];
            tmp_expression_value_280 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

            if (unlikely(tmp_expression_value_280 == NULL)) {
                tmp_expression_value_280 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
            }

            if (tmp_expression_value_280 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 930;

                goto dict_build_exception_2;
            }
            tmp_dict_value_60 = LOOKUP_ATTRIBUTE(tmp_expression_value_280, mod_consts[39]);
            if (tmp_dict_value_60 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 930;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_72;
                PyObject *tmp_called_value_73;
                PyObject *tmp_args_element_value_84;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_60, tmp_dict_value_60);
                Py_DECREF(tmp_dict_value_60);
                assert(!(tmp_res != 0));
                tmp_dict_key_60 = mod_consts[254];
                tmp_called_value_73 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                if (unlikely(tmp_called_value_73 == NULL)) {
                    tmp_called_value_73 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                }

                if (tmp_called_value_73 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 931;

                    goto dict_build_exception_60;
                }
                tmp_args_element_value_84 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[79]);

                if (unlikely(tmp_args_element_value_84 == NULL)) {
                    tmp_args_element_value_84 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
                }

                if (tmp_args_element_value_84 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 931;

                    goto dict_build_exception_60;
                }
                frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 931;
                tmp_list_element_72 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_73, tmp_args_element_value_84);
                if (tmp_list_element_72 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 931;

                    goto dict_build_exception_60;
                }
                tmp_dict_value_60 = PyList_New(3);
                {
                    PyObject *tmp_expression_value_281;
                    PyObject *tmp_expression_value_282;
                    PyList_SET_ITEM(tmp_dict_value_60, 0, tmp_list_element_72);
                    tmp_expression_value_281 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_281 == NULL)) {
                        tmp_expression_value_281 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_281 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 931;

                        goto list_build_exception_63;
                    }
                    tmp_list_element_72 = LOOKUP_ATTRIBUTE(tmp_expression_value_281, mod_consts[39]);
                    if (tmp_list_element_72 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 931;

                        goto list_build_exception_63;
                    }
                    PyList_SET_ITEM(tmp_dict_value_60, 1, tmp_list_element_72);
                    tmp_expression_value_282 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_282 == NULL)) {
                        tmp_expression_value_282 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_282 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 931;

                        goto list_build_exception_63;
                    }
                    tmp_list_element_72 = LOOKUP_ATTRIBUTE(tmp_expression_value_282, mod_consts[39]);
                    if (tmp_list_element_72 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 931;

                        goto list_build_exception_63;
                    }
                    PyList_SET_ITEM(tmp_dict_value_60, 2, tmp_list_element_72);
                }
                goto list_build_noexception_63;
                // Exception handling pass through code for list_build:
                list_build_exception_63:;
                Py_DECREF(tmp_dict_value_60);
                goto dict_build_exception_60;
                // Finished with no exception for list_build:
                list_build_noexception_63:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_60, tmp_dict_value_60);
                Py_DECREF(tmp_dict_value_60);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_59;
            // Exception handling pass through code for dict_build:
            dict_build_exception_60:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_59:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[314];
            tmp_dict_key_61 = mod_consts[253];
            tmp_expression_value_283 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

            if (unlikely(tmp_expression_value_283 == NULL)) {
                tmp_expression_value_283 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
            }

            if (tmp_expression_value_283 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 939;

                goto dict_build_exception_2;
            }
            tmp_dict_value_61 = LOOKUP_ATTRIBUTE(tmp_expression_value_283, mod_consts[39]);
            if (tmp_dict_value_61 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 939;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_73;
                PyObject *tmp_called_value_74;
                PyObject *tmp_args_element_value_85;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_61, tmp_dict_value_61);
                Py_DECREF(tmp_dict_value_61);
                assert(!(tmp_res != 0));
                tmp_dict_key_61 = mod_consts[254];
                tmp_called_value_74 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                if (unlikely(tmp_called_value_74 == NULL)) {
                    tmp_called_value_74 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                }

                if (tmp_called_value_74 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 940;

                    goto dict_build_exception_61;
                }
                tmp_args_element_value_85 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[79]);

                if (unlikely(tmp_args_element_value_85 == NULL)) {
                    tmp_args_element_value_85 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
                }

                if (tmp_args_element_value_85 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 940;

                    goto dict_build_exception_61;
                }
                frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 940;
                tmp_list_element_73 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_74, tmp_args_element_value_85);
                if (tmp_list_element_73 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 940;

                    goto dict_build_exception_61;
                }
                tmp_dict_value_61 = PyList_New(3);
                {
                    PyObject *tmp_expression_value_284;
                    PyObject *tmp_expression_value_285;
                    PyList_SET_ITEM(tmp_dict_value_61, 0, tmp_list_element_73);
                    tmp_expression_value_284 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_284 == NULL)) {
                        tmp_expression_value_284 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_284 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 940;

                        goto list_build_exception_64;
                    }
                    tmp_list_element_73 = LOOKUP_ATTRIBUTE(tmp_expression_value_284, mod_consts[39]);
                    if (tmp_list_element_73 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 940;

                        goto list_build_exception_64;
                    }
                    PyList_SET_ITEM(tmp_dict_value_61, 1, tmp_list_element_73);
                    tmp_expression_value_285 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_285 == NULL)) {
                        tmp_expression_value_285 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_285 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 940;

                        goto list_build_exception_64;
                    }
                    tmp_list_element_73 = LOOKUP_ATTRIBUTE(tmp_expression_value_285, mod_consts[39]);
                    if (tmp_list_element_73 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 940;

                        goto list_build_exception_64;
                    }
                    PyList_SET_ITEM(tmp_dict_value_61, 2, tmp_list_element_73);
                }
                goto list_build_noexception_64;
                // Exception handling pass through code for list_build:
                list_build_exception_64:;
                Py_DECREF(tmp_dict_value_61);
                goto dict_build_exception_61;
                // Finished with no exception for list_build:
                list_build_noexception_64:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_61, tmp_dict_value_61);
                Py_DECREF(tmp_dict_value_61);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_60;
            // Exception handling pass through code for dict_build:
            dict_build_exception_61:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_60:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[315];
            tmp_dict_key_62 = mod_consts[253];
            tmp_expression_value_286 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

            if (unlikely(tmp_expression_value_286 == NULL)) {
                tmp_expression_value_286 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
            }

            if (tmp_expression_value_286 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 947;

                goto dict_build_exception_2;
            }
            tmp_dict_value_62 = LOOKUP_ATTRIBUTE(tmp_expression_value_286, mod_consts[39]);
            if (tmp_dict_value_62 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 947;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_74;
                PyObject *tmp_called_value_75;
                PyObject *tmp_args_element_value_86;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_62, tmp_dict_value_62);
                Py_DECREF(tmp_dict_value_62);
                assert(!(tmp_res != 0));
                tmp_dict_key_62 = mod_consts[254];
                tmp_called_value_75 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                if (unlikely(tmp_called_value_75 == NULL)) {
                    tmp_called_value_75 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                }

                if (tmp_called_value_75 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 948;

                    goto dict_build_exception_62;
                }
                tmp_args_element_value_86 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[79]);

                if (unlikely(tmp_args_element_value_86 == NULL)) {
                    tmp_args_element_value_86 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
                }

                if (tmp_args_element_value_86 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 948;

                    goto dict_build_exception_62;
                }
                frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 948;
                tmp_list_element_74 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_75, tmp_args_element_value_86);
                if (tmp_list_element_74 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 948;

                    goto dict_build_exception_62;
                }
                tmp_dict_value_62 = PyList_New(2);
                {
                    PyObject *tmp_expression_value_287;
                    PyList_SET_ITEM(tmp_dict_value_62, 0, tmp_list_element_74);
                    tmp_expression_value_287 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_287 == NULL)) {
                        tmp_expression_value_287 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_287 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 948;

                        goto list_build_exception_65;
                    }
                    tmp_list_element_74 = LOOKUP_ATTRIBUTE(tmp_expression_value_287, mod_consts[39]);
                    if (tmp_list_element_74 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 948;

                        goto list_build_exception_65;
                    }
                    PyList_SET_ITEM(tmp_dict_value_62, 1, tmp_list_element_74);
                }
                goto list_build_noexception_65;
                // Exception handling pass through code for list_build:
                list_build_exception_65:;
                Py_DECREF(tmp_dict_value_62);
                goto dict_build_exception_62;
                // Finished with no exception for list_build:
                list_build_noexception_65:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_62, tmp_dict_value_62);
                Py_DECREF(tmp_dict_value_62);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_61;
            // Exception handling pass through code for dict_build:
            dict_build_exception_62:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_61:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[316];
            tmp_dict_key_63 = mod_consts[253];
            tmp_expression_value_288 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

            if (unlikely(tmp_expression_value_288 == NULL)) {
                tmp_expression_value_288 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
            }

            if (tmp_expression_value_288 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 955;

                goto dict_build_exception_2;
            }
            tmp_dict_value_63 = LOOKUP_ATTRIBUTE(tmp_expression_value_288, mod_consts[39]);
            if (tmp_dict_value_63 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 955;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_75;
                PyObject *tmp_called_value_76;
                PyObject *tmp_args_element_value_87;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_63, tmp_dict_value_63);
                Py_DECREF(tmp_dict_value_63);
                assert(!(tmp_res != 0));
                tmp_dict_key_63 = mod_consts[254];
                tmp_called_value_76 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                if (unlikely(tmp_called_value_76 == NULL)) {
                    tmp_called_value_76 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                }

                if (tmp_called_value_76 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 956;

                    goto dict_build_exception_63;
                }
                tmp_args_element_value_87 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[79]);

                if (unlikely(tmp_args_element_value_87 == NULL)) {
                    tmp_args_element_value_87 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
                }

                if (tmp_args_element_value_87 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 956;

                    goto dict_build_exception_63;
                }
                frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 956;
                tmp_list_element_75 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_76, tmp_args_element_value_87);
                if (tmp_list_element_75 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 956;

                    goto dict_build_exception_63;
                }
                tmp_dict_value_63 = PyList_New(2);
                {
                    PyObject *tmp_expression_value_289;
                    PyList_SET_ITEM(tmp_dict_value_63, 0, tmp_list_element_75);
                    tmp_expression_value_289 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_289 == NULL)) {
                        tmp_expression_value_289 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_289 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 956;

                        goto list_build_exception_66;
                    }
                    tmp_list_element_75 = LOOKUP_ATTRIBUTE(tmp_expression_value_289, mod_consts[39]);
                    if (tmp_list_element_75 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 956;

                        goto list_build_exception_66;
                    }
                    PyList_SET_ITEM(tmp_dict_value_63, 1, tmp_list_element_75);
                }
                goto list_build_noexception_66;
                // Exception handling pass through code for list_build:
                list_build_exception_66:;
                Py_DECREF(tmp_dict_value_63);
                goto dict_build_exception_63;
                // Finished with no exception for list_build:
                list_build_noexception_66:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_63, tmp_dict_value_63);
                Py_DECREF(tmp_dict_value_63);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_62;
            // Exception handling pass through code for dict_build:
            dict_build_exception_63:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_62:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[317];
            tmp_dict_key_64 = mod_consts[253];
            tmp_expression_value_290 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

            if (unlikely(tmp_expression_value_290 == NULL)) {
                tmp_expression_value_290 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
            }

            if (tmp_expression_value_290 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 963;

                goto dict_build_exception_2;
            }
            tmp_dict_value_64 = LOOKUP_ATTRIBUTE(tmp_expression_value_290, mod_consts[39]);
            if (tmp_dict_value_64 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 963;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_76;
                PyObject *tmp_called_value_77;
                PyObject *tmp_args_element_value_88;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_64, tmp_dict_value_64);
                Py_DECREF(tmp_dict_value_64);
                assert(!(tmp_res != 0));
                tmp_dict_key_64 = mod_consts[254];
                tmp_called_value_77 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                if (unlikely(tmp_called_value_77 == NULL)) {
                    tmp_called_value_77 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                }

                if (tmp_called_value_77 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 964;

                    goto dict_build_exception_64;
                }
                tmp_args_element_value_88 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[79]);

                if (unlikely(tmp_args_element_value_88 == NULL)) {
                    tmp_args_element_value_88 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
                }

                if (tmp_args_element_value_88 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 964;

                    goto dict_build_exception_64;
                }
                frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 964;
                tmp_list_element_76 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_77, tmp_args_element_value_88);
                if (tmp_list_element_76 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 964;

                    goto dict_build_exception_64;
                }
                tmp_dict_value_64 = PyList_New(2);
                {
                    PyObject *tmp_expression_value_291;
                    PyList_SET_ITEM(tmp_dict_value_64, 0, tmp_list_element_76);
                    tmp_expression_value_291 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_291 == NULL)) {
                        tmp_expression_value_291 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_291 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 964;

                        goto list_build_exception_67;
                    }
                    tmp_list_element_76 = LOOKUP_ATTRIBUTE(tmp_expression_value_291, mod_consts[39]);
                    if (tmp_list_element_76 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 964;

                        goto list_build_exception_67;
                    }
                    PyList_SET_ITEM(tmp_dict_value_64, 1, tmp_list_element_76);
                }
                goto list_build_noexception_67;
                // Exception handling pass through code for list_build:
                list_build_exception_67:;
                Py_DECREF(tmp_dict_value_64);
                goto dict_build_exception_64;
                // Finished with no exception for list_build:
                list_build_noexception_67:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_64, tmp_dict_value_64);
                Py_DECREF(tmp_dict_value_64);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_63;
            // Exception handling pass through code for dict_build:
            dict_build_exception_64:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_63:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[318];
            tmp_dict_key_65 = mod_consts[253];
            tmp_expression_value_292 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

            if (unlikely(tmp_expression_value_292 == NULL)) {
                tmp_expression_value_292 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
            }

            if (tmp_expression_value_292 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 971;

                goto dict_build_exception_2;
            }
            tmp_dict_value_65 = LOOKUP_ATTRIBUTE(tmp_expression_value_292, mod_consts[39]);
            if (tmp_dict_value_65 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 971;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_77;
                PyObject *tmp_called_value_78;
                PyObject *tmp_args_element_value_89;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_65, tmp_dict_value_65);
                Py_DECREF(tmp_dict_value_65);
                assert(!(tmp_res != 0));
                tmp_dict_key_65 = mod_consts[254];
                tmp_called_value_78 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                if (unlikely(tmp_called_value_78 == NULL)) {
                    tmp_called_value_78 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                }

                if (tmp_called_value_78 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 972;

                    goto dict_build_exception_65;
                }
                tmp_args_element_value_89 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[79]);

                if (unlikely(tmp_args_element_value_89 == NULL)) {
                    tmp_args_element_value_89 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
                }

                if (tmp_args_element_value_89 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 972;

                    goto dict_build_exception_65;
                }
                frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 972;
                tmp_list_element_77 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_78, tmp_args_element_value_89);
                if (tmp_list_element_77 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 972;

                    goto dict_build_exception_65;
                }
                tmp_dict_value_65 = PyList_New(2);
                {
                    PyObject *tmp_expression_value_293;
                    PyList_SET_ITEM(tmp_dict_value_65, 0, tmp_list_element_77);
                    tmp_expression_value_293 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_293 == NULL)) {
                        tmp_expression_value_293 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_293 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 972;

                        goto list_build_exception_68;
                    }
                    tmp_list_element_77 = LOOKUP_ATTRIBUTE(tmp_expression_value_293, mod_consts[39]);
                    if (tmp_list_element_77 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 972;

                        goto list_build_exception_68;
                    }
                    PyList_SET_ITEM(tmp_dict_value_65, 1, tmp_list_element_77);
                }
                goto list_build_noexception_68;
                // Exception handling pass through code for list_build:
                list_build_exception_68:;
                Py_DECREF(tmp_dict_value_65);
                goto dict_build_exception_65;
                // Finished with no exception for list_build:
                list_build_noexception_68:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_65, tmp_dict_value_65);
                Py_DECREF(tmp_dict_value_65);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_64;
            // Exception handling pass through code for dict_build:
            dict_build_exception_65:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_64:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[319];
            tmp_dict_key_66 = mod_consts[253];
            tmp_dict_value_66 = Py_None;
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_78;
                PyObject *tmp_called_value_79;
                PyObject *tmp_args_element_value_90;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_66, tmp_dict_value_66);
                assert(!(tmp_res != 0));
                tmp_dict_key_66 = mod_consts[254];
                tmp_called_value_79 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                if (unlikely(tmp_called_value_79 == NULL)) {
                    tmp_called_value_79 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                }

                if (tmp_called_value_79 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 980;

                    goto dict_build_exception_66;
                }
                tmp_args_element_value_90 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[79]);

                if (unlikely(tmp_args_element_value_90 == NULL)) {
                    tmp_args_element_value_90 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
                }

                if (tmp_args_element_value_90 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 980;

                    goto dict_build_exception_66;
                }
                frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 980;
                tmp_list_element_78 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_79, tmp_args_element_value_90);
                if (tmp_list_element_78 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 980;

                    goto dict_build_exception_66;
                }
                tmp_dict_value_66 = PyList_New(2);
                {
                    PyObject *tmp_expression_value_294;
                    PyList_SET_ITEM(tmp_dict_value_66, 0, tmp_list_element_78);
                    tmp_expression_value_294 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_294 == NULL)) {
                        tmp_expression_value_294 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_294 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 980;

                        goto list_build_exception_69;
                    }
                    tmp_list_element_78 = LOOKUP_ATTRIBUTE(tmp_expression_value_294, mod_consts[39]);
                    if (tmp_list_element_78 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 980;

                        goto list_build_exception_69;
                    }
                    PyList_SET_ITEM(tmp_dict_value_66, 1, tmp_list_element_78);
                }
                goto list_build_noexception_69;
                // Exception handling pass through code for list_build:
                list_build_exception_69:;
                Py_DECREF(tmp_dict_value_66);
                goto dict_build_exception_66;
                // Finished with no exception for list_build:
                list_build_noexception_69:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_66, tmp_dict_value_66);
                Py_DECREF(tmp_dict_value_66);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_65;
            // Exception handling pass through code for dict_build:
            dict_build_exception_66:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_65:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[320];
            tmp_dict_key_67 = mod_consts[253];
            tmp_dict_value_67 = Py_None;
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_list_element_79;
                PyObject *tmp_called_value_80;
                PyObject *tmp_args_element_value_91;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_67, tmp_dict_value_67);
                assert(!(tmp_res != 0));
                tmp_dict_key_67 = mod_consts[254];
                tmp_called_value_80 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                if (unlikely(tmp_called_value_80 == NULL)) {
                    tmp_called_value_80 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                }

                if (tmp_called_value_80 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 988;

                    goto dict_build_exception_67;
                }
                tmp_args_element_value_91 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[79]);

                if (unlikely(tmp_args_element_value_91 == NULL)) {
                    tmp_args_element_value_91 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
                }

                if (tmp_args_element_value_91 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 988;

                    goto dict_build_exception_67;
                }
                frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 988;
                tmp_list_element_79 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_80, tmp_args_element_value_91);
                if (tmp_list_element_79 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 988;

                    goto dict_build_exception_67;
                }
                tmp_dict_value_67 = PyList_New(2);
                {
                    PyObject *tmp_expression_value_295;
                    PyList_SET_ITEM(tmp_dict_value_67, 0, tmp_list_element_79);
                    tmp_expression_value_295 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_295 == NULL)) {
                        tmp_expression_value_295 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_295 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 988;

                        goto list_build_exception_70;
                    }
                    tmp_list_element_79 = LOOKUP_ATTRIBUTE(tmp_expression_value_295, mod_consts[39]);
                    if (tmp_list_element_79 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 988;

                        goto list_build_exception_70;
                    }
                    PyList_SET_ITEM(tmp_dict_value_67, 1, tmp_list_element_79);
                }
                goto list_build_noexception_70;
                // Exception handling pass through code for list_build:
                list_build_exception_70:;
                Py_DECREF(tmp_dict_value_67);
                goto dict_build_exception_67;
                // Finished with no exception for list_build:
                list_build_noexception_70:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_67, tmp_dict_value_67);
                Py_DECREF(tmp_dict_value_67);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_66;
            // Exception handling pass through code for dict_build:
            dict_build_exception_67:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_66:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[321];
            tmp_dict_key_68 = mod_consts[253];
            tmp_dict_value_68 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_68 == NULL)) {
                tmp_dict_value_68 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_68 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1000;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_80;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_68, tmp_dict_value_68);
                assert(!(tmp_res != 0));
                tmp_dict_key_68 = mod_consts[254];
                tmp_list_element_80 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[76]);

                if (unlikely(tmp_list_element_80 == NULL)) {
                    tmp_list_element_80 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[76]);
                }

                if (tmp_list_element_80 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1001;

                    goto dict_build_exception_68;
                }
                tmp_dict_value_68 = PyList_New(3);
                {
                    PyObject *tmp_expression_value_296;
                    PyList_SET_ITEM0(tmp_dict_value_68, 0, tmp_list_element_80);
                    tmp_list_element_80 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[126]);

                    if (unlikely(tmp_list_element_80 == NULL)) {
                        tmp_list_element_80 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[126]);
                    }

                    if (tmp_list_element_80 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1001;

                        goto list_build_exception_71;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_68, 1, tmp_list_element_80);
                    tmp_expression_value_296 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_296 == NULL)) {
                        tmp_expression_value_296 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_296 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1001;

                        goto list_build_exception_71;
                    }
                    tmp_list_element_80 = LOOKUP_ATTRIBUTE(tmp_expression_value_296, mod_consts[84]);
                    if (tmp_list_element_80 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1001;

                        goto list_build_exception_71;
                    }
                    PyList_SET_ITEM(tmp_dict_value_68, 2, tmp_list_element_80);
                }
                goto list_build_noexception_71;
                // Exception handling pass through code for list_build:
                list_build_exception_71:;
                Py_DECREF(tmp_dict_value_68);
                goto dict_build_exception_68;
                // Finished with no exception for list_build:
                list_build_noexception_71:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_68, tmp_dict_value_68);
                Py_DECREF(tmp_dict_value_68);
                assert(!(tmp_res != 0));
                tmp_dict_key_68 = mod_consts[255];
                tmp_dict_value_68 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_68 == NULL)) {
                    tmp_dict_value_68 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_68 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1002;

                    goto dict_build_exception_68;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_68, tmp_dict_value_68);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_67;
            // Exception handling pass through code for dict_build:
            dict_build_exception_68:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_67:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[322];
            tmp_dict_key_69 = mod_consts[253];
            tmp_dict_value_69 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_69 == NULL)) {
                tmp_dict_value_69 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_69 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1010;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_81;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_69, tmp_dict_value_69);
                assert(!(tmp_res != 0));
                tmp_dict_key_69 = mod_consts[254];
                tmp_list_element_81 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[65]);

                if (unlikely(tmp_list_element_81 == NULL)) {
                    tmp_list_element_81 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[65]);
                }

                if (tmp_list_element_81 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1011;

                    goto dict_build_exception_69;
                }
                tmp_dict_value_69 = PyList_New(3);
                {
                    PyObject *tmp_expression_value_297;
                    PyList_SET_ITEM0(tmp_dict_value_69, 0, tmp_list_element_81);
                    tmp_list_element_81 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[244]);

                    if (unlikely(tmp_list_element_81 == NULL)) {
                        tmp_list_element_81 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[244]);
                    }

                    if (tmp_list_element_81 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1012;

                        goto list_build_exception_72;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_69, 1, tmp_list_element_81);
                    tmp_expression_value_297 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_297 == NULL)) {
                        tmp_expression_value_297 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_297 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1013;

                        goto list_build_exception_72;
                    }
                    tmp_list_element_81 = LOOKUP_ATTRIBUTE(tmp_expression_value_297, mod_consts[241]);
                    if (tmp_list_element_81 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1013;

                        goto list_build_exception_72;
                    }
                    PyList_SET_ITEM(tmp_dict_value_69, 2, tmp_list_element_81);
                }
                goto list_build_noexception_72;
                // Exception handling pass through code for list_build:
                list_build_exception_72:;
                Py_DECREF(tmp_dict_value_69);
                goto dict_build_exception_69;
                // Finished with no exception for list_build:
                list_build_noexception_72:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_69, tmp_dict_value_69);
                Py_DECREF(tmp_dict_value_69);
                assert(!(tmp_res != 0));
                tmp_dict_key_69 = mod_consts[255];
                tmp_dict_value_69 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_69 == NULL)) {
                    tmp_dict_value_69 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_69 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1014;

                    goto dict_build_exception_69;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_69, tmp_dict_value_69);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_68;
            // Exception handling pass through code for dict_build:
            dict_build_exception_69:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_68:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[323];
            tmp_dict_key_70 = mod_consts[253];
            tmp_dict_value_70 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_70 == NULL)) {
                tmp_dict_value_70 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_70 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1022;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_82;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_70, tmp_dict_value_70);
                assert(!(tmp_res != 0));
                tmp_dict_key_70 = mod_consts[254];
                tmp_list_element_82 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[76]);

                if (unlikely(tmp_list_element_82 == NULL)) {
                    tmp_list_element_82 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[76]);
                }

                if (tmp_list_element_82 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1023;

                    goto dict_build_exception_70;
                }
                tmp_dict_value_70 = PyList_New(3);
                {
                    PyObject *tmp_expression_value_298;
                    PyObject *tmp_called_value_81;
                    PyObject *tmp_args_element_value_92;
                    PyObject *tmp_expression_value_299;
                    PyList_SET_ITEM0(tmp_dict_value_70, 0, tmp_list_element_82);
                    tmp_expression_value_298 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_298 == NULL)) {
                        tmp_expression_value_298 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_298 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1023;

                        goto list_build_exception_73;
                    }
                    tmp_list_element_82 = LOOKUP_ATTRIBUTE(tmp_expression_value_298, mod_consts[223]);
                    if (tmp_list_element_82 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1023;

                        goto list_build_exception_73;
                    }
                    PyList_SET_ITEM(tmp_dict_value_70, 1, tmp_list_element_82);
                    tmp_called_value_81 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_81 == NULL)) {
                        tmp_called_value_81 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_81 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1023;

                        goto list_build_exception_73;
                    }
                    tmp_expression_value_299 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_299 == NULL)) {
                        tmp_expression_value_299 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_299 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1023;

                        goto list_build_exception_73;
                    }
                    tmp_args_element_value_92 = LOOKUP_ATTRIBUTE(tmp_expression_value_299, mod_consts[84]);
                    if (tmp_args_element_value_92 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1023;

                        goto list_build_exception_73;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1023;
                    tmp_list_element_82 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_81, tmp_args_element_value_92);
                    Py_DECREF(tmp_args_element_value_92);
                    if (tmp_list_element_82 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1023;

                        goto list_build_exception_73;
                    }
                    PyList_SET_ITEM(tmp_dict_value_70, 2, tmp_list_element_82);
                }
                goto list_build_noexception_73;
                // Exception handling pass through code for list_build:
                list_build_exception_73:;
                Py_DECREF(tmp_dict_value_70);
                goto dict_build_exception_70;
                // Finished with no exception for list_build:
                list_build_noexception_73:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_70, tmp_dict_value_70);
                Py_DECREF(tmp_dict_value_70);
                assert(!(tmp_res != 0));
                tmp_dict_key_70 = mod_consts[255];
                tmp_dict_value_70 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_70 == NULL)) {
                    tmp_dict_value_70 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_70 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1024;

                    goto dict_build_exception_70;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_70, tmp_dict_value_70);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_69;
            // Exception handling pass through code for dict_build:
            dict_build_exception_70:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_69:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[324];
            tmp_dict_key_71 = mod_consts[253];
            tmp_dict_value_71 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_71 == NULL)) {
                tmp_dict_value_71 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_71 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1030;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_83;
                PyObject *tmp_expression_value_300;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_71, tmp_dict_value_71);
                assert(!(tmp_res != 0));
                tmp_dict_key_71 = mod_consts[254];
                tmp_expression_value_300 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                if (unlikely(tmp_expression_value_300 == NULL)) {
                    tmp_expression_value_300 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                }

                if (tmp_expression_value_300 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1031;

                    goto dict_build_exception_71;
                }
                tmp_list_element_83 = LOOKUP_ATTRIBUTE(tmp_expression_value_300, mod_consts[84]);
                if (tmp_list_element_83 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1031;

                    goto dict_build_exception_71;
                }
                tmp_dict_value_71 = PyList_New(1);
                PyList_SET_ITEM(tmp_dict_value_71, 0, tmp_list_element_83);
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_71, tmp_dict_value_71);
                Py_DECREF(tmp_dict_value_71);
                assert(!(tmp_res != 0));
                tmp_dict_key_71 = mod_consts[255];
                tmp_dict_value_71 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_71 == NULL)) {
                    tmp_dict_value_71 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_71 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1032;

                    goto dict_build_exception_71;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_71, tmp_dict_value_71);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_70;
            // Exception handling pass through code for dict_build:
            dict_build_exception_71:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_70:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[325];
            tmp_dict_key_72 = mod_consts[253];
            tmp_dict_value_72 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_72 == NULL)) {
                tmp_dict_value_72 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_72 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1040;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_84;
                PyObject *tmp_expression_value_301;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_72, tmp_dict_value_72);
                assert(!(tmp_res != 0));
                tmp_dict_key_72 = mod_consts[254];
                tmp_expression_value_301 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                if (unlikely(tmp_expression_value_301 == NULL)) {
                    tmp_expression_value_301 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                }

                if (tmp_expression_value_301 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1041;

                    goto dict_build_exception_72;
                }
                tmp_list_element_84 = LOOKUP_ATTRIBUTE(tmp_expression_value_301, mod_consts[84]);
                if (tmp_list_element_84 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1041;

                    goto dict_build_exception_72;
                }
                tmp_dict_value_72 = PyList_New(3);
                {
                    PyObject *tmp_expression_value_302;
                    PyObject *tmp_expression_value_303;
                    PyList_SET_ITEM(tmp_dict_value_72, 0, tmp_list_element_84);
                    tmp_expression_value_302 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_302 == NULL)) {
                        tmp_expression_value_302 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_302 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1041;

                        goto list_build_exception_74;
                    }
                    tmp_list_element_84 = LOOKUP_ATTRIBUTE(tmp_expression_value_302, mod_consts[84]);
                    if (tmp_list_element_84 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1041;

                        goto list_build_exception_74;
                    }
                    PyList_SET_ITEM(tmp_dict_value_72, 1, tmp_list_element_84);
                    tmp_expression_value_303 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_303 == NULL)) {
                        tmp_expression_value_303 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_303 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1041;

                        goto list_build_exception_74;
                    }
                    tmp_list_element_84 = LOOKUP_ATTRIBUTE(tmp_expression_value_303, mod_consts[223]);
                    if (tmp_list_element_84 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1041;

                        goto list_build_exception_74;
                    }
                    PyList_SET_ITEM(tmp_dict_value_72, 2, tmp_list_element_84);
                }
                goto list_build_noexception_74;
                // Exception handling pass through code for list_build:
                list_build_exception_74:;
                Py_DECREF(tmp_dict_value_72);
                goto dict_build_exception_72;
                // Finished with no exception for list_build:
                list_build_noexception_74:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_72, tmp_dict_value_72);
                Py_DECREF(tmp_dict_value_72);
                assert(!(tmp_res != 0));
                tmp_dict_key_72 = mod_consts[255];
                tmp_dict_value_72 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_72 == NULL)) {
                    tmp_dict_value_72 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_72 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1042;

                    goto dict_build_exception_72;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_72, tmp_dict_value_72);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_71;
            // Exception handling pass through code for dict_build:
            dict_build_exception_72:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_71:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[326];
            tmp_dict_key_73 = mod_consts[253];
            tmp_dict_value_73 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_73 == NULL)) {
                tmp_dict_value_73 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_73 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1049;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_85;
                PyObject *tmp_expression_value_304;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_73, tmp_dict_value_73);
                assert(!(tmp_res != 0));
                tmp_dict_key_73 = mod_consts[254];
                tmp_expression_value_304 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                if (unlikely(tmp_expression_value_304 == NULL)) {
                    tmp_expression_value_304 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                }

                if (tmp_expression_value_304 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1050;

                    goto dict_build_exception_73;
                }
                tmp_list_element_85 = LOOKUP_ATTRIBUTE(tmp_expression_value_304, mod_consts[84]);
                if (tmp_list_element_85 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1050;

                    goto dict_build_exception_73;
                }
                tmp_dict_value_73 = PyList_New(3);
                PyList_SET_ITEM(tmp_dict_value_73, 0, tmp_list_element_85);
                tmp_list_element_85 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[65]);

                if (unlikely(tmp_list_element_85 == NULL)) {
                    tmp_list_element_85 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[65]);
                }

                if (tmp_list_element_85 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1050;

                    goto list_build_exception_75;
                }
                PyList_SET_ITEM0(tmp_dict_value_73, 1, tmp_list_element_85);
                tmp_list_element_85 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[59]);

                if (unlikely(tmp_list_element_85 == NULL)) {
                    tmp_list_element_85 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[59]);
                }

                if (tmp_list_element_85 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1050;

                    goto list_build_exception_75;
                }
                PyList_SET_ITEM0(tmp_dict_value_73, 2, tmp_list_element_85);
                goto list_build_noexception_75;
                // Exception handling pass through code for list_build:
                list_build_exception_75:;
                Py_DECREF(tmp_dict_value_73);
                goto dict_build_exception_73;
                // Finished with no exception for list_build:
                list_build_noexception_75:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_73, tmp_dict_value_73);
                Py_DECREF(tmp_dict_value_73);
                assert(!(tmp_res != 0));
                tmp_dict_key_73 = mod_consts[255];
                tmp_dict_value_73 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_73 == NULL)) {
                    tmp_dict_value_73 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_73 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1051;

                    goto dict_build_exception_73;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_73, tmp_dict_value_73);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_72;
            // Exception handling pass through code for dict_build:
            dict_build_exception_73:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_72:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[327];
            tmp_dict_key_74 = mod_consts[253];
            tmp_dict_value_74 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_74 == NULL)) {
                tmp_dict_value_74 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_74 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1058;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_86;
                PyObject *tmp_expression_value_305;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_74, tmp_dict_value_74);
                assert(!(tmp_res != 0));
                tmp_dict_key_74 = mod_consts[254];
                tmp_expression_value_305 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                if (unlikely(tmp_expression_value_305 == NULL)) {
                    tmp_expression_value_305 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                }

                if (tmp_expression_value_305 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1059;

                    goto dict_build_exception_74;
                }
                tmp_list_element_86 = LOOKUP_ATTRIBUTE(tmp_expression_value_305, mod_consts[84]);
                if (tmp_list_element_86 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1059;

                    goto dict_build_exception_74;
                }
                tmp_dict_value_74 = PyList_New(2);
                {
                    PyObject *tmp_expression_value_306;
                    PyList_SET_ITEM(tmp_dict_value_74, 0, tmp_list_element_86);
                    tmp_expression_value_306 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_306 == NULL)) {
                        tmp_expression_value_306 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_306 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1059;

                        goto list_build_exception_76;
                    }
                    tmp_list_element_86 = LOOKUP_ATTRIBUTE(tmp_expression_value_306, mod_consts[223]);
                    if (tmp_list_element_86 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1059;

                        goto list_build_exception_76;
                    }
                    PyList_SET_ITEM(tmp_dict_value_74, 1, tmp_list_element_86);
                }
                goto list_build_noexception_76;
                // Exception handling pass through code for list_build:
                list_build_exception_76:;
                Py_DECREF(tmp_dict_value_74);
                goto dict_build_exception_74;
                // Finished with no exception for list_build:
                list_build_noexception_76:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_74, tmp_dict_value_74);
                Py_DECREF(tmp_dict_value_74);
                assert(!(tmp_res != 0));
                tmp_dict_key_74 = mod_consts[255];
                tmp_dict_value_74 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_74 == NULL)) {
                    tmp_dict_value_74 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_74 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1060;

                    goto dict_build_exception_74;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_74, tmp_dict_value_74);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_73;
            // Exception handling pass through code for dict_build:
            dict_build_exception_74:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_73:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[328];
            tmp_dict_key_75 = mod_consts[253];
            tmp_dict_value_75 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_75 == NULL)) {
                tmp_dict_value_75 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_75 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1067;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_87;
                PyObject *tmp_expression_value_307;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_75, tmp_dict_value_75);
                assert(!(tmp_res != 0));
                tmp_dict_key_75 = mod_consts[254];
                tmp_expression_value_307 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                if (unlikely(tmp_expression_value_307 == NULL)) {
                    tmp_expression_value_307 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                }

                if (tmp_expression_value_307 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1068;

                    goto dict_build_exception_75;
                }
                tmp_list_element_87 = LOOKUP_ATTRIBUTE(tmp_expression_value_307, mod_consts[84]);
                if (tmp_list_element_87 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1068;

                    goto dict_build_exception_75;
                }
                tmp_dict_value_75 = PyList_New(2);
                {
                    PyObject *tmp_expression_value_308;
                    PyList_SET_ITEM(tmp_dict_value_75, 0, tmp_list_element_87);
                    tmp_expression_value_308 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_308 == NULL)) {
                        tmp_expression_value_308 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_308 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1068;

                        goto list_build_exception_77;
                    }
                    tmp_list_element_87 = LOOKUP_ATTRIBUTE(tmp_expression_value_308, mod_consts[223]);
                    if (tmp_list_element_87 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1068;

                        goto list_build_exception_77;
                    }
                    PyList_SET_ITEM(tmp_dict_value_75, 1, tmp_list_element_87);
                }
                goto list_build_noexception_77;
                // Exception handling pass through code for list_build:
                list_build_exception_77:;
                Py_DECREF(tmp_dict_value_75);
                goto dict_build_exception_75;
                // Finished with no exception for list_build:
                list_build_noexception_77:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_75, tmp_dict_value_75);
                Py_DECREF(tmp_dict_value_75);
                assert(!(tmp_res != 0));
                tmp_dict_key_75 = mod_consts[255];
                tmp_dict_value_75 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_75 == NULL)) {
                    tmp_dict_value_75 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_75 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1069;

                    goto dict_build_exception_75;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_75, tmp_dict_value_75);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_74;
            // Exception handling pass through code for dict_build:
            dict_build_exception_75:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_74:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[329];
            tmp_dict_key_76 = mod_consts[253];
            tmp_dict_value_76 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_76 == NULL)) {
                tmp_dict_value_76 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_76 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1079;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_88;
                PyObject *tmp_expression_value_309;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_76, tmp_dict_value_76);
                assert(!(tmp_res != 0));
                tmp_dict_key_76 = mod_consts[254];
                tmp_expression_value_309 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                if (unlikely(tmp_expression_value_309 == NULL)) {
                    tmp_expression_value_309 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                }

                if (tmp_expression_value_309 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1080;

                    goto dict_build_exception_76;
                }
                tmp_list_element_88 = LOOKUP_ATTRIBUTE(tmp_expression_value_309, mod_consts[197]);
                if (tmp_list_element_88 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1080;

                    goto dict_build_exception_76;
                }
                tmp_dict_value_76 = PyList_New(2);
                {
                    PyObject *tmp_called_value_82;
                    PyObject *tmp_args_element_value_93;
                    PyList_SET_ITEM(tmp_dict_value_76, 0, tmp_list_element_88);
                    tmp_called_value_82 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_82 == NULL)) {
                        tmp_called_value_82 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_82 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1080;

                        goto list_build_exception_78;
                    }
                    tmp_args_element_value_93 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[131]);

                    if (unlikely(tmp_args_element_value_93 == NULL)) {
                        tmp_args_element_value_93 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[131]);
                    }

                    if (tmp_args_element_value_93 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1080;

                        goto list_build_exception_78;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1080;
                    tmp_list_element_88 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_82, tmp_args_element_value_93);
                    if (tmp_list_element_88 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1080;

                        goto list_build_exception_78;
                    }
                    PyList_SET_ITEM(tmp_dict_value_76, 1, tmp_list_element_88);
                }
                goto list_build_noexception_78;
                // Exception handling pass through code for list_build:
                list_build_exception_78:;
                Py_DECREF(tmp_dict_value_76);
                goto dict_build_exception_76;
                // Finished with no exception for list_build:
                list_build_noexception_78:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_76, tmp_dict_value_76);
                Py_DECREF(tmp_dict_value_76);
                assert(!(tmp_res != 0));
                tmp_dict_key_76 = mod_consts[255];
                tmp_dict_value_76 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_76 == NULL)) {
                    tmp_dict_value_76 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_76 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1081;

                    goto dict_build_exception_76;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_76, tmp_dict_value_76);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_75;
            // Exception handling pass through code for dict_build:
            dict_build_exception_76:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_75:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[330];
            tmp_dict_key_77 = mod_consts[253];
            tmp_dict_value_77 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_77 == NULL)) {
                tmp_dict_value_77 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_77 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1089;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_89;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_77, tmp_dict_value_77);
                assert(!(tmp_res != 0));
                tmp_dict_key_77 = mod_consts[254];
                tmp_list_element_89 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[131]);

                if (unlikely(tmp_list_element_89 == NULL)) {
                    tmp_list_element_89 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[131]);
                }

                if (tmp_list_element_89 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1090;

                    goto dict_build_exception_77;
                }
                tmp_dict_value_77 = PyList_New(3);
                {
                    PyObject *tmp_expression_value_310;
                    PyList_SET_ITEM0(tmp_dict_value_77, 0, tmp_list_element_89);
                    tmp_list_element_89 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[132]);

                    if (unlikely(tmp_list_element_89 == NULL)) {
                        tmp_list_element_89 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[132]);
                    }

                    if (tmp_list_element_89 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1090;

                        goto list_build_exception_79;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_77, 1, tmp_list_element_89);
                    tmp_expression_value_310 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_310 == NULL)) {
                        tmp_expression_value_310 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_310 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1090;

                        goto list_build_exception_79;
                    }
                    tmp_list_element_89 = LOOKUP_ATTRIBUTE(tmp_expression_value_310, mod_consts[84]);
                    if (tmp_list_element_89 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1090;

                        goto list_build_exception_79;
                    }
                    PyList_SET_ITEM(tmp_dict_value_77, 2, tmp_list_element_89);
                }
                goto list_build_noexception_79;
                // Exception handling pass through code for list_build:
                list_build_exception_79:;
                Py_DECREF(tmp_dict_value_77);
                goto dict_build_exception_77;
                // Finished with no exception for list_build:
                list_build_noexception_79:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_77, tmp_dict_value_77);
                Py_DECREF(tmp_dict_value_77);
                assert(!(tmp_res != 0));
                tmp_dict_key_77 = mod_consts[255];
                tmp_dict_value_77 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_77 == NULL)) {
                    tmp_dict_value_77 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_77 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1091;

                    goto dict_build_exception_77;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_77, tmp_dict_value_77);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_76;
            // Exception handling pass through code for dict_build:
            dict_build_exception_77:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_76:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[331];
            tmp_dict_key_78 = mod_consts[253];
            tmp_dict_value_78 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_78 == NULL)) {
                tmp_dict_value_78 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_78 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1098;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_90;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_78, tmp_dict_value_78);
                assert(!(tmp_res != 0));
                tmp_dict_key_78 = mod_consts[254];
                tmp_list_element_90 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[131]);

                if (unlikely(tmp_list_element_90 == NULL)) {
                    tmp_list_element_90 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[131]);
                }

                if (tmp_list_element_90 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1099;

                    goto dict_build_exception_78;
                }
                tmp_dict_value_78 = PyList_New(3);
                {
                    PyObject *tmp_called_value_83;
                    PyObject *tmp_args_element_value_94;
                    PyObject *tmp_expression_value_311;
                    PyList_SET_ITEM0(tmp_dict_value_78, 0, tmp_list_element_90);
                    tmp_list_element_90 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[131]);

                    if (unlikely(tmp_list_element_90 == NULL)) {
                        tmp_list_element_90 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[131]);
                    }

                    if (tmp_list_element_90 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1099;

                        goto list_build_exception_80;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_78, 1, tmp_list_element_90);
                    tmp_called_value_83 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_83 == NULL)) {
                        tmp_called_value_83 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_83 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1099;

                        goto list_build_exception_80;
                    }
                    tmp_expression_value_311 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_311 == NULL)) {
                        tmp_expression_value_311 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_311 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1099;

                        goto list_build_exception_80;
                    }
                    tmp_args_element_value_94 = LOOKUP_ATTRIBUTE(tmp_expression_value_311, mod_consts[167]);
                    if (tmp_args_element_value_94 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1099;

                        goto list_build_exception_80;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1099;
                    tmp_list_element_90 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_83, tmp_args_element_value_94);
                    Py_DECREF(tmp_args_element_value_94);
                    if (tmp_list_element_90 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1099;

                        goto list_build_exception_80;
                    }
                    PyList_SET_ITEM(tmp_dict_value_78, 2, tmp_list_element_90);
                }
                goto list_build_noexception_80;
                // Exception handling pass through code for list_build:
                list_build_exception_80:;
                Py_DECREF(tmp_dict_value_78);
                goto dict_build_exception_78;
                // Finished with no exception for list_build:
                list_build_noexception_80:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_78, tmp_dict_value_78);
                Py_DECREF(tmp_dict_value_78);
                assert(!(tmp_res != 0));
                tmp_dict_key_78 = mod_consts[255];
                tmp_dict_value_78 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_78 == NULL)) {
                    tmp_dict_value_78 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_78 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1100;

                    goto dict_build_exception_78;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_78, tmp_dict_value_78);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_77;
            // Exception handling pass through code for dict_build:
            dict_build_exception_78:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_77:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[332];
            tmp_dict_key_79 = mod_consts[253];
            tmp_dict_value_79 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_79 == NULL)) {
                tmp_dict_value_79 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_79 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1112;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_91;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_79, tmp_dict_value_79);
                assert(!(tmp_res != 0));
                tmp_dict_key_79 = mod_consts[254];
                tmp_list_element_91 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[246]);

                if (unlikely(tmp_list_element_91 == NULL)) {
                    tmp_list_element_91 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[246]);
                }

                if (tmp_list_element_91 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1113;

                    goto dict_build_exception_79;
                }
                tmp_dict_value_79 = PyList_New(7);
                {
                    PyObject *tmp_called_value_84;
                    PyObject *tmp_args_element_value_95;
                    PyObject *tmp_expression_value_312;
                    PyObject *tmp_expression_value_313;
                    PyObject *tmp_called_value_85;
                    PyObject *tmp_args_element_value_96;
                    PyObject *tmp_expression_value_314;
                    PyObject *tmp_called_value_86;
                    PyObject *tmp_args_element_value_97;
                    PyObject *tmp_expression_value_315;
                    PyList_SET_ITEM0(tmp_dict_value_79, 0, tmp_list_element_91);
                    tmp_list_element_91 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[134]);

                    if (unlikely(tmp_list_element_91 == NULL)) {
                        tmp_list_element_91 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[134]);
                    }

                    if (tmp_list_element_91 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1114;

                        goto list_build_exception_81;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_79, 1, tmp_list_element_91);
                    tmp_called_value_84 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_84 == NULL)) {
                        tmp_called_value_84 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_84 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1115;

                        goto list_build_exception_81;
                    }
                    tmp_expression_value_312 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_312 == NULL)) {
                        tmp_expression_value_312 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_312 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1115;

                        goto list_build_exception_81;
                    }
                    tmp_args_element_value_95 = LOOKUP_ATTRIBUTE(tmp_expression_value_312, mod_consts[84]);
                    if (tmp_args_element_value_95 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1115;

                        goto list_build_exception_81;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1115;
                    tmp_list_element_91 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_84, tmp_args_element_value_95);
                    Py_DECREF(tmp_args_element_value_95);
                    if (tmp_list_element_91 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1115;

                        goto list_build_exception_81;
                    }
                    PyList_SET_ITEM(tmp_dict_value_79, 2, tmp_list_element_91);
                    tmp_list_element_91 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[134]);

                    if (unlikely(tmp_list_element_91 == NULL)) {
                        tmp_list_element_91 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[134]);
                    }

                    if (tmp_list_element_91 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1116;

                        goto list_build_exception_81;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_79, 3, tmp_list_element_91);
                    tmp_expression_value_313 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_313 == NULL)) {
                        tmp_expression_value_313 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_313 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1117;

                        goto list_build_exception_81;
                    }
                    tmp_list_element_91 = LOOKUP_ATTRIBUTE(tmp_expression_value_313, mod_consts[197]);
                    if (tmp_list_element_91 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1117;

                        goto list_build_exception_81;
                    }
                    PyList_SET_ITEM(tmp_dict_value_79, 4, tmp_list_element_91);
                    tmp_called_value_85 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_85 == NULL)) {
                        tmp_called_value_85 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_85 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1118;

                        goto list_build_exception_81;
                    }
                    tmp_expression_value_314 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_314 == NULL)) {
                        tmp_expression_value_314 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_314 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1118;

                        goto list_build_exception_81;
                    }
                    tmp_args_element_value_96 = LOOKUP_ATTRIBUTE(tmp_expression_value_314, mod_consts[84]);
                    if (tmp_args_element_value_96 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1118;

                        goto list_build_exception_81;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1118;
                    tmp_list_element_91 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_85, tmp_args_element_value_96);
                    Py_DECREF(tmp_args_element_value_96);
                    if (tmp_list_element_91 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1118;

                        goto list_build_exception_81;
                    }
                    PyList_SET_ITEM(tmp_dict_value_79, 5, tmp_list_element_91);
                    tmp_called_value_86 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_86 == NULL)) {
                        tmp_called_value_86 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_86 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1119;

                        goto list_build_exception_81;
                    }
                    tmp_expression_value_315 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_315 == NULL)) {
                        tmp_expression_value_315 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_315 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1119;

                        goto list_build_exception_81;
                    }
                    tmp_args_element_value_97 = LOOKUP_ATTRIBUTE(tmp_expression_value_315, mod_consts[223]);
                    if (tmp_args_element_value_97 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1119;

                        goto list_build_exception_81;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1119;
                    tmp_list_element_91 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_86, tmp_args_element_value_97);
                    Py_DECREF(tmp_args_element_value_97);
                    if (tmp_list_element_91 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1119;

                        goto list_build_exception_81;
                    }
                    PyList_SET_ITEM(tmp_dict_value_79, 6, tmp_list_element_91);
                }
                goto list_build_noexception_81;
                // Exception handling pass through code for list_build:
                list_build_exception_81:;
                Py_DECREF(tmp_dict_value_79);
                goto dict_build_exception_79;
                // Finished with no exception for list_build:
                list_build_noexception_81:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_79, tmp_dict_value_79);
                Py_DECREF(tmp_dict_value_79);
                assert(!(tmp_res != 0));
                tmp_dict_key_79 = mod_consts[255];
                tmp_dict_value_79 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_79 == NULL)) {
                    tmp_dict_value_79 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_79 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1120;

                    goto dict_build_exception_79;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_79, tmp_dict_value_79);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_78;
            // Exception handling pass through code for dict_build:
            dict_build_exception_79:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_78:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[333];
            tmp_dict_key_80 = mod_consts[253];
            tmp_dict_value_80 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_80 == NULL)) {
                tmp_dict_value_80 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_80 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1129;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_92;
                PyObject *tmp_expression_value_316;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_80, tmp_dict_value_80);
                assert(!(tmp_res != 0));
                tmp_dict_key_80 = mod_consts[254];
                tmp_expression_value_316 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                if (unlikely(tmp_expression_value_316 == NULL)) {
                    tmp_expression_value_316 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                }

                if (tmp_expression_value_316 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1130;

                    goto dict_build_exception_80;
                }
                tmp_list_element_92 = LOOKUP_ATTRIBUTE(tmp_expression_value_316, mod_consts[84]);
                if (tmp_list_element_92 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1130;

                    goto dict_build_exception_80;
                }
                tmp_dict_value_80 = PyList_New(4);
                {
                    PyObject *tmp_expression_value_317;
                    PyObject *tmp_expression_value_318;
                    PyObject *tmp_called_value_87;
                    PyObject *tmp_args_element_value_98;
                    PyList_SET_ITEM(tmp_dict_value_80, 0, tmp_list_element_92);
                    tmp_expression_value_317 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_317 == NULL)) {
                        tmp_expression_value_317 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_317 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1131;

                        goto list_build_exception_82;
                    }
                    tmp_list_element_92 = LOOKUP_ATTRIBUTE(tmp_expression_value_317, mod_consts[223]);
                    if (tmp_list_element_92 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1131;

                        goto list_build_exception_82;
                    }
                    PyList_SET_ITEM(tmp_dict_value_80, 1, tmp_list_element_92);
                    tmp_expression_value_318 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_318 == NULL)) {
                        tmp_expression_value_318 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_318 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1132;

                        goto list_build_exception_82;
                    }
                    tmp_list_element_92 = LOOKUP_ATTRIBUTE(tmp_expression_value_318, mod_consts[197]);
                    if (tmp_list_element_92 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1132;

                        goto list_build_exception_82;
                    }
                    PyList_SET_ITEM(tmp_dict_value_80, 2, tmp_list_element_92);
                    tmp_called_value_87 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_87 == NULL)) {
                        tmp_called_value_87 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_87 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1133;

                        goto list_build_exception_82;
                    }
                    tmp_args_element_value_98 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[133]);

                    if (unlikely(tmp_args_element_value_98 == NULL)) {
                        tmp_args_element_value_98 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[133]);
                    }

                    if (tmp_args_element_value_98 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1133;

                        goto list_build_exception_82;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1133;
                    tmp_list_element_92 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_87, tmp_args_element_value_98);
                    if (tmp_list_element_92 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1133;

                        goto list_build_exception_82;
                    }
                    PyList_SET_ITEM(tmp_dict_value_80, 3, tmp_list_element_92);
                }
                goto list_build_noexception_82;
                // Exception handling pass through code for list_build:
                list_build_exception_82:;
                Py_DECREF(tmp_dict_value_80);
                goto dict_build_exception_80;
                // Finished with no exception for list_build:
                list_build_noexception_82:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_80, tmp_dict_value_80);
                Py_DECREF(tmp_dict_value_80);
                assert(!(tmp_res != 0));
                tmp_dict_key_80 = mod_consts[255];
                tmp_dict_value_80 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_80 == NULL)) {
                    tmp_dict_value_80 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_80 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1134;

                    goto dict_build_exception_80;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_80, tmp_dict_value_80);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_79;
            // Exception handling pass through code for dict_build:
            dict_build_exception_80:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_79:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[334];
            tmp_dict_key_81 = mod_consts[253];
            tmp_dict_value_81 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_81 == NULL)) {
                tmp_dict_value_81 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_81 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1140;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_93;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_81, tmp_dict_value_81);
                assert(!(tmp_res != 0));
                tmp_dict_key_81 = mod_consts[254];
                tmp_list_element_93 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[133]);

                if (unlikely(tmp_list_element_93 == NULL)) {
                    tmp_list_element_93 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[133]);
                }

                if (tmp_list_element_93 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1141;

                    goto dict_build_exception_81;
                }
                tmp_dict_value_81 = PyList_New(1);
                PyList_SET_ITEM0(tmp_dict_value_81, 0, tmp_list_element_93);
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_81, tmp_dict_value_81);
                Py_DECREF(tmp_dict_value_81);
                assert(!(tmp_res != 0));
                tmp_dict_key_81 = mod_consts[255];
                tmp_dict_value_81 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_81 == NULL)) {
                    tmp_dict_value_81 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_81 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1142;

                    goto dict_build_exception_81;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_81, tmp_dict_value_81);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_80;
            // Exception handling pass through code for dict_build:
            dict_build_exception_81:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_80:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[335];
            tmp_dict_key_82 = mod_consts[253];
            tmp_dict_value_82 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_82 == NULL)) {
                tmp_dict_value_82 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_82 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1150;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_94;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_82, tmp_dict_value_82);
                assert(!(tmp_res != 0));
                tmp_dict_key_82 = mod_consts[254];
                tmp_list_element_94 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[133]);

                if (unlikely(tmp_list_element_94 == NULL)) {
                    tmp_list_element_94 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[133]);
                }

                if (tmp_list_element_94 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1151;

                    goto dict_build_exception_82;
                }
                tmp_dict_value_82 = PyList_New(3);
                {
                    PyObject *tmp_expression_value_319;
                    PyList_SET_ITEM0(tmp_dict_value_82, 0, tmp_list_element_94);
                    tmp_list_element_94 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[136]);

                    if (unlikely(tmp_list_element_94 == NULL)) {
                        tmp_list_element_94 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[136]);
                    }

                    if (tmp_list_element_94 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1152;

                        goto list_build_exception_83;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_82, 1, tmp_list_element_94);
                    tmp_expression_value_319 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_319 == NULL)) {
                        tmp_expression_value_319 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_319 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1153;

                        goto list_build_exception_83;
                    }
                    tmp_list_element_94 = LOOKUP_ATTRIBUTE(tmp_expression_value_319, mod_consts[84]);
                    if (tmp_list_element_94 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1153;

                        goto list_build_exception_83;
                    }
                    PyList_SET_ITEM(tmp_dict_value_82, 2, tmp_list_element_94);
                }
                goto list_build_noexception_83;
                // Exception handling pass through code for list_build:
                list_build_exception_83:;
                Py_DECREF(tmp_dict_value_82);
                goto dict_build_exception_82;
                // Finished with no exception for list_build:
                list_build_noexception_83:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_82, tmp_dict_value_82);
                Py_DECREF(tmp_dict_value_82);
                assert(!(tmp_res != 0));
                tmp_dict_key_82 = mod_consts[255];
                tmp_dict_value_82 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_82 == NULL)) {
                    tmp_dict_value_82 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_82 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1155;

                    goto dict_build_exception_82;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_82, tmp_dict_value_82);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_81;
            // Exception handling pass through code for dict_build:
            dict_build_exception_82:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_81:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[336];
            tmp_dict_key_83 = mod_consts[253];
            tmp_dict_value_83 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_83 == NULL)) {
                tmp_dict_value_83 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_83 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1163;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_95;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_83, tmp_dict_value_83);
                assert(!(tmp_res != 0));
                tmp_dict_key_83 = mod_consts[254];
                tmp_list_element_95 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[133]);

                if (unlikely(tmp_list_element_95 == NULL)) {
                    tmp_list_element_95 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[133]);
                }

                if (tmp_list_element_95 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1164;

                    goto dict_build_exception_83;
                }
                tmp_dict_value_83 = PyList_New(3);
                {
                    PyObject *tmp_expression_value_320;
                    PyObject *tmp_called_value_88;
                    PyObject *tmp_args_element_value_99;
                    PyList_SET_ITEM0(tmp_dict_value_83, 0, tmp_list_element_95);
                    tmp_expression_value_320 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_320 == NULL)) {
                        tmp_expression_value_320 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_320 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1165;

                        goto list_build_exception_84;
                    }
                    tmp_list_element_95 = LOOKUP_ATTRIBUTE(tmp_expression_value_320, mod_consts[197]);
                    if (tmp_list_element_95 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1165;

                        goto list_build_exception_84;
                    }
                    PyList_SET_ITEM(tmp_dict_value_83, 1, tmp_list_element_95);
                    tmp_called_value_88 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_88 == NULL)) {
                        tmp_called_value_88 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_88 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1166;

                        goto list_build_exception_84;
                    }
                    tmp_args_element_value_99 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[137]);

                    if (unlikely(tmp_args_element_value_99 == NULL)) {
                        tmp_args_element_value_99 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[137]);
                    }

                    if (tmp_args_element_value_99 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1166;

                        goto list_build_exception_84;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1166;
                    tmp_list_element_95 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_88, tmp_args_element_value_99);
                    if (tmp_list_element_95 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1166;

                        goto list_build_exception_84;
                    }
                    PyList_SET_ITEM(tmp_dict_value_83, 2, tmp_list_element_95);
                }
                goto list_build_noexception_84;
                // Exception handling pass through code for list_build:
                list_build_exception_84:;
                Py_DECREF(tmp_dict_value_83);
                goto dict_build_exception_83;
                // Finished with no exception for list_build:
                list_build_noexception_84:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_83, tmp_dict_value_83);
                Py_DECREF(tmp_dict_value_83);
                assert(!(tmp_res != 0));
                tmp_dict_key_83 = mod_consts[255];
                tmp_dict_value_83 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_83 == NULL)) {
                    tmp_dict_value_83 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_83 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1168;

                    goto dict_build_exception_83;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_83, tmp_dict_value_83);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_82;
            // Exception handling pass through code for dict_build:
            dict_build_exception_83:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_82:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[337];
            tmp_dict_key_84 = mod_consts[253];
            tmp_dict_value_84 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_84 == NULL)) {
                tmp_dict_value_84 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_84 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1176;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_96;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_84, tmp_dict_value_84);
                assert(!(tmp_res != 0));
                tmp_dict_key_84 = mod_consts[254];
                tmp_list_element_96 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[137]);

                if (unlikely(tmp_list_element_96 == NULL)) {
                    tmp_list_element_96 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[137]);
                }

                if (tmp_list_element_96 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1177;

                    goto dict_build_exception_84;
                }
                tmp_dict_value_84 = PyList_New(3);
                {
                    PyObject *tmp_expression_value_321;
                    PyList_SET_ITEM0(tmp_dict_value_84, 0, tmp_list_element_96);
                    tmp_list_element_96 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[138]);

                    if (unlikely(tmp_list_element_96 == NULL)) {
                        tmp_list_element_96 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[138]);
                    }

                    if (tmp_list_element_96 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1178;

                        goto list_build_exception_85;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_84, 1, tmp_list_element_96);
                    tmp_expression_value_321 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_321 == NULL)) {
                        tmp_expression_value_321 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_321 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1179;

                        goto list_build_exception_85;
                    }
                    tmp_list_element_96 = LOOKUP_ATTRIBUTE(tmp_expression_value_321, mod_consts[84]);
                    if (tmp_list_element_96 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1179;

                        goto list_build_exception_85;
                    }
                    PyList_SET_ITEM(tmp_dict_value_84, 2, tmp_list_element_96);
                }
                goto list_build_noexception_85;
                // Exception handling pass through code for list_build:
                list_build_exception_85:;
                Py_DECREF(tmp_dict_value_84);
                goto dict_build_exception_84;
                // Finished with no exception for list_build:
                list_build_noexception_85:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_84, tmp_dict_value_84);
                Py_DECREF(tmp_dict_value_84);
                assert(!(tmp_res != 0));
                tmp_dict_key_84 = mod_consts[255];
                tmp_dict_value_84 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_84 == NULL)) {
                    tmp_dict_value_84 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_84 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1181;

                    goto dict_build_exception_84;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_84, tmp_dict_value_84);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_83;
            // Exception handling pass through code for dict_build:
            dict_build_exception_84:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_83:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[338];
            tmp_dict_key_85 = mod_consts[253];
            tmp_dict_value_85 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_85 == NULL)) {
                tmp_dict_value_85 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_85 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1189;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_97;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_85, tmp_dict_value_85);
                assert(!(tmp_res != 0));
                tmp_dict_key_85 = mod_consts[254];
                tmp_list_element_97 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[133]);

                if (unlikely(tmp_list_element_97 == NULL)) {
                    tmp_list_element_97 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[133]);
                }

                if (tmp_list_element_97 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1190;

                    goto dict_build_exception_85;
                }
                tmp_dict_value_85 = PyList_New(3);
                {
                    PyObject *tmp_expression_value_322;
                    PyList_SET_ITEM0(tmp_dict_value_85, 0, tmp_list_element_97);
                    tmp_list_element_97 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[245]);

                    if (unlikely(tmp_list_element_97 == NULL)) {
                        tmp_list_element_97 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[245]);
                    }

                    if (tmp_list_element_97 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1191;

                        goto list_build_exception_86;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_85, 1, tmp_list_element_97);
                    tmp_expression_value_322 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_322 == NULL)) {
                        tmp_expression_value_322 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_322 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1192;

                        goto list_build_exception_86;
                    }
                    tmp_list_element_97 = LOOKUP_ATTRIBUTE(tmp_expression_value_322, mod_consts[84]);
                    if (tmp_list_element_97 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1192;

                        goto list_build_exception_86;
                    }
                    PyList_SET_ITEM(tmp_dict_value_85, 2, tmp_list_element_97);
                }
                goto list_build_noexception_86;
                // Exception handling pass through code for list_build:
                list_build_exception_86:;
                Py_DECREF(tmp_dict_value_85);
                goto dict_build_exception_85;
                // Finished with no exception for list_build:
                list_build_noexception_86:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_85, tmp_dict_value_85);
                Py_DECREF(tmp_dict_value_85);
                assert(!(tmp_res != 0));
                tmp_dict_key_85 = mod_consts[255];
                tmp_dict_value_85 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_85 == NULL)) {
                    tmp_dict_value_85 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_85 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1194;

                    goto dict_build_exception_85;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_85, tmp_dict_value_85);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_84;
            // Exception handling pass through code for dict_build:
            dict_build_exception_85:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_84:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[339];
            tmp_dict_key_86 = mod_consts[253];
            tmp_dict_value_86 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_86 == NULL)) {
                tmp_dict_value_86 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_86 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1208;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_98;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_86, tmp_dict_value_86);
                assert(!(tmp_res != 0));
                tmp_dict_key_86 = mod_consts[254];
                tmp_list_element_98 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[62]);

                if (unlikely(tmp_list_element_98 == NULL)) {
                    tmp_list_element_98 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[62]);
                }

                if (tmp_list_element_98 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1209;

                    goto dict_build_exception_86;
                }
                tmp_dict_value_86 = PyList_New(4);
                {
                    PyObject *tmp_expression_value_323;
                    PyObject *tmp_called_value_89;
                    PyObject *tmp_expression_value_324;
                    PyObject *tmp_args_element_value_100;
                    PyList_SET_ITEM0(tmp_dict_value_86, 0, tmp_list_element_98);
                    tmp_list_element_98 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[140]);

                    if (unlikely(tmp_list_element_98 == NULL)) {
                        tmp_list_element_98 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[140]);
                    }

                    if (tmp_list_element_98 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1210;

                        goto list_build_exception_87;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_86, 1, tmp_list_element_98);
                    tmp_expression_value_323 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_323 == NULL)) {
                        tmp_expression_value_323 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_323 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1211;

                        goto list_build_exception_87;
                    }
                    tmp_list_element_98 = LOOKUP_ATTRIBUTE(tmp_expression_value_323, mod_consts[197]);
                    if (tmp_list_element_98 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1211;

                        goto list_build_exception_87;
                    }
                    PyList_SET_ITEM(tmp_dict_value_86, 2, tmp_list_element_98);
                    tmp_expression_value_324 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_324 == NULL)) {
                        tmp_expression_value_324 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_324 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1212;

                        goto list_build_exception_87;
                    }
                    tmp_called_value_89 = LOOKUP_ATTRIBUTE(tmp_expression_value_324, mod_consts[37]);
                    if (tmp_called_value_89 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1212;

                        goto list_build_exception_87;
                    }
                    tmp_args_element_value_100 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[139]);

                    if (unlikely(tmp_args_element_value_100 == NULL)) {
                        tmp_args_element_value_100 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[139]);
                    }

                    if (tmp_args_element_value_100 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_89);

                        exception_lineno = 1212;

                        goto list_build_exception_87;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1212;
                    tmp_list_element_98 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_89, tmp_args_element_value_100);
                    Py_DECREF(tmp_called_value_89);
                    if (tmp_list_element_98 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1212;

                        goto list_build_exception_87;
                    }
                    PyList_SET_ITEM(tmp_dict_value_86, 3, tmp_list_element_98);
                }
                goto list_build_noexception_87;
                // Exception handling pass through code for list_build:
                list_build_exception_87:;
                Py_DECREF(tmp_dict_value_86);
                goto dict_build_exception_86;
                // Finished with no exception for list_build:
                list_build_noexception_87:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_86, tmp_dict_value_86);
                Py_DECREF(tmp_dict_value_86);
                assert(!(tmp_res != 0));
                tmp_dict_key_86 = mod_consts[255];
                tmp_dict_value_86 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_86 == NULL)) {
                    tmp_dict_value_86 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_86 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1213;

                    goto dict_build_exception_86;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_86, tmp_dict_value_86);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_85;
            // Exception handling pass through code for dict_build:
            dict_build_exception_86:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_85:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[340];
            tmp_dict_key_87 = mod_consts[255];
            tmp_dict_value_87 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_87 == NULL)) {
                tmp_dict_value_87 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_87 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1220;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_99;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_87, tmp_dict_value_87);
                assert(!(tmp_res != 0));
                tmp_dict_key_87 = mod_consts[253];
                tmp_dict_value_87 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

                if (unlikely(tmp_dict_value_87 == NULL)) {
                    tmp_dict_value_87 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
                }

                if (tmp_dict_value_87 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1221;

                    goto dict_build_exception_87;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_87, tmp_dict_value_87);
                assert(!(tmp_res != 0));
                tmp_dict_key_87 = mod_consts[254];
                tmp_list_element_99 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[139]);

                if (unlikely(tmp_list_element_99 == NULL)) {
                    tmp_list_element_99 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[139]);
                }

                if (tmp_list_element_99 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1223;

                    goto dict_build_exception_87;
                }
                tmp_dict_value_87 = PyList_New(1);
                PyList_SET_ITEM0(tmp_dict_value_87, 0, tmp_list_element_99);
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_87, tmp_dict_value_87);
                Py_DECREF(tmp_dict_value_87);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_86;
            // Exception handling pass through code for dict_build:
            dict_build_exception_87:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_86:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[341];
            tmp_dict_key_88 = mod_consts[255];
            tmp_dict_value_88 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_88 == NULL)) {
                tmp_dict_value_88 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_88 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1234;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_100;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_88, tmp_dict_value_88);
                assert(!(tmp_res != 0));
                tmp_dict_key_88 = mod_consts[253];
                tmp_dict_value_88 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

                if (unlikely(tmp_dict_value_88 == NULL)) {
                    tmp_dict_value_88 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
                }

                if (tmp_dict_value_88 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1235;

                    goto dict_build_exception_88;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_88, tmp_dict_value_88);
                assert(!(tmp_res != 0));
                tmp_dict_key_88 = mod_consts[254];
                tmp_list_element_100 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[139]);

                if (unlikely(tmp_list_element_100 == NULL)) {
                    tmp_list_element_100 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[139]);
                }

                if (tmp_list_element_100 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1237;

                    goto dict_build_exception_88;
                }
                tmp_dict_value_88 = PyList_New(4);
                {
                    PyObject *tmp_expression_value_325;
                    PyList_SET_ITEM0(tmp_dict_value_88, 0, tmp_list_element_100);
                    tmp_list_element_100 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[65]);

                    if (unlikely(tmp_list_element_100 == NULL)) {
                        tmp_list_element_100 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[65]);
                    }

                    if (tmp_list_element_100 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1238;

                        goto list_build_exception_88;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_88, 1, tmp_list_element_100);
                    tmp_list_element_100 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[133]);

                    if (unlikely(tmp_list_element_100 == NULL)) {
                        tmp_list_element_100 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[133]);
                    }

                    if (tmp_list_element_100 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1239;

                        goto list_build_exception_88;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_88, 2, tmp_list_element_100);
                    tmp_expression_value_325 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_325 == NULL)) {
                        tmp_expression_value_325 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_325 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1240;

                        goto list_build_exception_88;
                    }
                    tmp_list_element_100 = LOOKUP_ATTRIBUTE(tmp_expression_value_325, mod_consts[197]);
                    if (tmp_list_element_100 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1240;

                        goto list_build_exception_88;
                    }
                    PyList_SET_ITEM(tmp_dict_value_88, 3, tmp_list_element_100);
                }
                goto list_build_noexception_88;
                // Exception handling pass through code for list_build:
                list_build_exception_88:;
                Py_DECREF(tmp_dict_value_88);
                goto dict_build_exception_88;
                // Finished with no exception for list_build:
                list_build_noexception_88:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_88, tmp_dict_value_88);
                Py_DECREF(tmp_dict_value_88);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_87;
            // Exception handling pass through code for dict_build:
            dict_build_exception_88:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_87:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[342];
            tmp_dict_key_89 = mod_consts[255];
            tmp_dict_value_89 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_89 == NULL)) {
                tmp_dict_value_89 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_89 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1249;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_101;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_89, tmp_dict_value_89);
                assert(!(tmp_res != 0));
                tmp_dict_key_89 = mod_consts[253];
                tmp_dict_value_89 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

                if (unlikely(tmp_dict_value_89 == NULL)) {
                    tmp_dict_value_89 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
                }

                if (tmp_dict_value_89 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1250;

                    goto dict_build_exception_89;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_89, tmp_dict_value_89);
                assert(!(tmp_res != 0));
                tmp_dict_key_89 = mod_consts[254];
                tmp_list_element_101 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[139]);

                if (unlikely(tmp_list_element_101 == NULL)) {
                    tmp_list_element_101 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[139]);
                }

                if (tmp_list_element_101 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1252;

                    goto dict_build_exception_89;
                }
                tmp_dict_value_89 = PyList_New(2);
                {
                    PyObject *tmp_expression_value_326;
                    PyList_SET_ITEM0(tmp_dict_value_89, 0, tmp_list_element_101);
                    tmp_expression_value_326 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_326 == NULL)) {
                        tmp_expression_value_326 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_326 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1253;

                        goto list_build_exception_89;
                    }
                    tmp_list_element_101 = LOOKUP_ATTRIBUTE(tmp_expression_value_326, mod_consts[197]);
                    if (tmp_list_element_101 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1253;

                        goto list_build_exception_89;
                    }
                    PyList_SET_ITEM(tmp_dict_value_89, 1, tmp_list_element_101);
                }
                goto list_build_noexception_89;
                // Exception handling pass through code for list_build:
                list_build_exception_89:;
                Py_DECREF(tmp_dict_value_89);
                goto dict_build_exception_89;
                // Finished with no exception for list_build:
                list_build_noexception_89:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_89, tmp_dict_value_89);
                Py_DECREF(tmp_dict_value_89);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_88;
            // Exception handling pass through code for dict_build:
            dict_build_exception_89:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_88:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[343];
            tmp_dict_key_90 = mod_consts[255];
            tmp_dict_value_90 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_90 == NULL)) {
                tmp_dict_value_90 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_90 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1262;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_102;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_90, tmp_dict_value_90);
                assert(!(tmp_res != 0));
                tmp_dict_key_90 = mod_consts[253];
                tmp_dict_value_90 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

                if (unlikely(tmp_dict_value_90 == NULL)) {
                    tmp_dict_value_90 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
                }

                if (tmp_dict_value_90 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1263;

                    goto dict_build_exception_90;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_90, tmp_dict_value_90);
                assert(!(tmp_res != 0));
                tmp_dict_key_90 = mod_consts[254];
                tmp_list_element_102 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[139]);

                if (unlikely(tmp_list_element_102 == NULL)) {
                    tmp_list_element_102 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[139]);
                }

                if (tmp_list_element_102 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1265;

                    goto dict_build_exception_90;
                }
                tmp_dict_value_90 = PyList_New(3);
                {
                    PyObject *tmp_expression_value_327;
                    PyList_SET_ITEM0(tmp_dict_value_90, 0, tmp_list_element_102);
                    tmp_list_element_102 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[141]);

                    if (unlikely(tmp_list_element_102 == NULL)) {
                        tmp_list_element_102 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[141]);
                    }

                    if (tmp_list_element_102 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1266;

                        goto list_build_exception_90;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_90, 1, tmp_list_element_102);
                    tmp_expression_value_327 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_327 == NULL)) {
                        tmp_expression_value_327 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_327 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1267;

                        goto list_build_exception_90;
                    }
                    tmp_list_element_102 = LOOKUP_ATTRIBUTE(tmp_expression_value_327, mod_consts[84]);
                    if (tmp_list_element_102 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1267;

                        goto list_build_exception_90;
                    }
                    PyList_SET_ITEM(tmp_dict_value_90, 2, tmp_list_element_102);
                }
                goto list_build_noexception_90;
                // Exception handling pass through code for list_build:
                list_build_exception_90:;
                Py_DECREF(tmp_dict_value_90);
                goto dict_build_exception_90;
                // Finished with no exception for list_build:
                list_build_noexception_90:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_90, tmp_dict_value_90);
                Py_DECREF(tmp_dict_value_90);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_89;
            // Exception handling pass through code for dict_build:
            dict_build_exception_90:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_89:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[344];
            tmp_dict_key_91 = mod_consts[253];
            tmp_dict_value_91 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_91 == NULL)) {
                tmp_dict_value_91 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_91 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1276;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_103;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_91, tmp_dict_value_91);
                assert(!(tmp_res != 0));
                tmp_dict_key_91 = mod_consts[254];
                tmp_list_element_103 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[139]);

                if (unlikely(tmp_list_element_103 == NULL)) {
                    tmp_list_element_103 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[139]);
                }

                if (tmp_list_element_103 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1277;

                    goto dict_build_exception_91;
                }
                tmp_dict_value_91 = PyList_New(3);
                {
                    PyObject *tmp_expression_value_328;
                    PyObject *tmp_expression_value_329;
                    PyList_SET_ITEM0(tmp_dict_value_91, 0, tmp_list_element_103);
                    tmp_expression_value_328 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_328 == NULL)) {
                        tmp_expression_value_328 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_328 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1278;

                        goto list_build_exception_91;
                    }
                    tmp_list_element_103 = LOOKUP_ATTRIBUTE(tmp_expression_value_328, mod_consts[197]);
                    if (tmp_list_element_103 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1278;

                        goto list_build_exception_91;
                    }
                    PyList_SET_ITEM(tmp_dict_value_91, 1, tmp_list_element_103);
                    tmp_expression_value_329 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_329 == NULL)) {
                        tmp_expression_value_329 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_329 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1279;

                        goto list_build_exception_91;
                    }
                    tmp_list_element_103 = LOOKUP_ATTRIBUTE(tmp_expression_value_329, mod_consts[84]);
                    if (tmp_list_element_103 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1279;

                        goto list_build_exception_91;
                    }
                    PyList_SET_ITEM(tmp_dict_value_91, 2, tmp_list_element_103);
                }
                goto list_build_noexception_91;
                // Exception handling pass through code for list_build:
                list_build_exception_91:;
                Py_DECREF(tmp_dict_value_91);
                goto dict_build_exception_91;
                // Finished with no exception for list_build:
                list_build_noexception_91:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_91, tmp_dict_value_91);
                Py_DECREF(tmp_dict_value_91);
                assert(!(tmp_res != 0));
                tmp_dict_key_91 = mod_consts[255];
                tmp_dict_value_91 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_91 == NULL)) {
                    tmp_dict_value_91 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_91 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1280;

                    goto dict_build_exception_91;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_91, tmp_dict_value_91);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_90;
            // Exception handling pass through code for dict_build:
            dict_build_exception_91:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_90:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[345];
            tmp_dict_key_92 = mod_consts[253];
            tmp_dict_value_92 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_92 == NULL)) {
                tmp_dict_value_92 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_92 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1289;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_104;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_92, tmp_dict_value_92);
                assert(!(tmp_res != 0));
                tmp_dict_key_92 = mod_consts[254];
                tmp_list_element_104 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[139]);

                if (unlikely(tmp_list_element_104 == NULL)) {
                    tmp_list_element_104 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[139]);
                }

                if (tmp_list_element_104 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1290;

                    goto dict_build_exception_92;
                }
                tmp_dict_value_92 = PyList_New(4);
                {
                    PyObject *tmp_expression_value_330;
                    PyObject *tmp_expression_value_331;
                    PyList_SET_ITEM0(tmp_dict_value_92, 0, tmp_list_element_104);
                    tmp_list_element_104 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[65]);

                    if (unlikely(tmp_list_element_104 == NULL)) {
                        tmp_list_element_104 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[65]);
                    }

                    if (tmp_list_element_104 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1291;

                        goto list_build_exception_92;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_92, 1, tmp_list_element_104);
                    tmp_expression_value_330 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_330 == NULL)) {
                        tmp_expression_value_330 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_330 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1292;

                        goto list_build_exception_92;
                    }
                    tmp_list_element_104 = LOOKUP_ATTRIBUTE(tmp_expression_value_330, mod_consts[197]);
                    if (tmp_list_element_104 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1292;

                        goto list_build_exception_92;
                    }
                    PyList_SET_ITEM(tmp_dict_value_92, 2, tmp_list_element_104);
                    tmp_expression_value_331 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_331 == NULL)) {
                        tmp_expression_value_331 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_331 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1293;

                        goto list_build_exception_92;
                    }
                    tmp_list_element_104 = LOOKUP_ATTRIBUTE(tmp_expression_value_331, mod_consts[84]);
                    if (tmp_list_element_104 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1293;

                        goto list_build_exception_92;
                    }
                    PyList_SET_ITEM(tmp_dict_value_92, 3, tmp_list_element_104);
                }
                goto list_build_noexception_92;
                // Exception handling pass through code for list_build:
                list_build_exception_92:;
                Py_DECREF(tmp_dict_value_92);
                goto dict_build_exception_92;
                // Finished with no exception for list_build:
                list_build_noexception_92:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_92, tmp_dict_value_92);
                Py_DECREF(tmp_dict_value_92);
                assert(!(tmp_res != 0));
                tmp_dict_key_92 = mod_consts[255];
                tmp_dict_value_92 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_92 == NULL)) {
                    tmp_dict_value_92 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_92 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1294;

                    goto dict_build_exception_92;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_92, tmp_dict_value_92);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_91;
            // Exception handling pass through code for dict_build:
            dict_build_exception_92:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_91:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[346];
            tmp_dict_key_93 = mod_consts[253];
            tmp_dict_value_93 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_93 == NULL)) {
                tmp_dict_value_93 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_93 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1303;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_105;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_93, tmp_dict_value_93);
                assert(!(tmp_res != 0));
                tmp_dict_key_93 = mod_consts[254];
                tmp_list_element_105 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[139]);

                if (unlikely(tmp_list_element_105 == NULL)) {
                    tmp_list_element_105 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[139]);
                }

                if (tmp_list_element_105 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1304;

                    goto dict_build_exception_93;
                }
                tmp_dict_value_93 = PyList_New(4);
                {
                    PyObject *tmp_expression_value_332;
                    PyObject *tmp_expression_value_333;
                    PyList_SET_ITEM0(tmp_dict_value_93, 0, tmp_list_element_105);
                    tmp_list_element_105 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[65]);

                    if (unlikely(tmp_list_element_105 == NULL)) {
                        tmp_list_element_105 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[65]);
                    }

                    if (tmp_list_element_105 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1305;

                        goto list_build_exception_93;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_93, 1, tmp_list_element_105);
                    tmp_expression_value_332 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_332 == NULL)) {
                        tmp_expression_value_332 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_332 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1306;

                        goto list_build_exception_93;
                    }
                    tmp_list_element_105 = LOOKUP_ATTRIBUTE(tmp_expression_value_332, mod_consts[197]);
                    if (tmp_list_element_105 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1306;

                        goto list_build_exception_93;
                    }
                    PyList_SET_ITEM(tmp_dict_value_93, 2, tmp_list_element_105);
                    tmp_expression_value_333 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_333 == NULL)) {
                        tmp_expression_value_333 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_333 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1307;

                        goto list_build_exception_93;
                    }
                    tmp_list_element_105 = LOOKUP_ATTRIBUTE(tmp_expression_value_333, mod_consts[84]);
                    if (tmp_list_element_105 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1307;

                        goto list_build_exception_93;
                    }
                    PyList_SET_ITEM(tmp_dict_value_93, 3, tmp_list_element_105);
                }
                goto list_build_noexception_93;
                // Exception handling pass through code for list_build:
                list_build_exception_93:;
                Py_DECREF(tmp_dict_value_93);
                goto dict_build_exception_93;
                // Finished with no exception for list_build:
                list_build_noexception_93:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_93, tmp_dict_value_93);
                Py_DECREF(tmp_dict_value_93);
                assert(!(tmp_res != 0));
                tmp_dict_key_93 = mod_consts[255];
                tmp_dict_value_93 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_93 == NULL)) {
                    tmp_dict_value_93 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_93 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1308;

                    goto dict_build_exception_93;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_93, tmp_dict_value_93);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_92;
            // Exception handling pass through code for dict_build:
            dict_build_exception_93:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_92:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[347];
            tmp_dict_key_94 = mod_consts[253];
            tmp_dict_value_94 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

            if (unlikely(tmp_dict_value_94 == NULL)) {
                tmp_dict_value_94 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
            }

            if (tmp_dict_value_94 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1315;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_106;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_94, tmp_dict_value_94);
                assert(!(tmp_res != 0));
                tmp_dict_key_94 = mod_consts[254];
                tmp_list_element_106 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[139]);

                if (unlikely(tmp_list_element_106 == NULL)) {
                    tmp_list_element_106 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[139]);
                }

                if (tmp_list_element_106 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1316;

                    goto dict_build_exception_94;
                }
                tmp_dict_value_94 = PyList_New(2);
                {
                    PyObject *tmp_called_value_90;
                    PyObject *tmp_args_element_value_101;
                    PyObject *tmp_expression_value_334;
                    PyList_SET_ITEM0(tmp_dict_value_94, 0, tmp_list_element_106);
                    tmp_called_value_90 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_90 == NULL)) {
                        tmp_called_value_90 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_90 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1317;

                        goto list_build_exception_94;
                    }
                    tmp_expression_value_334 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_334 == NULL)) {
                        tmp_expression_value_334 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_334 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1317;

                        goto list_build_exception_94;
                    }
                    tmp_args_element_value_101 = LOOKUP_ATTRIBUTE(tmp_expression_value_334, mod_consts[54]);
                    if (tmp_args_element_value_101 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1317;

                        goto list_build_exception_94;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1317;
                    tmp_list_element_106 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_90, tmp_args_element_value_101);
                    Py_DECREF(tmp_args_element_value_101);
                    if (tmp_list_element_106 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1317;

                        goto list_build_exception_94;
                    }
                    PyList_SET_ITEM(tmp_dict_value_94, 1, tmp_list_element_106);
                }
                goto list_build_noexception_94;
                // Exception handling pass through code for list_build:
                list_build_exception_94:;
                Py_DECREF(tmp_dict_value_94);
                goto dict_build_exception_94;
                // Finished with no exception for list_build:
                list_build_noexception_94:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_94, tmp_dict_value_94);
                Py_DECREF(tmp_dict_value_94);
                assert(!(tmp_res != 0));
                tmp_dict_key_94 = mod_consts[255];
                tmp_dict_value_94 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

                if (unlikely(tmp_dict_value_94 == NULL)) {
                    tmp_dict_value_94 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
                }

                if (tmp_dict_value_94 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1318;

                    goto dict_build_exception_94;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_94, tmp_dict_value_94);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_93;
            // Exception handling pass through code for dict_build:
            dict_build_exception_94:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_93:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[348];
            tmp_dict_key_95 = mod_consts[255];
            tmp_dict_value_95 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_95 == NULL)) {
                tmp_dict_value_95 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_95 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1329;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_107;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_95, tmp_dict_value_95);
                assert(!(tmp_res != 0));
                tmp_dict_key_95 = mod_consts[253];
                tmp_dict_value_95 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

                if (unlikely(tmp_dict_value_95 == NULL)) {
                    tmp_dict_value_95 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
                }

                if (tmp_dict_value_95 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1330;

                    goto dict_build_exception_95;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_95, tmp_dict_value_95);
                assert(!(tmp_res != 0));
                tmp_dict_key_95 = mod_consts[254];
                tmp_list_element_107 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[139]);

                if (unlikely(tmp_list_element_107 == NULL)) {
                    tmp_list_element_107 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[139]);
                }

                if (tmp_list_element_107 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1332;

                    goto dict_build_exception_95;
                }
                tmp_dict_value_95 = PyList_New(6);
                {
                    PyObject *tmp_expression_value_335;
                    PyObject *tmp_expression_value_336;
                    PyObject *tmp_expression_value_337;
                    PyObject *tmp_called_value_91;
                    PyObject *tmp_expression_value_338;
                    PyObject *tmp_args_element_value_102;
                    PyList_SET_ITEM0(tmp_dict_value_95, 0, tmp_list_element_107);
                    tmp_expression_value_335 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_335 == NULL)) {
                        tmp_expression_value_335 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_335 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1333;

                        goto list_build_exception_95;
                    }
                    tmp_list_element_107 = LOOKUP_ATTRIBUTE(tmp_expression_value_335, mod_consts[197]);
                    if (tmp_list_element_107 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1333;

                        goto list_build_exception_95;
                    }
                    PyList_SET_ITEM(tmp_dict_value_95, 1, tmp_list_element_107);
                    tmp_expression_value_336 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_336 == NULL)) {
                        tmp_expression_value_336 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_336 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1334;

                        goto list_build_exception_95;
                    }
                    tmp_list_element_107 = LOOKUP_ATTRIBUTE(tmp_expression_value_336, mod_consts[197]);
                    if (tmp_list_element_107 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1334;

                        goto list_build_exception_95;
                    }
                    PyList_SET_ITEM(tmp_dict_value_95, 2, tmp_list_element_107);
                    tmp_list_element_107 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[65]);

                    if (unlikely(tmp_list_element_107 == NULL)) {
                        tmp_list_element_107 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[65]);
                    }

                    if (tmp_list_element_107 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1335;

                        goto list_build_exception_95;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_95, 3, tmp_list_element_107);
                    tmp_expression_value_337 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_337 == NULL)) {
                        tmp_expression_value_337 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_337 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1336;

                        goto list_build_exception_95;
                    }
                    tmp_list_element_107 = LOOKUP_ATTRIBUTE(tmp_expression_value_337, mod_consts[204]);
                    if (tmp_list_element_107 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1336;

                        goto list_build_exception_95;
                    }
                    PyList_SET_ITEM(tmp_dict_value_95, 4, tmp_list_element_107);
                    tmp_expression_value_338 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_338 == NULL)) {
                        tmp_expression_value_338 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_338 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1337;

                        goto list_build_exception_95;
                    }
                    tmp_called_value_91 = LOOKUP_ATTRIBUTE(tmp_expression_value_338, mod_consts[37]);
                    if (tmp_called_value_91 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1337;

                        goto list_build_exception_95;
                    }
                    tmp_args_element_value_102 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[142]);

                    if (unlikely(tmp_args_element_value_102 == NULL)) {
                        tmp_args_element_value_102 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[142]);
                    }

                    if (tmp_args_element_value_102 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                        Py_DECREF(tmp_called_value_91);

                        exception_lineno = 1337;

                        goto list_build_exception_95;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1337;
                    tmp_list_element_107 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_91, tmp_args_element_value_102);
                    Py_DECREF(tmp_called_value_91);
                    if (tmp_list_element_107 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1337;

                        goto list_build_exception_95;
                    }
                    PyList_SET_ITEM(tmp_dict_value_95, 5, tmp_list_element_107);
                }
                goto list_build_noexception_95;
                // Exception handling pass through code for list_build:
                list_build_exception_95:;
                Py_DECREF(tmp_dict_value_95);
                goto dict_build_exception_95;
                // Finished with no exception for list_build:
                list_build_noexception_95:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_95, tmp_dict_value_95);
                Py_DECREF(tmp_dict_value_95);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_94;
            // Exception handling pass through code for dict_build:
            dict_build_exception_95:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_94:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[349];
            tmp_dict_key_96 = mod_consts[255];
            tmp_dict_value_96 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_96 == NULL)) {
                tmp_dict_value_96 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_96 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1346;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_108;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_96, tmp_dict_value_96);
                assert(!(tmp_res != 0));
                tmp_dict_key_96 = mod_consts[253];
                tmp_dict_value_96 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

                if (unlikely(tmp_dict_value_96 == NULL)) {
                    tmp_dict_value_96 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
                }

                if (tmp_dict_value_96 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1347;

                    goto dict_build_exception_96;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_96, tmp_dict_value_96);
                assert(!(tmp_res != 0));
                tmp_dict_key_96 = mod_consts[254];
                tmp_list_element_108 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[142]);

                if (unlikely(tmp_list_element_108 == NULL)) {
                    tmp_list_element_108 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[142]);
                }

                if (tmp_list_element_108 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1349;

                    goto dict_build_exception_96;
                }
                tmp_dict_value_96 = PyList_New(3);
                {
                    PyObject *tmp_expression_value_339;
                    PyList_SET_ITEM0(tmp_dict_value_96, 0, tmp_list_element_108);
                    tmp_list_element_108 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[143]);

                    if (unlikely(tmp_list_element_108 == NULL)) {
                        tmp_list_element_108 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[143]);
                    }

                    if (tmp_list_element_108 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1350;

                        goto list_build_exception_96;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_96, 1, tmp_list_element_108);
                    tmp_expression_value_339 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_339 == NULL)) {
                        tmp_expression_value_339 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_339 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1351;

                        goto list_build_exception_96;
                    }
                    tmp_list_element_108 = LOOKUP_ATTRIBUTE(tmp_expression_value_339, mod_consts[84]);
                    if (tmp_list_element_108 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1351;

                        goto list_build_exception_96;
                    }
                    PyList_SET_ITEM(tmp_dict_value_96, 2, tmp_list_element_108);
                }
                goto list_build_noexception_96;
                // Exception handling pass through code for list_build:
                list_build_exception_96:;
                Py_DECREF(tmp_dict_value_96);
                goto dict_build_exception_96;
                // Finished with no exception for list_build:
                list_build_noexception_96:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_96, tmp_dict_value_96);
                Py_DECREF(tmp_dict_value_96);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_95;
            // Exception handling pass through code for dict_build:
            dict_build_exception_96:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_95:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[350];
            tmp_dict_key_97 = mod_consts[255];
            tmp_dict_value_97 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_97 == NULL)) {
                tmp_dict_value_97 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_97 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1361;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_109;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_97, tmp_dict_value_97);
                assert(!(tmp_res != 0));
                tmp_dict_key_97 = mod_consts[253];
                tmp_dict_value_97 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

                if (unlikely(tmp_dict_value_97 == NULL)) {
                    tmp_dict_value_97 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
                }

                if (tmp_dict_value_97 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1362;

                    goto dict_build_exception_97;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_97, tmp_dict_value_97);
                assert(!(tmp_res != 0));
                tmp_dict_key_97 = mod_consts[254];
                tmp_list_element_109 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[142]);

                if (unlikely(tmp_list_element_109 == NULL)) {
                    tmp_list_element_109 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[142]);
                }

                if (tmp_list_element_109 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1364;

                    goto dict_build_exception_97;
                }
                tmp_dict_value_97 = PyList_New(3);
                {
                    PyObject *tmp_expression_value_340;
                    PyList_SET_ITEM0(tmp_dict_value_97, 0, tmp_list_element_109);
                    tmp_list_element_109 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[143]);

                    if (unlikely(tmp_list_element_109 == NULL)) {
                        tmp_list_element_109 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[143]);
                    }

                    if (tmp_list_element_109 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1365;

                        goto list_build_exception_97;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_97, 1, tmp_list_element_109);
                    tmp_expression_value_340 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_340 == NULL)) {
                        tmp_expression_value_340 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_340 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1366;

                        goto list_build_exception_97;
                    }
                    tmp_list_element_109 = LOOKUP_ATTRIBUTE(tmp_expression_value_340, mod_consts[84]);
                    if (tmp_list_element_109 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1366;

                        goto list_build_exception_97;
                    }
                    PyList_SET_ITEM(tmp_dict_value_97, 2, tmp_list_element_109);
                }
                goto list_build_noexception_97;
                // Exception handling pass through code for list_build:
                list_build_exception_97:;
                Py_DECREF(tmp_dict_value_97);
                goto dict_build_exception_97;
                // Finished with no exception for list_build:
                list_build_noexception_97:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_97, tmp_dict_value_97);
                Py_DECREF(tmp_dict_value_97);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_96;
            // Exception handling pass through code for dict_build:
            dict_build_exception_97:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_96:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[351];
            tmp_dict_key_98 = mod_consts[255];
            tmp_dict_value_98 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_98 == NULL)) {
                tmp_dict_value_98 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_98 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1379;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_110;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_98, tmp_dict_value_98);
                assert(!(tmp_res != 0));
                tmp_dict_key_98 = mod_consts[253];
                tmp_dict_value_98 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

                if (unlikely(tmp_dict_value_98 == NULL)) {
                    tmp_dict_value_98 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
                }

                if (tmp_dict_value_98 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1380;

                    goto dict_build_exception_98;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_98, tmp_dict_value_98);
                assert(!(tmp_res != 0));
                tmp_dict_key_98 = mod_consts[254];
                tmp_list_element_110 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[65]);

                if (unlikely(tmp_list_element_110 == NULL)) {
                    tmp_list_element_110 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[65]);
                }

                if (tmp_list_element_110 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1382;

                    goto dict_build_exception_98;
                }
                tmp_dict_value_98 = PyList_New(2);
                {
                    PyObject *tmp_called_value_92;
                    PyObject *tmp_args_element_value_103;
                    PyList_SET_ITEM0(tmp_dict_value_98, 0, tmp_list_element_110);
                    tmp_called_value_92 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_92 == NULL)) {
                        tmp_called_value_92 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_92 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1383;

                        goto list_build_exception_98;
                    }
                    tmp_args_element_value_103 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[162]);

                    if (unlikely(tmp_args_element_value_103 == NULL)) {
                        tmp_args_element_value_103 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[162]);
                    }

                    if (tmp_args_element_value_103 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1383;

                        goto list_build_exception_98;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1383;
                    tmp_list_element_110 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_92, tmp_args_element_value_103);
                    if (tmp_list_element_110 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1383;

                        goto list_build_exception_98;
                    }
                    PyList_SET_ITEM(tmp_dict_value_98, 1, tmp_list_element_110);
                }
                goto list_build_noexception_98;
                // Exception handling pass through code for list_build:
                list_build_exception_98:;
                Py_DECREF(tmp_dict_value_98);
                goto dict_build_exception_98;
                // Finished with no exception for list_build:
                list_build_noexception_98:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_98, tmp_dict_value_98);
                Py_DECREF(tmp_dict_value_98);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_97;
            // Exception handling pass through code for dict_build:
            dict_build_exception_98:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_97:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[351];
            tmp_dict_key_99 = mod_consts[255];
            tmp_dict_value_99 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_99 == NULL)) {
                tmp_dict_value_99 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_99 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1390;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_111;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_99, tmp_dict_value_99);
                assert(!(tmp_res != 0));
                tmp_dict_key_99 = mod_consts[253];
                tmp_dict_value_99 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

                if (unlikely(tmp_dict_value_99 == NULL)) {
                    tmp_dict_value_99 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
                }

                if (tmp_dict_value_99 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1391;

                    goto dict_build_exception_99;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_99, tmp_dict_value_99);
                assert(!(tmp_res != 0));
                tmp_dict_key_99 = mod_consts[254];
                tmp_list_element_111 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[65]);

                if (unlikely(tmp_list_element_111 == NULL)) {
                    tmp_list_element_111 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[65]);
                }

                if (tmp_list_element_111 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1393;

                    goto dict_build_exception_99;
                }
                tmp_dict_value_99 = PyList_New(2);
                PyList_SET_ITEM0(tmp_dict_value_99, 0, tmp_list_element_111);
                tmp_list_element_111 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[162]);

                if (unlikely(tmp_list_element_111 == NULL)) {
                    tmp_list_element_111 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[162]);
                }

                if (tmp_list_element_111 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1394;

                    goto list_build_exception_99;
                }
                PyList_SET_ITEM0(tmp_dict_value_99, 1, tmp_list_element_111);
                goto list_build_noexception_99;
                // Exception handling pass through code for list_build:
                list_build_exception_99:;
                Py_DECREF(tmp_dict_value_99);
                goto dict_build_exception_99;
                // Finished with no exception for list_build:
                list_build_noexception_99:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_99, tmp_dict_value_99);
                Py_DECREF(tmp_dict_value_99);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_98;
            // Exception handling pass through code for dict_build:
            dict_build_exception_99:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_98:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[352];
            tmp_dict_key_100 = mod_consts[255];
            tmp_dict_value_100 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_100 == NULL)) {
                tmp_dict_value_100 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_100 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1401;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_112;
                PyObject *tmp_called_value_93;
                PyObject *tmp_args_element_value_104;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_100, tmp_dict_value_100);
                assert(!(tmp_res != 0));
                tmp_dict_key_100 = mod_consts[253];
                tmp_dict_value_100 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

                if (unlikely(tmp_dict_value_100 == NULL)) {
                    tmp_dict_value_100 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
                }

                if (tmp_dict_value_100 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1402;

                    goto dict_build_exception_100;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_100, tmp_dict_value_100);
                assert(!(tmp_res != 0));
                tmp_dict_key_100 = mod_consts[254];
                tmp_called_value_93 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                if (unlikely(tmp_called_value_93 == NULL)) {
                    tmp_called_value_93 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                }

                if (tmp_called_value_93 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1404;

                    goto dict_build_exception_100;
                }
                tmp_args_element_value_104 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[79]);

                if (unlikely(tmp_args_element_value_104 == NULL)) {
                    tmp_args_element_value_104 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
                }

                if (tmp_args_element_value_104 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1404;

                    goto dict_build_exception_100;
                }
                frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1404;
                tmp_list_element_112 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_93, tmp_args_element_value_104);
                if (tmp_list_element_112 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1404;

                    goto dict_build_exception_100;
                }
                tmp_dict_value_100 = PyList_New(2);
                {
                    PyObject *tmp_expression_value_341;
                    PyList_SET_ITEM(tmp_dict_value_100, 0, tmp_list_element_112);
                    tmp_expression_value_341 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_341 == NULL)) {
                        tmp_expression_value_341 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_341 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1405;

                        goto list_build_exception_100;
                    }
                    tmp_list_element_112 = LOOKUP_ATTRIBUTE(tmp_expression_value_341, mod_consts[41]);
                    if (tmp_list_element_112 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1405;

                        goto list_build_exception_100;
                    }
                    PyList_SET_ITEM(tmp_dict_value_100, 1, tmp_list_element_112);
                }
                goto list_build_noexception_100;
                // Exception handling pass through code for list_build:
                list_build_exception_100:;
                Py_DECREF(tmp_dict_value_100);
                goto dict_build_exception_100;
                // Finished with no exception for list_build:
                list_build_noexception_100:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_100, tmp_dict_value_100);
                Py_DECREF(tmp_dict_value_100);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_99;
            // Exception handling pass through code for dict_build:
            dict_build_exception_100:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_99:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[353];
            tmp_dict_key_101 = mod_consts[255];
            tmp_dict_value_101 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_101 == NULL)) {
                tmp_dict_value_101 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_101 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1413;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_113;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_101, tmp_dict_value_101);
                assert(!(tmp_res != 0));
                tmp_dict_key_101 = mod_consts[253];
                tmp_dict_value_101 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

                if (unlikely(tmp_dict_value_101 == NULL)) {
                    tmp_dict_value_101 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
                }

                if (tmp_dict_value_101 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1414;

                    goto dict_build_exception_101;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_101, tmp_dict_value_101);
                assert(!(tmp_res != 0));
                tmp_dict_key_101 = mod_consts[254];
                tmp_list_element_113 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[65]);

                if (unlikely(tmp_list_element_113 == NULL)) {
                    tmp_list_element_113 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[65]);
                }

                if (tmp_list_element_113 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1416;

                    goto dict_build_exception_101;
                }
                tmp_dict_value_101 = PyList_New(3);
                {
                    PyObject *tmp_called_value_94;
                    PyObject *tmp_args_element_value_105;
                    PyList_SET_ITEM0(tmp_dict_value_101, 0, tmp_list_element_113);
                    tmp_list_element_113 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                    if (unlikely(tmp_list_element_113 == NULL)) {
                        tmp_list_element_113 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                    }

                    if (tmp_list_element_113 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1417;

                        goto list_build_exception_101;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_101, 1, tmp_list_element_113);
                    tmp_called_value_94 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_94 == NULL)) {
                        tmp_called_value_94 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_94 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1418;

                        goto list_build_exception_101;
                    }
                    tmp_args_element_value_105 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[163]);

                    if (unlikely(tmp_args_element_value_105 == NULL)) {
                        tmp_args_element_value_105 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[163]);
                    }

                    if (tmp_args_element_value_105 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1418;

                        goto list_build_exception_101;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1418;
                    tmp_list_element_113 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_94, tmp_args_element_value_105);
                    if (tmp_list_element_113 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1418;

                        goto list_build_exception_101;
                    }
                    PyList_SET_ITEM(tmp_dict_value_101, 2, tmp_list_element_113);
                }
                goto list_build_noexception_101;
                // Exception handling pass through code for list_build:
                list_build_exception_101:;
                Py_DECREF(tmp_dict_value_101);
                goto dict_build_exception_101;
                // Finished with no exception for list_build:
                list_build_noexception_101:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_101, tmp_dict_value_101);
                Py_DECREF(tmp_dict_value_101);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_100;
            // Exception handling pass through code for dict_build:
            dict_build_exception_101:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_100:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[354];
            tmp_dict_key_102 = mod_consts[255];
            tmp_dict_value_102 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_102 == NULL)) {
                tmp_dict_value_102 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_102 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1427;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_114;
                PyObject *tmp_expression_value_342;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_102, tmp_dict_value_102);
                assert(!(tmp_res != 0));
                tmp_dict_key_102 = mod_consts[253];
                tmp_dict_value_102 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

                if (unlikely(tmp_dict_value_102 == NULL)) {
                    tmp_dict_value_102 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
                }

                if (tmp_dict_value_102 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1428;

                    goto dict_build_exception_102;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_102, tmp_dict_value_102);
                assert(!(tmp_res != 0));
                tmp_dict_key_102 = mod_consts[254];
                tmp_expression_value_342 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                if (unlikely(tmp_expression_value_342 == NULL)) {
                    tmp_expression_value_342 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                }

                if (tmp_expression_value_342 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1430;

                    goto dict_build_exception_102;
                }
                tmp_list_element_114 = LOOKUP_ATTRIBUTE(tmp_expression_value_342, mod_consts[39]);
                if (tmp_list_element_114 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1430;

                    goto dict_build_exception_102;
                }
                tmp_dict_value_102 = PyList_New(2);
                {
                    PyObject *tmp_called_value_95;
                    PyObject *tmp_args_element_value_106;
                    PyObject *tmp_expression_value_343;
                    PyList_SET_ITEM(tmp_dict_value_102, 0, tmp_list_element_114);
                    tmp_called_value_95 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_95 == NULL)) {
                        tmp_called_value_95 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_95 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1431;

                        goto list_build_exception_102;
                    }
                    tmp_expression_value_343 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_343 == NULL)) {
                        tmp_expression_value_343 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_343 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1431;

                        goto list_build_exception_102;
                    }
                    tmp_args_element_value_106 = LOOKUP_ATTRIBUTE(tmp_expression_value_343, mod_consts[39]);
                    if (tmp_args_element_value_106 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1431;

                        goto list_build_exception_102;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1431;
                    tmp_list_element_114 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_95, tmp_args_element_value_106);
                    Py_DECREF(tmp_args_element_value_106);
                    if (tmp_list_element_114 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1431;

                        goto list_build_exception_102;
                    }
                    PyList_SET_ITEM(tmp_dict_value_102, 1, tmp_list_element_114);
                }
                goto list_build_noexception_102;
                // Exception handling pass through code for list_build:
                list_build_exception_102:;
                Py_DECREF(tmp_dict_value_102);
                goto dict_build_exception_102;
                // Finished with no exception for list_build:
                list_build_noexception_102:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_102, tmp_dict_value_102);
                Py_DECREF(tmp_dict_value_102);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_101;
            // Exception handling pass through code for dict_build:
            dict_build_exception_102:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_101:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[355];
            tmp_dict_key_103 = mod_consts[255];
            tmp_dict_value_103 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_103 == NULL)) {
                tmp_dict_value_103 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_103 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1441;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_115;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_103, tmp_dict_value_103);
                assert(!(tmp_res != 0));
                tmp_dict_key_103 = mod_consts[253];
                tmp_dict_value_103 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

                if (unlikely(tmp_dict_value_103 == NULL)) {
                    tmp_dict_value_103 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
                }

                if (tmp_dict_value_103 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1442;

                    goto dict_build_exception_103;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_103, tmp_dict_value_103);
                assert(!(tmp_res != 0));
                tmp_dict_key_103 = mod_consts[254];
                tmp_list_element_115 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                if (unlikely(tmp_list_element_115 == NULL)) {
                    tmp_list_element_115 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                }

                if (tmp_list_element_115 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1444;

                    goto dict_build_exception_103;
                }
                tmp_dict_value_103 = PyList_New(5);
                {
                    PyObject *tmp_expression_value_344;
                    PyList_SET_ITEM0(tmp_dict_value_103, 0, tmp_list_element_115);
                    tmp_list_element_115 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[74]);

                    if (unlikely(tmp_list_element_115 == NULL)) {
                        tmp_list_element_115 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[74]);
                    }

                    if (tmp_list_element_115 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1445;

                        goto list_build_exception_103;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_103, 1, tmp_list_element_115);
                    tmp_list_element_115 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                    if (unlikely(tmp_list_element_115 == NULL)) {
                        tmp_list_element_115 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                    }

                    if (tmp_list_element_115 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1446;

                        goto list_build_exception_103;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_103, 2, tmp_list_element_115);
                    tmp_list_element_115 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[168]);

                    if (unlikely(tmp_list_element_115 == NULL)) {
                        tmp_list_element_115 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[168]);
                    }

                    if (tmp_list_element_115 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1447;

                        goto list_build_exception_103;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_103, 3, tmp_list_element_115);
                    tmp_expression_value_344 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_344 == NULL)) {
                        tmp_expression_value_344 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_344 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1448;

                        goto list_build_exception_103;
                    }
                    tmp_list_element_115 = LOOKUP_ATTRIBUTE(tmp_expression_value_344, mod_consts[84]);
                    if (tmp_list_element_115 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1448;

                        goto list_build_exception_103;
                    }
                    PyList_SET_ITEM(tmp_dict_value_103, 4, tmp_list_element_115);
                }
                goto list_build_noexception_103;
                // Exception handling pass through code for list_build:
                list_build_exception_103:;
                Py_DECREF(tmp_dict_value_103);
                goto dict_build_exception_103;
                // Finished with no exception for list_build:
                list_build_noexception_103:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_103, tmp_dict_value_103);
                Py_DECREF(tmp_dict_value_103);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_102;
            // Exception handling pass through code for dict_build:
            dict_build_exception_103:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_102:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[356];
            tmp_dict_key_104 = mod_consts[255];
            tmp_dict_value_104 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_104 == NULL)) {
                tmp_dict_value_104 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_104 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1454;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_116;
                PyObject *tmp_called_value_96;
                PyObject *tmp_expression_value_345;
                PyObject *tmp_args_element_value_107;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_104, tmp_dict_value_104);
                assert(!(tmp_res != 0));
                tmp_dict_key_104 = mod_consts[253];
                tmp_dict_value_104 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

                if (unlikely(tmp_dict_value_104 == NULL)) {
                    tmp_dict_value_104 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
                }

                if (tmp_dict_value_104 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1455;

                    goto dict_build_exception_104;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_104, tmp_dict_value_104);
                assert(!(tmp_res != 0));
                tmp_dict_key_104 = mod_consts[254];
                tmp_expression_value_345 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                if (unlikely(tmp_expression_value_345 == NULL)) {
                    tmp_expression_value_345 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                }

                if (tmp_expression_value_345 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1457;

                    goto dict_build_exception_104;
                }
                tmp_called_value_96 = LOOKUP_ATTRIBUTE(tmp_expression_value_345, mod_consts[37]);
                if (tmp_called_value_96 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1457;

                    goto dict_build_exception_104;
                }
                tmp_args_element_value_107 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[247]);

                if (unlikely(tmp_args_element_value_107 == NULL)) {
                    tmp_args_element_value_107 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[247]);
                }

                if (tmp_args_element_value_107 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_called_value_96);

                    exception_lineno = 1457;

                    goto dict_build_exception_104;
                }
                frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1457;
                tmp_list_element_116 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_96, tmp_args_element_value_107);
                Py_DECREF(tmp_called_value_96);
                if (tmp_list_element_116 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1457;

                    goto dict_build_exception_104;
                }
                tmp_dict_value_104 = PyList_New(2);
                {
                    PyObject *tmp_expression_value_346;
                    PyList_SET_ITEM(tmp_dict_value_104, 0, tmp_list_element_116);
                    tmp_expression_value_346 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_346 == NULL)) {
                        tmp_expression_value_346 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_346 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1458;

                        goto list_build_exception_104;
                    }
                    tmp_list_element_116 = LOOKUP_ATTRIBUTE(tmp_expression_value_346, mod_consts[84]);
                    if (tmp_list_element_116 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1458;

                        goto list_build_exception_104;
                    }
                    PyList_SET_ITEM(tmp_dict_value_104, 1, tmp_list_element_116);
                }
                goto list_build_noexception_104;
                // Exception handling pass through code for list_build:
                list_build_exception_104:;
                Py_DECREF(tmp_dict_value_104);
                goto dict_build_exception_104;
                // Finished with no exception for list_build:
                list_build_noexception_104:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_104, tmp_dict_value_104);
                Py_DECREF(tmp_dict_value_104);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_103;
            // Exception handling pass through code for dict_build:
            dict_build_exception_104:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_103:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[357];
            tmp_dict_key_105 = mod_consts[255];
            tmp_dict_value_105 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_105 == NULL)) {
                tmp_dict_value_105 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_105 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1469;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_expression_value_347;
                PyObject *tmp_list_element_117;
                PyObject *tmp_expression_value_348;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_105, tmp_dict_value_105);
                assert(!(tmp_res != 0));
                tmp_dict_key_105 = mod_consts[253];
                tmp_expression_value_347 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                if (unlikely(tmp_expression_value_347 == NULL)) {
                    tmp_expression_value_347 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                }

                if (tmp_expression_value_347 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1470;

                    goto dict_build_exception_105;
                }
                tmp_dict_value_105 = LOOKUP_ATTRIBUTE(tmp_expression_value_347, mod_consts[54]);
                if (tmp_dict_value_105 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1470;

                    goto dict_build_exception_105;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_105, tmp_dict_value_105);
                Py_DECREF(tmp_dict_value_105);
                assert(!(tmp_res != 0));
                tmp_dict_key_105 = mod_consts[254];
                tmp_expression_value_348 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                if (unlikely(tmp_expression_value_348 == NULL)) {
                    tmp_expression_value_348 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                }

                if (tmp_expression_value_348 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1472;

                    goto dict_build_exception_105;
                }
                tmp_list_element_117 = LOOKUP_ATTRIBUTE(tmp_expression_value_348, mod_consts[54]);
                if (tmp_list_element_117 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1472;

                    goto dict_build_exception_105;
                }
                tmp_dict_value_105 = PyList_New(7);
                {
                    PyObject *tmp_called_value_97;
                    PyObject *tmp_args_element_value_108;
                    PyObject *tmp_called_value_98;
                    PyObject *tmp_args_element_value_109;
                    PyObject *tmp_called_value_99;
                    PyObject *tmp_args_element_value_110;
                    PyObject *tmp_expression_value_349;
                    PyObject *tmp_called_value_100;
                    PyObject *tmp_args_element_value_111;
                    PyList_SET_ITEM(tmp_dict_value_105, 0, tmp_list_element_117);
                    tmp_called_value_97 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_97 == NULL)) {
                        tmp_called_value_97 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_97 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1473;

                        goto list_build_exception_105;
                    }
                    tmp_args_element_value_108 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                    if (unlikely(tmp_args_element_value_108 == NULL)) {
                        tmp_args_element_value_108 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                    }

                    if (tmp_args_element_value_108 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1473;

                        goto list_build_exception_105;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1473;
                    tmp_list_element_117 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_97, tmp_args_element_value_108);
                    if (tmp_list_element_117 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1473;

                        goto list_build_exception_105;
                    }
                    PyList_SET_ITEM(tmp_dict_value_105, 1, tmp_list_element_117);
                    tmp_called_value_98 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_98 == NULL)) {
                        tmp_called_value_98 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_98 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1474;

                        goto list_build_exception_105;
                    }
                    tmp_args_element_value_109 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[74]);

                    if (unlikely(tmp_args_element_value_109 == NULL)) {
                        tmp_args_element_value_109 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[74]);
                    }

                    if (tmp_args_element_value_109 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1474;

                        goto list_build_exception_105;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1474;
                    tmp_list_element_117 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_98, tmp_args_element_value_109);
                    if (tmp_list_element_117 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1474;

                        goto list_build_exception_105;
                    }
                    PyList_SET_ITEM(tmp_dict_value_105, 2, tmp_list_element_117);
                    tmp_called_value_99 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_99 == NULL)) {
                        tmp_called_value_99 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_99 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1475;

                        goto list_build_exception_105;
                    }
                    tmp_args_element_value_110 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                    if (unlikely(tmp_args_element_value_110 == NULL)) {
                        tmp_args_element_value_110 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                    }

                    if (tmp_args_element_value_110 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1475;

                        goto list_build_exception_105;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1475;
                    tmp_list_element_117 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_99, tmp_args_element_value_110);
                    if (tmp_list_element_117 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1475;

                        goto list_build_exception_105;
                    }
                    PyList_SET_ITEM(tmp_dict_value_105, 3, tmp_list_element_117);
                    tmp_expression_value_349 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_349 == NULL)) {
                        tmp_expression_value_349 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_349 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1476;

                        goto list_build_exception_105;
                    }
                    tmp_list_element_117 = LOOKUP_ATTRIBUTE(tmp_expression_value_349, mod_consts[39]);
                    if (tmp_list_element_117 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1476;

                        goto list_build_exception_105;
                    }
                    PyList_SET_ITEM(tmp_dict_value_105, 4, tmp_list_element_117);
                    tmp_list_element_117 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[75]);

                    if (unlikely(tmp_list_element_117 == NULL)) {
                        tmp_list_element_117 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[75]);
                    }

                    if (tmp_list_element_117 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1477;

                        goto list_build_exception_105;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_105, 5, tmp_list_element_117);
                    tmp_called_value_100 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_100 == NULL)) {
                        tmp_called_value_100 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_100 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1478;

                        goto list_build_exception_105;
                    }
                    tmp_args_element_value_111 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[73]);

                    if (unlikely(tmp_args_element_value_111 == NULL)) {
                        tmp_args_element_value_111 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                    }

                    if (tmp_args_element_value_111 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1478;

                        goto list_build_exception_105;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1478;
                    tmp_list_element_117 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_100, tmp_args_element_value_111);
                    if (tmp_list_element_117 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1478;

                        goto list_build_exception_105;
                    }
                    PyList_SET_ITEM(tmp_dict_value_105, 6, tmp_list_element_117);
                }
                goto list_build_noexception_105;
                // Exception handling pass through code for list_build:
                list_build_exception_105:;
                Py_DECREF(tmp_dict_value_105);
                goto dict_build_exception_105;
                // Finished with no exception for list_build:
                list_build_noexception_105:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_105, tmp_dict_value_105);
                Py_DECREF(tmp_dict_value_105);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_104;
            // Exception handling pass through code for dict_build:
            dict_build_exception_105:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_104:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[358];
            tmp_dict_key_106 = mod_consts[255];
            tmp_dict_value_106 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_106 == NULL)) {
                tmp_dict_value_106 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_106 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1486;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_118;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_106, tmp_dict_value_106);
                assert(!(tmp_res != 0));
                tmp_dict_key_106 = mod_consts[253];
                tmp_dict_value_106 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

                if (unlikely(tmp_dict_value_106 == NULL)) {
                    tmp_dict_value_106 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
                }

                if (tmp_dict_value_106 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1487;

                    goto dict_build_exception_106;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_106, tmp_dict_value_106);
                assert(!(tmp_res != 0));
                tmp_dict_key_106 = mod_consts[254];
                tmp_list_element_118 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[65]);

                if (unlikely(tmp_list_element_118 == NULL)) {
                    tmp_list_element_118 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[65]);
                }

                if (tmp_list_element_118 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1489;

                    goto dict_build_exception_106;
                }
                tmp_dict_value_106 = PyList_New(3);
                {
                    PyObject *tmp_expression_value_350;
                    PyList_SET_ITEM0(tmp_dict_value_106, 0, tmp_list_element_118);
                    tmp_list_element_118 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[69]);

                    if (unlikely(tmp_list_element_118 == NULL)) {
                        tmp_list_element_118 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[69]);
                    }

                    if (tmp_list_element_118 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1490;

                        goto list_build_exception_106;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_106, 1, tmp_list_element_118);
                    tmp_expression_value_350 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_350 == NULL)) {
                        tmp_expression_value_350 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_350 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1491;

                        goto list_build_exception_106;
                    }
                    tmp_list_element_118 = LOOKUP_ATTRIBUTE(tmp_expression_value_350, mod_consts[84]);
                    if (tmp_list_element_118 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1491;

                        goto list_build_exception_106;
                    }
                    PyList_SET_ITEM(tmp_dict_value_106, 2, tmp_list_element_118);
                }
                goto list_build_noexception_106;
                // Exception handling pass through code for list_build:
                list_build_exception_106:;
                Py_DECREF(tmp_dict_value_106);
                goto dict_build_exception_106;
                // Finished with no exception for list_build:
                list_build_noexception_106:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_106, tmp_dict_value_106);
                Py_DECREF(tmp_dict_value_106);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_105;
            // Exception handling pass through code for dict_build:
            dict_build_exception_106:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_105:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[359];
            tmp_dict_key_107 = mod_consts[255];
            tmp_dict_value_107 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_107 == NULL)) {
                tmp_dict_value_107 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_107 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1499;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_119;
                PyObject *tmp_called_value_101;
                PyObject *tmp_args_element_value_112;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_107, tmp_dict_value_107);
                assert(!(tmp_res != 0));
                tmp_dict_key_107 = mod_consts[253];
                tmp_dict_value_107 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

                if (unlikely(tmp_dict_value_107 == NULL)) {
                    tmp_dict_value_107 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
                }

                if (tmp_dict_value_107 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1500;

                    goto dict_build_exception_107;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_107, tmp_dict_value_107);
                assert(!(tmp_res != 0));
                tmp_dict_key_107 = mod_consts[254];
                tmp_called_value_101 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                if (unlikely(tmp_called_value_101 == NULL)) {
                    tmp_called_value_101 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                }

                if (tmp_called_value_101 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1502;

                    goto dict_build_exception_107;
                }
                tmp_args_element_value_112 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[79]);

                if (unlikely(tmp_args_element_value_112 == NULL)) {
                    tmp_args_element_value_112 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[79]);
                }

                if (tmp_args_element_value_112 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1502;

                    goto dict_build_exception_107;
                }
                frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1502;
                tmp_list_element_119 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_101, tmp_args_element_value_112);
                if (tmp_list_element_119 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1502;

                    goto dict_build_exception_107;
                }
                tmp_dict_value_107 = PyList_New(3);
                {
                    PyObject *tmp_expression_value_351;
                    PyObject *tmp_called_value_102;
                    PyObject *tmp_args_element_value_113;
                    PyObject *tmp_expression_value_352;
                    PyList_SET_ITEM(tmp_dict_value_107, 0, tmp_list_element_119);
                    tmp_expression_value_351 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_351 == NULL)) {
                        tmp_expression_value_351 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_351 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1503;

                        goto list_build_exception_107;
                    }
                    tmp_list_element_119 = LOOKUP_ATTRIBUTE(tmp_expression_value_351, mod_consts[54]);
                    if (tmp_list_element_119 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1503;

                        goto list_build_exception_107;
                    }
                    PyList_SET_ITEM(tmp_dict_value_107, 1, tmp_list_element_119);
                    tmp_called_value_102 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_102 == NULL)) {
                        tmp_called_value_102 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_102 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1504;

                        goto list_build_exception_107;
                    }
                    tmp_expression_value_352 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_352 == NULL)) {
                        tmp_expression_value_352 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_352 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1504;

                        goto list_build_exception_107;
                    }
                    tmp_args_element_value_113 = LOOKUP_ATTRIBUTE(tmp_expression_value_352, mod_consts[54]);
                    if (tmp_args_element_value_113 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1504;

                        goto list_build_exception_107;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1504;
                    tmp_list_element_119 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_102, tmp_args_element_value_113);
                    Py_DECREF(tmp_args_element_value_113);
                    if (tmp_list_element_119 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1504;

                        goto list_build_exception_107;
                    }
                    PyList_SET_ITEM(tmp_dict_value_107, 2, tmp_list_element_119);
                }
                goto list_build_noexception_107;
                // Exception handling pass through code for list_build:
                list_build_exception_107:;
                Py_DECREF(tmp_dict_value_107);
                goto dict_build_exception_107;
                // Finished with no exception for list_build:
                list_build_noexception_107:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_107, tmp_dict_value_107);
                Py_DECREF(tmp_dict_value_107);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_106;
            // Exception handling pass through code for dict_build:
            dict_build_exception_107:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_106:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[360];
            tmp_dict_key_108 = mod_consts[255];
            tmp_dict_value_108 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_108 == NULL)) {
                tmp_dict_value_108 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_108 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1513;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_120;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_108, tmp_dict_value_108);
                assert(!(tmp_res != 0));
                tmp_dict_key_108 = mod_consts[253];
                tmp_dict_value_108 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

                if (unlikely(tmp_dict_value_108 == NULL)) {
                    tmp_dict_value_108 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
                }

                if (tmp_dict_value_108 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1514;

                    goto dict_build_exception_108;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_108, tmp_dict_value_108);
                assert(!(tmp_res != 0));
                tmp_dict_key_108 = mod_consts[254];
                tmp_list_element_120 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[170]);

                if (unlikely(tmp_list_element_120 == NULL)) {
                    tmp_list_element_120 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[170]);
                }

                if (tmp_list_element_120 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1516;

                    goto dict_build_exception_108;
                }
                tmp_dict_value_108 = PyList_New(3);
                {
                    PyObject *tmp_expression_value_353;
                    PyList_SET_ITEM0(tmp_dict_value_108, 0, tmp_list_element_120);
                    tmp_list_element_120 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[172]);

                    if (unlikely(tmp_list_element_120 == NULL)) {
                        tmp_list_element_120 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[172]);
                    }

                    if (tmp_list_element_120 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1517;

                        goto list_build_exception_108;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_108, 1, tmp_list_element_120);
                    tmp_expression_value_353 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_353 == NULL)) {
                        tmp_expression_value_353 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_353 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1518;

                        goto list_build_exception_108;
                    }
                    tmp_list_element_120 = LOOKUP_ATTRIBUTE(tmp_expression_value_353, mod_consts[84]);
                    if (tmp_list_element_120 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1518;

                        goto list_build_exception_108;
                    }
                    PyList_SET_ITEM(tmp_dict_value_108, 2, tmp_list_element_120);
                }
                goto list_build_noexception_108;
                // Exception handling pass through code for list_build:
                list_build_exception_108:;
                Py_DECREF(tmp_dict_value_108);
                goto dict_build_exception_108;
                // Finished with no exception for list_build:
                list_build_noexception_108:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_108, tmp_dict_value_108);
                Py_DECREF(tmp_dict_value_108);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_107;
            // Exception handling pass through code for dict_build:
            dict_build_exception_108:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_107:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[361];
            tmp_dict_key_109 = mod_consts[255];
            tmp_dict_value_109 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_109 == NULL)) {
                tmp_dict_value_109 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_109 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1527;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_121;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_109, tmp_dict_value_109);
                assert(!(tmp_res != 0));
                tmp_dict_key_109 = mod_consts[253];
                tmp_dict_value_109 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

                if (unlikely(tmp_dict_value_109 == NULL)) {
                    tmp_dict_value_109 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
                }

                if (tmp_dict_value_109 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1528;

                    goto dict_build_exception_109;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_109, tmp_dict_value_109);
                assert(!(tmp_res != 0));
                tmp_dict_key_109 = mod_consts[254];
                tmp_list_element_121 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[65]);

                if (unlikely(tmp_list_element_121 == NULL)) {
                    tmp_list_element_121 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[65]);
                }

                if (tmp_list_element_121 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1530;

                    goto dict_build_exception_109;
                }
                tmp_dict_value_109 = PyList_New(3);
                {
                    PyObject *tmp_expression_value_354;
                    PyList_SET_ITEM0(tmp_dict_value_109, 0, tmp_list_element_121);
                    tmp_list_element_121 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[248]);

                    if (unlikely(tmp_list_element_121 == NULL)) {
                        tmp_list_element_121 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[248]);
                    }

                    if (tmp_list_element_121 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1531;

                        goto list_build_exception_109;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_109, 1, tmp_list_element_121);
                    tmp_expression_value_354 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_354 == NULL)) {
                        tmp_expression_value_354 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_354 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1532;

                        goto list_build_exception_109;
                    }
                    tmp_list_element_121 = LOOKUP_ATTRIBUTE(tmp_expression_value_354, mod_consts[84]);
                    if (tmp_list_element_121 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1532;

                        goto list_build_exception_109;
                    }
                    PyList_SET_ITEM(tmp_dict_value_109, 2, tmp_list_element_121);
                }
                goto list_build_noexception_109;
                // Exception handling pass through code for list_build:
                list_build_exception_109:;
                Py_DECREF(tmp_dict_value_109);
                goto dict_build_exception_109;
                // Finished with no exception for list_build:
                list_build_noexception_109:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_109, tmp_dict_value_109);
                Py_DECREF(tmp_dict_value_109);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_108;
            // Exception handling pass through code for dict_build:
            dict_build_exception_109:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_108:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[362];
            tmp_dict_key_110 = mod_consts[255];
            tmp_dict_value_110 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_110 == NULL)) {
                tmp_dict_value_110 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_110 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1540;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_122;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_110, tmp_dict_value_110);
                assert(!(tmp_res != 0));
                tmp_dict_key_110 = mod_consts[253];
                tmp_dict_value_110 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

                if (unlikely(tmp_dict_value_110 == NULL)) {
                    tmp_dict_value_110 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
                }

                if (tmp_dict_value_110 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1541;

                    goto dict_build_exception_110;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_110, tmp_dict_value_110);
                assert(!(tmp_res != 0));
                tmp_dict_key_110 = mod_consts[254];
                tmp_list_element_122 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[170]);

                if (unlikely(tmp_list_element_122 == NULL)) {
                    tmp_list_element_122 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[170]);
                }

                if (tmp_list_element_122 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1543;

                    goto dict_build_exception_110;
                }
                tmp_dict_value_110 = PyList_New(4);
                {
                    PyObject *tmp_expression_value_355;
                    PyObject *tmp_expression_value_356;
                    PyObject *tmp_called_value_103;
                    PyObject *tmp_args_element_value_114;
                    PyObject *tmp_expression_value_357;
                    PyList_SET_ITEM0(tmp_dict_value_110, 0, tmp_list_element_122);
                    tmp_expression_value_355 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_355 == NULL)) {
                        tmp_expression_value_355 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_355 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1544;

                        goto list_build_exception_110;
                    }
                    tmp_list_element_122 = LOOKUP_ATTRIBUTE(tmp_expression_value_355, mod_consts[223]);
                    if (tmp_list_element_122 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1544;

                        goto list_build_exception_110;
                    }
                    PyList_SET_ITEM(tmp_dict_value_110, 1, tmp_list_element_122);
                    tmp_expression_value_356 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_356 == NULL)) {
                        tmp_expression_value_356 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_356 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1545;

                        goto list_build_exception_110;
                    }
                    tmp_list_element_122 = LOOKUP_ATTRIBUTE(tmp_expression_value_356, mod_consts[54]);
                    if (tmp_list_element_122 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1545;

                        goto list_build_exception_110;
                    }
                    PyList_SET_ITEM(tmp_dict_value_110, 2, tmp_list_element_122);
                    tmp_called_value_103 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_103 == NULL)) {
                        tmp_called_value_103 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_103 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1546;

                        goto list_build_exception_110;
                    }
                    tmp_expression_value_357 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_357 == NULL)) {
                        tmp_expression_value_357 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_357 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1546;

                        goto list_build_exception_110;
                    }
                    tmp_args_element_value_114 = LOOKUP_ATTRIBUTE(tmp_expression_value_357, mod_consts[84]);
                    if (tmp_args_element_value_114 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1546;

                        goto list_build_exception_110;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1546;
                    tmp_list_element_122 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_103, tmp_args_element_value_114);
                    Py_DECREF(tmp_args_element_value_114);
                    if (tmp_list_element_122 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1546;

                        goto list_build_exception_110;
                    }
                    PyList_SET_ITEM(tmp_dict_value_110, 3, tmp_list_element_122);
                }
                goto list_build_noexception_110;
                // Exception handling pass through code for list_build:
                list_build_exception_110:;
                Py_DECREF(tmp_dict_value_110);
                goto dict_build_exception_110;
                // Finished with no exception for list_build:
                list_build_noexception_110:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_110, tmp_dict_value_110);
                Py_DECREF(tmp_dict_value_110);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_109;
            // Exception handling pass through code for dict_build:
            dict_build_exception_110:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_109:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[363];
            tmp_dict_key_111 = mod_consts[255];
            tmp_dict_value_111 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_111 == NULL)) {
                tmp_dict_value_111 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_111 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1552;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_123;
                PyObject *tmp_expression_value_358;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_111, tmp_dict_value_111);
                assert(!(tmp_res != 0));
                tmp_dict_key_111 = mod_consts[253];
                tmp_dict_value_111 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

                if (unlikely(tmp_dict_value_111 == NULL)) {
                    tmp_dict_value_111 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
                }

                if (tmp_dict_value_111 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1553;

                    goto dict_build_exception_111;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_111, tmp_dict_value_111);
                assert(!(tmp_res != 0));
                tmp_dict_key_111 = mod_consts[254];
                tmp_expression_value_358 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                if (unlikely(tmp_expression_value_358 == NULL)) {
                    tmp_expression_value_358 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                }

                if (tmp_expression_value_358 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1555;

                    goto dict_build_exception_111;
                }
                tmp_list_element_123 = LOOKUP_ATTRIBUTE(tmp_expression_value_358, mod_consts[84]);
                if (tmp_list_element_123 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1555;

                    goto dict_build_exception_111;
                }
                tmp_dict_value_111 = PyList_New(1);
                PyList_SET_ITEM(tmp_dict_value_111, 0, tmp_list_element_123);
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_111, tmp_dict_value_111);
                Py_DECREF(tmp_dict_value_111);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_110;
            // Exception handling pass through code for dict_build:
            dict_build_exception_111:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_110:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[364];
            tmp_dict_key_112 = mod_consts[255];
            tmp_dict_value_112 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_112 == NULL)) {
                tmp_dict_value_112 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_112 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1566;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_124;
                PyObject *tmp_expression_value_359;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_112, tmp_dict_value_112);
                assert(!(tmp_res != 0));
                tmp_dict_key_112 = mod_consts[253];
                tmp_dict_value_112 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

                if (unlikely(tmp_dict_value_112 == NULL)) {
                    tmp_dict_value_112 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
                }

                if (tmp_dict_value_112 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1567;

                    goto dict_build_exception_112;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_112, tmp_dict_value_112);
                assert(!(tmp_res != 0));
                tmp_dict_key_112 = mod_consts[254];
                tmp_expression_value_359 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                if (unlikely(tmp_expression_value_359 == NULL)) {
                    tmp_expression_value_359 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                }

                if (tmp_expression_value_359 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1569;

                    goto dict_build_exception_112;
                }
                tmp_list_element_124 = LOOKUP_ATTRIBUTE(tmp_expression_value_359, mod_consts[84]);
                if (tmp_list_element_124 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1569;

                    goto dict_build_exception_112;
                }
                tmp_dict_value_112 = PyList_New(8);
                {
                    PyObject *tmp_expression_value_360;
                    PyObject *tmp_expression_value_361;
                    PyObject *tmp_expression_value_362;
                    PyObject *tmp_called_value_104;
                    PyObject *tmp_args_element_value_115;
                    PyList_SET_ITEM(tmp_dict_value_112, 0, tmp_list_element_124);
                    tmp_list_element_124 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[65]);

                    if (unlikely(tmp_list_element_124 == NULL)) {
                        tmp_list_element_124 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[65]);
                    }

                    if (tmp_list_element_124 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1570;

                        goto list_build_exception_111;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_112, 1, tmp_list_element_124);
                    tmp_expression_value_360 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_360 == NULL)) {
                        tmp_expression_value_360 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_360 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1571;

                        goto list_build_exception_111;
                    }
                    tmp_list_element_124 = LOOKUP_ATTRIBUTE(tmp_expression_value_360, mod_consts[84]);
                    if (tmp_list_element_124 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1571;

                        goto list_build_exception_111;
                    }
                    PyList_SET_ITEM(tmp_dict_value_112, 2, tmp_list_element_124);
                    tmp_list_element_124 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[65]);

                    if (unlikely(tmp_list_element_124 == NULL)) {
                        tmp_list_element_124 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[65]);
                    }

                    if (tmp_list_element_124 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1572;

                        goto list_build_exception_111;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_112, 3, tmp_list_element_124);
                    tmp_expression_value_361 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_361 == NULL)) {
                        tmp_expression_value_361 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_361 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1573;

                        goto list_build_exception_111;
                    }
                    tmp_list_element_124 = LOOKUP_ATTRIBUTE(tmp_expression_value_361, mod_consts[223]);
                    if (tmp_list_element_124 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1573;

                        goto list_build_exception_111;
                    }
                    PyList_SET_ITEM(tmp_dict_value_112, 4, tmp_list_element_124);
                    tmp_expression_value_362 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_362 == NULL)) {
                        tmp_expression_value_362 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_362 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1574;

                        goto list_build_exception_111;
                    }
                    tmp_list_element_124 = LOOKUP_ATTRIBUTE(tmp_expression_value_362, mod_consts[54]);
                    if (tmp_list_element_124 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1574;

                        goto list_build_exception_111;
                    }
                    PyList_SET_ITEM(tmp_dict_value_112, 5, tmp_list_element_124);
                    tmp_called_value_104 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_104 == NULL)) {
                        tmp_called_value_104 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_104 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1575;

                        goto list_build_exception_111;
                    }
                    tmp_args_element_value_115 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                    if (unlikely(tmp_args_element_value_115 == NULL)) {
                        tmp_args_element_value_115 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                    }

                    if (tmp_args_element_value_115 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1575;

                        goto list_build_exception_111;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1575;
                    tmp_list_element_124 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_104, tmp_args_element_value_115);
                    if (tmp_list_element_124 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1575;

                        goto list_build_exception_111;
                    }
                    PyList_SET_ITEM(tmp_dict_value_112, 6, tmp_list_element_124);
                    tmp_list_element_124 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[71]);

                    if (unlikely(tmp_list_element_124 == NULL)) {
                        tmp_list_element_124 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[71]);
                    }

                    if (tmp_list_element_124 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1576;

                        goto list_build_exception_111;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_112, 7, tmp_list_element_124);
                }
                goto list_build_noexception_111;
                // Exception handling pass through code for list_build:
                list_build_exception_111:;
                Py_DECREF(tmp_dict_value_112);
                goto dict_build_exception_112;
                // Finished with no exception for list_build:
                list_build_noexception_111:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_112, tmp_dict_value_112);
                Py_DECREF(tmp_dict_value_112);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_111;
            // Exception handling pass through code for dict_build:
            dict_build_exception_112:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_111:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[365];
            tmp_dict_key_113 = mod_consts[255];
            tmp_dict_value_113 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_113 == NULL)) {
                tmp_dict_value_113 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_113 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1584;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_125;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_113, tmp_dict_value_113);
                assert(!(tmp_res != 0));
                tmp_dict_key_113 = mod_consts[253];
                tmp_dict_value_113 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

                if (unlikely(tmp_dict_value_113 == NULL)) {
                    tmp_dict_value_113 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
                }

                if (tmp_dict_value_113 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1585;

                    goto dict_build_exception_113;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_113, tmp_dict_value_113);
                assert(!(tmp_res != 0));
                tmp_dict_key_113 = mod_consts[254];
                tmp_list_element_125 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[65]);

                if (unlikely(tmp_list_element_125 == NULL)) {
                    tmp_list_element_125 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[65]);
                }

                if (tmp_list_element_125 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1587;

                    goto dict_build_exception_113;
                }
                tmp_dict_value_113 = PyList_New(4);
                {
                    PyObject *tmp_expression_value_363;
                    PyList_SET_ITEM0(tmp_dict_value_113, 0, tmp_list_element_125);
                    tmp_list_element_125 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[170]);

                    if (unlikely(tmp_list_element_125 == NULL)) {
                        tmp_list_element_125 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[170]);
                    }

                    if (tmp_list_element_125 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1588;

                        goto list_build_exception_112;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_113, 1, tmp_list_element_125);
                    tmp_list_element_125 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[176]);

                    if (unlikely(tmp_list_element_125 == NULL)) {
                        tmp_list_element_125 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[176]);
                    }

                    if (tmp_list_element_125 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1589;

                        goto list_build_exception_112;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_113, 2, tmp_list_element_125);
                    tmp_expression_value_363 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_363 == NULL)) {
                        tmp_expression_value_363 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_363 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1590;

                        goto list_build_exception_112;
                    }
                    tmp_list_element_125 = LOOKUP_ATTRIBUTE(tmp_expression_value_363, mod_consts[84]);
                    if (tmp_list_element_125 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1590;

                        goto list_build_exception_112;
                    }
                    PyList_SET_ITEM(tmp_dict_value_113, 3, tmp_list_element_125);
                }
                goto list_build_noexception_112;
                // Exception handling pass through code for list_build:
                list_build_exception_112:;
                Py_DECREF(tmp_dict_value_113);
                goto dict_build_exception_113;
                // Finished with no exception for list_build:
                list_build_noexception_112:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_113, tmp_dict_value_113);
                Py_DECREF(tmp_dict_value_113);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_112;
            // Exception handling pass through code for dict_build:
            dict_build_exception_113:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_112:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[366];
            tmp_dict_key_114 = mod_consts[255];
            tmp_dict_value_114 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_114 == NULL)) {
                tmp_dict_value_114 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_114 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1599;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_126;
                PyObject *tmp_expression_value_364;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_114, tmp_dict_value_114);
                assert(!(tmp_res != 0));
                tmp_dict_key_114 = mod_consts[253];
                tmp_dict_value_114 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

                if (unlikely(tmp_dict_value_114 == NULL)) {
                    tmp_dict_value_114 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
                }

                if (tmp_dict_value_114 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1600;

                    goto dict_build_exception_114;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_114, tmp_dict_value_114);
                assert(!(tmp_res != 0));
                tmp_dict_key_114 = mod_consts[254];
                tmp_expression_value_364 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                if (unlikely(tmp_expression_value_364 == NULL)) {
                    tmp_expression_value_364 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                }

                if (tmp_expression_value_364 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1602;

                    goto dict_build_exception_114;
                }
                tmp_list_element_126 = LOOKUP_ATTRIBUTE(tmp_expression_value_364, mod_consts[54]);
                if (tmp_list_element_126 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1602;

                    goto dict_build_exception_114;
                }
                tmp_dict_value_114 = PyList_New(4);
                {
                    PyObject *tmp_called_value_105;
                    PyObject *tmp_args_element_value_116;
                    PyObject *tmp_called_value_106;
                    PyObject *tmp_args_element_value_117;
                    PyObject *tmp_expression_value_365;
                    PyObject *tmp_expression_value_366;
                    PyList_SET_ITEM(tmp_dict_value_114, 0, tmp_list_element_126);
                    tmp_called_value_105 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_105 == NULL)) {
                        tmp_called_value_105 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_105 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1603;

                        goto list_build_exception_113;
                    }
                    tmp_args_element_value_116 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[65]);

                    if (unlikely(tmp_args_element_value_116 == NULL)) {
                        tmp_args_element_value_116 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[65]);
                    }

                    if (tmp_args_element_value_116 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1603;

                        goto list_build_exception_113;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1603;
                    tmp_list_element_126 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_105, tmp_args_element_value_116);
                    if (tmp_list_element_126 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1603;

                        goto list_build_exception_113;
                    }
                    PyList_SET_ITEM(tmp_dict_value_114, 1, tmp_list_element_126);
                    tmp_called_value_106 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_106 == NULL)) {
                        tmp_called_value_106 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_106 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1604;

                        goto list_build_exception_113;
                    }
                    tmp_expression_value_365 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_365 == NULL)) {
                        tmp_expression_value_365 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_365 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1604;

                        goto list_build_exception_113;
                    }
                    tmp_args_element_value_117 = LOOKUP_ATTRIBUTE(tmp_expression_value_365, mod_consts[54]);
                    if (tmp_args_element_value_117 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1604;

                        goto list_build_exception_113;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1604;
                    tmp_list_element_126 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_106, tmp_args_element_value_117);
                    Py_DECREF(tmp_args_element_value_117);
                    if (tmp_list_element_126 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1604;

                        goto list_build_exception_113;
                    }
                    PyList_SET_ITEM(tmp_dict_value_114, 2, tmp_list_element_126);
                    tmp_expression_value_366 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_366 == NULL)) {
                        tmp_expression_value_366 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_366 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1605;

                        goto list_build_exception_113;
                    }
                    tmp_list_element_126 = LOOKUP_ATTRIBUTE(tmp_expression_value_366, mod_consts[84]);
                    if (tmp_list_element_126 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1605;

                        goto list_build_exception_113;
                    }
                    PyList_SET_ITEM(tmp_dict_value_114, 3, tmp_list_element_126);
                }
                goto list_build_noexception_113;
                // Exception handling pass through code for list_build:
                list_build_exception_113:;
                Py_DECREF(tmp_dict_value_114);
                goto dict_build_exception_114;
                // Finished with no exception for list_build:
                list_build_noexception_113:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_114, tmp_dict_value_114);
                Py_DECREF(tmp_dict_value_114);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_113;
            // Exception handling pass through code for dict_build:
            dict_build_exception_114:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_113:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[367];
            tmp_dict_key_115 = mod_consts[255];
            tmp_dict_value_115 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_115 == NULL)) {
                tmp_dict_value_115 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_115 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1615;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_127;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_115, tmp_dict_value_115);
                assert(!(tmp_res != 0));
                tmp_dict_key_115 = mod_consts[253];
                tmp_dict_value_115 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

                if (unlikely(tmp_dict_value_115 == NULL)) {
                    tmp_dict_value_115 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
                }

                if (tmp_dict_value_115 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1616;

                    goto dict_build_exception_115;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_115, tmp_dict_value_115);
                assert(!(tmp_res != 0));
                tmp_dict_key_115 = mod_consts[254];
                tmp_list_element_127 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[170]);

                if (unlikely(tmp_list_element_127 == NULL)) {
                    tmp_list_element_127 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[170]);
                }

                if (tmp_list_element_127 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1618;

                    goto dict_build_exception_115;
                }
                tmp_dict_value_115 = PyList_New(3);
                {
                    PyObject *tmp_called_value_107;
                    PyObject *tmp_args_element_value_118;
                    PyObject *tmp_expression_value_367;
                    PyList_SET_ITEM0(tmp_dict_value_115, 0, tmp_list_element_127);
                    tmp_list_element_127 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[170]);

                    if (unlikely(tmp_list_element_127 == NULL)) {
                        tmp_list_element_127 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[170]);
                    }

                    if (tmp_list_element_127 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1619;

                        goto list_build_exception_114;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_115, 1, tmp_list_element_127);
                    tmp_called_value_107 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_107 == NULL)) {
                        tmp_called_value_107 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_107 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1620;

                        goto list_build_exception_114;
                    }
                    tmp_expression_value_367 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_367 == NULL)) {
                        tmp_expression_value_367 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_367 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1620;

                        goto list_build_exception_114;
                    }
                    tmp_args_element_value_118 = LOOKUP_ATTRIBUTE(tmp_expression_value_367, mod_consts[167]);
                    if (tmp_args_element_value_118 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1620;

                        goto list_build_exception_114;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1620;
                    tmp_list_element_127 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_107, tmp_args_element_value_118);
                    Py_DECREF(tmp_args_element_value_118);
                    if (tmp_list_element_127 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1620;

                        goto list_build_exception_114;
                    }
                    PyList_SET_ITEM(tmp_dict_value_115, 2, tmp_list_element_127);
                }
                goto list_build_noexception_114;
                // Exception handling pass through code for list_build:
                list_build_exception_114:;
                Py_DECREF(tmp_dict_value_115);
                goto dict_build_exception_115;
                // Finished with no exception for list_build:
                list_build_noexception_114:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_115, tmp_dict_value_115);
                Py_DECREF(tmp_dict_value_115);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_114;
            // Exception handling pass through code for dict_build:
            dict_build_exception_115:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_114:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[368];
            tmp_dict_key_116 = mod_consts[255];
            tmp_dict_value_116 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_116 == NULL)) {
                tmp_dict_value_116 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_116 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1629;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_128;
                PyObject *tmp_expression_value_368;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_116, tmp_dict_value_116);
                assert(!(tmp_res != 0));
                tmp_dict_key_116 = mod_consts[253];
                tmp_dict_value_116 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

                if (unlikely(tmp_dict_value_116 == NULL)) {
                    tmp_dict_value_116 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
                }

                if (tmp_dict_value_116 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1630;

                    goto dict_build_exception_116;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_116, tmp_dict_value_116);
                assert(!(tmp_res != 0));
                tmp_dict_key_116 = mod_consts[254];
                tmp_expression_value_368 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                if (unlikely(tmp_expression_value_368 == NULL)) {
                    tmp_expression_value_368 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                }

                if (tmp_expression_value_368 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1632;

                    goto dict_build_exception_116;
                }
                tmp_list_element_128 = LOOKUP_ATTRIBUTE(tmp_expression_value_368, mod_consts[84]);
                if (tmp_list_element_128 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1632;

                    goto dict_build_exception_116;
                }
                tmp_dict_value_116 = PyList_New(3);
                {
                    PyObject *tmp_expression_value_369;
                    PyList_SET_ITEM(tmp_dict_value_116, 0, tmp_list_element_128);
                    tmp_list_element_128 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[170]);

                    if (unlikely(tmp_list_element_128 == NULL)) {
                        tmp_list_element_128 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[170]);
                    }

                    if (tmp_list_element_128 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1633;

                        goto list_build_exception_115;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_116, 1, tmp_list_element_128);
                    tmp_expression_value_369 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_369 == NULL)) {
                        tmp_expression_value_369 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_369 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1634;

                        goto list_build_exception_115;
                    }
                    tmp_list_element_128 = LOOKUP_ATTRIBUTE(tmp_expression_value_369, mod_consts[54]);
                    if (tmp_list_element_128 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1634;

                        goto list_build_exception_115;
                    }
                    PyList_SET_ITEM(tmp_dict_value_116, 2, tmp_list_element_128);
                }
                goto list_build_noexception_115;
                // Exception handling pass through code for list_build:
                list_build_exception_115:;
                Py_DECREF(tmp_dict_value_116);
                goto dict_build_exception_116;
                // Finished with no exception for list_build:
                list_build_noexception_115:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_116, tmp_dict_value_116);
                Py_DECREF(tmp_dict_value_116);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_115;
            // Exception handling pass through code for dict_build:
            dict_build_exception_116:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_115:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[369];
            tmp_dict_key_117 = mod_consts[255];
            tmp_dict_value_117 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_117 == NULL)) {
                tmp_dict_value_117 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_117 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1643;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_129;
                PyObject *tmp_expression_value_370;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_117, tmp_dict_value_117);
                assert(!(tmp_res != 0));
                tmp_dict_key_117 = mod_consts[253];
                tmp_dict_value_117 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

                if (unlikely(tmp_dict_value_117 == NULL)) {
                    tmp_dict_value_117 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
                }

                if (tmp_dict_value_117 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1644;

                    goto dict_build_exception_117;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_117, tmp_dict_value_117);
                assert(!(tmp_res != 0));
                tmp_dict_key_117 = mod_consts[254];
                tmp_expression_value_370 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                if (unlikely(tmp_expression_value_370 == NULL)) {
                    tmp_expression_value_370 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                }

                if (tmp_expression_value_370 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1646;

                    goto dict_build_exception_117;
                }
                tmp_list_element_129 = LOOKUP_ATTRIBUTE(tmp_expression_value_370, mod_consts[84]);
                if (tmp_list_element_129 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1646;

                    goto dict_build_exception_117;
                }
                tmp_dict_value_117 = PyList_New(5);
                {
                    PyObject *tmp_expression_value_371;
                    PyObject *tmp_called_value_108;
                    PyObject *tmp_args_element_value_119;
                    PyObject *tmp_expression_value_372;
                    PyObject *tmp_called_value_109;
                    PyObject *tmp_args_element_value_120;
                    PyObject *tmp_expression_value_373;
                    PyList_SET_ITEM(tmp_dict_value_117, 0, tmp_list_element_129);
                    tmp_expression_value_371 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_371 == NULL)) {
                        tmp_expression_value_371 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_371 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1647;

                        goto list_build_exception_116;
                    }
                    tmp_list_element_129 = LOOKUP_ATTRIBUTE(tmp_expression_value_371, mod_consts[223]);
                    if (tmp_list_element_129 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1647;

                        goto list_build_exception_116;
                    }
                    PyList_SET_ITEM(tmp_dict_value_117, 1, tmp_list_element_129);
                    tmp_called_value_108 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_108 == NULL)) {
                        tmp_called_value_108 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_108 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1648;

                        goto list_build_exception_116;
                    }
                    tmp_args_element_value_119 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[65]);

                    if (unlikely(tmp_args_element_value_119 == NULL)) {
                        tmp_args_element_value_119 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[65]);
                    }

                    if (tmp_args_element_value_119 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1648;

                        goto list_build_exception_116;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1648;
                    tmp_list_element_129 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_108, tmp_args_element_value_119);
                    if (tmp_list_element_129 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1648;

                        goto list_build_exception_116;
                    }
                    PyList_SET_ITEM(tmp_dict_value_117, 2, tmp_list_element_129);
                    tmp_expression_value_372 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_372 == NULL)) {
                        tmp_expression_value_372 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_372 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1649;

                        goto list_build_exception_116;
                    }
                    tmp_list_element_129 = LOOKUP_ATTRIBUTE(tmp_expression_value_372, mod_consts[41]);
                    if (tmp_list_element_129 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1649;

                        goto list_build_exception_116;
                    }
                    PyList_SET_ITEM(tmp_dict_value_117, 3, tmp_list_element_129);
                    tmp_called_value_109 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_109 == NULL)) {
                        tmp_called_value_109 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_109 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1650;

                        goto list_build_exception_116;
                    }
                    tmp_expression_value_373 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_373 == NULL)) {
                        tmp_expression_value_373 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_373 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1650;

                        goto list_build_exception_116;
                    }
                    tmp_args_element_value_120 = LOOKUP_ATTRIBUTE(tmp_expression_value_373, mod_consts[84]);
                    if (tmp_args_element_value_120 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1650;

                        goto list_build_exception_116;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1650;
                    tmp_list_element_129 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_109, tmp_args_element_value_120);
                    Py_DECREF(tmp_args_element_value_120);
                    if (tmp_list_element_129 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1650;

                        goto list_build_exception_116;
                    }
                    PyList_SET_ITEM(tmp_dict_value_117, 4, tmp_list_element_129);
                }
                goto list_build_noexception_116;
                // Exception handling pass through code for list_build:
                list_build_exception_116:;
                Py_DECREF(tmp_dict_value_117);
                goto dict_build_exception_117;
                // Finished with no exception for list_build:
                list_build_noexception_116:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_117, tmp_dict_value_117);
                Py_DECREF(tmp_dict_value_117);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_116;
            // Exception handling pass through code for dict_build:
            dict_build_exception_117:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_116:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[370];
            tmp_dict_key_118 = mod_consts[255];
            tmp_dict_value_118 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_118 == NULL)) {
                tmp_dict_value_118 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_118 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1657;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_130;
                PyObject *tmp_expression_value_374;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_118, tmp_dict_value_118);
                assert(!(tmp_res != 0));
                tmp_dict_key_118 = mod_consts[253];
                tmp_dict_value_118 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

                if (unlikely(tmp_dict_value_118 == NULL)) {
                    tmp_dict_value_118 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
                }

                if (tmp_dict_value_118 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1658;

                    goto dict_build_exception_118;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_118, tmp_dict_value_118);
                assert(!(tmp_res != 0));
                tmp_dict_key_118 = mod_consts[254];
                tmp_expression_value_374 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                if (unlikely(tmp_expression_value_374 == NULL)) {
                    tmp_expression_value_374 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                }

                if (tmp_expression_value_374 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1660;

                    goto dict_build_exception_118;
                }
                tmp_list_element_130 = LOOKUP_ATTRIBUTE(tmp_expression_value_374, mod_consts[84]);
                if (tmp_list_element_130 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1660;

                    goto dict_build_exception_118;
                }
                tmp_dict_value_118 = PyList_New(1);
                PyList_SET_ITEM(tmp_dict_value_118, 0, tmp_list_element_130);
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_118, tmp_dict_value_118);
                Py_DECREF(tmp_dict_value_118);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_117;
            // Exception handling pass through code for dict_build:
            dict_build_exception_118:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_117:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[370];
            tmp_dict_key_119 = mod_consts[255];
            tmp_dict_value_119 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_119 == NULL)) {
                tmp_dict_value_119 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_119 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1668;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_131;
                PyObject *tmp_expression_value_375;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_119, tmp_dict_value_119);
                assert(!(tmp_res != 0));
                tmp_dict_key_119 = mod_consts[253];
                tmp_dict_value_119 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

                if (unlikely(tmp_dict_value_119 == NULL)) {
                    tmp_dict_value_119 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
                }

                if (tmp_dict_value_119 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1669;

                    goto dict_build_exception_119;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_119, tmp_dict_value_119);
                assert(!(tmp_res != 0));
                tmp_dict_key_119 = mod_consts[254];
                tmp_expression_value_375 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                if (unlikely(tmp_expression_value_375 == NULL)) {
                    tmp_expression_value_375 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                }

                if (tmp_expression_value_375 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1671;

                    goto dict_build_exception_119;
                }
                tmp_list_element_131 = LOOKUP_ATTRIBUTE(tmp_expression_value_375, mod_consts[84]);
                if (tmp_list_element_131 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1671;

                    goto dict_build_exception_119;
                }
                tmp_dict_value_119 = PyList_New(1);
                PyList_SET_ITEM(tmp_dict_value_119, 0, tmp_list_element_131);
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_119, tmp_dict_value_119);
                Py_DECREF(tmp_dict_value_119);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_118;
            // Exception handling pass through code for dict_build:
            dict_build_exception_119:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_118:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[371];
            tmp_dict_key_120 = mod_consts[255];
            tmp_dict_value_120 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_120 == NULL)) {
                tmp_dict_value_120 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_120 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1684;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_132;
                PyObject *tmp_expression_value_376;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_120, tmp_dict_value_120);
                assert(!(tmp_res != 0));
                tmp_dict_key_120 = mod_consts[253];
                tmp_dict_value_120 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

                if (unlikely(tmp_dict_value_120 == NULL)) {
                    tmp_dict_value_120 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
                }

                if (tmp_dict_value_120 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1685;

                    goto dict_build_exception_120;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_120, tmp_dict_value_120);
                assert(!(tmp_res != 0));
                tmp_dict_key_120 = mod_consts[254];
                tmp_expression_value_376 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                if (unlikely(tmp_expression_value_376 == NULL)) {
                    tmp_expression_value_376 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                }

                if (tmp_expression_value_376 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1687;

                    goto dict_build_exception_120;
                }
                tmp_list_element_132 = LOOKUP_ATTRIBUTE(tmp_expression_value_376, mod_consts[54]);
                if (tmp_list_element_132 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1687;

                    goto dict_build_exception_120;
                }
                tmp_dict_value_120 = PyList_New(8);
                {
                    PyObject *tmp_called_value_110;
                    PyObject *tmp_args_element_value_121;
                    PyObject *tmp_expression_value_377;
                    PyObject *tmp_expression_value_378;
                    PyObject *tmp_called_value_111;
                    PyObject *tmp_args_element_value_122;
                    PyObject *tmp_expression_value_379;
                    PyObject *tmp_called_value_112;
                    PyObject *tmp_args_element_value_123;
                    PyObject *tmp_expression_value_380;
                    PyObject *tmp_called_value_113;
                    PyObject *tmp_args_element_value_124;
                    PyObject *tmp_expression_value_381;
                    PyObject *tmp_called_value_114;
                    PyObject *tmp_args_element_value_125;
                    PyObject *tmp_expression_value_382;
                    PyList_SET_ITEM(tmp_dict_value_120, 0, tmp_list_element_132);
                    tmp_called_value_110 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_110 == NULL)) {
                        tmp_called_value_110 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_110 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1688;

                        goto list_build_exception_117;
                    }
                    tmp_args_element_value_121 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[65]);

                    if (unlikely(tmp_args_element_value_121 == NULL)) {
                        tmp_args_element_value_121 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[65]);
                    }

                    if (tmp_args_element_value_121 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1688;

                        goto list_build_exception_117;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1688;
                    tmp_list_element_132 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_110, tmp_args_element_value_121);
                    if (tmp_list_element_132 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1688;

                        goto list_build_exception_117;
                    }
                    PyList_SET_ITEM(tmp_dict_value_120, 1, tmp_list_element_132);
                    tmp_expression_value_377 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_377 == NULL)) {
                        tmp_expression_value_377 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_377 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1689;

                        goto list_build_exception_117;
                    }
                    tmp_list_element_132 = LOOKUP_ATTRIBUTE(tmp_expression_value_377, mod_consts[41]);
                    if (tmp_list_element_132 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1689;

                        goto list_build_exception_117;
                    }
                    PyList_SET_ITEM(tmp_dict_value_120, 2, tmp_list_element_132);
                    tmp_expression_value_378 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_378 == NULL)) {
                        tmp_expression_value_378 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_378 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1690;

                        goto list_build_exception_117;
                    }
                    tmp_list_element_132 = LOOKUP_ATTRIBUTE(tmp_expression_value_378, mod_consts[54]);
                    if (tmp_list_element_132 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1690;

                        goto list_build_exception_117;
                    }
                    PyList_SET_ITEM(tmp_dict_value_120, 3, tmp_list_element_132);
                    tmp_called_value_111 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_111 == NULL)) {
                        tmp_called_value_111 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_111 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1691;

                        goto list_build_exception_117;
                    }
                    tmp_expression_value_379 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_379 == NULL)) {
                        tmp_expression_value_379 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_379 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1691;

                        goto list_build_exception_117;
                    }
                    tmp_args_element_value_122 = LOOKUP_ATTRIBUTE(tmp_expression_value_379, mod_consts[223]);
                    if (tmp_args_element_value_122 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1691;

                        goto list_build_exception_117;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1691;
                    tmp_list_element_132 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_111, tmp_args_element_value_122);
                    Py_DECREF(tmp_args_element_value_122);
                    if (tmp_list_element_132 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1691;

                        goto list_build_exception_117;
                    }
                    PyList_SET_ITEM(tmp_dict_value_120, 4, tmp_list_element_132);
                    tmp_called_value_112 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_112 == NULL)) {
                        tmp_called_value_112 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_112 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1692;

                        goto list_build_exception_117;
                    }
                    tmp_expression_value_380 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_380 == NULL)) {
                        tmp_expression_value_380 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_380 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1692;

                        goto list_build_exception_117;
                    }
                    tmp_args_element_value_123 = LOOKUP_ATTRIBUTE(tmp_expression_value_380, mod_consts[84]);
                    if (tmp_args_element_value_123 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1692;

                        goto list_build_exception_117;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1692;
                    tmp_list_element_132 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_112, tmp_args_element_value_123);
                    Py_DECREF(tmp_args_element_value_123);
                    if (tmp_list_element_132 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1692;

                        goto list_build_exception_117;
                    }
                    PyList_SET_ITEM(tmp_dict_value_120, 5, tmp_list_element_132);
                    tmp_called_value_113 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_113 == NULL)) {
                        tmp_called_value_113 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_113 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1693;

                        goto list_build_exception_117;
                    }
                    tmp_expression_value_381 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_381 == NULL)) {
                        tmp_expression_value_381 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_381 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1693;

                        goto list_build_exception_117;
                    }
                    tmp_args_element_value_124 = LOOKUP_ATTRIBUTE(tmp_expression_value_381, mod_consts[223]);
                    if (tmp_args_element_value_124 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1693;

                        goto list_build_exception_117;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1693;
                    tmp_list_element_132 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_113, tmp_args_element_value_124);
                    Py_DECREF(tmp_args_element_value_124);
                    if (tmp_list_element_132 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1693;

                        goto list_build_exception_117;
                    }
                    PyList_SET_ITEM(tmp_dict_value_120, 6, tmp_list_element_132);
                    tmp_called_value_114 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_114 == NULL)) {
                        tmp_called_value_114 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_114 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1694;

                        goto list_build_exception_117;
                    }
                    tmp_expression_value_382 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_382 == NULL)) {
                        tmp_expression_value_382 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_382 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1694;

                        goto list_build_exception_117;
                    }
                    tmp_args_element_value_125 = LOOKUP_ATTRIBUTE(tmp_expression_value_382, mod_consts[84]);
                    if (tmp_args_element_value_125 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1694;

                        goto list_build_exception_117;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1694;
                    tmp_list_element_132 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_114, tmp_args_element_value_125);
                    Py_DECREF(tmp_args_element_value_125);
                    if (tmp_list_element_132 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1694;

                        goto list_build_exception_117;
                    }
                    PyList_SET_ITEM(tmp_dict_value_120, 7, tmp_list_element_132);
                }
                goto list_build_noexception_117;
                // Exception handling pass through code for list_build:
                list_build_exception_117:;
                Py_DECREF(tmp_dict_value_120);
                goto dict_build_exception_120;
                // Finished with no exception for list_build:
                list_build_noexception_117:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_120, tmp_dict_value_120);
                Py_DECREF(tmp_dict_value_120);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_119;
            // Exception handling pass through code for dict_build:
            dict_build_exception_120:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_119:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[371];
            tmp_dict_key_121 = mod_consts[255];
            tmp_dict_value_121 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_121 == NULL)) {
                tmp_dict_value_121 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_121 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1701;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_133;
                PyObject *tmp_called_value_115;
                PyObject *tmp_args_element_value_126;
                PyObject *tmp_expression_value_383;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_121, tmp_dict_value_121);
                assert(!(tmp_res != 0));
                tmp_dict_key_121 = mod_consts[253];
                tmp_dict_value_121 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

                if (unlikely(tmp_dict_value_121 == NULL)) {
                    tmp_dict_value_121 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
                }

                if (tmp_dict_value_121 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1702;

                    goto dict_build_exception_121;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_121, tmp_dict_value_121);
                assert(!(tmp_res != 0));
                tmp_dict_key_121 = mod_consts[254];
                tmp_called_value_115 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                if (unlikely(tmp_called_value_115 == NULL)) {
                    tmp_called_value_115 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                }

                if (tmp_called_value_115 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1704;

                    goto dict_build_exception_121;
                }
                tmp_expression_value_383 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                if (unlikely(tmp_expression_value_383 == NULL)) {
                    tmp_expression_value_383 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                }

                if (tmp_expression_value_383 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1704;

                    goto dict_build_exception_121;
                }
                tmp_args_element_value_126 = LOOKUP_ATTRIBUTE(tmp_expression_value_383, mod_consts[84]);
                if (tmp_args_element_value_126 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1704;

                    goto dict_build_exception_121;
                }
                frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1704;
                tmp_list_element_133 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_115, tmp_args_element_value_126);
                Py_DECREF(tmp_args_element_value_126);
                if (tmp_list_element_133 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1704;

                    goto dict_build_exception_121;
                }
                tmp_dict_value_121 = PyList_New(1);
                PyList_SET_ITEM(tmp_dict_value_121, 0, tmp_list_element_133);
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_121, tmp_dict_value_121);
                Py_DECREF(tmp_dict_value_121);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_120;
            // Exception handling pass through code for dict_build:
            dict_build_exception_121:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_120:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[372];
            tmp_dict_key_122 = mod_consts[255];
            tmp_dict_value_122 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[251]);

            if (unlikely(tmp_dict_value_122 == NULL)) {
                tmp_dict_value_122 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[251]);
            }

            if (tmp_dict_value_122 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1718;

                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_list_element_134;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_122, tmp_dict_value_122);
                assert(!(tmp_res != 0));
                tmp_dict_key_122 = mod_consts[253];
                tmp_dict_value_122 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[42]);

                if (unlikely(tmp_dict_value_122 == NULL)) {
                    tmp_dict_value_122 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[42]);
                }

                if (tmp_dict_value_122 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1719;

                    goto dict_build_exception_122;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_122, tmp_dict_value_122);
                assert(!(tmp_res != 0));
                tmp_dict_key_122 = mod_consts[254];
                tmp_list_element_134 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[65]);

                if (unlikely(tmp_list_element_134 == NULL)) {
                    tmp_list_element_134 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[65]);
                }

                if (tmp_list_element_134 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1721;

                    goto dict_build_exception_122;
                }
                tmp_dict_value_122 = PyList_New(6);
                {
                    PyObject *tmp_called_value_116;
                    PyObject *tmp_args_element_value_127;
                    PyObject *tmp_called_value_117;
                    PyObject *tmp_args_element_value_128;
                    PyObject *tmp_expression_value_384;
                    PyList_SET_ITEM0(tmp_dict_value_122, 0, tmp_list_element_134);
                    tmp_called_value_116 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_116 == NULL)) {
                        tmp_called_value_116 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_116 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1722;

                        goto list_build_exception_118;
                    }
                    tmp_args_element_value_127 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[220]);

                    if (unlikely(tmp_args_element_value_127 == NULL)) {
                        tmp_args_element_value_127 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[220]);
                    }

                    if (tmp_args_element_value_127 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1722;

                        goto list_build_exception_118;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1722;
                    tmp_list_element_134 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_116, tmp_args_element_value_127);
                    if (tmp_list_element_134 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1722;

                        goto list_build_exception_118;
                    }
                    PyList_SET_ITEM(tmp_dict_value_122, 1, tmp_list_element_134);
                    tmp_called_value_117 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[38]);

                    if (unlikely(tmp_called_value_117 == NULL)) {
                        tmp_called_value_117 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[38]);
                    }

                    if (tmp_called_value_117 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1723;

                        goto list_build_exception_118;
                    }
                    tmp_args_element_value_128 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[177]);

                    if (unlikely(tmp_args_element_value_128 == NULL)) {
                        tmp_args_element_value_128 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[177]);
                    }

                    if (tmp_args_element_value_128 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1723;

                        goto list_build_exception_118;
                    }
                    frame_277c99bb5820295c4a793963c6d9675f->m_frame.f_lineno = 1723;
                    tmp_list_element_134 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_117, tmp_args_element_value_128);
                    if (tmp_list_element_134 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1723;

                        goto list_build_exception_118;
                    }
                    PyList_SET_ITEM(tmp_dict_value_122, 2, tmp_list_element_134);
                    tmp_expression_value_384 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[28]);

                    if (unlikely(tmp_expression_value_384 == NULL)) {
                        tmp_expression_value_384 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[28]);
                    }

                    if (tmp_expression_value_384 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1724;

                        goto list_build_exception_118;
                    }
                    tmp_list_element_134 = LOOKUP_ATTRIBUTE(tmp_expression_value_384, mod_consts[84]);
                    if (tmp_list_element_134 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1724;

                        goto list_build_exception_118;
                    }
                    PyList_SET_ITEM(tmp_dict_value_122, 3, tmp_list_element_134);
                    tmp_list_element_134 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[59]);

                    if (unlikely(tmp_list_element_134 == NULL)) {
                        tmp_list_element_134 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[59]);
                    }

                    if (tmp_list_element_134 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1725;

                        goto list_build_exception_118;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_122, 4, tmp_list_element_134);
                    tmp_list_element_134 = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[213]);

                    if (unlikely(tmp_list_element_134 == NULL)) {
                        tmp_list_element_134 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[213]);
                    }

                    if (tmp_list_element_134 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1726;

                        goto list_build_exception_118;
                    }
                    PyList_SET_ITEM0(tmp_dict_value_122, 5, tmp_list_element_134);
                }
                goto list_build_noexception_118;
                // Exception handling pass through code for list_build:
                list_build_exception_118:;
                Py_DECREF(tmp_dict_value_122);
                goto dict_build_exception_122;
                // Finished with no exception for list_build:
                list_build_noexception_118:;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_122, tmp_dict_value_122);
                Py_DECREF(tmp_dict_value_122);
                assert(!(tmp_res != 0));
            }
            goto dict_build_noexception_121;
            // Exception handling pass through code for dict_build:
            dict_build_exception_122:;
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_121:;
            tmp_res = PyDict_SetItem(tmp_assign_source_229, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
        }
        goto dict_build_noexception_122;
        // Exception handling pass through code for dict_build:
        dict_build_exception_2:;
        Py_DECREF(tmp_assign_source_229);
        goto frame_exception_exit_1;
        // Finished with no exception for dict_build:
        dict_build_noexception_122:;
        UPDATE_STRING_DICT1(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)mod_consts[373], tmp_assign_source_229);
    }

    // Restore frame exception if necessary.
#if 0
    RESTORE_FRAME_EXCEPTION(frame_277c99bb5820295c4a793963c6d9675f);
#endif
    popFrameStack();

    assertFrameObject(frame_277c99bb5820295c4a793963c6d9675f);

    goto frame_no_exception_16;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_277c99bb5820295c4a793963c6d9675f);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_277c99bb5820295c4a793963c6d9675f, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_277c99bb5820295c4a793963c6d9675f->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_277c99bb5820295c4a793963c6d9675f, exception_lineno);
    }

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto module_exception_exit;

    frame_no_exception_16:;

    // Report to PGO about leaving the module without error.
    PGO_onModuleExit("numba.roc.hsadrv.drvapi", false);

    Py_INCREF(module_numba$roc$hsadrv$drvapi);
    return module_numba$roc$hsadrv$drvapi;
    module_exception_exit:

#if defined(_NUITKA_MODULE) && 0
    {
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_numba$roc$hsadrv$drvapi, (Nuitka_StringObject *)const_str_plain___name__);

        if (module_name != NULL) {
            Nuitka_DelModule(module_name);
        }
    }
#endif
    PGO_onModuleExit("numba$roc$hsadrv$drvapi", false);

    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);
    return NULL;
}
