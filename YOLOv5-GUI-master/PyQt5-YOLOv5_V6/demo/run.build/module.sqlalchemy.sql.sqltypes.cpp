/* Generated code for Python module 'sqlalchemy.sql.sqltypes'
 * created by Nuitka version 0.9.6
 *
 * This code is in part copyright 2022 Kay Hayen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "nuitka/prelude.h"

#include "nuitka/unfreezing.h"

#include "__helpers.h"

/* The "module_sqlalchemy$sql$sqltypes" is a Python object pointer of module type.
 *
 * Note: For full compatibility with CPython, every module variable access
 * needs to go through it except for cases where the module cannot possibly
 * have changed in the mean time.
 */

PyObject *module_sqlalchemy$sql$sqltypes;
PyDictObject *moduledict_sqlalchemy$sql$sqltypes;

/* The declarations of module constants used, if any. */
static PyObject *mod_consts[826];
#ifndef __NUITKA_NO_ASSERT__
static Py_hash_t mod_consts_hash[826];
#endif

static PyObject *module_filename_obj = NULL;

/* Indicator if this modules private constants were created yet. */
static bool constants_created = false;

/* Function to create module private constants. */
static void createModuleConstants(void) {
    if (constants_created == false) {
        loadConstantsBlob(&mod_consts[0], UNTRANSLATE("sqlalchemy.sql.sqltypes"));
        constants_created = true;

#ifndef __NUITKA_NO_ASSERT__
        for (int i = 0; i < 826; i++) {
            mod_consts_hash[i] = DEEP_HASH(mod_consts[i]);
        }
#endif
    }
}

// We want to be able to initialize the "__main__" constants in any case.
#if 0
void createMainModuleConstants(void) {
    createModuleConstants();
}
#endif

/* Function to verify module private constants for non-corruption. */
#ifndef __NUITKA_NO_ASSERT__
void checkModuleConstants_sqlalchemy$sql$sqltypes(void) {
    // The module may not have been used at all, then ignore this.
    if (constants_created == false) return;

    for (int i = 0; i < 826; i++) {
        assert(mod_consts_hash[i] == DEEP_HASH(mod_consts[i]));
        CHECK_OBJECT_DEEP(mod_consts[i]);
    }
}
#endif

// The module code objects.
static PyCodeObject *codeobj_52990c99d3fe223e9a30245c73cd264b;
static PyCodeObject *codeobj_9662ba4a8a84a796883078580961343b;
static PyCodeObject *codeobj_b7d202c1addf4327c46048ea2c7e0c61;
static PyCodeObject *codeobj_710839dc2352d5736e91d4b9f559d9ef;
static PyCodeObject *codeobj_369d7ea6640ba71a1b5df134a8ede170;
static PyCodeObject *codeobj_d8df478d7eb23f028e26024736594ee7;
static PyCodeObject *codeobj_bbb3be16f4c3f03b451ed3e5919b1208;
static PyCodeObject *codeobj_5d289192711717ac19f9183b5f5570bf;
static PyCodeObject *codeobj_5e93e047ae7af10f6f94f90bef907808;
static PyCodeObject *codeobj_6f85b81963dc03c6b2ae53a00c99188c;
static PyCodeObject *codeobj_f8682397177685371c8f52cc512db74c;
static PyCodeObject *codeobj_11372eb91ef81f59b652ae05db762417;
static PyCodeObject *codeobj_d668942271df1e498746e83d8bf29e1b;
static PyCodeObject *codeobj_8f75080c4c2caf8a9ab8abd490624ae2;
static PyCodeObject *codeobj_6563461654eab3bb951d2dca64352b29;
static PyCodeObject *codeobj_95a105e5d6aa6c3fbd0de03ca55d5e46;
static PyCodeObject *codeobj_5d739de253f397ad2ea22421f2a9365e;
static PyCodeObject *codeobj_47df8abc3d23b00fcd91fa61a0194987;
static PyCodeObject *codeobj_1fd8f5d3c9f7675388c71848c1c3421a;
static PyCodeObject *codeobj_86a9c51331c0e47ed38f7ce3dcb5063a;
static PyCodeObject *codeobj_a913f0a54f81b0786bbcb5c29ee1e419;
static PyCodeObject *codeobj_62f34b6062830150f94f3a0bd71c80cd;
static PyCodeObject *codeobj_0c57d08b3724afe532570ab704c94d5a;
static PyCodeObject *codeobj_129b20ad960823b391a75d7794993936;
static PyCodeObject *codeobj_5858186fe4da6c516b126118950eae79;
static PyCodeObject *codeobj_dd47fc159209508319eddb5261464e6a;
static PyCodeObject *codeobj_67e104d0232080aa9715957b74205b33;
static PyCodeObject *codeobj_271325c457b6cdc40b0289048d183222;
static PyCodeObject *codeobj_6402f99f19d16661ce6b6f1f95cc77c4;
static PyCodeObject *codeobj_d3594aa6be3e4a70feb8b430ec85c886;
static PyCodeObject *codeobj_6af9a04e749f91af9f73eb6ffafb083e;
static PyCodeObject *codeobj_6a81b4411b72f8ba12a040659a794727;
static PyCodeObject *codeobj_346c980003d55fba9469461bcf621539;
static PyCodeObject *codeobj_359a6b31ccc171975e0deef2d02d0d82;
static PyCodeObject *codeobj_d4a26a0482d921abe3cdbc3568d8027f;
static PyCodeObject *codeobj_57d2ef71cbf357887920bccd62d12f03;
static PyCodeObject *codeobj_954e881c467d99e18659617377121c4b;
static PyCodeObject *codeobj_fefa8d4f1568f2058ed31d49ec673b09;
static PyCodeObject *codeobj_66ffa44e35a8a176d73667e21cf9bebf;
static PyCodeObject *codeobj_8a4e565f357d6055f4c0b5024adbf69f;
static PyCodeObject *codeobj_20e5239b46284e37f44cef9cc19db9db;
static PyCodeObject *codeobj_21273c79242de84175540b11c03729d1;
static PyCodeObject *codeobj_9444700615de766c07ab9b2e36f34908;
static PyCodeObject *codeobj_a7c1a7f513bbab818d3e3feeeb031df3;
static PyCodeObject *codeobj_079584d29ba204c8c42e5632d36367e0;
static PyCodeObject *codeobj_1edc8a06b5cf424963435a420881e56d;
static PyCodeObject *codeobj_91c720b149aa182de30f187d353d5fe1;
static PyCodeObject *codeobj_92c838af8031dc4aabf281f989df2263;
static PyCodeObject *codeobj_7b206f3a6494ba4343eb418408a70f2c;
static PyCodeObject *codeobj_e299163180ce2dbf407f9be39be4d965;
static PyCodeObject *codeobj_fb92ac5fa6e748da5337a2580ce7460f;
static PyCodeObject *codeobj_7a8219d4d6fa314a7b423b4da3c16504;
static PyCodeObject *codeobj_8df3a086079671e7c39d78ec3a51356a;
static PyCodeObject *codeobj_15c8c8b15bc55ad5757ef7c875079e87;
static PyCodeObject *codeobj_1d7fb75628949076e1e7791a7f180241;
static PyCodeObject *codeobj_9ed1c41dd3bbf10a08851a8fa95ad26d;
static PyCodeObject *codeobj_835290d5fa19bfe44dae7be164462f32;
static PyCodeObject *codeobj_2689a9b3a13f6ecb6924457b477eb87f;
static PyCodeObject *codeobj_8903c4a3d33544d3921ce0ac2ff35885;
static PyCodeObject *codeobj_33b35e3605fbee533bbcddb617405a17;
static PyCodeObject *codeobj_1cba04e9296337f0e8797e70d0bc03c8;
static PyCodeObject *codeobj_0750143555959753a924ef7d0a5bfde8;
static PyCodeObject *codeobj_edd1ad7a4a448a44712386309b66849f;
static PyCodeObject *codeobj_a47461af6a6a5feab30dc1362277f50c;
static PyCodeObject *codeobj_f6152c17500efff202cce07f22b56f12;
static PyCodeObject *codeobj_4aacf380a58948d6c3d3dd7b7bc1a643;
static PyCodeObject *codeobj_61455f2f5f4a7f37b222ffc578ee75d1;
static PyCodeObject *codeobj_ad31cca6ac3b51f7b040f743cbbda453;
static PyCodeObject *codeobj_51654e74df76627f13ae9c2a2ea727c1;
static PyCodeObject *codeobj_697faab2681508b3798a98b9058765c8;
static PyCodeObject *codeobj_394bac202f9a68f7a19b92e945c22056;
static PyCodeObject *codeobj_b2c0d81d602498657431b7d36cb611a8;
static PyCodeObject *codeobj_2d58f2d4625ac7878ff3544d5422428b;
static PyCodeObject *codeobj_4fa1541da2e5544116ce9c61af4c7589;
static PyCodeObject *codeobj_da4886736b8a5372b7d4e4b67f076065;
static PyCodeObject *codeobj_e4ffc89c424ffae204eee7e128817de9;
static PyCodeObject *codeobj_7d27396219160c20eb32d0e52d1cbc7b;
static PyCodeObject *codeobj_64489e8438dad652f740f8de8258ba14;
static PyCodeObject *codeobj_2cbcfcdd5f5e2fcd9e0fd6ec8f725ecc;
static PyCodeObject *codeobj_c19b681fc6b6f3bec99c4da113c175cc;
static PyCodeObject *codeobj_2b86c7165651569226a4ff1aeee473ea;
static PyCodeObject *codeobj_21f9212f45d6cbdb4082180fb62f0ff4;
static PyCodeObject *codeobj_9b94820dde9ae1619590d189944705ab;
static PyCodeObject *codeobj_93bd1b5dde42351f2cc97d3dfe3d4028;
static PyCodeObject *codeobj_51110ecc8f24b34da8af942e7e7c2f3f;
static PyCodeObject *codeobj_a67b7bcb220e71ddb0aa4a7f9ca70c58;
static PyCodeObject *codeobj_32af4388d65bb38b854f470572060b5c;
static PyCodeObject *codeobj_32401629046c0569afb5e84ea376a75d;
static PyCodeObject *codeobj_3a3349635ec550d42656800d62fe557c;
static PyCodeObject *codeobj_9e45727e74315d64c429ad65bc142e05;
static PyCodeObject *codeobj_52bef6c65aa0ebe73e3b3a1af2374252;
static PyCodeObject *codeobj_35db4acbd81c58a447a779e82586ae91;
static PyCodeObject *codeobj_5fea2d0a13180650d03edcb1be2ec25a;
static PyCodeObject *codeobj_9531191c57440301d6fe173eea3ed4a2;
static PyCodeObject *codeobj_175ab3d6f152360f198aa0f400f51963;
static PyCodeObject *codeobj_7d0d935729b36d094bbd555e9b47d2a4;
static PyCodeObject *codeobj_2bf8083789a52456cc5d1f2f334f077a;
static PyCodeObject *codeobj_68c9024274b1dc9263d94050118bad2a;
static PyCodeObject *codeobj_4f3b38aed9d46df7c5f79083f8b39a1c;
static PyCodeObject *codeobj_d878efcc110e7dc34a2229eb2531c29b;
static PyCodeObject *codeobj_f414018bdc3f452738c5a6158d1580ca;
static PyCodeObject *codeobj_628cb3a07479cec616a7d851fdfcd8f4;
static PyCodeObject *codeobj_936d394a138c62c0070f8e0bbfeb0a9f;
static PyCodeObject *codeobj_6d57f6b83eb64ab1a32aecd7155a9b5b;
static PyCodeObject *codeobj_ca7c095483db54a04856f44ce46345a1;
static PyCodeObject *codeobj_f9aac4d77fb1b95b4b0e78bcad32c2bc;
static PyCodeObject *codeobj_5ef141461848d6bd366ef1806b992337;
static PyCodeObject *codeobj_40abf0db3fdb969e82dccb13bae0b9fe;
static PyCodeObject *codeobj_d2426f7bc495f163f33af1e9581c3942;
static PyCodeObject *codeobj_d7e17d58aba054fac37133b44e76a379;
static PyCodeObject *codeobj_9edba9d640a5664248a1ad2a8c15ea20;
static PyCodeObject *codeobj_16508b3962b4efa5d9d1c826e6716a18;
static PyCodeObject *codeobj_f9850d2f1ed7b54d61515f605f3ef6b1;
static PyCodeObject *codeobj_5bf41b8d00196928b2b3a6ff632a8512;
static PyCodeObject *codeobj_079463e5c509f3aa05c5b3f499427a50;
static PyCodeObject *codeobj_fcc9aa921a21d2d219cc711d5cd95289;
static PyCodeObject *codeobj_e7b0c7bb7c3feca116a78f79da4f3ff2;
static PyCodeObject *codeobj_5642929c27d1565d95c4e766d5e2e1a9;
static PyCodeObject *codeobj_f3fde94ee97be72f9f754c770f4662f0;
static PyCodeObject *codeobj_4032c3dfea19bcd8f7c88283a2719554;
static PyCodeObject *codeobj_8ed18f4e8d0ae2ee0973bc43157c0e2b;
static PyCodeObject *codeobj_e0a68c9cf4ff975f03c94de87ad726a5;
static PyCodeObject *codeobj_98170ba504fa88cccd4e23f59b258463;
static PyCodeObject *codeobj_56f94477688e419f9189db00211c443a;
static PyCodeObject *codeobj_2fe18abc35771a0e7f052b237768acb3;
static PyCodeObject *codeobj_4ffd4726b010892e5058831b7aa44309;
static PyCodeObject *codeobj_b3a1e6aaff693ec3ad0c43ec06639e47;
static PyCodeObject *codeobj_ea706dcc6e194808881a16f7aa1ed6c1;
static PyCodeObject *codeobj_9d7a82f8640ab292d493aadcaea78ccc;
static PyCodeObject *codeobj_d2925d78be011dea340eeb494a6bd467;
static PyCodeObject *codeobj_3d77773966012aba04345bacfce29158;
static PyCodeObject *codeobj_d83a073fe0d4c2933f92991fd7b06aa1;
static PyCodeObject *codeobj_a753e11085ed5c53e0416ffdd76de3a5;
static PyCodeObject *codeobj_f7bcbb04c91cdb79fa9579bb535a5950;
static PyCodeObject *codeobj_50108bbfeeb6db035247c41dd86925b3;
static PyCodeObject *codeobj_93f50b3e2416e30fe5e08326a67bdf7f;
static PyCodeObject *codeobj_900d7e8d229934c609179045dc96cd37;
static PyCodeObject *codeobj_bb490b01efdce5ce06a5d056c467cb0e;
static PyCodeObject *codeobj_316ead9e8eef23411cca05facc04d131;
static PyCodeObject *codeobj_d6c2189e8d8ddb8218d9095cd81d1826;
static PyCodeObject *codeobj_6fd982c4f965f315b319c69ddc5bb056;
static PyCodeObject *codeobj_110b2519219ff1ad5f5bf55af6c317e0;
static PyCodeObject *codeobj_81bc495459da7a35f1e1139afa7d5da8;
static PyCodeObject *codeobj_c2b905ea7623bb19793972c6e80cd636;
static PyCodeObject *codeobj_297628ca1575a9b2bb8e8a867f132882;
static PyCodeObject *codeobj_869ef4d1b9431aba84fee71430c018c5;
static PyCodeObject *codeobj_11006c39680b562e97db1cca598b4175;
static PyCodeObject *codeobj_7b9907040ed376eb8922a1e4d91f706e;
static PyCodeObject *codeobj_0ce3e2965ab607e9de338028eb14df8b;
static PyCodeObject *codeobj_38172979e7c72747fd6e0826ee4f4238;
static PyCodeObject *codeobj_ce6b71a74edb04e90997815ade78abf4;
static PyCodeObject *codeobj_900383480205fc1c720bc61c0ed6566d;
static PyCodeObject *codeobj_7d07039ef161c516955860313b970433;
static PyCodeObject *codeobj_92afc2cd8d359ac5ceb82d4f2266314c;
static PyCodeObject *codeobj_a2871293caed309651ea4a744447c14b;
static PyCodeObject *codeobj_19f7812994aeaf50575de802808c1910;
static PyCodeObject *codeobj_8dec9bf35a3d35a9a08cd3ac5d62091b;
static PyCodeObject *codeobj_d602dea3fafc7887a40c46ff4868cc37;
static PyCodeObject *codeobj_dd136002a7b1d65c393838c253df1571;
static PyCodeObject *codeobj_e50570ddb5d241e469c85d33b14f06a7;
static PyCodeObject *codeobj_5dc23e3c611a3907031273184fb1177f;
static PyCodeObject *codeobj_631718d8db30c776f185afbe18b6d8e3;
static PyCodeObject *codeobj_e16e5e50ea2e711f8cc87e563ecd9dc0;
static PyCodeObject *codeobj_db9ff17a464d992a5a6416cb07c39126;
static PyCodeObject *codeobj_73aa4383e90c67b2095c8cf4b55b97a6;
static PyCodeObject *codeobj_365a69ad8eb3d66979a38a5e638934a8;
static PyCodeObject *codeobj_7fcc8dd077b03a724bfa811103a25c0c;
static PyCodeObject *codeobj_a444f75fdfcac1f36d21d335b140f215;
static PyCodeObject *codeobj_358590c8faefc21cbc031397837c2c5a;
static PyCodeObject *codeobj_8b010af3c4cec60845c9798f15a9e9c1;
static PyCodeObject *codeobj_65269d50c8427a1405f2cc27af6fa453;
static PyCodeObject *codeobj_51f690878161021e112c7a30b155f739;
static PyCodeObject *codeobj_a8d5175f36cbc474b0daf68ecfd3ed5d;
static PyCodeObject *codeobj_5130bb61216b451d0eb1f14864720cad;
static PyCodeObject *codeobj_cebebc8fdf1b5b7034c3ebe5c05b2b33;
static PyCodeObject *codeobj_d4c81abf6a43866a0767f93fe917f8f9;
static PyCodeObject *codeobj_b36711c2963cf141646b9c711e21ccf6;
static PyCodeObject *codeobj_a7b57745929293a4180b06fbafb0e794;
static PyCodeObject *codeobj_d46eb5e851689f39d42df9005a5bccab;
static PyCodeObject *codeobj_09fd947af5ae5ee2537e1e3c83e1c5c2;
static PyCodeObject *codeobj_c36e7994bc212bb5c1b07a12afdd52de;
static PyCodeObject *codeobj_89692ce6656ecf43c2c7e75e2ac32991;
static PyCodeObject *codeobj_9d17a7b500307add96efcef3a367ec57;
static PyCodeObject *codeobj_4c8a56e694f5d15875d2ca208020840b;
static PyCodeObject *codeobj_dc9c90d4e39e91b260ea6725b3645a83;
static PyCodeObject *codeobj_e5e57fd08df72921834834662e50725e;
static PyCodeObject *codeobj_9b2cbb8752b7ee5f04ba8a9c6b65ed1f;
static PyCodeObject *codeobj_721d898bd11a13c19c76e956025de367;
static PyCodeObject *codeobj_040968a2f49c9a024ff8b7ebca05e479;
static PyCodeObject *codeobj_180a86d96068098c506a7ad191e7fe62;
static PyCodeObject *codeobj_e25634e3711c6b5cb1101160ca5f64c8;
static PyCodeObject *codeobj_d4cce7be2c6d61e939ff8f1737aebd5f;
static PyCodeObject *codeobj_3d11807b5a58354e263d81c58bcef810;
static PyCodeObject *codeobj_4059fcd1cafd84c042c9e6346852cb49;
static PyCodeObject *codeobj_d7365d3affe70e314de644a6f13c58c8;
static PyCodeObject *codeobj_9e189f814f4382329c3f44ef4bcf122f;
static PyCodeObject *codeobj_8b4d492b04debbbf1882680dd19ce299;
static PyCodeObject *codeobj_d6dee81af77776b48bf2d4db1bf6e30b;
static PyCodeObject *codeobj_cfec1619bd0b3b489d79dedee5c04bef;
static PyCodeObject *codeobj_8eeafd0a23a514f068dca3b32200ad71;
static PyCodeObject *codeobj_d15f2af2d97d3af049beb49dcfb9a55e;
static PyCodeObject *codeobj_4def468570d1a6b0955db33a856f684f;
static PyCodeObject *codeobj_09bc773089160ae25520ee75955ab821;
static PyCodeObject *codeobj_e7cef0473820344c14b6f8d33e4175a2;
static PyCodeObject *codeobj_66456ce309790c2214ab611d32d52f5b;
static PyCodeObject *codeobj_251229f7216f07084fb1cdbb281588b2;
static PyCodeObject *codeobj_2297632e10cffebf22f47d2f8a62432e;
static PyCodeObject *codeobj_1517404864390463d00b2823a600abfd;
static PyCodeObject *codeobj_e07ca732601db60324dcfd936de3c53e;
static PyCodeObject *codeobj_6b9111e982b267f962148ba4387afa38;
static PyCodeObject *codeobj_a3a5549b67da9f53c5b7b693705607d6;
static PyCodeObject *codeobj_5782e8db7cc9b9b09909a8d7c2344ef8;
static PyCodeObject *codeobj_4114bd0ac152e003245e0a5f3c383370;
static PyCodeObject *codeobj_e65bfdb285f2b292b211690ab41ddfe6;
static PyCodeObject *codeobj_ca6015480afd717c6a68e5cd5c83f22b;
static PyCodeObject *codeobj_e75df1520546e1544b8084b31ce6b779;
static PyCodeObject *codeobj_4a98522ce6e4fae80f8ea987181e8c29;
static PyCodeObject *codeobj_1756c05d48e2c2b0e3146e16d7f42efe;
static PyCodeObject *codeobj_724ab77bb3c61d142e9f500149e6a792;
static PyCodeObject *codeobj_b5dc4d7e9c1118009c9e6035626d916f;
static PyCodeObject *codeobj_1b34e3bd40d8681fa037c2b35e766719;
static PyCodeObject *codeobj_1d5640d11aeb82ae763f927b9f5c804a;
static PyCodeObject *codeobj_c5c406697da523074099ecbcf0fe8ffc;
static PyCodeObject *codeobj_cc5d7818e1d16c45d2492e45873c6db2;
static PyCodeObject *codeobj_52849325a34baac4c3d0efb32eccf004;
static PyCodeObject *codeobj_c4437ebcc356d068272586f6f953e6e3;

static void createModuleCodeObjects(void) {
    module_filename_obj = MAKE_RELATIVE_PATH(mod_consts[715]); CHECK_OBJECT(module_filename_obj);
    codeobj_52990c99d3fe223e9a30245c73cd264b = MAKE_CODEOBJECT(module_filename_obj, 1425, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[200], mod_consts[716], mod_consts[717], 1, 0, 0);
    codeobj_9662ba4a8a84a796883078580961343b = MAKE_CODEOBJECT(module_filename_obj, 1466, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[718], mod_consts[719], NULL, 1, 0, 0);
    codeobj_b7d202c1addf4327c46048ea2c7e0c61 = MAKE_CODEOBJECT(module_filename_obj, 1480, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[718], mod_consts[720], NULL, 1, 0, 0);
    codeobj_710839dc2352d5736e91d4b9f559d9ef = MAKE_CODEOBJECT(module_filename_obj, 1, CO_NOFREE, mod_consts[721], NULL, NULL, 0, 0, 0);
    codeobj_369d7ea6640ba71a1b5df134a8ede170 = MAKE_CODEOBJECT(module_filename_obj, 2459, CO_NOFREE, mod_consts[349], mod_consts[717], NULL, 0, 0, 0);
    codeobj_d8df478d7eb23f028e26024736594ee7 = MAKE_CODEOBJECT(module_filename_obj, 2806, CO_NOFREE, mod_consts[670], mod_consts[717], NULL, 0, 0, 0);
    codeobj_bbb3be16f4c3f03b451ed3e5919b1208 = MAKE_CODEOBJECT(module_filename_obj, 2916, CO_NOFREE, mod_consts[122], mod_consts[717], NULL, 0, 0, 0);
    codeobj_5d289192711717ac19f9183b5f5570bf = MAKE_CODEOBJECT(module_filename_obj, 2909, CO_NOFREE, mod_consts[692], mod_consts[717], NULL, 0, 0, 0);
    codeobj_5e93e047ae7af10f6f94f90bef907808 = MAKE_CODEOBJECT(module_filename_obj, 2930, CO_NOFREE, mod_consts[697], mod_consts[717], NULL, 0, 0, 0);
    codeobj_6f85b81963dc03c6b2ae53a00c99188c = MAKE_CODEOBJECT(module_filename_obj, 512, CO_NOFREE, mod_consts[472], mod_consts[717], NULL, 0, 0, 0);
    codeobj_f8682397177685371c8f52cc512db74c = MAKE_CODEOBJECT(module_filename_obj, 992, CO_NOFREE, mod_consts[110], mod_consts[717], NULL, 0, 0, 0);
    codeobj_11372eb91ef81f59b652ae05db762417 = MAKE_CODEOBJECT(module_filename_obj, 1741, CO_NOFREE, mod_consts[297], mod_consts[717], NULL, 0, 0, 0);
    codeobj_d668942271df1e498746e83d8bf29e1b = MAKE_CODEOBJECT(module_filename_obj, 2895, CO_NOFREE, mod_consts[688], mod_consts[717], NULL, 0, 0, 0);
    codeobj_8f75080c4c2caf8a9ab8abd490624ae2 = MAKE_CODEOBJECT(module_filename_obj, 2871, CO_NOFREE, mod_consts[682], mod_consts[717], NULL, 0, 0, 0);
    codeobj_6563461654eab3bb951d2dca64352b29 = MAKE_CODEOBJECT(module_filename_obj, 61, CO_NOFREE, mod_consts[9], mod_consts[717], NULL, 0, 0, 0);
    codeobj_95a105e5d6aa6c3fbd0de03ca55d5e46 = MAKE_CODEOBJECT(module_filename_obj, 84, CO_NOFREE, mod_consts[9], mod_consts[717], NULL, 0, 0, 0);
    codeobj_5d739de253f397ad2ea22421f2a9365e = MAKE_CODEOBJECT(module_filename_obj, 109, CO_NOFREE, mod_consts[9], mod_consts[717], NULL, 0, 0, 0);
    codeobj_47df8abc3d23b00fcd91fa61a0194987 = MAKE_CODEOBJECT(module_filename_obj, 1527, CO_NOFREE, mod_consts[9], mod_consts[717], NULL, 0, 0, 0);
    codeobj_1fd8f5d3c9f7675388c71848c1c3421a = MAKE_CODEOBJECT(module_filename_obj, 2284, CO_NOFREE, mod_consts[9], mod_consts[717], NULL, 0, 0, 0);
    codeobj_86a9c51331c0e47ed38f7ce3dcb5063a = MAKE_CODEOBJECT(module_filename_obj, 2559, CO_NOFREE, mod_consts[9], mod_consts[717], NULL, 0, 0, 0);
    codeobj_a913f0a54f81b0786bbcb5c29ee1e419 = MAKE_CODEOBJECT(module_filename_obj, 2976, CO_NOFREE, mod_consts[9], mod_consts[717], NULL, 0, 0, 0);
    codeobj_62f34b6062830150f94f3a0bd71c80cd = MAKE_CODEOBJECT(module_filename_obj, 79, CO_NOFREE, mod_consts[8], mod_consts[717], NULL, 0, 0, 0);
    codeobj_0c57d08b3724afe532570ab704c94d5a = MAKE_CODEOBJECT(module_filename_obj, 2850, CO_NOFREE, mod_consts[676], mod_consts[717], NULL, 0, 0, 0);
    codeobj_129b20ad960823b391a75d7794993936 = MAKE_CODEOBJECT(module_filename_obj, 2843, CO_NOFREE, mod_consts[100], mod_consts[717], NULL, 0, 0, 0);
    codeobj_5858186fe4da6c516b126118950eae79 = MAKE_CODEOBJECT(module_filename_obj, 2782, CO_NOFREE, mod_consts[663], mod_consts[717], NULL, 0, 0, 0);
    codeobj_dd47fc159209508319eddb5261464e6a = MAKE_CODEOBJECT(module_filename_obj, 822, CO_NOFREE, mod_consts[72], mod_consts[717], NULL, 0, 0, 0);
    codeobj_67e104d0232080aa9715957b74205b33 = MAKE_CODEOBJECT(module_filename_obj, 767, CO_NOFREE, mod_consts[103], mod_consts[717], NULL, 0, 0, 0);
    codeobj_271325c457b6cdc40b0289048d183222 = MAKE_CODEOBJECT(module_filename_obj, 1191, CO_NOFREE, mod_consts[188], mod_consts[717], NULL, 0, 0, 0);
    codeobj_6402f99f19d16661ce6b6f1f95cc77c4 = MAKE_CODEOBJECT(module_filename_obj, 2768, CO_NOFREE, mod_consts[659], mod_consts[717], NULL, 0, 0, 0);
    codeobj_d3594aa6be3e4a70feb8b430ec85c886 = MAKE_CODEOBJECT(module_filename_obj, 702, CO_NOFREE, mod_consts[304], mod_consts[717], NULL, 0, 0, 0);
    codeobj_6af9a04e749f91af9f73eb6ffafb083e = MAKE_CODEOBJECT(module_filename_obj, 2789, CO_NOFREE, mod_consts[665], mod_consts[717], NULL, 0, 0, 0);
    codeobj_6a81b4411b72f8ba12a040659a794727 = MAKE_CODEOBJECT(module_filename_obj, 99, CO_NOFREE, mod_consts[430], mod_consts[717], NULL, 0, 0, 0);
    codeobj_346c980003d55fba9469461bcf621539 = MAKE_CODEOBJECT(module_filename_obj, 460, CO_NOFREE, mod_consts[73], mod_consts[717], NULL, 0, 0, 0);
    codeobj_359a6b31ccc171975e0deef2d02d0d82 = MAKE_CODEOBJECT(module_filename_obj, 1883, CO_NOFREE, mod_consts[76], mod_consts[717], NULL, 0, 0, 0);
    codeobj_d4a26a0482d921abe3cdbc3568d8027f = MAKE_CODEOBJECT(module_filename_obj, 1973, CO_NOFREE, mod_consts[291], mod_consts[717], NULL, 0, 0, 0);
    codeobj_57d2ef71cbf357887920bccd62d12f03 = MAKE_CODEOBJECT(module_filename_obj, 2230, CO_NOFREE, mod_consts[610], mod_consts[717], NULL, 0, 0, 0);
    codeobj_954e881c467d99e18659617377121c4b = MAKE_CODEOBJECT(module_filename_obj, 963, CO_NOFREE, mod_consts[125], mod_consts[717], NULL, 0, 0, 0);
    codeobj_fefa8d4f1568f2058ed31d49ec673b09 = MAKE_CODEOBJECT(module_filename_obj, 2902, CO_NOFREE, mod_consts[690], mod_consts[717], NULL, 0, 0, 0);
    codeobj_66ffa44e35a8a176d73667e21cf9bebf = MAKE_CODEOBJECT(module_filename_obj, 2775, CO_NOFREE, mod_consts[661], mod_consts[717], NULL, 0, 0, 0);
    codeobj_8a4e565f357d6055f4c0b5024adbf69f = MAKE_CODEOBJECT(module_filename_obj, 2888, CO_NOFREE, mod_consts[686], mod_consts[717], NULL, 0, 0, 0);
    codeobj_20e5239b46284e37f44cef9cc19db9db = MAKE_CODEOBJECT(module_filename_obj, 2937, CO_NOFREE, mod_consts[10], mod_consts[717], NULL, 0, 0, 0);
    codeobj_21273c79242de84175540b11c03729d1 = MAKE_CODEOBJECT(module_filename_obj, 524, CO_NOFREE, mod_consts[74], mod_consts[717], NULL, 0, 0, 0);
    codeobj_9444700615de766c07ab9b2e36f34908 = MAKE_CODEOBJECT(module_filename_obj, 1654, CO_NOFREE, mod_consts[241], mod_consts[717], NULL, 0, 0, 0);
    codeobj_a7c1a7f513bbab818d3e3feeeb031df3 = MAKE_CODEOBJECT(module_filename_obj, 2761, CO_NOFREE, mod_consts[657], mod_consts[717], NULL, 0, 0, 0);
    codeobj_079584d29ba204c8c42e5632d36367e0 = MAKE_CODEOBJECT(module_filename_obj, 2799, CO_NOFREE, mod_consts[668], mod_consts[717], NULL, 0, 0, 0);
    codeobj_1edc8a06b5cf424963435a420881e56d = MAKE_CODEOBJECT(module_filename_obj, 997, CO_NOFREE, mod_consts[157], mod_consts[717], NULL, 0, 0, 0);
    codeobj_91c720b149aa182de30f187d353d5fe1 = MAKE_CODEOBJECT(module_filename_obj, 500, CO_NOFREE, mod_consts[469], mod_consts[717], NULL, 0, 0, 0);
    codeobj_92c838af8031dc4aabf281f989df2263 = MAKE_CODEOBJECT(module_filename_obj, 126, CO_NOFREE, mod_consts[215], mod_consts[717], NULL, 0, 0, 0);
    codeobj_7b206f3a6494ba4343eb418408a70f2c = MAKE_CODEOBJECT(module_filename_obj, 2864, CO_NOFREE, mod_consts[680], mod_consts[717], NULL, 0, 0, 0);
    codeobj_e299163180ce2dbf407f9be39be4d965 = MAKE_CODEOBJECT(module_filename_obj, 2857, CO_NOFREE, mod_consts[678], mod_consts[717], NULL, 0, 0, 0);
    codeobj_fb92ac5fa6e748da5337a2580ce7460f = MAKE_CODEOBJECT(module_filename_obj, 2813, CO_NOFREE, mod_consts[357], mod_consts[717], NULL, 0, 0, 0);
    codeobj_7a8219d4d6fa314a7b423b4da3c16504 = MAKE_CODEOBJECT(module_filename_obj, 341, CO_NOFREE, mod_consts[452], mod_consts[717], NULL, 0, 0, 0);
    codeobj_8df3a086079671e7c39d78ec3a51356a = MAKE_CODEOBJECT(module_filename_obj, 860, CO_NOFREE, mod_consts[105], mod_consts[717], NULL, 0, 0, 0);
    codeobj_15c8c8b15bc55ad5757ef7c875079e87 = MAKE_CODEOBJECT(module_filename_obj, 356, CO_NOFREE, mod_consts[65], mod_consts[717], NULL, 0, 0, 0);
    codeobj_1d7fb75628949076e1e7791a7f180241 = MAKE_CODEOBJECT(module_filename_obj, 428, CO_NOFREE, mod_consts[68], mod_consts[717], NULL, 0, 0, 0);
    codeobj_9ed1c41dd3bbf10a08851a8fa95ad26d = MAKE_CODEOBJECT(module_filename_obj, 2923, CO_NOFREE, mod_consts[695], mod_consts[717], NULL, 0, 0, 0);
    codeobj_835290d5fa19bfe44dae7be164462f32 = MAKE_CODEOBJECT(module_filename_obj, 2881, CO_NOFREE, mod_consts[684], mod_consts[717], NULL, 0, 0, 0);
    codeobj_2689a9b3a13f6ecb6924457b477eb87f = MAKE_CODEOBJECT(module_filename_obj, 1855, CO_NOFREE, mod_consts[271], mod_consts[717], NULL, 0, 0, 0);
    codeobj_8903c4a3d33544d3921ce0ac2ff35885 = MAKE_CODEOBJECT(module_filename_obj, 887, CO_NOFREE, mod_consts[119], mod_consts[717], NULL, 0, 0, 0);
    codeobj_33b35e3605fbee533bbcddb617405a17 = MAKE_CODEOBJECT(module_filename_obj, 48, CO_NOFREE, mod_consts[412], mod_consts[717], NULL, 0, 0, 0);
    codeobj_1cba04e9296337f0e8797e70d0bc03c8 = MAKE_CODEOBJECT(module_filename_obj, 113, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[413], mod_consts[722], NULL, 2, 0, 0);
    codeobj_0750143555959753a924ef7d0a5bfde8 = MAKE_CODEOBJECT(module_filename_obj, 993, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[66], mod_consts[723], NULL, 1, 0, 0);
    codeobj_edd1ad7a4a448a44712386309b66849f = MAKE_CODEOBJECT(module_filename_obj, 1766, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[66], mod_consts[724], NULL, 4, 0, 0);
    codeobj_a47461af6a6a5feab30dc1362277f50c = MAKE_CODEOBJECT(module_filename_obj, 1279, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[66], mod_consts[725], NULL, 1, 0, 0);
    codeobj_f6152c17500efff202cce07f22b56f12 = MAKE_CODEOBJECT(module_filename_obj, 2689, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[66], mod_consts[726], NULL, 5, 0, 0);
    codeobj_4aacf380a58948d6c3d3dd7b7bc1a643 = MAKE_CODEOBJECT(module_filename_obj, 891, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[66], mod_consts[727], NULL, 2, 0, 0);
    codeobj_61455f2f5f4a7f37b222ffc578ee75d1 = MAKE_CODEOBJECT(module_filename_obj, 975, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[66], mod_consts[727], NULL, 2, 0, 0);
    codeobj_ad31cca6ac3b51f7b040f743cbbda453 = MAKE_CODEOBJECT(module_filename_obj, 158, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[66], mod_consts[728], NULL, 7, 0, 0);
    codeobj_51654e74df76627f13ae9c2a2ea727c1 = MAKE_CODEOBJECT(module_filename_obj, 414, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[66], mod_consts[729], NULL, 2, 0, 0);
    codeobj_697faab2681508b3798a98b9058765c8 = MAKE_CODEOBJECT(module_filename_obj, 443, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[66], mod_consts[729], NULL, 2, 0, 0);
    codeobj_394bac202f9a68f7a19b92e945c22056 = MAKE_CODEOBJECT(module_filename_obj, 1020, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[66], mod_consts[730], NULL, 7, 0, 0);
    codeobj_b2c0d81d602498657431b7d36cb611a8 = MAKE_CODEOBJECT(module_filename_obj, 1904, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[66], mod_consts[731], NULL, 4, 0, 0);
    codeobj_2d58f2d4625ac7878ff3544d5422428b = MAKE_CODEOBJECT(module_filename_obj, 2205, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[66], mod_consts[732], NULL, 2, 0, 0);
    codeobj_4fa1541da2e5544116ce9c61af4c7589 = MAKE_CODEOBJECT(module_filename_obj, 727, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[66], mod_consts[733], NULL, 4, 0, 0);
    codeobj_da4886736b8a5372b7d4e4b67f076065 = MAKE_CODEOBJECT(module_filename_obj, 568, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[66], mod_consts[734], NULL, 5, 0, 0);
    codeobj_e4ffc89c424ffae204eee7e128817de9 = MAKE_CODEOBJECT(module_filename_obj, 1669, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[66], mod_consts[735], NULL, 4, 0, 0);
    codeobj_7d27396219160c20eb32d0e52d1cbc7b = MAKE_CODEOBJECT(module_filename_obj, 788, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[66], mod_consts[736], NULL, 2, 0, 0);
    codeobj_64489e8438dad652f740f8de8258ba14 = MAKE_CODEOBJECT(module_filename_obj, 866, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[66], mod_consts[736], NULL, 2, 0, 0);
    codeobj_2cbcfcdd5f5e2fcd9e0fd6ec8f725ecc = MAKE_CODEOBJECT(module_filename_obj, 2826, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[66], mod_consts[737], NULL, 2, 0, 0);
    codeobj_c19b681fc6b6f3bec99c4da113c175cc = MAKE_CODEOBJECT(module_filename_obj, 1691, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[573], mod_consts[738], NULL, 1, 0, 0);
    codeobj_2b86c7165651569226a4ff1aeee473ea = MAKE_CODEOBJECT(module_filename_obj, 1557, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[556], mod_consts[738], NULL, 1, 0, 0);
    codeobj_21f9212f45d6cbdb4082180fb62f0ff4 = MAKE_CODEOBJECT(module_filename_obj, 2977, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[13], mod_consts[739], NULL, 3, 0, 0);
    codeobj_9b94820dde9ae1619590d189944705ab = MAKE_CODEOBJECT(module_filename_obj, 85, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[13], mod_consts[740], NULL, 3, 0, 0);
    codeobj_93bd1b5dde42351f2cc97d3dfe3d4028 = MAKE_CODEOBJECT(module_filename_obj, 64, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[13], mod_consts[741], NULL, 3, 0, 0);
    codeobj_51110ecc8f24b34da8af942e7e7c2f3f = MAKE_CODEOBJECT(module_filename_obj, 1528, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[13], mod_consts[742], NULL, 3, 0, 0);
    codeobj_a67b7bcb220e71ddb0aa4a7f9ca70c58 = MAKE_CODEOBJECT(module_filename_obj, 2390, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[296], mod_consts[743], NULL, 3, 0, 0);
    codeobj_32af4388d65bb38b854f470572060b5c = MAKE_CODEOBJECT(module_filename_obj, 1497, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[208], mod_consts[744], NULL, 2, 0, 0);
    codeobj_32401629046c0569afb5e84ea376a75d = MAKE_CODEOBJECT(module_filename_obj, 625, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[97], mod_consts[738], NULL, 1, 0, 0);
    codeobj_3a3349635ec550d42656800d62fe557c = MAKE_CODEOBJECT(module_filename_obj, 1392, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[165], mod_consts[745], NULL, 3, 0, 0);
    codeobj_9e45727e74315d64c429ad65bc142e05 = MAKE_CODEOBJECT(module_filename_obj, 1386, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[220], mod_consts[738], NULL, 1, 0, 0);
    codeobj_52bef6c65aa0ebe73e3b3a1af2374252 = MAKE_CODEOBJECT(module_filename_obj, 58, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[2], mod_consts[738], NULL, 1, 0, 0);
    codeobj_35db4acbd81c58a447a779e82586ae91 = MAKE_CODEOBJECT(module_filename_obj, 480, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[2], mod_consts[738], NULL, 1, 0, 0);
    codeobj_5fea2d0a13180650d03edcb1be2ec25a = MAKE_CODEOBJECT(module_filename_obj, 685, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[2], mod_consts[738], NULL, 1, 0, 0);
    codeobj_9531191c57440301d6fe173eea3ed4a2 = MAKE_CODEOBJECT(module_filename_obj, 811, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[2], mod_consts[738], NULL, 1, 0, 0);
    codeobj_175ab3d6f152360f198aa0f400f51963 = MAKE_CODEOBJECT(module_filename_obj, 836, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[2], mod_consts[738], NULL, 1, 0, 0);
    codeobj_7d0d935729b36d094bbd555e9b47d2a4 = MAKE_CODEOBJECT(module_filename_obj, 877, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[2], mod_consts[738], NULL, 1, 0, 0);
    codeobj_2bf8083789a52456cc5d1f2f334f077a = MAKE_CODEOBJECT(module_filename_obj, 1857, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[2], mod_consts[738], NULL, 1, 0, 0);
    codeobj_68c9024274b1dc9263d94050118bad2a = MAKE_CODEOBJECT(module_filename_obj, 1177, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[163], mod_consts[746], NULL, 3, 0, 0);
    codeobj_4f3b38aed9d46df7c5f79083f8b39a1c = MAKE_CODEOBJECT(module_filename_obj, 1540, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[235], mod_consts[744], NULL, 2, 0, 0);
    codeobj_d878efcc110e7dc34a2229eb2531c29b = MAKE_CODEOBJECT(module_filename_obj, 1161, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[135], mod_consts[747], NULL, 3, 0, 0);
    codeobj_f414018bdc3f452738c5a6158d1580ca = MAKE_CODEOBJECT(module_filename_obj, 1169, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[137], mod_consts[747], NULL, 3, 0, 0);
    codeobj_628cb3a07479cec616a7d851fdfcd8f4 = MAKE_CODEOBJECT(module_filename_obj, 1145, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[148], mod_consts[747], NULL, 3, 0, 0);
    codeobj_936d394a138c62c0070f8e0bbfeb0a9f = MAKE_CODEOBJECT(module_filename_obj, 1153, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[149], mod_consts[747], NULL, 3, 0, 0);
    codeobj_6d57f6b83eb64ab1a32aecd7155a9b5b = MAKE_CODEOBJECT(module_filename_obj, 1455, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[178], mod_consts[748], NULL, 3, 0, 0);
    codeobj_ca7c095483db54a04856f44ce46345a1 = MAKE_CODEOBJECT(module_filename_obj, 3032, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[713], mod_consts[749], NULL, 1, 0, 0);
    codeobj_f9aac4d77fb1b95b4b0e78bcad32c2bc = MAKE_CODEOBJECT(module_filename_obj, 1053, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[354], mod_consts[750], NULL, 2, 0, 0);
    codeobj_5ef141461848d6bd366ef1806b992337 = MAKE_CODEOBJECT(module_filename_obj, 2746, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[354], mod_consts[750], NULL, 2, 0, 0);
    codeobj_40abf0db3fdb969e82dccb13bae0b9fe = MAKE_CODEOBJECT(module_filename_obj, 2752, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[356], mod_consts[751], NULL, 2, 0, 0);
    codeobj_d2426f7bc495f163f33af1e9581c3942 = MAKE_CODEOBJECT(module_filename_obj, 1064, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[139], mod_consts[752], NULL, 3, 0, 0);
    codeobj_d7e17d58aba054fac37133b44e76a379 = MAKE_CODEOBJECT(module_filename_obj, 1591, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[139], mod_consts[753], NULL, 4, 0, 0);
    codeobj_9edba9d640a5664248a1ad2a8c15ea20 = MAKE_CODEOBJECT(module_filename_obj, 1790, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[139], mod_consts[753], NULL, 4, 0, 0);
    codeobj_16508b3962b4efa5d9d1c826e6716a18 = MAKE_CODEOBJECT(module_filename_obj, 1472, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[180], mod_consts[754], NULL, 4, 0, 0);
    codeobj_f9850d2f1ed7b54d61515f605f3ef6b1 = MAKE_CODEOBJECT(module_filename_obj, 2288, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[14], mod_consts[755], NULL, 3, 0, 0);
    codeobj_5bf41b8d00196928b2b3a6ff632a8512 = MAKE_CODEOBJECT(module_filename_obj, 110, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[14], mod_consts[756], NULL, 2, 0, 0);
    codeobj_079463e5c509f3aa05c5b3f499427a50 = MAKE_CODEOBJECT(module_filename_obj, 2568, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[14], mod_consts[757], NULL, 2, 0, 0);
    codeobj_fcc9aa921a21d2d219cc711d5cd95289 = MAKE_CODEOBJECT(module_filename_obj, 1583, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[226], mod_consts[758], NULL, 2, 0, 0);
    codeobj_e7b0c7bb7c3feca116a78f79da4f3ff2 = MAKE_CODEOBJECT(module_filename_obj, 1781, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[226], mod_consts[758], NULL, 2, 0, 0);
    codeobj_5642929c27d1565d95c4e766d5e2e1a9 = MAKE_CODEOBJECT(module_filename_obj, 2422, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[316], mod_consts[738], NULL, 1, 0, 0);
    codeobj_f3fde94ee97be72f9f754c770f4662f0 = MAKE_CODEOBJECT(module_filename_obj, 1813, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[260], mod_consts[759], NULL, 2, 0, 0);
    codeobj_4032c3dfea19bcd8f7c88283a2719554 = MAKE_CODEOBJECT(module_filename_obj, 1050, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[525], mod_consts[760], NULL, 3, 0, 0);
    codeobj_8ed18f4e8d0ae2ee0973bc43157c0e2b = MAKE_CODEOBJECT(module_filename_obj, 1875, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[1], mod_consts[738], NULL, 1, 0, 0);
    codeobj_e0a68c9cf4ff975f03c94de87ad726a5 = MAKE_CODEOBJECT(module_filename_obj, 1056, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[146], mod_consts[761], NULL, 2, 0, 0);
    codeobj_98170ba504fa88cccd4e23f59b258463 = MAKE_CODEOBJECT(module_filename_obj, 331, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[450], mod_consts[762], NULL, 1, 0, 0);
    codeobj_56f94477688e419f9189db00211c443a = MAKE_CODEOBJECT(module_filename_obj, 456, CO_NOFREE, mod_consts[450], mod_consts[738], NULL, 1, 0, 0);
    codeobj_2fe18abc35771a0e7f052b237768acb3 = MAKE_CODEOBJECT(module_filename_obj, 1579, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[150], mod_consts[763], NULL, 2, 0, 0);
    codeobj_4ffd4726b010892e5058831b7aa44309 = MAKE_CODEOBJECT(module_filename_obj, 1110, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[150], mod_consts[764], NULL, 2, 0, 0);
    codeobj_b3a1e6aaff693ec3ad0c43ec06639e47 = MAKE_CODEOBJECT(module_filename_obj, 1564, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[558], mod_consts[765], NULL, 2, 0, 0);
    codeobj_ea706dcc6e194808881a16f7aa1ed6c1 = MAKE_CODEOBJECT(module_filename_obj, 1930, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[558], mod_consts[765], NULL, 2, 0, 0);
    codeobj_9d7a82f8640ab292d493aadcaea78ccc = MAKE_CODEOBJECT(module_filename_obj, 2649, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[648], mod_consts[766], NULL, 4, 0, 0);
    codeobj_d2925d78be011dea340eeb494a6bd467 = MAKE_CODEOBJECT(module_filename_obj, 2610, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[646], mod_consts[766], NULL, 4, 0, 0);
    codeobj_3d77773966012aba04345bacfce29158 = MAKE_CODEOBJECT(module_filename_obj, 2311, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[298], mod_consts[738], NULL, 1, 0, 0);
    codeobj_d83a073fe0d4c2933f92991fd7b06aa1 = MAKE_CODEOBJECT(module_filename_obj, 2360, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[305], mod_consts[738], NULL, 1, 0, 0);
    codeobj_a753e11085ed5c53e0416ffdd76de3a5 = MAKE_CODEOBJECT(module_filename_obj, 2344, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[302], mod_consts[738], NULL, 1, 0, 0);
    codeobj_f7bcbb04c91cdb79fa9579bb535a5950 = MAKE_CODEOBJECT(module_filename_obj, 2377, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[629], mod_consts[738], NULL, 1, 0, 0);
    codeobj_50108bbfeeb6db035247c41dd86925b3 = MAKE_CODEOBJECT(module_filename_obj, 2327, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[300], mod_consts[738], NULL, 1, 0, 0);
    codeobj_93f50b3e2416e30fe5e08326a67bdf7f = MAKE_CODEOBJECT(module_filename_obj, 1124, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[154], mod_consts[738], NULL, 1, 0, 0);
    codeobj_900d7e8d229934c609179045dc96cd37 = MAKE_CODEOBJECT(module_filename_obj, 649, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[232], mod_consts[767], NULL, 2, 0, 0);
    codeobj_bb490b01efdce5ce06a5d056c467cb0e = MAKE_CODEOBJECT(module_filename_obj, 907, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[232], mod_consts[768], NULL, 2, 0, 0);
    codeobj_316ead9e8eef23411cca05facc04d131 = MAKE_CODEOBJECT(module_filename_obj, 1833, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[232], mod_consts[769], NULL, 2, 0, 0);
    codeobj_d6c2189e8d8ddb8218d9095cd81d1826 = MAKE_CODEOBJECT(module_filename_obj, 1694, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[232], mod_consts[770], NULL, 2, 0, 0);
    codeobj_6fd982c4f965f315b319c69ddc5bb056 = MAKE_CODEOBJECT(module_filename_obj, 1933, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[232], mod_consts[771], NULL, 2, 0, 0);
    codeobj_110b2519219ff1ad5f5bf55af6c317e0 = MAKE_CODEOBJECT(module_filename_obj, 2242, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[232], mod_consts[772], NULL, 2, 0, 0);
    codeobj_81bc495459da7a35f1e1139afa7d5da8 = MAKE_CODEOBJECT(module_filename_obj, 258, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[232], mod_consts[773], NULL, 2, 0, 0);
    codeobj_c2b905ea7623bb19793972c6e80cd636 = MAKE_CODEOBJECT(module_filename_obj, 1621, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[232], mod_consts[774], NULL, 2, 0, 0);
    codeobj_297628ca1575a9b2bb8e8a867f132882 = MAKE_CODEOBJECT(module_filename_obj, 2425, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[232], mod_consts[775], NULL, 2, 0, 0);
    codeobj_869ef4d1b9431aba84fee71430c018c5 = MAKE_CODEOBJECT(module_filename_obj, 1878, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[120], mod_consts[776], NULL, 3, 0, 0);
    codeobj_11006c39680b562e97db1cca598b4175 = MAKE_CODEOBJECT(module_filename_obj, 951, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[120], mod_consts[777], NULL, 3, 0, 0);
    codeobj_7b9907040ed376eb8922a1e4d91f706e = MAKE_CODEOBJECT(module_filename_obj, 1734, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[577], mod_consts[778], NULL, 3, 0, 0);
    codeobj_0ce3e2965ab607e9de338028eb14df8b = MAKE_CODEOBJECT(module_filename_obj, 2743, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[577], mod_consts[778], NULL, 3, 0, 0);
    codeobj_38172979e7c72747fd6e0826ee4f4238 = MAKE_CODEOBJECT(module_filename_obj, 2603, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARARGS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[643], mod_consts[723], NULL, 1, 0, 0);
    codeobj_ce6b71a74edb04e90997815ade78abf4 = MAKE_CODEOBJECT(module_filename_obj, 1107, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[142], mod_consts[779], NULL, 1, 0, 0);
    codeobj_900383480205fc1c720bc61c0ed6566d = MAKE_CODEOBJECT(module_filename_obj, 1643, CO_OPTIMIZED | CO_NEWLOCALS | CO_VARKEYWORDS | CO_NOFREE, mod_consts[142], mod_consts[779], NULL, 1, 0, 0);
    codeobj_7d07039ef161c516955860313b970433 = MAKE_CODEOBJECT(module_filename_obj, 1127, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[158], mod_consts[780], NULL, 3, 0, 0);
    codeobj_92afc2cd8d359ac5ceb82d4f2266314c = MAKE_CODEOBJECT(module_filename_obj, 1136, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[161], mod_consts[780], NULL, 3, 0, 0);
    codeobj_a2871293caed309651ea4a744447c14b = MAKE_CODEOBJECT(module_filename_obj, 327, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[447], mod_consts[781], NULL, 2, 0, 0);
    codeobj_19f7812994aeaf50575de802808c1910 = MAKE_CODEOBJECT(module_filename_obj, 466, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[447], mod_consts[781], NULL, 2, 0, 0);
    codeobj_8dec9bf35a3d35a9a08cd3ac5d62091b = MAKE_CODEOBJECT(module_filename_obj, 633, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[447], mod_consts[781], NULL, 2, 0, 0);
    codeobj_d602dea3fafc7887a40c46ff4868cc37 = MAKE_CODEOBJECT(module_filename_obj, 803, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[447], mod_consts[781], NULL, 2, 0, 0);
    codeobj_dd136002a7b1d65c393838c253df1571 = MAKE_CODEOBJECT(module_filename_obj, 828, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[447], mod_consts[781], NULL, 2, 0, 0);
    codeobj_e50570ddb5d241e469c85d33b14f06a7 = MAKE_CODEOBJECT(module_filename_obj, 869, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[447], mod_consts[781], NULL, 2, 0, 0);
    codeobj_5dc23e3c611a3907031273184fb1177f = MAKE_CODEOBJECT(module_filename_obj, 959, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[447], mod_consts[781], NULL, 2, 0, 0);
    codeobj_631718d8db30c776f185afbe18b6d8e3 = MAKE_CODEOBJECT(module_filename_obj, 2839, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[447], mod_consts[781], NULL, 2, 0, 0);
    codeobj_e16e5e50ea2e711f8cc87e563ecd9dc0 = MAKE_CODEOBJECT(module_filename_obj, 2736, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[606], mod_consts[738], NULL, 1, 0, 0);
    codeobj_db9ff17a464d992a5a6416cb07c39126 = MAKE_CODEOBJECT(module_filename_obj, 1823, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[228], mod_consts[782], NULL, 2, 0, 0);
    codeobj_73aa4383e90c67b2095c8cf4b55b97a6 = MAKE_CODEOBJECT(module_filename_obj, 2255, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[228], mod_consts[772], NULL, 2, 0, 0);
    codeobj_365a69ad8eb3d66979a38a5e638934a8 = MAKE_CODEOBJECT(module_filename_obj, 1610, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[228], mod_consts[783], NULL, 2, 0, 0);
    codeobj_7fcc8dd077b03a724bfa811103a25c0c = MAKE_CODEOBJECT(module_filename_obj, 247, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[228], mod_consts[784], NULL, 2, 0, 0);
    codeobj_a444f75fdfcac1f36d21d335b140f215 = MAKE_CODEOBJECT(module_filename_obj, 473, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[228], mod_consts[784], NULL, 2, 0, 0);
    codeobj_358590c8faefc21cbc031397837c2c5a = MAKE_CODEOBJECT(module_filename_obj, 636, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[228], mod_consts[784], NULL, 2, 0, 0);
    codeobj_8b010af3c4cec60845c9798f15a9e9c1 = MAKE_CODEOBJECT(module_filename_obj, 894, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[228], mod_consts[784], NULL, 2, 0, 0);
    codeobj_65269d50c8427a1405f2cc27af6fa453 = MAKE_CODEOBJECT(module_filename_obj, 2970, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[228], mod_consts[784], NULL, 2, 0, 0);
    codeobj_51f690878161021e112c7a30b155f739 = MAKE_CODEOBJECT(module_filename_obj, 1494, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[266], mod_consts[738], NULL, 1, 0, 0);
    codeobj_a8d5175f36cbc474b0daf68ecfd3ed5d = MAKE_CODEOBJECT(module_filename_obj, 266, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[28], mod_consts[785], NULL, 1, 0, 0);
    codeobj_5130bb61216b451d0eb1f14864720cad = MAKE_CODEOBJECT(module_filename_obj, 474, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[28], mod_consts[785], NULL, 1, 0, 0);
    codeobj_cebebc8fdf1b5b7034c3ebe5c05b2b33 = MAKE_CODEOBJECT(module_filename_obj, 637, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[28], mod_consts[785], NULL, 1, 0, 0);
    codeobj_d4c81abf6a43866a0767f93fe917f8f9 = MAKE_CODEOBJECT(module_filename_obj, 929, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[28], mod_consts[785], NULL, 1, 0, 0);
    codeobj_b36711c2963cf141646b9c711e21ccf6 = MAKE_CODEOBJECT(module_filename_obj, 944, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[28], mod_consts[785], NULL, 1, 0, 0);
    codeobj_a7b57745929293a4180b06fbafb0e794 = MAKE_CODEOBJECT(module_filename_obj, 2971, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[28], mod_consts[785], NULL, 1, 0, 0);
    codeobj_d46eb5e851689f39d42df9005a5bccab = MAKE_CODEOBJECT(module_filename_obj, 913, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[786], mod_consts[787], 1, 0, 0);
    codeobj_09fd947af5ae5ee2537e1e3c83e1c5c2 = MAKE_CODEOBJECT(module_filename_obj, 1840, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[788], mod_consts[789], 1, 0, 0);
    codeobj_c36e7994bc212bb5c1b07a12afdd52de = MAKE_CODEOBJECT(module_filename_obj, 248, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[790], mod_consts[791], 1, 0, 0);
    codeobj_89692ce6656ecf43c2c7e75e2ac32991 = MAKE_CODEOBJECT(module_filename_obj, 895, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[790], mod_consts[791], 1, 0, 0);
    codeobj_9d17a7b500307add96efcef3a367ec57 = MAKE_CODEOBJECT(module_filename_obj, 1707, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[792], mod_consts[793], 1, 0, 0);
    codeobj_4c8a56e694f5d15875d2ca208020840b = MAKE_CODEOBJECT(module_filename_obj, 1700, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[794], mod_consts[795], 1, 0, 0);
    codeobj_dc9c90d4e39e91b260ea6725b3645a83 = MAKE_CODEOBJECT(module_filename_obj, 282, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[796], mod_consts[797], 1, 0, 0);
    codeobj_e5e57fd08df72921834834662e50725e = MAKE_CODEOBJECT(module_filename_obj, 1945, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[798], mod_consts[799], 1, 0, 0);
    codeobj_9b2cbb8752b7ee5f04ba8a9c6b65ed1f = MAKE_CODEOBJECT(module_filename_obj, 1965, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[798], mod_consts[799], 1, 0, 0);
    codeobj_721d898bd11a13c19c76e956025de367 = MAKE_CODEOBJECT(module_filename_obj, 1938, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[800], mod_consts[801], 1, 0, 0);
    codeobj_040968a2f49c9a024ff8b7ebca05e479 = MAKE_CODEOBJECT(module_filename_obj, 1957, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[802], mod_consts[801], 1, 0, 0);
    codeobj_180a86d96068098c506a7ad191e7fe62 = MAKE_CODEOBJECT(module_filename_obj, 1719, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[803], mod_consts[804], 1, 0, 0);
    codeobj_e25634e3711c6b5cb1101160ca5f64c8 = MAKE_CODEOBJECT(module_filename_obj, 2246, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[805], mod_consts[806], 1, 0, 0);
    codeobj_d4cce7be2c6d61e939ff8f1737aebd5f = MAKE_CODEOBJECT(module_filename_obj, 2259, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[805], mod_consts[806], 1, 0, 0);
    codeobj_3d11807b5a58354e263d81c58bcef810 = MAKE_CODEOBJECT(module_filename_obj, 1727, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[807], mod_consts[808], 1, 0, 0);
    codeobj_4059fcd1cafd84c042c9e6346852cb49 = MAKE_CODEOBJECT(module_filename_obj, 1634, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[809], mod_consts[810], 1, 0, 0);
    codeobj_d7365d3affe70e314de644a6f13c58c8 = MAKE_CODEOBJECT(module_filename_obj, 1613, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[811], mod_consts[810], 1, 0, 0);
    codeobj_9e189f814f4382329c3f44ef4bcf122f = MAKE_CODEOBJECT(module_filename_obj, 1622, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[811], mod_consts[810], 1, 0, 0);
    codeobj_8b4d492b04debbbf1882680dd19ce299 = MAKE_CODEOBJECT(module_filename_obj, 1828, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[812], mod_consts[813], 1, 0, 0);
    codeobj_d6dee81af77776b48bf2d4db1bf6e30b = MAKE_CODEOBJECT(module_filename_obj, 2430, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[814], mod_consts[815], 1, 0, 0);
    codeobj_cfec1619bd0b3b489d79dedee5c04bef = MAKE_CODEOBJECT(module_filename_obj, 2449, CO_OPTIMIZED | CO_NEWLOCALS, mod_consts[28], mod_consts[816], mod_consts[817], 1, 0, 0);
    codeobj_8eeafd0a23a514f068dca3b32200ad71 = MAKE_CODEOBJECT(module_filename_obj, 321, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[236], mod_consts[738], NULL, 1, 0, 0);
    codeobj_d15f2af2d97d3af049beb49dcfb9a55e = MAKE_CODEOBJECT(module_filename_obj, 470, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[236], mod_consts[738], NULL, 1, 0, 0);
    codeobj_4def468570d1a6b0955db33a856f684f = MAKE_CODEOBJECT(module_filename_obj, 643, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[236], mod_consts[738], NULL, 1, 0, 0);
    codeobj_09bc773089160ae25520ee75955ab821 = MAKE_CODEOBJECT(module_filename_obj, 807, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[236], mod_consts[738], NULL, 1, 0, 0);
    codeobj_e7cef0473820344c14b6f8d33e4175a2 = MAKE_CODEOBJECT(module_filename_obj, 832, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[236], mod_consts[738], NULL, 1, 0, 0);
    codeobj_66456ce309790c2214ab611d32d52f5b = MAKE_CODEOBJECT(module_filename_obj, 873, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[236], mod_consts[738], NULL, 1, 0, 0);
    codeobj_251229f7216f07084fb1cdbb281588b2 = MAKE_CODEOBJECT(module_filename_obj, 902, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[236], mod_consts[738], NULL, 1, 0, 0);
    codeobj_2297632e10cffebf22f47d2f8a62432e = MAKE_CODEOBJECT(module_filename_obj, 1808, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[236], mod_consts[738], NULL, 1, 0, 0);
    codeobj_1517404864390463d00b2823a600abfd = MAKE_CODEOBJECT(module_filename_obj, 1927, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[236], mod_consts[738], NULL, 1, 0, 0);
    codeobj_e07ca732601db60324dcfd936de3c53e = MAKE_CODEOBJECT(module_filename_obj, 2409, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[236], mod_consts[738], NULL, 1, 0, 0);
    codeobj_6b9111e982b267f962148ba4387afa38 = MAKE_CODEOBJECT(module_filename_obj, 2740, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[236], mod_consts[738], NULL, 1, 0, 0);
    codeobj_a3a5549b67da9f53c5b7b693705607d6 = MAKE_CODEOBJECT(module_filename_obj, 1647, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[236], mod_consts[818], NULL, 1, 0, 0);
    codeobj_5782e8db7cc9b9b09909a8d7c2344ef8 = MAKE_CODEOBJECT(module_filename_obj, 655, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[233], mod_consts[819], NULL, 3, 0, 0);
    codeobj_4114bd0ac152e003245e0a5f3c383370 = MAKE_CODEOBJECT(module_filename_obj, 756, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[233], mod_consts[819], NULL, 3, 0, 0);
    codeobj_e65bfdb285f2b292b211690ab41ddfe6 = MAKE_CODEOBJECT(module_filename_obj, 1848, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[233], mod_consts[819], NULL, 3, 0, 0);
    codeobj_ca6015480afd717c6a68e5cd5c83f22b = MAKE_CODEOBJECT(module_filename_obj, 1952, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[233], mod_consts[820], NULL, 3, 0, 0);
    codeobj_e75df1520546e1544b8084b31ce6b779 = MAKE_CODEOBJECT(module_filename_obj, 1714, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[233], mod_consts[821], NULL, 3, 0, 0);
    codeobj_4a98522ce6e4fae80f8ea987181e8c29 = MAKE_CODEOBJECT(module_filename_obj, 1631, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[233], mod_consts[822], NULL, 3, 0, 0);
    codeobj_1756c05d48e2c2b0e3146e16d7f42efe = MAKE_CODEOBJECT(module_filename_obj, 926, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[233], mod_consts[823], NULL, 3, 0, 0);
    codeobj_724ab77bb3c61d142e9f500149e6a792 = MAKE_CODEOBJECT(module_filename_obj, 943, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[233], mod_consts[823], NULL, 3, 0, 0);
    codeobj_b5dc4d7e9c1118009c9e6035626d916f = MAKE_CODEOBJECT(module_filename_obj, 2445, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[233], mod_consts[824], NULL, 3, 0, 0);
    codeobj_1b34e3bd40d8681fa037c2b35e766719 = MAKE_CODEOBJECT(module_filename_obj, 297, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[233], mod_consts[825], NULL, 3, 0, 0);
    codeobj_1d5640d11aeb82ae763f927b9f5c804a = MAKE_CODEOBJECT(module_filename_obj, 2413, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[633], mod_consts[738], NULL, 1, 0, 0);
    codeobj_c5c406697da523074099ecbcf0fe8ffc = MAKE_CODEOBJECT(module_filename_obj, 2418, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[633], mod_consts[759], NULL, 2, 0, 0);
    codeobj_cc5d7818e1d16c45d2492e45873c6db2 = MAKE_CODEOBJECT(module_filename_obj, 1487, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[175], mod_consts[738], NULL, 1, 0, 0);
    codeobj_52849325a34baac4c3d0efb32eccf004 = MAKE_CODEOBJECT(module_filename_obj, 2236, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[281], mod_consts[767], NULL, 2, 0, 0);
    codeobj_c4437ebcc356d068272586f6f953e6e3 = MAKE_CODEOBJECT(module_filename_obj, 2239, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[285], mod_consts[767], NULL, 2, 0, 0);
}

// The module function declarations.
static PyObject *MAKE_GENERATOR_sqlalchemy$sql$sqltypes$$$function__68__enum_init$$$genexpr__1_genexpr(struct Nuitka_CellObject **closure);


NUITKA_CROSS_MODULE PyObject *impl___main__$$$function__1__mro_entries_conversion(PyObject **python_pars);


NUITKA_CROSS_MODULE PyObject *impl___main__$$$function__16_complex_call_helper_keywords_star_dict(PyObject **python_pars);


NUITKA_CROSS_MODULE PyObject *impl___main__$$$function__10_complex_call_helper_pos_star_list_star_dict(PyObject **python_pars);


NUITKA_CROSS_MODULE PyObject *impl___main__$$$function__7_complex_call_helper_pos_star_dict(PyObject **python_pars);


NUITKA_CROSS_MODULE PyObject *impl___main__$$$function__9_complex_call_helper_star_dict(PyObject **python_pars);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__100__type_affinity();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__101_coerce_compared_value();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__102___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__103_python_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__104_adapt_to_emulated();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__105_bind_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__105_bind_processor$$$function__1_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__105_bind_processor$$$function__2_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__106_result_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__106_result_processor$$$function__1_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__106_result_processor$$$function__2_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__107___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__108_string_bind_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__109_string_literal_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__10_python_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__110_bind_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__110_bind_processor$$$function__1_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__111_literal_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__111_literal_processor$$$function__1_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__112__setup_getitem();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__113_as_boolean();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__114_as_string();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__115_as_integer();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__116_as_float();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__117_as_json();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__118__binary_w_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__119_python_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__11_get_dbapi_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__120_should_evaluate_none();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__121_should_evaluate_none();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__122__str_impl();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__123_bind_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__123_bind_processor$$$function__1_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__124_result_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__124_result_processor$$$function__1_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__125__setup_getitem();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__126_contains();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__127_any(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__128_all(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__129___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__12__warn_deprecated_unicode();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__130_hashable();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__131_python_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__132_compare_values();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__133__set_parent();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__134__set_parent_with_dispatch();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__135___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__136_get_dbapi_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__137_literal_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__137_literal_processor$$$function__1_process();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__138__adapt_expression();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__139__resolve_value_to_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__13___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__14___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__15__warn_deprecated_unicode();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__16_get_dbapi_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__17_python_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__18_literal_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__18_literal_processor$$$function__1_process();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__19__expression_adaptations();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__1__expression_adaptations();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__20___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__21__effective_decimal_return_scale();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__22_get_dbapi_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__23_literal_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__23_literal_processor$$$function__1_process();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__24_python_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__25_bind_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__26_result_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__27__expression_adaptations();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__28___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__29_result_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__2__adapt_expression();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__30___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__31_get_dbapi_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__32_python_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__33__expression_adaptations();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__34_get_dbapi_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__35_python_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__36__expression_adaptations();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__37___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__38_get_dbapi_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__39_python_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__3__adapt_expression();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__40__expression_adaptations();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__41___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__42_literal_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__42_literal_processor$$$function__1_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__43_python_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__44_bind_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__44_bind_processor$$$function__1_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__45_result_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__45_result_processor$$$function__1_process();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__46_result_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__46_result_processor$$$function__1_process();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__47_coerce_compared_value();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__48_get_dbapi_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__49___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__4__setup_getitem();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__50___init__();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__51___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__52__translate_schema();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__53__set_parent();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__54__variant_mapping_for_set_table();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__55__set_table();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__56_copy();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__57_adapt();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__58_bind();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__59_create(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__5___getitem__();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__60_drop(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__61__on_table_create();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__62__on_table_drop();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__63__on_metadata_create();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__64__on_metadata_drop();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__65__is_impl_for_variant();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__66___init__();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__67__enums_argument();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__68__enum_init();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__69__parse_into_values();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__6___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__70__setup_for_values();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__71_sort_key_function();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__72_native();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__73__db_value_for_elem();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__74__adapt_expression();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__75__object_value_for_elem();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__76___repr__();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__77_adapt_to_emulated();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__78_adapt();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__79__should_create_constraint();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__7_literal_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__7_literal_processor$$$function__1_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__80__set_table();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__81_literal_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__81_literal_processor$$$function__1_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__82_bind_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__82_bind_processor$$$function__1_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__83_result_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__83_result_processor$$$function__1_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__84_copy();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__85_python_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__86___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__87___reduce__();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__88_bind_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__88_bind_processor$$$function__1_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__88_bind_processor$$$function__2_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__89_result_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__89_result_processor$$$function__1_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__89_result_processor$$$function__2_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__8_bind_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__8_bind_processor$$$function__1_process();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__8_bind_processor$$$function__2_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__90_compare_values();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__91___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__92__should_create_constraint();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__93__set_table();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__94_python_type();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__95__strict_as_bool();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__96_literal_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__96_literal_processor$$$function__1_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__97_bind_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__97_bind_processor$$$function__1_process(struct Nuitka_CellObject **closure);


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__98_result_processor();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__99__expression_adaptations();


static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__9_result_processor();


// The module function definitions.
static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__1__expression_adaptations(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_52bef6c65aa0ebe73e3b3a1af2374252;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_52bef6c65aa0ebe73e3b3a1af2374252 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_52bef6c65aa0ebe73e3b3a1af2374252)) {
        Py_XDECREF(cache_frame_52bef6c65aa0ebe73e3b3a1af2374252);

#if _DEBUG_REFCOUNTS
        if (cache_frame_52bef6c65aa0ebe73e3b3a1af2374252 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_52bef6c65aa0ebe73e3b3a1af2374252 = MAKE_FUNCTION_FRAME(codeobj_52bef6c65aa0ebe73e3b3a1af2374252, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_52bef6c65aa0ebe73e3b3a1af2374252->m_type_description == NULL);
    frame_52bef6c65aa0ebe73e3b3a1af2374252 = cache_frame_52bef6c65aa0ebe73e3b3a1af2374252;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_52bef6c65aa0ebe73e3b3a1af2374252);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_52bef6c65aa0ebe73e3b3a1af2374252) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_raise_type_1;
        frame_52bef6c65aa0ebe73e3b3a1af2374252->m_frame.f_lineno = 59;
        tmp_raise_type_1 = CALL_FUNCTION_NO_ARGS(PyExc_NotImplementedError);
        assert(!(tmp_raise_type_1 == NULL));
        exception_type = tmp_raise_type_1;
        exception_lineno = 59;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_52bef6c65aa0ebe73e3b3a1af2374252);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_52bef6c65aa0ebe73e3b3a1af2374252);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_52bef6c65aa0ebe73e3b3a1af2374252, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_52bef6c65aa0ebe73e3b3a1af2374252->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_52bef6c65aa0ebe73e3b3a1af2374252, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_52bef6c65aa0ebe73e3b3a1af2374252,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_52bef6c65aa0ebe73e3b3a1af2374252 == cache_frame_52bef6c65aa0ebe73e3b3a1af2374252) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_52bef6c65aa0ebe73e3b3a1af2374252);
        cache_frame_52bef6c65aa0ebe73e3b3a1af2374252 = NULL;
    }

    assertFrameObject(frame_52bef6c65aa0ebe73e3b3a1af2374252);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__2__adapt_expression(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_op = python_pars[1];
    PyObject *par_other_comparator = python_pars[2];
    PyObject *var_othertype = NULL;
    PyObject *var_lookup = NULL;
    struct Nuitka_FrameObject *frame_93bd1b5dde42351f2cc97d3dfe3d4028;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_93bd1b5dde42351f2cc97d3dfe3d4028 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_93bd1b5dde42351f2cc97d3dfe3d4028)) {
        Py_XDECREF(cache_frame_93bd1b5dde42351f2cc97d3dfe3d4028);

#if _DEBUG_REFCOUNTS
        if (cache_frame_93bd1b5dde42351f2cc97d3dfe3d4028 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_93bd1b5dde42351f2cc97d3dfe3d4028 = MAKE_FUNCTION_FRAME(codeobj_93bd1b5dde42351f2cc97d3dfe3d4028, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_93bd1b5dde42351f2cc97d3dfe3d4028->m_type_description == NULL);
    frame_93bd1b5dde42351f2cc97d3dfe3d4028 = cache_frame_93bd1b5dde42351f2cc97d3dfe3d4028;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_93bd1b5dde42351f2cc97d3dfe3d4028);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_93bd1b5dde42351f2cc97d3dfe3d4028) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(par_other_comparator);
        tmp_expression_value_2 = par_other_comparator;
        tmp_expression_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[0]);
        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 65;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[1]);
        Py_DECREF(tmp_expression_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 65;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(var_othertype == NULL);
        var_othertype = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_expression_value_8;
        CHECK_OBJECT(par_self);
        tmp_expression_value_6 = par_self;
        tmp_expression_value_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[0]);
        if (tmp_expression_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[2]);
        Py_DECREF(tmp_expression_value_5);
        if (tmp_expression_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[3]);
        Py_DECREF(tmp_expression_value_4);
        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_op);
        tmp_args_element_value_1 = par_op;
        CHECK_OBJECT(par_self);
        tmp_expression_value_7 = par_self;
        tmp_args_element_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_7, mod_consts[4]);
        if (tmp_args_element_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 67;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_93bd1b5dde42351f2cc97d3dfe3d4028->m_frame.f_lineno = 66;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_expression_value_3 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_2, call_args);
        }

        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_2);
        if (tmp_expression_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[3]);
        Py_DECREF(tmp_expression_value_3);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_othertype);
        tmp_args_element_value_3 = var_othertype;
        CHECK_OBJECT(par_self);
        tmp_expression_value_8 = par_self;
        tmp_args_element_value_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_8, mod_consts[0]);
        if (tmp_args_element_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 68;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_93bd1b5dde42351f2cc97d3dfe3d4028->m_frame.f_lineno = 66;
        {
            PyObject *call_args[] = {tmp_args_element_value_3, tmp_args_element_value_4};
            tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_4);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(var_lookup == NULL);
        var_lookup = tmp_assign_source_2;
    }
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(var_lookup);
        tmp_cmp_expr_left_1 = var_lookup;
        CHECK_OBJECT(var_othertype);
        tmp_cmp_expr_right_1 = var_othertype;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_tuple_element_1;
        CHECK_OBJECT(par_op);
        tmp_tuple_element_1 = par_op;
        tmp_return_value = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_9;
            PyTuple_SET_ITEM0(tmp_return_value, 0, tmp_tuple_element_1);
            CHECK_OBJECT(par_other_comparator);
            tmp_expression_value_9 = par_other_comparator;
            tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_9, mod_consts[0]);
            if (tmp_tuple_element_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 70;
                type_description_1 = "ooooo";
                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_return_value, 1, tmp_tuple_element_1);
        }
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_return_value);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        goto frame_return_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        bool tmp_condition_result_2;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        PyObject *tmp_expression_value_10;
        PyObject *tmp_expression_value_11;
        CHECK_OBJECT(var_lookup);
        tmp_cmp_expr_left_2 = var_lookup;
        CHECK_OBJECT(par_self);
        tmp_expression_value_11 = par_self;
        tmp_expression_value_10 = LOOKUP_ATTRIBUTE(tmp_expression_value_11, mod_consts[0]);
        if (tmp_expression_value_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 71;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_10, mod_consts[1]);
        Py_DECREF(tmp_expression_value_10);
        if (tmp_cmp_expr_right_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 71;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = (tmp_cmp_expr_left_2 == tmp_cmp_expr_right_2) ? true : false;
        Py_DECREF(tmp_cmp_expr_right_2);
        if (tmp_condition_result_2 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_tuple_element_2;
        CHECK_OBJECT(par_op);
        tmp_tuple_element_2 = par_op;
        tmp_return_value = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_12;
            PyTuple_SET_ITEM0(tmp_return_value, 0, tmp_tuple_element_2);
            CHECK_OBJECT(par_self);
            tmp_expression_value_12 = par_self;
            tmp_tuple_element_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_12, mod_consts[0]);
            if (tmp_tuple_element_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 72;
                type_description_1 = "ooooo";
                goto tuple_build_exception_2;
            }
            PyTuple_SET_ITEM(tmp_return_value, 1, tmp_tuple_element_2);
        }
        goto tuple_build_noexception_2;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_2:;
        Py_DECREF(tmp_return_value);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_2:;
        goto frame_return_exit_1;
    }
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_tuple_element_3;
        CHECK_OBJECT(par_op);
        tmp_tuple_element_3 = par_op;
        tmp_return_value = PyTuple_New(2);
        {
            PyObject *tmp_called_value_3;
            PyObject *tmp_args_element_value_5;
            PyTuple_SET_ITEM0(tmp_return_value, 0, tmp_tuple_element_3);
            tmp_called_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[5]);

            if (unlikely(tmp_called_value_3 == NULL)) {
                tmp_called_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[5]);
            }

            if (tmp_called_value_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 74;
                type_description_1 = "ooooo";
                goto tuple_build_exception_3;
            }
            CHECK_OBJECT(var_lookup);
            tmp_args_element_value_5 = var_lookup;
            frame_93bd1b5dde42351f2cc97d3dfe3d4028->m_frame.f_lineno = 74;
            tmp_tuple_element_3 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_3, tmp_args_element_value_5);
            if (tmp_tuple_element_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 74;
                type_description_1 = "ooooo";
                goto tuple_build_exception_3;
            }
            PyTuple_SET_ITEM(tmp_return_value, 1, tmp_tuple_element_3);
        }
        goto tuple_build_noexception_3;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_3:;
        Py_DECREF(tmp_return_value);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_3:;
        goto frame_return_exit_1;
    }
    branch_end_2:;
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_93bd1b5dde42351f2cc97d3dfe3d4028);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_93bd1b5dde42351f2cc97d3dfe3d4028);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_93bd1b5dde42351f2cc97d3dfe3d4028);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_93bd1b5dde42351f2cc97d3dfe3d4028, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_93bd1b5dde42351f2cc97d3dfe3d4028->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_93bd1b5dde42351f2cc97d3dfe3d4028, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_93bd1b5dde42351f2cc97d3dfe3d4028,
        type_description_1,
        par_self,
        par_op,
        par_other_comparator,
        var_othertype,
        var_lookup
    );


    // Release cached frame if used for exception.
    if (frame_93bd1b5dde42351f2cc97d3dfe3d4028 == cache_frame_93bd1b5dde42351f2cc97d3dfe3d4028) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_93bd1b5dde42351f2cc97d3dfe3d4028);
        cache_frame_93bd1b5dde42351f2cc97d3dfe3d4028 = NULL;
    }

    assertFrameObject(frame_93bd1b5dde42351f2cc97d3dfe3d4028);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_othertype);
    Py_DECREF(var_othertype);
    var_othertype = NULL;
    CHECK_OBJECT(var_lookup);
    Py_DECREF(var_lookup);
    var_lookup = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_othertype);
    var_othertype = NULL;
    Py_XDECREF(var_lookup);
    var_lookup = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_op);
    Py_DECREF(par_op);
    CHECK_OBJECT(par_other_comparator);
    Py_DECREF(par_other_comparator);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_op);
    Py_DECREF(par_op);
    CHECK_OBJECT(par_other_comparator);
    Py_DECREF(par_other_comparator);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__3__adapt_expression(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_op = python_pars[1];
    PyObject *par_other_comparator = python_pars[2];
    struct Nuitka_FrameObject *frame_9b94820dde9ae1619590d189944705ab;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_9b94820dde9ae1619590d189944705ab = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_9b94820dde9ae1619590d189944705ab)) {
        Py_XDECREF(cache_frame_9b94820dde9ae1619590d189944705ab);

#if _DEBUG_REFCOUNTS
        if (cache_frame_9b94820dde9ae1619590d189944705ab == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_9b94820dde9ae1619590d189944705ab = MAKE_FUNCTION_FRAME(codeobj_9b94820dde9ae1619590d189944705ab, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_9b94820dde9ae1619590d189944705ab->m_type_description == NULL);
    frame_9b94820dde9ae1619590d189944705ab = cache_frame_9b94820dde9ae1619590d189944705ab;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_9b94820dde9ae1619590d189944705ab);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_9b94820dde9ae1619590d189944705ab) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(par_op);
        tmp_cmp_expr_left_1 = par_op;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 86;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[7]);
        if (tmp_cmp_expr_right_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 86;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_cmp_expr_right_1);
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(par_other_comparator);
        tmp_isinstance_inst_1 = par_other_comparator;
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[8]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[8]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 88;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[9]);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 88;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_cls_1 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_3;
            PyTuple_SET_ITEM(tmp_isinstance_cls_1, 0, tmp_tuple_element_1);
            tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[10]);

            if (unlikely(tmp_expression_value_3 == NULL)) {
                tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[10]);
            }

            if (tmp_expression_value_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 88;
                type_description_1 = "oooN";
                goto tuple_build_exception_1;
            }
            tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[9]);
            if (tmp_tuple_element_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 88;
                type_description_1 = "oooN";
                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_isinstance_cls_1, 1, tmp_tuple_element_1);
        }
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_isinstance_cls_1);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 86;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_expression_value_4;
        tmp_expression_value_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_4 == NULL)) {
            tmp_expression_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
        }

        if (tmp_expression_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 90;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[11]);
        if (tmp_tuple_element_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 90;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        tmp_return_value = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_5;
            PyObject *tmp_expression_value_6;
            PyTuple_SET_ITEM(tmp_return_value, 0, tmp_tuple_element_2);
            CHECK_OBJECT(par_self);
            tmp_expression_value_6 = par_self;
            tmp_expression_value_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[12]);
            if (tmp_expression_value_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 90;
                type_description_1 = "oooN";
                goto tuple_build_exception_2;
            }
            tmp_tuple_element_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[0]);
            Py_DECREF(tmp_expression_value_5);
            if (tmp_tuple_element_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 90;
                type_description_1 = "oooN";
                goto tuple_build_exception_2;
            }
            PyTuple_SET_ITEM(tmp_return_value, 1, tmp_tuple_element_2);
        }
        goto tuple_build_noexception_2;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_2:;
        Py_DECREF(tmp_return_value);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_2:;
        goto frame_return_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        tmp_expression_value_7 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[8]);

        if (unlikely(tmp_expression_value_7 == NULL)) {
            tmp_expression_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[8]);
        }

        if (tmp_expression_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 92;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        tmp_type_arg_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_7, mod_consts[9]);
        if (tmp_type_arg_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 92;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_object_arg_value_1 = par_self;
        tmp_called_instance_1 = BUILTIN_SUPER2(tmp_type_arg_value_1, tmp_object_arg_value_1);
        Py_DECREF(tmp_type_arg_value_1);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 92;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_op);
        tmp_args_element_value_1 = par_op;
        CHECK_OBJECT(par_other_comparator);
        tmp_args_element_value_2 = par_other_comparator;
        frame_9b94820dde9ae1619590d189944705ab->m_frame.f_lineno = 92;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_return_value = CALL_METHOD_WITH_ARGS2(
                tmp_called_instance_1,
                mod_consts[13],
                call_args
            );
        }

        Py_DECREF(tmp_called_instance_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 92;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9b94820dde9ae1619590d189944705ab);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_9b94820dde9ae1619590d189944705ab);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9b94820dde9ae1619590d189944705ab);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_9b94820dde9ae1619590d189944705ab, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_9b94820dde9ae1619590d189944705ab->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_9b94820dde9ae1619590d189944705ab, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_9b94820dde9ae1619590d189944705ab,
        type_description_1,
        par_self,
        par_op,
        par_other_comparator,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_9b94820dde9ae1619590d189944705ab == cache_frame_9b94820dde9ae1619590d189944705ab) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_9b94820dde9ae1619590d189944705ab);
        cache_frame_9b94820dde9ae1619590d189944705ab = NULL;
    }

    assertFrameObject(frame_9b94820dde9ae1619590d189944705ab);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_op);
    Py_DECREF(par_op);
    CHECK_OBJECT(par_other_comparator);
    Py_DECREF(par_other_comparator);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_op);
    Py_DECREF(par_op);
    CHECK_OBJECT(par_other_comparator);
    Py_DECREF(par_other_comparator);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__4__setup_getitem(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_index = python_pars[1];
    struct Nuitka_FrameObject *frame_5bf41b8d00196928b2b3a6ff632a8512;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_5bf41b8d00196928b2b3a6ff632a8512 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_5bf41b8d00196928b2b3a6ff632a8512)) {
        Py_XDECREF(cache_frame_5bf41b8d00196928b2b3a6ff632a8512);

#if _DEBUG_REFCOUNTS
        if (cache_frame_5bf41b8d00196928b2b3a6ff632a8512 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_5bf41b8d00196928b2b3a6ff632a8512 = MAKE_FUNCTION_FRAME(codeobj_5bf41b8d00196928b2b3a6ff632a8512, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_5bf41b8d00196928b2b3a6ff632a8512->m_type_description == NULL);
    frame_5bf41b8d00196928b2b3a6ff632a8512 = cache_frame_5bf41b8d00196928b2b3a6ff632a8512;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_5bf41b8d00196928b2b3a6ff632a8512);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_5bf41b8d00196928b2b3a6ff632a8512) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_raise_type_1;
        frame_5bf41b8d00196928b2b3a6ff632a8512->m_frame.f_lineno = 111;
        tmp_raise_type_1 = CALL_FUNCTION_NO_ARGS(PyExc_NotImplementedError);
        assert(!(tmp_raise_type_1 == NULL));
        exception_type = tmp_raise_type_1;
        exception_lineno = 111;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_5bf41b8d00196928b2b3a6ff632a8512);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_5bf41b8d00196928b2b3a6ff632a8512);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_5bf41b8d00196928b2b3a6ff632a8512, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_5bf41b8d00196928b2b3a6ff632a8512->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_5bf41b8d00196928b2b3a6ff632a8512, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_5bf41b8d00196928b2b3a6ff632a8512,
        type_description_1,
        par_self,
        par_index
    );


    // Release cached frame if used for exception.
    if (frame_5bf41b8d00196928b2b3a6ff632a8512 == cache_frame_5bf41b8d00196928b2b3a6ff632a8512) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_5bf41b8d00196928b2b3a6ff632a8512);
        cache_frame_5bf41b8d00196928b2b3a6ff632a8512 = NULL;
    }

    assertFrameObject(frame_5bf41b8d00196928b2b3a6ff632a8512);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_index);
    Py_DECREF(par_index);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__5___getitem__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_index = python_pars[1];
    PyObject *var_adjusted_op = NULL;
    PyObject *var_adjusted_right_expr = NULL;
    PyObject *var_result_type = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__element_3 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_1cba04e9296337f0e8797e70d0bc03c8;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_1cba04e9296337f0e8797e70d0bc03c8 = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_1cba04e9296337f0e8797e70d0bc03c8)) {
        Py_XDECREF(cache_frame_1cba04e9296337f0e8797e70d0bc03c8);

#if _DEBUG_REFCOUNTS
        if (cache_frame_1cba04e9296337f0e8797e70d0bc03c8 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_1cba04e9296337f0e8797e70d0bc03c8 = MAKE_FUNCTION_FRAME(codeobj_1cba04e9296337f0e8797e70d0bc03c8, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_1cba04e9296337f0e8797e70d0bc03c8->m_type_description == NULL);
    frame_1cba04e9296337f0e8797e70d0bc03c8 = cache_frame_1cba04e9296337f0e8797e70d0bc03c8;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_1cba04e9296337f0e8797e70d0bc03c8);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_1cba04e9296337f0e8797e70d0bc03c8) == 2); // Frame stack

    // Framed code:
    // Tried code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_1;
        CHECK_OBJECT(par_self);
        tmp_called_instance_1 = par_self;
        CHECK_OBJECT(par_index);
        tmp_args_element_value_1 = par_index;
        frame_1cba04e9296337f0e8797e70d0bc03c8->m_frame.f_lineno = 118;
        tmp_iter_arg_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[14], tmp_args_element_value_1);
        if (tmp_iter_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 118;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        tmp_assign_source_1 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_1);
        Py_DECREF(tmp_iter_arg_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 114;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        assert(tmp_tuple_unpack_1__source_iter == NULL);
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_1;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_2 = UNPACK_NEXT(tmp_unpack_1, 0, 3);
        if (tmp_assign_source_2 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooo";
            exception_lineno = 114;
            goto try_except_handler_3;
        }
        assert(tmp_tuple_unpack_1__element_1 == NULL);
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_3 = UNPACK_NEXT(tmp_unpack_2, 1, 3);
        if (tmp_assign_source_3 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooo";
            exception_lineno = 114;
            goto try_except_handler_3;
        }
        assert(tmp_tuple_unpack_1__element_2 == NULL);
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_3 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_4 = UNPACK_NEXT(tmp_unpack_3, 2, 3);
        if (tmp_assign_source_4 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooo";
            exception_lineno = 114;
            goto try_except_handler_3;
        }
        assert(tmp_tuple_unpack_1__element_3 == NULL);
        tmp_tuple_unpack_1__element_3 = tmp_assign_source_4;
    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "ooooo";
                    exception_lineno = 114;
                    goto try_except_handler_3;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[15];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "ooooo";
            exception_lineno = 114;
            goto try_except_handler_3;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;
    Py_XDECREF(tmp_tuple_unpack_1__element_3);
    tmp_tuple_unpack_1__element_3 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_1);
        tmp_assign_source_5 = tmp_tuple_unpack_1__element_1;
        assert(var_adjusted_op == NULL);
        Py_INCREF(tmp_assign_source_5);
        var_adjusted_op = tmp_assign_source_5;
    }
    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_6;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_2);
        tmp_assign_source_6 = tmp_tuple_unpack_1__element_2;
        assert(var_adjusted_right_expr == NULL);
        Py_INCREF(tmp_assign_source_6);
        var_adjusted_right_expr = tmp_assign_source_6;
    }
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_7;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_3);
        tmp_assign_source_7 = tmp_tuple_unpack_1__element_3;
        assert(var_result_type == NULL);
        Py_INCREF(tmp_assign_source_7);
        var_result_type = tmp_assign_source_7;
    }
    Py_XDECREF(tmp_tuple_unpack_1__element_3);
    tmp_tuple_unpack_1__element_3 = NULL;

    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_kw_call_arg_value_1_1;
        PyObject *tmp_kw_call_dict_value_0_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[16]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 119;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_adjusted_op);
        tmp_kw_call_arg_value_0_1 = var_adjusted_op;
        CHECK_OBJECT(var_adjusted_right_expr);
        tmp_kw_call_arg_value_1_1 = var_adjusted_right_expr;
        CHECK_OBJECT(var_result_type);
        tmp_kw_call_dict_value_0_1 = var_result_type;
        frame_1cba04e9296337f0e8797e70d0bc03c8->m_frame.f_lineno = 119;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1, tmp_kw_call_arg_value_1_1};
            PyObject *kw_values[1] = {tmp_kw_call_dict_value_0_1};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2_KWSPLIT(tmp_called_value_1, args, kw_values, mod_consts[17]);
        }

        Py_DECREF(tmp_called_value_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 119;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_1cba04e9296337f0e8797e70d0bc03c8);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_1cba04e9296337f0e8797e70d0bc03c8);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_1cba04e9296337f0e8797e70d0bc03c8);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_1cba04e9296337f0e8797e70d0bc03c8, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_1cba04e9296337f0e8797e70d0bc03c8->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_1cba04e9296337f0e8797e70d0bc03c8, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_1cba04e9296337f0e8797e70d0bc03c8,
        type_description_1,
        par_self,
        par_index,
        var_adjusted_op,
        var_adjusted_right_expr,
        var_result_type
    );


    // Release cached frame if used for exception.
    if (frame_1cba04e9296337f0e8797e70d0bc03c8 == cache_frame_1cba04e9296337f0e8797e70d0bc03c8) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_1cba04e9296337f0e8797e70d0bc03c8);
        cache_frame_1cba04e9296337f0e8797e70d0bc03c8 = NULL;
    }

    assertFrameObject(frame_1cba04e9296337f0e8797e70d0bc03c8);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_adjusted_op);
    Py_DECREF(var_adjusted_op);
    var_adjusted_op = NULL;
    CHECK_OBJECT(var_adjusted_right_expr);
    Py_DECREF(var_adjusted_right_expr);
    var_adjusted_right_expr = NULL;
    CHECK_OBJECT(var_result_type);
    Py_DECREF(var_result_type);
    var_result_type = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_adjusted_op);
    var_adjusted_op = NULL;
    Py_XDECREF(var_adjusted_right_expr);
    var_adjusted_right_expr = NULL;
    Py_XDECREF(var_result_type);
    var_result_type = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_index);
    Py_DECREF(par_index);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_index);
    Py_DECREF(par_index);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__6___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_length = python_pars[1];
    PyObject *par_collation = python_pars[2];
    PyObject *par_convert_unicode = python_pars[3];
    PyObject *par_unicode_error = python_pars[4];
    PyObject *par__warn_on_bytestring = python_pars[5];
    PyObject *par__expect_unicode = python_pars[6];
    struct Nuitka_FrameObject *frame_ad31cca6ac3b51f7b040f743cbbda453;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_ad31cca6ac3b51f7b040f743cbbda453 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_ad31cca6ac3b51f7b040f743cbbda453)) {
        Py_XDECREF(cache_frame_ad31cca6ac3b51f7b040f743cbbda453);

#if _DEBUG_REFCOUNTS
        if (cache_frame_ad31cca6ac3b51f7b040f743cbbda453 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_ad31cca6ac3b51f7b040f743cbbda453 = MAKE_FUNCTION_FRAME(codeobj_ad31cca6ac3b51f7b040f743cbbda453, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_ad31cca6ac3b51f7b040f743cbbda453->m_type_description == NULL);
    frame_ad31cca6ac3b51f7b040f743cbbda453 = cache_frame_ad31cca6ac3b51f7b040f743cbbda453;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_ad31cca6ac3b51f7b040f743cbbda453);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_ad31cca6ac3b51f7b040f743cbbda453) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        CHECK_OBJECT(par_unicode_error);
        tmp_cmp_expr_left_1 = par_unicode_error;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_and_left_value_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(par_convert_unicode);
        tmp_cmp_expr_left_2 = par_convert_unicode;
        tmp_cmp_expr_right_2 = mod_consts[18];
        tmp_and_right_value_1 = RICH_COMPARE_NE_NBOOL_OBJECT_UNICODE(tmp_cmp_expr_left_2, tmp_cmp_expr_right_2);
        if (tmp_and_right_value_1 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 235;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        assert(tmp_condition_result_1 != NUITKA_BOOL_UNASSIGNED);
    }
    branch_yes_1:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_called_instance_1;
        tmp_called_instance_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[19]);

        if (unlikely(tmp_called_instance_1 == NULL)) {
            tmp_called_instance_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[19]);
        }

        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 236;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        frame_ad31cca6ac3b51f7b040f743cbbda453->m_frame.f_lineno = 236;
        tmp_raise_type_1 = CALL_METHOD_WITH_SINGLE_ARG(
            tmp_called_instance_1,
            mod_consts[20],
            PyTuple_GET_ITEM(mod_consts[21], 0)
        );

        if (tmp_raise_type_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 236;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        exception_type = tmp_raise_type_1;
        exception_lineno = 236;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    branch_no_1:;
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_length);
        tmp_assattr_value_1 = par_length;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[22], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 240;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT(par_collation);
        tmp_assattr_value_2 = par_collation;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[23], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 241;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_3;
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT(par_convert_unicode);
        tmp_or_left_value_1 = par_convert_unicode;
        tmp_or_left_truth_1 = CHECK_IF_TRUE(tmp_or_left_value_1);
        if (tmp_or_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 242;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        CHECK_OBJECT(par__expect_unicode);
        tmp_or_right_value_1 = par__expect_unicode;
        tmp_assattr_value_3 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_assattr_value_3 = tmp_or_left_value_1;
        or_end_1:;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_3, mod_consts[24], tmp_assattr_value_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 242;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_4;
        PyObject *tmp_assattr_target_4;
        CHECK_OBJECT(par_unicode_error);
        tmp_assattr_value_4 = par_unicode_error;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_4, mod_consts[25], tmp_assattr_value_4);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 243;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_5;
        PyObject *tmp_assattr_target_5;
        CHECK_OBJECT(par__warn_on_bytestring);
        tmp_assattr_value_5 = par__warn_on_bytestring;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_5 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_5, mod_consts[26], tmp_assattr_value_5);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 245;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ad31cca6ac3b51f7b040f743cbbda453);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ad31cca6ac3b51f7b040f743cbbda453);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_ad31cca6ac3b51f7b040f743cbbda453, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_ad31cca6ac3b51f7b040f743cbbda453->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_ad31cca6ac3b51f7b040f743cbbda453, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_ad31cca6ac3b51f7b040f743cbbda453,
        type_description_1,
        par_self,
        par_length,
        par_collation,
        par_convert_unicode,
        par_unicode_error,
        par__warn_on_bytestring,
        par__expect_unicode
    );


    // Release cached frame if used for exception.
    if (frame_ad31cca6ac3b51f7b040f743cbbda453 == cache_frame_ad31cca6ac3b51f7b040f743cbbda453) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_ad31cca6ac3b51f7b040f743cbbda453);
        cache_frame_ad31cca6ac3b51f7b040f743cbbda453 = NULL;
    }

    assertFrameObject(frame_ad31cca6ac3b51f7b040f743cbbda453);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_length);
    Py_DECREF(par_length);
    CHECK_OBJECT(par_collation);
    Py_DECREF(par_collation);
    CHECK_OBJECT(par_convert_unicode);
    Py_DECREF(par_convert_unicode);
    CHECK_OBJECT(par_unicode_error);
    Py_DECREF(par_unicode_error);
    CHECK_OBJECT(par__warn_on_bytestring);
    Py_DECREF(par__warn_on_bytestring);
    CHECK_OBJECT(par__expect_unicode);
    Py_DECREF(par__expect_unicode);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_length);
    Py_DECREF(par_length);
    CHECK_OBJECT(par_collation);
    Py_DECREF(par_collation);
    CHECK_OBJECT(par_convert_unicode);
    Py_DECREF(par_convert_unicode);
    CHECK_OBJECT(par_unicode_error);
    Py_DECREF(par_unicode_error);
    CHECK_OBJECT(par__warn_on_bytestring);
    Py_DECREF(par__warn_on_bytestring);
    CHECK_OBJECT(par__expect_unicode);
    Py_DECREF(par__expect_unicode);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__7_literal_processor(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_CellObject *par_dialect = Nuitka_Cell_New1(python_pars[1]);
    PyObject *var_process = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        struct Nuitka_CellObject *tmp_closure_1[1];

        tmp_closure_1[0] = par_dialect;
        Py_INCREF(tmp_closure_1[0]);

        tmp_assign_source_1 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__7_literal_processor$$$function__1_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_1;
    }
    // Tried code:
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__7_literal_processor$$$function__1_process(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_c36e7994bc212bb5c1b07a12afdd52de;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_c36e7994bc212bb5c1b07a12afdd52de = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_c36e7994bc212bb5c1b07a12afdd52de)) {
        Py_XDECREF(cache_frame_c36e7994bc212bb5c1b07a12afdd52de);

#if _DEBUG_REFCOUNTS
        if (cache_frame_c36e7994bc212bb5c1b07a12afdd52de == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_c36e7994bc212bb5c1b07a12afdd52de = MAKE_FUNCTION_FRAME(codeobj_c36e7994bc212bb5c1b07a12afdd52de, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_c36e7994bc212bb5c1b07a12afdd52de->m_type_description == NULL);
    frame_c36e7994bc212bb5c1b07a12afdd52de = cache_frame_c36e7994bc212bb5c1b07a12afdd52de;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_c36e7994bc212bb5c1b07a12afdd52de);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_c36e7994bc212bb5c1b07a12afdd52de) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_value);
        tmp_expression_value_1 = par_value;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[30]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        frame_c36e7994bc212bb5c1b07a12afdd52de->m_frame.f_lineno = 249;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_1, mod_consts[31]);

        Py_DECREF(tmp_called_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[32]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 251;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_3 = Nuitka_Cell_GET(self->m_closure[0]);
        tmp_expression_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[33]);
        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 251;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[34]);
        Py_DECREF(tmp_expression_value_2);
        if (tmp_attribute_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 251;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 251;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_4;
        CHECK_OBJECT(par_value);
        tmp_expression_value_4 = par_value;
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[30]);
        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 252;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        frame_c36e7994bc212bb5c1b07a12afdd52de->m_frame.f_lineno = 252;
        tmp_assign_source_2 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_2, mod_consts[35]);

        Py_DECREF(tmp_called_value_2);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 252;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_2;
            Py_DECREF(old);
        }

    }
    branch_no_1:;
    {
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        tmp_left_value_1 = mod_consts[36];
        CHECK_OBJECT(par_value);
        tmp_right_value_1 = par_value;
        tmp_return_value = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_left_value_1, tmp_right_value_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 254;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_c36e7994bc212bb5c1b07a12afdd52de);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_c36e7994bc212bb5c1b07a12afdd52de);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_c36e7994bc212bb5c1b07a12afdd52de);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_c36e7994bc212bb5c1b07a12afdd52de, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_c36e7994bc212bb5c1b07a12afdd52de->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_c36e7994bc212bb5c1b07a12afdd52de, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_c36e7994bc212bb5c1b07a12afdd52de,
        type_description_1,
        par_value,
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_c36e7994bc212bb5c1b07a12afdd52de == cache_frame_c36e7994bc212bb5c1b07a12afdd52de) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_c36e7994bc212bb5c1b07a12afdd52de);
        cache_frame_c36e7994bc212bb5c1b07a12afdd52de = NULL;
    }

    assertFrameObject(frame_c36e7994bc212bb5c1b07a12afdd52de);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    par_value = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_value);
    par_value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__8_bind_processor(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = Nuitka_Cell_New1(python_pars[0]);
    PyObject *par_dialect = python_pars[1];
    PyObject *var_process = NULL;
    struct Nuitka_CellObject *var_encoder = Nuitka_Cell_Empty();
    struct Nuitka_CellObject *var_warn_on_bytestring = Nuitka_Cell_Empty();
    struct Nuitka_FrameObject *frame_81bc495459da7a35f1e1139afa7d5da8;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_81bc495459da7a35f1e1139afa7d5da8 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_81bc495459da7a35f1e1139afa7d5da8)) {
        Py_XDECREF(cache_frame_81bc495459da7a35f1e1139afa7d5da8);

#if _DEBUG_REFCOUNTS
        if (cache_frame_81bc495459da7a35f1e1139afa7d5da8 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_81bc495459da7a35f1e1139afa7d5da8 = MAKE_FUNCTION_FRAME(codeobj_81bc495459da7a35f1e1139afa7d5da8, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_81bc495459da7a35f1e1139afa7d5da8->m_type_description == NULL);
    frame_81bc495459da7a35f1e1139afa7d5da8 = cache_frame_81bc495459da7a35f1e1139afa7d5da8;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_81bc495459da7a35f1e1139afa7d5da8);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_81bc495459da7a35f1e1139afa7d5da8) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_or_left_truth_1;
        nuitka_bool tmp_or_left_value_1;
        nuitka_bool tmp_or_right_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_attribute_value_2;
        int tmp_truth_name_2;
        CHECK_OBJECT(Nuitka_Cell_GET(par_self));
        tmp_expression_value_1 = Nuitka_Cell_GET(par_self);
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[24]);
        if (tmp_attribute_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 259;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 259;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        tmp_or_left_value_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_or_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 259;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        CHECK_OBJECT(par_dialect);
        tmp_expression_value_2 = par_dialect;
        tmp_attribute_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[37]);
        if (tmp_attribute_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 259;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_attribute_value_2);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_2);

            exception_lineno = 259;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        tmp_or_right_value_1 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_2);
        tmp_condition_result_1 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_condition_result_1 = tmp_or_left_value_1;
        or_end_1:;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_attribute_value_3;
        int tmp_truth_name_3;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_4;
        if (par_dialect == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[32]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 261;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_3 = par_dialect;
        tmp_attribute_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[38]);
        if (tmp_attribute_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 261;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_3 = CHECK_IF_TRUE(tmp_attribute_value_3);
        if (tmp_truth_name_3 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_3);

            exception_lineno = 261;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = tmp_truth_name_3 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_3);
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 261;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(Nuitka_Cell_GET(par_self));
        tmp_expression_value_4 = Nuitka_Cell_GET(par_self);
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[24]);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 262;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = mod_consts[18];
        tmp_and_right_value_1 = RICH_COMPARE_NE_NBOOL_OBJECT_UNICODE(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
        Py_DECREF(tmp_cmp_expr_left_1);
        if (tmp_and_right_value_1 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 262;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_2 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
        assert(tmp_condition_result_2 != NUITKA_BOOL_UNASSIGNED);
    }
    branch_yes_2:;
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_attribute_value_4;
        int tmp_truth_name_4;
        CHECK_OBJECT(Nuitka_Cell_GET(par_self));
        tmp_expression_value_5 = Nuitka_Cell_GET(par_self);
        tmp_attribute_value_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[26]);
        if (tmp_attribute_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 264;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_4 = CHECK_IF_TRUE(tmp_attribute_value_4);
        if (tmp_truth_name_4 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_4);

            exception_lineno = 264;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = tmp_truth_name_4 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_4);
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_assign_source_1;


        tmp_assign_source_1 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__8_bind_processor$$$function__1_process();

        assert(var_process == NULL);
        var_process = tmp_assign_source_1;
    }
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    goto branch_end_3;
    branch_no_3:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_end_3:;
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_expression_value_7;
        tmp_expression_value_6 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[40]);

        if (unlikely(tmp_expression_value_6 == NULL)) {
            tmp_expression_value_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[40]);
        }

        if (tmp_expression_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 279;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[41]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 279;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        if (par_dialect == NULL) {
            Py_DECREF(tmp_called_value_1);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[32]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 279;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_7 = par_dialect;
        tmp_args_element_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_7, mod_consts[42]);
        if (tmp_args_element_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 279;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        frame_81bc495459da7a35f1e1139afa7d5da8->m_frame.f_lineno = 279;
        tmp_assign_source_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_1, tmp_args_element_value_1);
        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 279;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_encoder) == NULL);
        PyCell_SET(var_encoder, tmp_assign_source_2);

    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_expression_value_8;
        CHECK_OBJECT(Nuitka_Cell_GET(par_self));
        tmp_expression_value_8 = Nuitka_Cell_GET(par_self);
        tmp_assign_source_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_8, mod_consts[26]);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 280;
            type_description_1 = "coocc";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_warn_on_bytestring) == NULL);
        PyCell_SET(var_warn_on_bytestring, tmp_assign_source_3);

    }
    {
        PyObject *tmp_assign_source_4;
        struct Nuitka_CellObject *tmp_closure_1[3];

        tmp_closure_1[0] = var_encoder;
        Py_INCREF(tmp_closure_1[0]);
        tmp_closure_1[1] = par_self;
        Py_INCREF(tmp_closure_1[1]);
        tmp_closure_1[2] = var_warn_on_bytestring;
        Py_INCREF(tmp_closure_1[2]);

        tmp_assign_source_4 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__8_bind_processor$$$function__2_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_4;
    }
    branch_end_2:;
    if (var_process == NULL) {

        FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[28]);
        exception_tb = NULL;
        NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
        CHAIN_EXCEPTION(exception_value);

        exception_lineno = 293;
        type_description_1 = "coocc";
        goto frame_exception_exit_1;
    }

    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    goto branch_end_1;
    branch_no_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_81bc495459da7a35f1e1139afa7d5da8);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_81bc495459da7a35f1e1139afa7d5da8);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_81bc495459da7a35f1e1139afa7d5da8);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_81bc495459da7a35f1e1139afa7d5da8, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_81bc495459da7a35f1e1139afa7d5da8->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_81bc495459da7a35f1e1139afa7d5da8, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_81bc495459da7a35f1e1139afa7d5da8,
        type_description_1,
        par_self,
        par_dialect,
        var_process,
        var_encoder,
        var_warn_on_bytestring
    );


    // Release cached frame if used for exception.
    if (frame_81bc495459da7a35f1e1139afa7d5da8 == cache_frame_81bc495459da7a35f1e1139afa7d5da8) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_81bc495459da7a35f1e1139afa7d5da8);
        cache_frame_81bc495459da7a35f1e1139afa7d5da8 = NULL;
    }

    assertFrameObject(frame_81bc495459da7a35f1e1139afa7d5da8);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_process);
    var_process = NULL;
    CHECK_OBJECT(var_encoder);
    Py_DECREF(var_encoder);
    var_encoder = NULL;
    CHECK_OBJECT(var_warn_on_bytestring);
    Py_DECREF(var_warn_on_bytestring);
    var_warn_on_bytestring = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_process);
    var_process = NULL;
    CHECK_OBJECT(var_encoder);
    Py_DECREF(var_encoder);
    var_encoder = NULL;
    CHECK_OBJECT(var_warn_on_bytestring);
    Py_DECREF(var_warn_on_bytestring);
    var_warn_on_bytestring = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__8_bind_processor$$$function__1_process(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_a8d5175f36cbc474b0daf68ecfd3ed5d;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_a8d5175f36cbc474b0daf68ecfd3ed5d = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_a8d5175f36cbc474b0daf68ecfd3ed5d)) {
        Py_XDECREF(cache_frame_a8d5175f36cbc474b0daf68ecfd3ed5d);

#if _DEBUG_REFCOUNTS
        if (cache_frame_a8d5175f36cbc474b0daf68ecfd3ed5d == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_a8d5175f36cbc474b0daf68ecfd3ed5d = MAKE_FUNCTION_FRAME(codeobj_a8d5175f36cbc474b0daf68ecfd3ed5d, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_a8d5175f36cbc474b0daf68ecfd3ed5d->m_type_description == NULL);
    frame_a8d5175f36cbc474b0daf68ecfd3ed5d = cache_frame_a8d5175f36cbc474b0daf68ecfd3ed5d;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_a8d5175f36cbc474b0daf68ecfd3ed5d);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_a8d5175f36cbc474b0daf68ecfd3ed5d) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_value);
        tmp_isinstance_inst_1 = par_value;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 267;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[44]);
        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 267;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 267;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_3;
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 268;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[45]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 268;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[46];
        tmp_called_instance_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_called_instance_1 == NULL)) {
            tmp_called_instance_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
        }

        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 271;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_value);
        tmp_args_element_value_3 = par_value;
        frame_a8d5175f36cbc474b0daf68ecfd3ed5d->m_frame.f_lineno = 271;
        tmp_tuple_element_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[47], tmp_args_element_value_3);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 271;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_2 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_element_value_2, 0, tmp_tuple_element_1);
        frame_a8d5175f36cbc474b0daf68ecfd3ed5d->m_frame.f_lineno = 268;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_2);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 268;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    branch_no_1:;
    if (par_value == NULL) {

        FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[48]);
        exception_tb = NULL;
        NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
        CHAIN_EXCEPTION(exception_value);

        exception_lineno = 273;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }

    tmp_return_value = par_value;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a8d5175f36cbc474b0daf68ecfd3ed5d);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_a8d5175f36cbc474b0daf68ecfd3ed5d);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a8d5175f36cbc474b0daf68ecfd3ed5d);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a8d5175f36cbc474b0daf68ecfd3ed5d, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_a8d5175f36cbc474b0daf68ecfd3ed5d->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a8d5175f36cbc474b0daf68ecfd3ed5d, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_a8d5175f36cbc474b0daf68ecfd3ed5d,
        type_description_1,
        par_value
    );


    // Release cached frame if used for exception.
    if (frame_a8d5175f36cbc474b0daf68ecfd3ed5d == cache_frame_a8d5175f36cbc474b0daf68ecfd3ed5d) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_a8d5175f36cbc474b0daf68ecfd3ed5d);
        cache_frame_a8d5175f36cbc474b0daf68ecfd3ed5d = NULL;
    }

    assertFrameObject(frame_a8d5175f36cbc474b0daf68ecfd3ed5d);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__8_bind_processor$$$function__2_process(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_dc9c90d4e39e91b260ea6725b3645a83;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_dc9c90d4e39e91b260ea6725b3645a83 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_dc9c90d4e39e91b260ea6725b3645a83)) {
        Py_XDECREF(cache_frame_dc9c90d4e39e91b260ea6725b3645a83);

#if _DEBUG_REFCOUNTS
        if (cache_frame_dc9c90d4e39e91b260ea6725b3645a83 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_dc9c90d4e39e91b260ea6725b3645a83 = MAKE_FUNCTION_FRAME(codeobj_dc9c90d4e39e91b260ea6725b3645a83, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_dc9c90d4e39e91b260ea6725b3645a83->m_type_description == NULL);
    frame_dc9c90d4e39e91b260ea6725b3645a83 = cache_frame_dc9c90d4e39e91b260ea6725b3645a83;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_dc9c90d4e39e91b260ea6725b3645a83);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_dc9c90d4e39e91b260ea6725b3645a83) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_value);
        tmp_isinstance_inst_1 = par_value;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 283;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[49]);
        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 283;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 283;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_expression_value_2;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_subscript_value_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[50]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 284;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }

        tmp_called_value_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 284;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_3 = Nuitka_Cell_GET(self->m_closure[1]);
        tmp_args_element_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[25]);
        if (tmp_args_element_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        frame_dc9c90d4e39e91b260ea6725b3645a83->m_frame.f_lineno = 284;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_expression_value_2 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_args_element_value_2);
        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        tmp_subscript_value_1 = mod_consts[52];
        tmp_return_value = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_2, tmp_subscript_value_1, 0);
        Py_DECREF(tmp_expression_value_2);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 284;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        int tmp_truth_name_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        if (Nuitka_Cell_GET(self->m_closure[2]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[53]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 285;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_1 = CHECK_IF_TRUE(Nuitka_Cell_GET(self->m_closure[2]));
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 285;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 285;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(par_value);
        tmp_cmp_expr_left_1 = par_value;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_and_right_value_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_2 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_5;
        tmp_expression_value_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_4 == NULL)) {
            tmp_expression_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
        }

        if (tmp_expression_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[45]);
        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_3 = mod_consts[46];
        tmp_called_instance_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_called_instance_1 == NULL)) {
            tmp_called_instance_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
        }

        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 289;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_value);
        tmp_args_element_value_5 = par_value;
        frame_dc9c90d4e39e91b260ea6725b3645a83->m_frame.f_lineno = 289;
        tmp_tuple_element_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[47], tmp_args_element_value_5);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 289;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_4 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_element_value_4, 0, tmp_tuple_element_1);
        frame_dc9c90d4e39e91b260ea6725b3645a83->m_frame.f_lineno = 286;
        {
            PyObject *call_args[] = {tmp_args_element_value_3, tmp_args_element_value_4};
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_2, call_args);
        }

        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_4);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    branch_no_2:;
    branch_end_1:;
    if (par_value == NULL) {

        FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[48]);
        exception_tb = NULL;
        NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
        CHAIN_EXCEPTION(exception_value);

        exception_lineno = 291;
        type_description_1 = "occc";
        goto frame_exception_exit_1;
    }

    tmp_return_value = par_value;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_dc9c90d4e39e91b260ea6725b3645a83);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_dc9c90d4e39e91b260ea6725b3645a83);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_dc9c90d4e39e91b260ea6725b3645a83);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_dc9c90d4e39e91b260ea6725b3645a83, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_dc9c90d4e39e91b260ea6725b3645a83->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_dc9c90d4e39e91b260ea6725b3645a83, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_dc9c90d4e39e91b260ea6725b3645a83,
        type_description_1,
        par_value,
        self->m_closure[0],
        self->m_closure[1],
        self->m_closure[2]
    );


    // Release cached frame if used for exception.
    if (frame_dc9c90d4e39e91b260ea6725b3645a83 == cache_frame_dc9c90d4e39e91b260ea6725b3645a83) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_dc9c90d4e39e91b260ea6725b3645a83);
        cache_frame_dc9c90d4e39e91b260ea6725b3645a83 = NULL;
    }

    assertFrameObject(frame_dc9c90d4e39e91b260ea6725b3645a83);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__9_result_processor(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    PyObject *par_coltype = python_pars[2];
    PyObject *var_wants_unicode = NULL;
    PyObject *var_needs_convert = NULL;
    PyObject *var_needs_isinstance = NULL;
    struct Nuitka_FrameObject *frame_1b34e3bd40d8681fa037c2b35e766719;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_1b34e3bd40d8681fa037c2b35e766719 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_1b34e3bd40d8681fa037c2b35e766719)) {
        Py_XDECREF(cache_frame_1b34e3bd40d8681fa037c2b35e766719);

#if _DEBUG_REFCOUNTS
        if (cache_frame_1b34e3bd40d8681fa037c2b35e766719 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_1b34e3bd40d8681fa037c2b35e766719 = MAKE_FUNCTION_FRAME(codeobj_1b34e3bd40d8681fa037c2b35e766719, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_1b34e3bd40d8681fa037c2b35e766719->m_type_description == NULL);
    frame_1b34e3bd40d8681fa037c2b35e766719 = cache_frame_1b34e3bd40d8681fa037c2b35e766719;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_1b34e3bd40d8681fa037c2b35e766719);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_1b34e3bd40d8681fa037c2b35e766719) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_or_left_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[24]);
        if (tmp_or_left_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 298;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_or_left_truth_1 = CHECK_IF_TRUE(tmp_or_left_value_1);
        if (tmp_or_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_or_left_value_1);

            exception_lineno = 298;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        Py_DECREF(tmp_or_left_value_1);
        CHECK_OBJECT(par_dialect);
        tmp_expression_value_2 = par_dialect;
        tmp_or_right_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[37]);
        if (tmp_or_right_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 298;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_assign_source_1 = tmp_or_left_value_1;
        or_end_1:;
        assert(var_wants_unicode == NULL);
        var_wants_unicode = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        int tmp_and_left_truth_1;
        PyObject *tmp_and_left_value_1;
        PyObject *tmp_and_right_value_1;
        int tmp_or_left_truth_2;
        PyObject *tmp_or_left_value_2;
        PyObject *tmp_or_right_value_2;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        PyObject *tmp_expression_value_4;
        CHECK_OBJECT(var_wants_unicode);
        tmp_and_left_value_1 = var_wants_unicode;
        tmp_and_left_truth_1 = CHECK_IF_TRUE(tmp_and_left_value_1);
        if (tmp_and_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 299;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        if (par_dialect == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[32]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 300;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_3 = par_dialect;
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[54]);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = Py_True;
        tmp_or_left_value_2 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? Py_True : Py_False;
        Py_DECREF(tmp_cmp_expr_left_1);
        tmp_or_left_truth_2 = CHECK_IF_TRUE(tmp_or_left_value_2);
        if (tmp_or_left_truth_2 == 1) {
            goto or_left_2;
        } else {
            goto or_right_2;
        }
        or_right_2:;
        CHECK_OBJECT(par_self);
        tmp_expression_value_4 = par_self;
        tmp_cmp_expr_left_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[24]);
        if (tmp_cmp_expr_left_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 301;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_2 = mod_consts[55];
        tmp_res = PySequence_Contains(tmp_cmp_expr_right_2, tmp_cmp_expr_left_2);
        Py_DECREF(tmp_cmp_expr_left_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 301;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_or_right_value_2 = (tmp_res == 1) ? Py_True : Py_False;
        tmp_and_right_value_1 = tmp_or_right_value_2;
        goto or_end_2;
        or_left_2:;
        tmp_and_right_value_1 = tmp_or_left_value_2;
        or_end_2:;
        tmp_assign_source_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_assign_source_2 = tmp_and_left_value_1;
        and_end_1:;
        assert(var_needs_convert == NULL);
        Py_INCREF(tmp_assign_source_2);
        var_needs_convert = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        int tmp_and_left_truth_2;
        PyObject *tmp_and_left_value_2;
        PyObject *tmp_and_right_value_2;
        int tmp_and_left_truth_3;
        PyObject *tmp_and_left_value_3;
        PyObject *tmp_and_right_value_3;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_cmp_expr_left_3;
        PyObject *tmp_cmp_expr_right_3;
        PyObject *tmp_expression_value_6;
        CHECK_OBJECT(var_needs_convert);
        tmp_and_left_value_2 = var_needs_convert;
        tmp_and_left_truth_2 = CHECK_IF_TRUE(tmp_and_left_value_2);
        if (tmp_and_left_truth_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 304;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_2 == 1) {
            goto and_right_2;
        } else {
            goto and_left_2;
        }
        and_right_2:;
        if (par_dialect == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[32]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 305;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_5 = par_dialect;
        tmp_and_left_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[54]);
        if (tmp_and_left_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 305;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_truth_3 = CHECK_IF_TRUE(tmp_and_left_value_3);
        if (tmp_and_left_truth_3 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_and_left_value_3);

            exception_lineno = 305;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_3 == 1) {
            goto and_right_3;
        } else {
            goto and_left_3;
        }
        and_right_3:;
        Py_DECREF(tmp_and_left_value_3);
        CHECK_OBJECT(par_self);
        tmp_expression_value_6 = par_self;
        tmp_cmp_expr_left_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[24]);
        if (tmp_cmp_expr_left_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 306;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_3 = mod_consts[56];
        tmp_and_right_value_3 = RICH_COMPARE_NE_OBJECT_OBJECT_UNICODE(tmp_cmp_expr_left_3, tmp_cmp_expr_right_3);
        Py_DECREF(tmp_cmp_expr_left_3);
        if (tmp_and_right_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 306;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_2 = tmp_and_right_value_3;
        goto and_end_3;
        and_left_3:;
        tmp_and_right_value_2 = tmp_and_left_value_3;
        and_end_3:;
        tmp_assign_source_3 = tmp_and_right_value_2;
        goto and_end_2;
        and_left_2:;
        Py_INCREF(tmp_and_left_value_2);
        tmp_assign_source_3 = tmp_and_left_value_2;
        and_end_2:;
        assert(var_needs_isinstance == NULL);
        var_needs_isinstance = tmp_assign_source_3;
    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(var_needs_convert);
        tmp_truth_name_1 = CHECK_IF_TRUE(var_needs_convert);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 308;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_truth_name_2;
        CHECK_OBJECT(var_needs_isinstance);
        tmp_truth_name_2 = CHECK_IF_TRUE(var_needs_isinstance);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 309;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_expression_value_8;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_expression_value_9;
        tmp_expression_value_7 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[57]);

        if (unlikely(tmp_expression_value_7 == NULL)) {
            tmp_expression_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[57]);
        }

        if (tmp_expression_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 310;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_7, mod_consts[58]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 310;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        if (par_dialect == NULL) {
            Py_DECREF(tmp_called_value_1);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[32]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 311;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_8 = par_dialect;
        tmp_args_element_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_8, mod_consts[42]);
        if (tmp_args_element_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 311;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_9 = par_self;
        tmp_args_element_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_9, mod_consts[25]);
        if (tmp_args_element_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_args_element_value_1);

            exception_lineno = 311;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        frame_1b34e3bd40d8681fa037c2b35e766719->m_frame.f_lineno = 310;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        Py_DECREF(tmp_args_element_value_2);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 310;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_10;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_expression_value_11;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_expression_value_12;
        tmp_expression_value_10 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[57]);

        if (unlikely(tmp_expression_value_10 == NULL)) {
            tmp_expression_value_10 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[57]);
        }

        if (tmp_expression_value_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 314;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_10, mod_consts[59]);
        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 314;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        if (par_dialect == NULL) {
            Py_DECREF(tmp_called_value_2);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[32]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 315;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_11 = par_dialect;
        tmp_args_element_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_11, mod_consts[42]);
        if (tmp_args_element_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 315;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_12 = par_self;
        tmp_args_element_value_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_12, mod_consts[25]);
        if (tmp_args_element_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_args_element_value_3);

            exception_lineno = 315;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        frame_1b34e3bd40d8681fa037c2b35e766719->m_frame.f_lineno = 314;
        {
            PyObject *call_args[] = {tmp_args_element_value_3, tmp_args_element_value_4};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_2, call_args);
        }

        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_3);
        Py_DECREF(tmp_args_element_value_4);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 314;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_end_2:;
    goto branch_end_1;
    branch_no_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_1b34e3bd40d8681fa037c2b35e766719);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_1b34e3bd40d8681fa037c2b35e766719);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_1b34e3bd40d8681fa037c2b35e766719);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_1b34e3bd40d8681fa037c2b35e766719, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_1b34e3bd40d8681fa037c2b35e766719->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_1b34e3bd40d8681fa037c2b35e766719, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_1b34e3bd40d8681fa037c2b35e766719,
        type_description_1,
        par_self,
        par_dialect,
        par_coltype,
        var_wants_unicode,
        var_needs_convert,
        var_needs_isinstance
    );


    // Release cached frame if used for exception.
    if (frame_1b34e3bd40d8681fa037c2b35e766719 == cache_frame_1b34e3bd40d8681fa037c2b35e766719) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_1b34e3bd40d8681fa037c2b35e766719);
        cache_frame_1b34e3bd40d8681fa037c2b35e766719 = NULL;
    }

    assertFrameObject(frame_1b34e3bd40d8681fa037c2b35e766719);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_wants_unicode);
    Py_DECREF(var_wants_unicode);
    var_wants_unicode = NULL;
    CHECK_OBJECT(var_needs_convert);
    Py_DECREF(var_needs_convert);
    var_needs_convert = NULL;
    CHECK_OBJECT(var_needs_isinstance);
    Py_DECREF(var_needs_isinstance);
    var_needs_isinstance = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_wants_unicode);
    var_wants_unicode = NULL;
    Py_XDECREF(var_needs_convert);
    var_needs_convert = NULL;
    Py_XDECREF(var_needs_isinstance);
    var_needs_isinstance = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__10_python_type(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_8eeafd0a23a514f068dca3b32200ad71;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_8eeafd0a23a514f068dca3b32200ad71 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_8eeafd0a23a514f068dca3b32200ad71)) {
        Py_XDECREF(cache_frame_8eeafd0a23a514f068dca3b32200ad71);

#if _DEBUG_REFCOUNTS
        if (cache_frame_8eeafd0a23a514f068dca3b32200ad71 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_8eeafd0a23a514f068dca3b32200ad71 = MAKE_FUNCTION_FRAME(codeobj_8eeafd0a23a514f068dca3b32200ad71, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_8eeafd0a23a514f068dca3b32200ad71->m_type_description == NULL);
    frame_8eeafd0a23a514f068dca3b32200ad71 = cache_frame_8eeafd0a23a514f068dca3b32200ad71;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_8eeafd0a23a514f068dca3b32200ad71);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_8eeafd0a23a514f068dca3b32200ad71) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[24]);
        if (tmp_attribute_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 322;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 322;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_expression_value_2;
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 323;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[49]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 323;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    tmp_return_value = (PyObject *)&PyUnicode_Type;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_8eeafd0a23a514f068dca3b32200ad71);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_8eeafd0a23a514f068dca3b32200ad71);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_8eeafd0a23a514f068dca3b32200ad71);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_8eeafd0a23a514f068dca3b32200ad71, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_8eeafd0a23a514f068dca3b32200ad71->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_8eeafd0a23a514f068dca3b32200ad71, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_8eeafd0a23a514f068dca3b32200ad71,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_8eeafd0a23a514f068dca3b32200ad71 == cache_frame_8eeafd0a23a514f068dca3b32200ad71) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_8eeafd0a23a514f068dca3b32200ad71);
        cache_frame_8eeafd0a23a514f068dca3b32200ad71 = NULL;
    }

    assertFrameObject(frame_8eeafd0a23a514f068dca3b32200ad71);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__11_get_dbapi_type(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dbapi = python_pars[1];
    struct Nuitka_FrameObject *frame_a2871293caed309651ea4a744447c14b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_a2871293caed309651ea4a744447c14b = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_a2871293caed309651ea4a744447c14b)) {
        Py_XDECREF(cache_frame_a2871293caed309651ea4a744447c14b);

#if _DEBUG_REFCOUNTS
        if (cache_frame_a2871293caed309651ea4a744447c14b == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_a2871293caed309651ea4a744447c14b = MAKE_FUNCTION_FRAME(codeobj_a2871293caed309651ea4a744447c14b, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_a2871293caed309651ea4a744447c14b->m_type_description == NULL);
    frame_a2871293caed309651ea4a744447c14b = cache_frame_a2871293caed309651ea4a744447c14b;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_a2871293caed309651ea4a744447c14b);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_a2871293caed309651ea4a744447c14b) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_dbapi);
        tmp_expression_value_1 = par_dbapi;
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[60]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a2871293caed309651ea4a744447c14b);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_a2871293caed309651ea4a744447c14b);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a2871293caed309651ea4a744447c14b);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a2871293caed309651ea4a744447c14b, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_a2871293caed309651ea4a744447c14b->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a2871293caed309651ea4a744447c14b, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_a2871293caed309651ea4a744447c14b,
        type_description_1,
        par_self,
        par_dbapi
    );


    // Release cached frame if used for exception.
    if (frame_a2871293caed309651ea4a744447c14b == cache_frame_a2871293caed309651ea4a744447c14b) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_a2871293caed309651ea4a744447c14b);
        cache_frame_a2871293caed309651ea4a744447c14b = NULL;
    }

    assertFrameObject(frame_a2871293caed309651ea4a744447c14b);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dbapi);
    Py_DECREF(par_dbapi);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dbapi);
    Py_DECREF(par_dbapi);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__12__warn_deprecated_unicode(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_cls = python_pars[0];
    struct Nuitka_FrameObject *frame_98170ba504fa88cccd4e23f59b258463;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_98170ba504fa88cccd4e23f59b258463 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_98170ba504fa88cccd4e23f59b258463)) {
        Py_XDECREF(cache_frame_98170ba504fa88cccd4e23f59b258463);

#if _DEBUG_REFCOUNTS
        if (cache_frame_98170ba504fa88cccd4e23f59b258463 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_98170ba504fa88cccd4e23f59b258463 = MAKE_FUNCTION_FRAME(codeobj_98170ba504fa88cccd4e23f59b258463, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_98170ba504fa88cccd4e23f59b258463->m_type_description == NULL);
    frame_98170ba504fa88cccd4e23f59b258463 = cache_frame_98170ba504fa88cccd4e23f59b258463;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_98170ba504fa88cccd4e23f59b258463);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_98170ba504fa88cccd4e23f59b258463) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        tmp_called_instance_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_called_instance_1 == NULL)) {
            tmp_called_instance_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
        }

        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_98170ba504fa88cccd4e23f59b258463->m_frame.f_lineno = 332;
        tmp_call_result_1 = CALL_METHOD_WITH_SINGLE_ARG(
            tmp_called_instance_1,
            mod_consts[61],
            PyTuple_GET_ITEM(mod_consts[62], 0)
        );

        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_98170ba504fa88cccd4e23f59b258463);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_98170ba504fa88cccd4e23f59b258463);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_98170ba504fa88cccd4e23f59b258463, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_98170ba504fa88cccd4e23f59b258463->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_98170ba504fa88cccd4e23f59b258463, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_98170ba504fa88cccd4e23f59b258463,
        type_description_1,
        par_cls
    );


    // Release cached frame if used for exception.
    if (frame_98170ba504fa88cccd4e23f59b258463 == cache_frame_98170ba504fa88cccd4e23f59b258463) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_98170ba504fa88cccd4e23f59b258463);
        cache_frame_98170ba504fa88cccd4e23f59b258463 = NULL;
    }

    assertFrameObject(frame_98170ba504fa88cccd4e23f59b258463);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_cls);
    Py_DECREF(par_cls);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_cls);
    Py_DECREF(par_cls);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__13___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_length = python_pars[1];
    PyObject *par_kwargs = python_pars[2];
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    struct Nuitka_FrameObject *frame_51654e74df76627f13ae9c2a2ea727c1;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_51654e74df76627f13ae9c2a2ea727c1 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        PyObject *tmp_dict_arg_value_1;
        PyObject *tmp_key_value_1;
        PyObject *tmp_default_value_1;
        PyObject *tmp_capi_result_1;
        CHECK_OBJECT(par_kwargs);
        tmp_dict_arg_value_1 = par_kwargs;
        tmp_key_value_1 = mod_consts[24];
        tmp_default_value_1 = Py_True;
        tmp_capi_result_1 = DICT_SETDEFAULT3(tmp_dict_arg_value_1, tmp_key_value_1, tmp_default_value_1);
        assert(!(tmp_capi_result_1 == NULL));
        Py_DECREF(tmp_capi_result_1);
    }
    if (isFrameUnusable(cache_frame_51654e74df76627f13ae9c2a2ea727c1)) {
        Py_XDECREF(cache_frame_51654e74df76627f13ae9c2a2ea727c1);

#if _DEBUG_REFCOUNTS
        if (cache_frame_51654e74df76627f13ae9c2a2ea727c1 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_51654e74df76627f13ae9c2a2ea727c1 = MAKE_FUNCTION_FRAME(codeobj_51654e74df76627f13ae9c2a2ea727c1, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_51654e74df76627f13ae9c2a2ea727c1->m_type_description == NULL);
    frame_51654e74df76627f13ae9c2a2ea727c1 = cache_frame_51654e74df76627f13ae9c2a2ea727c1;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_51654e74df76627f13ae9c2a2ea727c1);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_51654e74df76627f13ae9c2a2ea727c1) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT(par_kwargs);
        tmp_expression_value_1 = par_kwargs;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[63]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 424;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        frame_51654e74df76627f13ae9c2a2ea727c1->m_frame.f_lineno = 424;
        tmp_call_result_1 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_1, mod_consts[64]);

        Py_DECREF(tmp_called_value_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 424;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_dircall_arg3_1;
        PyObject *tmp_call_result_2;
        tmp_type_arg_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[65]);

        if (unlikely(tmp_type_arg_value_1 == NULL)) {
            tmp_type_arg_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[65]);
        }

        if (tmp_type_arg_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 425;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_object_arg_value_1 = par_self;
        tmp_expression_value_2 = BUILTIN_SUPER2(tmp_type_arg_value_1, tmp_object_arg_value_1);
        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 425;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[66]);
        Py_DECREF(tmp_expression_value_2);
        if (tmp_dircall_arg1_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 425;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = mod_consts[22];
        CHECK_OBJECT(par_length);
        tmp_dict_value_1 = par_length;
        tmp_dircall_arg2_1 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_dircall_arg2_1, tmp_dict_key_1, tmp_dict_value_1);
        assert(!(tmp_res != 0));
        CHECK_OBJECT(par_kwargs);
        tmp_dircall_arg3_1 = par_kwargs;
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_call_result_2 = impl___main__$$$function__16_complex_call_helper_keywords_star_dict(dir_call_args);
        }
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 425;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_51654e74df76627f13ae9c2a2ea727c1);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_51654e74df76627f13ae9c2a2ea727c1);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_51654e74df76627f13ae9c2a2ea727c1, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_51654e74df76627f13ae9c2a2ea727c1->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_51654e74df76627f13ae9c2a2ea727c1, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_51654e74df76627f13ae9c2a2ea727c1,
        type_description_1,
        par_self,
        par_length,
        par_kwargs,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_51654e74df76627f13ae9c2a2ea727c1 == cache_frame_51654e74df76627f13ae9c2a2ea727c1) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_51654e74df76627f13ae9c2a2ea727c1);
        cache_frame_51654e74df76627f13ae9c2a2ea727c1 = NULL;
    }

    assertFrameObject(frame_51654e74df76627f13ae9c2a2ea727c1);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_length);
    Py_DECREF(par_length);
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_length);
    Py_DECREF(par_length);
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__14___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_length = python_pars[1];
    PyObject *par_kwargs = python_pars[2];
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    struct Nuitka_FrameObject *frame_697faab2681508b3798a98b9058765c8;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_697faab2681508b3798a98b9058765c8 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        PyObject *tmp_dict_arg_value_1;
        PyObject *tmp_key_value_1;
        PyObject *tmp_default_value_1;
        PyObject *tmp_capi_result_1;
        CHECK_OBJECT(par_kwargs);
        tmp_dict_arg_value_1 = par_kwargs;
        tmp_key_value_1 = mod_consts[24];
        tmp_default_value_1 = Py_True;
        tmp_capi_result_1 = DICT_SETDEFAULT3(tmp_dict_arg_value_1, tmp_key_value_1, tmp_default_value_1);
        assert(!(tmp_capi_result_1 == NULL));
        Py_DECREF(tmp_capi_result_1);
    }
    if (isFrameUnusable(cache_frame_697faab2681508b3798a98b9058765c8)) {
        Py_XDECREF(cache_frame_697faab2681508b3798a98b9058765c8);

#if _DEBUG_REFCOUNTS
        if (cache_frame_697faab2681508b3798a98b9058765c8 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_697faab2681508b3798a98b9058765c8 = MAKE_FUNCTION_FRAME(codeobj_697faab2681508b3798a98b9058765c8, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_697faab2681508b3798a98b9058765c8->m_type_description == NULL);
    frame_697faab2681508b3798a98b9058765c8 = cache_frame_697faab2681508b3798a98b9058765c8;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_697faab2681508b3798a98b9058765c8);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_697faab2681508b3798a98b9058765c8) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT(par_kwargs);
        tmp_expression_value_1 = par_kwargs;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[63]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 453;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        frame_697faab2681508b3798a98b9058765c8->m_frame.f_lineno = 453;
        tmp_call_result_1 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_1, mod_consts[64]);

        Py_DECREF(tmp_called_value_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 453;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_dircall_arg3_1;
        PyObject *tmp_call_result_2;
        tmp_type_arg_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[68]);

        if (unlikely(tmp_type_arg_value_1 == NULL)) {
            tmp_type_arg_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[68]);
        }

        if (tmp_type_arg_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 454;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_object_arg_value_1 = par_self;
        tmp_expression_value_2 = BUILTIN_SUPER2(tmp_type_arg_value_1, tmp_object_arg_value_1);
        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 454;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[66]);
        Py_DECREF(tmp_expression_value_2);
        if (tmp_dircall_arg1_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 454;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = mod_consts[22];
        CHECK_OBJECT(par_length);
        tmp_dict_value_1 = par_length;
        tmp_dircall_arg2_1 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_dircall_arg2_1, tmp_dict_key_1, tmp_dict_value_1);
        assert(!(tmp_res != 0));
        CHECK_OBJECT(par_kwargs);
        tmp_dircall_arg3_1 = par_kwargs;
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_call_result_2 = impl___main__$$$function__16_complex_call_helper_keywords_star_dict(dir_call_args);
        }
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 454;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_697faab2681508b3798a98b9058765c8);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_697faab2681508b3798a98b9058765c8);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_697faab2681508b3798a98b9058765c8, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_697faab2681508b3798a98b9058765c8->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_697faab2681508b3798a98b9058765c8, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_697faab2681508b3798a98b9058765c8,
        type_description_1,
        par_self,
        par_length,
        par_kwargs,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_697faab2681508b3798a98b9058765c8 == cache_frame_697faab2681508b3798a98b9058765c8) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_697faab2681508b3798a98b9058765c8);
        cache_frame_697faab2681508b3798a98b9058765c8 = NULL;
    }

    assertFrameObject(frame_697faab2681508b3798a98b9058765c8);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_length);
    Py_DECREF(par_length);
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_length);
    Py_DECREF(par_length);
    CHECK_OBJECT(par_kwargs);
    Py_DECREF(par_kwargs);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__16_get_dbapi_type(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dbapi = python_pars[1];
    struct Nuitka_FrameObject *frame_19f7812994aeaf50575de802808c1910;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_19f7812994aeaf50575de802808c1910 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_19f7812994aeaf50575de802808c1910)) {
        Py_XDECREF(cache_frame_19f7812994aeaf50575de802808c1910);

#if _DEBUG_REFCOUNTS
        if (cache_frame_19f7812994aeaf50575de802808c1910 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_19f7812994aeaf50575de802808c1910 = MAKE_FUNCTION_FRAME(codeobj_19f7812994aeaf50575de802808c1910, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_19f7812994aeaf50575de802808c1910->m_type_description == NULL);
    frame_19f7812994aeaf50575de802808c1910 = cache_frame_19f7812994aeaf50575de802808c1910;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_19f7812994aeaf50575de802808c1910);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_19f7812994aeaf50575de802808c1910) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_dbapi);
        tmp_expression_value_1 = par_dbapi;
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[70]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 467;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_19f7812994aeaf50575de802808c1910);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_19f7812994aeaf50575de802808c1910);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_19f7812994aeaf50575de802808c1910);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_19f7812994aeaf50575de802808c1910, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_19f7812994aeaf50575de802808c1910->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_19f7812994aeaf50575de802808c1910, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_19f7812994aeaf50575de802808c1910,
        type_description_1,
        par_self,
        par_dbapi
    );


    // Release cached frame if used for exception.
    if (frame_19f7812994aeaf50575de802808c1910 == cache_frame_19f7812994aeaf50575de802808c1910) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_19f7812994aeaf50575de802808c1910);
        cache_frame_19f7812994aeaf50575de802808c1910 = NULL;
    }

    assertFrameObject(frame_19f7812994aeaf50575de802808c1910);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dbapi);
    Py_DECREF(par_dbapi);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dbapi);
    Py_DECREF(par_dbapi);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__18_literal_processor(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    PyObject *var_process = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;


        tmp_assign_source_1 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__18_literal_processor$$$function__1_process();

        assert(var_process == NULL);
        var_process = tmp_assign_source_1;
    }
    // Tried code:
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__18_literal_processor$$$function__1_process(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_5130bb61216b451d0eb1f14864720cad;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_5130bb61216b451d0eb1f14864720cad = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_5130bb61216b451d0eb1f14864720cad)) {
        Py_XDECREF(cache_frame_5130bb61216b451d0eb1f14864720cad);

#if _DEBUG_REFCOUNTS
        if (cache_frame_5130bb61216b451d0eb1f14864720cad == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_5130bb61216b451d0eb1f14864720cad = MAKE_FUNCTION_FRAME(codeobj_5130bb61216b451d0eb1f14864720cad, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_5130bb61216b451d0eb1f14864720cad->m_type_description == NULL);
    frame_5130bb61216b451d0eb1f14864720cad = cache_frame_5130bb61216b451d0eb1f14864720cad;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_5130bb61216b451d0eb1f14864720cad);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_5130bb61216b451d0eb1f14864720cad) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_unicode_arg_1;
        CHECK_OBJECT(par_value);
        tmp_unicode_arg_1 = par_value;
        tmp_return_value = PyObject_Unicode(tmp_unicode_arg_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 475;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_5130bb61216b451d0eb1f14864720cad);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_5130bb61216b451d0eb1f14864720cad);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_5130bb61216b451d0eb1f14864720cad);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_5130bb61216b451d0eb1f14864720cad, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_5130bb61216b451d0eb1f14864720cad->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_5130bb61216b451d0eb1f14864720cad, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_5130bb61216b451d0eb1f14864720cad,
        type_description_1,
        par_value
    );


    // Release cached frame if used for exception.
    if (frame_5130bb61216b451d0eb1f14864720cad == cache_frame_5130bb61216b451d0eb1f14864720cad) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_5130bb61216b451d0eb1f14864720cad);
        cache_frame_5130bb61216b451d0eb1f14864720cad = NULL;
    }

    assertFrameObject(frame_5130bb61216b451d0eb1f14864720cad);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__19__expression_adaptations(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_35db4acbd81c58a447a779e82586ae91;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_35db4acbd81c58a447a779e82586ae91 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_35db4acbd81c58a447a779e82586ae91)) {
        Py_XDECREF(cache_frame_35db4acbd81c58a447a779e82586ae91);

#if _DEBUG_REFCOUNTS
        if (cache_frame_35db4acbd81c58a447a779e82586ae91 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_35db4acbd81c58a447a779e82586ae91 = MAKE_FUNCTION_FRAME(codeobj_35db4acbd81c58a447a779e82586ae91, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_35db4acbd81c58a447a779e82586ae91->m_type_description == NULL);
    frame_35db4acbd81c58a447a779e82586ae91 = cache_frame_35db4acbd81c58a447a779e82586ae91;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_35db4acbd81c58a447a779e82586ae91);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_35db4acbd81c58a447a779e82586ae91) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 484;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[7]);
        if (tmp_dict_key_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 484;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[72]);

        if (unlikely(tmp_dict_key_2 == NULL)) {
            tmp_dict_key_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[72]);
        }

        if (tmp_dict_key_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_dict_key_1);

            exception_lineno = 485;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[72]);

        if (unlikely(tmp_dict_value_2 == NULL)) {
            tmp_dict_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[72]);
        }

        if (tmp_dict_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_dict_key_1);

            exception_lineno = 485;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_value_1 = _PyDict_NewPresized( 3 );
        {
            PyObject *tmp_expression_value_2;
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 485;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_dict_key_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[73]);

            if (unlikely(tmp_dict_key_2 == NULL)) {
                tmp_dict_key_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
            }

            if (tmp_dict_key_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 486;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_2 = par_self;
            tmp_dict_value_2 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_2);
            if (tmp_dict_value_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 486;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
            Py_DECREF(tmp_dict_value_2);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 486;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_dict_key_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[74]);

            if (unlikely(tmp_dict_key_2 == NULL)) {
                tmp_dict_key_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[74]);
            }

            if (tmp_dict_key_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 487;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_dict_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[74]);

            if (unlikely(tmp_dict_value_2 == NULL)) {
                tmp_dict_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[74]);
            }

            if (tmp_dict_value_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 487;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 487;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
        }
        goto dict_build_noexception_1;
        // Exception handling pass through code for dict_build:
        dict_build_exception_1:;
        Py_DECREF(tmp_dict_key_1);
        Py_DECREF(tmp_dict_value_1);
        goto frame_exception_exit_1;
        // Finished with no exception for dict_build:
        dict_build_noexception_1:;
        tmp_return_value = _PyDict_NewPresized( 5 );
        {
            PyObject *tmp_expression_value_3;
            PyObject *tmp_dict_key_3;
            PyObject *tmp_dict_value_3;
            PyObject *tmp_expression_value_5;
            PyObject *tmp_dict_key_4;
            PyObject *tmp_dict_value_4;
            PyObject *tmp_expression_value_6;
            PyObject *tmp_expression_value_7;
            PyObject *tmp_dict_key_5;
            PyObject *tmp_dict_value_5;
            PyObject *tmp_expression_value_8;
            PyObject *tmp_expression_value_9;
            PyObject *tmp_dict_key_6;
            PyObject *tmp_dict_value_6;
            PyObject *tmp_expression_value_10;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 484;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

            if (unlikely(tmp_expression_value_3 == NULL)) {
                tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
            }

            if (tmp_expression_value_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 489;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[75]);
            if (tmp_dict_key_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 489;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[76]);

            if (unlikely(tmp_dict_key_3 == NULL)) {
                tmp_dict_key_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[76]);
            }

            if (tmp_dict_key_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 490;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[76]);

            if (unlikely(tmp_dict_value_3 == NULL)) {
                tmp_dict_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[76]);
            }

            if (tmp_dict_value_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 490;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 3 );
            {
                PyObject *tmp_expression_value_4;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_3, tmp_dict_value_3);
                if (tmp_res != 0) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 490;
                    type_description_1 = "o";
                    goto dict_build_exception_3;
                }
                tmp_dict_key_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_dict_key_3 == NULL)) {
                    tmp_dict_key_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_dict_key_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 491;
                    type_description_1 = "o";
                    goto dict_build_exception_3;
                }
                CHECK_OBJECT(par_self);
                tmp_expression_value_4 = par_self;
                tmp_dict_value_3 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_4);
                if (tmp_dict_value_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 491;
                    type_description_1 = "o";
                    goto dict_build_exception_3;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_3, tmp_dict_value_3);
                Py_DECREF(tmp_dict_value_3);
                if (tmp_res != 0) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 491;
                    type_description_1 = "o";
                    goto dict_build_exception_3;
                }
                tmp_dict_key_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[74]);

                if (unlikely(tmp_dict_key_3 == NULL)) {
                    tmp_dict_key_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[74]);
                }

                if (tmp_dict_key_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 492;
                    type_description_1 = "o";
                    goto dict_build_exception_3;
                }
                tmp_dict_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[74]);

                if (unlikely(tmp_dict_value_3 == NULL)) {
                    tmp_dict_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[74]);
                }

                if (tmp_dict_value_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 492;
                    type_description_1 = "o";
                    goto dict_build_exception_3;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_3, tmp_dict_value_3);
                if (tmp_res != 0) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 492;
                    type_description_1 = "o";
                    goto dict_build_exception_3;
                }
            }
            goto dict_build_noexception_2;
            // Exception handling pass through code for dict_build:
            dict_build_exception_3:;
            Py_DECREF(tmp_dict_key_1);
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_2:;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 489;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_expression_value_5 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

            if (unlikely(tmp_expression_value_5 == NULL)) {
                tmp_expression_value_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
            }

            if (tmp_expression_value_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 494;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[77]);
            if (tmp_dict_key_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 494;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[73]);

            if (unlikely(tmp_dict_key_4 == NULL)) {
                tmp_dict_key_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
            }

            if (tmp_dict_key_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 494;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_6 = par_self;
            tmp_dict_value_4 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_6);
            if (tmp_dict_value_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 494;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_4, tmp_dict_value_4);
            Py_DECREF(tmp_dict_value_4);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 494;
                type_description_1 = "o";
                goto dict_build_exception_4;
            }
            tmp_dict_key_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[74]);

            if (unlikely(tmp_dict_key_4 == NULL)) {
                tmp_dict_key_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[74]);
            }

            if (tmp_dict_key_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 494;
                type_description_1 = "o";
                goto dict_build_exception_4;
            }
            tmp_dict_value_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[74]);

            if (unlikely(tmp_dict_value_4 == NULL)) {
                tmp_dict_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[74]);
            }

            if (tmp_dict_value_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 494;
                type_description_1 = "o";
                goto dict_build_exception_4;
            }
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_4, tmp_dict_value_4);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 494;
                type_description_1 = "o";
                goto dict_build_exception_4;
            }
            goto dict_build_noexception_3;
            // Exception handling pass through code for dict_build:
            dict_build_exception_4:;
            Py_DECREF(tmp_dict_key_1);
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_3:;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 494;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_expression_value_7 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

            if (unlikely(tmp_expression_value_7 == NULL)) {
                tmp_expression_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
            }

            if (tmp_expression_value_7 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 495;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_7, mod_consts[78]);
            if (tmp_dict_key_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 495;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_5 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[73]);

            if (unlikely(tmp_dict_key_5 == NULL)) {
                tmp_dict_key_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
            }

            if (tmp_dict_key_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 495;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_8 = par_self;
            tmp_dict_value_5 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_8);
            if (tmp_dict_value_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 495;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_5, tmp_dict_value_5);
            Py_DECREF(tmp_dict_value_5);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 495;
                type_description_1 = "o";
                goto dict_build_exception_5;
            }
            tmp_dict_key_5 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[74]);

            if (unlikely(tmp_dict_key_5 == NULL)) {
                tmp_dict_key_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[74]);
            }

            if (tmp_dict_key_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 495;
                type_description_1 = "o";
                goto dict_build_exception_5;
            }
            tmp_dict_value_5 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[74]);

            if (unlikely(tmp_dict_value_5 == NULL)) {
                tmp_dict_value_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[74]);
            }

            if (tmp_dict_value_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 495;
                type_description_1 = "o";
                goto dict_build_exception_5;
            }
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_5, tmp_dict_value_5);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 495;
                type_description_1 = "o";
                goto dict_build_exception_5;
            }
            goto dict_build_noexception_4;
            // Exception handling pass through code for dict_build:
            dict_build_exception_5:;
            Py_DECREF(tmp_dict_key_1);
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_4:;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 495;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_expression_value_9 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

            if (unlikely(tmp_expression_value_9 == NULL)) {
                tmp_expression_value_9 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
            }

            if (tmp_expression_value_9 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 496;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_9, mod_consts[79]);
            if (tmp_dict_key_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 496;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_6 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[73]);

            if (unlikely(tmp_dict_key_6 == NULL)) {
                tmp_dict_key_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
            }

            if (tmp_dict_key_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 496;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_10 = par_self;
            tmp_dict_value_6 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_10);
            if (tmp_dict_value_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 496;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_6, tmp_dict_value_6);
            Py_DECREF(tmp_dict_value_6);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 496;
                type_description_1 = "o";
                goto dict_build_exception_6;
            }
            tmp_dict_key_6 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[74]);

            if (unlikely(tmp_dict_key_6 == NULL)) {
                tmp_dict_key_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[74]);
            }

            if (tmp_dict_key_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 496;
                type_description_1 = "o";
                goto dict_build_exception_6;
            }
            tmp_dict_value_6 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[74]);

            if (unlikely(tmp_dict_value_6 == NULL)) {
                tmp_dict_value_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[74]);
            }

            if (tmp_dict_value_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 496;
                type_description_1 = "o";
                goto dict_build_exception_6;
            }
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_6, tmp_dict_value_6);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 496;
                type_description_1 = "o";
                goto dict_build_exception_6;
            }
            goto dict_build_noexception_5;
            // Exception handling pass through code for dict_build:
            dict_build_exception_6:;
            Py_DECREF(tmp_dict_key_1);
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_5:;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 496;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
        }
        goto dict_build_noexception_6;
        // Exception handling pass through code for dict_build:
        dict_build_exception_2:;
        Py_DECREF(tmp_return_value);
        goto frame_exception_exit_1;
        // Finished with no exception for dict_build:
        dict_build_noexception_6:;
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_35db4acbd81c58a447a779e82586ae91);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_35db4acbd81c58a447a779e82586ae91);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_35db4acbd81c58a447a779e82586ae91);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_35db4acbd81c58a447a779e82586ae91, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_35db4acbd81c58a447a779e82586ae91->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_35db4acbd81c58a447a779e82586ae91, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_35db4acbd81c58a447a779e82586ae91,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_35db4acbd81c58a447a779e82586ae91 == cache_frame_35db4acbd81c58a447a779e82586ae91) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_35db4acbd81c58a447a779e82586ae91);
        cache_frame_35db4acbd81c58a447a779e82586ae91 = NULL;
    }

    assertFrameObject(frame_35db4acbd81c58a447a779e82586ae91);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__20___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_precision = python_pars[1];
    PyObject *par_scale = python_pars[2];
    PyObject *par_decimal_return_scale = python_pars[3];
    PyObject *par_asdecimal = python_pars[4];
    struct Nuitka_FrameObject *frame_da4886736b8a5372b7d4e4b67f076065;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_da4886736b8a5372b7d4e4b67f076065 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_da4886736b8a5372b7d4e4b67f076065)) {
        Py_XDECREF(cache_frame_da4886736b8a5372b7d4e4b67f076065);

#if _DEBUG_REFCOUNTS
        if (cache_frame_da4886736b8a5372b7d4e4b67f076065 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_da4886736b8a5372b7d4e4b67f076065 = MAKE_FUNCTION_FRAME(codeobj_da4886736b8a5372b7d4e4b67f076065, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_da4886736b8a5372b7d4e4b67f076065->m_type_description == NULL);
    frame_da4886736b8a5372b7d4e4b67f076065 = cache_frame_da4886736b8a5372b7d4e4b67f076065;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_da4886736b8a5372b7d4e4b67f076065);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_da4886736b8a5372b7d4e4b67f076065) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_precision);
        tmp_assattr_value_1 = par_precision;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[80], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 619;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT(par_scale);
        tmp_assattr_value_2 = par_scale;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[81], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 620;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_3;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT(par_decimal_return_scale);
        tmp_assattr_value_3 = par_decimal_return_scale;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_3, mod_consts[82], tmp_assattr_value_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 621;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_4;
        PyObject *tmp_assattr_target_4;
        CHECK_OBJECT(par_asdecimal);
        tmp_assattr_value_4 = par_asdecimal;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_4, mod_consts[83], tmp_assattr_value_4);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 622;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_da4886736b8a5372b7d4e4b67f076065);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_da4886736b8a5372b7d4e4b67f076065);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_da4886736b8a5372b7d4e4b67f076065, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_da4886736b8a5372b7d4e4b67f076065->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_da4886736b8a5372b7d4e4b67f076065, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_da4886736b8a5372b7d4e4b67f076065,
        type_description_1,
        par_self,
        par_precision,
        par_scale,
        par_decimal_return_scale,
        par_asdecimal
    );


    // Release cached frame if used for exception.
    if (frame_da4886736b8a5372b7d4e4b67f076065 == cache_frame_da4886736b8a5372b7d4e4b67f076065) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_da4886736b8a5372b7d4e4b67f076065);
        cache_frame_da4886736b8a5372b7d4e4b67f076065 = NULL;
    }

    assertFrameObject(frame_da4886736b8a5372b7d4e4b67f076065);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_precision);
    Py_DECREF(par_precision);
    CHECK_OBJECT(par_scale);
    Py_DECREF(par_scale);
    CHECK_OBJECT(par_decimal_return_scale);
    Py_DECREF(par_decimal_return_scale);
    CHECK_OBJECT(par_asdecimal);
    Py_DECREF(par_asdecimal);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_precision);
    Py_DECREF(par_precision);
    CHECK_OBJECT(par_scale);
    Py_DECREF(par_scale);
    CHECK_OBJECT(par_decimal_return_scale);
    Py_DECREF(par_decimal_return_scale);
    CHECK_OBJECT(par_asdecimal);
    Py_DECREF(par_asdecimal);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__21__effective_decimal_return_scale(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_32401629046c0569afb5e84ea376a75d;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_32401629046c0569afb5e84ea376a75d = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_32401629046c0569afb5e84ea376a75d)) {
        Py_XDECREF(cache_frame_32401629046c0569afb5e84ea376a75d);

#if _DEBUG_REFCOUNTS
        if (cache_frame_32401629046c0569afb5e84ea376a75d == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_32401629046c0569afb5e84ea376a75d = MAKE_FUNCTION_FRAME(codeobj_32401629046c0569afb5e84ea376a75d, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_32401629046c0569afb5e84ea376a75d->m_type_description == NULL);
    frame_32401629046c0569afb5e84ea376a75d = cache_frame_32401629046c0569afb5e84ea376a75d;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_32401629046c0569afb5e84ea376a75d);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_32401629046c0569afb5e84ea376a75d) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[82]);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 626;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? true : false;
        Py_DECREF(tmp_cmp_expr_left_1);
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[82]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 627;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        bool tmp_condition_result_2;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        PyObject *tmp_getattr_target_1;
        PyObject *tmp_getattr_attr_1;
        PyObject *tmp_getattr_default_1;
        CHECK_OBJECT(par_self);
        tmp_getattr_target_1 = par_self;
        tmp_getattr_attr_1 = mod_consts[81];
        tmp_getattr_default_1 = Py_None;
        tmp_cmp_expr_left_2 = BUILTIN_GETATTR(tmp_getattr_target_1, tmp_getattr_attr_1, tmp_getattr_default_1);
        if (tmp_cmp_expr_left_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 628;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_2 = Py_None;
        tmp_condition_result_2 = (tmp_cmp_expr_left_2 != tmp_cmp_expr_right_2) ? true : false;
        Py_DECREF(tmp_cmp_expr_left_2);
        if (tmp_condition_result_2 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[81]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 629;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_expression_value_4;
        CHECK_OBJECT(par_self);
        tmp_expression_value_4 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[85]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 631;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_end_2:;
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_32401629046c0569afb5e84ea376a75d);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_32401629046c0569afb5e84ea376a75d);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_32401629046c0569afb5e84ea376a75d);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_32401629046c0569afb5e84ea376a75d, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_32401629046c0569afb5e84ea376a75d->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_32401629046c0569afb5e84ea376a75d, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_32401629046c0569afb5e84ea376a75d,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_32401629046c0569afb5e84ea376a75d == cache_frame_32401629046c0569afb5e84ea376a75d) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_32401629046c0569afb5e84ea376a75d);
        cache_frame_32401629046c0569afb5e84ea376a75d = NULL;
    }

    assertFrameObject(frame_32401629046c0569afb5e84ea376a75d);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__22_get_dbapi_type(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dbapi = python_pars[1];
    struct Nuitka_FrameObject *frame_8dec9bf35a3d35a9a08cd3ac5d62091b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_8dec9bf35a3d35a9a08cd3ac5d62091b = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_8dec9bf35a3d35a9a08cd3ac5d62091b)) {
        Py_XDECREF(cache_frame_8dec9bf35a3d35a9a08cd3ac5d62091b);

#if _DEBUG_REFCOUNTS
        if (cache_frame_8dec9bf35a3d35a9a08cd3ac5d62091b == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_8dec9bf35a3d35a9a08cd3ac5d62091b = MAKE_FUNCTION_FRAME(codeobj_8dec9bf35a3d35a9a08cd3ac5d62091b, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_8dec9bf35a3d35a9a08cd3ac5d62091b->m_type_description == NULL);
    frame_8dec9bf35a3d35a9a08cd3ac5d62091b = cache_frame_8dec9bf35a3d35a9a08cd3ac5d62091b;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_8dec9bf35a3d35a9a08cd3ac5d62091b);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_8dec9bf35a3d35a9a08cd3ac5d62091b) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_dbapi);
        tmp_expression_value_1 = par_dbapi;
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[70]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 634;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_8dec9bf35a3d35a9a08cd3ac5d62091b);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_8dec9bf35a3d35a9a08cd3ac5d62091b);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_8dec9bf35a3d35a9a08cd3ac5d62091b);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_8dec9bf35a3d35a9a08cd3ac5d62091b, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_8dec9bf35a3d35a9a08cd3ac5d62091b->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_8dec9bf35a3d35a9a08cd3ac5d62091b, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_8dec9bf35a3d35a9a08cd3ac5d62091b,
        type_description_1,
        par_self,
        par_dbapi
    );


    // Release cached frame if used for exception.
    if (frame_8dec9bf35a3d35a9a08cd3ac5d62091b == cache_frame_8dec9bf35a3d35a9a08cd3ac5d62091b) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_8dec9bf35a3d35a9a08cd3ac5d62091b);
        cache_frame_8dec9bf35a3d35a9a08cd3ac5d62091b = NULL;
    }

    assertFrameObject(frame_8dec9bf35a3d35a9a08cd3ac5d62091b);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dbapi);
    Py_DECREF(par_dbapi);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dbapi);
    Py_DECREF(par_dbapi);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__23_literal_processor(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    PyObject *var_process = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;


        tmp_assign_source_1 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__23_literal_processor$$$function__1_process();

        assert(var_process == NULL);
        var_process = tmp_assign_source_1;
    }
    // Tried code:
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__23_literal_processor$$$function__1_process(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_cebebc8fdf1b5b7034c3ebe5c05b2b33;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_cebebc8fdf1b5b7034c3ebe5c05b2b33 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_cebebc8fdf1b5b7034c3ebe5c05b2b33)) {
        Py_XDECREF(cache_frame_cebebc8fdf1b5b7034c3ebe5c05b2b33);

#if _DEBUG_REFCOUNTS
        if (cache_frame_cebebc8fdf1b5b7034c3ebe5c05b2b33 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_cebebc8fdf1b5b7034c3ebe5c05b2b33 = MAKE_FUNCTION_FRAME(codeobj_cebebc8fdf1b5b7034c3ebe5c05b2b33, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_cebebc8fdf1b5b7034c3ebe5c05b2b33->m_type_description == NULL);
    frame_cebebc8fdf1b5b7034c3ebe5c05b2b33 = cache_frame_cebebc8fdf1b5b7034c3ebe5c05b2b33;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_cebebc8fdf1b5b7034c3ebe5c05b2b33);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_cebebc8fdf1b5b7034c3ebe5c05b2b33) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_unicode_arg_1;
        CHECK_OBJECT(par_value);
        tmp_unicode_arg_1 = par_value;
        tmp_return_value = PyObject_Unicode(tmp_unicode_arg_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 638;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_cebebc8fdf1b5b7034c3ebe5c05b2b33);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_cebebc8fdf1b5b7034c3ebe5c05b2b33);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_cebebc8fdf1b5b7034c3ebe5c05b2b33);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_cebebc8fdf1b5b7034c3ebe5c05b2b33, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_cebebc8fdf1b5b7034c3ebe5c05b2b33->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_cebebc8fdf1b5b7034c3ebe5c05b2b33, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_cebebc8fdf1b5b7034c3ebe5c05b2b33,
        type_description_1,
        par_value
    );


    // Release cached frame if used for exception.
    if (frame_cebebc8fdf1b5b7034c3ebe5c05b2b33 == cache_frame_cebebc8fdf1b5b7034c3ebe5c05b2b33) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_cebebc8fdf1b5b7034c3ebe5c05b2b33);
        cache_frame_cebebc8fdf1b5b7034c3ebe5c05b2b33 = NULL;
    }

    assertFrameObject(frame_cebebc8fdf1b5b7034c3ebe5c05b2b33);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__24_python_type(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_4def468570d1a6b0955db33a856f684f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_4def468570d1a6b0955db33a856f684f = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_4def468570d1a6b0955db33a856f684f)) {
        Py_XDECREF(cache_frame_4def468570d1a6b0955db33a856f684f);

#if _DEBUG_REFCOUNTS
        if (cache_frame_4def468570d1a6b0955db33a856f684f == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_4def468570d1a6b0955db33a856f684f = MAKE_FUNCTION_FRAME(codeobj_4def468570d1a6b0955db33a856f684f, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_4def468570d1a6b0955db33a856f684f->m_type_description == NULL);
    frame_4def468570d1a6b0955db33a856f684f = cache_frame_4def468570d1a6b0955db33a856f684f;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_4def468570d1a6b0955db33a856f684f);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_4def468570d1a6b0955db33a856f684f) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[83]);
        if (tmp_attribute_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 644;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 644;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_expression_value_2;
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[87]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[87]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 645;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[88]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 645;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    tmp_return_value = (PyObject *)&PyFloat_Type;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_4def468570d1a6b0955db33a856f684f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_4def468570d1a6b0955db33a856f684f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_4def468570d1a6b0955db33a856f684f);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_4def468570d1a6b0955db33a856f684f, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_4def468570d1a6b0955db33a856f684f->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_4def468570d1a6b0955db33a856f684f, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_4def468570d1a6b0955db33a856f684f,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_4def468570d1a6b0955db33a856f684f == cache_frame_4def468570d1a6b0955db33a856f684f) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_4def468570d1a6b0955db33a856f684f);
        cache_frame_4def468570d1a6b0955db33a856f684f = NULL;
    }

    assertFrameObject(frame_4def468570d1a6b0955db33a856f684f);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__25_bind_processor(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    struct Nuitka_FrameObject *frame_900d7e8d229934c609179045dc96cd37;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_900d7e8d229934c609179045dc96cd37 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_900d7e8d229934c609179045dc96cd37)) {
        Py_XDECREF(cache_frame_900d7e8d229934c609179045dc96cd37);

#if _DEBUG_REFCOUNTS
        if (cache_frame_900d7e8d229934c609179045dc96cd37 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_900d7e8d229934c609179045dc96cd37 = MAKE_FUNCTION_FRAME(codeobj_900d7e8d229934c609179045dc96cd37, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_900d7e8d229934c609179045dc96cd37->m_type_description == NULL);
    frame_900d7e8d229934c609179045dc96cd37 = cache_frame_900d7e8d229934c609179045dc96cd37;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_900d7e8d229934c609179045dc96cd37);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_900d7e8d229934c609179045dc96cd37) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_dialect);
        tmp_expression_value_1 = par_dialect;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[89]);
        if (tmp_attribute_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 650;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 650;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_expression_value_2;
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[57]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[57]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 653;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[90]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 653;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_900d7e8d229934c609179045dc96cd37);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_900d7e8d229934c609179045dc96cd37);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_900d7e8d229934c609179045dc96cd37);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_900d7e8d229934c609179045dc96cd37, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_900d7e8d229934c609179045dc96cd37->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_900d7e8d229934c609179045dc96cd37, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_900d7e8d229934c609179045dc96cd37,
        type_description_1,
        par_self,
        par_dialect
    );


    // Release cached frame if used for exception.
    if (frame_900d7e8d229934c609179045dc96cd37 == cache_frame_900d7e8d229934c609179045dc96cd37) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_900d7e8d229934c609179045dc96cd37);
        cache_frame_900d7e8d229934c609179045dc96cd37 = NULL;
    }

    assertFrameObject(frame_900d7e8d229934c609179045dc96cd37);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__26_result_processor(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    PyObject *par_coltype = python_pars[2];
    struct Nuitka_FrameObject *frame_5782e8db7cc9b9b09909a8d7c2344ef8;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_5782e8db7cc9b9b09909a8d7c2344ef8 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_5782e8db7cc9b9b09909a8d7c2344ef8)) {
        Py_XDECREF(cache_frame_5782e8db7cc9b9b09909a8d7c2344ef8);

#if _DEBUG_REFCOUNTS
        if (cache_frame_5782e8db7cc9b9b09909a8d7c2344ef8 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_5782e8db7cc9b9b09909a8d7c2344ef8 = MAKE_FUNCTION_FRAME(codeobj_5782e8db7cc9b9b09909a8d7c2344ef8, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_5782e8db7cc9b9b09909a8d7c2344ef8->m_type_description == NULL);
    frame_5782e8db7cc9b9b09909a8d7c2344ef8 = cache_frame_5782e8db7cc9b9b09909a8d7c2344ef8;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_5782e8db7cc9b9b09909a8d7c2344ef8);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_5782e8db7cc9b9b09909a8d7c2344ef8) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[83]);
        if (tmp_attribute_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 656;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 656;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_attribute_value_2;
        int tmp_truth_name_2;
        CHECK_OBJECT(par_dialect);
        tmp_expression_value_2 = par_dialect;
        tmp_attribute_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[89]);
        if (tmp_attribute_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 657;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_attribute_value_2);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_2);

            exception_lineno = 657;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_2);
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_expression_value_4;
        tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_3 == NULL)) {
            tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
        }

        if (tmp_expression_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 661;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[91]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 661;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_left_value_1 = mod_consts[92];
        CHECK_OBJECT(par_dialect);
        tmp_expression_value_4 = par_dialect;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[93]);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 668;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_1 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_5;
            PyTuple_SET_ITEM(tmp_right_value_1, 0, tmp_tuple_element_1);
            CHECK_OBJECT(par_dialect);
            tmp_expression_value_5 = par_dialect;
            tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[94]);
            if (tmp_tuple_element_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 668;
                type_description_1 = "ooo";
                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_right_value_1, 1, tmp_tuple_element_1);
        }
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_right_value_1);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        tmp_args_element_value_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_1, tmp_right_value_1);
        Py_DECREF(tmp_right_value_1);
        if (tmp_args_element_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 668;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_5782e8db7cc9b9b09909a8d7c2344ef8->m_frame.f_lineno = 661;
        tmp_call_result_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_1, tmp_args_element_value_1);
        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 661;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_args_element_value_3;
        bool tmp_condition_result_3;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_8;
        PyObject *tmp_expression_value_9;
        PyObject *tmp_expression_value_10;
        tmp_expression_value_6 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[57]);

        if (unlikely(tmp_expression_value_6 == NULL)) {
            tmp_expression_value_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[57]);
        }

        if (tmp_expression_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 672;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[95]);
        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 672;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_7 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[87]);

        if (unlikely(tmp_expression_value_7 == NULL)) {
            tmp_expression_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[87]);
        }

        if (tmp_expression_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 673;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_7, mod_consts[88]);
        if (tmp_args_element_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 673;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_8 = par_self;
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_8, mod_consts[81]);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_args_element_value_2);

            exception_lineno = 675;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_3 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? true : false;
        Py_DECREF(tmp_cmp_expr_left_1);
        if (tmp_condition_result_3 != false) {
            goto condexpr_true_1;
        } else {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        CHECK_OBJECT(par_self);
        tmp_expression_value_9 = par_self;
        tmp_args_element_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_9, mod_consts[81]);
        if (tmp_args_element_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_args_element_value_2);

            exception_lineno = 674;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto condexpr_end_1;
        condexpr_false_1:;
        CHECK_OBJECT(par_self);
        tmp_expression_value_10 = par_self;
        tmp_args_element_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_10, mod_consts[85]);
        if (tmp_args_element_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_args_element_value_2);

            exception_lineno = 676;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        condexpr_end_1:;
        frame_5782e8db7cc9b9b09909a8d7c2344ef8->m_frame.f_lineno = 672;
        {
            PyObject *call_args[] = {tmp_args_element_value_2, tmp_args_element_value_3};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_2, call_args);
        }

        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_2);
        Py_DECREF(tmp_args_element_value_3);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 672;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_end_2:;
    goto branch_end_1;
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_expression_value_11;
        PyObject *tmp_attribute_value_3;
        int tmp_truth_name_3;
        CHECK_OBJECT(par_dialect);
        tmp_expression_value_11 = par_dialect;
        tmp_attribute_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_11, mod_consts[89]);
        if (tmp_attribute_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 679;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_3 = CHECK_IF_TRUE(tmp_attribute_value_3);
        if (tmp_truth_name_3 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_3);

            exception_lineno = 679;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_4 = tmp_truth_name_3 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_3);
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_expression_value_12;
        tmp_expression_value_12 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[57]);

        if (unlikely(tmp_expression_value_12 == NULL)) {
            tmp_expression_value_12 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[57]);
        }

        if (tmp_expression_value_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 680;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_value_12, mod_consts[90]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 680;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_3;
    branch_no_3:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_end_3:;
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_5782e8db7cc9b9b09909a8d7c2344ef8);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_5782e8db7cc9b9b09909a8d7c2344ef8);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_5782e8db7cc9b9b09909a8d7c2344ef8);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_5782e8db7cc9b9b09909a8d7c2344ef8, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_5782e8db7cc9b9b09909a8d7c2344ef8->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_5782e8db7cc9b9b09909a8d7c2344ef8, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_5782e8db7cc9b9b09909a8d7c2344ef8,
        type_description_1,
        par_self,
        par_dialect,
        par_coltype
    );


    // Release cached frame if used for exception.
    if (frame_5782e8db7cc9b9b09909a8d7c2344ef8 == cache_frame_5782e8db7cc9b9b09909a8d7c2344ef8) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_5782e8db7cc9b9b09909a8d7c2344ef8);
        cache_frame_5782e8db7cc9b9b09909a8d7c2344ef8 = NULL;
    }

    assertFrameObject(frame_5782e8db7cc9b9b09909a8d7c2344ef8);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__27__expression_adaptations(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_5fea2d0a13180650d03edcb1be2ec25a;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_5fea2d0a13180650d03edcb1be2ec25a = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_5fea2d0a13180650d03edcb1be2ec25a)) {
        Py_XDECREF(cache_frame_5fea2d0a13180650d03edcb1be2ec25a);

#if _DEBUG_REFCOUNTS
        if (cache_frame_5fea2d0a13180650d03edcb1be2ec25a == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_5fea2d0a13180650d03edcb1be2ec25a = MAKE_FUNCTION_FRAME(codeobj_5fea2d0a13180650d03edcb1be2ec25a, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_5fea2d0a13180650d03edcb1be2ec25a->m_type_description == NULL);
    frame_5fea2d0a13180650d03edcb1be2ec25a = cache_frame_5fea2d0a13180650d03edcb1be2ec25a;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_5fea2d0a13180650d03edcb1be2ec25a);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_5fea2d0a13180650d03edcb1be2ec25a) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 687;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[75]);
        if (tmp_dict_key_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 687;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[76]);

        if (unlikely(tmp_dict_key_2 == NULL)) {
            tmp_dict_key_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[76]);
        }

        if (tmp_dict_key_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_dict_key_1);

            exception_lineno = 688;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[76]);

        if (unlikely(tmp_dict_value_2 == NULL)) {
            tmp_dict_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[76]);
        }

        if (tmp_dict_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_dict_key_1);

            exception_lineno = 688;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_value_1 = _PyDict_NewPresized( 3 );
        {
            PyObject *tmp_expression_value_2;
            PyObject *tmp_expression_value_3;
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 688;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_dict_key_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[74]);

            if (unlikely(tmp_dict_key_2 == NULL)) {
                tmp_dict_key_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[74]);
            }

            if (tmp_dict_key_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 689;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_2 = par_self;
            tmp_dict_value_2 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_2);
            if (tmp_dict_value_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 689;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
            Py_DECREF(tmp_dict_value_2);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 689;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_dict_key_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[73]);

            if (unlikely(tmp_dict_key_2 == NULL)) {
                tmp_dict_key_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
            }

            if (tmp_dict_key_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 690;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_3 = par_self;
            tmp_dict_value_2 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_3);
            if (tmp_dict_value_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 690;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
            Py_DECREF(tmp_dict_value_2);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 690;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
        }
        goto dict_build_noexception_1;
        // Exception handling pass through code for dict_build:
        dict_build_exception_1:;
        Py_DECREF(tmp_dict_key_1);
        Py_DECREF(tmp_dict_value_1);
        goto frame_exception_exit_1;
        // Finished with no exception for dict_build:
        dict_build_noexception_1:;
        tmp_return_value = _PyDict_NewPresized( 5 );
        {
            PyObject *tmp_expression_value_4;
            PyObject *tmp_dict_key_3;
            PyObject *tmp_dict_value_3;
            PyObject *tmp_expression_value_5;
            PyObject *tmp_expression_value_7;
            PyObject *tmp_dict_key_4;
            PyObject *tmp_dict_value_4;
            PyObject *tmp_expression_value_8;
            PyObject *tmp_expression_value_10;
            PyObject *tmp_dict_key_5;
            PyObject *tmp_dict_value_5;
            PyObject *tmp_expression_value_11;
            PyObject *tmp_expression_value_13;
            PyObject *tmp_dict_key_6;
            PyObject *tmp_dict_value_6;
            PyObject *tmp_expression_value_14;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 687;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_expression_value_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

            if (unlikely(tmp_expression_value_4 == NULL)) {
                tmp_expression_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
            }

            if (tmp_expression_value_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 692;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[77]);
            if (tmp_dict_key_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 692;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[74]);

            if (unlikely(tmp_dict_key_3 == NULL)) {
                tmp_dict_key_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[74]);
            }

            if (tmp_dict_key_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 692;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_5 = par_self;
            tmp_dict_value_3 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_5);
            if (tmp_dict_value_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 692;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_expression_value_6;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_3, tmp_dict_value_3);
                Py_DECREF(tmp_dict_value_3);
                if (tmp_res != 0) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 692;
                    type_description_1 = "o";
                    goto dict_build_exception_3;
                }
                tmp_dict_key_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_dict_key_3 == NULL)) {
                    tmp_dict_key_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_dict_key_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 692;
                    type_description_1 = "o";
                    goto dict_build_exception_3;
                }
                CHECK_OBJECT(par_self);
                tmp_expression_value_6 = par_self;
                tmp_dict_value_3 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_6);
                if (tmp_dict_value_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 692;
                    type_description_1 = "o";
                    goto dict_build_exception_3;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_3, tmp_dict_value_3);
                Py_DECREF(tmp_dict_value_3);
                if (tmp_res != 0) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 692;
                    type_description_1 = "o";
                    goto dict_build_exception_3;
                }
            }
            goto dict_build_noexception_2;
            // Exception handling pass through code for dict_build:
            dict_build_exception_3:;
            Py_DECREF(tmp_dict_key_1);
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_2:;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 692;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_expression_value_7 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

            if (unlikely(tmp_expression_value_7 == NULL)) {
                tmp_expression_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
            }

            if (tmp_expression_value_7 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 693;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_7, mod_consts[78]);
            if (tmp_dict_key_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 693;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[74]);

            if (unlikely(tmp_dict_key_4 == NULL)) {
                tmp_dict_key_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[74]);
            }

            if (tmp_dict_key_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 694;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_8 = par_self;
            tmp_dict_value_4 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_8);
            if (tmp_dict_value_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 694;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_expression_value_9;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_4, tmp_dict_value_4);
                Py_DECREF(tmp_dict_value_4);
                if (tmp_res != 0) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 694;
                    type_description_1 = "o";
                    goto dict_build_exception_4;
                }
                tmp_dict_key_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_dict_key_4 == NULL)) {
                    tmp_dict_key_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_dict_key_4 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 695;
                    type_description_1 = "o";
                    goto dict_build_exception_4;
                }
                CHECK_OBJECT(par_self);
                tmp_expression_value_9 = par_self;
                tmp_dict_value_4 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_9);
                if (tmp_dict_value_4 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 695;
                    type_description_1 = "o";
                    goto dict_build_exception_4;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_4, tmp_dict_value_4);
                Py_DECREF(tmp_dict_value_4);
                if (tmp_res != 0) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 695;
                    type_description_1 = "o";
                    goto dict_build_exception_4;
                }
            }
            goto dict_build_noexception_3;
            // Exception handling pass through code for dict_build:
            dict_build_exception_4:;
            Py_DECREF(tmp_dict_key_1);
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_3:;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 693;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_expression_value_10 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

            if (unlikely(tmp_expression_value_10 == NULL)) {
                tmp_expression_value_10 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
            }

            if (tmp_expression_value_10 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 697;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_10, mod_consts[7]);
            if (tmp_dict_key_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 697;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_5 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[74]);

            if (unlikely(tmp_dict_key_5 == NULL)) {
                tmp_dict_key_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[74]);
            }

            if (tmp_dict_key_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 697;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_11 = par_self;
            tmp_dict_value_5 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_11);
            if (tmp_dict_value_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 697;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_expression_value_12;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_5, tmp_dict_value_5);
                Py_DECREF(tmp_dict_value_5);
                if (tmp_res != 0) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 697;
                    type_description_1 = "o";
                    goto dict_build_exception_5;
                }
                tmp_dict_key_5 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_dict_key_5 == NULL)) {
                    tmp_dict_key_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_dict_key_5 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 697;
                    type_description_1 = "o";
                    goto dict_build_exception_5;
                }
                CHECK_OBJECT(par_self);
                tmp_expression_value_12 = par_self;
                tmp_dict_value_5 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_12);
                if (tmp_dict_value_5 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 697;
                    type_description_1 = "o";
                    goto dict_build_exception_5;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_5, tmp_dict_value_5);
                Py_DECREF(tmp_dict_value_5);
                if (tmp_res != 0) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 697;
                    type_description_1 = "o";
                    goto dict_build_exception_5;
                }
            }
            goto dict_build_noexception_4;
            // Exception handling pass through code for dict_build:
            dict_build_exception_5:;
            Py_DECREF(tmp_dict_key_1);
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_4:;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 697;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_expression_value_13 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

            if (unlikely(tmp_expression_value_13 == NULL)) {
                tmp_expression_value_13 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
            }

            if (tmp_expression_value_13 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 698;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_13, mod_consts[79]);
            if (tmp_dict_key_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 698;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_6 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[74]);

            if (unlikely(tmp_dict_key_6 == NULL)) {
                tmp_dict_key_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[74]);
            }

            if (tmp_dict_key_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 698;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_14 = par_self;
            tmp_dict_value_6 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_14);
            if (tmp_dict_value_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 698;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_expression_value_15;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_6, tmp_dict_value_6);
                Py_DECREF(tmp_dict_value_6);
                if (tmp_res != 0) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 698;
                    type_description_1 = "o";
                    goto dict_build_exception_6;
                }
                tmp_dict_key_6 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[73]);

                if (unlikely(tmp_dict_key_6 == NULL)) {
                    tmp_dict_key_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                }

                if (tmp_dict_key_6 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 698;
                    type_description_1 = "o";
                    goto dict_build_exception_6;
                }
                CHECK_OBJECT(par_self);
                tmp_expression_value_15 = par_self;
                tmp_dict_value_6 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_15);
                if (tmp_dict_value_6 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 698;
                    type_description_1 = "o";
                    goto dict_build_exception_6;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_6, tmp_dict_value_6);
                Py_DECREF(tmp_dict_value_6);
                if (tmp_res != 0) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 698;
                    type_description_1 = "o";
                    goto dict_build_exception_6;
                }
            }
            goto dict_build_noexception_5;
            // Exception handling pass through code for dict_build:
            dict_build_exception_6:;
            Py_DECREF(tmp_dict_key_1);
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_5:;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 698;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
        }
        goto dict_build_noexception_6;
        // Exception handling pass through code for dict_build:
        dict_build_exception_2:;
        Py_DECREF(tmp_return_value);
        goto frame_exception_exit_1;
        // Finished with no exception for dict_build:
        dict_build_noexception_6:;
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_5fea2d0a13180650d03edcb1be2ec25a);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_5fea2d0a13180650d03edcb1be2ec25a);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_5fea2d0a13180650d03edcb1be2ec25a);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_5fea2d0a13180650d03edcb1be2ec25a, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_5fea2d0a13180650d03edcb1be2ec25a->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_5fea2d0a13180650d03edcb1be2ec25a, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_5fea2d0a13180650d03edcb1be2ec25a,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_5fea2d0a13180650d03edcb1be2ec25a == cache_frame_5fea2d0a13180650d03edcb1be2ec25a) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_5fea2d0a13180650d03edcb1be2ec25a);
        cache_frame_5fea2d0a13180650d03edcb1be2ec25a = NULL;
    }

    assertFrameObject(frame_5fea2d0a13180650d03edcb1be2ec25a);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__28___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_precision = python_pars[1];
    PyObject *par_asdecimal = python_pars[2];
    PyObject *par_decimal_return_scale = python_pars[3];
    struct Nuitka_FrameObject *frame_4fa1541da2e5544116ce9c61af4c7589;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_4fa1541da2e5544116ce9c61af4c7589 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_4fa1541da2e5544116ce9c61af4c7589)) {
        Py_XDECREF(cache_frame_4fa1541da2e5544116ce9c61af4c7589);

#if _DEBUG_REFCOUNTS
        if (cache_frame_4fa1541da2e5544116ce9c61af4c7589 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_4fa1541da2e5544116ce9c61af4c7589 = MAKE_FUNCTION_FRAME(codeobj_4fa1541da2e5544116ce9c61af4c7589, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_4fa1541da2e5544116ce9c61af4c7589->m_type_description == NULL);
    frame_4fa1541da2e5544116ce9c61af4c7589 = cache_frame_4fa1541da2e5544116ce9c61af4c7589;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_4fa1541da2e5544116ce9c61af4c7589);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_4fa1541da2e5544116ce9c61af4c7589) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_precision);
        tmp_assattr_value_1 = par_precision;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[80], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 752;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT(par_asdecimal);
        tmp_assattr_value_2 = par_asdecimal;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[83], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 753;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_3;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT(par_decimal_return_scale);
        tmp_assattr_value_3 = par_decimal_return_scale;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_3, mod_consts[82], tmp_assattr_value_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 754;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_4fa1541da2e5544116ce9c61af4c7589);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_4fa1541da2e5544116ce9c61af4c7589);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_4fa1541da2e5544116ce9c61af4c7589, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_4fa1541da2e5544116ce9c61af4c7589->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_4fa1541da2e5544116ce9c61af4c7589, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_4fa1541da2e5544116ce9c61af4c7589,
        type_description_1,
        par_self,
        par_precision,
        par_asdecimal,
        par_decimal_return_scale
    );


    // Release cached frame if used for exception.
    if (frame_4fa1541da2e5544116ce9c61af4c7589 == cache_frame_4fa1541da2e5544116ce9c61af4c7589) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_4fa1541da2e5544116ce9c61af4c7589);
        cache_frame_4fa1541da2e5544116ce9c61af4c7589 = NULL;
    }

    assertFrameObject(frame_4fa1541da2e5544116ce9c61af4c7589);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_precision);
    Py_DECREF(par_precision);
    CHECK_OBJECT(par_asdecimal);
    Py_DECREF(par_asdecimal);
    CHECK_OBJECT(par_decimal_return_scale);
    Py_DECREF(par_decimal_return_scale);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_precision);
    Py_DECREF(par_precision);
    CHECK_OBJECT(par_asdecimal);
    Py_DECREF(par_asdecimal);
    CHECK_OBJECT(par_decimal_return_scale);
    Py_DECREF(par_decimal_return_scale);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__29_result_processor(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    PyObject *par_coltype = python_pars[2];
    struct Nuitka_FrameObject *frame_4114bd0ac152e003245e0a5f3c383370;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_4114bd0ac152e003245e0a5f3c383370 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_4114bd0ac152e003245e0a5f3c383370)) {
        Py_XDECREF(cache_frame_4114bd0ac152e003245e0a5f3c383370);

#if _DEBUG_REFCOUNTS
        if (cache_frame_4114bd0ac152e003245e0a5f3c383370 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_4114bd0ac152e003245e0a5f3c383370 = MAKE_FUNCTION_FRAME(codeobj_4114bd0ac152e003245e0a5f3c383370, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_4114bd0ac152e003245e0a5f3c383370->m_type_description == NULL);
    frame_4114bd0ac152e003245e0a5f3c383370 = cache_frame_4114bd0ac152e003245e0a5f3c383370;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_4114bd0ac152e003245e0a5f3c383370);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_4114bd0ac152e003245e0a5f3c383370) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[83]);
        if (tmp_attribute_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 757;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 757;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_expression_value_4;
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[57]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[57]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 758;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[95]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 758;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[87]);

        if (unlikely(tmp_expression_value_3 == NULL)) {
            tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[87]);
        }

        if (tmp_expression_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 759;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[88]);
        if (tmp_args_element_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 759;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_4 = par_self;
        tmp_args_element_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[97]);
        if (tmp_args_element_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_args_element_value_1);

            exception_lineno = 759;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_4114bd0ac152e003245e0a5f3c383370->m_frame.f_lineno = 758;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        Py_DECREF(tmp_args_element_value_2);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 758;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_attribute_value_2;
        int tmp_truth_name_2;
        CHECK_OBJECT(par_dialect);
        tmp_expression_value_5 = par_dialect;
        tmp_attribute_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[89]);
        if (tmp_attribute_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 761;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_attribute_value_2);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_2);

            exception_lineno = 761;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_2);
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_expression_value_6;
        tmp_expression_value_6 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[57]);

        if (unlikely(tmp_expression_value_6 == NULL)) {
            tmp_expression_value_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[57]);
        }

        if (tmp_expression_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 762;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[90]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 762;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_2;
    branch_no_2:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_end_2:;
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_4114bd0ac152e003245e0a5f3c383370);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_4114bd0ac152e003245e0a5f3c383370);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_4114bd0ac152e003245e0a5f3c383370);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_4114bd0ac152e003245e0a5f3c383370, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_4114bd0ac152e003245e0a5f3c383370->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_4114bd0ac152e003245e0a5f3c383370, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_4114bd0ac152e003245e0a5f3c383370,
        type_description_1,
        par_self,
        par_dialect,
        par_coltype
    );


    // Release cached frame if used for exception.
    if (frame_4114bd0ac152e003245e0a5f3c383370 == cache_frame_4114bd0ac152e003245e0a5f3c383370) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_4114bd0ac152e003245e0a5f3c383370);
        cache_frame_4114bd0ac152e003245e0a5f3c383370 = NULL;
    }

    assertFrameObject(frame_4114bd0ac152e003245e0a5f3c383370);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__30___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_timezone = python_pars[1];
    struct Nuitka_FrameObject *frame_7d27396219160c20eb32d0e52d1cbc7b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_7d27396219160c20eb32d0e52d1cbc7b = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_7d27396219160c20eb32d0e52d1cbc7b)) {
        Py_XDECREF(cache_frame_7d27396219160c20eb32d0e52d1cbc7b);

#if _DEBUG_REFCOUNTS
        if (cache_frame_7d27396219160c20eb32d0e52d1cbc7b == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_7d27396219160c20eb32d0e52d1cbc7b = MAKE_FUNCTION_FRAME(codeobj_7d27396219160c20eb32d0e52d1cbc7b, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_7d27396219160c20eb32d0e52d1cbc7b->m_type_description == NULL);
    frame_7d27396219160c20eb32d0e52d1cbc7b = cache_frame_7d27396219160c20eb32d0e52d1cbc7b;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_7d27396219160c20eb32d0e52d1cbc7b);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_7d27396219160c20eb32d0e52d1cbc7b) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_timezone);
        tmp_assattr_value_1 = par_timezone;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[98], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 801;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_7d27396219160c20eb32d0e52d1cbc7b);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_7d27396219160c20eb32d0e52d1cbc7b);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_7d27396219160c20eb32d0e52d1cbc7b, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_7d27396219160c20eb32d0e52d1cbc7b->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_7d27396219160c20eb32d0e52d1cbc7b, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_7d27396219160c20eb32d0e52d1cbc7b,
        type_description_1,
        par_self,
        par_timezone
    );


    // Release cached frame if used for exception.
    if (frame_7d27396219160c20eb32d0e52d1cbc7b == cache_frame_7d27396219160c20eb32d0e52d1cbc7b) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_7d27396219160c20eb32d0e52d1cbc7b);
        cache_frame_7d27396219160c20eb32d0e52d1cbc7b = NULL;
    }

    assertFrameObject(frame_7d27396219160c20eb32d0e52d1cbc7b);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_timezone);
    Py_DECREF(par_timezone);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_timezone);
    Py_DECREF(par_timezone);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__31_get_dbapi_type(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dbapi = python_pars[1];
    struct Nuitka_FrameObject *frame_d602dea3fafc7887a40c46ff4868cc37;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_d602dea3fafc7887a40c46ff4868cc37 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_d602dea3fafc7887a40c46ff4868cc37)) {
        Py_XDECREF(cache_frame_d602dea3fafc7887a40c46ff4868cc37);

#if _DEBUG_REFCOUNTS
        if (cache_frame_d602dea3fafc7887a40c46ff4868cc37 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_d602dea3fafc7887a40c46ff4868cc37 = MAKE_FUNCTION_FRAME(codeobj_d602dea3fafc7887a40c46ff4868cc37, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_d602dea3fafc7887a40c46ff4868cc37->m_type_description == NULL);
    frame_d602dea3fafc7887a40c46ff4868cc37 = cache_frame_d602dea3fafc7887a40c46ff4868cc37;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_d602dea3fafc7887a40c46ff4868cc37);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_d602dea3fafc7887a40c46ff4868cc37) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_dbapi);
        tmp_expression_value_1 = par_dbapi;
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[100]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 804;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d602dea3fafc7887a40c46ff4868cc37);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_d602dea3fafc7887a40c46ff4868cc37);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d602dea3fafc7887a40c46ff4868cc37);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_d602dea3fafc7887a40c46ff4868cc37, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_d602dea3fafc7887a40c46ff4868cc37->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_d602dea3fafc7887a40c46ff4868cc37, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_d602dea3fafc7887a40c46ff4868cc37,
        type_description_1,
        par_self,
        par_dbapi
    );


    // Release cached frame if used for exception.
    if (frame_d602dea3fafc7887a40c46ff4868cc37 == cache_frame_d602dea3fafc7887a40c46ff4868cc37) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_d602dea3fafc7887a40c46ff4868cc37);
        cache_frame_d602dea3fafc7887a40c46ff4868cc37 = NULL;
    }

    assertFrameObject(frame_d602dea3fafc7887a40c46ff4868cc37);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dbapi);
    Py_DECREF(par_dbapi);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dbapi);
    Py_DECREF(par_dbapi);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__32_python_type(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_09bc773089160ae25520ee75955ab821;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_09bc773089160ae25520ee75955ab821 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_09bc773089160ae25520ee75955ab821)) {
        Py_XDECREF(cache_frame_09bc773089160ae25520ee75955ab821);

#if _DEBUG_REFCOUNTS
        if (cache_frame_09bc773089160ae25520ee75955ab821 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_09bc773089160ae25520ee75955ab821 = MAKE_FUNCTION_FRAME(codeobj_09bc773089160ae25520ee75955ab821, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_09bc773089160ae25520ee75955ab821->m_type_description == NULL);
    frame_09bc773089160ae25520ee75955ab821 = cache_frame_09bc773089160ae25520ee75955ab821;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_09bc773089160ae25520ee75955ab821);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_09bc773089160ae25520ee75955ab821) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[101]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[101]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 808;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[102]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 808;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_09bc773089160ae25520ee75955ab821);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_09bc773089160ae25520ee75955ab821);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_09bc773089160ae25520ee75955ab821);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_09bc773089160ae25520ee75955ab821, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_09bc773089160ae25520ee75955ab821->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_09bc773089160ae25520ee75955ab821, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_09bc773089160ae25520ee75955ab821,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_09bc773089160ae25520ee75955ab821 == cache_frame_09bc773089160ae25520ee75955ab821) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_09bc773089160ae25520ee75955ab821);
        cache_frame_09bc773089160ae25520ee75955ab821 = NULL;
    }

    assertFrameObject(frame_09bc773089160ae25520ee75955ab821);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__33__expression_adaptations(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_9531191c57440301d6fe173eea3ed4a2;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_9531191c57440301d6fe173eea3ed4a2 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_9531191c57440301d6fe173eea3ed4a2)) {
        Py_XDECREF(cache_frame_9531191c57440301d6fe173eea3ed4a2);

#if _DEBUG_REFCOUNTS
        if (cache_frame_9531191c57440301d6fe173eea3ed4a2 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_9531191c57440301d6fe173eea3ed4a2 = MAKE_FUNCTION_FRAME(codeobj_9531191c57440301d6fe173eea3ed4a2, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_9531191c57440301d6fe173eea3ed4a2->m_type_description == NULL);
    frame_9531191c57440301d6fe173eea3ed4a2 = cache_frame_9531191c57440301d6fe173eea3ed4a2;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_9531191c57440301d6fe173eea3ed4a2);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_9531191c57440301d6fe173eea3ed4a2) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        PyObject *tmp_expression_value_2;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 817;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[7]);
        if (tmp_dict_key_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 817;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[76]);

        if (unlikely(tmp_dict_key_2 == NULL)) {
            tmp_dict_key_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[76]);
        }

        if (tmp_dict_key_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_dict_key_1);

            exception_lineno = 817;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_dict_value_2 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_2);
        if (tmp_dict_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_dict_key_1);

            exception_lineno = 817;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_value_1 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
        Py_DECREF(tmp_dict_value_2);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 817;
            type_description_1 = "o";
            goto dict_build_exception_1;
        }
        goto dict_build_noexception_1;
        // Exception handling pass through code for dict_build:
        dict_build_exception_1:;
        Py_DECREF(tmp_dict_key_1);
        Py_DECREF(tmp_dict_value_1);
        goto frame_exception_exit_1;
        // Finished with no exception for dict_build:
        dict_build_noexception_1:;
        tmp_return_value = _PyDict_NewPresized( 2 );
        {
            PyObject *tmp_expression_value_3;
            PyObject *tmp_dict_key_3;
            PyObject *tmp_dict_value_3;
            PyObject *tmp_expression_value_4;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 817;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

            if (unlikely(tmp_expression_value_3 == NULL)) {
                tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
            }

            if (tmp_expression_value_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 818;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[79]);
            if (tmp_dict_key_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 818;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[76]);

            if (unlikely(tmp_dict_key_3 == NULL)) {
                tmp_dict_key_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[76]);
            }

            if (tmp_dict_key_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 818;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_4 = par_self;
            tmp_dict_value_3 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_4);
            if (tmp_dict_value_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 818;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_3, tmp_dict_value_3);
            Py_DECREF(tmp_dict_value_3);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 818;
                type_description_1 = "o";
                goto dict_build_exception_3;
            }
            tmp_dict_key_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[103]);

            if (unlikely(tmp_dict_key_3 == NULL)) {
                tmp_dict_key_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[103]);
            }

            if (tmp_dict_key_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 818;
                type_description_1 = "o";
                goto dict_build_exception_3;
            }
            tmp_dict_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[76]);

            if (unlikely(tmp_dict_value_3 == NULL)) {
                tmp_dict_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[76]);
            }

            if (tmp_dict_value_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 818;
                type_description_1 = "o";
                goto dict_build_exception_3;
            }
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_3, tmp_dict_value_3);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 818;
                type_description_1 = "o";
                goto dict_build_exception_3;
            }
            goto dict_build_noexception_2;
            // Exception handling pass through code for dict_build:
            dict_build_exception_3:;
            Py_DECREF(tmp_dict_key_1);
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_2:;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 818;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
        }
        goto dict_build_noexception_3;
        // Exception handling pass through code for dict_build:
        dict_build_exception_2:;
        Py_DECREF(tmp_return_value);
        goto frame_exception_exit_1;
        // Finished with no exception for dict_build:
        dict_build_noexception_3:;
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9531191c57440301d6fe173eea3ed4a2);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_9531191c57440301d6fe173eea3ed4a2);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9531191c57440301d6fe173eea3ed4a2);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_9531191c57440301d6fe173eea3ed4a2, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_9531191c57440301d6fe173eea3ed4a2->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_9531191c57440301d6fe173eea3ed4a2, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_9531191c57440301d6fe173eea3ed4a2,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_9531191c57440301d6fe173eea3ed4a2 == cache_frame_9531191c57440301d6fe173eea3ed4a2) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_9531191c57440301d6fe173eea3ed4a2);
        cache_frame_9531191c57440301d6fe173eea3ed4a2 = NULL;
    }

    assertFrameObject(frame_9531191c57440301d6fe173eea3ed4a2);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__34_get_dbapi_type(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dbapi = python_pars[1];
    struct Nuitka_FrameObject *frame_dd136002a7b1d65c393838c253df1571;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_dd136002a7b1d65c393838c253df1571 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_dd136002a7b1d65c393838c253df1571)) {
        Py_XDECREF(cache_frame_dd136002a7b1d65c393838c253df1571);

#if _DEBUG_REFCOUNTS
        if (cache_frame_dd136002a7b1d65c393838c253df1571 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_dd136002a7b1d65c393838c253df1571 = MAKE_FUNCTION_FRAME(codeobj_dd136002a7b1d65c393838c253df1571, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_dd136002a7b1d65c393838c253df1571->m_type_description == NULL);
    frame_dd136002a7b1d65c393838c253df1571 = cache_frame_dd136002a7b1d65c393838c253df1571;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_dd136002a7b1d65c393838c253df1571);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_dd136002a7b1d65c393838c253df1571) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_dbapi);
        tmp_expression_value_1 = par_dbapi;
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[100]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 829;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_dd136002a7b1d65c393838c253df1571);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_dd136002a7b1d65c393838c253df1571);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_dd136002a7b1d65c393838c253df1571);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_dd136002a7b1d65c393838c253df1571, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_dd136002a7b1d65c393838c253df1571->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_dd136002a7b1d65c393838c253df1571, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_dd136002a7b1d65c393838c253df1571,
        type_description_1,
        par_self,
        par_dbapi
    );


    // Release cached frame if used for exception.
    if (frame_dd136002a7b1d65c393838c253df1571 == cache_frame_dd136002a7b1d65c393838c253df1571) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_dd136002a7b1d65c393838c253df1571);
        cache_frame_dd136002a7b1d65c393838c253df1571 = NULL;
    }

    assertFrameObject(frame_dd136002a7b1d65c393838c253df1571);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dbapi);
    Py_DECREF(par_dbapi);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dbapi);
    Py_DECREF(par_dbapi);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__35_python_type(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_e7cef0473820344c14b6f8d33e4175a2;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_e7cef0473820344c14b6f8d33e4175a2 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_e7cef0473820344c14b6f8d33e4175a2)) {
        Py_XDECREF(cache_frame_e7cef0473820344c14b6f8d33e4175a2);

#if _DEBUG_REFCOUNTS
        if (cache_frame_e7cef0473820344c14b6f8d33e4175a2 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_e7cef0473820344c14b6f8d33e4175a2 = MAKE_FUNCTION_FRAME(codeobj_e7cef0473820344c14b6f8d33e4175a2, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_e7cef0473820344c14b6f8d33e4175a2->m_type_description == NULL);
    frame_e7cef0473820344c14b6f8d33e4175a2 = cache_frame_e7cef0473820344c14b6f8d33e4175a2;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_e7cef0473820344c14b6f8d33e4175a2);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_e7cef0473820344c14b6f8d33e4175a2) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[101]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[101]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 833;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[104]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 833;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e7cef0473820344c14b6f8d33e4175a2);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_e7cef0473820344c14b6f8d33e4175a2);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e7cef0473820344c14b6f8d33e4175a2);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_e7cef0473820344c14b6f8d33e4175a2, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_e7cef0473820344c14b6f8d33e4175a2->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_e7cef0473820344c14b6f8d33e4175a2, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_e7cef0473820344c14b6f8d33e4175a2,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_e7cef0473820344c14b6f8d33e4175a2 == cache_frame_e7cef0473820344c14b6f8d33e4175a2) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_e7cef0473820344c14b6f8d33e4175a2);
        cache_frame_e7cef0473820344c14b6f8d33e4175a2 = NULL;
    }

    assertFrameObject(frame_e7cef0473820344c14b6f8d33e4175a2);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__36__expression_adaptations(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_175ab3d6f152360f198aa0f400f51963;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_175ab3d6f152360f198aa0f400f51963 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_175ab3d6f152360f198aa0f400f51963)) {
        Py_XDECREF(cache_frame_175ab3d6f152360f198aa0f400f51963);

#if _DEBUG_REFCOUNTS
        if (cache_frame_175ab3d6f152360f198aa0f400f51963 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_175ab3d6f152360f198aa0f400f51963 = MAKE_FUNCTION_FRAME(codeobj_175ab3d6f152360f198aa0f400f51963, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_175ab3d6f152360f198aa0f400f51963->m_type_description == NULL);
    frame_175ab3d6f152360f198aa0f400f51963 = cache_frame_175ab3d6f152360f198aa0f400f51963;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_175ab3d6f152360f198aa0f400f51963);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_175ab3d6f152360f198aa0f400f51963) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        PyObject *tmp_expression_value_2;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 841;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[7]);
        if (tmp_dict_key_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 841;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[73]);

        if (unlikely(tmp_dict_key_2 == NULL)) {
            tmp_dict_key_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
        }

        if (tmp_dict_key_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_dict_key_1);

            exception_lineno = 842;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_dict_value_2 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_2);
        if (tmp_dict_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_dict_key_1);

            exception_lineno = 842;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_value_1 = _PyDict_NewPresized( 3 );
        tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
        Py_DECREF(tmp_dict_value_2);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 842;
            type_description_1 = "o";
            goto dict_build_exception_1;
        }
        tmp_dict_key_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[76]);

        if (unlikely(tmp_dict_key_2 == NULL)) {
            tmp_dict_key_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[76]);
        }

        if (tmp_dict_key_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 843;
            type_description_1 = "o";
            goto dict_build_exception_1;
        }
        tmp_dict_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[103]);

        if (unlikely(tmp_dict_value_2 == NULL)) {
            tmp_dict_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[103]);
        }

        if (tmp_dict_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 843;
            type_description_1 = "o";
            goto dict_build_exception_1;
        }
        tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 843;
            type_description_1 = "o";
            goto dict_build_exception_1;
        }
        tmp_dict_key_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[105]);

        if (unlikely(tmp_dict_key_2 == NULL)) {
            tmp_dict_key_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[105]);
        }

        if (tmp_dict_key_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 844;
            type_description_1 = "o";
            goto dict_build_exception_1;
        }
        tmp_dict_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[103]);

        if (unlikely(tmp_dict_value_2 == NULL)) {
            tmp_dict_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[103]);
        }

        if (tmp_dict_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 844;
            type_description_1 = "o";
            goto dict_build_exception_1;
        }
        tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 844;
            type_description_1 = "o";
            goto dict_build_exception_1;
        }
        goto dict_build_noexception_1;
        // Exception handling pass through code for dict_build:
        dict_build_exception_1:;
        Py_DECREF(tmp_dict_key_1);
        Py_DECREF(tmp_dict_value_1);
        goto frame_exception_exit_1;
        // Finished with no exception for dict_build:
        dict_build_noexception_1:;
        tmp_return_value = _PyDict_NewPresized( 2 );
        {
            PyObject *tmp_expression_value_3;
            PyObject *tmp_dict_key_3;
            PyObject *tmp_dict_value_3;
            PyObject *tmp_expression_value_4;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 841;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

            if (unlikely(tmp_expression_value_3 == NULL)) {
                tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
            }

            if (tmp_expression_value_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 846;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[79]);
            if (tmp_dict_key_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 846;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[73]);

            if (unlikely(tmp_dict_key_3 == NULL)) {
                tmp_dict_key_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
            }

            if (tmp_dict_key_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 848;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_4 = par_self;
            tmp_dict_value_3 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_4);
            if (tmp_dict_value_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 848;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 4 );
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_3, tmp_dict_value_3);
            Py_DECREF(tmp_dict_value_3);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 848;
                type_description_1 = "o";
                goto dict_build_exception_3;
            }
            tmp_dict_key_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[72]);

            if (unlikely(tmp_dict_key_3 == NULL)) {
                tmp_dict_key_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[72]);
            }

            if (tmp_dict_key_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 850;
                type_description_1 = "o";
                goto dict_build_exception_3;
            }
            tmp_dict_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[73]);

            if (unlikely(tmp_dict_value_3 == NULL)) {
                tmp_dict_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
            }

            if (tmp_dict_value_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 850;
                type_description_1 = "o";
                goto dict_build_exception_3;
            }
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_3, tmp_dict_value_3);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 850;
                type_description_1 = "o";
                goto dict_build_exception_3;
            }
            tmp_dict_key_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[76]);

            if (unlikely(tmp_dict_key_3 == NULL)) {
                tmp_dict_key_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[76]);
            }

            if (tmp_dict_key_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 851;
                type_description_1 = "o";
                goto dict_build_exception_3;
            }
            tmp_dict_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[103]);

            if (unlikely(tmp_dict_value_3 == NULL)) {
                tmp_dict_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[103]);
            }

            if (tmp_dict_value_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 851;
                type_description_1 = "o";
                goto dict_build_exception_3;
            }
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_3, tmp_dict_value_3);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 851;
                type_description_1 = "o";
                goto dict_build_exception_3;
            }
            tmp_dict_key_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[103]);

            if (unlikely(tmp_dict_key_3 == NULL)) {
                tmp_dict_key_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[103]);
            }

            if (tmp_dict_key_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 855;
                type_description_1 = "o";
                goto dict_build_exception_3;
            }
            tmp_dict_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[76]);

            if (unlikely(tmp_dict_value_3 == NULL)) {
                tmp_dict_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[76]);
            }

            if (tmp_dict_value_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 855;
                type_description_1 = "o";
                goto dict_build_exception_3;
            }
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_3, tmp_dict_value_3);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 855;
                type_description_1 = "o";
                goto dict_build_exception_3;
            }
            goto dict_build_noexception_2;
            // Exception handling pass through code for dict_build:
            dict_build_exception_3:;
            Py_DECREF(tmp_dict_key_1);
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_2:;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 846;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
        }
        goto dict_build_noexception_3;
        // Exception handling pass through code for dict_build:
        dict_build_exception_2:;
        Py_DECREF(tmp_return_value);
        goto frame_exception_exit_1;
        // Finished with no exception for dict_build:
        dict_build_noexception_3:;
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_175ab3d6f152360f198aa0f400f51963);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_175ab3d6f152360f198aa0f400f51963);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_175ab3d6f152360f198aa0f400f51963);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_175ab3d6f152360f198aa0f400f51963, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_175ab3d6f152360f198aa0f400f51963->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_175ab3d6f152360f198aa0f400f51963, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_175ab3d6f152360f198aa0f400f51963,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_175ab3d6f152360f198aa0f400f51963 == cache_frame_175ab3d6f152360f198aa0f400f51963) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_175ab3d6f152360f198aa0f400f51963);
        cache_frame_175ab3d6f152360f198aa0f400f51963 = NULL;
    }

    assertFrameObject(frame_175ab3d6f152360f198aa0f400f51963);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__37___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_timezone = python_pars[1];
    struct Nuitka_FrameObject *frame_64489e8438dad652f740f8de8258ba14;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_64489e8438dad652f740f8de8258ba14 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_64489e8438dad652f740f8de8258ba14)) {
        Py_XDECREF(cache_frame_64489e8438dad652f740f8de8258ba14);

#if _DEBUG_REFCOUNTS
        if (cache_frame_64489e8438dad652f740f8de8258ba14 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_64489e8438dad652f740f8de8258ba14 = MAKE_FUNCTION_FRAME(codeobj_64489e8438dad652f740f8de8258ba14, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_64489e8438dad652f740f8de8258ba14->m_type_description == NULL);
    frame_64489e8438dad652f740f8de8258ba14 = cache_frame_64489e8438dad652f740f8de8258ba14;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_64489e8438dad652f740f8de8258ba14);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_64489e8438dad652f740f8de8258ba14) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_timezone);
        tmp_assattr_value_1 = par_timezone;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[98], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 867;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_64489e8438dad652f740f8de8258ba14);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_64489e8438dad652f740f8de8258ba14);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_64489e8438dad652f740f8de8258ba14, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_64489e8438dad652f740f8de8258ba14->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_64489e8438dad652f740f8de8258ba14, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_64489e8438dad652f740f8de8258ba14,
        type_description_1,
        par_self,
        par_timezone
    );


    // Release cached frame if used for exception.
    if (frame_64489e8438dad652f740f8de8258ba14 == cache_frame_64489e8438dad652f740f8de8258ba14) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_64489e8438dad652f740f8de8258ba14);
        cache_frame_64489e8438dad652f740f8de8258ba14 = NULL;
    }

    assertFrameObject(frame_64489e8438dad652f740f8de8258ba14);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_timezone);
    Py_DECREF(par_timezone);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_timezone);
    Py_DECREF(par_timezone);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__38_get_dbapi_type(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dbapi = python_pars[1];
    struct Nuitka_FrameObject *frame_e50570ddb5d241e469c85d33b14f06a7;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_e50570ddb5d241e469c85d33b14f06a7 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_e50570ddb5d241e469c85d33b14f06a7)) {
        Py_XDECREF(cache_frame_e50570ddb5d241e469c85d33b14f06a7);

#if _DEBUG_REFCOUNTS
        if (cache_frame_e50570ddb5d241e469c85d33b14f06a7 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_e50570ddb5d241e469c85d33b14f06a7 = MAKE_FUNCTION_FRAME(codeobj_e50570ddb5d241e469c85d33b14f06a7, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_e50570ddb5d241e469c85d33b14f06a7->m_type_description == NULL);
    frame_e50570ddb5d241e469c85d33b14f06a7 = cache_frame_e50570ddb5d241e469c85d33b14f06a7;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_e50570ddb5d241e469c85d33b14f06a7);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_e50570ddb5d241e469c85d33b14f06a7) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_dbapi);
        tmp_expression_value_1 = par_dbapi;
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[100]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 870;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e50570ddb5d241e469c85d33b14f06a7);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_e50570ddb5d241e469c85d33b14f06a7);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e50570ddb5d241e469c85d33b14f06a7);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_e50570ddb5d241e469c85d33b14f06a7, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_e50570ddb5d241e469c85d33b14f06a7->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_e50570ddb5d241e469c85d33b14f06a7, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_e50570ddb5d241e469c85d33b14f06a7,
        type_description_1,
        par_self,
        par_dbapi
    );


    // Release cached frame if used for exception.
    if (frame_e50570ddb5d241e469c85d33b14f06a7 == cache_frame_e50570ddb5d241e469c85d33b14f06a7) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_e50570ddb5d241e469c85d33b14f06a7);
        cache_frame_e50570ddb5d241e469c85d33b14f06a7 = NULL;
    }

    assertFrameObject(frame_e50570ddb5d241e469c85d33b14f06a7);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dbapi);
    Py_DECREF(par_dbapi);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dbapi);
    Py_DECREF(par_dbapi);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__39_python_type(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_66456ce309790c2214ab611d32d52f5b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_66456ce309790c2214ab611d32d52f5b = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_66456ce309790c2214ab611d32d52f5b)) {
        Py_XDECREF(cache_frame_66456ce309790c2214ab611d32d52f5b);

#if _DEBUG_REFCOUNTS
        if (cache_frame_66456ce309790c2214ab611d32d52f5b == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_66456ce309790c2214ab611d32d52f5b = MAKE_FUNCTION_FRAME(codeobj_66456ce309790c2214ab611d32d52f5b, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_66456ce309790c2214ab611d32d52f5b->m_type_description == NULL);
    frame_66456ce309790c2214ab611d32d52f5b = cache_frame_66456ce309790c2214ab611d32d52f5b;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_66456ce309790c2214ab611d32d52f5b);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_66456ce309790c2214ab611d32d52f5b) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[101]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[101]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 874;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[106]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 874;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_66456ce309790c2214ab611d32d52f5b);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_66456ce309790c2214ab611d32d52f5b);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_66456ce309790c2214ab611d32d52f5b);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_66456ce309790c2214ab611d32d52f5b, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_66456ce309790c2214ab611d32d52f5b->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_66456ce309790c2214ab611d32d52f5b, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_66456ce309790c2214ab611d32d52f5b,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_66456ce309790c2214ab611d32d52f5b == cache_frame_66456ce309790c2214ab611d32d52f5b) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_66456ce309790c2214ab611d32d52f5b);
        cache_frame_66456ce309790c2214ab611d32d52f5b = NULL;
    }

    assertFrameObject(frame_66456ce309790c2214ab611d32d52f5b);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__40__expression_adaptations(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_7d0d935729b36d094bbd555e9b47d2a4;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_7d0d935729b36d094bbd555e9b47d2a4 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_7d0d935729b36d094bbd555e9b47d2a4)) {
        Py_XDECREF(cache_frame_7d0d935729b36d094bbd555e9b47d2a4);

#if _DEBUG_REFCOUNTS
        if (cache_frame_7d0d935729b36d094bbd555e9b47d2a4 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_7d0d935729b36d094bbd555e9b47d2a4 = MAKE_FUNCTION_FRAME(codeobj_7d0d935729b36d094bbd555e9b47d2a4, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_7d0d935729b36d094bbd555e9b47d2a4->m_type_description == NULL);
    frame_7d0d935729b36d094bbd555e9b47d2a4 = cache_frame_7d0d935729b36d094bbd555e9b47d2a4;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_7d0d935729b36d094bbd555e9b47d2a4);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_7d0d935729b36d094bbd555e9b47d2a4) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 882;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[7]);
        if (tmp_dict_key_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 882;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[72]);

        if (unlikely(tmp_dict_key_2 == NULL)) {
            tmp_dict_key_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[72]);
        }

        if (tmp_dict_key_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_dict_key_1);

            exception_lineno = 882;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[103]);

        if (unlikely(tmp_dict_value_2 == NULL)) {
            tmp_dict_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[103]);
        }

        if (tmp_dict_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_dict_key_1);

            exception_lineno = 882;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_value_1 = _PyDict_NewPresized( 2 );
        {
            PyObject *tmp_expression_value_2;
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 882;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_dict_key_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[76]);

            if (unlikely(tmp_dict_key_2 == NULL)) {
                tmp_dict_key_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[76]);
            }

            if (tmp_dict_key_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 882;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_2 = par_self;
            tmp_dict_value_2 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_2);
            if (tmp_dict_value_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 882;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
            Py_DECREF(tmp_dict_value_2);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 882;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
        }
        goto dict_build_noexception_1;
        // Exception handling pass through code for dict_build:
        dict_build_exception_1:;
        Py_DECREF(tmp_dict_key_1);
        Py_DECREF(tmp_dict_value_1);
        goto frame_exception_exit_1;
        // Finished with no exception for dict_build:
        dict_build_noexception_1:;
        tmp_return_value = _PyDict_NewPresized( 2 );
        {
            PyObject *tmp_expression_value_3;
            PyObject *tmp_dict_key_3;
            PyObject *tmp_dict_value_3;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 882;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

            if (unlikely(tmp_expression_value_3 == NULL)) {
                tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
            }

            if (tmp_expression_value_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 883;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[79]);
            if (tmp_dict_key_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 883;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[105]);

            if (unlikely(tmp_dict_key_3 == NULL)) {
                tmp_dict_key_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[105]);
            }

            if (tmp_dict_key_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 883;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[76]);

            if (unlikely(tmp_dict_value_3 == NULL)) {
                tmp_dict_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[76]);
            }

            if (tmp_dict_value_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 883;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 2 );
            {
                PyObject *tmp_expression_value_4;
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_3, tmp_dict_value_3);
                if (tmp_res != 0) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 883;
                    type_description_1 = "o";
                    goto dict_build_exception_3;
                }
                tmp_dict_key_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[76]);

                if (unlikely(tmp_dict_key_3 == NULL)) {
                    tmp_dict_key_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[76]);
                }

                if (tmp_dict_key_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 883;
                    type_description_1 = "o";
                    goto dict_build_exception_3;
                }
                CHECK_OBJECT(par_self);
                tmp_expression_value_4 = par_self;
                tmp_dict_value_3 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_4);
                if (tmp_dict_value_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 883;
                    type_description_1 = "o";
                    goto dict_build_exception_3;
                }
                tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_3, tmp_dict_value_3);
                Py_DECREF(tmp_dict_value_3);
                if (tmp_res != 0) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 883;
                    type_description_1 = "o";
                    goto dict_build_exception_3;
                }
            }
            goto dict_build_noexception_2;
            // Exception handling pass through code for dict_build:
            dict_build_exception_3:;
            Py_DECREF(tmp_dict_key_1);
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_2:;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 883;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
        }
        goto dict_build_noexception_3;
        // Exception handling pass through code for dict_build:
        dict_build_exception_2:;
        Py_DECREF(tmp_return_value);
        goto frame_exception_exit_1;
        // Finished with no exception for dict_build:
        dict_build_noexception_3:;
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_7d0d935729b36d094bbd555e9b47d2a4);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_7d0d935729b36d094bbd555e9b47d2a4);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_7d0d935729b36d094bbd555e9b47d2a4);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_7d0d935729b36d094bbd555e9b47d2a4, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_7d0d935729b36d094bbd555e9b47d2a4->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_7d0d935729b36d094bbd555e9b47d2a4, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_7d0d935729b36d094bbd555e9b47d2a4,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_7d0d935729b36d094bbd555e9b47d2a4 == cache_frame_7d0d935729b36d094bbd555e9b47d2a4) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_7d0d935729b36d094bbd555e9b47d2a4);
        cache_frame_7d0d935729b36d094bbd555e9b47d2a4 = NULL;
    }

    assertFrameObject(frame_7d0d935729b36d094bbd555e9b47d2a4);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__41___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_length = python_pars[1];
    struct Nuitka_FrameObject *frame_4aacf380a58948d6c3d3dd7b7bc1a643;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_4aacf380a58948d6c3d3dd7b7bc1a643 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_4aacf380a58948d6c3d3dd7b7bc1a643)) {
        Py_XDECREF(cache_frame_4aacf380a58948d6c3d3dd7b7bc1a643);

#if _DEBUG_REFCOUNTS
        if (cache_frame_4aacf380a58948d6c3d3dd7b7bc1a643 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_4aacf380a58948d6c3d3dd7b7bc1a643 = MAKE_FUNCTION_FRAME(codeobj_4aacf380a58948d6c3d3dd7b7bc1a643, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_4aacf380a58948d6c3d3dd7b7bc1a643->m_type_description == NULL);
    frame_4aacf380a58948d6c3d3dd7b7bc1a643 = cache_frame_4aacf380a58948d6c3d3dd7b7bc1a643;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_4aacf380a58948d6c3d3dd7b7bc1a643);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_4aacf380a58948d6c3d3dd7b7bc1a643) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_length);
        tmp_assattr_value_1 = par_length;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[22], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 892;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_4aacf380a58948d6c3d3dd7b7bc1a643);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_4aacf380a58948d6c3d3dd7b7bc1a643);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_4aacf380a58948d6c3d3dd7b7bc1a643, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_4aacf380a58948d6c3d3dd7b7bc1a643->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_4aacf380a58948d6c3d3dd7b7bc1a643, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_4aacf380a58948d6c3d3dd7b7bc1a643,
        type_description_1,
        par_self,
        par_length
    );


    // Release cached frame if used for exception.
    if (frame_4aacf380a58948d6c3d3dd7b7bc1a643 == cache_frame_4aacf380a58948d6c3d3dd7b7bc1a643) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_4aacf380a58948d6c3d3dd7b7bc1a643);
        cache_frame_4aacf380a58948d6c3d3dd7b7bc1a643 = NULL;
    }

    assertFrameObject(frame_4aacf380a58948d6c3d3dd7b7bc1a643);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_length);
    Py_DECREF(par_length);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_length);
    Py_DECREF(par_length);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__42_literal_processor(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_CellObject *par_dialect = Nuitka_Cell_New1(python_pars[1]);
    PyObject *var_process = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        struct Nuitka_CellObject *tmp_closure_1[1];

        tmp_closure_1[0] = par_dialect;
        Py_INCREF(tmp_closure_1[0]);

        tmp_assign_source_1 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__42_literal_processor$$$function__1_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_1;
    }
    // Tried code:
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__42_literal_processor$$$function__1_process(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_89692ce6656ecf43c2c7e75e2ac32991;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_89692ce6656ecf43c2c7e75e2ac32991 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_89692ce6656ecf43c2c7e75e2ac32991)) {
        Py_XDECREF(cache_frame_89692ce6656ecf43c2c7e75e2ac32991);

#if _DEBUG_REFCOUNTS
        if (cache_frame_89692ce6656ecf43c2c7e75e2ac32991 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_89692ce6656ecf43c2c7e75e2ac32991 = MAKE_FUNCTION_FRAME(codeobj_89692ce6656ecf43c2c7e75e2ac32991, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_89692ce6656ecf43c2c7e75e2ac32991->m_type_description == NULL);
    frame_89692ce6656ecf43c2c7e75e2ac32991 = cache_frame_89692ce6656ecf43c2c7e75e2ac32991;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_89692ce6656ecf43c2c7e75e2ac32991);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_89692ce6656ecf43c2c7e75e2ac32991) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_value);
        tmp_expression_value_2 = par_value;
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[108]);
        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 896;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {
            Py_DECREF(tmp_called_value_2);
            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[32]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 896;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_3 = Nuitka_Cell_GET(self->m_closure[0]);
        tmp_args_element_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[42]);
        if (tmp_args_element_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 896;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        frame_89692ce6656ecf43c2c7e75e2ac32991->m_frame.f_lineno = 896;
        tmp_expression_value_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_2, tmp_args_element_value_1);
        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 896;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[30]);
        Py_DECREF(tmp_expression_value_1);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 896;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        frame_89692ce6656ecf43c2c7e75e2ac32991->m_frame.f_lineno = 896;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_1, mod_consts[31]);

        Py_DECREF(tmp_called_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 896;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        tmp_left_value_1 = mod_consts[36];
        CHECK_OBJECT(par_value);
        tmp_right_value_1 = par_value;
        tmp_return_value = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_left_value_1, tmp_right_value_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 897;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_89692ce6656ecf43c2c7e75e2ac32991);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_89692ce6656ecf43c2c7e75e2ac32991);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_89692ce6656ecf43c2c7e75e2ac32991);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_89692ce6656ecf43c2c7e75e2ac32991, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_89692ce6656ecf43c2c7e75e2ac32991->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_89692ce6656ecf43c2c7e75e2ac32991, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_89692ce6656ecf43c2c7e75e2ac32991,
        type_description_1,
        par_value,
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_89692ce6656ecf43c2c7e75e2ac32991 == cache_frame_89692ce6656ecf43c2c7e75e2ac32991) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_89692ce6656ecf43c2c7e75e2ac32991);
        cache_frame_89692ce6656ecf43c2c7e75e2ac32991 = NULL;
    }

    assertFrameObject(frame_89692ce6656ecf43c2c7e75e2ac32991);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    par_value = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_value);
    par_value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__43_python_type(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_251229f7216f07084fb1cdbb281588b2;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_251229f7216f07084fb1cdbb281588b2 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_251229f7216f07084fb1cdbb281588b2)) {
        Py_XDECREF(cache_frame_251229f7216f07084fb1cdbb281588b2);

#if _DEBUG_REFCOUNTS
        if (cache_frame_251229f7216f07084fb1cdbb281588b2 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_251229f7216f07084fb1cdbb281588b2 = MAKE_FUNCTION_FRAME(codeobj_251229f7216f07084fb1cdbb281588b2, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_251229f7216f07084fb1cdbb281588b2->m_type_description == NULL);
    frame_251229f7216f07084fb1cdbb281588b2 = cache_frame_251229f7216f07084fb1cdbb281588b2;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_251229f7216f07084fb1cdbb281588b2);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_251229f7216f07084fb1cdbb281588b2) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 903;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[44]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 903;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_251229f7216f07084fb1cdbb281588b2);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_251229f7216f07084fb1cdbb281588b2);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_251229f7216f07084fb1cdbb281588b2);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_251229f7216f07084fb1cdbb281588b2, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_251229f7216f07084fb1cdbb281588b2->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_251229f7216f07084fb1cdbb281588b2, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_251229f7216f07084fb1cdbb281588b2,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_251229f7216f07084fb1cdbb281588b2 == cache_frame_251229f7216f07084fb1cdbb281588b2) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_251229f7216f07084fb1cdbb281588b2);
        cache_frame_251229f7216f07084fb1cdbb281588b2 = NULL;
    }

    assertFrameObject(frame_251229f7216f07084fb1cdbb281588b2);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__44_bind_processor(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    struct Nuitka_CellObject *var_DBAPIBinary = Nuitka_Cell_Empty();
    PyObject *var_process = NULL;
    struct Nuitka_FrameObject *frame_bb490b01efdce5ce06a5d056c467cb0e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_bb490b01efdce5ce06a5d056c467cb0e = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_bb490b01efdce5ce06a5d056c467cb0e)) {
        Py_XDECREF(cache_frame_bb490b01efdce5ce06a5d056c467cb0e);

#if _DEBUG_REFCOUNTS
        if (cache_frame_bb490b01efdce5ce06a5d056c467cb0e == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_bb490b01efdce5ce06a5d056c467cb0e = MAKE_FUNCTION_FRAME(codeobj_bb490b01efdce5ce06a5d056c467cb0e, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_bb490b01efdce5ce06a5d056c467cb0e->m_type_description == NULL);
    frame_bb490b01efdce5ce06a5d056c467cb0e = cache_frame_bb490b01efdce5ce06a5d056c467cb0e;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_bb490b01efdce5ce06a5d056c467cb0e);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_bb490b01efdce5ce06a5d056c467cb0e) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_dialect);
        tmp_expression_value_1 = par_dialect;
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[109]);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 908;
            type_description_1 = "ooco";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        Py_DECREF(tmp_cmp_expr_left_1);
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_dialect);
        tmp_expression_value_3 = par_dialect;
        tmp_expression_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[109]);
        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 911;
            type_description_1 = "ooco";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[110]);
        Py_DECREF(tmp_expression_value_2);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 911;
            type_description_1 = "ooco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_DBAPIBinary) == NULL);
        PyCell_SET(var_DBAPIBinary, tmp_assign_source_1);

    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_bb490b01efdce5ce06a5d056c467cb0e);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_bb490b01efdce5ce06a5d056c467cb0e);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_bb490b01efdce5ce06a5d056c467cb0e);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_bb490b01efdce5ce06a5d056c467cb0e, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_bb490b01efdce5ce06a5d056c467cb0e->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_bb490b01efdce5ce06a5d056c467cb0e, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_bb490b01efdce5ce06a5d056c467cb0e,
        type_description_1,
        par_self,
        par_dialect,
        var_DBAPIBinary,
        var_process
    );


    // Release cached frame if used for exception.
    if (frame_bb490b01efdce5ce06a5d056c467cb0e == cache_frame_bb490b01efdce5ce06a5d056c467cb0e) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_bb490b01efdce5ce06a5d056c467cb0e);
        cache_frame_bb490b01efdce5ce06a5d056c467cb0e = NULL;
    }

    assertFrameObject(frame_bb490b01efdce5ce06a5d056c467cb0e);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    {
        PyObject *tmp_assign_source_2;
        struct Nuitka_CellObject *tmp_closure_1[1];

        tmp_closure_1[0] = var_DBAPIBinary;
        Py_INCREF(tmp_closure_1[0]);

        tmp_assign_source_2 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__44_bind_processor$$$function__1_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_2;
    }
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_DBAPIBinary);
    Py_DECREF(var_DBAPIBinary);
    var_DBAPIBinary = NULL;
    Py_XDECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__44_bind_processor$$$function__1_process(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_d46eb5e851689f39d42df9005a5bccab;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_d46eb5e851689f39d42df9005a5bccab = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_d46eb5e851689f39d42df9005a5bccab)) {
        Py_XDECREF(cache_frame_d46eb5e851689f39d42df9005a5bccab);

#if _DEBUG_REFCOUNTS
        if (cache_frame_d46eb5e851689f39d42df9005a5bccab == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_d46eb5e851689f39d42df9005a5bccab = MAKE_FUNCTION_FRAME(codeobj_d46eb5e851689f39d42df9005a5bccab, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_d46eb5e851689f39d42df9005a5bccab->m_type_description == NULL);
    frame_d46eb5e851689f39d42df9005a5bccab = cache_frame_d46eb5e851689f39d42df9005a5bccab;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_d46eb5e851689f39d42df9005a5bccab);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_d46eb5e851689f39d42df9005a5bccab) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_value);
        tmp_cmp_expr_left_1 = par_value;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[112]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 915;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_called_value_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        frame_d46eb5e851689f39d42df9005a5bccab->m_frame.f_lineno = 915;
        tmp_return_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 915;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d46eb5e851689f39d42df9005a5bccab);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_d46eb5e851689f39d42df9005a5bccab);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d46eb5e851689f39d42df9005a5bccab);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_d46eb5e851689f39d42df9005a5bccab, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_d46eb5e851689f39d42df9005a5bccab->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_d46eb5e851689f39d42df9005a5bccab, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_d46eb5e851689f39d42df9005a5bccab,
        type_description_1,
        par_value,
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_d46eb5e851689f39d42df9005a5bccab == cache_frame_d46eb5e851689f39d42df9005a5bccab) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_d46eb5e851689f39d42df9005a5bccab);
        cache_frame_d46eb5e851689f39d42df9005a5bccab = NULL;
    }

    assertFrameObject(frame_d46eb5e851689f39d42df9005a5bccab);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__45_result_processor(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    PyObject *par_coltype = python_pars[2];
    PyObject *var_process = NULL;
    struct Nuitka_FrameObject *frame_1756c05d48e2c2b0e3146e16d7f42efe;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_1756c05d48e2c2b0e3146e16d7f42efe = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_1756c05d48e2c2b0e3146e16d7f42efe)) {
        Py_XDECREF(cache_frame_1756c05d48e2c2b0e3146e16d7f42efe);

#if _DEBUG_REFCOUNTS
        if (cache_frame_1756c05d48e2c2b0e3146e16d7f42efe == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_1756c05d48e2c2b0e3146e16d7f42efe = MAKE_FUNCTION_FRAME(codeobj_1756c05d48e2c2b0e3146e16d7f42efe, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_1756c05d48e2c2b0e3146e16d7f42efe->m_type_description == NULL);
    frame_1756c05d48e2c2b0e3146e16d7f42efe = cache_frame_1756c05d48e2c2b0e3146e16d7f42efe;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_1756c05d48e2c2b0e3146e16d7f42efe);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_1756c05d48e2c2b0e3146e16d7f42efe) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 927;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[113]);
        if (tmp_attribute_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 927;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 927;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;


        tmp_assign_source_1 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__45_result_processor$$$function__1_process();

        assert(var_process == NULL);
        var_process = tmp_assign_source_1;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_expression_value_2;
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[57]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[57]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 938;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[115]);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 938;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(var_process == NULL);
        var_process = tmp_assign_source_2;
    }
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_1756c05d48e2c2b0e3146e16d7f42efe);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_1756c05d48e2c2b0e3146e16d7f42efe);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_1756c05d48e2c2b0e3146e16d7f42efe, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_1756c05d48e2c2b0e3146e16d7f42efe->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_1756c05d48e2c2b0e3146e16d7f42efe, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_1756c05d48e2c2b0e3146e16d7f42efe,
        type_description_1,
        par_self,
        par_dialect,
        par_coltype,
        var_process
    );


    // Release cached frame if used for exception.
    if (frame_1756c05d48e2c2b0e3146e16d7f42efe == cache_frame_1756c05d48e2c2b0e3146e16d7f42efe) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_1756c05d48e2c2b0e3146e16d7f42efe);
        cache_frame_1756c05d48e2c2b0e3146e16d7f42efe = NULL;
    }

    assertFrameObject(frame_1756c05d48e2c2b0e3146e16d7f42efe);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__45_result_processor$$$function__1_process(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_d4c81abf6a43866a0767f93fe917f8f9;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_d4c81abf6a43866a0767f93fe917f8f9 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_d4c81abf6a43866a0767f93fe917f8f9)) {
        Py_XDECREF(cache_frame_d4c81abf6a43866a0767f93fe917f8f9);

#if _DEBUG_REFCOUNTS
        if (cache_frame_d4c81abf6a43866a0767f93fe917f8f9 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_d4c81abf6a43866a0767f93fe917f8f9 = MAKE_FUNCTION_FRAME(codeobj_d4c81abf6a43866a0767f93fe917f8f9, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_d4c81abf6a43866a0767f93fe917f8f9->m_type_description == NULL);
    frame_d4c81abf6a43866a0767f93fe917f8f9 = cache_frame_d4c81abf6a43866a0767f93fe917f8f9;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_d4c81abf6a43866a0767f93fe917f8f9);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_d4c81abf6a43866a0767f93fe917f8f9) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_value);
        tmp_cmp_expr_left_1 = par_value;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_value);
        tmp_isinstance_inst_1 = par_value;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[116]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[116]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 931;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[116]);
        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 931;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 931;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_called_instance_1;
        CHECK_OBJECT(par_value);
        tmp_called_instance_1 = par_value;
        frame_d4c81abf6a43866a0767f93fe917f8f9->m_frame.f_lineno = 932;
        tmp_return_value = CALL_METHOD_NO_ARGS(tmp_called_instance_1, mod_consts[117]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 932;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_no_2:;
    {
        PyObject *tmp_unicode_arg_1;
        CHECK_OBJECT(par_value);
        tmp_unicode_arg_1 = par_value;
        tmp_return_value = PyObject_Unicode(tmp_unicode_arg_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 933;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d4c81abf6a43866a0767f93fe917f8f9);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_d4c81abf6a43866a0767f93fe917f8f9);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d4c81abf6a43866a0767f93fe917f8f9);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_d4c81abf6a43866a0767f93fe917f8f9, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_d4c81abf6a43866a0767f93fe917f8f9->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_d4c81abf6a43866a0767f93fe917f8f9, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_d4c81abf6a43866a0767f93fe917f8f9,
        type_description_1,
        par_value
    );


    // Release cached frame if used for exception.
    if (frame_d4c81abf6a43866a0767f93fe917f8f9 == cache_frame_d4c81abf6a43866a0767f93fe917f8f9) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_d4c81abf6a43866a0767f93fe917f8f9);
        cache_frame_d4c81abf6a43866a0767f93fe917f8f9 = NULL;
    }

    assertFrameObject(frame_d4c81abf6a43866a0767f93fe917f8f9);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__46_result_processor(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    PyObject *par_coltype = python_pars[2];
    PyObject *var_process = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;


        tmp_assign_source_1 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__46_result_processor$$$function__1_process();

        assert(var_process == NULL);
        var_process = tmp_assign_source_1;
    }
    // Tried code:
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__46_result_processor$$$function__1_process(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_b36711c2963cf141646b9c711e21ccf6;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_b36711c2963cf141646b9c711e21ccf6 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_b36711c2963cf141646b9c711e21ccf6)) {
        Py_XDECREF(cache_frame_b36711c2963cf141646b9c711e21ccf6);

#if _DEBUG_REFCOUNTS
        if (cache_frame_b36711c2963cf141646b9c711e21ccf6 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_b36711c2963cf141646b9c711e21ccf6 = MAKE_FUNCTION_FRAME(codeobj_b36711c2963cf141646b9c711e21ccf6, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_b36711c2963cf141646b9c711e21ccf6->m_type_description == NULL);
    frame_b36711c2963cf141646b9c711e21ccf6 = cache_frame_b36711c2963cf141646b9c711e21ccf6;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_b36711c2963cf141646b9c711e21ccf6);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_b36711c2963cf141646b9c711e21ccf6) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_value);
        tmp_cmp_expr_left_1 = par_value;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_bytes_arg_1;
        CHECK_OBJECT(par_value);
        tmp_bytes_arg_1 = par_value;
        tmp_assign_source_1 = BUILTIN_BYTES1(tmp_bytes_arg_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 946;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    branch_no_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b36711c2963cf141646b9c711e21ccf6);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b36711c2963cf141646b9c711e21ccf6);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_b36711c2963cf141646b9c711e21ccf6, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_b36711c2963cf141646b9c711e21ccf6->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_b36711c2963cf141646b9c711e21ccf6, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_b36711c2963cf141646b9c711e21ccf6,
        type_description_1,
        par_value
    );


    // Release cached frame if used for exception.
    if (frame_b36711c2963cf141646b9c711e21ccf6 == cache_frame_b36711c2963cf141646b9c711e21ccf6) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_b36711c2963cf141646b9c711e21ccf6);
        cache_frame_b36711c2963cf141646b9c711e21ccf6 = NULL;
    }

    assertFrameObject(frame_b36711c2963cf141646b9c711e21ccf6);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT(par_value);
    tmp_return_value = par_value;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    par_value = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    par_value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__47_coerce_compared_value(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_op = python_pars[1];
    PyObject *par_value = python_pars[2];
    struct Nuitka_FrameObject *frame_11006c39680b562e97db1cca598b4175;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_11006c39680b562e97db1cca598b4175 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_11006c39680b562e97db1cca598b4175)) {
        Py_XDECREF(cache_frame_11006c39680b562e97db1cca598b4175);

#if _DEBUG_REFCOUNTS
        if (cache_frame_11006c39680b562e97db1cca598b4175 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_11006c39680b562e97db1cca598b4175 = MAKE_FUNCTION_FRAME(codeobj_11006c39680b562e97db1cca598b4175, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_11006c39680b562e97db1cca598b4175->m_type_description == NULL);
    frame_11006c39680b562e97db1cca598b4175 = cache_frame_11006c39680b562e97db1cca598b4175;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_11006c39680b562e97db1cca598b4175);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_11006c39680b562e97db1cca598b4175) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_value);
        tmp_isinstance_inst_1 = par_value;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 954;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[118]);
        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 954;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 954;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    CHECK_OBJECT(par_self);
    tmp_return_value = par_self;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        tmp_type_arg_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[119]);

        if (unlikely(tmp_type_arg_value_1 == NULL)) {
            tmp_type_arg_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[119]);
        }

        if (tmp_type_arg_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 957;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_object_arg_value_1 = par_self;
        tmp_called_instance_1 = BUILTIN_SUPER2(tmp_type_arg_value_1, tmp_object_arg_value_1);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 957;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_op);
        tmp_args_element_value_1 = par_op;
        CHECK_OBJECT(par_value);
        tmp_args_element_value_2 = par_value;
        frame_11006c39680b562e97db1cca598b4175->m_frame.f_lineno = 957;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_return_value = CALL_METHOD_WITH_ARGS2(
                tmp_called_instance_1,
                mod_consts[120],
                call_args
            );
        }

        Py_DECREF(tmp_called_instance_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 957;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_11006c39680b562e97db1cca598b4175);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_11006c39680b562e97db1cca598b4175);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_11006c39680b562e97db1cca598b4175);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_11006c39680b562e97db1cca598b4175, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_11006c39680b562e97db1cca598b4175->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_11006c39680b562e97db1cca598b4175, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_11006c39680b562e97db1cca598b4175,
        type_description_1,
        par_self,
        par_op,
        par_value,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_11006c39680b562e97db1cca598b4175 == cache_frame_11006c39680b562e97db1cca598b4175) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_11006c39680b562e97db1cca598b4175);
        cache_frame_11006c39680b562e97db1cca598b4175 = NULL;
    }

    assertFrameObject(frame_11006c39680b562e97db1cca598b4175);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_op);
    Py_DECREF(par_op);
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_op);
    Py_DECREF(par_op);
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__48_get_dbapi_type(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dbapi = python_pars[1];
    struct Nuitka_FrameObject *frame_5dc23e3c611a3907031273184fb1177f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_5dc23e3c611a3907031273184fb1177f = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_5dc23e3c611a3907031273184fb1177f)) {
        Py_XDECREF(cache_frame_5dc23e3c611a3907031273184fb1177f);

#if _DEBUG_REFCOUNTS
        if (cache_frame_5dc23e3c611a3907031273184fb1177f == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_5dc23e3c611a3907031273184fb1177f = MAKE_FUNCTION_FRAME(codeobj_5dc23e3c611a3907031273184fb1177f, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_5dc23e3c611a3907031273184fb1177f->m_type_description == NULL);
    frame_5dc23e3c611a3907031273184fb1177f = cache_frame_5dc23e3c611a3907031273184fb1177f;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_5dc23e3c611a3907031273184fb1177f);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_5dc23e3c611a3907031273184fb1177f) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_dbapi);
        tmp_expression_value_1 = par_dbapi;
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[122]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 960;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_5dc23e3c611a3907031273184fb1177f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_5dc23e3c611a3907031273184fb1177f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_5dc23e3c611a3907031273184fb1177f);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_5dc23e3c611a3907031273184fb1177f, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_5dc23e3c611a3907031273184fb1177f->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_5dc23e3c611a3907031273184fb1177f, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_5dc23e3c611a3907031273184fb1177f,
        type_description_1,
        par_self,
        par_dbapi
    );


    // Release cached frame if used for exception.
    if (frame_5dc23e3c611a3907031273184fb1177f == cache_frame_5dc23e3c611a3907031273184fb1177f) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_5dc23e3c611a3907031273184fb1177f);
        cache_frame_5dc23e3c611a3907031273184fb1177f = NULL;
    }

    assertFrameObject(frame_5dc23e3c611a3907031273184fb1177f);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dbapi);
    Py_DECREF(par_dbapi);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dbapi);
    Py_DECREF(par_dbapi);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__49___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_length = python_pars[1];
    struct Nuitka_FrameObject *frame_61455f2f5f4a7f37b222ffc578ee75d1;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_61455f2f5f4a7f37b222ffc578ee75d1 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_61455f2f5f4a7f37b222ffc578ee75d1)) {
        Py_XDECREF(cache_frame_61455f2f5f4a7f37b222ffc578ee75d1);

#if _DEBUG_REFCOUNTS
        if (cache_frame_61455f2f5f4a7f37b222ffc578ee75d1 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_61455f2f5f4a7f37b222ffc578ee75d1 = MAKE_FUNCTION_FRAME(codeobj_61455f2f5f4a7f37b222ffc578ee75d1, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_61455f2f5f4a7f37b222ffc578ee75d1->m_type_description == NULL);
    frame_61455f2f5f4a7f37b222ffc578ee75d1 = cache_frame_61455f2f5f4a7f37b222ffc578ee75d1;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_61455f2f5f4a7f37b222ffc578ee75d1);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_61455f2f5f4a7f37b222ffc578ee75d1) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_kw_call_dict_value_0_1;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[119]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[119]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 984;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[66]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 984;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_kw_call_arg_value_0_1 = par_self;
        CHECK_OBJECT(par_length);
        tmp_kw_call_dict_value_0_1 = par_length;
        frame_61455f2f5f4a7f37b222ffc578ee75d1->m_frame.f_lineno = 984;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1};
            PyObject *kw_values[1] = {tmp_kw_call_dict_value_0_1};
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tmp_called_value_1, args, kw_values, mod_consts[123]);
        }

        Py_DECREF(tmp_called_value_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 984;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_61455f2f5f4a7f37b222ffc578ee75d1);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_61455f2f5f4a7f37b222ffc578ee75d1);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_61455f2f5f4a7f37b222ffc578ee75d1, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_61455f2f5f4a7f37b222ffc578ee75d1->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_61455f2f5f4a7f37b222ffc578ee75d1, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_61455f2f5f4a7f37b222ffc578ee75d1,
        type_description_1,
        par_self,
        par_length
    );


    // Release cached frame if used for exception.
    if (frame_61455f2f5f4a7f37b222ffc578ee75d1 == cache_frame_61455f2f5f4a7f37b222ffc578ee75d1) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_61455f2f5f4a7f37b222ffc578ee75d1);
        cache_frame_61455f2f5f4a7f37b222ffc578ee75d1 = NULL;
    }

    assertFrameObject(frame_61455f2f5f4a7f37b222ffc578ee75d1);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_length);
    Py_DECREF(par_length);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_length);
    Py_DECREF(par_length);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__50___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_arg = python_pars[1];
    PyObject *par_kw = python_pars[2];
    struct Nuitka_FrameObject *frame_0750143555959753a924ef7d0a5bfde8;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_0750143555959753a924ef7d0a5bfde8 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_0750143555959753a924ef7d0a5bfde8)) {
        Py_XDECREF(cache_frame_0750143555959753a924ef7d0a5bfde8);

#if _DEBUG_REFCOUNTS
        if (cache_frame_0750143555959753a924ef7d0a5bfde8 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_0750143555959753a924ef7d0a5bfde8 = MAKE_FUNCTION_FRAME(codeobj_0750143555959753a924ef7d0a5bfde8, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_0750143555959753a924ef7d0a5bfde8->m_type_description == NULL);
    frame_0750143555959753a924ef7d0a5bfde8 = cache_frame_0750143555959753a924ef7d0a5bfde8;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_0750143555959753a924ef7d0a5bfde8);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_0750143555959753a924ef7d0a5bfde8) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_dircall_arg3_1;
        PyObject *tmp_dircall_arg4_1;
        PyObject *tmp_call_result_1;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[125]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[125]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 994;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[66]);
        if (tmp_dircall_arg1_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 994;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_tuple_element_1 = par_self;
        tmp_dircall_arg2_1 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(par_arg);
        tmp_dircall_arg3_1 = par_arg;
        CHECK_OBJECT(par_kw);
        tmp_dircall_arg4_1 = par_kw;
        Py_INCREF(tmp_dircall_arg3_1);
        Py_INCREF(tmp_dircall_arg4_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1, tmp_dircall_arg4_1};
            tmp_call_result_1 = impl___main__$$$function__10_complex_call_helper_pos_star_list_star_dict(dir_call_args);
        }
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 994;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_0750143555959753a924ef7d0a5bfde8);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_0750143555959753a924ef7d0a5bfde8);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_0750143555959753a924ef7d0a5bfde8, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_0750143555959753a924ef7d0a5bfde8->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_0750143555959753a924ef7d0a5bfde8, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_0750143555959753a924ef7d0a5bfde8,
        type_description_1,
        par_self,
        par_arg,
        par_kw
    );


    // Release cached frame if used for exception.
    if (frame_0750143555959753a924ef7d0a5bfde8 == cache_frame_0750143555959753a924ef7d0a5bfde8) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_0750143555959753a924ef7d0a5bfde8);
        cache_frame_0750143555959753a924ef7d0a5bfde8 = NULL;
    }

    assertFrameObject(frame_0750143555959753a924ef7d0a5bfde8);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_arg);
    Py_DECREF(par_arg);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_arg);
    Py_DECREF(par_arg);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__51___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_name = python_pars[1];
    PyObject *par_schema = python_pars[2];
    PyObject *par_metadata = python_pars[3];
    PyObject *par_inherit_schema = python_pars[4];
    PyObject *par_quote = python_pars[5];
    PyObject *par__create_events = python_pars[6];
    struct Nuitka_FrameObject *frame_394bac202f9a68f7a19b92e945c22056;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_394bac202f9a68f7a19b92e945c22056 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_394bac202f9a68f7a19b92e945c22056)) {
        Py_XDECREF(cache_frame_394bac202f9a68f7a19b92e945c22056);

#if _DEBUG_REFCOUNTS
        if (cache_frame_394bac202f9a68f7a19b92e945c22056 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_394bac202f9a68f7a19b92e945c22056 = MAKE_FUNCTION_FRAME(codeobj_394bac202f9a68f7a19b92e945c22056, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_394bac202f9a68f7a19b92e945c22056->m_type_description == NULL);
    frame_394bac202f9a68f7a19b92e945c22056 = cache_frame_394bac202f9a68f7a19b92e945c22056;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_394bac202f9a68f7a19b92e945c22056);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_394bac202f9a68f7a19b92e945c22056) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_name);
        tmp_cmp_expr_left_1 = par_name;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[126]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[126]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1030;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_name);
        tmp_args_element_value_1 = par_name;
        CHECK_OBJECT(par_quote);
        tmp_args_element_value_2 = par_quote;
        frame_394bac202f9a68f7a19b92e945c22056->m_frame.f_lineno = 1030;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1030;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[93], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1030;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_value_2 = Py_None;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[93], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1032;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    branch_end_1:;
    {
        PyObject *tmp_assattr_value_3;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT(par_schema);
        tmp_assattr_value_3 = par_schema;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_3, mod_consts[127], tmp_assattr_value_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1033;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_4;
        PyObject *tmp_assattr_target_4;
        CHECK_OBJECT(par_metadata);
        tmp_assattr_value_4 = par_metadata;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_4, mod_consts[128], tmp_assattr_value_4);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1034;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_5;
        PyObject *tmp_assattr_target_5;
        CHECK_OBJECT(par_inherit_schema);
        tmp_assattr_value_5 = par_inherit_schema;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_5 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_5, mod_consts[129], tmp_assattr_value_5);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1035;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_6;
        PyObject *tmp_assattr_target_6;
        CHECK_OBJECT(par__create_events);
        tmp_assattr_value_6 = par__create_events;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_6 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_6, mod_consts[130], tmp_assattr_value_6);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1036;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        int tmp_truth_name_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_2;
        CHECK_OBJECT(par__create_events);
        tmp_truth_name_1 = CHECK_IF_TRUE(par__create_events);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1038;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1038;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[128]);
        if (tmp_attribute_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1038;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 1038;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        tmp_condition_result_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_2 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_called_value_3;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_args_element_value_6;
        PyObject *tmp_expression_value_5;
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[131]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[131]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1039;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[132]);
        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1039;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        if (par_self == NULL) {
            Py_DECREF(tmp_called_value_2);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1040;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_3 = par_self;
        tmp_args_element_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[128]);
        if (tmp_args_element_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 1040;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_4 = mod_consts[133];
        tmp_expression_value_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_4 == NULL)) {
            tmp_expression_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
        }

        if (tmp_expression_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_args_element_value_3);

            exception_lineno = 1042;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[134]);
        if (tmp_called_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_args_element_value_3);

            exception_lineno = 1042;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        if (par_self == NULL) {
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_args_element_value_3);
            Py_DECREF(tmp_called_value_3);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1042;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_5 = par_self;
        tmp_args_element_value_6 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[135]);
        if (tmp_args_element_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_args_element_value_3);
            Py_DECREF(tmp_called_value_3);

            exception_lineno = 1042;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        frame_394bac202f9a68f7a19b92e945c22056->m_frame.f_lineno = 1042;
        tmp_args_element_value_5 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_3, tmp_args_element_value_6);
        Py_DECREF(tmp_called_value_3);
        Py_DECREF(tmp_args_element_value_6);
        if (tmp_args_element_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_args_element_value_3);

            exception_lineno = 1042;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        frame_394bac202f9a68f7a19b92e945c22056->m_frame.f_lineno = 1039;
        {
            PyObject *call_args[] = {tmp_args_element_value_3, tmp_args_element_value_4, tmp_args_element_value_5};
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_2, call_args);
        }

        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_3);
        Py_DECREF(tmp_args_element_value_5);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1039;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_called_value_4;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_value_7;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_args_element_value_8;
        PyObject *tmp_args_element_value_9;
        PyObject *tmp_called_value_5;
        PyObject *tmp_expression_value_8;
        PyObject *tmp_args_element_value_10;
        PyObject *tmp_expression_value_9;
        tmp_expression_value_6 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[131]);

        if (unlikely(tmp_expression_value_6 == NULL)) {
            tmp_expression_value_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[131]);
        }

        if (tmp_expression_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1044;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[132]);
        if (tmp_called_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1044;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        if (par_self == NULL) {
            Py_DECREF(tmp_called_value_4);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1045;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_7 = par_self;
        tmp_args_element_value_7 = LOOKUP_ATTRIBUTE(tmp_expression_value_7, mod_consts[128]);
        if (tmp_args_element_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_4);

            exception_lineno = 1045;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_8 = mod_consts[136];
        tmp_expression_value_8 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_8 == NULL)) {
            tmp_expression_value_8 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
        }

        if (tmp_expression_value_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_4);
            Py_DECREF(tmp_args_element_value_7);

            exception_lineno = 1047;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_8, mod_consts[134]);
        if (tmp_called_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_4);
            Py_DECREF(tmp_args_element_value_7);

            exception_lineno = 1047;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        if (par_self == NULL) {
            Py_DECREF(tmp_called_value_4);
            Py_DECREF(tmp_args_element_value_7);
            Py_DECREF(tmp_called_value_5);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1047;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_9 = par_self;
        tmp_args_element_value_10 = LOOKUP_ATTRIBUTE(tmp_expression_value_9, mod_consts[137]);
        if (tmp_args_element_value_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_4);
            Py_DECREF(tmp_args_element_value_7);
            Py_DECREF(tmp_called_value_5);

            exception_lineno = 1047;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        frame_394bac202f9a68f7a19b92e945c22056->m_frame.f_lineno = 1047;
        tmp_args_element_value_9 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_5, tmp_args_element_value_10);
        Py_DECREF(tmp_called_value_5);
        Py_DECREF(tmp_args_element_value_10);
        if (tmp_args_element_value_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_4);
            Py_DECREF(tmp_args_element_value_7);

            exception_lineno = 1047;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        frame_394bac202f9a68f7a19b92e945c22056->m_frame.f_lineno = 1044;
        {
            PyObject *call_args[] = {tmp_args_element_value_7, tmp_args_element_value_8, tmp_args_element_value_9};
            tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_4, call_args);
        }

        Py_DECREF(tmp_called_value_4);
        Py_DECREF(tmp_args_element_value_7);
        Py_DECREF(tmp_args_element_value_9);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1044;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    branch_no_2:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_394bac202f9a68f7a19b92e945c22056);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_394bac202f9a68f7a19b92e945c22056);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_394bac202f9a68f7a19b92e945c22056, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_394bac202f9a68f7a19b92e945c22056->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_394bac202f9a68f7a19b92e945c22056, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_394bac202f9a68f7a19b92e945c22056,
        type_description_1,
        par_self,
        par_name,
        par_schema,
        par_metadata,
        par_inherit_schema,
        par_quote,
        par__create_events
    );


    // Release cached frame if used for exception.
    if (frame_394bac202f9a68f7a19b92e945c22056 == cache_frame_394bac202f9a68f7a19b92e945c22056) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_394bac202f9a68f7a19b92e945c22056);
        cache_frame_394bac202f9a68f7a19b92e945c22056 = NULL;
    }

    assertFrameObject(frame_394bac202f9a68f7a19b92e945c22056);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_schema);
    Py_DECREF(par_schema);
    CHECK_OBJECT(par_metadata);
    Py_DECREF(par_metadata);
    CHECK_OBJECT(par_inherit_schema);
    Py_DECREF(par_inherit_schema);
    CHECK_OBJECT(par_quote);
    Py_DECREF(par_quote);
    CHECK_OBJECT(par__create_events);
    Py_DECREF(par__create_events);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_schema);
    Py_DECREF(par_schema);
    CHECK_OBJECT(par_metadata);
    Py_DECREF(par_metadata);
    CHECK_OBJECT(par_inherit_schema);
    Py_DECREF(par_inherit_schema);
    CHECK_OBJECT(par_quote);
    Py_DECREF(par_quote);
    CHECK_OBJECT(par__create_events);
    Py_DECREF(par__create_events);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__52__translate_schema(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_effective_schema = python_pars[1];
    PyObject *par_map_ = python_pars[2];
    struct Nuitka_FrameObject *frame_4032c3dfea19bcd8f7c88283a2719554;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_4032c3dfea19bcd8f7c88283a2719554 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_4032c3dfea19bcd8f7c88283a2719554)) {
        Py_XDECREF(cache_frame_4032c3dfea19bcd8f7c88283a2719554);

#if _DEBUG_REFCOUNTS
        if (cache_frame_4032c3dfea19bcd8f7c88283a2719554 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_4032c3dfea19bcd8f7c88283a2719554 = MAKE_FUNCTION_FRAME(codeobj_4032c3dfea19bcd8f7c88283a2719554, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_4032c3dfea19bcd8f7c88283a2719554->m_type_description == NULL);
    frame_4032c3dfea19bcd8f7c88283a2719554 = cache_frame_4032c3dfea19bcd8f7c88283a2719554;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_4032c3dfea19bcd8f7c88283a2719554);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_4032c3dfea19bcd8f7c88283a2719554) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_map_);
        tmp_expression_value_1 = par_map_;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[3]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1051;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_effective_schema);
        tmp_args_element_value_1 = par_effective_schema;
        CHECK_OBJECT(par_effective_schema);
        tmp_args_element_value_2 = par_effective_schema;
        frame_4032c3dfea19bcd8f7c88283a2719554->m_frame.f_lineno = 1051;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1051;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_4032c3dfea19bcd8f7c88283a2719554);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_4032c3dfea19bcd8f7c88283a2719554);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_4032c3dfea19bcd8f7c88283a2719554);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_4032c3dfea19bcd8f7c88283a2719554, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_4032c3dfea19bcd8f7c88283a2719554->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_4032c3dfea19bcd8f7c88283a2719554, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_4032c3dfea19bcd8f7c88283a2719554,
        type_description_1,
        par_self,
        par_effective_schema,
        par_map_
    );


    // Release cached frame if used for exception.
    if (frame_4032c3dfea19bcd8f7c88283a2719554 == cache_frame_4032c3dfea19bcd8f7c88283a2719554) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_4032c3dfea19bcd8f7c88283a2719554);
        cache_frame_4032c3dfea19bcd8f7c88283a2719554 = NULL;
    }

    assertFrameObject(frame_4032c3dfea19bcd8f7c88283a2719554);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_effective_schema);
    Py_DECREF(par_effective_schema);
    CHECK_OBJECT(par_map_);
    Py_DECREF(par_map_);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_effective_schema);
    Py_DECREF(par_effective_schema);
    CHECK_OBJECT(par_map_);
    Py_DECREF(par_map_);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__53__set_parent(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_column = python_pars[1];
    struct Nuitka_FrameObject *frame_f9aac4d77fb1b95b4b0e78bcad32c2bc;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_f9aac4d77fb1b95b4b0e78bcad32c2bc = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_f9aac4d77fb1b95b4b0e78bcad32c2bc)) {
        Py_XDECREF(cache_frame_f9aac4d77fb1b95b4b0e78bcad32c2bc);

#if _DEBUG_REFCOUNTS
        if (cache_frame_f9aac4d77fb1b95b4b0e78bcad32c2bc == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_f9aac4d77fb1b95b4b0e78bcad32c2bc = MAKE_FUNCTION_FRAME(codeobj_f9aac4d77fb1b95b4b0e78bcad32c2bc, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_f9aac4d77fb1b95b4b0e78bcad32c2bc->m_type_description == NULL);
    frame_f9aac4d77fb1b95b4b0e78bcad32c2bc = cache_frame_f9aac4d77fb1b95b4b0e78bcad32c2bc;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_f9aac4d77fb1b95b4b0e78bcad32c2bc);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_f9aac4d77fb1b95b4b0e78bcad32c2bc) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_column);
        tmp_expression_value_1 = par_column;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[138]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1054;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1054;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[134]);
        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1054;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_args_element_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[139]);
        if (tmp_args_element_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 1054;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_f9aac4d77fb1b95b4b0e78bcad32c2bc->m_frame.f_lineno = 1054;
        tmp_args_element_value_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_2, tmp_args_element_value_2);
        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_2);
        if (tmp_args_element_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1054;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_f9aac4d77fb1b95b4b0e78bcad32c2bc->m_frame.f_lineno = 1054;
        tmp_call_result_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_1, tmp_args_element_value_1);
        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1054;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_f9aac4d77fb1b95b4b0e78bcad32c2bc);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_f9aac4d77fb1b95b4b0e78bcad32c2bc);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_f9aac4d77fb1b95b4b0e78bcad32c2bc, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_f9aac4d77fb1b95b4b0e78bcad32c2bc->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_f9aac4d77fb1b95b4b0e78bcad32c2bc, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_f9aac4d77fb1b95b4b0e78bcad32c2bc,
        type_description_1,
        par_self,
        par_column
    );


    // Release cached frame if used for exception.
    if (frame_f9aac4d77fb1b95b4b0e78bcad32c2bc == cache_frame_f9aac4d77fb1b95b4b0e78bcad32c2bc) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_f9aac4d77fb1b95b4b0e78bcad32c2bc);
        cache_frame_f9aac4d77fb1b95b4b0e78bcad32c2bc = NULL;
    }

    assertFrameObject(frame_f9aac4d77fb1b95b4b0e78bcad32c2bc);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_column);
    Py_DECREF(par_column);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_column);
    Py_DECREF(par_column);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__54__variant_mapping_for_set_table(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_column = python_pars[1];
    PyObject *var_variant_mapping = NULL;
    struct Nuitka_FrameObject *frame_e0a68c9cf4ff975f03c94de87ad726a5;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_e0a68c9cf4ff975f03c94de87ad726a5 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_e0a68c9cf4ff975f03c94de87ad726a5)) {
        Py_XDECREF(cache_frame_e0a68c9cf4ff975f03c94de87ad726a5);

#if _DEBUG_REFCOUNTS
        if (cache_frame_e0a68c9cf4ff975f03c94de87ad726a5 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_e0a68c9cf4ff975f03c94de87ad726a5 = MAKE_FUNCTION_FRAME(codeobj_e0a68c9cf4ff975f03c94de87ad726a5, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_e0a68c9cf4ff975f03c94de87ad726a5->m_type_description == NULL);
    frame_e0a68c9cf4ff975f03c94de87ad726a5 = cache_frame_e0a68c9cf4ff975f03c94de87ad726a5;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_e0a68c9cf4ff975f03c94de87ad726a5);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_e0a68c9cf4ff975f03c94de87ad726a5) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_column);
        tmp_expression_value_1 = par_column;
        tmp_isinstance_inst_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[0]);
        if (tmp_isinstance_inst_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1057;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[140]);

        if (unlikely(tmp_isinstance_cls_1 == NULL)) {
            tmp_isinstance_cls_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[140]);
        }

        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_isinstance_inst_1);

            exception_lineno = 1057;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_inst_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1057;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_expression_value_4;
        CHECK_OBJECT(par_column);
        tmp_expression_value_4 = par_column;
        tmp_expression_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[0]);
        if (tmp_expression_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1058;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[141]);
        Py_DECREF(tmp_expression_value_3);
        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1058;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[142]);
        Py_DECREF(tmp_expression_value_2);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1058;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_e0a68c9cf4ff975f03c94de87ad726a5->m_frame.f_lineno = 1058;
        tmp_assign_source_1 = CALL_FUNCTION_NO_ARGS(tmp_called_value_1);
        Py_DECREF(tmp_called_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1058;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert(var_variant_mapping == NULL);
        var_variant_mapping = tmp_assign_source_1;
    }
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_ass_subscript_1;
        CHECK_OBJECT(par_column);
        tmp_expression_value_6 = par_column;
        tmp_expression_value_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[0]);
        if (tmp_expression_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1059;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_ass_subvalue_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[143]);
        Py_DECREF(tmp_expression_value_5);
        if (tmp_ass_subvalue_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1059;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_variant_mapping);
        tmp_ass_subscribed_1 = var_variant_mapping;
        tmp_ass_subscript_1 = mod_consts[144];
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
        Py_DECREF(tmp_ass_subvalue_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1059;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = Py_None;
        assert(var_variant_mapping == NULL);
        Py_INCREF(tmp_assign_source_2);
        var_variant_mapping = tmp_assign_source_2;
    }
    branch_end_1:;
    if (var_variant_mapping == NULL) {

        FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[145]);
        exception_tb = NULL;
        NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
        CHAIN_EXCEPTION(exception_value);

        exception_lineno = 1062;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_return_value = var_variant_mapping;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e0a68c9cf4ff975f03c94de87ad726a5);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_e0a68c9cf4ff975f03c94de87ad726a5);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e0a68c9cf4ff975f03c94de87ad726a5);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_e0a68c9cf4ff975f03c94de87ad726a5, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_e0a68c9cf4ff975f03c94de87ad726a5->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_e0a68c9cf4ff975f03c94de87ad726a5, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_e0a68c9cf4ff975f03c94de87ad726a5,
        type_description_1,
        par_self,
        par_column,
        var_variant_mapping
    );


    // Release cached frame if used for exception.
    if (frame_e0a68c9cf4ff975f03c94de87ad726a5 == cache_frame_e0a68c9cf4ff975f03c94de87ad726a5) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_e0a68c9cf4ff975f03c94de87ad726a5);
        cache_frame_e0a68c9cf4ff975f03c94de87ad726a5 = NULL;
    }

    assertFrameObject(frame_e0a68c9cf4ff975f03c94de87ad726a5);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_variant_mapping);
    var_variant_mapping = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_variant_mapping);
    var_variant_mapping = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_column);
    Py_DECREF(par_column);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_column);
    Py_DECREF(par_column);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__55__set_table(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_column = python_pars[1];
    PyObject *par_table = python_pars[2];
    PyObject *var_variant_mapping = NULL;
    struct Nuitka_FrameObject *frame_d2426f7bc495f163f33af1e9581c3942;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_d2426f7bc495f163f33af1e9581c3942 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_d2426f7bc495f163f33af1e9581c3942)) {
        Py_XDECREF(cache_frame_d2426f7bc495f163f33af1e9581c3942);

#if _DEBUG_REFCOUNTS
        if (cache_frame_d2426f7bc495f163f33af1e9581c3942 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_d2426f7bc495f163f33af1e9581c3942 = MAKE_FUNCTION_FRAME(codeobj_d2426f7bc495f163f33af1e9581c3942, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_d2426f7bc495f163f33af1e9581c3942->m_type_description == NULL);
    frame_d2426f7bc495f163f33af1e9581c3942 = cache_frame_d2426f7bc495f163f33af1e9581c3942;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_d2426f7bc495f163f33af1e9581c3942);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_d2426f7bc495f163f33af1e9581c3942) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[129]);
        if (tmp_attribute_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1065;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 1065;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_table);
        tmp_expression_value_2 = par_table;
        tmp_assattr_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[127]);
        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1066;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[127], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1066;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    branch_no_1:;
    {
        bool tmp_condition_result_2;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_operand_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[130]);
        if (tmp_operand_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1068;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        Py_DECREF(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1068;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_2 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_no_2:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_1;
        CHECK_OBJECT(par_self);
        tmp_called_instance_1 = par_self;
        CHECK_OBJECT(par_column);
        tmp_args_element_value_1 = par_column;
        frame_d2426f7bc495f163f33af1e9581c3942->m_frame.f_lineno = 1071;
        tmp_assign_source_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[146], tmp_args_element_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1071;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(var_variant_mapping == NULL);
        var_variant_mapping = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_args_element_value_6;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        tmp_expression_value_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[131]);

        if (unlikely(tmp_expression_value_4 == NULL)) {
            tmp_expression_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[131]);
        }

        if (tmp_expression_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1073;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[132]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1073;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        if (par_table == NULL) {
            Py_DECREF(tmp_called_value_1);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[147]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1074;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_value_2 = par_table;
        tmp_args_element_value_3 = mod_consts[133];
        tmp_expression_value_5 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_5 == NULL)) {
            tmp_expression_value_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
        }

        if (tmp_expression_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1076;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[134]);
        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1076;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_6 = par_self;
        tmp_args_element_value_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[148]);
        if (tmp_args_element_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 1077;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = mod_consts[145];
        CHECK_OBJECT(var_variant_mapping);
        tmp_dict_value_1 = var_variant_mapping;
        tmp_args_element_value_6 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_args_element_value_6, tmp_dict_key_1, tmp_dict_value_1);
        assert(!(tmp_res != 0));
        frame_d2426f7bc495f163f33af1e9581c3942->m_frame.f_lineno = 1076;
        {
            PyObject *call_args[] = {tmp_args_element_value_5, tmp_args_element_value_6};
            tmp_args_element_value_4 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_2, call_args);
        }

        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_5);
        Py_DECREF(tmp_args_element_value_6);
        if (tmp_args_element_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1076;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_d2426f7bc495f163f33af1e9581c3942->m_frame.f_lineno = 1073;
        {
            PyObject *call_args[] = {tmp_args_element_value_2, tmp_args_element_value_3, tmp_args_element_value_4};
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_4);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1073;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_called_value_3;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_value_7;
        PyObject *tmp_args_element_value_8;
        PyObject *tmp_args_element_value_9;
        PyObject *tmp_called_value_4;
        PyObject *tmp_expression_value_8;
        PyObject *tmp_args_element_value_10;
        PyObject *tmp_expression_value_9;
        PyObject *tmp_args_element_value_11;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        tmp_expression_value_7 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[131]);

        if (unlikely(tmp_expression_value_7 == NULL)) {
            tmp_expression_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[131]);
        }

        if (tmp_expression_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1080;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_7, mod_consts[132]);
        if (tmp_called_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1080;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        if (par_table == NULL) {
            Py_DECREF(tmp_called_value_3);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[147]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1081;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_value_7 = par_table;
        tmp_args_element_value_8 = mod_consts[136];
        tmp_expression_value_8 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_8 == NULL)) {
            tmp_expression_value_8 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
        }

        if (tmp_expression_value_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_3);

            exception_lineno = 1083;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_8, mod_consts[134]);
        if (tmp_called_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_3);

            exception_lineno = 1083;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_9 = par_self;
        tmp_args_element_value_10 = LOOKUP_ATTRIBUTE(tmp_expression_value_9, mod_consts[149]);
        if (tmp_args_element_value_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_3);
            Py_DECREF(tmp_called_value_4);

            exception_lineno = 1084;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_2 = mod_consts[145];
        CHECK_OBJECT(var_variant_mapping);
        tmp_dict_value_2 = var_variant_mapping;
        tmp_args_element_value_11 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_args_element_value_11, tmp_dict_key_2, tmp_dict_value_2);
        assert(!(tmp_res != 0));
        frame_d2426f7bc495f163f33af1e9581c3942->m_frame.f_lineno = 1083;
        {
            PyObject *call_args[] = {tmp_args_element_value_10, tmp_args_element_value_11};
            tmp_args_element_value_9 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_4, call_args);
        }

        Py_DECREF(tmp_called_value_4);
        Py_DECREF(tmp_args_element_value_10);
        Py_DECREF(tmp_args_element_value_11);
        if (tmp_args_element_value_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_3);

            exception_lineno = 1083;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_d2426f7bc495f163f33af1e9581c3942->m_frame.f_lineno = 1080;
        {
            PyObject *call_args[] = {tmp_args_element_value_7, tmp_args_element_value_8, tmp_args_element_value_9};
            tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_3, call_args);
        }

        Py_DECREF(tmp_called_value_3);
        Py_DECREF(tmp_args_element_value_9);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1080;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    {
        bool tmp_condition_result_3;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_10;
        CHECK_OBJECT(par_self);
        tmp_expression_value_10 = par_self;
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_10, mod_consts[128]);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1087;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_3 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        Py_DECREF(tmp_cmp_expr_left_1);
        if (tmp_condition_result_3 != false) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_called_value_5;
        PyObject *tmp_expression_value_11;
        PyObject *tmp_call_result_3;
        PyObject *tmp_args_element_value_12;
        PyObject *tmp_expression_value_12;
        PyObject *tmp_args_element_value_13;
        PyObject *tmp_args_element_value_14;
        PyObject *tmp_called_value_6;
        PyObject *tmp_expression_value_13;
        PyObject *tmp_args_element_value_15;
        PyObject *tmp_expression_value_14;
        PyObject *tmp_args_element_value_16;
        PyObject *tmp_dict_key_3;
        PyObject *tmp_dict_value_3;
        tmp_expression_value_11 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[131]);

        if (unlikely(tmp_expression_value_11 == NULL)) {
            tmp_expression_value_11 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[131]);
        }

        if (tmp_expression_value_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1090;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_11, mod_consts[132]);
        if (tmp_called_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1090;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        if (par_table == NULL) {
            Py_DECREF(tmp_called_value_5);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[147]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1091;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_12 = par_table;
        tmp_args_element_value_12 = LOOKUP_ATTRIBUTE(tmp_expression_value_12, mod_consts[128]);
        if (tmp_args_element_value_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_5);

            exception_lineno = 1091;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_13 = mod_consts[133];
        tmp_expression_value_13 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_13 == NULL)) {
            tmp_expression_value_13 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
        }

        if (tmp_expression_value_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_5);
            Py_DECREF(tmp_args_element_value_12);

            exception_lineno = 1093;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_6 = LOOKUP_ATTRIBUTE(tmp_expression_value_13, mod_consts[134]);
        if (tmp_called_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_5);
            Py_DECREF(tmp_args_element_value_12);

            exception_lineno = 1093;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_14 = par_self;
        tmp_args_element_value_15 = LOOKUP_ATTRIBUTE(tmp_expression_value_14, mod_consts[135]);
        if (tmp_args_element_value_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_5);
            Py_DECREF(tmp_args_element_value_12);
            Py_DECREF(tmp_called_value_6);

            exception_lineno = 1094;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_3 = mod_consts[145];
        CHECK_OBJECT(var_variant_mapping);
        tmp_dict_value_3 = var_variant_mapping;
        tmp_args_element_value_16 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_args_element_value_16, tmp_dict_key_3, tmp_dict_value_3);
        assert(!(tmp_res != 0));
        frame_d2426f7bc495f163f33af1e9581c3942->m_frame.f_lineno = 1093;
        {
            PyObject *call_args[] = {tmp_args_element_value_15, tmp_args_element_value_16};
            tmp_args_element_value_14 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_6, call_args);
        }

        Py_DECREF(tmp_called_value_6);
        Py_DECREF(tmp_args_element_value_15);
        Py_DECREF(tmp_args_element_value_16);
        if (tmp_args_element_value_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_5);
            Py_DECREF(tmp_args_element_value_12);

            exception_lineno = 1093;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_d2426f7bc495f163f33af1e9581c3942->m_frame.f_lineno = 1090;
        {
            PyObject *call_args[] = {tmp_args_element_value_12, tmp_args_element_value_13, tmp_args_element_value_14};
            tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_5, call_args);
        }

        Py_DECREF(tmp_called_value_5);
        Py_DECREF(tmp_args_element_value_12);
        Py_DECREF(tmp_args_element_value_14);
        if (tmp_call_result_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1090;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_3);
    }
    {
        PyObject *tmp_called_value_7;
        PyObject *tmp_expression_value_15;
        PyObject *tmp_call_result_4;
        PyObject *tmp_args_element_value_17;
        PyObject *tmp_expression_value_16;
        PyObject *tmp_args_element_value_18;
        PyObject *tmp_args_element_value_19;
        PyObject *tmp_called_value_8;
        PyObject *tmp_expression_value_17;
        PyObject *tmp_args_element_value_20;
        PyObject *tmp_expression_value_18;
        PyObject *tmp_args_element_value_21;
        PyObject *tmp_dict_key_4;
        PyObject *tmp_dict_value_4;
        tmp_expression_value_15 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[131]);

        if (unlikely(tmp_expression_value_15 == NULL)) {
            tmp_expression_value_15 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[131]);
        }

        if (tmp_expression_value_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1098;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_7 = LOOKUP_ATTRIBUTE(tmp_expression_value_15, mod_consts[132]);
        if (tmp_called_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1098;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        if (par_table == NULL) {
            Py_DECREF(tmp_called_value_7);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[147]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1099;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_16 = par_table;
        tmp_args_element_value_17 = LOOKUP_ATTRIBUTE(tmp_expression_value_16, mod_consts[128]);
        if (tmp_args_element_value_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_7);

            exception_lineno = 1099;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_18 = mod_consts[136];
        tmp_expression_value_17 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_17 == NULL)) {
            tmp_expression_value_17 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
        }

        if (tmp_expression_value_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_7);
            Py_DECREF(tmp_args_element_value_17);

            exception_lineno = 1101;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_8 = LOOKUP_ATTRIBUTE(tmp_expression_value_17, mod_consts[134]);
        if (tmp_called_value_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_7);
            Py_DECREF(tmp_args_element_value_17);

            exception_lineno = 1101;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_18 = par_self;
        tmp_args_element_value_20 = LOOKUP_ATTRIBUTE(tmp_expression_value_18, mod_consts[137]);
        if (tmp_args_element_value_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_7);
            Py_DECREF(tmp_args_element_value_17);
            Py_DECREF(tmp_called_value_8);

            exception_lineno = 1102;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_4 = mod_consts[145];
        CHECK_OBJECT(var_variant_mapping);
        tmp_dict_value_4 = var_variant_mapping;
        tmp_args_element_value_21 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_args_element_value_21, tmp_dict_key_4, tmp_dict_value_4);
        assert(!(tmp_res != 0));
        frame_d2426f7bc495f163f33af1e9581c3942->m_frame.f_lineno = 1101;
        {
            PyObject *call_args[] = {tmp_args_element_value_20, tmp_args_element_value_21};
            tmp_args_element_value_19 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_8, call_args);
        }

        Py_DECREF(tmp_called_value_8);
        Py_DECREF(tmp_args_element_value_20);
        Py_DECREF(tmp_args_element_value_21);
        if (tmp_args_element_value_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_7);
            Py_DECREF(tmp_args_element_value_17);

            exception_lineno = 1101;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_d2426f7bc495f163f33af1e9581c3942->m_frame.f_lineno = 1098;
        {
            PyObject *call_args[] = {tmp_args_element_value_17, tmp_args_element_value_18, tmp_args_element_value_19};
            tmp_call_result_4 = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_7, call_args);
        }

        Py_DECREF(tmp_called_value_7);
        Py_DECREF(tmp_args_element_value_17);
        Py_DECREF(tmp_args_element_value_19);
        if (tmp_call_result_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1098;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_4);
    }
    branch_no_3:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d2426f7bc495f163f33af1e9581c3942);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_d2426f7bc495f163f33af1e9581c3942);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d2426f7bc495f163f33af1e9581c3942);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_d2426f7bc495f163f33af1e9581c3942, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_d2426f7bc495f163f33af1e9581c3942->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_d2426f7bc495f163f33af1e9581c3942, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_d2426f7bc495f163f33af1e9581c3942,
        type_description_1,
        par_self,
        par_column,
        par_table,
        var_variant_mapping
    );


    // Release cached frame if used for exception.
    if (frame_d2426f7bc495f163f33af1e9581c3942 == cache_frame_d2426f7bc495f163f33af1e9581c3942) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_d2426f7bc495f163f33af1e9581c3942);
        cache_frame_d2426f7bc495f163f33af1e9581c3942 = NULL;
    }

    assertFrameObject(frame_d2426f7bc495f163f33af1e9581c3942);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_variant_mapping);
    var_variant_mapping = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_variant_mapping);
    var_variant_mapping = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_column);
    Py_DECREF(par_column);
    CHECK_OBJECT(par_table);
    Py_DECREF(par_table);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_column);
    Py_DECREF(par_column);
    CHECK_OBJECT(par_table);
    Py_DECREF(par_table);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__56_copy(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_kw = python_pars[1];
    struct Nuitka_FrameObject *frame_ce6b71a74edb04e90997815ade78abf4;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_ce6b71a74edb04e90997815ade78abf4 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_ce6b71a74edb04e90997815ade78abf4)) {
        Py_XDECREF(cache_frame_ce6b71a74edb04e90997815ade78abf4);

#if _DEBUG_REFCOUNTS
        if (cache_frame_ce6b71a74edb04e90997815ade78abf4 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_ce6b71a74edb04e90997815ade78abf4 = MAKE_FUNCTION_FRAME(codeobj_ce6b71a74edb04e90997815ade78abf4, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_ce6b71a74edb04e90997815ade78abf4->m_type_description == NULL);
    frame_ce6b71a74edb04e90997815ade78abf4 = cache_frame_ce6b71a74edb04e90997815ade78abf4;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_ce6b71a74edb04e90997815ade78abf4);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_ce6b71a74edb04e90997815ade78abf4) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_value_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_kwargs_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[150]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1108;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_2);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1108;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_value_1 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_args_value_1, 0, tmp_tuple_element_1);
        tmp_kwargs_value_1 = PyDict_Copy(mod_consts[151]);
        frame_ce6b71a74edb04e90997815ade78abf4->m_frame.f_lineno = 1108;
        tmp_return_value = CALL_FUNCTION(tmp_called_value_1, tmp_args_value_1, tmp_kwargs_value_1);
        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_value_1);
        Py_DECREF(tmp_kwargs_value_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1108;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ce6b71a74edb04e90997815ade78abf4);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_ce6b71a74edb04e90997815ade78abf4);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ce6b71a74edb04e90997815ade78abf4);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_ce6b71a74edb04e90997815ade78abf4, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_ce6b71a74edb04e90997815ade78abf4->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_ce6b71a74edb04e90997815ade78abf4, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_ce6b71a74edb04e90997815ade78abf4,
        type_description_1,
        par_self,
        par_kw
    );


    // Release cached frame if used for exception.
    if (frame_ce6b71a74edb04e90997815ade78abf4 == cache_frame_ce6b71a74edb04e90997815ade78abf4) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_ce6b71a74edb04e90997815ade78abf4);
        cache_frame_ce6b71a74edb04e90997815ade78abf4 = NULL;
    }

    assertFrameObject(frame_ce6b71a74edb04e90997815ade78abf4);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__57_adapt(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_impltype = python_pars[1];
    PyObject *par_kw = python_pars[2];
    PyObject *var_schema = NULL;
    PyObject *var_metadata = NULL;
    PyObject *var__create_events = NULL;
    struct Nuitka_FrameObject *frame_4ffd4726b010892e5058831b7aa44309;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_4ffd4726b010892e5058831b7aa44309 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_4ffd4726b010892e5058831b7aa44309)) {
        Py_XDECREF(cache_frame_4ffd4726b010892e5058831b7aa44309);

#if _DEBUG_REFCOUNTS
        if (cache_frame_4ffd4726b010892e5058831b7aa44309 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_4ffd4726b010892e5058831b7aa44309 = MAKE_FUNCTION_FRAME(codeobj_4ffd4726b010892e5058831b7aa44309, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_4ffd4726b010892e5058831b7aa44309->m_type_description == NULL);
    frame_4ffd4726b010892e5058831b7aa44309 = cache_frame_4ffd4726b010892e5058831b7aa44309;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_4ffd4726b010892e5058831b7aa44309);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_4ffd4726b010892e5058831b7aa44309) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_dict_arg_value_1;
        PyObject *tmp_key_value_1;
        PyObject *tmp_default_value_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_kw);
        tmp_dict_arg_value_1 = par_kw;
        tmp_key_value_1 = mod_consts[127];
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_default_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[127]);
        if (tmp_default_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1111;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = DICT_POP3(tmp_dict_arg_value_1, tmp_key_value_1, tmp_default_value_1);
        Py_DECREF(tmp_default_value_1);
        assert(!(tmp_assign_source_1 == NULL));
        assert(var_schema == NULL);
        var_schema = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_2 = par_kw;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[152]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1112;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[128];
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_args_element_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[128]);
        if (tmp_args_element_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1112;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        frame_4ffd4726b010892e5058831b7aa44309->m_frame.f_lineno = 1112;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_2);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1112;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(var_metadata == NULL);
        var_metadata = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_4;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_4 = par_kw;
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[152]);
        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1113;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        frame_4ffd4726b010892e5058831b7aa44309->m_frame.f_lineno = 1113;
        tmp_assign_source_3 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_2, mod_consts[153]);

        Py_DECREF(tmp_called_value_2);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1113;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(var__create_events == NULL);
        var__create_events = tmp_assign_source_3;
    }
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_dircall_arg3_1;
        CHECK_OBJECT(par_impltype);
        tmp_dircall_arg1_1 = par_impltype;
        tmp_dict_key_1 = mod_consts[93];
        CHECK_OBJECT(par_self);
        tmp_expression_value_5 = par_self;
        tmp_dict_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[93]);
        if (tmp_dict_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1115;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_dircall_arg2_1 = _PyDict_NewPresized( 5 );
        {
            PyObject *tmp_expression_value_6;
            tmp_res = PyDict_SetItem(tmp_dircall_arg2_1, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[127];
            CHECK_OBJECT(var_schema);
            tmp_dict_value_1 = var_schema;
            tmp_res = PyDict_SetItem(tmp_dircall_arg2_1, tmp_dict_key_1, tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[129];
            CHECK_OBJECT(par_self);
            tmp_expression_value_6 = par_self;
            tmp_dict_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[129]);
            if (tmp_dict_value_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1117;
                type_description_1 = "oooooo";
                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_dircall_arg2_1, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[128];
            CHECK_OBJECT(var_metadata);
            tmp_dict_value_1 = var_metadata;
            tmp_res = PyDict_SetItem(tmp_dircall_arg2_1, tmp_dict_key_1, tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = mod_consts[130];
            CHECK_OBJECT(var__create_events);
            tmp_dict_value_1 = var__create_events;
            tmp_res = PyDict_SetItem(tmp_dircall_arg2_1, tmp_dict_key_1, tmp_dict_value_1);
            assert(!(tmp_res != 0));
        }
        goto dict_build_noexception_1;
        // Exception handling pass through code for dict_build:
        dict_build_exception_1:;
        Py_DECREF(tmp_dircall_arg2_1);
        goto frame_exception_exit_1;
        // Finished with no exception for dict_build:
        dict_build_noexception_1:;
        CHECK_OBJECT(par_kw);
        tmp_dircall_arg3_1 = par_kw;
        Py_INCREF(tmp_dircall_arg1_1);
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_return_value = impl___main__$$$function__16_complex_call_helper_keywords_star_dict(dir_call_args);
        }
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1114;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_4ffd4726b010892e5058831b7aa44309);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_4ffd4726b010892e5058831b7aa44309);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_4ffd4726b010892e5058831b7aa44309);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_4ffd4726b010892e5058831b7aa44309, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_4ffd4726b010892e5058831b7aa44309->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_4ffd4726b010892e5058831b7aa44309, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_4ffd4726b010892e5058831b7aa44309,
        type_description_1,
        par_self,
        par_impltype,
        par_kw,
        var_schema,
        var_metadata,
        var__create_events
    );


    // Release cached frame if used for exception.
    if (frame_4ffd4726b010892e5058831b7aa44309 == cache_frame_4ffd4726b010892e5058831b7aa44309) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_4ffd4726b010892e5058831b7aa44309);
        cache_frame_4ffd4726b010892e5058831b7aa44309 = NULL;
    }

    assertFrameObject(frame_4ffd4726b010892e5058831b7aa44309);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_schema);
    Py_DECREF(var_schema);
    var_schema = NULL;
    CHECK_OBJECT(var_metadata);
    Py_DECREF(var_metadata);
    var_metadata = NULL;
    CHECK_OBJECT(var__create_events);
    Py_DECREF(var__create_events);
    var__create_events = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_schema);
    var_schema = NULL;
    Py_XDECREF(var_metadata);
    var_metadata = NULL;
    Py_XDECREF(var__create_events);
    var__create_events = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_impltype);
    Py_DECREF(par_impltype);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_impltype);
    Py_DECREF(par_impltype);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__58_bind(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_93f50b3e2416e30fe5e08326a67bdf7f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_93f50b3e2416e30fe5e08326a67bdf7f = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_93f50b3e2416e30fe5e08326a67bdf7f)) {
        Py_XDECREF(cache_frame_93f50b3e2416e30fe5e08326a67bdf7f);

#if _DEBUG_REFCOUNTS
        if (cache_frame_93f50b3e2416e30fe5e08326a67bdf7f == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_93f50b3e2416e30fe5e08326a67bdf7f = MAKE_FUNCTION_FRAME(codeobj_93f50b3e2416e30fe5e08326a67bdf7f, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_93f50b3e2416e30fe5e08326a67bdf7f->m_type_description == NULL);
    frame_93f50b3e2416e30fe5e08326a67bdf7f = cache_frame_93f50b3e2416e30fe5e08326a67bdf7f;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_93f50b3e2416e30fe5e08326a67bdf7f);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_93f50b3e2416e30fe5e08326a67bdf7f) == 2); // Frame stack

    // Framed code:
    {
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        int tmp_and_left_truth_1;
        PyObject *tmp_and_left_value_1;
        PyObject *tmp_and_right_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_and_left_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[128]);
        if (tmp_and_left_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1125;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_and_left_truth_1 = CHECK_IF_TRUE(tmp_and_left_value_1);
        if (tmp_and_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_and_left_value_1);

            exception_lineno = 1125;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        Py_DECREF(tmp_and_left_value_1);
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_expression_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[128]);
        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1125;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[154]);
        Py_DECREF(tmp_expression_value_2);
        if (tmp_and_right_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1125;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_or_left_value_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_or_left_value_1 = tmp_and_left_value_1;
        and_end_1:;
        tmp_or_left_truth_1 = CHECK_IF_TRUE(tmp_or_left_value_1);
        if (tmp_or_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_or_left_value_1);

            exception_lineno = 1125;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        Py_DECREF(tmp_or_left_value_1);
        tmp_or_right_value_1 = Py_None;
        Py_INCREF(tmp_or_right_value_1);
        tmp_return_value = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_return_value = tmp_or_left_value_1;
        or_end_1:;
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_93f50b3e2416e30fe5e08326a67bdf7f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_93f50b3e2416e30fe5e08326a67bdf7f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_93f50b3e2416e30fe5e08326a67bdf7f);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_93f50b3e2416e30fe5e08326a67bdf7f, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_93f50b3e2416e30fe5e08326a67bdf7f->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_93f50b3e2416e30fe5e08326a67bdf7f, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_93f50b3e2416e30fe5e08326a67bdf7f,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_93f50b3e2416e30fe5e08326a67bdf7f == cache_frame_93f50b3e2416e30fe5e08326a67bdf7f) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_93f50b3e2416e30fe5e08326a67bdf7f);
        cache_frame_93f50b3e2416e30fe5e08326a67bdf7f = NULL;
    }

    assertFrameObject(frame_93f50b3e2416e30fe5e08326a67bdf7f);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__59_create(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_bind = python_pars[1];
    PyObject *par_checkfirst = python_pars[2];
    PyObject *var_t = NULL;
    struct Nuitka_FrameObject *frame_7d07039ef161c516955860313b970433;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_7d07039ef161c516955860313b970433 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_7d07039ef161c516955860313b970433)) {
        Py_XDECREF(cache_frame_7d07039ef161c516955860313b970433);

#if _DEBUG_REFCOUNTS
        if (cache_frame_7d07039ef161c516955860313b970433 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_7d07039ef161c516955860313b970433 = MAKE_FUNCTION_FRAME(codeobj_7d07039ef161c516955860313b970433, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_7d07039ef161c516955860313b970433->m_type_description == NULL);
    frame_7d07039ef161c516955860313b970433 = cache_frame_7d07039ef161c516955860313b970433;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_7d07039ef161c516955860313b970433);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_7d07039ef161c516955860313b970433) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_bind);
        tmp_cmp_expr_left_1 = par_bind;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[155]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[155]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1131;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_args_element_value_1 = par_self;
        frame_7d07039ef161c516955860313b970433->m_frame.f_lineno = 1131;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1131;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_bind;
            assert(old != NULL);
            par_bind = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    branch_no_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_expression_value_2;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1132;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_1 = par_self;
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[156]);
        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1132;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_bind);
        tmp_expression_value_2 = par_bind;
        tmp_args_element_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[32]);
        if (tmp_args_element_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 1132;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_7d07039ef161c516955860313b970433->m_frame.f_lineno = 1132;
        tmp_assign_source_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_2, tmp_args_element_value_2);
        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_2);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1132;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(var_t == NULL);
        var_t = tmp_assign_source_2;
    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT(var_t);
        tmp_expression_value_3 = var_t;
        tmp_cmp_expr_left_2 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_3);
        if (tmp_cmp_expr_left_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1133;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        if (par_self == NULL) {
            Py_DECREF(tmp_cmp_expr_left_2);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1133;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_4 = par_self;
        tmp_cmp_expr_right_2 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_4);
        if (tmp_cmp_expr_right_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_cmp_expr_left_2);

            exception_lineno = 1133;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_cmp_expr_left_2 != tmp_cmp_expr_right_2) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_cmp_expr_left_2);
        Py_DECREF(tmp_cmp_expr_right_2);
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(var_t);
        tmp_isinstance_inst_1 = var_t;
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[157]);

        if (unlikely(tmp_isinstance_cls_1 == NULL)) {
            tmp_isinstance_cls_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[157]);
        }

        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1133;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1133;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_2 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_called_value_3;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_call_result_1;
        PyObject *tmp_kw_call_value_0_1;
        PyObject *tmp_kw_call_value_1_1;
        CHECK_OBJECT(var_t);
        tmp_expression_value_5 = var_t;
        tmp_called_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[158]);
        if (tmp_called_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1134;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_bind);
        tmp_kw_call_value_0_1 = par_bind;
        CHECK_OBJECT(par_checkfirst);
        tmp_kw_call_value_1_1 = par_checkfirst;
        frame_7d07039ef161c516955860313b970433->m_frame.f_lineno = 1134;
        {
            PyObject *kw_values[2] = {tmp_kw_call_value_0_1, tmp_kw_call_value_1_1};

            tmp_call_result_1 = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tmp_called_value_3, kw_values, mod_consts[159]);
        }

        Py_DECREF(tmp_called_value_3);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1134;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    branch_no_2:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_7d07039ef161c516955860313b970433);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_7d07039ef161c516955860313b970433);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_7d07039ef161c516955860313b970433, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_7d07039ef161c516955860313b970433->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_7d07039ef161c516955860313b970433, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_7d07039ef161c516955860313b970433,
        type_description_1,
        par_self,
        par_bind,
        par_checkfirst,
        var_t
    );


    // Release cached frame if used for exception.
    if (frame_7d07039ef161c516955860313b970433 == cache_frame_7d07039ef161c516955860313b970433) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_7d07039ef161c516955860313b970433);
        cache_frame_7d07039ef161c516955860313b970433 = NULL;
    }

    assertFrameObject(frame_7d07039ef161c516955860313b970433);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_bind);
    Py_DECREF(par_bind);
    par_bind = NULL;
    CHECK_OBJECT(var_t);
    Py_DECREF(var_t);
    var_t = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_bind);
    par_bind = NULL;
    Py_XDECREF(var_t);
    var_t = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_checkfirst);
    Py_DECREF(par_checkfirst);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_checkfirst);
    Py_DECREF(par_checkfirst);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__60_drop(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_bind = python_pars[1];
    PyObject *par_checkfirst = python_pars[2];
    PyObject *var_t = NULL;
    struct Nuitka_FrameObject *frame_92afc2cd8d359ac5ceb82d4f2266314c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_92afc2cd8d359ac5ceb82d4f2266314c = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_92afc2cd8d359ac5ceb82d4f2266314c)) {
        Py_XDECREF(cache_frame_92afc2cd8d359ac5ceb82d4f2266314c);

#if _DEBUG_REFCOUNTS
        if (cache_frame_92afc2cd8d359ac5ceb82d4f2266314c == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_92afc2cd8d359ac5ceb82d4f2266314c = MAKE_FUNCTION_FRAME(codeobj_92afc2cd8d359ac5ceb82d4f2266314c, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_92afc2cd8d359ac5ceb82d4f2266314c->m_type_description == NULL);
    frame_92afc2cd8d359ac5ceb82d4f2266314c = cache_frame_92afc2cd8d359ac5ceb82d4f2266314c;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_92afc2cd8d359ac5ceb82d4f2266314c);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_92afc2cd8d359ac5ceb82d4f2266314c) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_bind);
        tmp_cmp_expr_left_1 = par_bind;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[155]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[155]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1140;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_args_element_value_1 = par_self;
        frame_92afc2cd8d359ac5ceb82d4f2266314c->m_frame.f_lineno = 1140;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1140;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_bind;
            assert(old != NULL);
            par_bind = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    branch_no_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_expression_value_2;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1141;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_1 = par_self;
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[156]);
        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1141;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_bind);
        tmp_expression_value_2 = par_bind;
        tmp_args_element_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[32]);
        if (tmp_args_element_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 1141;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_92afc2cd8d359ac5ceb82d4f2266314c->m_frame.f_lineno = 1141;
        tmp_assign_source_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_2, tmp_args_element_value_2);
        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_2);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1141;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(var_t == NULL);
        var_t = tmp_assign_source_2;
    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT(var_t);
        tmp_expression_value_3 = var_t;
        tmp_cmp_expr_left_2 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_3);
        if (tmp_cmp_expr_left_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1142;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        if (par_self == NULL) {
            Py_DECREF(tmp_cmp_expr_left_2);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1142;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_4 = par_self;
        tmp_cmp_expr_right_2 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_4);
        if (tmp_cmp_expr_right_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_cmp_expr_left_2);

            exception_lineno = 1142;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_cmp_expr_left_2 != tmp_cmp_expr_right_2) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_cmp_expr_left_2);
        Py_DECREF(tmp_cmp_expr_right_2);
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(var_t);
        tmp_isinstance_inst_1 = var_t;
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[157]);

        if (unlikely(tmp_isinstance_cls_1 == NULL)) {
            tmp_isinstance_cls_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[157]);
        }

        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1142;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1142;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_2 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_called_value_3;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_call_result_1;
        PyObject *tmp_kw_call_value_0_1;
        PyObject *tmp_kw_call_value_1_1;
        CHECK_OBJECT(var_t);
        tmp_expression_value_5 = var_t;
        tmp_called_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[161]);
        if (tmp_called_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1143;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_bind);
        tmp_kw_call_value_0_1 = par_bind;
        CHECK_OBJECT(par_checkfirst);
        tmp_kw_call_value_1_1 = par_checkfirst;
        frame_92afc2cd8d359ac5ceb82d4f2266314c->m_frame.f_lineno = 1143;
        {
            PyObject *kw_values[2] = {tmp_kw_call_value_0_1, tmp_kw_call_value_1_1};

            tmp_call_result_1 = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tmp_called_value_3, kw_values, mod_consts[159]);
        }

        Py_DECREF(tmp_called_value_3);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1143;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    branch_no_2:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_92afc2cd8d359ac5ceb82d4f2266314c);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_92afc2cd8d359ac5ceb82d4f2266314c);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_92afc2cd8d359ac5ceb82d4f2266314c, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_92afc2cd8d359ac5ceb82d4f2266314c->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_92afc2cd8d359ac5ceb82d4f2266314c, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_92afc2cd8d359ac5ceb82d4f2266314c,
        type_description_1,
        par_self,
        par_bind,
        par_checkfirst,
        var_t
    );


    // Release cached frame if used for exception.
    if (frame_92afc2cd8d359ac5ceb82d4f2266314c == cache_frame_92afc2cd8d359ac5ceb82d4f2266314c) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_92afc2cd8d359ac5ceb82d4f2266314c);
        cache_frame_92afc2cd8d359ac5ceb82d4f2266314c = NULL;
    }

    assertFrameObject(frame_92afc2cd8d359ac5ceb82d4f2266314c);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_bind);
    Py_DECREF(par_bind);
    par_bind = NULL;
    CHECK_OBJECT(var_t);
    Py_DECREF(var_t);
    var_t = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_bind);
    par_bind = NULL;
    Py_XDECREF(var_t);
    var_t = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_checkfirst);
    Py_DECREF(par_checkfirst);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_checkfirst);
    Py_DECREF(par_checkfirst);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__61__on_table_create(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_target = python_pars[1];
    PyObject *par_bind = python_pars[2];
    PyObject *par_kw = python_pars[3];
    PyObject *var_t = NULL;
    struct Nuitka_FrameObject *frame_628cb3a07479cec616a7d851fdfcd8f4;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_628cb3a07479cec616a7d851fdfcd8f4 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_628cb3a07479cec616a7d851fdfcd8f4)) {
        Py_XDECREF(cache_frame_628cb3a07479cec616a7d851fdfcd8f4);

#if _DEBUG_REFCOUNTS
        if (cache_frame_628cb3a07479cec616a7d851fdfcd8f4 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_628cb3a07479cec616a7d851fdfcd8f4 = MAKE_FUNCTION_FRAME(codeobj_628cb3a07479cec616a7d851fdfcd8f4, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_628cb3a07479cec616a7d851fdfcd8f4->m_type_description == NULL);
    frame_628cb3a07479cec616a7d851fdfcd8f4 = cache_frame_628cb3a07479cec616a7d851fdfcd8f4;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_628cb3a07479cec616a7d851fdfcd8f4);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_628cb3a07479cec616a7d851fdfcd8f4) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[163]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1146;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_bind);
        tmp_expression_value_2 = par_bind;
        tmp_args_element_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[32]);
        if (tmp_args_element_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1146;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_kw);
        tmp_args_element_value_2 = par_kw;
        frame_628cb3a07479cec616a7d851fdfcd8f4->m_frame.f_lineno = 1146;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_operand_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_operand_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1146;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        Py_DECREF(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1146;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_expression_value_4;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[156]);
        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1149;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_bind);
        tmp_expression_value_4 = par_bind;
        tmp_args_element_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[32]);
        if (tmp_args_element_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 1149;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_628cb3a07479cec616a7d851fdfcd8f4->m_frame.f_lineno = 1149;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_2, tmp_args_element_value_3);
        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_3);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1149;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(var_t == NULL);
        var_t = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT(var_t);
        tmp_expression_value_5 = var_t;
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_5);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1150;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_6 = par_self;
        tmp_cmp_expr_right_1 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_6);
        if (tmp_cmp_expr_right_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_cmp_expr_left_1);

            exception_lineno = 1150;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_cmp_expr_left_1);
        Py_DECREF(tmp_cmp_expr_right_1);
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(var_t);
        tmp_isinstance_inst_1 = var_t;
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[157]);

        if (unlikely(tmp_isinstance_cls_1 == NULL)) {
            tmp_isinstance_cls_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[157]);
        }

        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1150;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1150;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_2 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_dircall_arg3_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT(var_t);
        tmp_expression_value_7 = var_t;
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_7, mod_consts[148]);
        if (tmp_dircall_arg1_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1151;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_target);
        tmp_tuple_element_1 = par_target;
        tmp_dircall_arg2_1 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(par_bind);
        tmp_tuple_element_1 = par_bind;
        PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 1, tmp_tuple_element_1);
        CHECK_OBJECT(par_kw);
        tmp_dircall_arg3_1 = par_kw;
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_call_result_1 = impl___main__$$$function__7_complex_call_helper_pos_star_dict(dir_call_args);
        }
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1151;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    branch_no_2:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_628cb3a07479cec616a7d851fdfcd8f4);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_628cb3a07479cec616a7d851fdfcd8f4);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_628cb3a07479cec616a7d851fdfcd8f4);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_628cb3a07479cec616a7d851fdfcd8f4, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_628cb3a07479cec616a7d851fdfcd8f4->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_628cb3a07479cec616a7d851fdfcd8f4, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_628cb3a07479cec616a7d851fdfcd8f4,
        type_description_1,
        par_self,
        par_target,
        par_bind,
        par_kw,
        var_t
    );


    // Release cached frame if used for exception.
    if (frame_628cb3a07479cec616a7d851fdfcd8f4 == cache_frame_628cb3a07479cec616a7d851fdfcd8f4) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_628cb3a07479cec616a7d851fdfcd8f4);
        cache_frame_628cb3a07479cec616a7d851fdfcd8f4 = NULL;
    }

    assertFrameObject(frame_628cb3a07479cec616a7d851fdfcd8f4);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_t);
    var_t = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_t);
    var_t = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_target);
    Py_DECREF(par_target);
    CHECK_OBJECT(par_bind);
    Py_DECREF(par_bind);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_target);
    Py_DECREF(par_target);
    CHECK_OBJECT(par_bind);
    Py_DECREF(par_bind);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__62__on_table_drop(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_target = python_pars[1];
    PyObject *par_bind = python_pars[2];
    PyObject *par_kw = python_pars[3];
    PyObject *var_t = NULL;
    struct Nuitka_FrameObject *frame_936d394a138c62c0070f8e0bbfeb0a9f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_936d394a138c62c0070f8e0bbfeb0a9f = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_936d394a138c62c0070f8e0bbfeb0a9f)) {
        Py_XDECREF(cache_frame_936d394a138c62c0070f8e0bbfeb0a9f);

#if _DEBUG_REFCOUNTS
        if (cache_frame_936d394a138c62c0070f8e0bbfeb0a9f == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_936d394a138c62c0070f8e0bbfeb0a9f = MAKE_FUNCTION_FRAME(codeobj_936d394a138c62c0070f8e0bbfeb0a9f, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_936d394a138c62c0070f8e0bbfeb0a9f->m_type_description == NULL);
    frame_936d394a138c62c0070f8e0bbfeb0a9f = cache_frame_936d394a138c62c0070f8e0bbfeb0a9f;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_936d394a138c62c0070f8e0bbfeb0a9f);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_936d394a138c62c0070f8e0bbfeb0a9f) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[163]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1154;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_bind);
        tmp_expression_value_2 = par_bind;
        tmp_args_element_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[32]);
        if (tmp_args_element_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1154;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_kw);
        tmp_args_element_value_2 = par_kw;
        frame_936d394a138c62c0070f8e0bbfeb0a9f->m_frame.f_lineno = 1154;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_operand_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_operand_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1154;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        Py_DECREF(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1154;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_expression_value_4;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[156]);
        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1157;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_bind);
        tmp_expression_value_4 = par_bind;
        tmp_args_element_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[32]);
        if (tmp_args_element_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 1157;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_936d394a138c62c0070f8e0bbfeb0a9f->m_frame.f_lineno = 1157;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_2, tmp_args_element_value_3);
        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_3);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1157;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(var_t == NULL);
        var_t = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT(var_t);
        tmp_expression_value_5 = var_t;
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_5);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1158;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_6 = par_self;
        tmp_cmp_expr_right_1 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_6);
        if (tmp_cmp_expr_right_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_cmp_expr_left_1);

            exception_lineno = 1158;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_cmp_expr_left_1);
        Py_DECREF(tmp_cmp_expr_right_1);
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(var_t);
        tmp_isinstance_inst_1 = var_t;
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[157]);

        if (unlikely(tmp_isinstance_cls_1 == NULL)) {
            tmp_isinstance_cls_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[157]);
        }

        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1158;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1158;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_2 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_dircall_arg3_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT(var_t);
        tmp_expression_value_7 = var_t;
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_7, mod_consts[149]);
        if (tmp_dircall_arg1_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1159;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_target);
        tmp_tuple_element_1 = par_target;
        tmp_dircall_arg2_1 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(par_bind);
        tmp_tuple_element_1 = par_bind;
        PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 1, tmp_tuple_element_1);
        CHECK_OBJECT(par_kw);
        tmp_dircall_arg3_1 = par_kw;
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_call_result_1 = impl___main__$$$function__7_complex_call_helper_pos_star_dict(dir_call_args);
        }
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1159;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    branch_no_2:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_936d394a138c62c0070f8e0bbfeb0a9f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_936d394a138c62c0070f8e0bbfeb0a9f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_936d394a138c62c0070f8e0bbfeb0a9f);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_936d394a138c62c0070f8e0bbfeb0a9f, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_936d394a138c62c0070f8e0bbfeb0a9f->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_936d394a138c62c0070f8e0bbfeb0a9f, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_936d394a138c62c0070f8e0bbfeb0a9f,
        type_description_1,
        par_self,
        par_target,
        par_bind,
        par_kw,
        var_t
    );


    // Release cached frame if used for exception.
    if (frame_936d394a138c62c0070f8e0bbfeb0a9f == cache_frame_936d394a138c62c0070f8e0bbfeb0a9f) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_936d394a138c62c0070f8e0bbfeb0a9f);
        cache_frame_936d394a138c62c0070f8e0bbfeb0a9f = NULL;
    }

    assertFrameObject(frame_936d394a138c62c0070f8e0bbfeb0a9f);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_t);
    var_t = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_t);
    var_t = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_target);
    Py_DECREF(par_target);
    CHECK_OBJECT(par_bind);
    Py_DECREF(par_bind);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_target);
    Py_DECREF(par_target);
    CHECK_OBJECT(par_bind);
    Py_DECREF(par_bind);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__63__on_metadata_create(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_target = python_pars[1];
    PyObject *par_bind = python_pars[2];
    PyObject *par_kw = python_pars[3];
    PyObject *var_t = NULL;
    struct Nuitka_FrameObject *frame_d878efcc110e7dc34a2229eb2531c29b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_d878efcc110e7dc34a2229eb2531c29b = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_d878efcc110e7dc34a2229eb2531c29b)) {
        Py_XDECREF(cache_frame_d878efcc110e7dc34a2229eb2531c29b);

#if _DEBUG_REFCOUNTS
        if (cache_frame_d878efcc110e7dc34a2229eb2531c29b == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_d878efcc110e7dc34a2229eb2531c29b = MAKE_FUNCTION_FRAME(codeobj_d878efcc110e7dc34a2229eb2531c29b, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_d878efcc110e7dc34a2229eb2531c29b->m_type_description == NULL);
    frame_d878efcc110e7dc34a2229eb2531c29b = cache_frame_d878efcc110e7dc34a2229eb2531c29b;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_d878efcc110e7dc34a2229eb2531c29b);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_d878efcc110e7dc34a2229eb2531c29b) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[163]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1162;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_bind);
        tmp_expression_value_2 = par_bind;
        tmp_args_element_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[32]);
        if (tmp_args_element_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1162;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_kw);
        tmp_args_element_value_2 = par_kw;
        frame_d878efcc110e7dc34a2229eb2531c29b->m_frame.f_lineno = 1162;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_operand_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_operand_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1162;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        Py_DECREF(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1162;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_expression_value_4;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[156]);
        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1165;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_bind);
        tmp_expression_value_4 = par_bind;
        tmp_args_element_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[32]);
        if (tmp_args_element_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 1165;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_d878efcc110e7dc34a2229eb2531c29b->m_frame.f_lineno = 1165;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_2, tmp_args_element_value_3);
        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_3);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1165;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(var_t == NULL);
        var_t = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT(var_t);
        tmp_expression_value_5 = var_t;
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_5);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1166;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_6 = par_self;
        tmp_cmp_expr_right_1 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_6);
        if (tmp_cmp_expr_right_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_cmp_expr_left_1);

            exception_lineno = 1166;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_cmp_expr_left_1);
        Py_DECREF(tmp_cmp_expr_right_1);
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(var_t);
        tmp_isinstance_inst_1 = var_t;
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[157]);

        if (unlikely(tmp_isinstance_cls_1 == NULL)) {
            tmp_isinstance_cls_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[157]);
        }

        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1166;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1166;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_2 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_dircall_arg3_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT(var_t);
        tmp_expression_value_7 = var_t;
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_7, mod_consts[135]);
        if (tmp_dircall_arg1_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1167;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_target);
        tmp_tuple_element_1 = par_target;
        tmp_dircall_arg2_1 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(par_bind);
        tmp_tuple_element_1 = par_bind;
        PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 1, tmp_tuple_element_1);
        CHECK_OBJECT(par_kw);
        tmp_dircall_arg3_1 = par_kw;
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_call_result_1 = impl___main__$$$function__7_complex_call_helper_pos_star_dict(dir_call_args);
        }
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1167;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    branch_no_2:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d878efcc110e7dc34a2229eb2531c29b);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_d878efcc110e7dc34a2229eb2531c29b);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d878efcc110e7dc34a2229eb2531c29b);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_d878efcc110e7dc34a2229eb2531c29b, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_d878efcc110e7dc34a2229eb2531c29b->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_d878efcc110e7dc34a2229eb2531c29b, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_d878efcc110e7dc34a2229eb2531c29b,
        type_description_1,
        par_self,
        par_target,
        par_bind,
        par_kw,
        var_t
    );


    // Release cached frame if used for exception.
    if (frame_d878efcc110e7dc34a2229eb2531c29b == cache_frame_d878efcc110e7dc34a2229eb2531c29b) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_d878efcc110e7dc34a2229eb2531c29b);
        cache_frame_d878efcc110e7dc34a2229eb2531c29b = NULL;
    }

    assertFrameObject(frame_d878efcc110e7dc34a2229eb2531c29b);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_t);
    var_t = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_t);
    var_t = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_target);
    Py_DECREF(par_target);
    CHECK_OBJECT(par_bind);
    Py_DECREF(par_bind);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_target);
    Py_DECREF(par_target);
    CHECK_OBJECT(par_bind);
    Py_DECREF(par_bind);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__64__on_metadata_drop(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_target = python_pars[1];
    PyObject *par_bind = python_pars[2];
    PyObject *par_kw = python_pars[3];
    PyObject *var_t = NULL;
    struct Nuitka_FrameObject *frame_f414018bdc3f452738c5a6158d1580ca;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_f414018bdc3f452738c5a6158d1580ca = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_f414018bdc3f452738c5a6158d1580ca)) {
        Py_XDECREF(cache_frame_f414018bdc3f452738c5a6158d1580ca);

#if _DEBUG_REFCOUNTS
        if (cache_frame_f414018bdc3f452738c5a6158d1580ca == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_f414018bdc3f452738c5a6158d1580ca = MAKE_FUNCTION_FRAME(codeobj_f414018bdc3f452738c5a6158d1580ca, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_f414018bdc3f452738c5a6158d1580ca->m_type_description == NULL);
    frame_f414018bdc3f452738c5a6158d1580ca = cache_frame_f414018bdc3f452738c5a6158d1580ca;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_f414018bdc3f452738c5a6158d1580ca);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_f414018bdc3f452738c5a6158d1580ca) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[163]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1170;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_bind);
        tmp_expression_value_2 = par_bind;
        tmp_args_element_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[32]);
        if (tmp_args_element_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1170;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_kw);
        tmp_args_element_value_2 = par_kw;
        frame_f414018bdc3f452738c5a6158d1580ca->m_frame.f_lineno = 1170;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_operand_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_operand_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1170;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        Py_DECREF(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1170;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_expression_value_4;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[156]);
        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1173;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_bind);
        tmp_expression_value_4 = par_bind;
        tmp_args_element_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[32]);
        if (tmp_args_element_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 1173;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_f414018bdc3f452738c5a6158d1580ca->m_frame.f_lineno = 1173;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_2, tmp_args_element_value_3);
        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_3);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1173;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(var_t == NULL);
        var_t = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT(var_t);
        tmp_expression_value_5 = var_t;
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_5);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1174;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_6 = par_self;
        tmp_cmp_expr_right_1 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_6);
        if (tmp_cmp_expr_right_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_cmp_expr_left_1);

            exception_lineno = 1174;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_cmp_expr_left_1);
        Py_DECREF(tmp_cmp_expr_right_1);
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(var_t);
        tmp_isinstance_inst_1 = var_t;
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[157]);

        if (unlikely(tmp_isinstance_cls_1 == NULL)) {
            tmp_isinstance_cls_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[157]);
        }

        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1174;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1174;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_2 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_dircall_arg3_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT(var_t);
        tmp_expression_value_7 = var_t;
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_7, mod_consts[137]);
        if (tmp_dircall_arg1_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1175;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_target);
        tmp_tuple_element_1 = par_target;
        tmp_dircall_arg2_1 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(par_bind);
        tmp_tuple_element_1 = par_bind;
        PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 1, tmp_tuple_element_1);
        CHECK_OBJECT(par_kw);
        tmp_dircall_arg3_1 = par_kw;
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_call_result_1 = impl___main__$$$function__7_complex_call_helper_pos_star_dict(dir_call_args);
        }
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1175;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    branch_no_2:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_f414018bdc3f452738c5a6158d1580ca);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_f414018bdc3f452738c5a6158d1580ca);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_f414018bdc3f452738c5a6158d1580ca);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_f414018bdc3f452738c5a6158d1580ca, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_f414018bdc3f452738c5a6158d1580ca->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_f414018bdc3f452738c5a6158d1580ca, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_f414018bdc3f452738c5a6158d1580ca,
        type_description_1,
        par_self,
        par_target,
        par_bind,
        par_kw,
        var_t
    );


    // Release cached frame if used for exception.
    if (frame_f414018bdc3f452738c5a6158d1580ca == cache_frame_f414018bdc3f452738c5a6158d1580ca) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_f414018bdc3f452738c5a6158d1580ca);
        cache_frame_f414018bdc3f452738c5a6158d1580ca = NULL;
    }

    assertFrameObject(frame_f414018bdc3f452738c5a6158d1580ca);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_t);
    var_t = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_t);
    var_t = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_target);
    Py_DECREF(par_target);
    CHECK_OBJECT(par_bind);
    Py_DECREF(par_bind);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_target);
    Py_DECREF(par_target);
    CHECK_OBJECT(par_bind);
    Py_DECREF(par_bind);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__65__is_impl_for_variant(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    PyObject *par_kw = python_pars[2];
    PyObject *var_variant_mapping = NULL;
    struct Nuitka_FrameObject *frame_68c9024274b1dc9263d94050118bad2a;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_68c9024274b1dc9263d94050118bad2a = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_68c9024274b1dc9263d94050118bad2a)) {
        Py_XDECREF(cache_frame_68c9024274b1dc9263d94050118bad2a);

#if _DEBUG_REFCOUNTS
        if (cache_frame_68c9024274b1dc9263d94050118bad2a == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_68c9024274b1dc9263d94050118bad2a = MAKE_FUNCTION_FRAME(codeobj_68c9024274b1dc9263d94050118bad2a, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_68c9024274b1dc9263d94050118bad2a->m_type_description == NULL);
    frame_68c9024274b1dc9263d94050118bad2a = cache_frame_68c9024274b1dc9263d94050118bad2a;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_68c9024274b1dc9263d94050118bad2a);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_68c9024274b1dc9263d94050118bad2a) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_1 = par_kw;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[152]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1178;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_68c9024274b1dc9263d94050118bad2a->m_frame.f_lineno = 1178;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_1, mod_consts[164]);

        Py_DECREF(tmp_called_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1178;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(var_variant_mapping == NULL);
        var_variant_mapping = tmp_assign_source_1;
    }
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(var_variant_mapping);
        tmp_cmp_expr_left_1 = var_variant_mapping;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_True;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_no_1:;
    {
        bool tmp_condition_result_2;
        int tmp_and_left_truth_1;
        bool tmp_and_left_value_1;
        bool tmp_and_right_value_1;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_cmp_expr_left_3;
        PyObject *tmp_cmp_expr_right_3;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_subscript_value_1;
        PyObject *tmp_expression_value_4;
        CHECK_OBJECT(par_dialect);
        tmp_expression_value_2 = par_dialect;
        tmp_cmp_expr_left_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[93]);
        if (tmp_cmp_expr_left_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1183;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_variant_mapping);
        tmp_cmp_expr_right_2 = var_variant_mapping;
        tmp_res = PySequence_Contains(tmp_cmp_expr_right_2, tmp_cmp_expr_left_2);
        Py_DECREF(tmp_cmp_expr_left_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1183;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_res == 1) ? true : false;
        tmp_and_left_truth_1 = tmp_and_left_value_1 != false ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(var_variant_mapping);
        tmp_expression_value_3 = var_variant_mapping;
        CHECK_OBJECT(par_dialect);
        tmp_expression_value_4 = par_dialect;
        tmp_subscript_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[93]);
        if (tmp_subscript_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1184;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_left_3 = LOOKUP_SUBSCRIPT(tmp_expression_value_3, tmp_subscript_value_1);
        Py_DECREF(tmp_subscript_value_1);
        if (tmp_cmp_expr_left_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1184;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_cmp_expr_right_3 = par_self;
        tmp_and_right_value_1 = (tmp_cmp_expr_left_3 == tmp_cmp_expr_right_3) ? true : false;
        Py_DECREF(tmp_cmp_expr_left_3);
        tmp_condition_result_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_2 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_2 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    tmp_return_value = Py_True;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    goto branch_end_2;
    branch_no_2:;
    {
        bool tmp_condition_result_3;
        PyObject *tmp_cmp_expr_left_4;
        PyObject *tmp_cmp_expr_right_4;
        PyObject *tmp_expression_value_5;
        CHECK_OBJECT(par_dialect);
        tmp_expression_value_5 = par_dialect;
        tmp_cmp_expr_left_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[93]);
        if (tmp_cmp_expr_left_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1187;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_variant_mapping);
        tmp_cmp_expr_right_4 = var_variant_mapping;
        tmp_res = PySequence_Contains(tmp_cmp_expr_right_4, tmp_cmp_expr_left_4);
        Py_DECREF(tmp_cmp_expr_left_4);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1187;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_3 != false) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_cmp_expr_left_5;
        PyObject *tmp_cmp_expr_right_5;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_subscript_value_2;
        CHECK_OBJECT(var_variant_mapping);
        tmp_expression_value_6 = var_variant_mapping;
        tmp_subscript_value_2 = mod_consts[144];
        tmp_cmp_expr_left_5 = LOOKUP_SUBSCRIPT(tmp_expression_value_6, tmp_subscript_value_2);
        if (tmp_cmp_expr_left_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1188;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_cmp_expr_right_5 = par_self;
        tmp_return_value = (tmp_cmp_expr_left_5 == tmp_cmp_expr_right_5) ? Py_True : Py_False;
        Py_DECREF(tmp_cmp_expr_left_5);
        Py_INCREF(tmp_return_value);
        goto frame_return_exit_1;
    }
    branch_no_3:;
    branch_end_2:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_68c9024274b1dc9263d94050118bad2a);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_68c9024274b1dc9263d94050118bad2a);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_68c9024274b1dc9263d94050118bad2a);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_68c9024274b1dc9263d94050118bad2a, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_68c9024274b1dc9263d94050118bad2a->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_68c9024274b1dc9263d94050118bad2a, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_68c9024274b1dc9263d94050118bad2a,
        type_description_1,
        par_self,
        par_dialect,
        par_kw,
        var_variant_mapping
    );


    // Release cached frame if used for exception.
    if (frame_68c9024274b1dc9263d94050118bad2a == cache_frame_68c9024274b1dc9263d94050118bad2a) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_68c9024274b1dc9263d94050118bad2a);
        cache_frame_68c9024274b1dc9263d94050118bad2a = NULL;
    }

    assertFrameObject(frame_68c9024274b1dc9263d94050118bad2a);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_variant_mapping);
    Py_DECREF(var_variant_mapping);
    var_variant_mapping = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_variant_mapping);
    var_variant_mapping = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__66___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_enums = python_pars[1];
    PyObject *par_kw = python_pars[2];
    struct Nuitka_FrameObject *frame_a47461af6a6a5feab30dc1362277f50c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_a47461af6a6a5feab30dc1362277f50c = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_a47461af6a6a5feab30dc1362277f50c)) {
        Py_XDECREF(cache_frame_a47461af6a6a5feab30dc1362277f50c);

#if _DEBUG_REFCOUNTS
        if (cache_frame_a47461af6a6a5feab30dc1362277f50c == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_a47461af6a6a5feab30dc1362277f50c = MAKE_FUNCTION_FRAME(codeobj_a47461af6a6a5feab30dc1362277f50c, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_a47461af6a6a5feab30dc1362277f50c->m_type_description == NULL);
    frame_a47461af6a6a5feab30dc1362277f50c = cache_frame_a47461af6a6a5feab30dc1362277f50c;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_a47461af6a6a5feab30dc1362277f50c);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_a47461af6a6a5feab30dc1362277f50c) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_called_instance_1 = par_self;
        CHECK_OBJECT(par_enums);
        tmp_args_element_value_1 = par_enums;
        CHECK_OBJECT(par_kw);
        tmp_args_element_value_2 = par_kw;
        frame_a47461af6a6a5feab30dc1362277f50c->m_frame.f_lineno = 1383;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS2(
                tmp_called_instance_1,
                mod_consts[165],
                call_args
            );
        }

        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1383;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a47461af6a6a5feab30dc1362277f50c);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a47461af6a6a5feab30dc1362277f50c);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a47461af6a6a5feab30dc1362277f50c, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_a47461af6a6a5feab30dc1362277f50c->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a47461af6a6a5feab30dc1362277f50c, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_a47461af6a6a5feab30dc1362277f50c,
        type_description_1,
        par_self,
        par_enums,
        par_kw
    );


    // Release cached frame if used for exception.
    if (frame_a47461af6a6a5feab30dc1362277f50c == cache_frame_a47461af6a6a5feab30dc1362277f50c) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_a47461af6a6a5feab30dc1362277f50c);
        cache_frame_a47461af6a6a5feab30dc1362277f50c = NULL;
    }

    assertFrameObject(frame_a47461af6a6a5feab30dc1362277f50c);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_enums);
    Py_DECREF(par_enums);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_enums);
    Py_DECREF(par_enums);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__67__enums_argument(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_9e45727e74315d64c429ad65bc142e05;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_9e45727e74315d64c429ad65bc142e05 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_9e45727e74315d64c429ad65bc142e05)) {
        Py_XDECREF(cache_frame_9e45727e74315d64c429ad65bc142e05);

#if _DEBUG_REFCOUNTS
        if (cache_frame_9e45727e74315d64c429ad65bc142e05 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_9e45727e74315d64c429ad65bc142e05 = MAKE_FUNCTION_FRAME(codeobj_9e45727e74315d64c429ad65bc142e05, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_9e45727e74315d64c429ad65bc142e05->m_type_description == NULL);
    frame_9e45727e74315d64c429ad65bc142e05 = cache_frame_9e45727e74315d64c429ad65bc142e05;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_9e45727e74315d64c429ad65bc142e05);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_9e45727e74315d64c429ad65bc142e05) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[167]);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1387;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? true : false;
        Py_DECREF(tmp_cmp_expr_left_1);
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_list_element_1;
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_list_element_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[167]);
        if (tmp_list_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1388;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = PyList_New(1);
        PyList_SET_ITEM(tmp_return_value, 0, tmp_list_element_1);
        goto frame_return_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[168]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1390;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9e45727e74315d64c429ad65bc142e05);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_9e45727e74315d64c429ad65bc142e05);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9e45727e74315d64c429ad65bc142e05);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_9e45727e74315d64c429ad65bc142e05, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_9e45727e74315d64c429ad65bc142e05->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_9e45727e74315d64c429ad65bc142e05, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_9e45727e74315d64c429ad65bc142e05,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_9e45727e74315d64c429ad65bc142e05 == cache_frame_9e45727e74315d64c429ad65bc142e05) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_9e45727e74315d64c429ad65bc142e05);
        cache_frame_9e45727e74315d64c429ad65bc142e05 = NULL;
    }

    assertFrameObject(frame_9e45727e74315d64c429ad65bc142e05);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__68__enum_init(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_enums = python_pars[1];
    PyObject *par_kw = python_pars[2];
    PyObject *var_length_arg = NULL;
    PyObject *var_values = NULL;
    PyObject *var_objects = NULL;
    PyObject *var_convert_unicode = NULL;
    PyObject *var_e = NULL;
    PyObject *var__expect_unicode = NULL;
    PyObject *var_length = NULL;
    nuitka_bool tmp_for_loop_1__break_indicator = NUITKA_BOOL_UNASSIGNED;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_genexpr_1__$0 = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_3a3349635ec550d42656800d62fe557c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    int tmp_res;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    static struct Nuitka_FrameObject *cache_frame_3a3349635ec550d42656800d62fe557c = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_3a3349635ec550d42656800d62fe557c)) {
        Py_XDECREF(cache_frame_3a3349635ec550d42656800d62fe557c);

#if _DEBUG_REFCOUNTS
        if (cache_frame_3a3349635ec550d42656800d62fe557c == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_3a3349635ec550d42656800d62fe557c = MAKE_FUNCTION_FRAME(codeobj_3a3349635ec550d42656800d62fe557c, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_3a3349635ec550d42656800d62fe557c->m_type_description == NULL);
    frame_3a3349635ec550d42656800d62fe557c = cache_frame_3a3349635ec550d42656800d62fe557c;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_3a3349635ec550d42656800d62fe557c);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_3a3349635ec550d42656800d62fe557c) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_1 = par_kw;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[152]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1400;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_3a3349635ec550d42656800d62fe557c->m_frame.f_lineno = 1400;
        tmp_assattr_value_1 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_1, mod_consts[169]);

        Py_DECREF(tmp_called_value_1);
        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1400;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[170], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1400;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_2 = par_kw;
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[152]);
        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1401;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_3a3349635ec550d42656800d62fe557c->m_frame.f_lineno = 1401;
        tmp_assattr_value_2 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_2, mod_consts[171]);

        Py_DECREF(tmp_called_value_2);
        if (tmp_assattr_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1401;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[172], tmp_assattr_value_2);
        Py_DECREF(tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1401;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_3;
        PyObject *tmp_called_value_3;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_3 = par_kw;
        tmp_called_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[152]);
        if (tmp_called_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1402;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_3a3349635ec550d42656800d62fe557c->m_frame.f_lineno = 1402;
        tmp_assattr_value_3 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_3, mod_consts[173]);

        Py_DECREF(tmp_called_value_3);
        if (tmp_assattr_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1402;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_3, mod_consts[174], tmp_assattr_value_3);
        Py_DECREF(tmp_assattr_value_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1402;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_4;
        PyObject *tmp_called_value_4;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_assattr_target_4;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_4 = par_kw;
        tmp_called_value_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[152]);
        if (tmp_called_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1403;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[175];
        tmp_args_element_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[176]);

        if (unlikely(tmp_args_element_value_2 == NULL)) {
            tmp_args_element_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[176]);
        }

        if (tmp_args_element_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_4);

            exception_lineno = 1403;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_3a3349635ec550d42656800d62fe557c->m_frame.f_lineno = 1403;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assattr_value_4 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_4, call_args);
        }

        Py_DECREF(tmp_called_value_4);
        if (tmp_assattr_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1403;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_4, mod_consts[177], tmp_assattr_value_4);
        Py_DECREF(tmp_assattr_value_4);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1403;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_5;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_5 = par_kw;
        tmp_called_value_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[152]);
        if (tmp_called_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1404;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_3 = mod_consts[22];
        tmp_args_element_value_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[176]);

        if (unlikely(tmp_args_element_value_4 == NULL)) {
            tmp_args_element_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[176]);
        }

        if (tmp_args_element_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_5);

            exception_lineno = 1404;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_3a3349635ec550d42656800d62fe557c->m_frame.f_lineno = 1404;
        {
            PyObject *call_args[] = {tmp_args_element_value_3, tmp_args_element_value_4};
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_5, call_args);
        }

        Py_DECREF(tmp_called_value_5);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1404;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        assert(var_length_arg == NULL);
        var_length_arg = tmp_assign_source_1;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_args_element_value_6;
        CHECK_OBJECT(par_self);
        tmp_called_instance_1 = par_self;
        CHECK_OBJECT(par_enums);
        tmp_args_element_value_5 = par_enums;
        CHECK_OBJECT(par_kw);
        tmp_args_element_value_6 = par_kw;
        frame_3a3349635ec550d42656800d62fe557c->m_frame.f_lineno = 1406;
        {
            PyObject *call_args[] = {tmp_args_element_value_5, tmp_args_element_value_6};
            tmp_iter_arg_1 = CALL_METHOD_WITH_ARGS2(
                tmp_called_instance_1,
                mod_consts[178],
                call_args
            );
        }

        if (tmp_iter_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1406;
            type_description_1 = "ooooooooooN";
            goto try_except_handler_2;
        }
        tmp_assign_source_2 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_1);
        Py_DECREF(tmp_iter_arg_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1406;
            type_description_1 = "ooooooooooN";
            goto try_except_handler_2;
        }
        assert(tmp_tuple_unpack_1__source_iter == NULL);
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_2;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_3 = UNPACK_NEXT(tmp_unpack_1, 0, 2);
        if (tmp_assign_source_3 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooooooooN";
            exception_lineno = 1406;
            goto try_except_handler_3;
        }
        assert(tmp_tuple_unpack_1__element_1 == NULL);
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_4 = UNPACK_NEXT(tmp_unpack_2, 1, 2);
        if (tmp_assign_source_4 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooooooooN";
            exception_lineno = 1406;
            goto try_except_handler_3;
        }
        assert(tmp_tuple_unpack_1__element_2 == NULL);
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_4;
    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "ooooooooooN";
                    exception_lineno = 1406;
                    goto try_except_handler_3;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[179];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "ooooooooooN";
            exception_lineno = 1406;
            goto try_except_handler_3;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_1);
        tmp_assign_source_5 = tmp_tuple_unpack_1__element_1;
        assert(var_values == NULL);
        Py_INCREF(tmp_assign_source_5);
        var_values = tmp_assign_source_5;
    }
    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_6;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_2);
        tmp_assign_source_6 = tmp_tuple_unpack_1__element_2;
        assert(var_objects == NULL);
        Py_INCREF(tmp_assign_source_6);
        var_objects = tmp_assign_source_6;
    }
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_7;
        PyObject *tmp_args_element_value_8;
        PyObject *tmp_args_element_value_9;
        CHECK_OBJECT(par_self);
        tmp_called_instance_2 = par_self;
        CHECK_OBJECT(var_values);
        tmp_args_element_value_7 = var_values;
        CHECK_OBJECT(var_objects);
        tmp_args_element_value_8 = var_objects;
        CHECK_OBJECT(par_kw);
        tmp_args_element_value_9 = par_kw;
        frame_3a3349635ec550d42656800d62fe557c->m_frame.f_lineno = 1407;
        {
            PyObject *call_args[] = {tmp_args_element_value_7, tmp_args_element_value_8, tmp_args_element_value_9};
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS3(
                tmp_called_instance_2,
                mod_consts[180],
                call_args
            );
        }

        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1407;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_called_value_6;
        PyObject *tmp_expression_value_6;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_6 = par_kw;
        tmp_called_value_6 = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[152]);
        if (tmp_called_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1409;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_3a3349635ec550d42656800d62fe557c->m_frame.f_lineno = 1409;
        tmp_assign_source_7 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_6, mod_consts[181]);

        Py_DECREF(tmp_called_value_6);
        if (tmp_assign_source_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1409;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        assert(var_convert_unicode == NULL);
        var_convert_unicode = tmp_assign_source_7;
    }
    {
        PyObject *tmp_assattr_value_5;
        PyObject *tmp_called_value_7;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_assattr_target_5;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_7 = par_kw;
        tmp_called_value_7 = LOOKUP_ATTRIBUTE(tmp_expression_value_7, mod_consts[152]);
        if (tmp_called_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1410;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_3a3349635ec550d42656800d62fe557c->m_frame.f_lineno = 1410;
        tmp_assattr_value_5 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_7, mod_consts[182]);

        Py_DECREF(tmp_called_value_7);
        if (tmp_assattr_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1410;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_5 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_5, mod_consts[183], tmp_assattr_value_5);
        Py_DECREF(tmp_assattr_value_5);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1410;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
    }
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(var_convert_unicode);
        tmp_cmp_expr_left_1 = var_convert_unicode;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        nuitka_bool tmp_assign_source_8;
        tmp_assign_source_8 = NUITKA_BOOL_FALSE;
        tmp_for_loop_1__break_indicator = tmp_assign_source_8;
    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_iter_arg_2;
        PyObject *tmp_expression_value_8;
        CHECK_OBJECT(par_self);
        tmp_expression_value_8 = par_self;
        tmp_iter_arg_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_8, mod_consts[168]);
        if (tmp_iter_arg_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1413;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_9 = MAKE_ITERATOR(tmp_iter_arg_2);
        Py_DECREF(tmp_iter_arg_2);
        if (tmp_assign_source_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1413;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_9;
    }
    // Tried code:
    loop_start_1:;
    // Tried code:
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_value_value_1;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_value_value_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_10 = ITERATOR_NEXT(tmp_value_value_1);
        if (tmp_assign_source_10 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooooooooN";
            exception_lineno = 1413;
            goto try_except_handler_5;
        }
        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_10;
            Py_XDECREF(old);
        }

    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    {
        bool tmp_condition_result_2;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        tmp_cmp_expr_left_2 = exception_keeper_type_3;
        tmp_cmp_expr_right_2 = PyExc_StopIteration;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_cmp_expr_left_2, tmp_cmp_expr_right_2);
        assert(!(tmp_res == -1));
        tmp_condition_result_2 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_2 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        nuitka_bool tmp_assign_source_11;
        tmp_assign_source_11 = NUITKA_BOOL_TRUE;
        tmp_for_loop_1__break_indicator = tmp_assign_source_11;
    }
    Py_DECREF(exception_keeper_type_3);
    Py_XDECREF(exception_keeper_value_3);
    Py_XDECREF(exception_keeper_tb_3);
    goto loop_end_1;
    goto branch_end_2;
    branch_no_2:;
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_4;
    branch_end_2:;
    // End of try:
    try_end_3:;
    {
        PyObject *tmp_assign_source_12;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_assign_source_12 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_e;
            var_e = tmp_assign_source_12;
            Py_INCREF(var_e);
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_expression_value_9;
        CHECK_OBJECT(var_e);
        tmp_isinstance_inst_1 = var_e;
        tmp_expression_value_9 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_9 == NULL)) {
            tmp_expression_value_9 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
        }

        if (tmp_expression_value_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1416;
            type_description_1 = "ooooooooooN";
            goto try_except_handler_4;
        }
        tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_9, mod_consts[49]);
        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1416;
            type_description_1 = "ooooooooooN";
            goto try_except_handler_4;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1416;
            type_description_1 = "ooooooooooN";
            goto try_except_handler_4;
        }
        tmp_condition_result_3 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_assign_source_13;
        tmp_assign_source_13 = Py_True;
        assert(var__expect_unicode == NULL);
        Py_INCREF(tmp_assign_source_13);
        var__expect_unicode = tmp_assign_source_13;
    }
    goto loop_end_1;
    branch_no_3:;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1413;
        type_description_1 = "ooooooooooN";
        goto try_except_handler_4;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    {
        bool tmp_condition_result_4;
        nuitka_bool tmp_cmp_expr_left_3;
        nuitka_bool tmp_cmp_expr_right_3;
        assert(tmp_for_loop_1__break_indicator != NUITKA_BOOL_UNASSIGNED);
        tmp_cmp_expr_left_3 = tmp_for_loop_1__break_indicator;
        tmp_cmp_expr_right_3 = NUITKA_BOOL_TRUE;
        tmp_condition_result_4 = (tmp_cmp_expr_left_3 == tmp_cmp_expr_right_3) ? true : false;
        if (tmp_condition_result_4 != false) {
            goto branch_yes_4;
        } else {
            goto branch_no_4;
        }
    }
    branch_yes_4:;
    {
        PyObject *tmp_assign_source_14;
        tmp_assign_source_14 = Py_False;
        {
            PyObject *old = var__expect_unicode;
            var__expect_unicode = tmp_assign_source_14;
            Py_INCREF(var__expect_unicode);
            Py_XDECREF(old);
        }

    }
    branch_no_4:;
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_15;
        CHECK_OBJECT(var_convert_unicode);
        tmp_assign_source_15 = var_convert_unicode;
        assert(var__expect_unicode == NULL);
        Py_INCREF(tmp_assign_source_15);
        var__expect_unicode = tmp_assign_source_15;
    }
    branch_end_1:;
    {
        nuitka_bool tmp_condition_result_5;
        PyObject *tmp_expression_value_10;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_10 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_10, mod_consts[168]);
        if (tmp_attribute_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1424;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 1424;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_5 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
    }
    branch_yes_5:;
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_called_value_8;
        PyObject *tmp_args_element_value_10;
        tmp_called_value_8 = LOOKUP_BUILTIN(mod_consts[184]);
        assert(tmp_called_value_8 != NULL);
        {
            PyObject *tmp_assign_source_17;
            PyObject *tmp_iter_arg_3;
            PyObject *tmp_expression_value_11;
            CHECK_OBJECT(par_self);
            tmp_expression_value_11 = par_self;
            tmp_iter_arg_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_11, mod_consts[168]);
            if (tmp_iter_arg_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1425;
                type_description_1 = "ooooooooooN";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_17 = MAKE_ITERATOR(tmp_iter_arg_3);
            Py_DECREF(tmp_iter_arg_3);
            if (tmp_assign_source_17 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1425;
                type_description_1 = "ooooooooooN";
                goto frame_exception_exit_1;
            }
            assert(tmp_genexpr_1__$0 == NULL);
            tmp_genexpr_1__$0 = tmp_assign_source_17;
        }
        // Tried code:
        {
            struct Nuitka_CellObject *tmp_closure_1[1];

            tmp_closure_1[0] = Nuitka_Cell_New0(tmp_genexpr_1__$0);

            tmp_args_element_value_10 = MAKE_GENERATOR_sqlalchemy$sql$sqltypes$$$function__68__enum_init$$$genexpr__1_genexpr(tmp_closure_1);

            goto try_return_handler_6;
        }
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_6:;
        CHECK_OBJECT(tmp_genexpr_1__$0);
        Py_DECREF(tmp_genexpr_1__$0);
        tmp_genexpr_1__$0 = NULL;
        goto outline_result_1;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_result_1:;
        frame_3a3349635ec550d42656800d62fe557c->m_frame.f_lineno = 1425;
        tmp_assign_source_16 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_8, tmp_args_element_value_10);
        Py_DECREF(tmp_args_element_value_10);
        if (tmp_assign_source_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1425;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        assert(var_length == NULL);
        var_length = tmp_assign_source_16;
    }
    goto branch_end_5;
    branch_no_5:;
    {
        PyObject *tmp_assign_source_18;
        tmp_assign_source_18 = mod_consts[52];
        assert(var_length == NULL);
        Py_INCREF(tmp_assign_source_18);
        var_length = tmp_assign_source_18;
    }
    branch_end_5:;
    {
        bool tmp_condition_result_6;
        int tmp_and_left_truth_1;
        bool tmp_and_left_value_1;
        bool tmp_and_right_value_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_expression_value_12;
        PyObject *tmp_cmp_expr_left_4;
        PyObject *tmp_cmp_expr_right_4;
        CHECK_OBJECT(par_self);
        tmp_expression_value_12 = par_self;
        tmp_operand_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_12, mod_consts[170]);
        if (tmp_operand_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1428;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        Py_DECREF(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1428;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_res == 0) ? true : false;
        tmp_and_left_truth_1 = tmp_and_left_value_1 != false ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(var_length_arg);
        tmp_cmp_expr_left_4 = var_length_arg;
        tmp_cmp_expr_right_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[176]);

        if (unlikely(tmp_cmp_expr_right_4 == NULL)) {
            tmp_cmp_expr_right_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[176]);
        }

        if (tmp_cmp_expr_right_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1428;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_cmp_expr_left_4 != tmp_cmp_expr_right_4) ? true : false;
        tmp_condition_result_6 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_6 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_6 != false) {
            goto branch_yes_6;
        } else {
            goto branch_no_6;
        }
    }
    branch_yes_6:;
    {
        nuitka_bool tmp_condition_result_7;
        PyObject *tmp_cmp_expr_left_5;
        PyObject *tmp_cmp_expr_right_5;
        CHECK_OBJECT(var_length_arg);
        tmp_cmp_expr_left_5 = var_length_arg;
        CHECK_OBJECT(var_length);
        tmp_cmp_expr_right_5 = var_length;
        tmp_condition_result_7 = RICH_COMPARE_LT_NBOOL_OBJECT_OBJECT(tmp_cmp_expr_left_5, tmp_cmp_expr_right_5);
        if (tmp_condition_result_7 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1429;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        if (tmp_condition_result_7 == NUITKA_BOOL_TRUE) {
            goto branch_yes_7;
        } else {
            goto branch_no_7;
        }
        assert(tmp_condition_result_7 != NUITKA_BOOL_UNASSIGNED);
    }
    branch_yes_7:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_make_exception_arg_1;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        PyObject *tmp_tuple_element_1;
        tmp_left_value_1 = mod_consts[185];
        CHECK_OBJECT(var_length_arg);
        tmp_tuple_element_1 = var_length_arg;
        tmp_right_value_1 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_right_value_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(var_length);
        tmp_tuple_element_1 = var_length;
        PyTuple_SET_ITEM0(tmp_right_value_1, 1, tmp_tuple_element_1);
        tmp_make_exception_arg_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_1, tmp_right_value_1);
        Py_DECREF(tmp_right_value_1);
        if (tmp_make_exception_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1433;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_3a3349635ec550d42656800d62fe557c->m_frame.f_lineno = 1430;
        tmp_raise_type_1 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_ValueError, tmp_make_exception_arg_1);
        Py_DECREF(tmp_make_exception_arg_1);
        assert(!(tmp_raise_type_1 == NULL));
        exception_type = tmp_raise_type_1;
        exception_lineno = 1430;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ooooooooooN";
        goto frame_exception_exit_1;
    }
    branch_no_7:;
    {
        PyObject *tmp_assign_source_19;
        CHECK_OBJECT(var_length_arg);
        tmp_assign_source_19 = var_length_arg;
        {
            PyObject *old = var_length;
            assert(old != NULL);
            var_length = tmp_assign_source_19;
            Py_INCREF(var_length);
            Py_DECREF(old);
        }

    }
    branch_no_6:;
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_expression_value_13;
        PyObject *tmp_ass_subscript_1;
        tmp_ass_subvalue_1 = Py_None;
        CHECK_OBJECT(par_self);
        tmp_expression_value_13 = par_self;
        tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_13, mod_consts[186]);
        if (tmp_ass_subscribed_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1437;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_ass_subscript_1 = Py_None;
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
        Py_DECREF(tmp_ass_subscribed_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1437;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_ass_subvalue_2;
        PyObject *tmp_ass_subscribed_2;
        PyObject *tmp_expression_value_14;
        PyObject *tmp_ass_subscript_2;
        tmp_ass_subvalue_2 = Py_None;
        CHECK_OBJECT(par_self);
        tmp_expression_value_14 = par_self;
        tmp_ass_subscribed_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_14, mod_consts[187]);
        if (tmp_ass_subscribed_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1437;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_ass_subscript_2 = Py_None;
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2);
        Py_DECREF(tmp_ass_subscribed_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1437;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_value_9;
        PyObject *tmp_expression_value_15;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_call_result_2;
        PyObject *tmp_kw_call_value_0_1;
        PyObject *tmp_kw_call_value_1_1;
        tmp_type_arg_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[188]);

        if (unlikely(tmp_type_arg_value_1 == NULL)) {
            tmp_type_arg_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[188]);
        }

        if (tmp_type_arg_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1439;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_object_arg_value_1 = par_self;
        tmp_expression_value_15 = BUILTIN_SUPER2(tmp_type_arg_value_1, tmp_object_arg_value_1);
        if (tmp_expression_value_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1439;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_called_value_9 = LOOKUP_ATTRIBUTE(tmp_expression_value_15, mod_consts[66]);
        Py_DECREF(tmp_expression_value_15);
        if (tmp_called_value_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1439;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        if (var_length == NULL) {
            Py_DECREF(tmp_called_value_9);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[22]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1440;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }

        tmp_kw_call_value_0_1 = var_length;
        if (var__expect_unicode == NULL) {
            Py_DECREF(tmp_called_value_9);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[24]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1440;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }

        tmp_kw_call_value_1_1 = var__expect_unicode;
        frame_3a3349635ec550d42656800d62fe557c->m_frame.f_lineno = 1439;
        {
            PyObject *kw_values[2] = {tmp_kw_call_value_0_1, tmp_kw_call_value_1_1};

            tmp_call_result_2 = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tmp_called_value_9, kw_values, mod_consts[189]);
        }

        Py_DECREF(tmp_called_value_9);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1439;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    {
        nuitka_bool tmp_condition_result_8;
        PyObject *tmp_expression_value_16;
        PyObject *tmp_attribute_value_2;
        int tmp_truth_name_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_16 = par_self;
        tmp_attribute_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_16, mod_consts[167]);
        if (tmp_attribute_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1443;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_attribute_value_2);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_2);

            exception_lineno = 1443;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_8 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_2);
        if (tmp_condition_result_8 == NUITKA_BOOL_TRUE) {
            goto branch_yes_8;
        } else {
            goto branch_no_8;
        }
    }
    branch_yes_8:;
    {
        PyObject *tmp_called_value_10;
        PyObject *tmp_expression_value_17;
        PyObject *tmp_call_result_3;
        PyObject *tmp_args_element_value_11;
        PyObject *tmp_args_element_value_12;
        PyObject *tmp_called_value_11;
        PyObject *tmp_expression_value_18;
        PyObject *tmp_expression_value_19;
        PyObject *tmp_expression_value_20;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_17 = par_kw;
        tmp_called_value_10 = LOOKUP_ATTRIBUTE(tmp_expression_value_17, mod_consts[63]);
        if (tmp_called_value_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1444;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_11 = mod_consts[93];
        CHECK_OBJECT(par_self);
        tmp_expression_value_20 = par_self;
        tmp_expression_value_19 = LOOKUP_ATTRIBUTE(tmp_expression_value_20, mod_consts[167]);
        if (tmp_expression_value_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_10);

            exception_lineno = 1444;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_18 = LOOKUP_ATTRIBUTE(tmp_expression_value_19, mod_consts[190]);
        Py_DECREF(tmp_expression_value_19);
        if (tmp_expression_value_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_10);

            exception_lineno = 1444;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_called_value_11 = LOOKUP_ATTRIBUTE(tmp_expression_value_18, mod_consts[191]);
        Py_DECREF(tmp_expression_value_18);
        if (tmp_called_value_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_10);

            exception_lineno = 1444;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_3a3349635ec550d42656800d62fe557c->m_frame.f_lineno = 1444;
        tmp_args_element_value_12 = CALL_FUNCTION_NO_ARGS(tmp_called_value_11);
        Py_DECREF(tmp_called_value_11);
        if (tmp_args_element_value_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_10);

            exception_lineno = 1444;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_3a3349635ec550d42656800d62fe557c->m_frame.f_lineno = 1444;
        {
            PyObject *call_args[] = {tmp_args_element_value_11, tmp_args_element_value_12};
            tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_10, call_args);
        }

        Py_DECREF(tmp_called_value_10);
        Py_DECREF(tmp_args_element_value_12);
        if (tmp_call_result_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1444;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_3);
    }
    branch_no_8:;
    {
        PyObject *tmp_called_value_12;
        PyObject *tmp_expression_value_21;
        PyObject *tmp_call_result_4;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_kw_call_dict_value_0_1;
        PyObject *tmp_called_value_13;
        PyObject *tmp_expression_value_22;
        PyObject *tmp_kw_call_dict_value_1_1;
        PyObject *tmp_called_value_14;
        PyObject *tmp_expression_value_23;
        PyObject *tmp_kw_call_dict_value_2_1;
        PyObject *tmp_called_value_15;
        PyObject *tmp_expression_value_24;
        PyObject *tmp_kw_call_dict_value_3_1;
        PyObject *tmp_called_value_16;
        PyObject *tmp_expression_value_25;
        PyObject *tmp_kw_call_dict_value_4_1;
        PyObject *tmp_called_value_17;
        PyObject *tmp_expression_value_26;
        PyObject *tmp_kw_call_dict_value_5_1;
        PyObject *tmp_called_value_18;
        PyObject *tmp_expression_value_27;
        tmp_expression_value_21 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[157]);

        if (unlikely(tmp_expression_value_21 == NULL)) {
            tmp_expression_value_21 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[157]);
        }

        if (tmp_expression_value_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1445;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        tmp_called_value_12 = LOOKUP_ATTRIBUTE(tmp_expression_value_21, mod_consts[66]);
        if (tmp_called_value_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1445;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_kw_call_arg_value_0_1 = par_self;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_22 = par_kw;
        tmp_called_value_13 = LOOKUP_ATTRIBUTE(tmp_expression_value_22, mod_consts[152]);
        if (tmp_called_value_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_12);

            exception_lineno = 1447;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_3a3349635ec550d42656800d62fe557c->m_frame.f_lineno = 1447;
        tmp_kw_call_dict_value_0_1 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_13, mod_consts[192]);

        Py_DECREF(tmp_called_value_13);
        if (tmp_kw_call_dict_value_0_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_12);

            exception_lineno = 1447;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_kw);
        tmp_expression_value_23 = par_kw;
        tmp_called_value_14 = LOOKUP_ATTRIBUTE(tmp_expression_value_23, mod_consts[152]);
        if (tmp_called_value_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_12);
            Py_DECREF(tmp_kw_call_dict_value_0_1);

            exception_lineno = 1448;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_3a3349635ec550d42656800d62fe557c->m_frame.f_lineno = 1448;
        tmp_kw_call_dict_value_1_1 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_14, mod_consts[193]);

        Py_DECREF(tmp_called_value_14);
        if (tmp_kw_call_dict_value_1_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_12);
            Py_DECREF(tmp_kw_call_dict_value_0_1);

            exception_lineno = 1448;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_kw);
        tmp_expression_value_24 = par_kw;
        tmp_called_value_15 = LOOKUP_ATTRIBUTE(tmp_expression_value_24, mod_consts[152]);
        if (tmp_called_value_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_12);
            Py_DECREF(tmp_kw_call_dict_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_1_1);

            exception_lineno = 1449;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_3a3349635ec550d42656800d62fe557c->m_frame.f_lineno = 1449;
        tmp_kw_call_dict_value_2_1 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_15, mod_consts[194]);

        Py_DECREF(tmp_called_value_15);
        if (tmp_kw_call_dict_value_2_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_12);
            Py_DECREF(tmp_kw_call_dict_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_1_1);

            exception_lineno = 1449;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_kw);
        tmp_expression_value_25 = par_kw;
        tmp_called_value_16 = LOOKUP_ATTRIBUTE(tmp_expression_value_25, mod_consts[152]);
        if (tmp_called_value_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_12);
            Py_DECREF(tmp_kw_call_dict_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_1_1);
            Py_DECREF(tmp_kw_call_dict_value_2_1);

            exception_lineno = 1450;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_3a3349635ec550d42656800d62fe557c->m_frame.f_lineno = 1450;
        tmp_kw_call_dict_value_3_1 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_16, mod_consts[195]);

        Py_DECREF(tmp_called_value_16);
        if (tmp_kw_call_dict_value_3_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_12);
            Py_DECREF(tmp_kw_call_dict_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_1_1);
            Py_DECREF(tmp_kw_call_dict_value_2_1);

            exception_lineno = 1450;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_kw);
        tmp_expression_value_26 = par_kw;
        tmp_called_value_17 = LOOKUP_ATTRIBUTE(tmp_expression_value_26, mod_consts[152]);
        if (tmp_called_value_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_12);
            Py_DECREF(tmp_kw_call_dict_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_1_1);
            Py_DECREF(tmp_kw_call_dict_value_2_1);
            Py_DECREF(tmp_kw_call_dict_value_3_1);

            exception_lineno = 1451;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_3a3349635ec550d42656800d62fe557c->m_frame.f_lineno = 1451;
        tmp_kw_call_dict_value_4_1 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_17, mod_consts[196]);

        Py_DECREF(tmp_called_value_17);
        if (tmp_kw_call_dict_value_4_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_12);
            Py_DECREF(tmp_kw_call_dict_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_1_1);
            Py_DECREF(tmp_kw_call_dict_value_2_1);
            Py_DECREF(tmp_kw_call_dict_value_3_1);

            exception_lineno = 1451;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_kw);
        tmp_expression_value_27 = par_kw;
        tmp_called_value_18 = LOOKUP_ATTRIBUTE(tmp_expression_value_27, mod_consts[152]);
        if (tmp_called_value_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_12);
            Py_DECREF(tmp_kw_call_dict_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_1_1);
            Py_DECREF(tmp_kw_call_dict_value_2_1);
            Py_DECREF(tmp_kw_call_dict_value_3_1);
            Py_DECREF(tmp_kw_call_dict_value_4_1);

            exception_lineno = 1452;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_3a3349635ec550d42656800d62fe557c->m_frame.f_lineno = 1452;
        tmp_kw_call_dict_value_5_1 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_18, mod_consts[197]);

        Py_DECREF(tmp_called_value_18);
        if (tmp_kw_call_dict_value_5_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_12);
            Py_DECREF(tmp_kw_call_dict_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_1_1);
            Py_DECREF(tmp_kw_call_dict_value_2_1);
            Py_DECREF(tmp_kw_call_dict_value_3_1);
            Py_DECREF(tmp_kw_call_dict_value_4_1);

            exception_lineno = 1452;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        frame_3a3349635ec550d42656800d62fe557c->m_frame.f_lineno = 1445;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1};
            PyObject *kw_values[6] = {tmp_kw_call_dict_value_0_1, tmp_kw_call_dict_value_1_1, tmp_kw_call_dict_value_2_1, tmp_kw_call_dict_value_3_1, tmp_kw_call_dict_value_4_1, tmp_kw_call_dict_value_5_1};
            tmp_call_result_4 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tmp_called_value_12, args, kw_values, mod_consts[198]);
        }

        Py_DECREF(tmp_called_value_12);
        Py_DECREF(tmp_kw_call_dict_value_0_1);
        Py_DECREF(tmp_kw_call_dict_value_1_1);
        Py_DECREF(tmp_kw_call_dict_value_2_1);
        Py_DECREF(tmp_kw_call_dict_value_3_1);
        Py_DECREF(tmp_kw_call_dict_value_4_1);
        Py_DECREF(tmp_kw_call_dict_value_5_1);
        if (tmp_call_result_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1445;
            type_description_1 = "ooooooooooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_4);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_3a3349635ec550d42656800d62fe557c);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_3a3349635ec550d42656800d62fe557c);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_3a3349635ec550d42656800d62fe557c, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_3a3349635ec550d42656800d62fe557c->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_3a3349635ec550d42656800d62fe557c, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_3a3349635ec550d42656800d62fe557c,
        type_description_1,
        par_self,
        par_enums,
        par_kw,
        var_length_arg,
        var_values,
        var_objects,
        var_convert_unicode,
        var_e,
        var__expect_unicode,
        var_length,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_3a3349635ec550d42656800d62fe557c == cache_frame_3a3349635ec550d42656800d62fe557c) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_3a3349635ec550d42656800d62fe557c);
        cache_frame_3a3349635ec550d42656800d62fe557c = NULL;
    }

    assertFrameObject(frame_3a3349635ec550d42656800d62fe557c);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_length_arg);
    var_length_arg = NULL;
    CHECK_OBJECT(var_values);
    Py_DECREF(var_values);
    var_values = NULL;
    CHECK_OBJECT(var_objects);
    Py_DECREF(var_objects);
    var_objects = NULL;
    Py_XDECREF(var_convert_unicode);
    var_convert_unicode = NULL;
    Py_XDECREF(var_e);
    var_e = NULL;
    Py_XDECREF(var__expect_unicode);
    var__expect_unicode = NULL;
    Py_XDECREF(var_length);
    var_length = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_length_arg);
    var_length_arg = NULL;
    Py_XDECREF(var_values);
    var_values = NULL;
    Py_XDECREF(var_objects);
    var_objects = NULL;
    Py_XDECREF(var_convert_unicode);
    var_convert_unicode = NULL;
    Py_XDECREF(var_e);
    var_e = NULL;
    Py_XDECREF(var__expect_unicode);
    var__expect_unicode = NULL;
    Py_XDECREF(var_length);
    var_length = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_enums);
    Py_DECREF(par_enums);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_enums);
    Py_DECREF(par_enums);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct sqlalchemy$sql$sqltypes$$$function__68__enum_init$$$genexpr__1_genexpr_locals {
    PyObject *var_x;
    PyObject *tmp_iter_value_0;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
};

static PyObject *sqlalchemy$sql$sqltypes$$$function__68__enum_init$$$genexpr__1_genexpr_context(struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value) {
    CHECK_OBJECT(generator);
    assert(Nuitka_Generator_Check((PyObject *)generator));
    CHECK_OBJECT_X(yield_return_value);

    // Heap access if used.
    struct sqlalchemy$sql$sqltypes$$$function__68__enum_init$$$genexpr__1_genexpr_locals *generator_heap = (struct sqlalchemy$sql$sqltypes$$$function__68__enum_init$$$genexpr__1_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_x = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    if (isFrameUnusable(cache_m_frame)) {
        Py_XDECREF(cache_m_frame);

#if _DEBUG_REFCOUNTS
        if (cache_m_frame == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_m_frame = MAKE_FUNCTION_FRAME(codeobj_52990c99d3fe223e9a30245c73cd264b, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF(generator->m_frame);
    assert(Py_REFCNT(generator->m_frame) == 2); // Frame stack

#if PYTHON_VERSION >= 0x340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    assert(generator->m_frame->m_frame.f_back == NULL);
    Py_CLEAR(generator->m_frame->m_frame.f_back);

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF(generator->m_frame->m_frame.f_back);

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF(generator->m_frame);

    Nuitka_Frame_MarkAsExecuting(generator->m_frame);

#if PYTHON_VERSION >= 0x300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

        EXC_TYPE_F(generator) = EXC_TYPE(thread_state);
        if (EXC_TYPE_F(generator) == Py_None) EXC_TYPE_F(generator) = NULL;
        Py_XINCREF(EXC_TYPE_F(generator));
        EXC_VALUE_F(generator) = EXC_VALUE(thread_state);
        Py_XINCREF(EXC_VALUE_F(generator));
        EXC_TRACEBACK_F(generator) = EXC_TRACEBACK(thread_state);
        Py_XINCREF(EXC_TRACEBACK_F(generator));
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT(Nuitka_Cell_GET(generator->m_closure[0]));
        tmp_next_source_1 = Nuitka_Cell_GET(generator->m_closure[0]);
        tmp_assign_source_1 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_1 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
                generator_heap->type_description_1 = "No";
                generator_heap->exception_lineno = 1425;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT(generator_heap->tmp_iter_value_0);
        tmp_assign_source_2 = generator_heap->tmp_iter_value_0;
        {
            PyObject *old = generator_heap->var_x;
            generator_heap->var_x = tmp_assign_source_2;
            Py_INCREF(generator_heap->var_x);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_expression_value_1;
        PyObject *tmp_len_arg_1;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        CHECK_OBJECT(generator_heap->var_x);
        tmp_len_arg_1 = generator_heap->var_x;
        tmp_expression_value_1 = BUILTIN_LEN(tmp_len_arg_1);
        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1425;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        Nuitka_PreserveHeap(generator_heap->yield_tmps, &tmp_len_arg_1, sizeof(PyObject *), NULL);
        generator->m_yield_return_index = 1;
        return tmp_expression_value_1;
        yield_return_1:
        Nuitka_RestoreHeap(generator_heap->yield_tmps, &tmp_len_arg_1, sizeof(PyObject *), NULL);
        if (yield_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 1425;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


        generator_heap->exception_lineno = 1425;
        generator_heap->type_description_1 = "No";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->tmp_iter_value_0);
    generator_heap->tmp_iter_value_0 = NULL;
    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting(generator->m_frame);

#if PYTHON_VERSION >= 0x300
    Py_CLEAR(EXC_TYPE_F(generator));
    Py_CLEAR(EXC_VALUE_F(generator));
    Py_CLEAR(EXC_TRACEBACK_F(generator));
#endif

    // Allow re-use of the frame again.
    Py_DECREF(generator->m_frame);
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if (!EXCEPTION_MATCH_GENERATOR(generator_heap->exception_type)) {
        if (generator_heap->exception_tb == NULL) {
            generator_heap->exception_tb = MAKE_TRACEBACK(generator->m_frame, generator_heap->exception_lineno);
        } else if (generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame) {
            generator_heap->exception_tb = ADD_TRACEBACK(generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno);
        }

        Nuitka_Frame_AttachLocals(
            generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_x
        );


        // Release cached frame if used for exception.
        if (generator->m_frame == cache_m_frame) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_m_frame);
            cache_m_frame = NULL;
        }

        assertFrameObject(generator->m_frame);
    }

#if PYTHON_VERSION >= 0x300
    Py_CLEAR(EXC_TYPE_F(generator));
    Py_CLEAR(EXC_VALUE_F(generator));
    Py_CLEAR(EXC_TRACEBACK_F(generator));
#endif

    Py_DECREF(generator->m_frame);

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->var_x);
    generator_heap->var_x = NULL;
    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF(generator_heap->tmp_iter_value_0);
    generator_heap->tmp_iter_value_0 = NULL;
    Py_XDECREF(generator_heap->var_x);
    generator_heap->var_x = NULL;


    return NULL;

    function_exception_exit:
    assert(generator_heap->exception_type);
    RESTORE_ERROR_OCCURRED(generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb);

    return NULL;

}

static PyObject *MAKE_GENERATOR_sqlalchemy$sql$sqltypes$$$function__68__enum_init$$$genexpr__1_genexpr(struct Nuitka_CellObject **closure) {
    return Nuitka_Generator_New(
        sqlalchemy$sql$sqltypes$$$function__68__enum_init$$$genexpr__1_genexpr_context,
        module_sqlalchemy$sql$sqltypes,
        mod_consts[200],
#if PYTHON_VERSION >= 0x350
        mod_consts[201],
#endif
        codeobj_52990c99d3fe223e9a30245c73cd264b,
        closure,
        1,
        sizeof(struct sqlalchemy$sql$sqltypes$$$function__68__enum_init$$$genexpr__1_genexpr_locals)
    );
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__69__parse_into_values(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_enums = python_pars[1];
    PyObject *par_kw = python_pars[2];
    PyObject *var_members = NULL;
    PyObject *var_values = NULL;
    PyObject *var_objects = NULL;
    PyObject *outline_0_var_k = NULL;
    PyObject *tmp_listcomp_1__$0 = NULL;
    PyObject *tmp_listcomp_1__contraction = NULL;
    PyObject *tmp_listcomp_1__iter_value_0 = NULL;
    struct Nuitka_FrameObject *frame_6d57f6b83eb64ab1a32aecd7155a9b5b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    struct Nuitka_FrameObject *frame_9662ba4a8a84a796883078580961343b_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    static struct Nuitka_FrameObject *cache_frame_9662ba4a8a84a796883078580961343b_2 = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_6d57f6b83eb64ab1a32aecd7155a9b5b = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_6d57f6b83eb64ab1a32aecd7155a9b5b)) {
        Py_XDECREF(cache_frame_6d57f6b83eb64ab1a32aecd7155a9b5b);

#if _DEBUG_REFCOUNTS
        if (cache_frame_6d57f6b83eb64ab1a32aecd7155a9b5b == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_6d57f6b83eb64ab1a32aecd7155a9b5b = MAKE_FUNCTION_FRAME(codeobj_6d57f6b83eb64ab1a32aecd7155a9b5b, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_6d57f6b83eb64ab1a32aecd7155a9b5b->m_type_description == NULL);
    frame_6d57f6b83eb64ab1a32aecd7155a9b5b = cache_frame_6d57f6b83eb64ab1a32aecd7155a9b5b;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_6d57f6b83eb64ab1a32aecd7155a9b5b);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_6d57f6b83eb64ab1a32aecd7155a9b5b) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        bool tmp_and_left_value_1;
        bool tmp_and_right_value_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_enums);
        tmp_operand_value_1 = par_enums;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1456;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_res == 0) ? true : false;
        tmp_and_left_truth_1 = tmp_and_left_value_1 != false ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        tmp_cmp_expr_left_1 = mod_consts[202];
        CHECK_OBJECT(par_kw);
        tmp_cmp_expr_right_1 = par_kw;
        tmp_res = PySequence_Contains(tmp_cmp_expr_right_1, tmp_cmp_expr_left_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1456;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res == 1) ? true : false;
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_1 = par_kw;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[152]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1457;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        frame_6d57f6b83eb64ab1a32aecd7155a9b5b->m_frame.f_lineno = 1457;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_POSARGS1(tmp_called_value_1, mod_consts[203]);

        Py_DECREF(tmp_called_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1457;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_enums;
            assert(old != NULL);
            par_enums = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_2;
        nuitka_bool tmp_and_left_value_2;
        nuitka_bool tmp_and_right_value_2;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_subscript_value_1;
        PyObject *tmp_attribute_value_1;
        CHECK_OBJECT(par_enums);
        tmp_len_arg_1 = par_enums;
        tmp_cmp_expr_left_2 = BUILTIN_LEN(tmp_len_arg_1);
        if (tmp_cmp_expr_left_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1459;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_2 = mod_consts[204];
        tmp_and_left_value_2 = RICH_COMPARE_EQ_NBOOL_LONG_LONG(tmp_cmp_expr_left_2, tmp_cmp_expr_right_2);
        Py_DECREF(tmp_cmp_expr_left_2);
        assert(!(tmp_and_left_value_2 == NUITKA_BOOL_EXCEPTION));
        tmp_and_left_truth_2 = tmp_and_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_2 == 1) {
            goto and_right_2;
        } else {
            goto and_left_2;
        }
        and_right_2:;
        assert(tmp_and_left_value_2 != NUITKA_BOOL_UNASSIGNED);
        CHECK_OBJECT(par_enums);
        tmp_expression_value_3 = par_enums;
        tmp_subscript_value_1 = mod_consts[52];
        tmp_expression_value_2 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_3, tmp_subscript_value_1, 0);
        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1459;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_attribute_value_1 = mod_consts[205];
        tmp_res = BUILTIN_HASATTR_BOOL(tmp_expression_value_2, tmp_attribute_value_1);
        Py_DECREF(tmp_expression_value_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1459;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_2 = tmp_and_right_value_2;
        goto and_end_2;
        and_left_2:;
        tmp_condition_result_2 = tmp_and_left_value_2;
        and_end_2:;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
        assert(tmp_condition_result_2 != NUITKA_BOOL_UNASSIGNED);
    }
    branch_yes_2:;
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_subscript_value_2;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_enums);
        tmp_expression_value_4 = par_enums;
        tmp_subscript_value_2 = mod_consts[52];
        tmp_assattr_value_1 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_4, tmp_subscript_value_2, 0);
        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1460;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[167], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1460;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_expression_value_6;
        CHECK_OBJECT(par_self);
        tmp_expression_value_6 = par_self;
        tmp_expression_value_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[167]);
        if (tmp_expression_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1461;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[205]);
        Py_DECREF(tmp_expression_value_5);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1461;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(var_members == NULL);
        var_members = tmp_assign_source_2;
    }
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_attribute_value_2;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_7 = par_self;
        tmp_attribute_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_7, mod_consts[174]);
        if (tmp_attribute_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1462;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_2);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_2);

            exception_lineno = 1462;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_2);
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_8;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_expression_value_9;
        CHECK_OBJECT(par_self);
        tmp_expression_value_8 = par_self;
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_8, mod_consts[174]);
        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1463;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_9 = par_self;
        tmp_args_element_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_9, mod_consts[167]);
        if (tmp_args_element_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 1463;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        frame_6d57f6b83eb64ab1a32aecd7155a9b5b->m_frame.f_lineno = 1463;
        tmp_assign_source_3 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_2, tmp_args_element_value_1);
        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1463;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(var_values == NULL);
        var_values = tmp_assign_source_3;
    }
    goto branch_end_3;
    branch_no_3:;
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_list_arg_1;
        CHECK_OBJECT(var_members);
        tmp_list_arg_1 = var_members;
        tmp_assign_source_4 = MAKE_LIST(tmp_list_arg_1);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1465;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(var_values == NULL);
        var_values = tmp_assign_source_4;
    }
    branch_end_3:;
    {
        PyObject *tmp_assign_source_5;
        // Tried code:
        {
            PyObject *tmp_assign_source_6;
            PyObject *tmp_iter_arg_1;
            if (var_members == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[206]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 1466;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }

            tmp_iter_arg_1 = var_members;
            tmp_assign_source_6 = MAKE_ITERATOR(tmp_iter_arg_1);
            if (tmp_assign_source_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1466;
                type_description_1 = "oooooo";
                goto try_except_handler_2;
            }
            assert(tmp_listcomp_1__$0 == NULL);
            tmp_listcomp_1__$0 = tmp_assign_source_6;
        }
        {
            PyObject *tmp_assign_source_7;
            tmp_assign_source_7 = PyList_New(0);
            assert(tmp_listcomp_1__contraction == NULL);
            tmp_listcomp_1__contraction = tmp_assign_source_7;
        }
        if (isFrameUnusable(cache_frame_9662ba4a8a84a796883078580961343b_2)) {
            Py_XDECREF(cache_frame_9662ba4a8a84a796883078580961343b_2);

#if _DEBUG_REFCOUNTS
            if (cache_frame_9662ba4a8a84a796883078580961343b_2 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_9662ba4a8a84a796883078580961343b_2 = MAKE_FUNCTION_FRAME(codeobj_9662ba4a8a84a796883078580961343b, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_9662ba4a8a84a796883078580961343b_2->m_type_description == NULL);
        frame_9662ba4a8a84a796883078580961343b_2 = cache_frame_9662ba4a8a84a796883078580961343b_2;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_9662ba4a8a84a796883078580961343b_2);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_9662ba4a8a84a796883078580961343b_2) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_1:;
        {
            PyObject *tmp_next_source_1;
            PyObject *tmp_assign_source_8;
            CHECK_OBJECT(tmp_listcomp_1__$0);
            tmp_next_source_1 = tmp_listcomp_1__$0;
            tmp_assign_source_8 = ITERATOR_NEXT(tmp_next_source_1);
            if (tmp_assign_source_8 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_1;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "oo";
                    exception_lineno = 1466;
                    goto try_except_handler_3;
                }
            }

            {
                PyObject *old = tmp_listcomp_1__iter_value_0;
                tmp_listcomp_1__iter_value_0 = tmp_assign_source_8;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_9;
            CHECK_OBJECT(tmp_listcomp_1__iter_value_0);
            tmp_assign_source_9 = tmp_listcomp_1__iter_value_0;
            {
                PyObject *old = outline_0_var_k;
                outline_0_var_k = tmp_assign_source_9;
                Py_INCREF(outline_0_var_k);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_1;
            PyObject *tmp_append_value_1;
            PyObject *tmp_expression_value_10;
            PyObject *tmp_subscript_value_3;
            CHECK_OBJECT(tmp_listcomp_1__contraction);
            tmp_append_list_1 = tmp_listcomp_1__contraction;
            if (var_members == NULL) {

                FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[206]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 1466;
                type_description_2 = "oo";
                goto try_except_handler_3;
            }

            tmp_expression_value_10 = var_members;
            CHECK_OBJECT(outline_0_var_k);
            tmp_subscript_value_3 = outline_0_var_k;
            tmp_append_value_1 = LOOKUP_SUBSCRIPT(tmp_expression_value_10, tmp_subscript_value_3);
            if (tmp_append_value_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1466;
                type_description_2 = "oo";
                goto try_except_handler_3;
            }
            assert(PyList_Check(tmp_append_list_1));
            tmp_result = LIST_APPEND1(tmp_append_list_1, tmp_append_value_1);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1466;
                type_description_2 = "oo";
                goto try_except_handler_3;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1466;
            type_description_2 = "oo";
            goto try_except_handler_3;
        }
        goto loop_start_1;
        loop_end_1:;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        tmp_assign_source_5 = tmp_listcomp_1__contraction;
        Py_INCREF(tmp_assign_source_5);
        goto try_return_handler_3;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_3:;
        CHECK_OBJECT(tmp_listcomp_1__$0);
        Py_DECREF(tmp_listcomp_1__$0);
        tmp_listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        Py_DECREF(tmp_listcomp_1__contraction);
        tmp_listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_listcomp_1__iter_value_0);
        tmp_listcomp_1__iter_value_0 = NULL;
        goto frame_return_exit_2;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_1__$0);
        Py_DECREF(tmp_listcomp_1__$0);
        tmp_listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        Py_DECREF(tmp_listcomp_1__contraction);
        tmp_listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_listcomp_1__iter_value_0);
        tmp_listcomp_1__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto frame_exception_exit_2;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_9662ba4a8a84a796883078580961343b_2);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_1;

        frame_return_exit_2:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_9662ba4a8a84a796883078580961343b_2);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_2;

        frame_exception_exit_2:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_9662ba4a8a84a796883078580961343b_2);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_9662ba4a8a84a796883078580961343b_2, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_9662ba4a8a84a796883078580961343b_2->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_9662ba4a8a84a796883078580961343b_2, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_9662ba4a8a84a796883078580961343b_2,
            type_description_2,
            outline_0_var_k,
            var_members
        );


        // Release cached frame if used for exception.
        if (frame_9662ba4a8a84a796883078580961343b_2 == cache_frame_9662ba4a8a84a796883078580961343b_2) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_9662ba4a8a84a796883078580961343b_2);
            cache_frame_9662ba4a8a84a796883078580961343b_2 = NULL;
        }

        assertFrameObject(frame_9662ba4a8a84a796883078580961343b_2);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_1;

        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_1:;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
        skip_nested_handling_1:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        Py_XDECREF(outline_0_var_k);
        outline_0_var_k = NULL;
        goto outline_result_1;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_0_var_k);
        outline_0_var_k = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto outline_exception_1;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_1:;
        exception_lineno = 1466;
        goto frame_exception_exit_1;
        outline_result_1:;
        assert(var_objects == NULL);
        var_objects = tmp_assign_source_5;
    }
    {
        PyObject *tmp_tuple_element_1;
        CHECK_OBJECT(var_values);
        tmp_tuple_element_1 = var_values;
        tmp_return_value = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_return_value, 0, tmp_tuple_element_1);
        CHECK_OBJECT(var_objects);
        tmp_tuple_element_1 = var_objects;
        PyTuple_SET_ITEM0(tmp_return_value, 1, tmp_tuple_element_1);
        goto frame_return_exit_1;
    }
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_value_2 = Py_None;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[167], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1469;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_tuple_element_2;
        CHECK_OBJECT(par_enums);
        tmp_tuple_element_2 = par_enums;
        tmp_return_value = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_return_value, 0, tmp_tuple_element_2);
        CHECK_OBJECT(par_enums);
        tmp_tuple_element_2 = par_enums;
        PyTuple_SET_ITEM0(tmp_return_value, 1, tmp_tuple_element_2);
        goto frame_return_exit_1;
    }
    branch_end_2:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_6d57f6b83eb64ab1a32aecd7155a9b5b);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_2;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_6d57f6b83eb64ab1a32aecd7155a9b5b);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_6d57f6b83eb64ab1a32aecd7155a9b5b);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_6d57f6b83eb64ab1a32aecd7155a9b5b, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_6d57f6b83eb64ab1a32aecd7155a9b5b->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_6d57f6b83eb64ab1a32aecd7155a9b5b, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_6d57f6b83eb64ab1a32aecd7155a9b5b,
        type_description_1,
        par_self,
        par_enums,
        par_kw,
        var_members,
        var_values,
        var_objects
    );


    // Release cached frame if used for exception.
    if (frame_6d57f6b83eb64ab1a32aecd7155a9b5b == cache_frame_6d57f6b83eb64ab1a32aecd7155a9b5b) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_6d57f6b83eb64ab1a32aecd7155a9b5b);
        cache_frame_6d57f6b83eb64ab1a32aecd7155a9b5b = NULL;
    }

    assertFrameObject(frame_6d57f6b83eb64ab1a32aecd7155a9b5b);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_2:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_enums);
    Py_DECREF(par_enums);
    par_enums = NULL;
    Py_XDECREF(var_members);
    var_members = NULL;
    Py_XDECREF(var_values);
    var_values = NULL;
    Py_XDECREF(var_objects);
    var_objects = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_enums);
    par_enums = NULL;
    Py_XDECREF(var_members);
    var_members = NULL;
    Py_XDECREF(var_values);
    var_values = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__70__setup_for_values(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_values = python_pars[1];
    PyObject *par_objects = python_pars[2];
    PyObject *par_kw = python_pars[3];
    PyObject *outline_0_var_value = NULL;
    PyObject *tmp_listcomp_1__$0 = NULL;
    PyObject *tmp_listcomp_1__contraction = NULL;
    PyObject *tmp_listcomp_1__iter_value_0 = NULL;
    struct Nuitka_FrameObject *frame_16508b3962b4efa5d9d1c826e6716a18;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    struct Nuitka_FrameObject *frame_b7d202c1addf4327c46048ea2c7e0c61_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    static struct Nuitka_FrameObject *cache_frame_b7d202c1addf4327c46048ea2c7e0c61_2 = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    static struct Nuitka_FrameObject *cache_frame_16508b3962b4efa5d9d1c826e6716a18 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_16508b3962b4efa5d9d1c826e6716a18)) {
        Py_XDECREF(cache_frame_16508b3962b4efa5d9d1c826e6716a18);

#if _DEBUG_REFCOUNTS
        if (cache_frame_16508b3962b4efa5d9d1c826e6716a18 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_16508b3962b4efa5d9d1c826e6716a18 = MAKE_FUNCTION_FRAME(codeobj_16508b3962b4efa5d9d1c826e6716a18, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_16508b3962b4efa5d9d1c826e6716a18->m_type_description == NULL);
    frame_16508b3962b4efa5d9d1c826e6716a18 = cache_frame_16508b3962b4efa5d9d1c826e6716a18;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_16508b3962b4efa5d9d1c826e6716a18);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_16508b3962b4efa5d9d1c826e6716a18) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_list_arg_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_values);
        tmp_list_arg_1 = par_values;
        tmp_assattr_value_1 = MAKE_LIST(tmp_list_arg_1);
        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1473;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[168], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1473;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_dict_seq_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_called_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_assattr_target_2;
        tmp_called_value_1 = (PyObject *)&PyZip_Type;
        tmp_called_value_2 = (PyObject *)&PyReversed_Type;
        CHECK_OBJECT(par_objects);
        tmp_args_element_value_2 = par_objects;
        frame_16508b3962b4efa5d9d1c826e6716a18->m_frame.f_lineno = 1475;
        tmp_args_element_value_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_2, tmp_args_element_value_2);
        if (tmp_args_element_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1475;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_3 = (PyObject *)&PyReversed_Type;
        CHECK_OBJECT(par_values);
        tmp_args_element_value_4 = par_values;
        frame_16508b3962b4efa5d9d1c826e6716a18->m_frame.f_lineno = 1475;
        tmp_args_element_value_3 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_3, tmp_args_element_value_4);
        if (tmp_args_element_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_1);

            exception_lineno = 1475;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_16508b3962b4efa5d9d1c826e6716a18->m_frame.f_lineno = 1475;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_3};
            tmp_dict_seq_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_args_element_value_1);
        Py_DECREF(tmp_args_element_value_3);
        if (tmp_dict_seq_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1475;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_assattr_value_2 = TO_DICT(tmp_dict_seq_1, NULL);
        Py_DECREF(tmp_dict_seq_1);
        if (tmp_assattr_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1475;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[186], tmp_assattr_value_2);
        Py_DECREF(tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1475;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_3;
        PyObject *tmp_dict_seq_2;
        PyObject *tmp_called_value_4;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_args_element_value_6;
        PyObject *tmp_assattr_target_3;
        tmp_called_value_4 = (PyObject *)&PyZip_Type;
        CHECK_OBJECT(par_values);
        tmp_args_element_value_5 = par_values;
        CHECK_OBJECT(par_objects);
        tmp_args_element_value_6 = par_objects;
        frame_16508b3962b4efa5d9d1c826e6716a18->m_frame.f_lineno = 1477;
        {
            PyObject *call_args[] = {tmp_args_element_value_5, tmp_args_element_value_6};
            tmp_dict_seq_2 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_4, call_args);
        }

        if (tmp_dict_seq_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1477;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_assattr_value_3 = TO_DICT(tmp_dict_seq_2, NULL);
        Py_DECREF(tmp_dict_seq_2);
        if (tmp_assattr_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1477;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_3, mod_consts[187], tmp_assattr_value_3);
        Py_DECREF(tmp_assattr_value_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1477;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_value_5;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_7;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_expression_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[186]);
        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1479;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[207]);
        Py_DECREF(tmp_expression_value_1);
        if (tmp_called_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1479;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_1;
            PyObject *tmp_iter_arg_1;
            CHECK_OBJECT(par_values);
            tmp_iter_arg_1 = par_values;
            tmp_assign_source_1 = MAKE_ITERATOR(tmp_iter_arg_1);
            if (tmp_assign_source_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1480;
                type_description_1 = "oooo";
                goto try_except_handler_1;
            }
            assert(tmp_listcomp_1__$0 == NULL);
            tmp_listcomp_1__$0 = tmp_assign_source_1;
        }
        {
            PyObject *tmp_assign_source_2;
            tmp_assign_source_2 = PyList_New(0);
            assert(tmp_listcomp_1__contraction == NULL);
            tmp_listcomp_1__contraction = tmp_assign_source_2;
        }
        if (isFrameUnusable(cache_frame_b7d202c1addf4327c46048ea2c7e0c61_2)) {
            Py_XDECREF(cache_frame_b7d202c1addf4327c46048ea2c7e0c61_2);

#if _DEBUG_REFCOUNTS
            if (cache_frame_b7d202c1addf4327c46048ea2c7e0c61_2 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_b7d202c1addf4327c46048ea2c7e0c61_2 = MAKE_FUNCTION_FRAME(codeobj_b7d202c1addf4327c46048ea2c7e0c61, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_b7d202c1addf4327c46048ea2c7e0c61_2->m_type_description == NULL);
        frame_b7d202c1addf4327c46048ea2c7e0c61_2 = cache_frame_b7d202c1addf4327c46048ea2c7e0c61_2;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_b7d202c1addf4327c46048ea2c7e0c61_2);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_b7d202c1addf4327c46048ea2c7e0c61_2) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_1:;
        {
            PyObject *tmp_next_source_1;
            PyObject *tmp_assign_source_3;
            CHECK_OBJECT(tmp_listcomp_1__$0);
            tmp_next_source_1 = tmp_listcomp_1__$0;
            tmp_assign_source_3 = ITERATOR_NEXT(tmp_next_source_1);
            if (tmp_assign_source_3 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_1;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "oo";
                    exception_lineno = 1480;
                    goto try_except_handler_2;
                }
            }

            {
                PyObject *old = tmp_listcomp_1__iter_value_0;
                tmp_listcomp_1__iter_value_0 = tmp_assign_source_3;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_4;
            CHECK_OBJECT(tmp_listcomp_1__iter_value_0);
            tmp_assign_source_4 = tmp_listcomp_1__iter_value_0;
            {
                PyObject *old = outline_0_var_value;
                outline_0_var_value = tmp_assign_source_4;
                Py_INCREF(outline_0_var_value);
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_append_list_1;
            PyObject *tmp_append_value_1;
            PyObject *tmp_tuple_element_1;
            CHECK_OBJECT(tmp_listcomp_1__contraction);
            tmp_append_list_1 = tmp_listcomp_1__contraction;
            CHECK_OBJECT(outline_0_var_value);
            tmp_tuple_element_1 = outline_0_var_value;
            tmp_append_value_1 = PyTuple_New(2);
            {
                PyObject *tmp_expression_value_3;
                PyObject *tmp_expression_value_4;
                PyObject *tmp_subscript_value_1;
                PyObject *tmp_expression_value_5;
                PyObject *tmp_expression_value_6;
                PyObject *tmp_subscript_value_2;
                PyTuple_SET_ITEM0(tmp_append_value_1, 0, tmp_tuple_element_1);
                if (par_self == NULL) {

                    FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[51]);
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                    CHAIN_EXCEPTION(exception_value);

                    exception_lineno = 1481;
                    type_description_2 = "oo";
                    goto tuple_build_exception_1;
                }

                tmp_expression_value_4 = par_self;
                tmp_expression_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[186]);
                if (tmp_expression_value_3 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1481;
                    type_description_2 = "oo";
                    goto tuple_build_exception_1;
                }
                if (par_self == NULL) {
                    Py_DECREF(tmp_expression_value_3);
                    FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[51]);
                    exception_tb = NULL;
                    NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                    CHAIN_EXCEPTION(exception_value);

                    exception_lineno = 1481;
                    type_description_2 = "oo";
                    goto tuple_build_exception_1;
                }

                tmp_expression_value_6 = par_self;
                tmp_expression_value_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[187]);
                if (tmp_expression_value_5 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_expression_value_3);

                    exception_lineno = 1481;
                    type_description_2 = "oo";
                    goto tuple_build_exception_1;
                }
                CHECK_OBJECT(outline_0_var_value);
                tmp_subscript_value_2 = outline_0_var_value;
                tmp_subscript_value_1 = LOOKUP_SUBSCRIPT(tmp_expression_value_5, tmp_subscript_value_2);
                Py_DECREF(tmp_expression_value_5);
                if (tmp_subscript_value_1 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    Py_DECREF(tmp_expression_value_3);

                    exception_lineno = 1481;
                    type_description_2 = "oo";
                    goto tuple_build_exception_1;
                }
                tmp_tuple_element_1 = LOOKUP_SUBSCRIPT(tmp_expression_value_3, tmp_subscript_value_1);
                Py_DECREF(tmp_expression_value_3);
                Py_DECREF(tmp_subscript_value_1);
                if (tmp_tuple_element_1 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1481;
                    type_description_2 = "oo";
                    goto tuple_build_exception_1;
                }
                PyTuple_SET_ITEM(tmp_append_value_1, 1, tmp_tuple_element_1);
            }
            goto tuple_build_noexception_1;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_1:;
            Py_DECREF(tmp_append_value_1);
            goto try_except_handler_2;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_1:;
            assert(PyList_Check(tmp_append_list_1));
            tmp_result = LIST_APPEND1(tmp_append_list_1, tmp_append_value_1);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1480;
                type_description_2 = "oo";
                goto try_except_handler_2;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1480;
            type_description_2 = "oo";
            goto try_except_handler_2;
        }
        goto loop_start_1;
        loop_end_1:;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        tmp_args_element_value_7 = tmp_listcomp_1__contraction;
        Py_INCREF(tmp_args_element_value_7);
        goto try_return_handler_2;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        CHECK_OBJECT(tmp_listcomp_1__$0);
        Py_DECREF(tmp_listcomp_1__$0);
        tmp_listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        Py_DECREF(tmp_listcomp_1__contraction);
        tmp_listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_listcomp_1__iter_value_0);
        tmp_listcomp_1__iter_value_0 = NULL;
        goto frame_return_exit_1;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_1__$0);
        Py_DECREF(tmp_listcomp_1__$0);
        tmp_listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        Py_DECREF(tmp_listcomp_1__contraction);
        tmp_listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_listcomp_1__iter_value_0);
        tmp_listcomp_1__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto frame_exception_exit_2;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_b7d202c1addf4327c46048ea2c7e0c61_2);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_1;

        frame_return_exit_1:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_b7d202c1addf4327c46048ea2c7e0c61_2);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_1;

        frame_exception_exit_2:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_b7d202c1addf4327c46048ea2c7e0c61_2);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_b7d202c1addf4327c46048ea2c7e0c61_2, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_b7d202c1addf4327c46048ea2c7e0c61_2->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_b7d202c1addf4327c46048ea2c7e0c61_2, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_b7d202c1addf4327c46048ea2c7e0c61_2,
            type_description_2,
            outline_0_var_value,
            par_self
        );


        // Release cached frame if used for exception.
        if (frame_b7d202c1addf4327c46048ea2c7e0c61_2 == cache_frame_b7d202c1addf4327c46048ea2c7e0c61_2) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_b7d202c1addf4327c46048ea2c7e0c61_2);
            cache_frame_b7d202c1addf4327c46048ea2c7e0c61_2 = NULL;
        }

        assertFrameObject(frame_b7d202c1addf4327c46048ea2c7e0c61_2);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_1;

        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_1:;
        type_description_1 = "oooo";
        goto try_except_handler_1;
        skip_nested_handling_1:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_1:;
        Py_XDECREF(outline_0_var_value);
        outline_0_var_value = NULL;
        goto outline_result_1;
        // Exception handler code:
        try_except_handler_1:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_0_var_value);
        outline_0_var_value = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto outline_exception_1;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_1:;
        exception_lineno = 1480;
        goto frame_exception_exit_1;
        outline_result_1:;
        frame_16508b3962b4efa5d9d1c826e6716a18->m_frame.f_lineno = 1479;
        tmp_call_result_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_5, tmp_args_element_value_7);
        Py_DECREF(tmp_called_value_5);
        Py_DECREF(tmp_args_element_value_7);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1479;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_16508b3962b4efa5d9d1c826e6716a18);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_2;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_16508b3962b4efa5d9d1c826e6716a18);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_16508b3962b4efa5d9d1c826e6716a18, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_16508b3962b4efa5d9d1c826e6716a18->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_16508b3962b4efa5d9d1c826e6716a18, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_16508b3962b4efa5d9d1c826e6716a18,
        type_description_1,
        par_self,
        par_values,
        par_objects,
        par_kw
    );


    // Release cached frame if used for exception.
    if (frame_16508b3962b4efa5d9d1c826e6716a18 == cache_frame_16508b3962b4efa5d9d1c826e6716a18) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_16508b3962b4efa5d9d1c826e6716a18);
        cache_frame_16508b3962b4efa5d9d1c826e6716a18 = NULL;
    }

    assertFrameObject(frame_16508b3962b4efa5d9d1c826e6716a18);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_2:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_values);
    Py_DECREF(par_values);
    CHECK_OBJECT(par_objects);
    Py_DECREF(par_objects);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_values);
    Py_DECREF(par_values);
    CHECK_OBJECT(par_objects);
    Py_DECREF(par_objects);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__71_sort_key_function(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_cc5d7818e1d16c45d2492e45873c6db2;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_cc5d7818e1d16c45d2492e45873c6db2 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_cc5d7818e1d16c45d2492e45873c6db2)) {
        Py_XDECREF(cache_frame_cc5d7818e1d16c45d2492e45873c6db2);

#if _DEBUG_REFCOUNTS
        if (cache_frame_cc5d7818e1d16c45d2492e45873c6db2 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_cc5d7818e1d16c45d2492e45873c6db2 = MAKE_FUNCTION_FRAME(codeobj_cc5d7818e1d16c45d2492e45873c6db2, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_cc5d7818e1d16c45d2492e45873c6db2->m_type_description == NULL);
    frame_cc5d7818e1d16c45d2492e45873c6db2 = cache_frame_cc5d7818e1d16c45d2492e45873c6db2;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_cc5d7818e1d16c45d2492e45873c6db2);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_cc5d7818e1d16c45d2492e45873c6db2) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[177]);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1488;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[176]);

        if (unlikely(tmp_cmp_expr_right_1 == NULL)) {
            tmp_cmp_expr_right_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[176]);
        }

        if (tmp_cmp_expr_right_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_cmp_expr_left_1);

            exception_lineno = 1488;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        Py_DECREF(tmp_cmp_expr_left_1);
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[208]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1489;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[177]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1491;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_cc5d7818e1d16c45d2492e45873c6db2);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_cc5d7818e1d16c45d2492e45873c6db2);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_cc5d7818e1d16c45d2492e45873c6db2);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_cc5d7818e1d16c45d2492e45873c6db2, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_cc5d7818e1d16c45d2492e45873c6db2->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_cc5d7818e1d16c45d2492e45873c6db2, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_cc5d7818e1d16c45d2492e45873c6db2,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_cc5d7818e1d16c45d2492e45873c6db2 == cache_frame_cc5d7818e1d16c45d2492e45873c6db2) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_cc5d7818e1d16c45d2492e45873c6db2);
        cache_frame_cc5d7818e1d16c45d2492e45873c6db2 = NULL;
    }

    assertFrameObject(frame_cc5d7818e1d16c45d2492e45873c6db2);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__72_native(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_51f690878161021e112c7a30b155f739;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_51f690878161021e112c7a30b155f739 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_51f690878161021e112c7a30b155f739)) {
        Py_XDECREF(cache_frame_51f690878161021e112c7a30b155f739);

#if _DEBUG_REFCOUNTS
        if (cache_frame_51f690878161021e112c7a30b155f739 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_51f690878161021e112c7a30b155f739 = MAKE_FUNCTION_FRAME(codeobj_51f690878161021e112c7a30b155f739, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_51f690878161021e112c7a30b155f739->m_type_description == NULL);
    frame_51f690878161021e112c7a30b155f739 = cache_frame_51f690878161021e112c7a30b155f739;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_51f690878161021e112c7a30b155f739);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_51f690878161021e112c7a30b155f739) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[170]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1495;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_51f690878161021e112c7a30b155f739);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_51f690878161021e112c7a30b155f739);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_51f690878161021e112c7a30b155f739);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_51f690878161021e112c7a30b155f739, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_51f690878161021e112c7a30b155f739->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_51f690878161021e112c7a30b155f739, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_51f690878161021e112c7a30b155f739,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_51f690878161021e112c7a30b155f739 == cache_frame_51f690878161021e112c7a30b155f739) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_51f690878161021e112c7a30b155f739);
        cache_frame_51f690878161021e112c7a30b155f739 = NULL;
    }

    assertFrameObject(frame_51f690878161021e112c7a30b155f739);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__73__db_value_for_elem(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_elem = python_pars[1];
    PyObject *var_err = NULL;
    struct Nuitka_FrameObject *frame_32af4388d65bb38b854f470572060b5c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_res;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    bool tmp_result;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_32af4388d65bb38b854f470572060b5c = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_32af4388d65bb38b854f470572060b5c)) {
        Py_XDECREF(cache_frame_32af4388d65bb38b854f470572060b5c);

#if _DEBUG_REFCOUNTS
        if (cache_frame_32af4388d65bb38b854f470572060b5c == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_32af4388d65bb38b854f470572060b5c = MAKE_FUNCTION_FRAME(codeobj_32af4388d65bb38b854f470572060b5c, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_32af4388d65bb38b854f470572060b5c->m_type_description == NULL);
    frame_32af4388d65bb38b854f470572060b5c = cache_frame_32af4388d65bb38b854f470572060b5c;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_32af4388d65bb38b854f470572060b5c);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_32af4388d65bb38b854f470572060b5c) == 2); // Frame stack

    // Framed code:
    // Tried code:
    {
        PyObject *tmp_expression_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_subscript_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_expression_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[186]);
        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1499;
            type_description_1 = "ooo";
            goto try_except_handler_1;
        }
        CHECK_OBJECT(par_elem);
        tmp_subscript_value_1 = par_elem;
        tmp_return_value = LOOKUP_SUBSCRIPT(tmp_expression_value_1, tmp_subscript_value_1);
        Py_DECREF(tmp_expression_value_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1499;
            type_description_1 = "ooo";
            goto try_except_handler_1;
        }
        goto frame_return_exit_1;
    }
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 1.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_1, &exception_preserved_value_1, &exception_preserved_tb_1);

    if (exception_keeper_tb_1 == NULL) {
        exception_keeper_tb_1 = MAKE_TRACEBACK(frame_32af4388d65bb38b854f470572060b5c, exception_keeper_lineno_1);
    } else if (exception_keeper_lineno_1 != 0) {
        exception_keeper_tb_1 = ADD_TRACEBACK(exception_keeper_tb_1, frame_32af4388d65bb38b854f470572060b5c, exception_keeper_lineno_1);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_1, exception_keeper_tb_1);
    PUBLISH_EXCEPTION(&exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1);
    // Tried code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        tmp_cmp_expr_left_1 = EXC_TYPE(PyThreadState_GET());
        tmp_cmp_expr_right_1 = PyExc_KeyError;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
        assert(!(tmp_res == -1));
        tmp_condition_result_1 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = EXC_VALUE(PyThreadState_GET());
        assert(var_err == NULL);
        Py_INCREF(tmp_assign_source_1);
        var_err = tmp_assign_source_1;
    }
    // Tried code:
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_expression_value_4;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_operand_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[183]);
        if (tmp_operand_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1509;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        Py_DECREF(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1509;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        tmp_and_left_value_1 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(par_elem);
        tmp_isinstance_inst_1 = par_elem;
        tmp_expression_value_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[209]);

        if (unlikely(tmp_expression_value_4 == NULL)) {
            tmp_expression_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[209]);
        }

        if (tmp_expression_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1510;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[118]);
        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1510;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1509;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        tmp_and_right_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_2 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    CHECK_OBJECT(par_elem);
    tmp_return_value = par_elem;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_3;
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_call_result_1;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_make_exception_arg_1;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_kw_call_dict_value_0_1;
        tmp_expression_value_5 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_5 == NULL)) {
            tmp_expression_value_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
        }

        if (tmp_expression_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1514;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[210]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1514;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        tmp_left_value_1 = mod_consts[211];
        CHECK_OBJECT(par_elem);
        tmp_tuple_element_1 = par_elem;
        tmp_right_value_1 = PyTuple_New(3);
        {
            PyObject *tmp_expression_value_6;
            PyObject *tmp_called_value_2;
            PyObject *tmp_expression_value_7;
            PyObject *tmp_args_element_value_1;
            PyObject *tmp_expression_value_8;
            PyTuple_SET_ITEM0(tmp_right_value_1, 0, tmp_tuple_element_1);
            CHECK_OBJECT(par_self);
            tmp_expression_value_6 = par_self;
            tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[93]);
            if (tmp_tuple_element_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1520;
                type_description_1 = "ooo";
                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_right_value_1, 1, tmp_tuple_element_1);
            tmp_expression_value_7 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[212]);

            if (unlikely(tmp_expression_value_7 == NULL)) {
                tmp_expression_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[212]);
            }

            if (tmp_expression_value_7 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1521;
                type_description_1 = "ooo";
                goto tuple_build_exception_1;
            }
            tmp_called_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_7, mod_consts[213]);
            if (tmp_called_value_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1521;
                type_description_1 = "ooo";
                goto tuple_build_exception_1;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_8 = par_self;
            tmp_args_element_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_8, mod_consts[168]);
            if (tmp_args_element_value_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_2);

                exception_lineno = 1521;
                type_description_1 = "ooo";
                goto tuple_build_exception_1;
            }
            frame_32af4388d65bb38b854f470572060b5c->m_frame.f_lineno = 1521;
            tmp_tuple_element_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_2, tmp_args_element_value_1);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_args_element_value_1);
            if (tmp_tuple_element_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1521;
                type_description_1 = "ooo";
                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_right_value_1, 2, tmp_tuple_element_1);
        }
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_right_value_1);
        goto try_except_handler_3;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        tmp_make_exception_arg_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_1, tmp_right_value_1);
        Py_DECREF(tmp_right_value_1);
        if (tmp_make_exception_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1518;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        frame_32af4388d65bb38b854f470572060b5c->m_frame.f_lineno = 1515;
        tmp_kw_call_arg_value_0_1 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_LookupError, tmp_make_exception_arg_1);
        Py_DECREF(tmp_make_exception_arg_1);
        assert(!(tmp_kw_call_arg_value_0_1 == NULL));
        CHECK_OBJECT(var_err);
        tmp_kw_call_dict_value_0_1 = var_err;
        frame_32af4388d65bb38b854f470572060b5c->m_frame.f_lineno = 1514;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1};
            PyObject *kw_values[1] = {tmp_kw_call_dict_value_0_1};
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tmp_called_value_1, args, kw_values, mod_consts[214]);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_kw_call_arg_value_0_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1514;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        Py_DECREF(tmp_call_result_1);
    }
    branch_end_2:;
    goto try_end_1;
    // Return handler code:
    try_return_handler_3:;
    Py_XDECREF(var_err);
    var_err = NULL;

    goto try_return_handler_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_err);
    var_err = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    Py_XDECREF(var_err);
    var_err = NULL;

    goto branch_end_1;
    branch_no_1:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 1498;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_32af4388d65bb38b854f470572060b5c->m_frame) frame_32af4388d65bb38b854f470572060b5c->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "ooo";
    goto try_except_handler_2;
    branch_end_1:;
    goto try_end_2;
    // Return handler code:
    try_return_handler_2:;
    // Restore previous exception id 1.
    SET_CURRENT_EXCEPTION(exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1);

    goto frame_return_exit_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 1.
    SET_CURRENT_EXCEPTION(exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1);

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    // Restore previous exception id 1.
    SET_CURRENT_EXCEPTION(exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1);

    goto try_end_3;
    NUITKA_CANNOT_GET_HERE("exception handler codes exits in all cases");
    return NULL;
    // End of try:
    try_end_3:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_32af4388d65bb38b854f470572060b5c);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_32af4388d65bb38b854f470572060b5c);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_32af4388d65bb38b854f470572060b5c);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_32af4388d65bb38b854f470572060b5c, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_32af4388d65bb38b854f470572060b5c->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_32af4388d65bb38b854f470572060b5c, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_32af4388d65bb38b854f470572060b5c,
        type_description_1,
        par_self,
        par_elem,
        var_err
    );


    // Release cached frame if used for exception.
    if (frame_32af4388d65bb38b854f470572060b5c == cache_frame_32af4388d65bb38b854f470572060b5c) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_32af4388d65bb38b854f470572060b5c);
        cache_frame_32af4388d65bb38b854f470572060b5c = NULL;
    }

    assertFrameObject(frame_32af4388d65bb38b854f470572060b5c);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__74__adapt_expression(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_op = python_pars[1];
    PyObject *par_other_comparator = python_pars[2];
    PyObject *var_typ = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_51110ecc8f24b34da8af942e7e7c2f3f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    static struct Nuitka_FrameObject *cache_frame_51110ecc8f24b34da8af942e7e7c2f3f = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_51110ecc8f24b34da8af942e7e7c2f3f)) {
        Py_XDECREF(cache_frame_51110ecc8f24b34da8af942e7e7c2f3f);

#if _DEBUG_REFCOUNTS
        if (cache_frame_51110ecc8f24b34da8af942e7e7c2f3f == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_51110ecc8f24b34da8af942e7e7c2f3f = MAKE_FUNCTION_FRAME(codeobj_51110ecc8f24b34da8af942e7e7c2f3f, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_51110ecc8f24b34da8af942e7e7c2f3f->m_type_description == NULL);
    frame_51110ecc8f24b34da8af942e7e7c2f3f = cache_frame_51110ecc8f24b34da8af942e7e7c2f3f;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_51110ecc8f24b34da8af942e7e7c2f3f);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_51110ecc8f24b34da8af942e7e7c2f3f) == 2); // Frame stack

    // Framed code:
    // Tried code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[188]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[188]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1529;
            type_description_1 = "ooooN";
            goto try_except_handler_2;
        }
        tmp_type_arg_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[9]);
        if (tmp_type_arg_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1529;
            type_description_1 = "ooooN";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(par_self);
        tmp_object_arg_value_1 = par_self;
        tmp_called_instance_1 = BUILTIN_SUPER2(tmp_type_arg_value_1, tmp_object_arg_value_1);
        Py_DECREF(tmp_type_arg_value_1);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1529;
            type_description_1 = "ooooN";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(par_op);
        tmp_args_element_value_1 = par_op;
        CHECK_OBJECT(par_other_comparator);
        tmp_args_element_value_2 = par_other_comparator;
        frame_51110ecc8f24b34da8af942e7e7c2f3f->m_frame.f_lineno = 1529;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_iter_arg_1 = CALL_METHOD_WITH_ARGS2(
                tmp_called_instance_1,
                mod_consts[13],
                call_args
            );
        }

        Py_DECREF(tmp_called_instance_1);
        if (tmp_iter_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1529;
            type_description_1 = "ooooN";
            goto try_except_handler_2;
        }
        tmp_assign_source_1 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_1);
        Py_DECREF(tmp_iter_arg_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1529;
            type_description_1 = "ooooN";
            goto try_except_handler_2;
        }
        assert(tmp_tuple_unpack_1__source_iter == NULL);
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_1;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_2 = UNPACK_NEXT(tmp_unpack_1, 0, 2);
        if (tmp_assign_source_2 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooN";
            exception_lineno = 1529;
            goto try_except_handler_3;
        }
        assert(tmp_tuple_unpack_1__element_1 == NULL);
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_3 = UNPACK_NEXT(tmp_unpack_2, 1, 2);
        if (tmp_assign_source_3 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooN";
            exception_lineno = 1529;
            goto try_except_handler_3;
        }
        assert(tmp_tuple_unpack_1__element_2 == NULL);
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_3;
    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "ooooN";
                    exception_lineno = 1529;
                    goto try_except_handler_3;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[179];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "ooooN";
            exception_lineno = 1529;
            goto try_except_handler_3;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    {
        PyObject *tmp_assign_source_4;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_1);
        tmp_assign_source_4 = tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = par_op;
            assert(old != NULL);
            par_op = tmp_assign_source_4;
            Py_INCREF(par_op);
            Py_DECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_2);
        tmp_assign_source_5 = tmp_tuple_unpack_1__element_2;
        assert(var_typ == NULL);
        Py_INCREF(tmp_assign_source_5);
        var_typ = tmp_assign_source_5;
    }
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(par_op);
        tmp_cmp_expr_left_1 = par_op;
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1532;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[11]);
        if (tmp_cmp_expr_right_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1532;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        Py_DECREF(tmp_cmp_expr_right_1);
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_called_value_1;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_kw_call_dict_value_0_1;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_expression_value_6;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[215]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[215]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1533;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_4 = par_self;
        tmp_expression_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[0]);
        if (tmp_expression_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1534;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        tmp_kw_call_arg_value_0_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[22]);
        Py_DECREF(tmp_expression_value_3);
        if (tmp_kw_call_arg_value_0_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1534;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_6 = par_self;
        tmp_expression_value_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[0]);
        if (tmp_expression_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_kw_call_arg_value_0_1);

            exception_lineno = 1534;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        tmp_kw_call_dict_value_0_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[24]);
        Py_DECREF(tmp_expression_value_5);
        if (tmp_kw_call_dict_value_0_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_kw_call_arg_value_0_1);

            exception_lineno = 1534;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        frame_51110ecc8f24b34da8af942e7e7c2f3f->m_frame.f_lineno = 1533;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1};
            PyObject *kw_values[1] = {tmp_kw_call_dict_value_0_1};
            tmp_assign_source_6 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tmp_called_value_1, args, kw_values, mod_consts[216]);
        }

        Py_DECREF(tmp_kw_call_arg_value_0_1);
        Py_DECREF(tmp_kw_call_dict_value_0_1);
        if (tmp_assign_source_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1533;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_typ;
            assert(old != NULL);
            var_typ = tmp_assign_source_6;
            Py_DECREF(old);
        }

    }
    branch_no_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_51110ecc8f24b34da8af942e7e7c2f3f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_51110ecc8f24b34da8af942e7e7c2f3f);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_51110ecc8f24b34da8af942e7e7c2f3f, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_51110ecc8f24b34da8af942e7e7c2f3f->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_51110ecc8f24b34da8af942e7e7c2f3f, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_51110ecc8f24b34da8af942e7e7c2f3f,
        type_description_1,
        par_self,
        par_op,
        par_other_comparator,
        var_typ,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_51110ecc8f24b34da8af942e7e7c2f3f == cache_frame_51110ecc8f24b34da8af942e7e7c2f3f) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_51110ecc8f24b34da8af942e7e7c2f3f);
        cache_frame_51110ecc8f24b34da8af942e7e7c2f3f = NULL;
    }

    assertFrameObject(frame_51110ecc8f24b34da8af942e7e7c2f3f);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    {
        PyObject *tmp_tuple_element_1;
        CHECK_OBJECT(par_op);
        tmp_tuple_element_1 = par_op;
        tmp_return_value = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_return_value, 0, tmp_tuple_element_1);
        CHECK_OBJECT(var_typ);
        tmp_tuple_element_1 = var_typ;
        PyTuple_SET_ITEM0(tmp_return_value, 1, tmp_tuple_element_1);
        goto try_return_handler_1;
    }
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_op);
    Py_DECREF(par_op);
    par_op = NULL;
    CHECK_OBJECT(var_typ);
    Py_DECREF(var_typ);
    var_typ = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_op);
    par_op = NULL;
    Py_XDECREF(var_typ);
    var_typ = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_other_comparator);
    Py_DECREF(par_other_comparator);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_other_comparator);
    Py_DECREF(par_other_comparator);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__75__object_value_for_elem(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_elem = python_pars[1];
    PyObject *var_err = NULL;
    struct Nuitka_FrameObject *frame_4f3b38aed9d46df7c5f79083f8b39a1c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_preserved_type_1;
    PyObject *exception_preserved_value_1;
    PyTracebackObject *exception_preserved_tb_1;
    int tmp_res;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    bool tmp_result;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_4f3b38aed9d46df7c5f79083f8b39a1c = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_4f3b38aed9d46df7c5f79083f8b39a1c)) {
        Py_XDECREF(cache_frame_4f3b38aed9d46df7c5f79083f8b39a1c);

#if _DEBUG_REFCOUNTS
        if (cache_frame_4f3b38aed9d46df7c5f79083f8b39a1c == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_4f3b38aed9d46df7c5f79083f8b39a1c = MAKE_FUNCTION_FRAME(codeobj_4f3b38aed9d46df7c5f79083f8b39a1c, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_4f3b38aed9d46df7c5f79083f8b39a1c->m_type_description == NULL);
    frame_4f3b38aed9d46df7c5f79083f8b39a1c = cache_frame_4f3b38aed9d46df7c5f79083f8b39a1c;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_4f3b38aed9d46df7c5f79083f8b39a1c);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_4f3b38aed9d46df7c5f79083f8b39a1c) == 2); // Frame stack

    // Framed code:
    // Tried code:
    {
        PyObject *tmp_expression_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_subscript_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_expression_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[187]);
        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1542;
            type_description_1 = "ooo";
            goto try_except_handler_1;
        }
        CHECK_OBJECT(par_elem);
        tmp_subscript_value_1 = par_elem;
        tmp_return_value = LOOKUP_SUBSCRIPT(tmp_expression_value_1, tmp_subscript_value_1);
        Py_DECREF(tmp_expression_value_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1542;
            type_description_1 = "ooo";
            goto try_except_handler_1;
        }
        goto frame_return_exit_1;
    }
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Preserve existing published exception id 1.
    GET_CURRENT_EXCEPTION(&exception_preserved_type_1, &exception_preserved_value_1, &exception_preserved_tb_1);

    if (exception_keeper_tb_1 == NULL) {
        exception_keeper_tb_1 = MAKE_TRACEBACK(frame_4f3b38aed9d46df7c5f79083f8b39a1c, exception_keeper_lineno_1);
    } else if (exception_keeper_lineno_1 != 0) {
        exception_keeper_tb_1 = ADD_TRACEBACK(exception_keeper_tb_1, frame_4f3b38aed9d46df7c5f79083f8b39a1c, exception_keeper_lineno_1);
    }

    NORMALIZE_EXCEPTION(&exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1);
    ATTACH_TRACEBACK_TO_EXCEPTION_VALUE(exception_keeper_value_1, exception_keeper_tb_1);
    PUBLISH_EXCEPTION(&exception_keeper_type_1, &exception_keeper_value_1, &exception_keeper_tb_1);
    // Tried code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        tmp_cmp_expr_left_1 = EXC_TYPE(PyThreadState_GET());
        tmp_cmp_expr_right_1 = PyExc_KeyError;
        tmp_res = EXCEPTION_MATCH_BOOL(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
        assert(!(tmp_res == -1));
        tmp_condition_result_1 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = EXC_VALUE(PyThreadState_GET());
        assert(var_err == NULL);
        Py_INCREF(tmp_assign_source_1);
        var_err = tmp_assign_source_1;
    }
    // Tried code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_call_result_1;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_make_exception_arg_1;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_kw_call_dict_value_0_1;
        tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_3 == NULL)) {
            tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
        }

        if (tmp_expression_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1544;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[210]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1544;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        tmp_left_value_1 = mod_consts[211];
        CHECK_OBJECT(par_elem);
        tmp_tuple_element_1 = par_elem;
        tmp_right_value_1 = PyTuple_New(3);
        {
            PyObject *tmp_expression_value_4;
            PyObject *tmp_called_value_2;
            PyObject *tmp_expression_value_5;
            PyObject *tmp_args_element_value_1;
            PyObject *tmp_expression_value_6;
            PyTuple_SET_ITEM0(tmp_right_value_1, 0, tmp_tuple_element_1);
            CHECK_OBJECT(par_self);
            tmp_expression_value_4 = par_self;
            tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[93]);
            if (tmp_tuple_element_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1550;
                type_description_1 = "ooo";
                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_right_value_1, 1, tmp_tuple_element_1);
            tmp_expression_value_5 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[212]);

            if (unlikely(tmp_expression_value_5 == NULL)) {
                tmp_expression_value_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[212]);
            }

            if (tmp_expression_value_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1551;
                type_description_1 = "ooo";
                goto tuple_build_exception_1;
            }
            tmp_called_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[213]);
            if (tmp_called_value_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1551;
                type_description_1 = "ooo";
                goto tuple_build_exception_1;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_6 = par_self;
            tmp_args_element_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[168]);
            if (tmp_args_element_value_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_called_value_2);

                exception_lineno = 1551;
                type_description_1 = "ooo";
                goto tuple_build_exception_1;
            }
            frame_4f3b38aed9d46df7c5f79083f8b39a1c->m_frame.f_lineno = 1551;
            tmp_tuple_element_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_2, tmp_args_element_value_1);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_args_element_value_1);
            if (tmp_tuple_element_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1551;
                type_description_1 = "ooo";
                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_right_value_1, 2, tmp_tuple_element_1);
        }
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_right_value_1);
        goto try_except_handler_3;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        tmp_make_exception_arg_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_1, tmp_right_value_1);
        Py_DECREF(tmp_right_value_1);
        if (tmp_make_exception_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1548;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        frame_4f3b38aed9d46df7c5f79083f8b39a1c->m_frame.f_lineno = 1545;
        tmp_kw_call_arg_value_0_1 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_LookupError, tmp_make_exception_arg_1);
        Py_DECREF(tmp_make_exception_arg_1);
        assert(!(tmp_kw_call_arg_value_0_1 == NULL));
        CHECK_OBJECT(var_err);
        tmp_kw_call_dict_value_0_1 = var_err;
        frame_4f3b38aed9d46df7c5f79083f8b39a1c->m_frame.f_lineno = 1544;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1};
            PyObject *kw_values[1] = {tmp_kw_call_dict_value_0_1};
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tmp_called_value_1, args, kw_values, mod_consts[214]);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_kw_call_arg_value_0_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1544;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        Py_DECREF(tmp_call_result_1);
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_err);
    var_err = NULL;

    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    Py_XDECREF(var_err);
    var_err = NULL;

    goto branch_end_1;
    branch_no_1:;
    tmp_result = RERAISE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
    if (unlikely(tmp_result == false)) {
        exception_lineno = 1541;
    }

    if (exception_tb && exception_tb->tb_frame == &frame_4f3b38aed9d46df7c5f79083f8b39a1c->m_frame) frame_4f3b38aed9d46df7c5f79083f8b39a1c->m_frame.f_lineno = exception_tb->tb_lineno;
    type_description_1 = "ooo";
    goto try_except_handler_2;
    branch_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Restore previous exception id 1.
    SET_CURRENT_EXCEPTION(exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1);

    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    // Restore previous exception id 1.
    SET_CURRENT_EXCEPTION(exception_preserved_type_1, exception_preserved_value_1, exception_preserved_tb_1);

    goto try_end_3;
    NUITKA_CANNOT_GET_HERE("exception handler codes exits in all cases");
    return NULL;
    // End of try:
    try_end_3:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_4f3b38aed9d46df7c5f79083f8b39a1c);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_4f3b38aed9d46df7c5f79083f8b39a1c);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_4f3b38aed9d46df7c5f79083f8b39a1c);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_4f3b38aed9d46df7c5f79083f8b39a1c, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_4f3b38aed9d46df7c5f79083f8b39a1c->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_4f3b38aed9d46df7c5f79083f8b39a1c, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_4f3b38aed9d46df7c5f79083f8b39a1c,
        type_description_1,
        par_self,
        par_elem,
        var_err
    );


    // Release cached frame if used for exception.
    if (frame_4f3b38aed9d46df7c5f79083f8b39a1c == cache_frame_4f3b38aed9d46df7c5f79083f8b39a1c) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_4f3b38aed9d46df7c5f79083f8b39a1c);
        cache_frame_4f3b38aed9d46df7c5f79083f8b39a1c = NULL;
    }

    assertFrameObject(frame_4f3b38aed9d46df7c5f79083f8b39a1c);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elem);
    Py_DECREF(par_elem);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__76___repr__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_2b86c7165651569226a4ff1aeee473ea;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_2b86c7165651569226a4ff1aeee473ea = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_2b86c7165651569226a4ff1aeee473ea)) {
        Py_XDECREF(cache_frame_2b86c7165651569226a4ff1aeee473ea);

#if _DEBUG_REFCOUNTS
        if (cache_frame_2b86c7165651569226a4ff1aeee473ea == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_2b86c7165651569226a4ff1aeee473ea = MAKE_FUNCTION_FRAME(codeobj_2b86c7165651569226a4ff1aeee473ea, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_2b86c7165651569226a4ff1aeee473ea->m_type_description == NULL);
    frame_2b86c7165651569226a4ff1aeee473ea = cache_frame_2b86c7165651569226a4ff1aeee473ea;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_2b86c7165651569226a4ff1aeee473ea);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_2b86c7165651569226a4ff1aeee473ea) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_kw_call_dict_value_0_1;
        PyObject *tmp_kw_call_dict_value_1_1;
        PyObject *tmp_list_element_1;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1558;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[217]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1558;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_kw_call_arg_value_0_1 = par_self;
        tmp_kw_call_dict_value_0_1 = LIST_COPY(mod_consts[218]);
        tmp_list_element_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[188]);

        if (unlikely(tmp_list_element_1 == NULL)) {
            tmp_list_element_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[188]);
        }

        if (tmp_list_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_dict_value_0_1);

            exception_lineno = 1561;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_kw_call_dict_value_1_1 = PyList_New(2);
        PyList_SET_ITEM0(tmp_kw_call_dict_value_1_1, 0, tmp_list_element_1);
        tmp_list_element_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[157]);

        if (unlikely(tmp_list_element_1 == NULL)) {
            tmp_list_element_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[157]);
        }

        if (tmp_list_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1561;
            type_description_1 = "o";
            goto list_build_exception_1;
        }
        PyList_SET_ITEM0(tmp_kw_call_dict_value_1_1, 1, tmp_list_element_1);
        goto list_build_noexception_1;
        // Exception handling pass through code for list_build:
        list_build_exception_1:;
        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_kw_call_dict_value_0_1);
        Py_DECREF(tmp_kw_call_dict_value_1_1);
        goto frame_exception_exit_1;
        // Finished with no exception for list_build:
        list_build_noexception_1:;
        frame_2b86c7165651569226a4ff1aeee473ea->m_frame.f_lineno = 1558;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1};
            PyObject *kw_values[2] = {tmp_kw_call_dict_value_0_1, tmp_kw_call_dict_value_1_1};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tmp_called_value_1, args, kw_values, mod_consts[219]);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_kw_call_dict_value_0_1);
        Py_DECREF(tmp_kw_call_dict_value_1_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1558;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2b86c7165651569226a4ff1aeee473ea);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_2b86c7165651569226a4ff1aeee473ea);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2b86c7165651569226a4ff1aeee473ea);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_2b86c7165651569226a4ff1aeee473ea, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_2b86c7165651569226a4ff1aeee473ea->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_2b86c7165651569226a4ff1aeee473ea, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_2b86c7165651569226a4ff1aeee473ea,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_2b86c7165651569226a4ff1aeee473ea == cache_frame_2b86c7165651569226a4ff1aeee473ea) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_2b86c7165651569226a4ff1aeee473ea);
        cache_frame_2b86c7165651569226a4ff1aeee473ea = NULL;
    }

    assertFrameObject(frame_2b86c7165651569226a4ff1aeee473ea);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__77_adapt_to_emulated(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_impltype = python_pars[1];
    PyObject *par_kw = python_pars[2];
    struct Nuitka_FrameObject *frame_b3a1e6aaff693ec3ad0c43ec06639e47;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_b3a1e6aaff693ec3ad0c43ec06639e47 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_b3a1e6aaff693ec3ad0c43ec06639e47)) {
        Py_XDECREF(cache_frame_b3a1e6aaff693ec3ad0c43ec06639e47);

#if _DEBUG_REFCOUNTS
        if (cache_frame_b3a1e6aaff693ec3ad0c43ec06639e47 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_b3a1e6aaff693ec3ad0c43ec06639e47 = MAKE_FUNCTION_FRAME(codeobj_b3a1e6aaff693ec3ad0c43ec06639e47, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_b3a1e6aaff693ec3ad0c43ec06639e47->m_type_description == NULL);
    frame_b3a1e6aaff693ec3ad0c43ec06639e47 = cache_frame_b3a1e6aaff693ec3ad0c43ec06639e47;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_b3a1e6aaff693ec3ad0c43ec06639e47);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_b3a1e6aaff693ec3ad0c43ec06639e47) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_dict_arg_value_1;
        PyObject *tmp_key_value_1;
        PyObject *tmp_default_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_capi_result_1;
        CHECK_OBJECT(par_kw);
        tmp_dict_arg_value_1 = par_kw;
        tmp_key_value_1 = mod_consts[24];
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_default_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[24]);
        if (tmp_default_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1565;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_capi_result_1 = DICT_SETDEFAULT3(tmp_dict_arg_value_1, tmp_key_value_1, tmp_default_value_1);
        Py_DECREF(tmp_default_value_1);
        assert(!(tmp_capi_result_1 == NULL));
        Py_DECREF(tmp_capi_result_1);
    }
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_2 = par_kw;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[63]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1566;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[183];
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_args_element_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[183]);
        if (tmp_args_element_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1566;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_b3a1e6aaff693ec3ad0c43ec06639e47->m_frame.f_lineno = 1566;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_call_result_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_2);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1566;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_expression_value_5;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_4 = par_kw;
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[63]);
        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1567;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_3 = mod_consts[93];
        CHECK_OBJECT(par_self);
        tmp_expression_value_5 = par_self;
        tmp_args_element_value_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[93]);
        if (tmp_args_element_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 1567;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_b3a1e6aaff693ec3ad0c43ec06639e47->m_frame.f_lineno = 1567;
        {
            PyObject *call_args[] = {tmp_args_element_value_3, tmp_args_element_value_4};
            tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_2, call_args);
        }

        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_4);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1567;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    {
        PyObject *tmp_called_value_3;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_call_result_3;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_args_element_value_6;
        PyObject *tmp_expression_value_7;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_6 = par_kw;
        tmp_called_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[63]);
        if (tmp_called_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1568;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_5 = mod_consts[127];
        CHECK_OBJECT(par_self);
        tmp_expression_value_7 = par_self;
        tmp_args_element_value_6 = LOOKUP_ATTRIBUTE(tmp_expression_value_7, mod_consts[127]);
        if (tmp_args_element_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_3);

            exception_lineno = 1568;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_b3a1e6aaff693ec3ad0c43ec06639e47->m_frame.f_lineno = 1568;
        {
            PyObject *call_args[] = {tmp_args_element_value_5, tmp_args_element_value_6};
            tmp_call_result_3 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_3, call_args);
        }

        Py_DECREF(tmp_called_value_3);
        Py_DECREF(tmp_args_element_value_6);
        if (tmp_call_result_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1568;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_3);
    }
    {
        PyObject *tmp_called_value_4;
        PyObject *tmp_expression_value_8;
        PyObject *tmp_call_result_4;
        PyObject *tmp_args_element_value_7;
        PyObject *tmp_args_element_value_8;
        PyObject *tmp_expression_value_9;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_8 = par_kw;
        tmp_called_value_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_8, mod_consts[63]);
        if (tmp_called_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1569;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_7 = mod_consts[129];
        CHECK_OBJECT(par_self);
        tmp_expression_value_9 = par_self;
        tmp_args_element_value_8 = LOOKUP_ATTRIBUTE(tmp_expression_value_9, mod_consts[129]);
        if (tmp_args_element_value_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_4);

            exception_lineno = 1569;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_b3a1e6aaff693ec3ad0c43ec06639e47->m_frame.f_lineno = 1569;
        {
            PyObject *call_args[] = {tmp_args_element_value_7, tmp_args_element_value_8};
            tmp_call_result_4 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_4, call_args);
        }

        Py_DECREF(tmp_called_value_4);
        Py_DECREF(tmp_args_element_value_8);
        if (tmp_call_result_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1569;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_4);
    }
    {
        PyObject *tmp_called_value_5;
        PyObject *tmp_expression_value_10;
        PyObject *tmp_call_result_5;
        PyObject *tmp_args_element_value_9;
        PyObject *tmp_args_element_value_10;
        PyObject *tmp_expression_value_11;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_10 = par_kw;
        tmp_called_value_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_10, mod_consts[63]);
        if (tmp_called_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1570;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_9 = mod_consts[128];
        CHECK_OBJECT(par_self);
        tmp_expression_value_11 = par_self;
        tmp_args_element_value_10 = LOOKUP_ATTRIBUTE(tmp_expression_value_11, mod_consts[128]);
        if (tmp_args_element_value_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_5);

            exception_lineno = 1570;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_b3a1e6aaff693ec3ad0c43ec06639e47->m_frame.f_lineno = 1570;
        {
            PyObject *call_args[] = {tmp_args_element_value_9, tmp_args_element_value_10};
            tmp_call_result_5 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_5, call_args);
        }

        Py_DECREF(tmp_called_value_5);
        Py_DECREF(tmp_args_element_value_10);
        if (tmp_call_result_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1570;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_5);
    }
    {
        PyObject *tmp_called_value_6;
        PyObject *tmp_expression_value_12;
        PyObject *tmp_call_result_6;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_12 = par_kw;
        tmp_called_value_6 = LOOKUP_ATTRIBUTE(tmp_expression_value_12, mod_consts[63]);
        if (tmp_called_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1571;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_b3a1e6aaff693ec3ad0c43ec06639e47->m_frame.f_lineno = 1571;
        tmp_call_result_6 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_6, mod_consts[153]);

        Py_DECREF(tmp_called_value_6);
        if (tmp_call_result_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1571;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_6);
    }
    {
        PyObject *tmp_called_value_7;
        PyObject *tmp_expression_value_13;
        PyObject *tmp_call_result_7;
        PyObject *tmp_args_element_value_11;
        PyObject *tmp_args_element_value_12;
        PyObject *tmp_expression_value_14;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_13 = par_kw;
        tmp_called_value_7 = LOOKUP_ATTRIBUTE(tmp_expression_value_13, mod_consts[63]);
        if (tmp_called_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1572;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_11 = mod_consts[170];
        CHECK_OBJECT(par_self);
        tmp_expression_value_14 = par_self;
        tmp_args_element_value_12 = LOOKUP_ATTRIBUTE(tmp_expression_value_14, mod_consts[170]);
        if (tmp_args_element_value_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_7);

            exception_lineno = 1572;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_b3a1e6aaff693ec3ad0c43ec06639e47->m_frame.f_lineno = 1572;
        {
            PyObject *call_args[] = {tmp_args_element_value_11, tmp_args_element_value_12};
            tmp_call_result_7 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_7, call_args);
        }

        Py_DECREF(tmp_called_value_7);
        Py_DECREF(tmp_args_element_value_12);
        if (tmp_call_result_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1572;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_7);
    }
    {
        PyObject *tmp_called_value_8;
        PyObject *tmp_expression_value_15;
        PyObject *tmp_call_result_8;
        PyObject *tmp_args_element_value_13;
        PyObject *tmp_args_element_value_14;
        PyObject *tmp_expression_value_16;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_15 = par_kw;
        tmp_called_value_8 = LOOKUP_ATTRIBUTE(tmp_expression_value_15, mod_consts[63]);
        if (tmp_called_value_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1573;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_13 = mod_consts[174];
        CHECK_OBJECT(par_self);
        tmp_expression_value_16 = par_self;
        tmp_args_element_value_14 = LOOKUP_ATTRIBUTE(tmp_expression_value_16, mod_consts[174]);
        if (tmp_args_element_value_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_8);

            exception_lineno = 1573;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_b3a1e6aaff693ec3ad0c43ec06639e47->m_frame.f_lineno = 1573;
        {
            PyObject *call_args[] = {tmp_args_element_value_13, tmp_args_element_value_14};
            tmp_call_result_8 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_8, call_args);
        }

        Py_DECREF(tmp_called_value_8);
        Py_DECREF(tmp_args_element_value_14);
        if (tmp_call_result_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1573;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_8);
    }
    {
        PyObject *tmp_called_value_9;
        PyObject *tmp_expression_value_17;
        PyObject *tmp_call_result_9;
        PyObject *tmp_args_element_value_15;
        PyObject *tmp_args_element_value_16;
        PyObject *tmp_expression_value_18;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_17 = par_kw;
        tmp_called_value_9 = LOOKUP_ATTRIBUTE(tmp_expression_value_17, mod_consts[63]);
        if (tmp_called_value_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1574;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_15 = mod_consts[172];
        CHECK_OBJECT(par_self);
        tmp_expression_value_18 = par_self;
        tmp_args_element_value_16 = LOOKUP_ATTRIBUTE(tmp_expression_value_18, mod_consts[172]);
        if (tmp_args_element_value_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_9);

            exception_lineno = 1574;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_b3a1e6aaff693ec3ad0c43ec06639e47->m_frame.f_lineno = 1574;
        {
            PyObject *call_args[] = {tmp_args_element_value_15, tmp_args_element_value_16};
            tmp_call_result_9 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_9, call_args);
        }

        Py_DECREF(tmp_called_value_9);
        Py_DECREF(tmp_args_element_value_16);
        if (tmp_call_result_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1574;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_9);
    }
    {
        PyObject *tmp_called_value_10;
        PyObject *tmp_expression_value_19;
        PyObject *tmp_call_result_10;
        PyObject *tmp_args_element_value_17;
        PyObject *tmp_args_element_value_18;
        PyObject *tmp_expression_value_20;
        CHECK_OBJECT(par_kw);
        tmp_expression_value_19 = par_kw;
        tmp_called_value_10 = LOOKUP_ATTRIBUTE(tmp_expression_value_19, mod_consts[63]);
        if (tmp_called_value_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1575;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_17 = mod_consts[22];
        CHECK_OBJECT(par_self);
        tmp_expression_value_20 = par_self;
        tmp_args_element_value_18 = LOOKUP_ATTRIBUTE(tmp_expression_value_20, mod_consts[22]);
        if (tmp_args_element_value_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_10);

            exception_lineno = 1575;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_b3a1e6aaff693ec3ad0c43ec06639e47->m_frame.f_lineno = 1575;
        {
            PyObject *call_args[] = {tmp_args_element_value_17, tmp_args_element_value_18};
            tmp_call_result_10 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_10, call_args);
        }

        Py_DECREF(tmp_called_value_10);
        Py_DECREF(tmp_args_element_value_18);
        if (tmp_call_result_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1575;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_10);
    }
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        tmp_cmp_expr_left_1 = mod_consts[202];
        CHECK_OBJECT(par_kw);
        tmp_cmp_expr_right_1 = par_kw;
        tmp_res = PySequence_Contains(tmp_cmp_expr_right_1, tmp_cmp_expr_left_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1576;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_raise_type_1;
        tmp_raise_type_1 = PyExc_AssertionError;
        exception_type = tmp_raise_type_1;
        Py_INCREF(tmp_raise_type_1);
        exception_lineno = 1576;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    branch_no_1:;
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_dircall_arg2_1;
        CHECK_OBJECT(par_impltype);
        tmp_dircall_arg1_1 = par_impltype;
        CHECK_OBJECT(par_kw);
        tmp_dircall_arg2_1 = par_kw;
        Py_INCREF(tmp_dircall_arg1_1);
        Py_INCREF(tmp_dircall_arg2_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1};
            tmp_return_value = impl___main__$$$function__9_complex_call_helper_star_dict(dir_call_args);
        }
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1577;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b3a1e6aaff693ec3ad0c43ec06639e47);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_b3a1e6aaff693ec3ad0c43ec06639e47);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b3a1e6aaff693ec3ad0c43ec06639e47);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_b3a1e6aaff693ec3ad0c43ec06639e47, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_b3a1e6aaff693ec3ad0c43ec06639e47->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_b3a1e6aaff693ec3ad0c43ec06639e47, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_b3a1e6aaff693ec3ad0c43ec06639e47,
        type_description_1,
        par_self,
        par_impltype,
        par_kw
    );


    // Release cached frame if used for exception.
    if (frame_b3a1e6aaff693ec3ad0c43ec06639e47 == cache_frame_b3a1e6aaff693ec3ad0c43ec06639e47) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_b3a1e6aaff693ec3ad0c43ec06639e47);
        cache_frame_b3a1e6aaff693ec3ad0c43ec06639e47 = NULL;
    }

    assertFrameObject(frame_b3a1e6aaff693ec3ad0c43ec06639e47);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_impltype);
    Py_DECREF(par_impltype);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_impltype);
    Py_DECREF(par_impltype);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__78_adapt(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_impltype = python_pars[1];
    PyObject *par_kw = python_pars[2];
    struct Nuitka_FrameObject *frame_2fe18abc35771a0e7f052b237768acb3;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_dictset_value;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_dictset_dict;
    PyObject *tmp_dictset_key;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_2fe18abc35771a0e7f052b237768acb3 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_2fe18abc35771a0e7f052b237768acb3)) {
        Py_XDECREF(cache_frame_2fe18abc35771a0e7f052b237768acb3);

#if _DEBUG_REFCOUNTS
        if (cache_frame_2fe18abc35771a0e7f052b237768acb3 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_2fe18abc35771a0e7f052b237768acb3 = MAKE_FUNCTION_FRAME(codeobj_2fe18abc35771a0e7f052b237768acb3, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_2fe18abc35771a0e7f052b237768acb3->m_type_description == NULL);
    frame_2fe18abc35771a0e7f052b237768acb3 = cache_frame_2fe18abc35771a0e7f052b237768acb3;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_2fe18abc35771a0e7f052b237768acb3);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_2fe18abc35771a0e7f052b237768acb3) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_dictset_value = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[220]);
        if (tmp_dictset_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1580;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_kw);
        tmp_dictset_dict = par_kw;
        tmp_dictset_key = mod_consts[202];
        assert(PyDict_CheckExact(tmp_dictset_dict));
        tmp_res = PyDict_SetItem(tmp_dictset_dict, tmp_dictset_key, tmp_dictset_value);

        Py_DECREF(tmp_dictset_value);
        assert(!(tmp_res != 0));
    }
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_dircall_arg3_1;
        tmp_type_arg_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[188]);

        if (unlikely(tmp_type_arg_value_1 == NULL)) {
            tmp_type_arg_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[188]);
        }

        if (tmp_type_arg_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1581;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_object_arg_value_1 = par_self;
        tmp_expression_value_2 = BUILTIN_SUPER2(tmp_type_arg_value_1, tmp_object_arg_value_1);
        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1581;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[150]);
        Py_DECREF(tmp_expression_value_2);
        if (tmp_dircall_arg1_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1581;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_impltype);
        tmp_tuple_element_1 = par_impltype;
        tmp_dircall_arg2_1 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(par_kw);
        tmp_dircall_arg3_1 = par_kw;
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_return_value = impl___main__$$$function__7_complex_call_helper_pos_star_dict(dir_call_args);
        }
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1581;
            type_description_1 = "oooN";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2fe18abc35771a0e7f052b237768acb3);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_2fe18abc35771a0e7f052b237768acb3);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2fe18abc35771a0e7f052b237768acb3);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_2fe18abc35771a0e7f052b237768acb3, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_2fe18abc35771a0e7f052b237768acb3->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_2fe18abc35771a0e7f052b237768acb3, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_2fe18abc35771a0e7f052b237768acb3,
        type_description_1,
        par_self,
        par_impltype,
        par_kw,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_2fe18abc35771a0e7f052b237768acb3 == cache_frame_2fe18abc35771a0e7f052b237768acb3) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_2fe18abc35771a0e7f052b237768acb3);
        cache_frame_2fe18abc35771a0e7f052b237768acb3 = NULL;
    }

    assertFrameObject(frame_2fe18abc35771a0e7f052b237768acb3);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_impltype);
    Py_DECREF(par_impltype);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_impltype);
    Py_DECREF(par_impltype);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__79__should_create_constraint(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_compiler = python_pars[1];
    PyObject *par_kw = python_pars[2];
    struct Nuitka_FrameObject *frame_fcc9aa921a21d2d219cc711d5cd95289;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_fcc9aa921a21d2d219cc711d5cd95289 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_fcc9aa921a21d2d219cc711d5cd95289)) {
        Py_XDECREF(cache_frame_fcc9aa921a21d2d219cc711d5cd95289);

#if _DEBUG_REFCOUNTS
        if (cache_frame_fcc9aa921a21d2d219cc711d5cd95289 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_fcc9aa921a21d2d219cc711d5cd95289 = MAKE_FUNCTION_FRAME(codeobj_fcc9aa921a21d2d219cc711d5cd95289, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_fcc9aa921a21d2d219cc711d5cd95289->m_type_description == NULL);
    frame_fcc9aa921a21d2d219cc711d5cd95289 = cache_frame_fcc9aa921a21d2d219cc711d5cd95289;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_fcc9aa921a21d2d219cc711d5cd95289);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_fcc9aa921a21d2d219cc711d5cd95289) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[163]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1584;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_compiler);
        tmp_expression_value_2 = par_compiler;
        tmp_args_element_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[32]);
        if (tmp_args_element_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1584;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_kw);
        tmp_args_element_value_2 = par_kw;
        frame_fcc9aa921a21d2d219cc711d5cd95289->m_frame.f_lineno = 1584;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_operand_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_operand_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1584;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        Py_DECREF(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1584;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_False;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_no_1:;
    {
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        PyObject *tmp_operand_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_operand_value_3;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_expression_value_5;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_operand_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[170]);
        if (tmp_operand_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1587;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_2);
        Py_DECREF(tmp_operand_value_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1587;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_or_left_value_1 = (tmp_res == 0) ? Py_True : Py_False;
        tmp_or_left_truth_1 = CHECK_IF_TRUE(tmp_or_left_value_1);
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        CHECK_OBJECT(par_compiler);
        tmp_expression_value_5 = par_compiler;
        tmp_expression_value_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[32]);
        if (tmp_expression_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1587;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_operand_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[221]);
        Py_DECREF(tmp_expression_value_4);
        if (tmp_operand_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1587;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_3);
        Py_DECREF(tmp_operand_value_3);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1587;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_or_right_value_1 = (tmp_res == 0) ? Py_True : Py_False;
        tmp_return_value = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_return_value = tmp_or_left_value_1;
        or_end_1:;
        Py_INCREF(tmp_return_value);
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_fcc9aa921a21d2d219cc711d5cd95289);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_fcc9aa921a21d2d219cc711d5cd95289);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_fcc9aa921a21d2d219cc711d5cd95289);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_fcc9aa921a21d2d219cc711d5cd95289, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_fcc9aa921a21d2d219cc711d5cd95289->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_fcc9aa921a21d2d219cc711d5cd95289, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_fcc9aa921a21d2d219cc711d5cd95289,
        type_description_1,
        par_self,
        par_compiler,
        par_kw
    );


    // Release cached frame if used for exception.
    if (frame_fcc9aa921a21d2d219cc711d5cd95289 == cache_frame_fcc9aa921a21d2d219cc711d5cd95289) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_fcc9aa921a21d2d219cc711d5cd95289);
        cache_frame_fcc9aa921a21d2d219cc711d5cd95289 = NULL;
    }

    assertFrameObject(frame_fcc9aa921a21d2d219cc711d5cd95289);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_compiler);
    Py_DECREF(par_compiler);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_compiler);
    Py_DECREF(par_compiler);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__80__set_table(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_schema = python_pars[1];
    PyObject *par_column = python_pars[2];
    PyObject *par_table = python_pars[3];
    PyObject *var_variant_mapping = NULL;
    PyObject *var_e = NULL;
    struct Nuitka_FrameObject *frame_d7e17d58aba054fac37133b44e76a379;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_d7e17d58aba054fac37133b44e76a379 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_d7e17d58aba054fac37133b44e76a379)) {
        Py_XDECREF(cache_frame_d7e17d58aba054fac37133b44e76a379);

#if _DEBUG_REFCOUNTS
        if (cache_frame_d7e17d58aba054fac37133b44e76a379 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_d7e17d58aba054fac37133b44e76a379 = MAKE_FUNCTION_FRAME(codeobj_d7e17d58aba054fac37133b44e76a379, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_d7e17d58aba054fac37133b44e76a379->m_type_description == NULL);
    frame_d7e17d58aba054fac37133b44e76a379 = cache_frame_d7e17d58aba054fac37133b44e76a379;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_d7e17d58aba054fac37133b44e76a379);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_d7e17d58aba054fac37133b44e76a379) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        tmp_called_instance_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[157]);

        if (unlikely(tmp_called_instance_1 == NULL)) {
            tmp_called_instance_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[157]);
        }

        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1592;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_args_element_value_1 = par_self;
        CHECK_OBJECT(par_column);
        tmp_args_element_value_2 = par_column;
        CHECK_OBJECT(par_table);
        tmp_args_element_value_3 = par_table;
        frame_d7e17d58aba054fac37133b44e76a379->m_frame.f_lineno = 1592;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2, tmp_args_element_value_3};
            tmp_call_result_1 = CALL_METHOD_WITH_ARGS3(
                tmp_called_instance_1,
                mod_consts[139],
                call_args
            );
        }

        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1592;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        bool tmp_condition_result_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_operand_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[172]);
        if (tmp_operand_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1594;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        Py_DECREF(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1594;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_args_element_value_4;
        CHECK_OBJECT(par_self);
        tmp_called_instance_2 = par_self;
        CHECK_OBJECT(par_column);
        tmp_args_element_value_4 = par_column;
        frame_d7e17d58aba054fac37133b44e76a379->m_frame.f_lineno = 1597;
        tmp_assign_source_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_2, mod_consts[146], tmp_args_element_value_4);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1597;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(var_variant_mapping == NULL);
        var_variant_mapping = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_called_value_3;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_args_element_value_6;
        PyObject *tmp_args_element_value_7;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_kw_call_dict_value_0_1;
        PyObject *tmp_called_value_4;
        PyObject *tmp_args_element_value_8;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_kw_call_dict_value_1_1;
        PyObject *tmp_called_value_5;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_args_element_value_9;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_args_element_value_10;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_kw_call_dict_value_2_1;
        CHECK_OBJECT(par_schema);
        tmp_expression_value_2 = par_schema;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[222]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1599;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[223]);

        if (unlikely(tmp_called_value_3 == NULL)) {
            tmp_called_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[223]);
        }

        if (tmp_called_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1600;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_column);
        tmp_args_element_value_5 = par_column;
        CHECK_OBJECT(par_self);
        tmp_args_element_value_6 = par_self;
        frame_d7e17d58aba054fac37133b44e76a379->m_frame.f_lineno = 1600;
        {
            PyObject *call_args[] = {tmp_args_element_value_5, tmp_args_element_value_6};
            tmp_expression_value_3 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_3, call_args);
        }

        if (tmp_expression_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1600;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[224]);
        Py_DECREF(tmp_expression_value_3);
        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1600;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_4 = par_self;
        tmp_args_element_value_7 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[168]);
        if (tmp_args_element_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 1600;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        frame_d7e17d58aba054fac37133b44e76a379->m_frame.f_lineno = 1600;
        tmp_kw_call_arg_value_0_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_2, tmp_args_element_value_7);
        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_7);
        if (tmp_kw_call_arg_value_0_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1600;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[225]);

        if (unlikely(tmp_called_value_4 == NULL)) {
            tmp_called_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[225]);
        }

        if (tmp_called_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);

            exception_lineno = 1601;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_5 = par_self;
        tmp_args_element_value_8 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[93]);
        if (tmp_args_element_value_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);

            exception_lineno = 1601;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        frame_d7e17d58aba054fac37133b44e76a379->m_frame.f_lineno = 1601;
        tmp_kw_call_dict_value_0_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_4, tmp_args_element_value_8);
        Py_DECREF(tmp_args_element_value_8);
        if (tmp_kw_call_dict_value_0_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);

            exception_lineno = 1601;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_6 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_6 == NULL)) {
            tmp_expression_value_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
        }

        if (tmp_expression_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_0_1);

            exception_lineno = 1602;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[134]);
        if (tmp_called_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_0_1);

            exception_lineno = 1602;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_7 = par_self;
        tmp_args_element_value_9 = LOOKUP_ATTRIBUTE(tmp_expression_value_7, mod_consts[226]);
        if (tmp_args_element_value_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_0_1);
            Py_DECREF(tmp_called_value_5);

            exception_lineno = 1603;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = mod_consts[145];
        CHECK_OBJECT(var_variant_mapping);
        tmp_dict_value_1 = var_variant_mapping;
        tmp_args_element_value_10 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_args_element_value_10, tmp_dict_key_1, tmp_dict_value_1);
        assert(!(tmp_res != 0));
        frame_d7e17d58aba054fac37133b44e76a379->m_frame.f_lineno = 1602;
        {
            PyObject *call_args[] = {tmp_args_element_value_9, tmp_args_element_value_10};
            tmp_kw_call_dict_value_1_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_5, call_args);
        }

        Py_DECREF(tmp_called_value_5);
        Py_DECREF(tmp_args_element_value_9);
        Py_DECREF(tmp_args_element_value_10);
        if (tmp_kw_call_dict_value_1_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_0_1);

            exception_lineno = 1602;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_kw_call_dict_value_2_1 = Py_True;
        frame_d7e17d58aba054fac37133b44e76a379->m_frame.f_lineno = 1599;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1};
            PyObject *kw_values[3] = {tmp_kw_call_dict_value_0_1, tmp_kw_call_dict_value_1_1, tmp_kw_call_dict_value_2_1};
            tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tmp_called_value_1, args, kw_values, mod_consts[227]);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_kw_call_arg_value_0_1);
        Py_DECREF(tmp_kw_call_dict_value_0_1);
        Py_DECREF(tmp_kw_call_dict_value_1_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1599;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(var_e == NULL);
        var_e = tmp_assign_source_2;
    }
    {
        bool tmp_condition_result_2;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_8;
        CHECK_OBJECT(var_e);
        tmp_expression_value_8 = var_e;
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_8, mod_consts[147]);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1608;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_table);
        tmp_cmp_expr_right_1 = par_table;
        tmp_condition_result_2 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? true : false;
        Py_DECREF(tmp_cmp_expr_left_1);
        if (tmp_condition_result_2 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_raise_type_1;
        tmp_raise_type_1 = PyExc_AssertionError;
        exception_type = tmp_raise_type_1;
        Py_INCREF(tmp_raise_type_1);
        exception_lineno = 1608;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    branch_no_2:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d7e17d58aba054fac37133b44e76a379);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_d7e17d58aba054fac37133b44e76a379);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d7e17d58aba054fac37133b44e76a379);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_d7e17d58aba054fac37133b44e76a379, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_d7e17d58aba054fac37133b44e76a379->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_d7e17d58aba054fac37133b44e76a379, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_d7e17d58aba054fac37133b44e76a379,
        type_description_1,
        par_self,
        par_schema,
        par_column,
        par_table,
        var_variant_mapping,
        var_e
    );


    // Release cached frame if used for exception.
    if (frame_d7e17d58aba054fac37133b44e76a379 == cache_frame_d7e17d58aba054fac37133b44e76a379) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_d7e17d58aba054fac37133b44e76a379);
        cache_frame_d7e17d58aba054fac37133b44e76a379 = NULL;
    }

    assertFrameObject(frame_d7e17d58aba054fac37133b44e76a379);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_variant_mapping);
    var_variant_mapping = NULL;
    Py_XDECREF(var_e);
    var_e = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_variant_mapping);
    var_variant_mapping = NULL;
    Py_XDECREF(var_e);
    var_e = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_schema);
    Py_DECREF(par_schema);
    CHECK_OBJECT(par_column);
    Py_DECREF(par_column);
    CHECK_OBJECT(par_table);
    Py_DECREF(par_table);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_schema);
    Py_DECREF(par_schema);
    CHECK_OBJECT(par_column);
    Py_DECREF(par_column);
    CHECK_OBJECT(par_table);
    Py_DECREF(par_table);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__81_literal_processor(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = Nuitka_Cell_New1(python_pars[0]);
    PyObject *par_dialect = python_pars[1];
    struct Nuitka_CellObject *var_parent_processor = Nuitka_Cell_Empty();
    PyObject *var_process = NULL;
    struct Nuitka_FrameObject *frame_365a69ad8eb3d66979a38a5e638934a8;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_365a69ad8eb3d66979a38a5e638934a8 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_365a69ad8eb3d66979a38a5e638934a8)) {
        Py_XDECREF(cache_frame_365a69ad8eb3d66979a38a5e638934a8);

#if _DEBUG_REFCOUNTS
        if (cache_frame_365a69ad8eb3d66979a38a5e638934a8 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_365a69ad8eb3d66979a38a5e638934a8 = MAKE_FUNCTION_FRAME(codeobj_365a69ad8eb3d66979a38a5e638934a8, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_365a69ad8eb3d66979a38a5e638934a8->m_type_description == NULL);
    frame_365a69ad8eb3d66979a38a5e638934a8 = cache_frame_365a69ad8eb3d66979a38a5e638934a8;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_365a69ad8eb3d66979a38a5e638934a8);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_365a69ad8eb3d66979a38a5e638934a8) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_args_element_value_1;
        tmp_type_arg_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[188]);

        if (unlikely(tmp_type_arg_value_1 == NULL)) {
            tmp_type_arg_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[188]);
        }

        if (tmp_type_arg_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1611;
            type_description_1 = "cocoN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(Nuitka_Cell_GET(par_self));
        tmp_object_arg_value_1 = Nuitka_Cell_GET(par_self);
        tmp_called_instance_1 = BUILTIN_SUPER2(tmp_type_arg_value_1, tmp_object_arg_value_1);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1611;
            type_description_1 = "cocoN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_dialect);
        tmp_args_element_value_1 = par_dialect;
        frame_365a69ad8eb3d66979a38a5e638934a8->m_frame.f_lineno = 1611;
        tmp_assign_source_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[228], tmp_args_element_value_1);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1611;
            type_description_1 = "cocoN";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_parent_processor) == NULL);
        PyCell_SET(var_parent_processor, tmp_assign_source_1);

    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_365a69ad8eb3d66979a38a5e638934a8);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_365a69ad8eb3d66979a38a5e638934a8);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_365a69ad8eb3d66979a38a5e638934a8, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_365a69ad8eb3d66979a38a5e638934a8->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_365a69ad8eb3d66979a38a5e638934a8, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_365a69ad8eb3d66979a38a5e638934a8,
        type_description_1,
        par_self,
        par_dialect,
        var_parent_processor,
        var_process,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_365a69ad8eb3d66979a38a5e638934a8 == cache_frame_365a69ad8eb3d66979a38a5e638934a8) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_365a69ad8eb3d66979a38a5e638934a8);
        cache_frame_365a69ad8eb3d66979a38a5e638934a8 = NULL;
    }

    assertFrameObject(frame_365a69ad8eb3d66979a38a5e638934a8);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    {
        PyObject *tmp_assign_source_2;
        struct Nuitka_CellObject *tmp_closure_1[2];

        tmp_closure_1[0] = var_parent_processor;
        Py_INCREF(tmp_closure_1[0]);
        tmp_closure_1[1] = par_self;
        Py_INCREF(tmp_closure_1[1]);

        tmp_assign_source_2 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__81_literal_processor$$$function__1_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_2;
    }
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_parent_processor);
    Py_DECREF(var_parent_processor);
    var_parent_processor = NULL;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__81_literal_processor$$$function__1_process(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_d7365d3affe70e314de644a6f13c58c8;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_d7365d3affe70e314de644a6f13c58c8 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_d7365d3affe70e314de644a6f13c58c8)) {
        Py_XDECREF(cache_frame_d7365d3affe70e314de644a6f13c58c8);

#if _DEBUG_REFCOUNTS
        if (cache_frame_d7365d3affe70e314de644a6f13c58c8 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_d7365d3affe70e314de644a6f13c58c8 = MAKE_FUNCTION_FRAME(codeobj_d7365d3affe70e314de644a6f13c58c8, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_d7365d3affe70e314de644a6f13c58c8->m_type_description == NULL);
    frame_d7365d3affe70e314de644a6f13c58c8 = cache_frame_d7365d3affe70e314de644a6f13c58c8;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_d7365d3affe70e314de644a6f13c58c8);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_d7365d3affe70e314de644a6f13c58c8) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_1;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1614;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = Nuitka_Cell_GET(self->m_closure[1]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        frame_d7365d3affe70e314de644a6f13c58c8->m_frame.f_lineno = 1614;
        tmp_assign_source_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[208], tmp_args_element_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1614;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[230]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1615;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_1 = CHECK_IF_TRUE(Nuitka_Cell_GET(self->m_closure[0]));
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1615;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_2;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[230]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1616;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_value_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_2 = par_value;
        frame_d7365d3affe70e314de644a6f13c58c8->m_frame.f_lineno = 1616;
        tmp_assign_source_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_1, tmp_args_element_value_2);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1616;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_2;
            Py_DECREF(old);
        }

    }
    branch_no_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d7365d3affe70e314de644a6f13c58c8);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d7365d3affe70e314de644a6f13c58c8);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_d7365d3affe70e314de644a6f13c58c8, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_d7365d3affe70e314de644a6f13c58c8->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_d7365d3affe70e314de644a6f13c58c8, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_d7365d3affe70e314de644a6f13c58c8,
        type_description_1,
        par_value,
        self->m_closure[1],
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_d7365d3affe70e314de644a6f13c58c8 == cache_frame_d7365d3affe70e314de644a6f13c58c8) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_d7365d3affe70e314de644a6f13c58c8);
        cache_frame_d7365d3affe70e314de644a6f13c58c8 = NULL;
    }

    assertFrameObject(frame_d7365d3affe70e314de644a6f13c58c8);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT(par_value);
    tmp_return_value = par_value;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    par_value = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_value);
    par_value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__82_bind_processor(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = Nuitka_Cell_New1(python_pars[0]);
    PyObject *par_dialect = python_pars[1];
    PyObject *var_process = NULL;
    struct Nuitka_CellObject *var_parent_processor = Nuitka_Cell_Empty();
    struct Nuitka_FrameObject *frame_c2b905ea7623bb19793972c6e80cd636;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_c2b905ea7623bb19793972c6e80cd636 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        struct Nuitka_CellObject *tmp_closure_1[2];

        tmp_closure_1[0] = var_parent_processor;
        Py_INCREF(tmp_closure_1[0]);
        tmp_closure_1[1] = par_self;
        Py_INCREF(tmp_closure_1[1]);

        tmp_assign_source_1 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__82_bind_processor$$$function__1_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_1;
    }
    // Tried code:
    if (isFrameUnusable(cache_frame_c2b905ea7623bb19793972c6e80cd636)) {
        Py_XDECREF(cache_frame_c2b905ea7623bb19793972c6e80cd636);

#if _DEBUG_REFCOUNTS
        if (cache_frame_c2b905ea7623bb19793972c6e80cd636 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_c2b905ea7623bb19793972c6e80cd636 = MAKE_FUNCTION_FRAME(codeobj_c2b905ea7623bb19793972c6e80cd636, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_c2b905ea7623bb19793972c6e80cd636->m_type_description == NULL);
    frame_c2b905ea7623bb19793972c6e80cd636 = cache_frame_c2b905ea7623bb19793972c6e80cd636;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_c2b905ea7623bb19793972c6e80cd636);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_c2b905ea7623bb19793972c6e80cd636) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_args_element_value_1;
        tmp_type_arg_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[188]);

        if (unlikely(tmp_type_arg_value_1 == NULL)) {
            tmp_type_arg_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[188]);
        }

        if (tmp_type_arg_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1628;
            type_description_1 = "coocN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(Nuitka_Cell_GET(par_self));
        tmp_object_arg_value_1 = Nuitka_Cell_GET(par_self);
        tmp_called_instance_1 = BUILTIN_SUPER2(tmp_type_arg_value_1, tmp_object_arg_value_1);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1628;
            type_description_1 = "coocN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_dialect);
        tmp_args_element_value_1 = par_dialect;
        frame_c2b905ea7623bb19793972c6e80cd636->m_frame.f_lineno = 1628;
        tmp_assign_source_2 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[232], tmp_args_element_value_1);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1628;
            type_description_1 = "coocN";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_parent_processor) == NULL);
        PyCell_SET(var_parent_processor, tmp_assign_source_2);

    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_c2b905ea7623bb19793972c6e80cd636);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_c2b905ea7623bb19793972c6e80cd636);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_c2b905ea7623bb19793972c6e80cd636, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_c2b905ea7623bb19793972c6e80cd636->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_c2b905ea7623bb19793972c6e80cd636, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_c2b905ea7623bb19793972c6e80cd636,
        type_description_1,
        par_self,
        par_dialect,
        var_process,
        var_parent_processor,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_c2b905ea7623bb19793972c6e80cd636 == cache_frame_c2b905ea7623bb19793972c6e80cd636) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_c2b905ea7623bb19793972c6e80cd636);
        cache_frame_c2b905ea7623bb19793972c6e80cd636 = NULL;
    }

    assertFrameObject(frame_c2b905ea7623bb19793972c6e80cd636);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    CHECK_OBJECT(var_parent_processor);
    Py_DECREF(var_parent_processor);
    var_parent_processor = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__82_bind_processor$$$function__1_process(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_9e189f814f4382329c3f44ef4bcf122f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_9e189f814f4382329c3f44ef4bcf122f = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_9e189f814f4382329c3f44ef4bcf122f)) {
        Py_XDECREF(cache_frame_9e189f814f4382329c3f44ef4bcf122f);

#if _DEBUG_REFCOUNTS
        if (cache_frame_9e189f814f4382329c3f44ef4bcf122f == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_9e189f814f4382329c3f44ef4bcf122f = MAKE_FUNCTION_FRAME(codeobj_9e189f814f4382329c3f44ef4bcf122f, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_9e189f814f4382329c3f44ef4bcf122f->m_type_description == NULL);
    frame_9e189f814f4382329c3f44ef4bcf122f = cache_frame_9e189f814f4382329c3f44ef4bcf122f;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_9e189f814f4382329c3f44ef4bcf122f);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_9e189f814f4382329c3f44ef4bcf122f) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_1;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1623;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = Nuitka_Cell_GET(self->m_closure[1]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        frame_9e189f814f4382329c3f44ef4bcf122f->m_frame.f_lineno = 1623;
        tmp_assign_source_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[208], tmp_args_element_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1623;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[230]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1624;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_1 = CHECK_IF_TRUE(Nuitka_Cell_GET(self->m_closure[0]));
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1624;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_2;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[230]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1625;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_value_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_2 = par_value;
        frame_9e189f814f4382329c3f44ef4bcf122f->m_frame.f_lineno = 1625;
        tmp_assign_source_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_1, tmp_args_element_value_2);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1625;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_2;
            Py_DECREF(old);
        }

    }
    branch_no_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9e189f814f4382329c3f44ef4bcf122f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9e189f814f4382329c3f44ef4bcf122f);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_9e189f814f4382329c3f44ef4bcf122f, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_9e189f814f4382329c3f44ef4bcf122f->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_9e189f814f4382329c3f44ef4bcf122f, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_9e189f814f4382329c3f44ef4bcf122f,
        type_description_1,
        par_value,
        self->m_closure[1],
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_9e189f814f4382329c3f44ef4bcf122f == cache_frame_9e189f814f4382329c3f44ef4bcf122f) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_9e189f814f4382329c3f44ef4bcf122f);
        cache_frame_9e189f814f4382329c3f44ef4bcf122f = NULL;
    }

    assertFrameObject(frame_9e189f814f4382329c3f44ef4bcf122f);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT(par_value);
    tmp_return_value = par_value;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    par_value = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_value);
    par_value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__83_result_processor(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = Nuitka_Cell_New1(python_pars[0]);
    PyObject *par_dialect = python_pars[1];
    PyObject *par_coltype = python_pars[2];
    struct Nuitka_CellObject *var_parent_processor = Nuitka_Cell_Empty();
    PyObject *var_process = NULL;
    struct Nuitka_FrameObject *frame_4a98522ce6e4fae80f8ea987181e8c29;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_4a98522ce6e4fae80f8ea987181e8c29 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_4a98522ce6e4fae80f8ea987181e8c29)) {
        Py_XDECREF(cache_frame_4a98522ce6e4fae80f8ea987181e8c29);

#if _DEBUG_REFCOUNTS
        if (cache_frame_4a98522ce6e4fae80f8ea987181e8c29 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_4a98522ce6e4fae80f8ea987181e8c29 = MAKE_FUNCTION_FRAME(codeobj_4a98522ce6e4fae80f8ea987181e8c29, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_4a98522ce6e4fae80f8ea987181e8c29->m_type_description == NULL);
    frame_4a98522ce6e4fae80f8ea987181e8c29 = cache_frame_4a98522ce6e4fae80f8ea987181e8c29;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_4a98522ce6e4fae80f8ea987181e8c29);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_4a98522ce6e4fae80f8ea987181e8c29) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        tmp_type_arg_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[188]);

        if (unlikely(tmp_type_arg_value_1 == NULL)) {
            tmp_type_arg_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[188]);
        }

        if (tmp_type_arg_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1632;
            type_description_1 = "coocoN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(Nuitka_Cell_GET(par_self));
        tmp_object_arg_value_1 = Nuitka_Cell_GET(par_self);
        tmp_called_instance_1 = BUILTIN_SUPER2(tmp_type_arg_value_1, tmp_object_arg_value_1);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1632;
            type_description_1 = "coocoN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_dialect);
        tmp_args_element_value_1 = par_dialect;
        CHECK_OBJECT(par_coltype);
        tmp_args_element_value_2 = par_coltype;
        frame_4a98522ce6e4fae80f8ea987181e8c29->m_frame.f_lineno = 1632;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assign_source_1 = CALL_METHOD_WITH_ARGS2(
                tmp_called_instance_1,
                mod_consts[233],
                call_args
            );
        }

        Py_DECREF(tmp_called_instance_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1632;
            type_description_1 = "coocoN";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_parent_processor) == NULL);
        PyCell_SET(var_parent_processor, tmp_assign_source_1);

    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_4a98522ce6e4fae80f8ea987181e8c29);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_4a98522ce6e4fae80f8ea987181e8c29);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_4a98522ce6e4fae80f8ea987181e8c29, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_4a98522ce6e4fae80f8ea987181e8c29->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_4a98522ce6e4fae80f8ea987181e8c29, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_4a98522ce6e4fae80f8ea987181e8c29,
        type_description_1,
        par_self,
        par_dialect,
        par_coltype,
        var_parent_processor,
        var_process,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_4a98522ce6e4fae80f8ea987181e8c29 == cache_frame_4a98522ce6e4fae80f8ea987181e8c29) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_4a98522ce6e4fae80f8ea987181e8c29);
        cache_frame_4a98522ce6e4fae80f8ea987181e8c29 = NULL;
    }

    assertFrameObject(frame_4a98522ce6e4fae80f8ea987181e8c29);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    {
        PyObject *tmp_assign_source_2;
        struct Nuitka_CellObject *tmp_closure_1[2];

        tmp_closure_1[0] = var_parent_processor;
        Py_INCREF(tmp_closure_1[0]);
        tmp_closure_1[1] = par_self;
        Py_INCREF(tmp_closure_1[1]);

        tmp_assign_source_2 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__83_result_processor$$$function__1_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_2;
    }
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_parent_processor);
    Py_DECREF(var_parent_processor);
    var_parent_processor = NULL;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__83_result_processor$$$function__1_process(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_4059fcd1cafd84c042c9e6346852cb49;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_4059fcd1cafd84c042c9e6346852cb49 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_4059fcd1cafd84c042c9e6346852cb49)) {
        Py_XDECREF(cache_frame_4059fcd1cafd84c042c9e6346852cb49);

#if _DEBUG_REFCOUNTS
        if (cache_frame_4059fcd1cafd84c042c9e6346852cb49 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_4059fcd1cafd84c042c9e6346852cb49 = MAKE_FUNCTION_FRAME(codeobj_4059fcd1cafd84c042c9e6346852cb49, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_4059fcd1cafd84c042c9e6346852cb49->m_type_description == NULL);
    frame_4059fcd1cafd84c042c9e6346852cb49 = cache_frame_4059fcd1cafd84c042c9e6346852cb49;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_4059fcd1cafd84c042c9e6346852cb49);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_4059fcd1cafd84c042c9e6346852cb49) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[230]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1635;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_1 = CHECK_IF_TRUE(Nuitka_Cell_GET(self->m_closure[0]));
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1635;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[230]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1636;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_value_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        frame_4059fcd1cafd84c042c9e6346852cb49->m_frame.f_lineno = 1636;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1636;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    branch_no_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_2;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1638;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = Nuitka_Cell_GET(self->m_closure[1]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_2 = par_value;
        frame_4059fcd1cafd84c042c9e6346852cb49->m_frame.f_lineno = 1638;
        tmp_assign_source_2 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[235], tmp_args_element_value_2);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1638;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_2;
            Py_DECREF(old);
        }

    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_4059fcd1cafd84c042c9e6346852cb49);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_4059fcd1cafd84c042c9e6346852cb49);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_4059fcd1cafd84c042c9e6346852cb49, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_4059fcd1cafd84c042c9e6346852cb49->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_4059fcd1cafd84c042c9e6346852cb49, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_4059fcd1cafd84c042c9e6346852cb49,
        type_description_1,
        par_value,
        self->m_closure[0],
        self->m_closure[1]
    );


    // Release cached frame if used for exception.
    if (frame_4059fcd1cafd84c042c9e6346852cb49 == cache_frame_4059fcd1cafd84c042c9e6346852cb49) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_4059fcd1cafd84c042c9e6346852cb49);
        cache_frame_4059fcd1cafd84c042c9e6346852cb49 = NULL;
    }

    assertFrameObject(frame_4059fcd1cafd84c042c9e6346852cb49);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT(par_value);
    tmp_return_value = par_value;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    par_value = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_value);
    par_value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__84_copy(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_kw = python_pars[1];
    struct Nuitka_FrameObject *frame_900383480205fc1c720bc61c0ed6566d;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_900383480205fc1c720bc61c0ed6566d = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_900383480205fc1c720bc61c0ed6566d)) {
        Py_XDECREF(cache_frame_900383480205fc1c720bc61c0ed6566d);

#if _DEBUG_REFCOUNTS
        if (cache_frame_900383480205fc1c720bc61c0ed6566d == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_900383480205fc1c720bc61c0ed6566d = MAKE_FUNCTION_FRAME(codeobj_900383480205fc1c720bc61c0ed6566d, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_900383480205fc1c720bc61c0ed6566d->m_type_description == NULL);
    frame_900383480205fc1c720bc61c0ed6566d = cache_frame_900383480205fc1c720bc61c0ed6566d;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_900383480205fc1c720bc61c0ed6566d);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_900383480205fc1c720bc61c0ed6566d) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_dircall_arg3_1;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[157]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[157]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1644;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[142]);
        if (tmp_dircall_arg1_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1644;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_tuple_element_1 = par_self;
        tmp_dircall_arg2_1 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(par_kw);
        tmp_dircall_arg3_1 = par_kw;
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_return_value = impl___main__$$$function__7_complex_call_helper_pos_star_dict(dir_call_args);
        }
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1644;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_900383480205fc1c720bc61c0ed6566d);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_900383480205fc1c720bc61c0ed6566d);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_900383480205fc1c720bc61c0ed6566d);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_900383480205fc1c720bc61c0ed6566d, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_900383480205fc1c720bc61c0ed6566d->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_900383480205fc1c720bc61c0ed6566d, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_900383480205fc1c720bc61c0ed6566d,
        type_description_1,
        par_self,
        par_kw
    );


    // Release cached frame if used for exception.
    if (frame_900383480205fc1c720bc61c0ed6566d == cache_frame_900383480205fc1c720bc61c0ed6566d) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_900383480205fc1c720bc61c0ed6566d);
        cache_frame_900383480205fc1c720bc61c0ed6566d = NULL;
    }

    assertFrameObject(frame_900383480205fc1c720bc61c0ed6566d);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__85_python_type(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_a3a5549b67da9f53c5b7b693705607d6;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_a3a5549b67da9f53c5b7b693705607d6 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_a3a5549b67da9f53c5b7b693705607d6)) {
        Py_XDECREF(cache_frame_a3a5549b67da9f53c5b7b693705607d6);

#if _DEBUG_REFCOUNTS
        if (cache_frame_a3a5549b67da9f53c5b7b693705607d6 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_a3a5549b67da9f53c5b7b693705607d6 = MAKE_FUNCTION_FRAME(codeobj_a3a5549b67da9f53c5b7b693705607d6, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_a3a5549b67da9f53c5b7b693705607d6->m_type_description == NULL);
    frame_a3a5549b67da9f53c5b7b693705607d6 = cache_frame_a3a5549b67da9f53c5b7b693705607d6;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_a3a5549b67da9f53c5b7b693705607d6);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_a3a5549b67da9f53c5b7b693705607d6) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[167]);
        if (tmp_attribute_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1648;
            type_description_1 = "oN";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 1648;
            type_description_1 = "oN";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[167]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1649;
            type_description_1 = "oN";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_expression_value_3;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_object_arg_value_1;
        tmp_type_arg_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[188]);

        if (unlikely(tmp_type_arg_value_1 == NULL)) {
            tmp_type_arg_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[188]);
        }

        if (tmp_type_arg_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1651;
            type_description_1 = "oN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_object_arg_value_1 = par_self;
        tmp_expression_value_3 = BUILTIN_SUPER2(tmp_type_arg_value_1, tmp_object_arg_value_1);
        if (tmp_expression_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1651;
            type_description_1 = "oN";
            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[236]);
        Py_DECREF(tmp_expression_value_3);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1651;
            type_description_1 = "oN";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a3a5549b67da9f53c5b7b693705607d6);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_a3a5549b67da9f53c5b7b693705607d6);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a3a5549b67da9f53c5b7b693705607d6);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a3a5549b67da9f53c5b7b693705607d6, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_a3a5549b67da9f53c5b7b693705607d6->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a3a5549b67da9f53c5b7b693705607d6, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_a3a5549b67da9f53c5b7b693705607d6,
        type_description_1,
        par_self,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_a3a5549b67da9f53c5b7b693705607d6 == cache_frame_a3a5549b67da9f53c5b7b693705607d6) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_a3a5549b67da9f53c5b7b693705607d6);
        cache_frame_a3a5549b67da9f53c5b7b693705607d6 = NULL;
    }

    assertFrameObject(frame_a3a5549b67da9f53c5b7b693705607d6);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__86___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_protocol = python_pars[1];
    PyObject *par_pickler = python_pars[2];
    PyObject *par_comparator = python_pars[3];
    struct Nuitka_FrameObject *frame_e4ffc89c424ffae204eee7e128817de9;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_e4ffc89c424ffae204eee7e128817de9 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_e4ffc89c424ffae204eee7e128817de9)) {
        Py_XDECREF(cache_frame_e4ffc89c424ffae204eee7e128817de9);

#if _DEBUG_REFCOUNTS
        if (cache_frame_e4ffc89c424ffae204eee7e128817de9 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_e4ffc89c424ffae204eee7e128817de9 = MAKE_FUNCTION_FRAME(codeobj_e4ffc89c424ffae204eee7e128817de9, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_e4ffc89c424ffae204eee7e128817de9->m_type_description == NULL);
    frame_e4ffc89c424ffae204eee7e128817de9 = cache_frame_e4ffc89c424ffae204eee7e128817de9;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_e4ffc89c424ffae204eee7e128817de9);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_e4ffc89c424ffae204eee7e128817de9) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_protocol);
        tmp_assattr_value_1 = par_protocol;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[237], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1686;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT(par_pickler);
        tmp_or_left_value_1 = par_pickler;
        tmp_or_left_truth_1 = CHECK_IF_TRUE(tmp_or_left_value_1);
        if (tmp_or_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1687;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        tmp_or_right_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[238]);

        if (unlikely(tmp_or_right_value_1 == NULL)) {
            tmp_or_right_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[238]);
        }

        if (tmp_or_right_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1687;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        tmp_assattr_value_2 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_assattr_value_2 = tmp_or_left_value_1;
        or_end_1:;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[239], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1687;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_3;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT(par_comparator);
        tmp_assattr_value_3 = par_comparator;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_3, mod_consts[240], tmp_assattr_value_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1688;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_call_result_1;
        tmp_type_arg_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[241]);

        if (unlikely(tmp_type_arg_value_1 == NULL)) {
            tmp_type_arg_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[241]);
        }

        if (tmp_type_arg_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1689;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_object_arg_value_1 = par_self;
        tmp_called_instance_1 = BUILTIN_SUPER2(tmp_type_arg_value_1, tmp_object_arg_value_1);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1689;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        frame_e4ffc89c424ffae204eee7e128817de9->m_frame.f_lineno = 1689;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, mod_consts[66]);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1689;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e4ffc89c424ffae204eee7e128817de9);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e4ffc89c424ffae204eee7e128817de9);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_e4ffc89c424ffae204eee7e128817de9, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_e4ffc89c424ffae204eee7e128817de9->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_e4ffc89c424ffae204eee7e128817de9, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_e4ffc89c424ffae204eee7e128817de9,
        type_description_1,
        par_self,
        par_protocol,
        par_pickler,
        par_comparator,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_e4ffc89c424ffae204eee7e128817de9 == cache_frame_e4ffc89c424ffae204eee7e128817de9) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_e4ffc89c424ffae204eee7e128817de9);
        cache_frame_e4ffc89c424ffae204eee7e128817de9 = NULL;
    }

    assertFrameObject(frame_e4ffc89c424ffae204eee7e128817de9);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_protocol);
    Py_DECREF(par_protocol);
    CHECK_OBJECT(par_pickler);
    Py_DECREF(par_pickler);
    CHECK_OBJECT(par_comparator);
    Py_DECREF(par_comparator);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_protocol);
    Py_DECREF(par_protocol);
    CHECK_OBJECT(par_pickler);
    Py_DECREF(par_pickler);
    CHECK_OBJECT(par_comparator);
    Py_DECREF(par_comparator);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__87___reduce__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_c19b681fc6b6f3bec99c4da113c175cc;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_c19b681fc6b6f3bec99c4da113c175cc = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_c19b681fc6b6f3bec99c4da113c175cc)) {
        Py_XDECREF(cache_frame_c19b681fc6b6f3bec99c4da113c175cc);

#if _DEBUG_REFCOUNTS
        if (cache_frame_c19b681fc6b6f3bec99c4da113c175cc == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_c19b681fc6b6f3bec99c4da113c175cc = MAKE_FUNCTION_FRAME(codeobj_c19b681fc6b6f3bec99c4da113c175cc, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_c19b681fc6b6f3bec99c4da113c175cc->m_type_description == NULL);
    frame_c19b681fc6b6f3bec99c4da113c175cc = cache_frame_c19b681fc6b6f3bec99c4da113c175cc;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_c19b681fc6b6f3bec99c4da113c175cc);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_c19b681fc6b6f3bec99c4da113c175cc) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_tuple_element_1;
        tmp_tuple_element_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[241]);

        if (unlikely(tmp_tuple_element_1 == NULL)) {
            tmp_tuple_element_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[241]);
        }

        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1692;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = PyTuple_New(2);
        {
            PyObject *tmp_tuple_element_2;
            PyObject *tmp_expression_value_1;
            PyTuple_SET_ITEM0(tmp_return_value, 0, tmp_tuple_element_1);
            CHECK_OBJECT(par_self);
            tmp_expression_value_1 = par_self;
            tmp_tuple_element_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[237]);
            if (tmp_tuple_element_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1692;
                type_description_1 = "o";
                goto tuple_build_exception_1;
            }
            tmp_tuple_element_1 = PyTuple_New(3);
            {
                PyObject *tmp_expression_value_2;
                PyTuple_SET_ITEM(tmp_tuple_element_1, 0, tmp_tuple_element_2);
                tmp_tuple_element_2 = Py_None;
                PyTuple_SET_ITEM0(tmp_tuple_element_1, 1, tmp_tuple_element_2);
                CHECK_OBJECT(par_self);
                tmp_expression_value_2 = par_self;
                tmp_tuple_element_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[240]);
                if (tmp_tuple_element_2 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1692;
                    type_description_1 = "o";
                    goto tuple_build_exception_2;
                }
                PyTuple_SET_ITEM(tmp_tuple_element_1, 2, tmp_tuple_element_2);
            }
            goto tuple_build_noexception_1;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_2:;
            Py_DECREF(tmp_tuple_element_1);
            goto tuple_build_exception_1;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_1:;
            PyTuple_SET_ITEM(tmp_return_value, 1, tmp_tuple_element_1);
        }
        goto tuple_build_noexception_2;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_return_value);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_2:;
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_c19b681fc6b6f3bec99c4da113c175cc);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_c19b681fc6b6f3bec99c4da113c175cc);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_c19b681fc6b6f3bec99c4da113c175cc);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_c19b681fc6b6f3bec99c4da113c175cc, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_c19b681fc6b6f3bec99c4da113c175cc->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_c19b681fc6b6f3bec99c4da113c175cc, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_c19b681fc6b6f3bec99c4da113c175cc,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_c19b681fc6b6f3bec99c4da113c175cc == cache_frame_c19b681fc6b6f3bec99c4da113c175cc) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_c19b681fc6b6f3bec99c4da113c175cc);
        cache_frame_c19b681fc6b6f3bec99c4da113c175cc = NULL;
    }

    assertFrameObject(frame_c19b681fc6b6f3bec99c4da113c175cc);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__88_bind_processor(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    struct Nuitka_CellObject *var_impl_processor = Nuitka_Cell_Empty();
    struct Nuitka_CellObject *var_dumps = Nuitka_Cell_Empty();
    struct Nuitka_CellObject *var_protocol = Nuitka_Cell_Empty();
    PyObject *var_process = NULL;
    struct Nuitka_FrameObject *frame_d6c2189e8d8ddb8218d9095cd81d1826;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_d6c2189e8d8ddb8218d9095cd81d1826 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_d6c2189e8d8ddb8218d9095cd81d1826)) {
        Py_XDECREF(cache_frame_d6c2189e8d8ddb8218d9095cd81d1826);

#if _DEBUG_REFCOUNTS
        if (cache_frame_d6c2189e8d8ddb8218d9095cd81d1826 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_d6c2189e8d8ddb8218d9095cd81d1826 = MAKE_FUNCTION_FRAME(codeobj_d6c2189e8d8ddb8218d9095cd81d1826, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_d6c2189e8d8ddb8218d9095cd81d1826->m_type_description == NULL);
    frame_d6c2189e8d8ddb8218d9095cd81d1826 = cache_frame_d6c2189e8d8ddb8218d9095cd81d1826;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_d6c2189e8d8ddb8218d9095cd81d1826);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_d6c2189e8d8ddb8218d9095cd81d1826) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[143]);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1695;
            type_description_1 = "ooccco";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_dialect);
        tmp_args_element_value_1 = par_dialect;
        frame_d6c2189e8d8ddb8218d9095cd81d1826->m_frame.f_lineno = 1695;
        tmp_assign_source_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[232], tmp_args_element_value_1);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1695;
            type_description_1 = "ooccco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_impl_processor) == NULL);
        PyCell_SET(var_impl_processor, tmp_assign_source_1);

    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_expression_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[239]);
        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1696;
            type_description_1 = "ooccco";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[243]);
        Py_DECREF(tmp_expression_value_2);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1696;
            type_description_1 = "ooccco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_dumps) == NULL);
        PyCell_SET(var_dumps, tmp_assign_source_2);

    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_expression_value_4;
        CHECK_OBJECT(par_self);
        tmp_expression_value_4 = par_self;
        tmp_assign_source_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[237]);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1697;
            type_description_1 = "ooccco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_protocol) == NULL);
        PyCell_SET(var_protocol, tmp_assign_source_3);

    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(Nuitka_Cell_GET(var_impl_processor));
        tmp_truth_name_1 = CHECK_IF_TRUE(Nuitka_Cell_GET(var_impl_processor));
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1698;
            type_description_1 = "ooccco";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_4;
        struct Nuitka_CellObject *tmp_closure_1[3];

        tmp_closure_1[0] = var_dumps;
        Py_INCREF(tmp_closure_1[0]);
        tmp_closure_1[1] = var_impl_processor;
        Py_INCREF(tmp_closure_1[1]);
        tmp_closure_1[2] = var_protocol;
        Py_INCREF(tmp_closure_1[2]);

        tmp_assign_source_4 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__88_bind_processor$$$function__1_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_4;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_5;
        struct Nuitka_CellObject *tmp_closure_2[2];

        tmp_closure_2[0] = var_dumps;
        Py_INCREF(tmp_closure_2[0]);
        tmp_closure_2[1] = var_protocol;
        Py_INCREF(tmp_closure_2[1]);

        tmp_assign_source_5 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__88_bind_processor$$$function__2_process(tmp_closure_2);

        assert(var_process == NULL);
        var_process = tmp_assign_source_5;
    }
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d6c2189e8d8ddb8218d9095cd81d1826);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d6c2189e8d8ddb8218d9095cd81d1826);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_d6c2189e8d8ddb8218d9095cd81d1826, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_d6c2189e8d8ddb8218d9095cd81d1826->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_d6c2189e8d8ddb8218d9095cd81d1826, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_d6c2189e8d8ddb8218d9095cd81d1826,
        type_description_1,
        par_self,
        par_dialect,
        var_impl_processor,
        var_dumps,
        var_protocol,
        var_process
    );


    // Release cached frame if used for exception.
    if (frame_d6c2189e8d8ddb8218d9095cd81d1826 == cache_frame_d6c2189e8d8ddb8218d9095cd81d1826) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_d6c2189e8d8ddb8218d9095cd81d1826);
        cache_frame_d6c2189e8d8ddb8218d9095cd81d1826 = NULL;
    }

    assertFrameObject(frame_d6c2189e8d8ddb8218d9095cd81d1826);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_impl_processor);
    Py_DECREF(var_impl_processor);
    var_impl_processor = NULL;
    CHECK_OBJECT(var_dumps);
    Py_DECREF(var_dumps);
    var_dumps = NULL;
    CHECK_OBJECT(var_protocol);
    Py_DECREF(var_protocol);
    var_protocol = NULL;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(var_impl_processor);
    Py_DECREF(var_impl_processor);
    var_impl_processor = NULL;
    CHECK_OBJECT(var_dumps);
    Py_DECREF(var_dumps);
    var_dumps = NULL;
    CHECK_OBJECT(var_protocol);
    Py_DECREF(var_protocol);
    var_protocol = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__88_bind_processor$$$function__1_process(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_4c8a56e694f5d15875d2ca208020840b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_4c8a56e694f5d15875d2ca208020840b = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_4c8a56e694f5d15875d2ca208020840b)) {
        Py_XDECREF(cache_frame_4c8a56e694f5d15875d2ca208020840b);

#if _DEBUG_REFCOUNTS
        if (cache_frame_4c8a56e694f5d15875d2ca208020840b == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_4c8a56e694f5d15875d2ca208020840b = MAKE_FUNCTION_FRAME(codeobj_4c8a56e694f5d15875d2ca208020840b, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_4c8a56e694f5d15875d2ca208020840b->m_type_description == NULL);
    frame_4c8a56e694f5d15875d2ca208020840b = cache_frame_4c8a56e694f5d15875d2ca208020840b;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_4c8a56e694f5d15875d2ca208020840b);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_4c8a56e694f5d15875d2ca208020840b) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_value);
        tmp_cmp_expr_left_1 = par_value;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[243]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1702;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }

        tmp_called_value_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        if (Nuitka_Cell_GET(self->m_closure[2]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[237]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1702;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }

        tmp_args_element_value_2 = Nuitka_Cell_GET(self->m_closure[2]);
        frame_4c8a56e694f5d15875d2ca208020840b->m_frame.f_lineno = 1702;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1702;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    branch_no_1:;
    {
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_3;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[245]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1703;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }

        tmp_called_value_2 = Nuitka_Cell_GET(self->m_closure[1]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_3 = par_value;
        frame_4c8a56e694f5d15875d2ca208020840b->m_frame.f_lineno = 1703;
        tmp_return_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_2, tmp_args_element_value_3);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1703;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_4c8a56e694f5d15875d2ca208020840b);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_4c8a56e694f5d15875d2ca208020840b);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_4c8a56e694f5d15875d2ca208020840b);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_4c8a56e694f5d15875d2ca208020840b, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_4c8a56e694f5d15875d2ca208020840b->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_4c8a56e694f5d15875d2ca208020840b, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_4c8a56e694f5d15875d2ca208020840b,
        type_description_1,
        par_value,
        self->m_closure[0],
        self->m_closure[2],
        self->m_closure[1]
    );


    // Release cached frame if used for exception.
    if (frame_4c8a56e694f5d15875d2ca208020840b == cache_frame_4c8a56e694f5d15875d2ca208020840b) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_4c8a56e694f5d15875d2ca208020840b);
        cache_frame_4c8a56e694f5d15875d2ca208020840b = NULL;
    }

    assertFrameObject(frame_4c8a56e694f5d15875d2ca208020840b);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    par_value = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_value);
    par_value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__88_bind_processor$$$function__2_process(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_9d17a7b500307add96efcef3a367ec57;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_9d17a7b500307add96efcef3a367ec57 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_9d17a7b500307add96efcef3a367ec57)) {
        Py_XDECREF(cache_frame_9d17a7b500307add96efcef3a367ec57);

#if _DEBUG_REFCOUNTS
        if (cache_frame_9d17a7b500307add96efcef3a367ec57 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_9d17a7b500307add96efcef3a367ec57 = MAKE_FUNCTION_FRAME(codeobj_9d17a7b500307add96efcef3a367ec57, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_9d17a7b500307add96efcef3a367ec57->m_type_description == NULL);
    frame_9d17a7b500307add96efcef3a367ec57 = cache_frame_9d17a7b500307add96efcef3a367ec57;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_9d17a7b500307add96efcef3a367ec57);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_9d17a7b500307add96efcef3a367ec57) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_value);
        tmp_cmp_expr_left_1 = par_value;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[243]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1709;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_value_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[237]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1709;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_args_element_value_2 = Nuitka_Cell_GET(self->m_closure[1]);
        frame_9d17a7b500307add96efcef3a367ec57->m_frame.f_lineno = 1709;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1709;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    branch_no_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9d17a7b500307add96efcef3a367ec57);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9d17a7b500307add96efcef3a367ec57);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_9d17a7b500307add96efcef3a367ec57, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_9d17a7b500307add96efcef3a367ec57->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_9d17a7b500307add96efcef3a367ec57, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_9d17a7b500307add96efcef3a367ec57,
        type_description_1,
        par_value,
        self->m_closure[0],
        self->m_closure[1]
    );


    // Release cached frame if used for exception.
    if (frame_9d17a7b500307add96efcef3a367ec57 == cache_frame_9d17a7b500307add96efcef3a367ec57) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_9d17a7b500307add96efcef3a367ec57);
        cache_frame_9d17a7b500307add96efcef3a367ec57 = NULL;
    }

    assertFrameObject(frame_9d17a7b500307add96efcef3a367ec57);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT(par_value);
    tmp_return_value = par_value;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    par_value = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    par_value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__89_result_processor(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    PyObject *par_coltype = python_pars[2];
    struct Nuitka_CellObject *var_impl_processor = Nuitka_Cell_Empty();
    struct Nuitka_CellObject *var_loads = Nuitka_Cell_Empty();
    PyObject *var_process = NULL;
    struct Nuitka_FrameObject *frame_e75df1520546e1544b8084b31ce6b779;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_e75df1520546e1544b8084b31ce6b779 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_e75df1520546e1544b8084b31ce6b779)) {
        Py_XDECREF(cache_frame_e75df1520546e1544b8084b31ce6b779);

#if _DEBUG_REFCOUNTS
        if (cache_frame_e75df1520546e1544b8084b31ce6b779 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_e75df1520546e1544b8084b31ce6b779 = MAKE_FUNCTION_FRAME(codeobj_e75df1520546e1544b8084b31ce6b779, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_e75df1520546e1544b8084b31ce6b779->m_type_description == NULL);
    frame_e75df1520546e1544b8084b31ce6b779 = cache_frame_e75df1520546e1544b8084b31ce6b779;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_e75df1520546e1544b8084b31ce6b779);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_e75df1520546e1544b8084b31ce6b779) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[143]);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1715;
            type_description_1 = "ooocco";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_dialect);
        tmp_args_element_value_1 = par_dialect;
        CHECK_OBJECT(par_coltype);
        tmp_args_element_value_2 = par_coltype;
        frame_e75df1520546e1544b8084b31ce6b779->m_frame.f_lineno = 1715;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assign_source_1 = CALL_METHOD_WITH_ARGS2(
                tmp_called_instance_1,
                mod_consts[233],
                call_args
            );
        }

        Py_DECREF(tmp_called_instance_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1715;
            type_description_1 = "ooocco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_impl_processor) == NULL);
        PyCell_SET(var_impl_processor, tmp_assign_source_1);

    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_expression_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[239]);
        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1716;
            type_description_1 = "ooocco";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[246]);
        Py_DECREF(tmp_expression_value_2);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1716;
            type_description_1 = "ooocco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_loads) == NULL);
        PyCell_SET(var_loads, tmp_assign_source_2);

    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(Nuitka_Cell_GET(var_impl_processor));
        tmp_truth_name_1 = CHECK_IF_TRUE(Nuitka_Cell_GET(var_impl_processor));
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1717;
            type_description_1 = "ooocco";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_3;
        struct Nuitka_CellObject *tmp_closure_1[2];

        tmp_closure_1[0] = var_impl_processor;
        Py_INCREF(tmp_closure_1[0]);
        tmp_closure_1[1] = var_loads;
        Py_INCREF(tmp_closure_1[1]);

        tmp_assign_source_3 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__89_result_processor$$$function__1_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_3;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_4;
        struct Nuitka_CellObject *tmp_closure_2[1];

        tmp_closure_2[0] = var_loads;
        Py_INCREF(tmp_closure_2[0]);

        tmp_assign_source_4 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__89_result_processor$$$function__2_process(tmp_closure_2);

        assert(var_process == NULL);
        var_process = tmp_assign_source_4;
    }
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e75df1520546e1544b8084b31ce6b779);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e75df1520546e1544b8084b31ce6b779);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_e75df1520546e1544b8084b31ce6b779, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_e75df1520546e1544b8084b31ce6b779->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_e75df1520546e1544b8084b31ce6b779, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_e75df1520546e1544b8084b31ce6b779,
        type_description_1,
        par_self,
        par_dialect,
        par_coltype,
        var_impl_processor,
        var_loads,
        var_process
    );


    // Release cached frame if used for exception.
    if (frame_e75df1520546e1544b8084b31ce6b779 == cache_frame_e75df1520546e1544b8084b31ce6b779) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_e75df1520546e1544b8084b31ce6b779);
        cache_frame_e75df1520546e1544b8084b31ce6b779 = NULL;
    }

    assertFrameObject(frame_e75df1520546e1544b8084b31ce6b779);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_impl_processor);
    Py_DECREF(var_impl_processor);
    var_impl_processor = NULL;
    CHECK_OBJECT(var_loads);
    Py_DECREF(var_loads);
    var_loads = NULL;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(var_impl_processor);
    Py_DECREF(var_impl_processor);
    var_impl_processor = NULL;
    CHECK_OBJECT(var_loads);
    Py_DECREF(var_loads);
    var_loads = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__89_result_processor$$$function__1_process(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_180a86d96068098c506a7ad191e7fe62;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_180a86d96068098c506a7ad191e7fe62 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_180a86d96068098c506a7ad191e7fe62)) {
        Py_XDECREF(cache_frame_180a86d96068098c506a7ad191e7fe62);

#if _DEBUG_REFCOUNTS
        if (cache_frame_180a86d96068098c506a7ad191e7fe62 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_180a86d96068098c506a7ad191e7fe62 = MAKE_FUNCTION_FRAME(codeobj_180a86d96068098c506a7ad191e7fe62, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_180a86d96068098c506a7ad191e7fe62->m_type_description == NULL);
    frame_180a86d96068098c506a7ad191e7fe62 = cache_frame_180a86d96068098c506a7ad191e7fe62;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_180a86d96068098c506a7ad191e7fe62);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_180a86d96068098c506a7ad191e7fe62) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[245]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1720;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_value_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        frame_180a86d96068098c506a7ad191e7fe62->m_frame.f_lineno = 1720;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1720;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_value);
        tmp_cmp_expr_left_1 = par_value;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_no_1:;
    {
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_2;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[246]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1723;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_value_2 = Nuitka_Cell_GET(self->m_closure[1]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_2 = par_value;
        frame_180a86d96068098c506a7ad191e7fe62->m_frame.f_lineno = 1723;
        tmp_return_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_2, tmp_args_element_value_2);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1723;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_180a86d96068098c506a7ad191e7fe62);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_180a86d96068098c506a7ad191e7fe62);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_180a86d96068098c506a7ad191e7fe62);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_180a86d96068098c506a7ad191e7fe62, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_180a86d96068098c506a7ad191e7fe62->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_180a86d96068098c506a7ad191e7fe62, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_180a86d96068098c506a7ad191e7fe62,
        type_description_1,
        par_value,
        self->m_closure[0],
        self->m_closure[1]
    );


    // Release cached frame if used for exception.
    if (frame_180a86d96068098c506a7ad191e7fe62 == cache_frame_180a86d96068098c506a7ad191e7fe62) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_180a86d96068098c506a7ad191e7fe62);
        cache_frame_180a86d96068098c506a7ad191e7fe62 = NULL;
    }

    assertFrameObject(frame_180a86d96068098c506a7ad191e7fe62);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(par_value);
    par_value = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_value);
    par_value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__89_result_processor$$$function__2_process(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    PyObject *tmp_return_value = NULL;
    struct Nuitka_FrameObject *frame_3d11807b5a58354e263d81c58bcef810;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_3d11807b5a58354e263d81c58bcef810 = NULL;

    // Actual function body.
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_value);
        tmp_cmp_expr_left_1 = par_value;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;
    branch_no_1:;
    if (isFrameUnusable(cache_frame_3d11807b5a58354e263d81c58bcef810)) {
        Py_XDECREF(cache_frame_3d11807b5a58354e263d81c58bcef810);

#if _DEBUG_REFCOUNTS
        if (cache_frame_3d11807b5a58354e263d81c58bcef810 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_3d11807b5a58354e263d81c58bcef810 = MAKE_FUNCTION_FRAME(codeobj_3d11807b5a58354e263d81c58bcef810, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_3d11807b5a58354e263d81c58bcef810->m_type_description == NULL);
    frame_3d11807b5a58354e263d81c58bcef810 = cache_frame_3d11807b5a58354e263d81c58bcef810;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_3d11807b5a58354e263d81c58bcef810);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_3d11807b5a58354e263d81c58bcef810) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[246]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1730;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_called_value_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        frame_3d11807b5a58354e263d81c58bcef810->m_frame.f_lineno = 1730;
        tmp_return_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1730;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_3d11807b5a58354e263d81c58bcef810);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_3d11807b5a58354e263d81c58bcef810);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_3d11807b5a58354e263d81c58bcef810);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_3d11807b5a58354e263d81c58bcef810, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_3d11807b5a58354e263d81c58bcef810->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_3d11807b5a58354e263d81c58bcef810, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_3d11807b5a58354e263d81c58bcef810,
        type_description_1,
        par_value,
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_3d11807b5a58354e263d81c58bcef810 == cache_frame_3d11807b5a58354e263d81c58bcef810) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_3d11807b5a58354e263d81c58bcef810);
        cache_frame_3d11807b5a58354e263d81c58bcef810 = NULL;
    }

    assertFrameObject(frame_3d11807b5a58354e263d81c58bcef810);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__90_compare_values(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_x = python_pars[1];
    PyObject *par_y = python_pars[2];
    struct Nuitka_FrameObject *frame_7b9907040ed376eb8922a1e4d91f706e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_7b9907040ed376eb8922a1e4d91f706e = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_7b9907040ed376eb8922a1e4d91f706e)) {
        Py_XDECREF(cache_frame_7b9907040ed376eb8922a1e4d91f706e);

#if _DEBUG_REFCOUNTS
        if (cache_frame_7b9907040ed376eb8922a1e4d91f706e == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_7b9907040ed376eb8922a1e4d91f706e = MAKE_FUNCTION_FRAME(codeobj_7b9907040ed376eb8922a1e4d91f706e, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_7b9907040ed376eb8922a1e4d91f706e->m_type_description == NULL);
    frame_7b9907040ed376eb8922a1e4d91f706e = cache_frame_7b9907040ed376eb8922a1e4d91f706e;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_7b9907040ed376eb8922a1e4d91f706e);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_7b9907040ed376eb8922a1e4d91f706e) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[240]);
        if (tmp_attribute_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1735;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 1735;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_called_instance_1 = par_self;
        CHECK_OBJECT(par_x);
        tmp_args_element_value_1 = par_x;
        CHECK_OBJECT(par_y);
        tmp_args_element_value_2 = par_y;
        frame_7b9907040ed376eb8922a1e4d91f706e->m_frame.f_lineno = 1736;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_return_value = CALL_METHOD_WITH_ARGS2(
                tmp_called_instance_1,
                mod_consts[240],
                call_args
            );
        }

        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1736;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_x);
        tmp_cmp_expr_left_1 = par_x;
        CHECK_OBJECT(par_y);
        tmp_cmp_expr_right_1 = par_y;
        tmp_return_value = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1738;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_7b9907040ed376eb8922a1e4d91f706e);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_7b9907040ed376eb8922a1e4d91f706e);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_7b9907040ed376eb8922a1e4d91f706e);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_7b9907040ed376eb8922a1e4d91f706e, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_7b9907040ed376eb8922a1e4d91f706e->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_7b9907040ed376eb8922a1e4d91f706e, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_7b9907040ed376eb8922a1e4d91f706e,
        type_description_1,
        par_self,
        par_x,
        par_y
    );


    // Release cached frame if used for exception.
    if (frame_7b9907040ed376eb8922a1e4d91f706e == cache_frame_7b9907040ed376eb8922a1e4d91f706e) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_7b9907040ed376eb8922a1e4d91f706e);
        cache_frame_7b9907040ed376eb8922a1e4d91f706e = NULL;
    }

    assertFrameObject(frame_7b9907040ed376eb8922a1e4d91f706e);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_x);
    Py_DECREF(par_x);
    CHECK_OBJECT(par_y);
    Py_DECREF(par_y);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_x);
    Py_DECREF(par_x);
    CHECK_OBJECT(par_y);
    Py_DECREF(par_y);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__91___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_create_constraint = python_pars[1];
    PyObject *par_name = python_pars[2];
    PyObject *par__create_events = python_pars[3];
    struct Nuitka_FrameObject *frame_edd1ad7a4a448a44712386309b66849f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_edd1ad7a4a448a44712386309b66849f = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_edd1ad7a4a448a44712386309b66849f)) {
        Py_XDECREF(cache_frame_edd1ad7a4a448a44712386309b66849f);

#if _DEBUG_REFCOUNTS
        if (cache_frame_edd1ad7a4a448a44712386309b66849f == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_edd1ad7a4a448a44712386309b66849f = MAKE_FUNCTION_FRAME(codeobj_edd1ad7a4a448a44712386309b66849f, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_edd1ad7a4a448a44712386309b66849f->m_type_description == NULL);
    frame_edd1ad7a4a448a44712386309b66849f = cache_frame_edd1ad7a4a448a44712386309b66849f;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_edd1ad7a4a448a44712386309b66849f);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_edd1ad7a4a448a44712386309b66849f) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_create_constraint);
        tmp_assattr_value_1 = par_create_constraint;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[172], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1777;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT(par_name);
        tmp_assattr_value_2 = par_name;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[93], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1778;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_3;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT(par__create_events);
        tmp_assattr_value_3 = par__create_events;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_3, mod_consts[130], tmp_assattr_value_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1779;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_edd1ad7a4a448a44712386309b66849f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_edd1ad7a4a448a44712386309b66849f);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_edd1ad7a4a448a44712386309b66849f, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_edd1ad7a4a448a44712386309b66849f->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_edd1ad7a4a448a44712386309b66849f, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_edd1ad7a4a448a44712386309b66849f,
        type_description_1,
        par_self,
        par_create_constraint,
        par_name,
        par__create_events
    );


    // Release cached frame if used for exception.
    if (frame_edd1ad7a4a448a44712386309b66849f == cache_frame_edd1ad7a4a448a44712386309b66849f) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_edd1ad7a4a448a44712386309b66849f);
        cache_frame_edd1ad7a4a448a44712386309b66849f = NULL;
    }

    assertFrameObject(frame_edd1ad7a4a448a44712386309b66849f);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_create_constraint);
    Py_DECREF(par_create_constraint);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par__create_events);
    Py_DECREF(par__create_events);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_create_constraint);
    Py_DECREF(par_create_constraint);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par__create_events);
    Py_DECREF(par__create_events);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__92__should_create_constraint(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_compiler = python_pars[1];
    PyObject *par_kw = python_pars[2];
    struct Nuitka_FrameObject *frame_e7b0c7bb7c3feca116a78f79da4f3ff2;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_e7b0c7bb7c3feca116a78f79da4f3ff2 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_e7b0c7bb7c3feca116a78f79da4f3ff2)) {
        Py_XDECREF(cache_frame_e7b0c7bb7c3feca116a78f79da4f3ff2);

#if _DEBUG_REFCOUNTS
        if (cache_frame_e7b0c7bb7c3feca116a78f79da4f3ff2 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_e7b0c7bb7c3feca116a78f79da4f3ff2 = MAKE_FUNCTION_FRAME(codeobj_e7b0c7bb7c3feca116a78f79da4f3ff2, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_e7b0c7bb7c3feca116a78f79da4f3ff2->m_type_description == NULL);
    frame_e7b0c7bb7c3feca116a78f79da4f3ff2 = cache_frame_e7b0c7bb7c3feca116a78f79da4f3ff2;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_e7b0c7bb7c3feca116a78f79da4f3ff2);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_e7b0c7bb7c3feca116a78f79da4f3ff2) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[163]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1782;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_compiler);
        tmp_expression_value_2 = par_compiler;
        tmp_args_element_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[32]);
        if (tmp_args_element_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1782;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_kw);
        tmp_args_element_value_2 = par_kw;
        frame_e7b0c7bb7c3feca116a78f79da4f3ff2->m_frame.f_lineno = 1782;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_operand_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_operand_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1782;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        Py_DECREF(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1782;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_False;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_no_1:;
    {
        int tmp_and_left_truth_1;
        PyObject *tmp_and_left_value_1;
        PyObject *tmp_and_right_value_1;
        PyObject *tmp_operand_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_expression_value_6;
        CHECK_OBJECT(par_compiler);
        tmp_expression_value_4 = par_compiler;
        tmp_expression_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[32]);
        if (tmp_expression_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1785;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_operand_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[249]);
        Py_DECREF(tmp_expression_value_3);
        if (tmp_operand_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1785;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_2);
        Py_DECREF(tmp_operand_value_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1785;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_res == 0) ? Py_True : Py_False;
        tmp_and_left_truth_1 = CHECK_IF_TRUE(tmp_and_left_value_1);
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(par_compiler);
        tmp_expression_value_6 = par_compiler;
        tmp_expression_value_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[32]);
        if (tmp_expression_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1786;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[250]);
        Py_DECREF(tmp_expression_value_5);
        if (tmp_and_right_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1786;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_return_value = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        Py_INCREF(tmp_and_left_value_1);
        tmp_return_value = tmp_and_left_value_1;
        and_end_1:;
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e7b0c7bb7c3feca116a78f79da4f3ff2);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_e7b0c7bb7c3feca116a78f79da4f3ff2);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e7b0c7bb7c3feca116a78f79da4f3ff2);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_e7b0c7bb7c3feca116a78f79da4f3ff2, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_e7b0c7bb7c3feca116a78f79da4f3ff2->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_e7b0c7bb7c3feca116a78f79da4f3ff2, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_e7b0c7bb7c3feca116a78f79da4f3ff2,
        type_description_1,
        par_self,
        par_compiler,
        par_kw
    );


    // Release cached frame if used for exception.
    if (frame_e7b0c7bb7c3feca116a78f79da4f3ff2 == cache_frame_e7b0c7bb7c3feca116a78f79da4f3ff2) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_e7b0c7bb7c3feca116a78f79da4f3ff2);
        cache_frame_e7b0c7bb7c3feca116a78f79da4f3ff2 = NULL;
    }

    assertFrameObject(frame_e7b0c7bb7c3feca116a78f79da4f3ff2);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_compiler);
    Py_DECREF(par_compiler);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_compiler);
    Py_DECREF(par_compiler);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__93__set_table(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_schema = python_pars[1];
    PyObject *par_column = python_pars[2];
    PyObject *par_table = python_pars[3];
    PyObject *var_variant_mapping = NULL;
    PyObject *var_e = NULL;
    struct Nuitka_FrameObject *frame_9edba9d640a5664248a1ad2a8c15ea20;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_9edba9d640a5664248a1ad2a8c15ea20 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_9edba9d640a5664248a1ad2a8c15ea20)) {
        Py_XDECREF(cache_frame_9edba9d640a5664248a1ad2a8c15ea20);

#if _DEBUG_REFCOUNTS
        if (cache_frame_9edba9d640a5664248a1ad2a8c15ea20 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_9edba9d640a5664248a1ad2a8c15ea20 = MAKE_FUNCTION_FRAME(codeobj_9edba9d640a5664248a1ad2a8c15ea20, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_9edba9d640a5664248a1ad2a8c15ea20->m_type_description == NULL);
    frame_9edba9d640a5664248a1ad2a8c15ea20 = cache_frame_9edba9d640a5664248a1ad2a8c15ea20;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_9edba9d640a5664248a1ad2a8c15ea20);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_9edba9d640a5664248a1ad2a8c15ea20) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_operand_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[172]);
        if (tmp_operand_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1791;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        Py_DECREF(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1791;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_1;
        CHECK_OBJECT(par_self);
        tmp_called_instance_1 = par_self;
        CHECK_OBJECT(par_column);
        tmp_args_element_value_1 = par_column;
        frame_9edba9d640a5664248a1ad2a8c15ea20->m_frame.f_lineno = 1794;
        tmp_assign_source_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[146], tmp_args_element_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1794;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(var_variant_mapping == NULL);
        var_variant_mapping = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_call_arg_element_1;
        PyObject *tmp_kw_call_dict_value_0_1;
        PyObject *tmp_called_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_kw_call_dict_value_1_1;
        PyObject *tmp_called_value_4;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_args_element_value_6;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_kw_call_dict_value_2_1;
        CHECK_OBJECT(par_schema);
        tmp_expression_value_2 = par_schema;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[222]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1796;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[223]);

        if (unlikely(tmp_called_value_2 == NULL)) {
            tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[223]);
        }

        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1797;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_column);
        tmp_args_element_value_2 = par_column;
        CHECK_OBJECT(par_self);
        tmp_args_element_value_3 = par_self;
        frame_9edba9d640a5664248a1ad2a8c15ea20->m_frame.f_lineno = 1797;
        {
            PyObject *call_args[] = {tmp_args_element_value_2, tmp_args_element_value_3};
            tmp_called_instance_2 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_2, call_args);
        }

        if (tmp_called_instance_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1797;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_call_arg_element_1 = LIST_COPY(mod_consts[251]);
        frame_9edba9d640a5664248a1ad2a8c15ea20->m_frame.f_lineno = 1797;
        tmp_kw_call_arg_value_0_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_2, mod_consts[224], tmp_call_arg_element_1);
        Py_DECREF(tmp_called_instance_2);
        Py_DECREF(tmp_call_arg_element_1);
        if (tmp_kw_call_arg_value_0_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1797;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[225]);

        if (unlikely(tmp_called_value_3 == NULL)) {
            tmp_called_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[225]);
        }

        if (tmp_called_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);

            exception_lineno = 1798;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_args_element_value_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[93]);
        if (tmp_args_element_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);

            exception_lineno = 1798;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        frame_9edba9d640a5664248a1ad2a8c15ea20->m_frame.f_lineno = 1798;
        tmp_kw_call_dict_value_0_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_3, tmp_args_element_value_4);
        Py_DECREF(tmp_args_element_value_4);
        if (tmp_kw_call_dict_value_0_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);

            exception_lineno = 1798;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_4 == NULL)) {
            tmp_expression_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
        }

        if (tmp_expression_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_0_1);

            exception_lineno = 1799;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[134]);
        if (tmp_called_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_0_1);

            exception_lineno = 1799;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_5 = par_self;
        tmp_args_element_value_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[226]);
        if (tmp_args_element_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_0_1);
            Py_DECREF(tmp_called_value_4);

            exception_lineno = 1800;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = mod_consts[145];
        CHECK_OBJECT(var_variant_mapping);
        tmp_dict_value_1 = var_variant_mapping;
        tmp_args_element_value_6 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_args_element_value_6, tmp_dict_key_1, tmp_dict_value_1);
        assert(!(tmp_res != 0));
        frame_9edba9d640a5664248a1ad2a8c15ea20->m_frame.f_lineno = 1799;
        {
            PyObject *call_args[] = {tmp_args_element_value_5, tmp_args_element_value_6};
            tmp_kw_call_dict_value_1_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_4, call_args);
        }

        Py_DECREF(tmp_called_value_4);
        Py_DECREF(tmp_args_element_value_5);
        Py_DECREF(tmp_args_element_value_6);
        if (tmp_kw_call_dict_value_1_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_0_1);

            exception_lineno = 1799;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_kw_call_dict_value_2_1 = Py_True;
        frame_9edba9d640a5664248a1ad2a8c15ea20->m_frame.f_lineno = 1796;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1};
            PyObject *kw_values[3] = {tmp_kw_call_dict_value_0_1, tmp_kw_call_dict_value_1_1, tmp_kw_call_dict_value_2_1};
            tmp_assign_source_2 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tmp_called_value_1, args, kw_values, mod_consts[227]);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_kw_call_arg_value_0_1);
        Py_DECREF(tmp_kw_call_dict_value_0_1);
        Py_DECREF(tmp_kw_call_dict_value_1_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1796;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(var_e == NULL);
        var_e = tmp_assign_source_2;
    }
    {
        bool tmp_condition_result_2;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_6;
        CHECK_OBJECT(var_e);
        tmp_expression_value_6 = var_e;
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[147]);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1805;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_table);
        tmp_cmp_expr_right_1 = par_table;
        tmp_condition_result_2 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? true : false;
        Py_DECREF(tmp_cmp_expr_left_1);
        if (tmp_condition_result_2 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_raise_type_1;
        tmp_raise_type_1 = PyExc_AssertionError;
        exception_type = tmp_raise_type_1;
        Py_INCREF(tmp_raise_type_1);
        exception_lineno = 1805;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }
    branch_no_2:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9edba9d640a5664248a1ad2a8c15ea20);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_9edba9d640a5664248a1ad2a8c15ea20);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9edba9d640a5664248a1ad2a8c15ea20);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_9edba9d640a5664248a1ad2a8c15ea20, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_9edba9d640a5664248a1ad2a8c15ea20->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_9edba9d640a5664248a1ad2a8c15ea20, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_9edba9d640a5664248a1ad2a8c15ea20,
        type_description_1,
        par_self,
        par_schema,
        par_column,
        par_table,
        var_variant_mapping,
        var_e
    );


    // Release cached frame if used for exception.
    if (frame_9edba9d640a5664248a1ad2a8c15ea20 == cache_frame_9edba9d640a5664248a1ad2a8c15ea20) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_9edba9d640a5664248a1ad2a8c15ea20);
        cache_frame_9edba9d640a5664248a1ad2a8c15ea20 = NULL;
    }

    assertFrameObject(frame_9edba9d640a5664248a1ad2a8c15ea20);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_variant_mapping);
    var_variant_mapping = NULL;
    Py_XDECREF(var_e);
    var_e = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_variant_mapping);
    var_variant_mapping = NULL;
    Py_XDECREF(var_e);
    var_e = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_schema);
    Py_DECREF(par_schema);
    CHECK_OBJECT(par_column);
    Py_DECREF(par_column);
    CHECK_OBJECT(par_table);
    Py_DECREF(par_table);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_schema);
    Py_DECREF(par_schema);
    CHECK_OBJECT(par_column);
    Py_DECREF(par_column);
    CHECK_OBJECT(par_table);
    Py_DECREF(par_table);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__95__strict_as_bool(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_value = python_pars[1];
    struct Nuitka_FrameObject *frame_f3fde94ee97be72f9f754c770f4662f0;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_f3fde94ee97be72f9f754c770f4662f0 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_f3fde94ee97be72f9f754c770f4662f0)) {
        Py_XDECREF(cache_frame_f3fde94ee97be72f9f754c770f4662f0);

#if _DEBUG_REFCOUNTS
        if (cache_frame_f3fde94ee97be72f9f754c770f4662f0 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_f3fde94ee97be72f9f754c770f4662f0 = MAKE_FUNCTION_FRAME(codeobj_f3fde94ee97be72f9f754c770f4662f0, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_f3fde94ee97be72f9f754c770f4662f0->m_type_description == NULL);
    frame_f3fde94ee97be72f9f754c770f4662f0 = cache_frame_f3fde94ee97be72f9f754c770f4662f0;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_f3fde94ee97be72f9f754c770f4662f0);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_f3fde94ee97be72f9f754c770f4662f0) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_value);
        tmp_cmp_expr_left_1 = par_value;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_cmp_expr_right_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[252]);
        if (tmp_cmp_expr_right_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1814;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_res = PySequence_Contains(tmp_cmp_expr_right_1, tmp_cmp_expr_left_1);
        Py_DECREF(tmp_cmp_expr_right_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1814;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        bool tmp_condition_result_2;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT(par_value);
        tmp_isinstance_inst_1 = par_value;
        tmp_isinstance_cls_1 = (PyObject *)&PyLong_Type;
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1815;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_operand_value_1 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1815;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_2 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_make_exception_arg_1;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        tmp_left_value_1 = mod_consts[253];
        CHECK_OBJECT(par_value);
        tmp_right_value_1 = par_value;
        tmp_make_exception_arg_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_left_value_1, tmp_right_value_1);
        if (tmp_make_exception_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1816;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_f3fde94ee97be72f9f754c770f4662f0->m_frame.f_lineno = 1816;
        tmp_raise_type_1 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_TypeError, tmp_make_exception_arg_1);
        Py_DECREF(tmp_make_exception_arg_1);
        assert(!(tmp_raise_type_1 == NULL));
        exception_type = tmp_raise_type_1;
        exception_lineno = 1816;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_raise_type_2;
        PyObject *tmp_make_exception_arg_2;
        PyObject *tmp_left_value_2;
        PyObject *tmp_right_value_2;
        tmp_left_value_2 = mod_consts[254];
        CHECK_OBJECT(par_value);
        tmp_right_value_2 = par_value;
        tmp_make_exception_arg_2 = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_left_value_2, tmp_right_value_2);
        if (tmp_make_exception_arg_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1819;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_f3fde94ee97be72f9f754c770f4662f0->m_frame.f_lineno = 1818;
        tmp_raise_type_2 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_ValueError, tmp_make_exception_arg_2);
        Py_DECREF(tmp_make_exception_arg_2);
        assert(!(tmp_raise_type_2 == NULL));
        exception_type = tmp_raise_type_2;
        exception_lineno = 1818;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    branch_end_2:;
    branch_no_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_f3fde94ee97be72f9f754c770f4662f0);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_f3fde94ee97be72f9f754c770f4662f0);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_f3fde94ee97be72f9f754c770f4662f0, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_f3fde94ee97be72f9f754c770f4662f0->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_f3fde94ee97be72f9f754c770f4662f0, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_f3fde94ee97be72f9f754c770f4662f0,
        type_description_1,
        par_self,
        par_value
    );


    // Release cached frame if used for exception.
    if (frame_f3fde94ee97be72f9f754c770f4662f0 == cache_frame_f3fde94ee97be72f9f754c770f4662f0) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_f3fde94ee97be72f9f754c770f4662f0);
        cache_frame_f3fde94ee97be72f9f754c770f4662f0 = NULL;
    }

    assertFrameObject(frame_f3fde94ee97be72f9f754c770f4662f0);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    CHECK_OBJECT(par_value);
    tmp_return_value = par_value;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__96_literal_processor(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = Nuitka_Cell_New1(python_pars[0]);
    PyObject *par_dialect = python_pars[1];
    PyObject *var_compiler = NULL;
    struct Nuitka_CellObject *var_true = Nuitka_Cell_Empty();
    struct Nuitka_CellObject *var_false = Nuitka_Cell_Empty();
    PyObject *var_process = NULL;
    struct Nuitka_FrameObject *frame_db9ff17a464d992a5a6416cb07c39126;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_db9ff17a464d992a5a6416cb07c39126 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_db9ff17a464d992a5a6416cb07c39126)) {
        Py_XDECREF(cache_frame_db9ff17a464d992a5a6416cb07c39126);

#if _DEBUG_REFCOUNTS
        if (cache_frame_db9ff17a464d992a5a6416cb07c39126 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_db9ff17a464d992a5a6416cb07c39126 = MAKE_FUNCTION_FRAME(codeobj_db9ff17a464d992a5a6416cb07c39126, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_db9ff17a464d992a5a6416cb07c39126->m_type_description == NULL);
    frame_db9ff17a464d992a5a6416cb07c39126 = cache_frame_db9ff17a464d992a5a6416cb07c39126;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_db9ff17a464d992a5a6416cb07c39126);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_db9ff17a464d992a5a6416cb07c39126) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_dialect);
        tmp_called_instance_1 = par_dialect;
        CHECK_OBJECT(par_dialect);
        tmp_args_element_value_1 = par_dialect;
        tmp_args_element_value_2 = Py_None;
        frame_db9ff17a464d992a5a6416cb07c39126->m_frame.f_lineno = 1824;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assign_source_1 = CALL_METHOD_WITH_ARGS2(
                tmp_called_instance_1,
                mod_consts[255],
                call_args
            );
        }

        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1824;
            type_description_1 = "coocco";
            goto frame_exception_exit_1;
        }
        assert(var_compiler == NULL);
        var_compiler = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_2;
        CHECK_OBJECT(var_compiler);
        tmp_called_instance_2 = var_compiler;
        frame_db9ff17a464d992a5a6416cb07c39126->m_frame.f_lineno = 1825;
        tmp_assign_source_2 = CALL_METHOD_WITH_SINGLE_ARG(
            tmp_called_instance_2,
            mod_consts[256],
            PyTuple_GET_ITEM(mod_consts[257], 0)
        );

        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1825;
            type_description_1 = "coocco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_true) == NULL);
        PyCell_SET(var_true, tmp_assign_source_2);

    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_instance_3;
        CHECK_OBJECT(var_compiler);
        tmp_called_instance_3 = var_compiler;
        frame_db9ff17a464d992a5a6416cb07c39126->m_frame.f_lineno = 1826;
        tmp_assign_source_3 = CALL_METHOD_WITH_SINGLE_ARG(
            tmp_called_instance_3,
            mod_consts[258],
            PyTuple_GET_ITEM(mod_consts[257], 0)
        );

        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1826;
            type_description_1 = "coocco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_false) == NULL);
        PyCell_SET(var_false, tmp_assign_source_3);

    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_db9ff17a464d992a5a6416cb07c39126);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_db9ff17a464d992a5a6416cb07c39126);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_db9ff17a464d992a5a6416cb07c39126, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_db9ff17a464d992a5a6416cb07c39126->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_db9ff17a464d992a5a6416cb07c39126, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_db9ff17a464d992a5a6416cb07c39126,
        type_description_1,
        par_self,
        par_dialect,
        var_compiler,
        var_true,
        var_false,
        var_process
    );


    // Release cached frame if used for exception.
    if (frame_db9ff17a464d992a5a6416cb07c39126 == cache_frame_db9ff17a464d992a5a6416cb07c39126) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_db9ff17a464d992a5a6416cb07c39126);
        cache_frame_db9ff17a464d992a5a6416cb07c39126 = NULL;
    }

    assertFrameObject(frame_db9ff17a464d992a5a6416cb07c39126);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    {
        PyObject *tmp_assign_source_4;
        struct Nuitka_CellObject *tmp_closure_1[3];

        tmp_closure_1[0] = var_false;
        Py_INCREF(tmp_closure_1[0]);
        tmp_closure_1[1] = par_self;
        Py_INCREF(tmp_closure_1[1]);
        tmp_closure_1[2] = var_true;
        Py_INCREF(tmp_closure_1[2]);

        tmp_assign_source_4 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__96_literal_processor$$$function__1_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_4;
    }
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_compiler);
    Py_DECREF(var_compiler);
    var_compiler = NULL;
    CHECK_OBJECT(var_true);
    Py_DECREF(var_true);
    var_true = NULL;
    CHECK_OBJECT(var_false);
    Py_DECREF(var_false);
    var_false = NULL;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_compiler);
    var_compiler = NULL;
    CHECK_OBJECT(var_true);
    Py_DECREF(var_true);
    var_true = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__96_literal_processor$$$function__1_process(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_8b4d492b04debbbf1882680dd19ce299;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_8b4d492b04debbbf1882680dd19ce299 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_8b4d492b04debbbf1882680dd19ce299)) {
        Py_XDECREF(cache_frame_8b4d492b04debbbf1882680dd19ce299);

#if _DEBUG_REFCOUNTS
        if (cache_frame_8b4d492b04debbbf1882680dd19ce299 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_8b4d492b04debbbf1882680dd19ce299 = MAKE_FUNCTION_FRAME(codeobj_8b4d492b04debbbf1882680dd19ce299, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_8b4d492b04debbbf1882680dd19ce299->m_type_description == NULL);
    frame_8b4d492b04debbbf1882680dd19ce299 = cache_frame_8b4d492b04debbbf1882680dd19ce299;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_8b4d492b04debbbf1882680dd19ce299);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_8b4d492b04debbbf1882680dd19ce299) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_1;
        int tmp_truth_name_1;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1829;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = Nuitka_Cell_GET(self->m_closure[1]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        frame_8b4d492b04debbbf1882680dd19ce299->m_frame.f_lineno = 1829;
        tmp_call_result_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[260], tmp_args_element_value_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1829;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_call_result_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_call_result_1);

            exception_lineno = 1829;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_call_result_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_1;
        } else {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        if (Nuitka_Cell_GET(self->m_closure[2]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[261]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1829;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }

        tmp_return_value = Nuitka_Cell_GET(self->m_closure[2]);
        goto condexpr_end_1;
        condexpr_false_1:;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[262]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1829;
            type_description_1 = "occc";
            goto frame_exception_exit_1;
        }

        tmp_return_value = Nuitka_Cell_GET(self->m_closure[0]);
        condexpr_end_1:;
        Py_INCREF(tmp_return_value);
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_8b4d492b04debbbf1882680dd19ce299);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_8b4d492b04debbbf1882680dd19ce299);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_8b4d492b04debbbf1882680dd19ce299);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_8b4d492b04debbbf1882680dd19ce299, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_8b4d492b04debbbf1882680dd19ce299->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_8b4d492b04debbbf1882680dd19ce299, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_8b4d492b04debbbf1882680dd19ce299,
        type_description_1,
        par_value,
        self->m_closure[1],
        self->m_closure[2],
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_8b4d492b04debbbf1882680dd19ce299 == cache_frame_8b4d492b04debbbf1882680dd19ce299) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_8b4d492b04debbbf1882680dd19ce299);
        cache_frame_8b4d492b04debbbf1882680dd19ce299 = NULL;
    }

    assertFrameObject(frame_8b4d492b04debbbf1882680dd19ce299);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__97_bind_processor(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    struct Nuitka_CellObject *var__strict_as_bool = Nuitka_Cell_Empty();
    struct Nuitka_CellObject *var__coerce = Nuitka_Cell_Empty();
    PyObject *var_process = NULL;
    struct Nuitka_FrameObject *frame_316ead9e8eef23411cca05facc04d131;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_316ead9e8eef23411cca05facc04d131 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_316ead9e8eef23411cca05facc04d131)) {
        Py_XDECREF(cache_frame_316ead9e8eef23411cca05facc04d131);

#if _DEBUG_REFCOUNTS
        if (cache_frame_316ead9e8eef23411cca05facc04d131 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_316ead9e8eef23411cca05facc04d131 = MAKE_FUNCTION_FRAME(codeobj_316ead9e8eef23411cca05facc04d131, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_316ead9e8eef23411cca05facc04d131->m_type_description == NULL);
    frame_316ead9e8eef23411cca05facc04d131 = cache_frame_316ead9e8eef23411cca05facc04d131;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_316ead9e8eef23411cca05facc04d131);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_316ead9e8eef23411cca05facc04d131) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_assign_source_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[260]);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1834;
            type_description_1 = "oocco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var__strict_as_bool) == NULL);
        PyCell_SET(var__strict_as_bool, tmp_assign_source_1);

    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_dialect);
        tmp_expression_value_2 = par_dialect;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[249]);
        if (tmp_attribute_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1835;
            type_description_1 = "oocco";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 1835;
            type_description_1 = "oocco";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = (PyObject *)&PyBool_Type;
        assert(Nuitka_Cell_GET(var__coerce) == NULL);
        Py_INCREF(tmp_assign_source_2);
        PyCell_SET(var__coerce, tmp_assign_source_2);

    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_3;
        tmp_assign_source_3 = (PyObject *)&PyLong_Type;
        assert(Nuitka_Cell_GET(var__coerce) == NULL);
        Py_INCREF(tmp_assign_source_3);
        PyCell_SET(var__coerce, tmp_assign_source_3);

    }
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_316ead9e8eef23411cca05facc04d131);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_316ead9e8eef23411cca05facc04d131);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_316ead9e8eef23411cca05facc04d131, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_316ead9e8eef23411cca05facc04d131->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_316ead9e8eef23411cca05facc04d131, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_316ead9e8eef23411cca05facc04d131,
        type_description_1,
        par_self,
        par_dialect,
        var__strict_as_bool,
        var__coerce,
        var_process
    );


    // Release cached frame if used for exception.
    if (frame_316ead9e8eef23411cca05facc04d131 == cache_frame_316ead9e8eef23411cca05facc04d131) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_316ead9e8eef23411cca05facc04d131);
        cache_frame_316ead9e8eef23411cca05facc04d131 = NULL;
    }

    assertFrameObject(frame_316ead9e8eef23411cca05facc04d131);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    {
        PyObject *tmp_assign_source_4;
        struct Nuitka_CellObject *tmp_closure_1[2];

        tmp_closure_1[0] = var__coerce;
        Py_INCREF(tmp_closure_1[0]);
        tmp_closure_1[1] = var__strict_as_bool;
        Py_INCREF(tmp_closure_1[1]);

        tmp_assign_source_4 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__97_bind_processor$$$function__1_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_4;
    }
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var__strict_as_bool);
    Py_DECREF(var__strict_as_bool);
    var__strict_as_bool = NULL;
    CHECK_OBJECT(var__coerce);
    Py_DECREF(var__coerce);
    var__coerce = NULL;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(var__strict_as_bool);
    Py_DECREF(var__strict_as_bool);
    var__strict_as_bool = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__97_bind_processor$$$function__1_process(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_09fd947af5ae5ee2537e1e3c83e1c5c2;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_09fd947af5ae5ee2537e1e3c83e1c5c2 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_09fd947af5ae5ee2537e1e3c83e1c5c2)) {
        Py_XDECREF(cache_frame_09fd947af5ae5ee2537e1e3c83e1c5c2);

#if _DEBUG_REFCOUNTS
        if (cache_frame_09fd947af5ae5ee2537e1e3c83e1c5c2 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_09fd947af5ae5ee2537e1e3c83e1c5c2 = MAKE_FUNCTION_FRAME(codeobj_09fd947af5ae5ee2537e1e3c83e1c5c2, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_09fd947af5ae5ee2537e1e3c83e1c5c2->m_type_description == NULL);
    frame_09fd947af5ae5ee2537e1e3c83e1c5c2 = cache_frame_09fd947af5ae5ee2537e1e3c83e1c5c2;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_09fd947af5ae5ee2537e1e3c83e1c5c2);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_09fd947af5ae5ee2537e1e3c83e1c5c2) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[260]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1841;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_value_1 = Nuitka_Cell_GET(self->m_closure[1]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        frame_09fd947af5ae5ee2537e1e3c83e1c5c2->m_frame.f_lineno = 1841;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1841;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_value);
        tmp_cmp_expr_left_1 = par_value;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_2;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[264]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1843;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_value_2 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_2 = par_value;
        frame_09fd947af5ae5ee2537e1e3c83e1c5c2->m_frame.f_lineno = 1843;
        tmp_assign_source_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_2, tmp_args_element_value_2);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1843;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_2;
            Py_DECREF(old);
        }

    }
    branch_no_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_09fd947af5ae5ee2537e1e3c83e1c5c2);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_09fd947af5ae5ee2537e1e3c83e1c5c2);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_09fd947af5ae5ee2537e1e3c83e1c5c2, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_09fd947af5ae5ee2537e1e3c83e1c5c2->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_09fd947af5ae5ee2537e1e3c83e1c5c2, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_09fd947af5ae5ee2537e1e3c83e1c5c2,
        type_description_1,
        par_value,
        self->m_closure[1],
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_09fd947af5ae5ee2537e1e3c83e1c5c2 == cache_frame_09fd947af5ae5ee2537e1e3c83e1c5c2) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_09fd947af5ae5ee2537e1e3c83e1c5c2);
        cache_frame_09fd947af5ae5ee2537e1e3c83e1c5c2 = NULL;
    }

    assertFrameObject(frame_09fd947af5ae5ee2537e1e3c83e1c5c2);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT(par_value);
    tmp_return_value = par_value;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    par_value = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_value);
    par_value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__98_result_processor(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    PyObject *par_coltype = python_pars[2];
    struct Nuitka_FrameObject *frame_e65bfdb285f2b292b211690ab41ddfe6;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_e65bfdb285f2b292b211690ab41ddfe6 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_e65bfdb285f2b292b211690ab41ddfe6)) {
        Py_XDECREF(cache_frame_e65bfdb285f2b292b211690ab41ddfe6);

#if _DEBUG_REFCOUNTS
        if (cache_frame_e65bfdb285f2b292b211690ab41ddfe6 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_e65bfdb285f2b292b211690ab41ddfe6 = MAKE_FUNCTION_FRAME(codeobj_e65bfdb285f2b292b211690ab41ddfe6, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_e65bfdb285f2b292b211690ab41ddfe6->m_type_description == NULL);
    frame_e65bfdb285f2b292b211690ab41ddfe6 = cache_frame_e65bfdb285f2b292b211690ab41ddfe6;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_e65bfdb285f2b292b211690ab41ddfe6);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_e65bfdb285f2b292b211690ab41ddfe6) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_dialect);
        tmp_expression_value_1 = par_dialect;
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[249]);
        if (tmp_attribute_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1849;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 1849;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_expression_value_2;
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[57]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[57]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1852;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[265]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1852;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e65bfdb285f2b292b211690ab41ddfe6);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_e65bfdb285f2b292b211690ab41ddfe6);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e65bfdb285f2b292b211690ab41ddfe6);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_e65bfdb285f2b292b211690ab41ddfe6, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_e65bfdb285f2b292b211690ab41ddfe6->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_e65bfdb285f2b292b211690ab41ddfe6, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_e65bfdb285f2b292b211690ab41ddfe6,
        type_description_1,
        par_self,
        par_dialect,
        par_coltype
    );


    // Release cached frame if used for exception.
    if (frame_e65bfdb285f2b292b211690ab41ddfe6 == cache_frame_e65bfdb285f2b292b211690ab41ddfe6) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_e65bfdb285f2b292b211690ab41ddfe6);
        cache_frame_e65bfdb285f2b292b211690ab41ddfe6 = NULL;
    }

    assertFrameObject(frame_e65bfdb285f2b292b211690ab41ddfe6);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__99__expression_adaptations(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_2bf8083789a52456cc5d1f2f334f077a;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_2bf8083789a52456cc5d1f2f334f077a = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_2bf8083789a52456cc5d1f2f334f077a)) {
        Py_XDECREF(cache_frame_2bf8083789a52456cc5d1f2f334f077a);

#if _DEBUG_REFCOUNTS
        if (cache_frame_2bf8083789a52456cc5d1f2f334f077a == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_2bf8083789a52456cc5d1f2f334f077a = MAKE_FUNCTION_FRAME(codeobj_2bf8083789a52456cc5d1f2f334f077a, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_2bf8083789a52456cc5d1f2f334f077a->m_type_description == NULL);
    frame_2bf8083789a52456cc5d1f2f334f077a = cache_frame_2bf8083789a52456cc5d1f2f334f077a;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_2bf8083789a52456cc5d1f2f334f077a);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_2bf8083789a52456cc5d1f2f334f077a) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_dict_key_2;
        PyObject *tmp_dict_value_2;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1862;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[7]);
        if (tmp_dict_key_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1862;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_key_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[72]);

        if (unlikely(tmp_dict_key_2 == NULL)) {
            tmp_dict_key_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[72]);
        }

        if (tmp_dict_key_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_dict_key_1);

            exception_lineno = 1863;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[103]);

        if (unlikely(tmp_dict_value_2 == NULL)) {
            tmp_dict_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[103]);
        }

        if (tmp_dict_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_dict_key_1);

            exception_lineno = 1863;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_dict_value_1 = _PyDict_NewPresized( 4 );
        {
            PyObject *tmp_expression_value_2;
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1863;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_dict_key_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[76]);

            if (unlikely(tmp_dict_key_2 == NULL)) {
                tmp_dict_key_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[76]);
            }

            if (tmp_dict_key_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1864;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_2 = par_self;
            tmp_dict_value_2 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_2);
            if (tmp_dict_value_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1864;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
            Py_DECREF(tmp_dict_value_2);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1864;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_dict_key_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[103]);

            if (unlikely(tmp_dict_key_2 == NULL)) {
                tmp_dict_key_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[103]);
            }

            if (tmp_dict_key_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1865;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_dict_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[103]);

            if (unlikely(tmp_dict_value_2 == NULL)) {
                tmp_dict_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[103]);
            }

            if (tmp_dict_value_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1865;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1865;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_dict_key_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[105]);

            if (unlikely(tmp_dict_key_2 == NULL)) {
                tmp_dict_key_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[105]);
            }

            if (tmp_dict_key_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1866;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_dict_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[105]);

            if (unlikely(tmp_dict_value_2 == NULL)) {
                tmp_dict_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[105]);
            }

            if (tmp_dict_value_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1866;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_2, tmp_dict_value_2);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1866;
                type_description_1 = "o";
                goto dict_build_exception_1;
            }
        }
        goto dict_build_noexception_1;
        // Exception handling pass through code for dict_build:
        dict_build_exception_1:;
        Py_DECREF(tmp_dict_key_1);
        Py_DECREF(tmp_dict_value_1);
        goto frame_exception_exit_1;
        // Finished with no exception for dict_build:
        dict_build_noexception_1:;
        tmp_return_value = _PyDict_NewPresized( 5 );
        {
            PyObject *tmp_expression_value_3;
            PyObject *tmp_dict_key_3;
            PyObject *tmp_dict_value_3;
            PyObject *tmp_expression_value_4;
            PyObject *tmp_expression_value_5;
            PyObject *tmp_dict_key_4;
            PyObject *tmp_dict_value_4;
            PyObject *tmp_expression_value_6;
            PyObject *tmp_expression_value_7;
            PyObject *tmp_dict_key_5;
            PyObject *tmp_dict_value_5;
            PyObject *tmp_expression_value_8;
            PyObject *tmp_expression_value_9;
            PyObject *tmp_dict_key_6;
            PyObject *tmp_dict_value_6;
            PyObject *tmp_expression_value_10;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1862;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

            if (unlikely(tmp_expression_value_3 == NULL)) {
                tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
            }

            if (tmp_expression_value_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1868;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[79]);
            if (tmp_dict_key_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1868;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[76]);

            if (unlikely(tmp_dict_key_3 == NULL)) {
                tmp_dict_key_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[76]);
            }

            if (tmp_dict_key_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 1868;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_4 = par_self;
            tmp_dict_value_3 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_4);
            if (tmp_dict_value_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 1868;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 1 );
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_3, tmp_dict_value_3);
            Py_DECREF(tmp_dict_value_3);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1868;
                type_description_1 = "o";
                goto dict_build_exception_3;
            }
            goto dict_build_noexception_2;
            // Exception handling pass through code for dict_build:
            dict_build_exception_3:;
            Py_DECREF(tmp_dict_key_1);
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_2:;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1868;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_expression_value_5 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

            if (unlikely(tmp_expression_value_5 == NULL)) {
                tmp_expression_value_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
            }

            if (tmp_expression_value_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1869;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[75]);
            if (tmp_dict_key_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1869;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[74]);

            if (unlikely(tmp_dict_key_4 == NULL)) {
                tmp_dict_key_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[74]);
            }

            if (tmp_dict_key_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 1869;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_6 = par_self;
            tmp_dict_value_4 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_6);
            if (tmp_dict_value_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 1869;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 1 );
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_4, tmp_dict_value_4);
            Py_DECREF(tmp_dict_value_4);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1869;
                type_description_1 = "o";
                goto dict_build_exception_4;
            }
            goto dict_build_noexception_3;
            // Exception handling pass through code for dict_build:
            dict_build_exception_4:;
            Py_DECREF(tmp_dict_key_1);
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_3:;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1869;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_expression_value_7 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

            if (unlikely(tmp_expression_value_7 == NULL)) {
                tmp_expression_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
            }

            if (tmp_expression_value_7 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1870;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_7, mod_consts[78]);
            if (tmp_dict_key_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1870;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_5 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[74]);

            if (unlikely(tmp_dict_key_5 == NULL)) {
                tmp_dict_key_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[74]);
            }

            if (tmp_dict_key_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 1870;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_8 = par_self;
            tmp_dict_value_5 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_8);
            if (tmp_dict_value_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 1870;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 1 );
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_5, tmp_dict_value_5);
            Py_DECREF(tmp_dict_value_5);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1870;
                type_description_1 = "o";
                goto dict_build_exception_5;
            }
            goto dict_build_noexception_4;
            // Exception handling pass through code for dict_build:
            dict_build_exception_5:;
            Py_DECREF(tmp_dict_key_1);
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_4:;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1870;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_expression_value_9 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

            if (unlikely(tmp_expression_value_9 == NULL)) {
                tmp_expression_value_9 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
            }

            if (tmp_expression_value_9 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1871;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_9, mod_consts[77]);
            if (tmp_dict_key_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1871;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_key_6 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[74]);

            if (unlikely(tmp_dict_key_6 == NULL)) {
                tmp_dict_key_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[74]);
            }

            if (tmp_dict_key_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 1871;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_10 = par_self;
            tmp_dict_value_6 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_10);
            if (tmp_dict_value_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 1871;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
            tmp_dict_value_1 = _PyDict_NewPresized( 1 );
            tmp_res = PyDict_SetItem(tmp_dict_value_1, tmp_dict_key_6, tmp_dict_value_6);
            Py_DECREF(tmp_dict_value_6);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1871;
                type_description_1 = "o";
                goto dict_build_exception_6;
            }
            goto dict_build_noexception_5;
            // Exception handling pass through code for dict_build:
            dict_build_exception_6:;
            Py_DECREF(tmp_dict_key_1);
            Py_DECREF(tmp_dict_value_1);
            goto dict_build_exception_2;
            // Finished with no exception for dict_build:
            dict_build_noexception_5:;
            tmp_res = PyDict_SetItem(tmp_return_value, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1871;
                type_description_1 = "o";
                goto dict_build_exception_2;
            }
        }
        goto dict_build_noexception_6;
        // Exception handling pass through code for dict_build:
        dict_build_exception_2:;
        Py_DECREF(tmp_return_value);
        goto frame_exception_exit_1;
        // Finished with no exception for dict_build:
        dict_build_noexception_6:;
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2bf8083789a52456cc5d1f2f334f077a);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_2bf8083789a52456cc5d1f2f334f077a);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2bf8083789a52456cc5d1f2f334f077a);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_2bf8083789a52456cc5d1f2f334f077a, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_2bf8083789a52456cc5d1f2f334f077a->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_2bf8083789a52456cc5d1f2f334f077a, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_2bf8083789a52456cc5d1f2f334f077a,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_2bf8083789a52456cc5d1f2f334f077a == cache_frame_2bf8083789a52456cc5d1f2f334f077a) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_2bf8083789a52456cc5d1f2f334f077a);
        cache_frame_2bf8083789a52456cc5d1f2f334f077a = NULL;
    }

    assertFrameObject(frame_2bf8083789a52456cc5d1f2f334f077a);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__100__type_affinity(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_8ed18f4e8d0ae2ee0973bc43157c0e2b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_8ed18f4e8d0ae2ee0973bc43157c0e2b = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_8ed18f4e8d0ae2ee0973bc43157c0e2b)) {
        Py_XDECREF(cache_frame_8ed18f4e8d0ae2ee0973bc43157c0e2b);

#if _DEBUG_REFCOUNTS
        if (cache_frame_8ed18f4e8d0ae2ee0973bc43157c0e2b == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_8ed18f4e8d0ae2ee0973bc43157c0e2b = MAKE_FUNCTION_FRAME(codeobj_8ed18f4e8d0ae2ee0973bc43157c0e2b, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_8ed18f4e8d0ae2ee0973bc43157c0e2b->m_type_description == NULL);
    frame_8ed18f4e8d0ae2ee0973bc43157c0e2b = cache_frame_8ed18f4e8d0ae2ee0973bc43157c0e2b;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_8ed18f4e8d0ae2ee0973bc43157c0e2b);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_8ed18f4e8d0ae2ee0973bc43157c0e2b) == 2); // Frame stack

    // Framed code:
    tmp_return_value = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[76]);

    if (unlikely(tmp_return_value == NULL)) {
        tmp_return_value = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[76]);
    }

    if (tmp_return_value == NULL) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1876;
        type_description_1 = "o";
        goto frame_exception_exit_1;
    }
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_8ed18f4e8d0ae2ee0973bc43157c0e2b);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_8ed18f4e8d0ae2ee0973bc43157c0e2b);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_8ed18f4e8d0ae2ee0973bc43157c0e2b);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_8ed18f4e8d0ae2ee0973bc43157c0e2b, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_8ed18f4e8d0ae2ee0973bc43157c0e2b->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_8ed18f4e8d0ae2ee0973bc43157c0e2b, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_8ed18f4e8d0ae2ee0973bc43157c0e2b,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_8ed18f4e8d0ae2ee0973bc43157c0e2b == cache_frame_8ed18f4e8d0ae2ee0973bc43157c0e2b) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_8ed18f4e8d0ae2ee0973bc43157c0e2b);
        cache_frame_8ed18f4e8d0ae2ee0973bc43157c0e2b = NULL;
    }

    assertFrameObject(frame_8ed18f4e8d0ae2ee0973bc43157c0e2b);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__101_coerce_compared_value(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_op = python_pars[1];
    PyObject *par_value = python_pars[2];
    struct Nuitka_FrameObject *frame_869ef4d1b9431aba84fee71430c018c5;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_869ef4d1b9431aba84fee71430c018c5 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_869ef4d1b9431aba84fee71430c018c5)) {
        Py_XDECREF(cache_frame_869ef4d1b9431aba84fee71430c018c5);

#if _DEBUG_REFCOUNTS
        if (cache_frame_869ef4d1b9431aba84fee71430c018c5 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_869ef4d1b9431aba84fee71430c018c5 = MAKE_FUNCTION_FRAME(codeobj_869ef4d1b9431aba84fee71430c018c5, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_869ef4d1b9431aba84fee71430c018c5->m_type_description == NULL);
    frame_869ef4d1b9431aba84fee71430c018c5 = cache_frame_869ef4d1b9431aba84fee71430c018c5;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_869ef4d1b9431aba84fee71430c018c5);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_869ef4d1b9431aba84fee71430c018c5) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[143]);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1880;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_op);
        tmp_args_element_value_1 = par_op;
        CHECK_OBJECT(par_value);
        tmp_args_element_value_2 = par_value;
        frame_869ef4d1b9431aba84fee71430c018c5->m_frame.f_lineno = 1880;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_return_value = CALL_METHOD_WITH_ARGS2(
                tmp_called_instance_1,
                mod_consts[120],
                call_args
            );
        }

        Py_DECREF(tmp_called_instance_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1880;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_869ef4d1b9431aba84fee71430c018c5);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_869ef4d1b9431aba84fee71430c018c5);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_869ef4d1b9431aba84fee71430c018c5);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_869ef4d1b9431aba84fee71430c018c5, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_869ef4d1b9431aba84fee71430c018c5->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_869ef4d1b9431aba84fee71430c018c5, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_869ef4d1b9431aba84fee71430c018c5,
        type_description_1,
        par_self,
        par_op,
        par_value
    );


    // Release cached frame if used for exception.
    if (frame_869ef4d1b9431aba84fee71430c018c5 == cache_frame_869ef4d1b9431aba84fee71430c018c5) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_869ef4d1b9431aba84fee71430c018c5);
        cache_frame_869ef4d1b9431aba84fee71430c018c5 = NULL;
    }

    assertFrameObject(frame_869ef4d1b9431aba84fee71430c018c5);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_op);
    Py_DECREF(par_op);
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_op);
    Py_DECREF(par_op);
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__102___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_native = python_pars[1];
    PyObject *par_second_precision = python_pars[2];
    PyObject *par_day_precision = python_pars[3];
    struct Nuitka_FrameObject *frame_b2c0d81d602498657431b7d36cb611a8;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_b2c0d81d602498657431b7d36cb611a8 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_b2c0d81d602498657431b7d36cb611a8)) {
        Py_XDECREF(cache_frame_b2c0d81d602498657431b7d36cb611a8);

#if _DEBUG_REFCOUNTS
        if (cache_frame_b2c0d81d602498657431b7d36cb611a8 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_b2c0d81d602498657431b7d36cb611a8 = MAKE_FUNCTION_FRAME(codeobj_b2c0d81d602498657431b7d36cb611a8, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_b2c0d81d602498657431b7d36cb611a8->m_type_description == NULL);
    frame_b2c0d81d602498657431b7d36cb611a8 = cache_frame_b2c0d81d602498657431b7d36cb611a8;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_b2c0d81d602498657431b7d36cb611a8);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_b2c0d81d602498657431b7d36cb611a8) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_call_result_1;
        tmp_type_arg_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[76]);

        if (unlikely(tmp_type_arg_value_1 == NULL)) {
            tmp_type_arg_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[76]);
        }

        if (tmp_type_arg_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1921;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_object_arg_value_1 = par_self;
        tmp_called_instance_1 = BUILTIN_SUPER2(tmp_type_arg_value_1, tmp_object_arg_value_1);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1921;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        frame_b2c0d81d602498657431b7d36cb611a8->m_frame.f_lineno = 1921;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, mod_consts[66]);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1921;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_native);
        tmp_assattr_value_1 = par_native;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[266], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1922;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT(par_second_precision);
        tmp_assattr_value_2 = par_second_precision;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[267], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1923;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_3;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT(par_day_precision);
        tmp_assattr_value_3 = par_day_precision;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_3, mod_consts[268], tmp_assattr_value_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1924;
            type_description_1 = "ooooN";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b2c0d81d602498657431b7d36cb611a8);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b2c0d81d602498657431b7d36cb611a8);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_b2c0d81d602498657431b7d36cb611a8, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_b2c0d81d602498657431b7d36cb611a8->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_b2c0d81d602498657431b7d36cb611a8, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_b2c0d81d602498657431b7d36cb611a8,
        type_description_1,
        par_self,
        par_native,
        par_second_precision,
        par_day_precision,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_b2c0d81d602498657431b7d36cb611a8 == cache_frame_b2c0d81d602498657431b7d36cb611a8) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_b2c0d81d602498657431b7d36cb611a8);
        cache_frame_b2c0d81d602498657431b7d36cb611a8 = NULL;
    }

    assertFrameObject(frame_b2c0d81d602498657431b7d36cb611a8);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_native);
    Py_DECREF(par_native);
    CHECK_OBJECT(par_second_precision);
    Py_DECREF(par_second_precision);
    CHECK_OBJECT(par_day_precision);
    Py_DECREF(par_day_precision);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_native);
    Py_DECREF(par_native);
    CHECK_OBJECT(par_second_precision);
    Py_DECREF(par_second_precision);
    CHECK_OBJECT(par_day_precision);
    Py_DECREF(par_day_precision);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__103_python_type(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_1517404864390463d00b2823a600abfd;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_1517404864390463d00b2823a600abfd = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_1517404864390463d00b2823a600abfd)) {
        Py_XDECREF(cache_frame_1517404864390463d00b2823a600abfd);

#if _DEBUG_REFCOUNTS
        if (cache_frame_1517404864390463d00b2823a600abfd == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_1517404864390463d00b2823a600abfd = MAKE_FUNCTION_FRAME(codeobj_1517404864390463d00b2823a600abfd, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_1517404864390463d00b2823a600abfd->m_type_description == NULL);
    frame_1517404864390463d00b2823a600abfd = cache_frame_1517404864390463d00b2823a600abfd;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_1517404864390463d00b2823a600abfd);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_1517404864390463d00b2823a600abfd) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[101]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[101]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1928;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[270]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1928;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_1517404864390463d00b2823a600abfd);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_1517404864390463d00b2823a600abfd);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_1517404864390463d00b2823a600abfd);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_1517404864390463d00b2823a600abfd, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_1517404864390463d00b2823a600abfd->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_1517404864390463d00b2823a600abfd, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_1517404864390463d00b2823a600abfd,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_1517404864390463d00b2823a600abfd == cache_frame_1517404864390463d00b2823a600abfd) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_1517404864390463d00b2823a600abfd);
        cache_frame_1517404864390463d00b2823a600abfd = NULL;
    }

    assertFrameObject(frame_1517404864390463d00b2823a600abfd);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__104_adapt_to_emulated(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_impltype = python_pars[1];
    PyObject *par_kw = python_pars[2];
    struct Nuitka_FrameObject *frame_ea706dcc6e194808881a16f7aa1ed6c1;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_ea706dcc6e194808881a16f7aa1ed6c1 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_ea706dcc6e194808881a16f7aa1ed6c1)) {
        Py_XDECREF(cache_frame_ea706dcc6e194808881a16f7aa1ed6c1);

#if _DEBUG_REFCOUNTS
        if (cache_frame_ea706dcc6e194808881a16f7aa1ed6c1 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_ea706dcc6e194808881a16f7aa1ed6c1 = MAKE_FUNCTION_FRAME(codeobj_ea706dcc6e194808881a16f7aa1ed6c1, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_ea706dcc6e194808881a16f7aa1ed6c1->m_type_description == NULL);
    frame_ea706dcc6e194808881a16f7aa1ed6c1 = cache_frame_ea706dcc6e194808881a16f7aa1ed6c1;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_ea706dcc6e194808881a16f7aa1ed6c1);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_ea706dcc6e194808881a16f7aa1ed6c1) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_dircall_arg3_1;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[271]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[271]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1931;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[150]);
        if (tmp_dircall_arg1_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1931;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_tuple_element_1 = par_self;
        tmp_dircall_arg2_1 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(par_impltype);
        tmp_tuple_element_1 = par_impltype;
        PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 1, tmp_tuple_element_1);
        CHECK_OBJECT(par_kw);
        tmp_dircall_arg3_1 = par_kw;
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_return_value = impl___main__$$$function__7_complex_call_helper_pos_star_dict(dir_call_args);
        }
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1931;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ea706dcc6e194808881a16f7aa1ed6c1);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_ea706dcc6e194808881a16f7aa1ed6c1);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ea706dcc6e194808881a16f7aa1ed6c1);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_ea706dcc6e194808881a16f7aa1ed6c1, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_ea706dcc6e194808881a16f7aa1ed6c1->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_ea706dcc6e194808881a16f7aa1ed6c1, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_ea706dcc6e194808881a16f7aa1ed6c1,
        type_description_1,
        par_self,
        par_impltype,
        par_kw
    );


    // Release cached frame if used for exception.
    if (frame_ea706dcc6e194808881a16f7aa1ed6c1 == cache_frame_ea706dcc6e194808881a16f7aa1ed6c1) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_ea706dcc6e194808881a16f7aa1ed6c1);
        cache_frame_ea706dcc6e194808881a16f7aa1ed6c1 = NULL;
    }

    assertFrameObject(frame_ea706dcc6e194808881a16f7aa1ed6c1);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_impltype);
    Py_DECREF(par_impltype);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_impltype);
    Py_DECREF(par_impltype);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__105_bind_processor(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    struct Nuitka_CellObject *var_impl_processor = Nuitka_Cell_Empty();
    struct Nuitka_CellObject *var_epoch = Nuitka_Cell_Empty();
    PyObject *var_process = NULL;
    struct Nuitka_FrameObject *frame_6fd982c4f965f315b319c69ddc5bb056;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_6fd982c4f965f315b319c69ddc5bb056 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_6fd982c4f965f315b319c69ddc5bb056)) {
        Py_XDECREF(cache_frame_6fd982c4f965f315b319c69ddc5bb056);

#if _DEBUG_REFCOUNTS
        if (cache_frame_6fd982c4f965f315b319c69ddc5bb056 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_6fd982c4f965f315b319c69ddc5bb056 = MAKE_FUNCTION_FRAME(codeobj_6fd982c4f965f315b319c69ddc5bb056, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_6fd982c4f965f315b319c69ddc5bb056->m_type_description == NULL);
    frame_6fd982c4f965f315b319c69ddc5bb056 = cache_frame_6fd982c4f965f315b319c69ddc5bb056;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_6fd982c4f965f315b319c69ddc5bb056);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_6fd982c4f965f315b319c69ddc5bb056) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[143]);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1934;
            type_description_1 = "oocco";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_dialect);
        tmp_args_element_value_1 = par_dialect;
        frame_6fd982c4f965f315b319c69ddc5bb056->m_frame.f_lineno = 1934;
        tmp_assign_source_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[232], tmp_args_element_value_1);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1934;
            type_description_1 = "oocco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_impl_processor) == NULL);
        PyCell_SET(var_impl_processor, tmp_assign_source_1);

    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_assign_source_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[272]);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1935;
            type_description_1 = "oocco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_epoch) == NULL);
        PyCell_SET(var_epoch, tmp_assign_source_2);

    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(Nuitka_Cell_GET(var_impl_processor));
        tmp_truth_name_1 = CHECK_IF_TRUE(Nuitka_Cell_GET(var_impl_processor));
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1936;
            type_description_1 = "oocco";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_3;
        struct Nuitka_CellObject *tmp_closure_1[2];

        tmp_closure_1[0] = var_epoch;
        Py_INCREF(tmp_closure_1[0]);
        tmp_closure_1[1] = var_impl_processor;
        Py_INCREF(tmp_closure_1[1]);

        tmp_assign_source_3 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__105_bind_processor$$$function__1_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_3;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_4;
        struct Nuitka_CellObject *tmp_closure_2[1];

        tmp_closure_2[0] = var_epoch;
        Py_INCREF(tmp_closure_2[0]);

        tmp_assign_source_4 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__105_bind_processor$$$function__2_process(tmp_closure_2);

        assert(var_process == NULL);
        var_process = tmp_assign_source_4;
    }
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_6fd982c4f965f315b319c69ddc5bb056);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_6fd982c4f965f315b319c69ddc5bb056);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_6fd982c4f965f315b319c69ddc5bb056, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_6fd982c4f965f315b319c69ddc5bb056->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_6fd982c4f965f315b319c69ddc5bb056, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_6fd982c4f965f315b319c69ddc5bb056,
        type_description_1,
        par_self,
        par_dialect,
        var_impl_processor,
        var_epoch,
        var_process
    );


    // Release cached frame if used for exception.
    if (frame_6fd982c4f965f315b319c69ddc5bb056 == cache_frame_6fd982c4f965f315b319c69ddc5bb056) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_6fd982c4f965f315b319c69ddc5bb056);
        cache_frame_6fd982c4f965f315b319c69ddc5bb056 = NULL;
    }

    assertFrameObject(frame_6fd982c4f965f315b319c69ddc5bb056);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_impl_processor);
    Py_DECREF(var_impl_processor);
    var_impl_processor = NULL;
    CHECK_OBJECT(var_epoch);
    Py_DECREF(var_epoch);
    var_epoch = NULL;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(var_impl_processor);
    Py_DECREF(var_impl_processor);
    var_impl_processor = NULL;
    CHECK_OBJECT(var_epoch);
    Py_DECREF(var_epoch);
    var_epoch = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__105_bind_processor$$$function__1_process(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_721d898bd11a13c19c76e956025de367;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_721d898bd11a13c19c76e956025de367 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_721d898bd11a13c19c76e956025de367)) {
        Py_XDECREF(cache_frame_721d898bd11a13c19c76e956025de367);

#if _DEBUG_REFCOUNTS
        if (cache_frame_721d898bd11a13c19c76e956025de367 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_721d898bd11a13c19c76e956025de367 = MAKE_FUNCTION_FRAME(codeobj_721d898bd11a13c19c76e956025de367, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_721d898bd11a13c19c76e956025de367->m_type_description == NULL);
    frame_721d898bd11a13c19c76e956025de367 = cache_frame_721d898bd11a13c19c76e956025de367;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_721d898bd11a13c19c76e956025de367);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_721d898bd11a13c19c76e956025de367) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_value);
        tmp_cmp_expr_left_1 = par_value;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[272]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1940;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_left_value_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_value);
        tmp_right_value_1 = par_value;
        tmp_assign_source_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_value_1, tmp_right_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1940;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    branch_no_1:;
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[245]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1941;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_value_1 = Nuitka_Cell_GET(self->m_closure[1]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        frame_721d898bd11a13c19c76e956025de367->m_frame.f_lineno = 1941;
        tmp_return_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1941;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_721d898bd11a13c19c76e956025de367);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_721d898bd11a13c19c76e956025de367);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_721d898bd11a13c19c76e956025de367);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_721d898bd11a13c19c76e956025de367, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_721d898bd11a13c19c76e956025de367->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_721d898bd11a13c19c76e956025de367, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_721d898bd11a13c19c76e956025de367,
        type_description_1,
        par_value,
        self->m_closure[0],
        self->m_closure[1]
    );


    // Release cached frame if used for exception.
    if (frame_721d898bd11a13c19c76e956025de367 == cache_frame_721d898bd11a13c19c76e956025de367) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_721d898bd11a13c19c76e956025de367);
        cache_frame_721d898bd11a13c19c76e956025de367 = NULL;
    }

    assertFrameObject(frame_721d898bd11a13c19c76e956025de367);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    par_value = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_value);
    par_value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__105_bind_processor$$$function__2_process(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_e5e57fd08df72921834834662e50725e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_e5e57fd08df72921834834662e50725e = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_e5e57fd08df72921834834662e50725e)) {
        Py_XDECREF(cache_frame_e5e57fd08df72921834834662e50725e);

#if _DEBUG_REFCOUNTS
        if (cache_frame_e5e57fd08df72921834834662e50725e == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_e5e57fd08df72921834834662e50725e = MAKE_FUNCTION_FRAME(codeobj_e5e57fd08df72921834834662e50725e, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_e5e57fd08df72921834834662e50725e->m_type_description == NULL);
    frame_e5e57fd08df72921834834662e50725e = cache_frame_e5e57fd08df72921834834662e50725e;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_e5e57fd08df72921834834662e50725e);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_e5e57fd08df72921834834662e50725e) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_value);
        tmp_cmp_expr_left_1 = par_value;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[272]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1947;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_left_value_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_value);
        tmp_right_value_1 = par_value;
        tmp_assign_source_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_value_1, tmp_right_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1947;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    branch_no_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e5e57fd08df72921834834662e50725e);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e5e57fd08df72921834834662e50725e);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_e5e57fd08df72921834834662e50725e, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_e5e57fd08df72921834834662e50725e->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_e5e57fd08df72921834834662e50725e, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_e5e57fd08df72921834834662e50725e,
        type_description_1,
        par_value,
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_e5e57fd08df72921834834662e50725e == cache_frame_e5e57fd08df72921834834662e50725e) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_e5e57fd08df72921834834662e50725e);
        cache_frame_e5e57fd08df72921834834662e50725e = NULL;
    }

    assertFrameObject(frame_e5e57fd08df72921834834662e50725e);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT(par_value);
    tmp_return_value = par_value;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    par_value = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);
    par_value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__106_result_processor(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    PyObject *par_coltype = python_pars[2];
    struct Nuitka_CellObject *var_impl_processor = Nuitka_Cell_Empty();
    struct Nuitka_CellObject *var_epoch = Nuitka_Cell_Empty();
    PyObject *var_process = NULL;
    struct Nuitka_FrameObject *frame_ca6015480afd717c6a68e5cd5c83f22b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_ca6015480afd717c6a68e5cd5c83f22b = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_ca6015480afd717c6a68e5cd5c83f22b)) {
        Py_XDECREF(cache_frame_ca6015480afd717c6a68e5cd5c83f22b);

#if _DEBUG_REFCOUNTS
        if (cache_frame_ca6015480afd717c6a68e5cd5c83f22b == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_ca6015480afd717c6a68e5cd5c83f22b = MAKE_FUNCTION_FRAME(codeobj_ca6015480afd717c6a68e5cd5c83f22b, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_ca6015480afd717c6a68e5cd5c83f22b->m_type_description == NULL);
    frame_ca6015480afd717c6a68e5cd5c83f22b = cache_frame_ca6015480afd717c6a68e5cd5c83f22b;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_ca6015480afd717c6a68e5cd5c83f22b);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_ca6015480afd717c6a68e5cd5c83f22b) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[143]);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1953;
            type_description_1 = "ooocco";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_dialect);
        tmp_args_element_value_1 = par_dialect;
        CHECK_OBJECT(par_coltype);
        tmp_args_element_value_2 = par_coltype;
        frame_ca6015480afd717c6a68e5cd5c83f22b->m_frame.f_lineno = 1953;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assign_source_1 = CALL_METHOD_WITH_ARGS2(
                tmp_called_instance_1,
                mod_consts[233],
                call_args
            );
        }

        Py_DECREF(tmp_called_instance_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1953;
            type_description_1 = "ooocco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_impl_processor) == NULL);
        PyCell_SET(var_impl_processor, tmp_assign_source_1);

    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_assign_source_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[272]);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1954;
            type_description_1 = "ooocco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_epoch) == NULL);
        PyCell_SET(var_epoch, tmp_assign_source_2);

    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(Nuitka_Cell_GET(var_impl_processor));
        tmp_truth_name_1 = CHECK_IF_TRUE(Nuitka_Cell_GET(var_impl_processor));
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1955;
            type_description_1 = "ooocco";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_3;
        struct Nuitka_CellObject *tmp_closure_1[2];

        tmp_closure_1[0] = var_epoch;
        Py_INCREF(tmp_closure_1[0]);
        tmp_closure_1[1] = var_impl_processor;
        Py_INCREF(tmp_closure_1[1]);

        tmp_assign_source_3 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__106_result_processor$$$function__1_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_3;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_4;
        struct Nuitka_CellObject *tmp_closure_2[1];

        tmp_closure_2[0] = var_epoch;
        Py_INCREF(tmp_closure_2[0]);

        tmp_assign_source_4 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__106_result_processor$$$function__2_process(tmp_closure_2);

        assert(var_process == NULL);
        var_process = tmp_assign_source_4;
    }
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ca6015480afd717c6a68e5cd5c83f22b);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ca6015480afd717c6a68e5cd5c83f22b);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_ca6015480afd717c6a68e5cd5c83f22b, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_ca6015480afd717c6a68e5cd5c83f22b->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_ca6015480afd717c6a68e5cd5c83f22b, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_ca6015480afd717c6a68e5cd5c83f22b,
        type_description_1,
        par_self,
        par_dialect,
        par_coltype,
        var_impl_processor,
        var_epoch,
        var_process
    );


    // Release cached frame if used for exception.
    if (frame_ca6015480afd717c6a68e5cd5c83f22b == cache_frame_ca6015480afd717c6a68e5cd5c83f22b) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_ca6015480afd717c6a68e5cd5c83f22b);
        cache_frame_ca6015480afd717c6a68e5cd5c83f22b = NULL;
    }

    assertFrameObject(frame_ca6015480afd717c6a68e5cd5c83f22b);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_impl_processor);
    Py_DECREF(var_impl_processor);
    var_impl_processor = NULL;
    CHECK_OBJECT(var_epoch);
    Py_DECREF(var_epoch);
    var_epoch = NULL;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(var_impl_processor);
    Py_DECREF(var_impl_processor);
    var_impl_processor = NULL;
    CHECK_OBJECT(var_epoch);
    Py_DECREF(var_epoch);
    var_epoch = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__106_result_processor$$$function__1_process(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_040968a2f49c9a024ff8b7ebca05e479;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_040968a2f49c9a024ff8b7ebca05e479 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_040968a2f49c9a024ff8b7ebca05e479)) {
        Py_XDECREF(cache_frame_040968a2f49c9a024ff8b7ebca05e479);

#if _DEBUG_REFCOUNTS
        if (cache_frame_040968a2f49c9a024ff8b7ebca05e479 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_040968a2f49c9a024ff8b7ebca05e479 = MAKE_FUNCTION_FRAME(codeobj_040968a2f49c9a024ff8b7ebca05e479, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_040968a2f49c9a024ff8b7ebca05e479->m_type_description == NULL);
    frame_040968a2f49c9a024ff8b7ebca05e479 = cache_frame_040968a2f49c9a024ff8b7ebca05e479;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_040968a2f49c9a024ff8b7ebca05e479);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_040968a2f49c9a024ff8b7ebca05e479) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[245]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1958;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_value_1 = Nuitka_Cell_GET(self->m_closure[1]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        frame_040968a2f49c9a024ff8b7ebca05e479->m_frame.f_lineno = 1958;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1958;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_value);
        tmp_cmp_expr_left_1 = par_value;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_no_1:;
    {
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        CHECK_OBJECT(par_value);
        tmp_left_value_1 = par_value;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[272]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1961;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_right_value_1 = Nuitka_Cell_GET(self->m_closure[0]);
        tmp_return_value = BINARY_OPERATION_SUB_OBJECT_OBJECT_OBJECT(tmp_left_value_1, tmp_right_value_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1961;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_040968a2f49c9a024ff8b7ebca05e479);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_040968a2f49c9a024ff8b7ebca05e479);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_040968a2f49c9a024ff8b7ebca05e479);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_040968a2f49c9a024ff8b7ebca05e479, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_040968a2f49c9a024ff8b7ebca05e479->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_040968a2f49c9a024ff8b7ebca05e479, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_040968a2f49c9a024ff8b7ebca05e479,
        type_description_1,
        par_value,
        self->m_closure[1],
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_040968a2f49c9a024ff8b7ebca05e479 == cache_frame_040968a2f49c9a024ff8b7ebca05e479) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_040968a2f49c9a024ff8b7ebca05e479);
        cache_frame_040968a2f49c9a024ff8b7ebca05e479 = NULL;
    }

    assertFrameObject(frame_040968a2f49c9a024ff8b7ebca05e479);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(par_value);
    par_value = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_value);
    par_value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__106_result_processor$$$function__2_process(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    PyObject *tmp_return_value = NULL;
    struct Nuitka_FrameObject *frame_9b2cbb8752b7ee5f04ba8a9c6b65ed1f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_9b2cbb8752b7ee5f04ba8a9c6b65ed1f = NULL;

    // Actual function body.
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_value);
        tmp_cmp_expr_left_1 = par_value;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;
    branch_no_1:;
    if (isFrameUnusable(cache_frame_9b2cbb8752b7ee5f04ba8a9c6b65ed1f)) {
        Py_XDECREF(cache_frame_9b2cbb8752b7ee5f04ba8a9c6b65ed1f);

#if _DEBUG_REFCOUNTS
        if (cache_frame_9b2cbb8752b7ee5f04ba8a9c6b65ed1f == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_9b2cbb8752b7ee5f04ba8a9c6b65ed1f = MAKE_FUNCTION_FRAME(codeobj_9b2cbb8752b7ee5f04ba8a9c6b65ed1f, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_9b2cbb8752b7ee5f04ba8a9c6b65ed1f->m_type_description == NULL);
    frame_9b2cbb8752b7ee5f04ba8a9c6b65ed1f = cache_frame_9b2cbb8752b7ee5f04ba8a9c6b65ed1f;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_9b2cbb8752b7ee5f04ba8a9c6b65ed1f);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_9b2cbb8752b7ee5f04ba8a9c6b65ed1f) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        CHECK_OBJECT(par_value);
        tmp_left_value_1 = par_value;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[272]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1968;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }

        tmp_right_value_1 = Nuitka_Cell_GET(self->m_closure[0]);
        tmp_return_value = BINARY_OPERATION_SUB_OBJECT_OBJECT_OBJECT(tmp_left_value_1, tmp_right_value_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1968;
            type_description_1 = "oc";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9b2cbb8752b7ee5f04ba8a9c6b65ed1f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_9b2cbb8752b7ee5f04ba8a9c6b65ed1f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9b2cbb8752b7ee5f04ba8a9c6b65ed1f);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_9b2cbb8752b7ee5f04ba8a9c6b65ed1f, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_9b2cbb8752b7ee5f04ba8a9c6b65ed1f->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_9b2cbb8752b7ee5f04ba8a9c6b65ed1f, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_9b2cbb8752b7ee5f04ba8a9c6b65ed1f,
        type_description_1,
        par_value,
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_9b2cbb8752b7ee5f04ba8a9c6b65ed1f == cache_frame_9b2cbb8752b7ee5f04ba8a9c6b65ed1f) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_9b2cbb8752b7ee5f04ba8a9c6b65ed1f);
        cache_frame_9b2cbb8752b7ee5f04ba8a9c6b65ed1f = NULL;
    }

    assertFrameObject(frame_9b2cbb8752b7ee5f04ba8a9c6b65ed1f);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__107___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_none_as_null = python_pars[1];
    struct Nuitka_FrameObject *frame_2d58f2d4625ac7878ff3544d5422428b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_2d58f2d4625ac7878ff3544d5422428b = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_2d58f2d4625ac7878ff3544d5422428b)) {
        Py_XDECREF(cache_frame_2d58f2d4625ac7878ff3544d5422428b);

#if _DEBUG_REFCOUNTS
        if (cache_frame_2d58f2d4625ac7878ff3544d5422428b == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_2d58f2d4625ac7878ff3544d5422428b = MAKE_FUNCTION_FRAME(codeobj_2d58f2d4625ac7878ff3544d5422428b, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_2d58f2d4625ac7878ff3544d5422428b->m_type_description == NULL);
    frame_2d58f2d4625ac7878ff3544d5422428b = cache_frame_2d58f2d4625ac7878ff3544d5422428b;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_2d58f2d4625ac7878ff3544d5422428b);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_2d58f2d4625ac7878ff3544d5422428b) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_none_as_null);
        tmp_assattr_value_1 = par_none_as_null;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[275], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2228;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2d58f2d4625ac7878ff3544d5422428b);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2d58f2d4625ac7878ff3544d5422428b);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_2d58f2d4625ac7878ff3544d5422428b, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_2d58f2d4625ac7878ff3544d5422428b->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_2d58f2d4625ac7878ff3544d5422428b, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_2d58f2d4625ac7878ff3544d5422428b,
        type_description_1,
        par_self,
        par_none_as_null
    );


    // Release cached frame if used for exception.
    if (frame_2d58f2d4625ac7878ff3544d5422428b == cache_frame_2d58f2d4625ac7878ff3544d5422428b) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_2d58f2d4625ac7878ff3544d5422428b);
        cache_frame_2d58f2d4625ac7878ff3544d5422428b = NULL;
    }

    assertFrameObject(frame_2d58f2d4625ac7878ff3544d5422428b);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_none_as_null);
    Py_DECREF(par_none_as_null);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_none_as_null);
    Py_DECREF(par_none_as_null);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__108_string_bind_processor(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    struct Nuitka_FrameObject *frame_52849325a34baac4c3d0efb32eccf004;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_52849325a34baac4c3d0efb32eccf004 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_52849325a34baac4c3d0efb32eccf004)) {
        Py_XDECREF(cache_frame_52849325a34baac4c3d0efb32eccf004);

#if _DEBUG_REFCOUNTS
        if (cache_frame_52849325a34baac4c3d0efb32eccf004 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_52849325a34baac4c3d0efb32eccf004 = MAKE_FUNCTION_FRAME(codeobj_52849325a34baac4c3d0efb32eccf004, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_52849325a34baac4c3d0efb32eccf004->m_type_description == NULL);
    frame_52849325a34baac4c3d0efb32eccf004 = cache_frame_52849325a34baac4c3d0efb32eccf004;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_52849325a34baac4c3d0efb32eccf004);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_52849325a34baac4c3d0efb32eccf004) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[277]);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2237;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_dialect);
        tmp_args_element_value_1 = par_dialect;
        frame_52849325a34baac4c3d0efb32eccf004->m_frame.f_lineno = 2237;
        tmp_return_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[278], tmp_args_element_value_1);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2237;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_52849325a34baac4c3d0efb32eccf004);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_52849325a34baac4c3d0efb32eccf004);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_52849325a34baac4c3d0efb32eccf004);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_52849325a34baac4c3d0efb32eccf004, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_52849325a34baac4c3d0efb32eccf004->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_52849325a34baac4c3d0efb32eccf004, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_52849325a34baac4c3d0efb32eccf004,
        type_description_1,
        par_self,
        par_dialect
    );


    // Release cached frame if used for exception.
    if (frame_52849325a34baac4c3d0efb32eccf004 == cache_frame_52849325a34baac4c3d0efb32eccf004) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_52849325a34baac4c3d0efb32eccf004);
        cache_frame_52849325a34baac4c3d0efb32eccf004 = NULL;
    }

    assertFrameObject(frame_52849325a34baac4c3d0efb32eccf004);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__109_string_literal_processor(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    struct Nuitka_FrameObject *frame_c4437ebcc356d068272586f6f953e6e3;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_c4437ebcc356d068272586f6f953e6e3 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_c4437ebcc356d068272586f6f953e6e3)) {
        Py_XDECREF(cache_frame_c4437ebcc356d068272586f6f953e6e3);

#if _DEBUG_REFCOUNTS
        if (cache_frame_c4437ebcc356d068272586f6f953e6e3 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_c4437ebcc356d068272586f6f953e6e3 = MAKE_FUNCTION_FRAME(codeobj_c4437ebcc356d068272586f6f953e6e3, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_c4437ebcc356d068272586f6f953e6e3->m_type_description == NULL);
    frame_c4437ebcc356d068272586f6f953e6e3 = cache_frame_c4437ebcc356d068272586f6f953e6e3;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_c4437ebcc356d068272586f6f953e6e3);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_c4437ebcc356d068272586f6f953e6e3) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[277]);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2240;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_dialect);
        tmp_args_element_value_1 = par_dialect;
        frame_c4437ebcc356d068272586f6f953e6e3->m_frame.f_lineno = 2240;
        tmp_return_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[279], tmp_args_element_value_1);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2240;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_c4437ebcc356d068272586f6f953e6e3);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_c4437ebcc356d068272586f6f953e6e3);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_c4437ebcc356d068272586f6f953e6e3);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_c4437ebcc356d068272586f6f953e6e3, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_c4437ebcc356d068272586f6f953e6e3->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_c4437ebcc356d068272586f6f953e6e3, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_c4437ebcc356d068272586f6f953e6e3,
        type_description_1,
        par_self,
        par_dialect
    );


    // Release cached frame if used for exception.
    if (frame_c4437ebcc356d068272586f6f953e6e3 == cache_frame_c4437ebcc356d068272586f6f953e6e3) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_c4437ebcc356d068272586f6f953e6e3);
        cache_frame_c4437ebcc356d068272586f6f953e6e3 = NULL;
    }

    assertFrameObject(frame_c4437ebcc356d068272586f6f953e6e3);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__110_bind_processor(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    struct Nuitka_CellObject *var_int_processor = Nuitka_Cell_Empty();
    struct Nuitka_CellObject *var_string_processor = Nuitka_Cell_Empty();
    PyObject *var_process = NULL;
    struct Nuitka_FrameObject *frame_110b2519219ff1ad5f5bf55af6c317e0;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_110b2519219ff1ad5f5bf55af6c317e0 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_110b2519219ff1ad5f5bf55af6c317e0)) {
        Py_XDECREF(cache_frame_110b2519219ff1ad5f5bf55af6c317e0);

#if _DEBUG_REFCOUNTS
        if (cache_frame_110b2519219ff1ad5f5bf55af6c317e0 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_110b2519219ff1ad5f5bf55af6c317e0 = MAKE_FUNCTION_FRAME(codeobj_110b2519219ff1ad5f5bf55af6c317e0, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_110b2519219ff1ad5f5bf55af6c317e0->m_type_description == NULL);
    frame_110b2519219ff1ad5f5bf55af6c317e0 = cache_frame_110b2519219ff1ad5f5bf55af6c317e0;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_110b2519219ff1ad5f5bf55af6c317e0);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_110b2519219ff1ad5f5bf55af6c317e0) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[280]);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2243;
            type_description_1 = "oocco";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_dialect);
        tmp_args_element_value_1 = par_dialect;
        frame_110b2519219ff1ad5f5bf55af6c317e0->m_frame.f_lineno = 2243;
        tmp_assign_source_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[278], tmp_args_element_value_1);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2243;
            type_description_1 = "oocco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_int_processor) == NULL);
        PyCell_SET(var_int_processor, tmp_assign_source_1);

    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_called_instance_2 = par_self;
        CHECK_OBJECT(par_dialect);
        tmp_args_element_value_2 = par_dialect;
        frame_110b2519219ff1ad5f5bf55af6c317e0->m_frame.f_lineno = 2244;
        tmp_assign_source_2 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_2, mod_consts[281], tmp_args_element_value_2);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2244;
            type_description_1 = "oocco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_string_processor) == NULL);
        PyCell_SET(var_string_processor, tmp_assign_source_2);

    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_110b2519219ff1ad5f5bf55af6c317e0);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_110b2519219ff1ad5f5bf55af6c317e0);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_110b2519219ff1ad5f5bf55af6c317e0, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_110b2519219ff1ad5f5bf55af6c317e0->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_110b2519219ff1ad5f5bf55af6c317e0, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_110b2519219ff1ad5f5bf55af6c317e0,
        type_description_1,
        par_self,
        par_dialect,
        var_int_processor,
        var_string_processor,
        var_process
    );


    // Release cached frame if used for exception.
    if (frame_110b2519219ff1ad5f5bf55af6c317e0 == cache_frame_110b2519219ff1ad5f5bf55af6c317e0) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_110b2519219ff1ad5f5bf55af6c317e0);
        cache_frame_110b2519219ff1ad5f5bf55af6c317e0 = NULL;
    }

    assertFrameObject(frame_110b2519219ff1ad5f5bf55af6c317e0);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    {
        PyObject *tmp_assign_source_3;
        struct Nuitka_CellObject *tmp_closure_1[2];

        tmp_closure_1[0] = var_int_processor;
        Py_INCREF(tmp_closure_1[0]);
        tmp_closure_1[1] = var_string_processor;
        Py_INCREF(tmp_closure_1[1]);

        tmp_assign_source_3 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__110_bind_processor$$$function__1_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_3;
    }
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_int_processor);
    Py_DECREF(var_int_processor);
    var_int_processor = NULL;
    CHECK_OBJECT(var_string_processor);
    Py_DECREF(var_string_processor);
    var_string_processor = NULL;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(var_int_processor);
    Py_DECREF(var_int_processor);
    var_int_processor = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__110_bind_processor$$$function__1_process(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_e25634e3711c6b5cb1101160ca5f64c8;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_e25634e3711c6b5cb1101160ca5f64c8 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_e25634e3711c6b5cb1101160ca5f64c8)) {
        Py_XDECREF(cache_frame_e25634e3711c6b5cb1101160ca5f64c8);

#if _DEBUG_REFCOUNTS
        if (cache_frame_e25634e3711c6b5cb1101160ca5f64c8 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_e25634e3711c6b5cb1101160ca5f64c8 = MAKE_FUNCTION_FRAME(codeobj_e25634e3711c6b5cb1101160ca5f64c8, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_e25634e3711c6b5cb1101160ca5f64c8->m_type_description == NULL);
    frame_e25634e3711c6b5cb1101160ca5f64c8 = cache_frame_e25634e3711c6b5cb1101160ca5f64c8;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_e25634e3711c6b5cb1101160ca5f64c8);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_e25634e3711c6b5cb1101160ca5f64c8) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        int tmp_truth_name_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[283]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2247;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_1 = CHECK_IF_TRUE(Nuitka_Cell_GET(self->m_closure[0]));
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2247;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2247;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(par_value);
        tmp_isinstance_inst_1 = par_value;
        tmp_isinstance_cls_1 = (PyObject *)&PyLong_Type;
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2247;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[283]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2248;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_value_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        frame_e25634e3711c6b5cb1101160ca5f64c8->m_frame.f_lineno = 2248;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2248;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    goto branch_end_1;
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_2;
        nuitka_bool tmp_and_left_value_2;
        nuitka_bool tmp_and_right_value_2;
        int tmp_truth_name_2;
        PyObject *tmp_isinstance_inst_2;
        PyObject *tmp_isinstance_cls_2;
        PyObject *tmp_expression_value_1;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[284]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2249;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_2 = CHECK_IF_TRUE(Nuitka_Cell_GET(self->m_closure[1]));
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2249;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_2 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        tmp_and_left_truth_2 = tmp_and_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2249;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_2 == 1) {
            goto and_right_2;
        } else {
            goto and_left_2;
        }
        and_right_2:;
        CHECK_OBJECT(par_value);
        tmp_isinstance_inst_2 = par_value;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2249;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_cls_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[118]);
        if (tmp_isinstance_cls_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2249;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_2, tmp_isinstance_cls_2);
        Py_DECREF(tmp_isinstance_cls_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2249;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_2 = tmp_and_right_value_2;
        goto and_end_2;
        and_left_2:;
        tmp_condition_result_2 = tmp_and_left_value_2;
        and_end_2:;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_2;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[284]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2250;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_value_2 = Nuitka_Cell_GET(self->m_closure[1]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_2 = par_value;
        frame_e25634e3711c6b5cb1101160ca5f64c8->m_frame.f_lineno = 2250;
        tmp_assign_source_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_2, tmp_args_element_value_2);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2250;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_2;
            Py_DECREF(old);
        }

    }
    branch_no_2:;
    branch_end_1:;
    if (par_value == NULL) {

        FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[48]);
        exception_tb = NULL;
        NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
        CHAIN_EXCEPTION(exception_value);

        exception_lineno = 2251;
        type_description_1 = "occ";
        goto frame_exception_exit_1;
    }

    tmp_return_value = par_value;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e25634e3711c6b5cb1101160ca5f64c8);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_e25634e3711c6b5cb1101160ca5f64c8);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e25634e3711c6b5cb1101160ca5f64c8);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_e25634e3711c6b5cb1101160ca5f64c8, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_e25634e3711c6b5cb1101160ca5f64c8->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_e25634e3711c6b5cb1101160ca5f64c8, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_e25634e3711c6b5cb1101160ca5f64c8,
        type_description_1,
        par_value,
        self->m_closure[0],
        self->m_closure[1]
    );


    // Release cached frame if used for exception.
    if (frame_e25634e3711c6b5cb1101160ca5f64c8 == cache_frame_e25634e3711c6b5cb1101160ca5f64c8) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_e25634e3711c6b5cb1101160ca5f64c8);
        cache_frame_e25634e3711c6b5cb1101160ca5f64c8 = NULL;
    }

    assertFrameObject(frame_e25634e3711c6b5cb1101160ca5f64c8);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(par_value);
    par_value = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_value);
    par_value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__111_literal_processor(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    struct Nuitka_CellObject *var_int_processor = Nuitka_Cell_Empty();
    struct Nuitka_CellObject *var_string_processor = Nuitka_Cell_Empty();
    PyObject *var_process = NULL;
    struct Nuitka_FrameObject *frame_73aa4383e90c67b2095c8cf4b55b97a6;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_73aa4383e90c67b2095c8cf4b55b97a6 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_73aa4383e90c67b2095c8cf4b55b97a6)) {
        Py_XDECREF(cache_frame_73aa4383e90c67b2095c8cf4b55b97a6);

#if _DEBUG_REFCOUNTS
        if (cache_frame_73aa4383e90c67b2095c8cf4b55b97a6 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_73aa4383e90c67b2095c8cf4b55b97a6 = MAKE_FUNCTION_FRAME(codeobj_73aa4383e90c67b2095c8cf4b55b97a6, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_73aa4383e90c67b2095c8cf4b55b97a6->m_type_description == NULL);
    frame_73aa4383e90c67b2095c8cf4b55b97a6 = cache_frame_73aa4383e90c67b2095c8cf4b55b97a6;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_73aa4383e90c67b2095c8cf4b55b97a6);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_73aa4383e90c67b2095c8cf4b55b97a6) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[280]);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2256;
            type_description_1 = "oocco";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_dialect);
        tmp_args_element_value_1 = par_dialect;
        frame_73aa4383e90c67b2095c8cf4b55b97a6->m_frame.f_lineno = 2256;
        tmp_assign_source_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[279], tmp_args_element_value_1);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2256;
            type_description_1 = "oocco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_int_processor) == NULL);
        PyCell_SET(var_int_processor, tmp_assign_source_1);

    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_called_instance_2 = par_self;
        CHECK_OBJECT(par_dialect);
        tmp_args_element_value_2 = par_dialect;
        frame_73aa4383e90c67b2095c8cf4b55b97a6->m_frame.f_lineno = 2257;
        tmp_assign_source_2 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_2, mod_consts[285], tmp_args_element_value_2);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2257;
            type_description_1 = "oocco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_string_processor) == NULL);
        PyCell_SET(var_string_processor, tmp_assign_source_2);

    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_73aa4383e90c67b2095c8cf4b55b97a6);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_73aa4383e90c67b2095c8cf4b55b97a6);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_73aa4383e90c67b2095c8cf4b55b97a6, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_73aa4383e90c67b2095c8cf4b55b97a6->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_73aa4383e90c67b2095c8cf4b55b97a6, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_73aa4383e90c67b2095c8cf4b55b97a6,
        type_description_1,
        par_self,
        par_dialect,
        var_int_processor,
        var_string_processor,
        var_process
    );


    // Release cached frame if used for exception.
    if (frame_73aa4383e90c67b2095c8cf4b55b97a6 == cache_frame_73aa4383e90c67b2095c8cf4b55b97a6) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_73aa4383e90c67b2095c8cf4b55b97a6);
        cache_frame_73aa4383e90c67b2095c8cf4b55b97a6 = NULL;
    }

    assertFrameObject(frame_73aa4383e90c67b2095c8cf4b55b97a6);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    {
        PyObject *tmp_assign_source_3;
        struct Nuitka_CellObject *tmp_closure_1[2];

        tmp_closure_1[0] = var_int_processor;
        Py_INCREF(tmp_closure_1[0]);
        tmp_closure_1[1] = var_string_processor;
        Py_INCREF(tmp_closure_1[1]);

        tmp_assign_source_3 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__111_literal_processor$$$function__1_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_3;
    }
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_int_processor);
    Py_DECREF(var_int_processor);
    var_int_processor = NULL;
    CHECK_OBJECT(var_string_processor);
    Py_DECREF(var_string_processor);
    var_string_processor = NULL;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(var_int_processor);
    Py_DECREF(var_int_processor);
    var_int_processor = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__111_literal_processor$$$function__1_process(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    struct Nuitka_FrameObject *frame_d4cce7be2c6d61e939ff8f1737aebd5f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_d4cce7be2c6d61e939ff8f1737aebd5f = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_d4cce7be2c6d61e939ff8f1737aebd5f)) {
        Py_XDECREF(cache_frame_d4cce7be2c6d61e939ff8f1737aebd5f);

#if _DEBUG_REFCOUNTS
        if (cache_frame_d4cce7be2c6d61e939ff8f1737aebd5f == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_d4cce7be2c6d61e939ff8f1737aebd5f = MAKE_FUNCTION_FRAME(codeobj_d4cce7be2c6d61e939ff8f1737aebd5f, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_d4cce7be2c6d61e939ff8f1737aebd5f->m_type_description == NULL);
    frame_d4cce7be2c6d61e939ff8f1737aebd5f = cache_frame_d4cce7be2c6d61e939ff8f1737aebd5f;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_d4cce7be2c6d61e939ff8f1737aebd5f);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_d4cce7be2c6d61e939ff8f1737aebd5f) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        int tmp_truth_name_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[283]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2260;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_1 = CHECK_IF_TRUE(Nuitka_Cell_GET(self->m_closure[0]));
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2260;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2260;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(par_value);
        tmp_isinstance_inst_1 = par_value;
        tmp_isinstance_cls_1 = (PyObject *)&PyLong_Type;
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2260;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[283]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2261;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_value_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        frame_d4cce7be2c6d61e939ff8f1737aebd5f->m_frame.f_lineno = 2261;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2261;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    goto branch_end_1;
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_and_left_truth_2;
        nuitka_bool tmp_and_left_value_2;
        nuitka_bool tmp_and_right_value_2;
        int tmp_truth_name_2;
        PyObject *tmp_isinstance_inst_2;
        PyObject *tmp_isinstance_cls_2;
        PyObject *tmp_expression_value_1;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[284]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2262;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_2 = CHECK_IF_TRUE(Nuitka_Cell_GET(self->m_closure[1]));
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2262;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_2 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        tmp_and_left_truth_2 = tmp_and_left_value_2 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2262;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_2 == 1) {
            goto and_right_2;
        } else {
            goto and_left_2;
        }
        and_right_2:;
        CHECK_OBJECT(par_value);
        tmp_isinstance_inst_2 = par_value;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2262;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_cls_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[118]);
        if (tmp_isinstance_cls_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2262;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_2, tmp_isinstance_cls_2);
        Py_DECREF(tmp_isinstance_cls_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2262;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_2 = tmp_and_right_value_2;
        goto and_end_2;
        and_left_2:;
        tmp_condition_result_2 = tmp_and_left_value_2;
        and_end_2:;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_2;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[284]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2263;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_value_2 = Nuitka_Cell_GET(self->m_closure[1]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_2 = par_value;
        frame_d4cce7be2c6d61e939ff8f1737aebd5f->m_frame.f_lineno = 2263;
        tmp_assign_source_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_2, tmp_args_element_value_2);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2263;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_2;
            Py_DECREF(old);
        }

    }
    branch_no_2:;
    branch_end_1:;
    if (par_value == NULL) {

        FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[48]);
        exception_tb = NULL;
        NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
        CHAIN_EXCEPTION(exception_value);

        exception_lineno = 2264;
        type_description_1 = "occ";
        goto frame_exception_exit_1;
    }

    tmp_return_value = par_value;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d4cce7be2c6d61e939ff8f1737aebd5f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_d4cce7be2c6d61e939ff8f1737aebd5f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d4cce7be2c6d61e939ff8f1737aebd5f);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_d4cce7be2c6d61e939ff8f1737aebd5f, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_d4cce7be2c6d61e939ff8f1737aebd5f->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_d4cce7be2c6d61e939ff8f1737aebd5f, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_d4cce7be2c6d61e939ff8f1737aebd5f,
        type_description_1,
        par_value,
        self->m_closure[0],
        self->m_closure[1]
    );


    // Release cached frame if used for exception.
    if (frame_d4cce7be2c6d61e939ff8f1737aebd5f == cache_frame_d4cce7be2c6d61e939ff8f1737aebd5f) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_d4cce7be2c6d61e939ff8f1737aebd5f);
        cache_frame_d4cce7be2c6d61e939ff8f1737aebd5f = NULL;
    }

    assertFrameObject(frame_d4cce7be2c6d61e939ff8f1737aebd5f);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(par_value);
    par_value = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_value);
    par_value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__112__setup_getitem(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_default_comparator = python_pars[1];
    PyObject *par_index = python_pars[2];
    PyObject *var_operator = NULL;
    struct Nuitka_FrameObject *frame_f9850d2f1ed7b54d61515f605f3ef6b1;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_f9850d2f1ed7b54d61515f605f3ef6b1 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_f9850d2f1ed7b54d61515f605f3ef6b1)) {
        Py_XDECREF(cache_frame_f9850d2f1ed7b54d61515f605f3ef6b1);

#if _DEBUG_REFCOUNTS
        if (cache_frame_f9850d2f1ed7b54d61515f605f3ef6b1 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_f9850d2f1ed7b54d61515f605f3ef6b1 = MAKE_FUNCTION_FRAME(codeobj_f9850d2f1ed7b54d61515f605f3ef6b1, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_f9850d2f1ed7b54d61515f605f3ef6b1->m_type_description == NULL);
    frame_f9850d2f1ed7b54d61515f605f3ef6b1 = cache_frame_f9850d2f1ed7b54d61515f605f3ef6b1;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_f9850d2f1ed7b54d61515f605f3ef6b1);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_f9850d2f1ed7b54d61515f605f3ef6b1) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_isinstance_inst_2;
        PyObject *tmp_isinstance_cls_2;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_index);
        tmp_isinstance_inst_1 = par_index;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2289;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[118]);
        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2289;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2289;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_operand_value_1 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2289;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_value_1 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(par_index);
        tmp_isinstance_inst_2 = par_index;
        tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[209]);

        if (unlikely(tmp_expression_value_3 == NULL)) {
            tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[209]);
        }

        if (tmp_expression_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2290;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[287]);
        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2290;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_cls_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[288]);
        Py_DECREF(tmp_expression_value_2);
        if (tmp_isinstance_cls_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2290;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_2, tmp_isinstance_cls_2);
        Py_DECREF(tmp_isinstance_cls_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2289;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_kw_call_arg_value_1_1;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_kw_call_arg_value_2_1;
        PyObject *tmp_kw_call_dict_value_0_1;
        PyObject *tmp_expression_value_7;
        CHECK_OBJECT(par_default_comparator);
        tmp_expression_value_4 = par_default_comparator;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[289]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2292;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_5 = par_self;
        tmp_kw_call_arg_value_0_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[12]);
        if (tmp_kw_call_arg_value_0_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 2293;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_6 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_6 == NULL)) {
            tmp_expression_value_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
        }

        if (tmp_expression_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);

            exception_lineno = 2294;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_kw_call_arg_value_1_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[290]);
        if (tmp_kw_call_arg_value_1_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);

            exception_lineno = 2294;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_index);
        tmp_kw_call_arg_value_2_1 = par_index;
        tmp_expression_value_7 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[291]);

        if (unlikely(tmp_expression_value_7 == NULL)) {
            tmp_expression_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[291]);
        }

        if (tmp_expression_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);
            Py_DECREF(tmp_kw_call_arg_value_1_1);

            exception_lineno = 2296;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_kw_call_dict_value_0_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_7, mod_consts[292]);
        if (tmp_kw_call_dict_value_0_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_1);
            Py_DECREF(tmp_kw_call_arg_value_1_1);

            exception_lineno = 2296;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_f9850d2f1ed7b54d61515f605f3ef6b1->m_frame.f_lineno = 2292;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1, tmp_kw_call_arg_value_1_1, tmp_kw_call_arg_value_2_1};
            PyObject *kw_values[1] = {tmp_kw_call_dict_value_0_1};
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS3_KWSPLIT(tmp_called_value_1, args, kw_values, mod_consts[293]);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_kw_call_arg_value_0_1);
        Py_DECREF(tmp_kw_call_arg_value_1_1);
        Py_DECREF(tmp_kw_call_dict_value_0_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2292;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_index;
            assert(old != NULL);
            par_index = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_expression_value_8;
        tmp_expression_value_8 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_8 == NULL)) {
            tmp_expression_value_8 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
        }

        if (tmp_expression_value_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2299;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_8, mod_consts[290]);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2299;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(var_operator == NULL);
        var_operator = tmp_assign_source_2;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_9;
        PyObject *tmp_kw_call_arg_value_0_2;
        PyObject *tmp_expression_value_10;
        PyObject *tmp_kw_call_arg_value_1_2;
        PyObject *tmp_expression_value_11;
        PyObject *tmp_kw_call_arg_value_2_2;
        PyObject *tmp_kw_call_dict_value_0_2;
        PyObject *tmp_expression_value_12;
        CHECK_OBJECT(par_default_comparator);
        tmp_expression_value_9 = par_default_comparator;
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_9, mod_consts[289]);
        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2301;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_10 = par_self;
        tmp_kw_call_arg_value_0_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_10, mod_consts[12]);
        if (tmp_kw_call_arg_value_0_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 2302;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_11 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_11 == NULL)) {
            tmp_expression_value_11 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
        }

        if (tmp_expression_value_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_kw_call_arg_value_0_2);

            exception_lineno = 2303;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_kw_call_arg_value_1_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_11, mod_consts[294]);
        if (tmp_kw_call_arg_value_1_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_kw_call_arg_value_0_2);

            exception_lineno = 2303;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_index);
        tmp_kw_call_arg_value_2_2 = par_index;
        tmp_expression_value_12 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[291]);

        if (unlikely(tmp_expression_value_12 == NULL)) {
            tmp_expression_value_12 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[291]);
        }

        if (tmp_expression_value_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_kw_call_arg_value_0_2);
            Py_DECREF(tmp_kw_call_arg_value_1_2);

            exception_lineno = 2305;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_kw_call_dict_value_0_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_12, mod_consts[295]);
        if (tmp_kw_call_dict_value_0_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_kw_call_arg_value_0_2);
            Py_DECREF(tmp_kw_call_arg_value_1_2);

            exception_lineno = 2305;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_f9850d2f1ed7b54d61515f605f3ef6b1->m_frame.f_lineno = 2301;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_2, tmp_kw_call_arg_value_1_2, tmp_kw_call_arg_value_2_2};
            PyObject *kw_values[1] = {tmp_kw_call_dict_value_0_2};
            tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS3_KWSPLIT(tmp_called_value_2, args, kw_values, mod_consts[293]);
        }

        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_kw_call_arg_value_0_2);
        Py_DECREF(tmp_kw_call_arg_value_1_2);
        Py_DECREF(tmp_kw_call_dict_value_0_2);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2301;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_index;
            assert(old != NULL);
            par_index = tmp_assign_source_3;
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_expression_value_13;
        tmp_expression_value_13 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_13 == NULL)) {
            tmp_expression_value_13 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
        }

        if (tmp_expression_value_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2307;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_13, mod_consts[294]);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2307;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(var_operator == NULL);
        var_operator = tmp_assign_source_4;
    }
    branch_end_1:;
    {
        PyObject *tmp_tuple_element_1;
        CHECK_OBJECT(var_operator);
        tmp_tuple_element_1 = var_operator;
        tmp_return_value = PyTuple_New(3);
        {
            PyObject *tmp_expression_value_14;
            PyTuple_SET_ITEM0(tmp_return_value, 0, tmp_tuple_element_1);
            CHECK_OBJECT(par_index);
            tmp_tuple_element_1 = par_index;
            PyTuple_SET_ITEM0(tmp_return_value, 1, tmp_tuple_element_1);
            if (par_self == NULL) {

                FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[51]);
                exception_tb = NULL;
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2309;
                type_description_1 = "oooo";
                goto tuple_build_exception_1;
            }

            tmp_expression_value_14 = par_self;
            tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_14, mod_consts[0]);
            if (tmp_tuple_element_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2309;
                type_description_1 = "oooo";
                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_return_value, 2, tmp_tuple_element_1);
        }
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_return_value);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_f9850d2f1ed7b54d61515f605f3ef6b1);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_f9850d2f1ed7b54d61515f605f3ef6b1);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_f9850d2f1ed7b54d61515f605f3ef6b1);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_f9850d2f1ed7b54d61515f605f3ef6b1, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_f9850d2f1ed7b54d61515f605f3ef6b1->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_f9850d2f1ed7b54d61515f605f3ef6b1, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_f9850d2f1ed7b54d61515f605f3ef6b1,
        type_description_1,
        par_self,
        par_default_comparator,
        par_index,
        var_operator
    );


    // Release cached frame if used for exception.
    if (frame_f9850d2f1ed7b54d61515f605f3ef6b1 == cache_frame_f9850d2f1ed7b54d61515f605f3ef6b1) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_f9850d2f1ed7b54d61515f605f3ef6b1);
        cache_frame_f9850d2f1ed7b54d61515f605f3ef6b1 = NULL;
    }

    assertFrameObject(frame_f9850d2f1ed7b54d61515f605f3ef6b1);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_index);
    Py_DECREF(par_index);
    par_index = NULL;
    CHECK_OBJECT(var_operator);
    Py_DECREF(var_operator);
    var_operator = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_index);
    par_index = NULL;
    Py_XDECREF(var_operator);
    var_operator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_default_comparator);
    Py_DECREF(par_default_comparator);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_default_comparator);
    Py_DECREF(par_default_comparator);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__113_as_boolean(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_3d77773966012aba04345bacfce29158;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_3d77773966012aba04345bacfce29158 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_3d77773966012aba04345bacfce29158)) {
        Py_XDECREF(cache_frame_3d77773966012aba04345bacfce29158);

#if _DEBUG_REFCOUNTS
        if (cache_frame_3d77773966012aba04345bacfce29158 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_3d77773966012aba04345bacfce29158 = MAKE_FUNCTION_FRAME(codeobj_3d77773966012aba04345bacfce29158, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_3d77773966012aba04345bacfce29158->m_type_description == NULL);
    frame_3d77773966012aba04345bacfce29158 = cache_frame_3d77773966012aba04345bacfce29158;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_3d77773966012aba04345bacfce29158);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_3d77773966012aba04345bacfce29158) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[296]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2325;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[297]);

        if (unlikely(tmp_called_value_2 == NULL)) {
            tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[297]);
        }

        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 2325;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_3d77773966012aba04345bacfce29158->m_frame.f_lineno = 2325;
        tmp_args_element_value_1 = CALL_FUNCTION_NO_ARGS(tmp_called_value_2);
        if (tmp_args_element_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 2325;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_2 = mod_consts[298];
        frame_3d77773966012aba04345bacfce29158->m_frame.f_lineno = 2325;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2325;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_3d77773966012aba04345bacfce29158);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_3d77773966012aba04345bacfce29158);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_3d77773966012aba04345bacfce29158);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_3d77773966012aba04345bacfce29158, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_3d77773966012aba04345bacfce29158->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_3d77773966012aba04345bacfce29158, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_3d77773966012aba04345bacfce29158,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_3d77773966012aba04345bacfce29158 == cache_frame_3d77773966012aba04345bacfce29158) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_3d77773966012aba04345bacfce29158);
        cache_frame_3d77773966012aba04345bacfce29158 = NULL;
    }

    assertFrameObject(frame_3d77773966012aba04345bacfce29158);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__114_as_string(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_50108bbfeeb6db035247c41dd86925b3;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_50108bbfeeb6db035247c41dd86925b3 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_50108bbfeeb6db035247c41dd86925b3)) {
        Py_XDECREF(cache_frame_50108bbfeeb6db035247c41dd86925b3);

#if _DEBUG_REFCOUNTS
        if (cache_frame_50108bbfeeb6db035247c41dd86925b3 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_50108bbfeeb6db035247c41dd86925b3 = MAKE_FUNCTION_FRAME(codeobj_50108bbfeeb6db035247c41dd86925b3, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_50108bbfeeb6db035247c41dd86925b3->m_type_description == NULL);
    frame_50108bbfeeb6db035247c41dd86925b3 = cache_frame_50108bbfeeb6db035247c41dd86925b3;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_50108bbfeeb6db035247c41dd86925b3);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_50108bbfeeb6db035247c41dd86925b3) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[296]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2342;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[215]);

        if (unlikely(tmp_called_value_2 == NULL)) {
            tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[215]);
        }

        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 2342;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_50108bbfeeb6db035247c41dd86925b3->m_frame.f_lineno = 2342;
        tmp_args_element_value_1 = CALL_FUNCTION_NO_ARGS(tmp_called_value_2);
        if (tmp_args_element_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 2342;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_2 = mod_consts[300];
        frame_50108bbfeeb6db035247c41dd86925b3->m_frame.f_lineno = 2342;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2342;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_50108bbfeeb6db035247c41dd86925b3);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_50108bbfeeb6db035247c41dd86925b3);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_50108bbfeeb6db035247c41dd86925b3);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_50108bbfeeb6db035247c41dd86925b3, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_50108bbfeeb6db035247c41dd86925b3->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_50108bbfeeb6db035247c41dd86925b3, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_50108bbfeeb6db035247c41dd86925b3,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_50108bbfeeb6db035247c41dd86925b3 == cache_frame_50108bbfeeb6db035247c41dd86925b3) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_50108bbfeeb6db035247c41dd86925b3);
        cache_frame_50108bbfeeb6db035247c41dd86925b3 = NULL;
    }

    assertFrameObject(frame_50108bbfeeb6db035247c41dd86925b3);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__115_as_integer(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_a753e11085ed5c53e0416ffdd76de3a5;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_a753e11085ed5c53e0416ffdd76de3a5 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_a753e11085ed5c53e0416ffdd76de3a5)) {
        Py_XDECREF(cache_frame_a753e11085ed5c53e0416ffdd76de3a5);

#if _DEBUG_REFCOUNTS
        if (cache_frame_a753e11085ed5c53e0416ffdd76de3a5 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_a753e11085ed5c53e0416ffdd76de3a5 = MAKE_FUNCTION_FRAME(codeobj_a753e11085ed5c53e0416ffdd76de3a5, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_a753e11085ed5c53e0416ffdd76de3a5->m_type_description == NULL);
    frame_a753e11085ed5c53e0416ffdd76de3a5 = cache_frame_a753e11085ed5c53e0416ffdd76de3a5;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_a753e11085ed5c53e0416ffdd76de3a5);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_a753e11085ed5c53e0416ffdd76de3a5) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[296]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2358;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[73]);

        if (unlikely(tmp_called_value_2 == NULL)) {
            tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
        }

        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 2358;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_a753e11085ed5c53e0416ffdd76de3a5->m_frame.f_lineno = 2358;
        tmp_args_element_value_1 = CALL_FUNCTION_NO_ARGS(tmp_called_value_2);
        if (tmp_args_element_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 2358;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_2 = mod_consts[302];
        frame_a753e11085ed5c53e0416ffdd76de3a5->m_frame.f_lineno = 2358;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2358;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a753e11085ed5c53e0416ffdd76de3a5);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_a753e11085ed5c53e0416ffdd76de3a5);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a753e11085ed5c53e0416ffdd76de3a5);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a753e11085ed5c53e0416ffdd76de3a5, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_a753e11085ed5c53e0416ffdd76de3a5->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a753e11085ed5c53e0416ffdd76de3a5, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_a753e11085ed5c53e0416ffdd76de3a5,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_a753e11085ed5c53e0416ffdd76de3a5 == cache_frame_a753e11085ed5c53e0416ffdd76de3a5) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_a753e11085ed5c53e0416ffdd76de3a5);
        cache_frame_a753e11085ed5c53e0416ffdd76de3a5 = NULL;
    }

    assertFrameObject(frame_a753e11085ed5c53e0416ffdd76de3a5);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__116_as_float(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_d83a073fe0d4c2933f92991fd7b06aa1;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_d83a073fe0d4c2933f92991fd7b06aa1 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_d83a073fe0d4c2933f92991fd7b06aa1)) {
        Py_XDECREF(cache_frame_d83a073fe0d4c2933f92991fd7b06aa1);

#if _DEBUG_REFCOUNTS
        if (cache_frame_d83a073fe0d4c2933f92991fd7b06aa1 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_d83a073fe0d4c2933f92991fd7b06aa1 = MAKE_FUNCTION_FRAME(codeobj_d83a073fe0d4c2933f92991fd7b06aa1, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_d83a073fe0d4c2933f92991fd7b06aa1->m_type_description == NULL);
    frame_d83a073fe0d4c2933f92991fd7b06aa1 = cache_frame_d83a073fe0d4c2933f92991fd7b06aa1;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_d83a073fe0d4c2933f92991fd7b06aa1);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_d83a073fe0d4c2933f92991fd7b06aa1) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[296]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2375;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[304]);

        if (unlikely(tmp_called_value_2 == NULL)) {
            tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[304]);
        }

        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 2375;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_d83a073fe0d4c2933f92991fd7b06aa1->m_frame.f_lineno = 2375;
        tmp_args_element_value_1 = CALL_FUNCTION_NO_ARGS(tmp_called_value_2);
        if (tmp_args_element_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 2375;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_2 = mod_consts[305];
        frame_d83a073fe0d4c2933f92991fd7b06aa1->m_frame.f_lineno = 2375;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2375;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d83a073fe0d4c2933f92991fd7b06aa1);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_d83a073fe0d4c2933f92991fd7b06aa1);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d83a073fe0d4c2933f92991fd7b06aa1);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_d83a073fe0d4c2933f92991fd7b06aa1, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_d83a073fe0d4c2933f92991fd7b06aa1->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_d83a073fe0d4c2933f92991fd7b06aa1, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_d83a073fe0d4c2933f92991fd7b06aa1,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_d83a073fe0d4c2933f92991fd7b06aa1 == cache_frame_d83a073fe0d4c2933f92991fd7b06aa1) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_d83a073fe0d4c2933f92991fd7b06aa1);
        cache_frame_d83a073fe0d4c2933f92991fd7b06aa1 = NULL;
    }

    assertFrameObject(frame_d83a073fe0d4c2933f92991fd7b06aa1);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__117_as_json(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_f7bcbb04c91cdb79fa9579bb535a5950;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_f7bcbb04c91cdb79fa9579bb535a5950 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_f7bcbb04c91cdb79fa9579bb535a5950)) {
        Py_XDECREF(cache_frame_f7bcbb04c91cdb79fa9579bb535a5950);

#if _DEBUG_REFCOUNTS
        if (cache_frame_f7bcbb04c91cdb79fa9579bb535a5950 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_f7bcbb04c91cdb79fa9579bb535a5950 = MAKE_FUNCTION_FRAME(codeobj_f7bcbb04c91cdb79fa9579bb535a5950, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_f7bcbb04c91cdb79fa9579bb535a5950->m_type_description == NULL);
    frame_f7bcbb04c91cdb79fa9579bb535a5950 = cache_frame_f7bcbb04c91cdb79fa9579bb535a5950;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_f7bcbb04c91cdb79fa9579bb535a5950);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_f7bcbb04c91cdb79fa9579bb535a5950) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[12]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2388;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_f7bcbb04c91cdb79fa9579bb535a5950);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_f7bcbb04c91cdb79fa9579bb535a5950);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_f7bcbb04c91cdb79fa9579bb535a5950);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_f7bcbb04c91cdb79fa9579bb535a5950, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_f7bcbb04c91cdb79fa9579bb535a5950->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_f7bcbb04c91cdb79fa9579bb535a5950, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_f7bcbb04c91cdb79fa9579bb535a5950,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_f7bcbb04c91cdb79fa9579bb535a5950 == cache_frame_f7bcbb04c91cdb79fa9579bb535a5950) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_f7bcbb04c91cdb79fa9579bb535a5950);
        cache_frame_f7bcbb04c91cdb79fa9579bb535a5950 = NULL;
    }

    assertFrameObject(frame_f7bcbb04c91cdb79fa9579bb535a5950);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__118__binary_w_type(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_typ = python_pars[1];
    PyObject *par_method_name = python_pars[2];
    PyObject *var_expr = NULL;
    struct Nuitka_FrameObject *frame_a67b7bcb220e71ddb0aa4a7f9ca70c58;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_a67b7bcb220e71ddb0aa4a7f9ca70c58 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_a67b7bcb220e71ddb0aa4a7f9ca70c58)) {
        Py_XDECREF(cache_frame_a67b7bcb220e71ddb0aa4a7f9ca70c58);

#if _DEBUG_REFCOUNTS
        if (cache_frame_a67b7bcb220e71ddb0aa4a7f9ca70c58 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_a67b7bcb220e71ddb0aa4a7f9ca70c58 = MAKE_FUNCTION_FRAME(codeobj_a67b7bcb220e71ddb0aa4a7f9ca70c58, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_a67b7bcb220e71ddb0aa4a7f9ca70c58->m_type_description == NULL);
    frame_a67b7bcb220e71ddb0aa4a7f9ca70c58 = cache_frame_a67b7bcb220e71ddb0aa4a7f9ca70c58;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_a67b7bcb220e71ddb0aa4a7f9ca70c58);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_a67b7bcb220e71ddb0aa4a7f9ca70c58) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        int tmp_or_left_truth_1;
        bool tmp_or_left_value_1;
        bool tmp_or_right_value_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_expression_value_5;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_isinstance_inst_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[12]);
        if (tmp_isinstance_inst_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2392;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[308]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[308]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_isinstance_inst_1);

            exception_lineno = 2392;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[309]);
        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_isinstance_inst_1);

            exception_lineno = 2392;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_inst_1);
        Py_DECREF(tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2391;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_operand_value_1 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2391;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_or_left_value_1 = (tmp_res == 0) ? true : false;
        tmp_or_left_truth_1 = tmp_or_left_value_1 != false ? 1 : 0;
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        CHECK_OBJECT(par_self);
        tmp_expression_value_4 = par_self;
        tmp_expression_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[12]);
        if (tmp_expression_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2393;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[310]);
        Py_DECREF(tmp_expression_value_3);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2393;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_5 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_5 == NULL)) {
            tmp_expression_value_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
        }

        if (tmp_expression_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_cmp_expr_left_1);

            exception_lineno = 2394;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[294]);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_cmp_expr_left_1);

            exception_lineno = 2394;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_6;
            PyTuple_SET_ITEM(tmp_cmp_expr_right_1, 0, tmp_tuple_element_1);
            tmp_expression_value_6 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

            if (unlikely(tmp_expression_value_6 == NULL)) {
                tmp_expression_value_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
            }

            if (tmp_expression_value_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2395;
                type_description_1 = "oooo";
                goto tuple_build_exception_1;
            }
            tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[290]);
            if (tmp_tuple_element_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2395;
                type_description_1 = "oooo";
                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_cmp_expr_right_1, 1, tmp_tuple_element_1);
        }
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_cmp_expr_left_1);
        Py_DECREF(tmp_cmp_expr_right_1);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        tmp_res = PySequence_Contains(tmp_cmp_expr_right_1, tmp_cmp_expr_left_1);
        Py_DECREF(tmp_cmp_expr_left_1);
        Py_DECREF(tmp_cmp_expr_right_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2393;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_or_right_value_1 = (tmp_res == 0) ? true : false;
        tmp_condition_result_1 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_condition_result_1 = tmp_or_left_value_1;
        or_end_1:;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        PyObject *tmp_tuple_element_2;
        tmp_expression_value_7 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[19]);

        if (unlikely(tmp_expression_value_7 == NULL)) {
            tmp_expression_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[19]);
        }

        if (tmp_expression_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2397;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_7, mod_consts[311]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2397;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_left_value_1 = mod_consts[312];
        CHECK_OBJECT(par_method_name);
        tmp_tuple_element_2 = par_method_name;
        tmp_right_value_1 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_right_value_1, 0, tmp_tuple_element_2);
        CHECK_OBJECT(par_method_name);
        tmp_tuple_element_2 = par_method_name;
        PyTuple_SET_ITEM0(tmp_right_value_1, 1, tmp_tuple_element_2);
        tmp_args_element_value_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_1, tmp_right_value_1);
        Py_DECREF(tmp_right_value_1);
        if (tmp_args_element_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 2400;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_a67b7bcb220e71ddb0aa4a7f9ca70c58->m_frame.f_lineno = 2397;
        tmp_raise_type_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_1, tmp_args_element_value_1);
        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_raise_type_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2397;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        exception_type = tmp_raise_type_1;
        exception_lineno = 2397;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    branch_no_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_expression_value_8;
        CHECK_OBJECT(par_self);
        tmp_expression_value_8 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_8, mod_consts[12]);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2402;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_a67b7bcb220e71ddb0aa4a7f9ca70c58->m_frame.f_lineno = 2402;
        tmp_assign_source_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, mod_consts[313]);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2402;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(var_expr == NULL);
        var_expr = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_typ);
        tmp_assattr_value_1 = par_typ;
        CHECK_OBJECT(var_expr);
        tmp_assattr_target_1 = var_expr;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[0], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2403;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a67b7bcb220e71ddb0aa4a7f9ca70c58);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a67b7bcb220e71ddb0aa4a7f9ca70c58);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a67b7bcb220e71ddb0aa4a7f9ca70c58, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_a67b7bcb220e71ddb0aa4a7f9ca70c58->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a67b7bcb220e71ddb0aa4a7f9ca70c58, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_a67b7bcb220e71ddb0aa4a7f9ca70c58,
        type_description_1,
        par_self,
        par_typ,
        par_method_name,
        var_expr
    );


    // Release cached frame if used for exception.
    if (frame_a67b7bcb220e71ddb0aa4a7f9ca70c58 == cache_frame_a67b7bcb220e71ddb0aa4a7f9ca70c58) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_a67b7bcb220e71ddb0aa4a7f9ca70c58);
        cache_frame_a67b7bcb220e71ddb0aa4a7f9ca70c58 = NULL;
    }

    assertFrameObject(frame_a67b7bcb220e71ddb0aa4a7f9ca70c58);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT(var_expr);
    tmp_return_value = var_expr;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_expr);
    Py_DECREF(var_expr);
    var_expr = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_expr);
    var_expr = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_typ);
    Py_DECREF(par_typ);
    CHECK_OBJECT(par_method_name);
    Py_DECREF(par_method_name);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_typ);
    Py_DECREF(par_typ);
    CHECK_OBJECT(par_method_name);
    Py_DECREF(par_method_name);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__120_should_evaluate_none(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_1d5640d11aeb82ae763f927b9f5c804a;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_1d5640d11aeb82ae763f927b9f5c804a = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_1d5640d11aeb82ae763f927b9f5c804a)) {
        Py_XDECREF(cache_frame_1d5640d11aeb82ae763f927b9f5c804a);

#if _DEBUG_REFCOUNTS
        if (cache_frame_1d5640d11aeb82ae763f927b9f5c804a == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_1d5640d11aeb82ae763f927b9f5c804a = MAKE_FUNCTION_FRAME(codeobj_1d5640d11aeb82ae763f927b9f5c804a, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_1d5640d11aeb82ae763f927b9f5c804a->m_type_description == NULL);
    frame_1d5640d11aeb82ae763f927b9f5c804a = cache_frame_1d5640d11aeb82ae763f927b9f5c804a;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_1d5640d11aeb82ae763f927b9f5c804a);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_1d5640d11aeb82ae763f927b9f5c804a) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_operand_value_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_operand_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[275]);
        if (tmp_operand_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2415;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        Py_DECREF(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2415;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = (tmp_res == 0) ? Py_True : Py_False;
        Py_INCREF(tmp_return_value);
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_1d5640d11aeb82ae763f927b9f5c804a);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_1d5640d11aeb82ae763f927b9f5c804a);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_1d5640d11aeb82ae763f927b9f5c804a);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_1d5640d11aeb82ae763f927b9f5c804a, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_1d5640d11aeb82ae763f927b9f5c804a->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_1d5640d11aeb82ae763f927b9f5c804a, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_1d5640d11aeb82ae763f927b9f5c804a,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_1d5640d11aeb82ae763f927b9f5c804a == cache_frame_1d5640d11aeb82ae763f927b9f5c804a) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_1d5640d11aeb82ae763f927b9f5c804a);
        cache_frame_1d5640d11aeb82ae763f927b9f5c804a = NULL;
    }

    assertFrameObject(frame_1d5640d11aeb82ae763f927b9f5c804a);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__121_should_evaluate_none(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_value = python_pars[1];
    struct Nuitka_FrameObject *frame_c5c406697da523074099ecbcf0fe8ffc;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_c5c406697da523074099ecbcf0fe8ffc = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_c5c406697da523074099ecbcf0fe8ffc)) {
        Py_XDECREF(cache_frame_c5c406697da523074099ecbcf0fe8ffc);

#if _DEBUG_REFCOUNTS
        if (cache_frame_c5c406697da523074099ecbcf0fe8ffc == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_c5c406697da523074099ecbcf0fe8ffc = MAKE_FUNCTION_FRAME(codeobj_c5c406697da523074099ecbcf0fe8ffc, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_c5c406697da523074099ecbcf0fe8ffc->m_type_description == NULL);
    frame_c5c406697da523074099ecbcf0fe8ffc = cache_frame_c5c406697da523074099ecbcf0fe8ffc;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_c5c406697da523074099ecbcf0fe8ffc);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_c5c406697da523074099ecbcf0fe8ffc) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_value);
        tmp_operand_value_1 = par_value;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2419;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_assattr_value_1 = (tmp_res == 0) ? Py_True : Py_False;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[275], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2419;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_c5c406697da523074099ecbcf0fe8ffc);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_c5c406697da523074099ecbcf0fe8ffc);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_c5c406697da523074099ecbcf0fe8ffc, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_c5c406697da523074099ecbcf0fe8ffc->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_c5c406697da523074099ecbcf0fe8ffc, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_c5c406697da523074099ecbcf0fe8ffc,
        type_description_1,
        par_self,
        par_value
    );


    // Release cached frame if used for exception.
    if (frame_c5c406697da523074099ecbcf0fe8ffc == cache_frame_c5c406697da523074099ecbcf0fe8ffc) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_c5c406697da523074099ecbcf0fe8ffc);
        cache_frame_c5c406697da523074099ecbcf0fe8ffc = NULL;
    }

    assertFrameObject(frame_c5c406697da523074099ecbcf0fe8ffc);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__122__str_impl(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_5642929c27d1565d95c4e766d5e2e1a9;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_5642929c27d1565d95c4e766d5e2e1a9 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_5642929c27d1565d95c4e766d5e2e1a9)) {
        Py_XDECREF(cache_frame_5642929c27d1565d95c4e766d5e2e1a9);

#if _DEBUG_REFCOUNTS
        if (cache_frame_5642929c27d1565d95c4e766d5e2e1a9 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_5642929c27d1565d95c4e766d5e2e1a9 = MAKE_FUNCTION_FRAME(codeobj_5642929c27d1565d95c4e766d5e2e1a9, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_5642929c27d1565d95c4e766d5e2e1a9->m_type_description == NULL);
    frame_5642929c27d1565d95c4e766d5e2e1a9 = cache_frame_5642929c27d1565d95c4e766d5e2e1a9;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_5642929c27d1565d95c4e766d5e2e1a9);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_5642929c27d1565d95c4e766d5e2e1a9) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[215]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[215]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2423;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_5642929c27d1565d95c4e766d5e2e1a9->m_frame.f_lineno = 2423;
        tmp_return_value = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tmp_called_value_1, &PyTuple_GET_ITEM(mod_consts[315], 0), mod_consts[216]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2423;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_5642929c27d1565d95c4e766d5e2e1a9);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_5642929c27d1565d95c4e766d5e2e1a9);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_5642929c27d1565d95c4e766d5e2e1a9);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_5642929c27d1565d95c4e766d5e2e1a9, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_5642929c27d1565d95c4e766d5e2e1a9->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_5642929c27d1565d95c4e766d5e2e1a9, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_5642929c27d1565d95c4e766d5e2e1a9,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_5642929c27d1565d95c4e766d5e2e1a9 == cache_frame_5642929c27d1565d95c4e766d5e2e1a9) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_5642929c27d1565d95c4e766d5e2e1a9);
        cache_frame_5642929c27d1565d95c4e766d5e2e1a9 = NULL;
    }

    assertFrameObject(frame_5642929c27d1565d95c4e766d5e2e1a9);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__123_bind_processor(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    struct Nuitka_CellObject *par_self = Nuitka_Cell_New1(python_pars[0]);
    PyObject *par_dialect = python_pars[1];
    struct Nuitka_CellObject *var_string_process = Nuitka_Cell_Empty();
    struct Nuitka_CellObject *var_json_serializer = Nuitka_Cell_Empty();
    PyObject *var_process = NULL;
    struct Nuitka_FrameObject *frame_297628ca1575a9b2bb8e8a867f132882;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_297628ca1575a9b2bb8e8a867f132882 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_297628ca1575a9b2bb8e8a867f132882)) {
        Py_XDECREF(cache_frame_297628ca1575a9b2bb8e8a867f132882);

#if _DEBUG_REFCOUNTS
        if (cache_frame_297628ca1575a9b2bb8e8a867f132882 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_297628ca1575a9b2bb8e8a867f132882 = MAKE_FUNCTION_FRAME(codeobj_297628ca1575a9b2bb8e8a867f132882, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_297628ca1575a9b2bb8e8a867f132882->m_type_description == NULL);
    frame_297628ca1575a9b2bb8e8a867f132882 = cache_frame_297628ca1575a9b2bb8e8a867f132882;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_297628ca1575a9b2bb8e8a867f132882);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_297628ca1575a9b2bb8e8a867f132882) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        CHECK_OBJECT(Nuitka_Cell_GET(par_self));
        tmp_expression_value_1 = Nuitka_Cell_GET(par_self);
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[316]);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2426;
            type_description_1 = "cocco";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_dialect);
        tmp_args_element_value_1 = par_dialect;
        frame_297628ca1575a9b2bb8e8a867f132882->m_frame.f_lineno = 2426;
        tmp_assign_source_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[232], tmp_args_element_value_1);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2426;
            type_description_1 = "cocco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_string_process) == NULL);
        PyCell_SET(var_string_process, tmp_assign_source_1);

    }
    {
        PyObject *tmp_assign_source_2;
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_dialect);
        tmp_expression_value_2 = par_dialect;
        tmp_or_left_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[317]);
        if (tmp_or_left_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2428;
            type_description_1 = "cocco";
            goto frame_exception_exit_1;
        }
        tmp_or_left_truth_1 = CHECK_IF_TRUE(tmp_or_left_value_1);
        if (tmp_or_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_or_left_value_1);

            exception_lineno = 2428;
            type_description_1 = "cocco";
            goto frame_exception_exit_1;
        }
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        Py_DECREF(tmp_or_left_value_1);
        tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[318]);

        if (unlikely(tmp_expression_value_3 == NULL)) {
            tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[318]);
        }

        if (tmp_expression_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2428;
            type_description_1 = "cocco";
            goto frame_exception_exit_1;
        }
        tmp_or_right_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[243]);
        if (tmp_or_right_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2428;
            type_description_1 = "cocco";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_2 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_assign_source_2 = tmp_or_left_value_1;
        or_end_1:;
        assert(Nuitka_Cell_GET(var_json_serializer) == NULL);
        PyCell_SET(var_json_serializer, tmp_assign_source_2);

    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_297628ca1575a9b2bb8e8a867f132882);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_297628ca1575a9b2bb8e8a867f132882);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_297628ca1575a9b2bb8e8a867f132882, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_297628ca1575a9b2bb8e8a867f132882->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_297628ca1575a9b2bb8e8a867f132882, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_297628ca1575a9b2bb8e8a867f132882,
        type_description_1,
        par_self,
        par_dialect,
        var_string_process,
        var_json_serializer,
        var_process
    );


    // Release cached frame if used for exception.
    if (frame_297628ca1575a9b2bb8e8a867f132882 == cache_frame_297628ca1575a9b2bb8e8a867f132882) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_297628ca1575a9b2bb8e8a867f132882);
        cache_frame_297628ca1575a9b2bb8e8a867f132882 = NULL;
    }

    assertFrameObject(frame_297628ca1575a9b2bb8e8a867f132882);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    {
        PyObject *tmp_assign_source_3;
        struct Nuitka_CellObject *tmp_closure_1[3];

        tmp_closure_1[0] = var_json_serializer;
        Py_INCREF(tmp_closure_1[0]);
        tmp_closure_1[1] = par_self;
        Py_INCREF(tmp_closure_1[1]);
        tmp_closure_1[2] = var_string_process;
        Py_INCREF(tmp_closure_1[2]);

        tmp_assign_source_3 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__123_bind_processor$$$function__1_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_3;
    }
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_string_process);
    Py_DECREF(var_string_process);
    var_string_process = NULL;
    CHECK_OBJECT(var_json_serializer);
    Py_DECREF(var_json_serializer);
    var_json_serializer = NULL;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(var_string_process);
    Py_DECREF(var_string_process);
    var_string_process = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__123_bind_processor$$$function__1_process(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    PyObject *var_serialized = NULL;
    struct Nuitka_FrameObject *frame_d6dee81af77776b48bf2d4db1bf6e30b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_d6dee81af77776b48bf2d4db1bf6e30b = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_d6dee81af77776b48bf2d4db1bf6e30b)) {
        Py_XDECREF(cache_frame_d6dee81af77776b48bf2d4db1bf6e30b);

#if _DEBUG_REFCOUNTS
        if (cache_frame_d6dee81af77776b48bf2d4db1bf6e30b == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_d6dee81af77776b48bf2d4db1bf6e30b = MAKE_FUNCTION_FRAME(codeobj_d6dee81af77776b48bf2d4db1bf6e30b, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_d6dee81af77776b48bf2d4db1bf6e30b->m_type_description == NULL);
    frame_d6dee81af77776b48bf2d4db1bf6e30b = cache_frame_d6dee81af77776b48bf2d4db1bf6e30b;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_d6dee81af77776b48bf2d4db1bf6e30b);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_d6dee81af77776b48bf2d4db1bf6e30b) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_value);
        tmp_cmp_expr_left_1 = par_value;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2431;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_1 = Nuitka_Cell_GET(self->m_closure[1]);
        tmp_cmp_expr_right_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[320]);
        if (tmp_cmp_expr_right_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2431;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        Py_DECREF(tmp_cmp_expr_right_1);
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = Py_None;
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_INCREF(par_value);
            Py_DECREF(old);
        }

    }
    goto branch_end_1;
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_or_left_truth_1;
        nuitka_bool tmp_or_left_value_1;
        nuitka_bool tmp_or_right_value_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_expression_value_2;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_value);
        tmp_isinstance_inst_1 = par_value;
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[308]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[308]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2433;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[321]);
        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2433;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2433;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }
        tmp_or_left_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_or_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2433;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        CHECK_OBJECT(par_value);
        tmp_cmp_expr_left_2 = par_value;
        tmp_cmp_expr_right_2 = Py_None;
        tmp_and_left_value_1 = (tmp_cmp_expr_left_2 == tmp_cmp_expr_right_2) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2434;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_3 = Nuitka_Cell_GET(self->m_closure[1]);
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[275]);
        if (tmp_attribute_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2434;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 2434;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        tmp_or_right_value_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_or_right_value_1 = tmp_and_left_value_1;
        and_end_1:;
        tmp_condition_result_2 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_condition_result_2 = tmp_or_left_value_1;
        or_end_1:;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_no_2:;
    branch_end_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[322]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2438;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }

        tmp_called_value_1 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        frame_d6dee81af77776b48bf2d4db1bf6e30b->m_frame.f_lineno = 2438;
        tmp_assign_source_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2438;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }
        assert(var_serialized == NULL);
        var_serialized = tmp_assign_source_2;
    }
    {
        nuitka_bool tmp_condition_result_3;
        int tmp_truth_name_2;
        if (Nuitka_Cell_GET(self->m_closure[2]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[323]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2439;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_2 = CHECK_IF_TRUE(Nuitka_Cell_GET(self->m_closure[2]));
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2439;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_2;
        if (Nuitka_Cell_GET(self->m_closure[2]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[323]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2440;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }

        tmp_called_value_2 = Nuitka_Cell_GET(self->m_closure[2]);
        CHECK_OBJECT(var_serialized);
        tmp_args_element_value_2 = var_serialized;
        frame_d6dee81af77776b48bf2d4db1bf6e30b->m_frame.f_lineno = 2440;
        tmp_assign_source_3 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_2, tmp_args_element_value_2);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2440;
            type_description_1 = "ooccc";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_serialized;
            assert(old != NULL);
            var_serialized = tmp_assign_source_3;
            Py_DECREF(old);
        }

    }
    branch_no_3:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d6dee81af77776b48bf2d4db1bf6e30b);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_d6dee81af77776b48bf2d4db1bf6e30b);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d6dee81af77776b48bf2d4db1bf6e30b);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_d6dee81af77776b48bf2d4db1bf6e30b, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_d6dee81af77776b48bf2d4db1bf6e30b->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_d6dee81af77776b48bf2d4db1bf6e30b, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_d6dee81af77776b48bf2d4db1bf6e30b,
        type_description_1,
        par_value,
        var_serialized,
        self->m_closure[1],
        self->m_closure[0],
        self->m_closure[2]
    );


    // Release cached frame if used for exception.
    if (frame_d6dee81af77776b48bf2d4db1bf6e30b == cache_frame_d6dee81af77776b48bf2d4db1bf6e30b) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_d6dee81af77776b48bf2d4db1bf6e30b);
        cache_frame_d6dee81af77776b48bf2d4db1bf6e30b = NULL;
    }

    assertFrameObject(frame_d6dee81af77776b48bf2d4db1bf6e30b);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT(var_serialized);
    tmp_return_value = var_serialized;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(par_value);
    par_value = NULL;
    Py_XDECREF(var_serialized);
    var_serialized = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_value);
    par_value = NULL;
    Py_XDECREF(var_serialized);
    var_serialized = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__124_result_processor(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    PyObject *par_coltype = python_pars[2];
    struct Nuitka_CellObject *var_string_process = Nuitka_Cell_Empty();
    struct Nuitka_CellObject *var_json_deserializer = Nuitka_Cell_Empty();
    PyObject *var_process = NULL;
    struct Nuitka_FrameObject *frame_b5dc4d7e9c1118009c9e6035626d916f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_b5dc4d7e9c1118009c9e6035626d916f = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_b5dc4d7e9c1118009c9e6035626d916f)) {
        Py_XDECREF(cache_frame_b5dc4d7e9c1118009c9e6035626d916f);

#if _DEBUG_REFCOUNTS
        if (cache_frame_b5dc4d7e9c1118009c9e6035626d916f == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_b5dc4d7e9c1118009c9e6035626d916f = MAKE_FUNCTION_FRAME(codeobj_b5dc4d7e9c1118009c9e6035626d916f, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_b5dc4d7e9c1118009c9e6035626d916f->m_type_description == NULL);
    frame_b5dc4d7e9c1118009c9e6035626d916f = cache_frame_b5dc4d7e9c1118009c9e6035626d916f;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_b5dc4d7e9c1118009c9e6035626d916f);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_b5dc4d7e9c1118009c9e6035626d916f) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[316]);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2446;
            type_description_1 = "ooocco";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_dialect);
        tmp_args_element_value_1 = par_dialect;
        CHECK_OBJECT(par_coltype);
        tmp_args_element_value_2 = par_coltype;
        frame_b5dc4d7e9c1118009c9e6035626d916f->m_frame.f_lineno = 2446;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assign_source_1 = CALL_METHOD_WITH_ARGS2(
                tmp_called_instance_1,
                mod_consts[233],
                call_args
            );
        }

        Py_DECREF(tmp_called_instance_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2446;
            type_description_1 = "ooocco";
            goto frame_exception_exit_1;
        }
        assert(Nuitka_Cell_GET(var_string_process) == NULL);
        PyCell_SET(var_string_process, tmp_assign_source_1);

    }
    {
        PyObject *tmp_assign_source_2;
        int tmp_or_left_truth_1;
        PyObject *tmp_or_left_value_1;
        PyObject *tmp_or_right_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_dialect);
        tmp_expression_value_2 = par_dialect;
        tmp_or_left_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[324]);
        if (tmp_or_left_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2447;
            type_description_1 = "ooocco";
            goto frame_exception_exit_1;
        }
        tmp_or_left_truth_1 = CHECK_IF_TRUE(tmp_or_left_value_1);
        if (tmp_or_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_or_left_value_1);

            exception_lineno = 2447;
            type_description_1 = "ooocco";
            goto frame_exception_exit_1;
        }
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        Py_DECREF(tmp_or_left_value_1);
        tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[318]);

        if (unlikely(tmp_expression_value_3 == NULL)) {
            tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[318]);
        }

        if (tmp_expression_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2447;
            type_description_1 = "ooocco";
            goto frame_exception_exit_1;
        }
        tmp_or_right_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[246]);
        if (tmp_or_right_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2447;
            type_description_1 = "ooocco";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_2 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_assign_source_2 = tmp_or_left_value_1;
        or_end_1:;
        assert(Nuitka_Cell_GET(var_json_deserializer) == NULL);
        PyCell_SET(var_json_deserializer, tmp_assign_source_2);

    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b5dc4d7e9c1118009c9e6035626d916f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b5dc4d7e9c1118009c9e6035626d916f);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_b5dc4d7e9c1118009c9e6035626d916f, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_b5dc4d7e9c1118009c9e6035626d916f->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_b5dc4d7e9c1118009c9e6035626d916f, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_b5dc4d7e9c1118009c9e6035626d916f,
        type_description_1,
        par_self,
        par_dialect,
        par_coltype,
        var_string_process,
        var_json_deserializer,
        var_process
    );


    // Release cached frame if used for exception.
    if (frame_b5dc4d7e9c1118009c9e6035626d916f == cache_frame_b5dc4d7e9c1118009c9e6035626d916f) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_b5dc4d7e9c1118009c9e6035626d916f);
        cache_frame_b5dc4d7e9c1118009c9e6035626d916f = NULL;
    }

    assertFrameObject(frame_b5dc4d7e9c1118009c9e6035626d916f);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    {
        PyObject *tmp_assign_source_3;
        struct Nuitka_CellObject *tmp_closure_1[2];

        tmp_closure_1[0] = var_json_deserializer;
        Py_INCREF(tmp_closure_1[0]);
        tmp_closure_1[1] = var_string_process;
        Py_INCREF(tmp_closure_1[1]);

        tmp_assign_source_3 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__124_result_processor$$$function__1_process(tmp_closure_1);

        assert(var_process == NULL);
        var_process = tmp_assign_source_3;
    }
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_string_process);
    Py_DECREF(var_string_process);
    var_string_process = NULL;
    CHECK_OBJECT(var_json_deserializer);
    Py_DECREF(var_json_deserializer);
    var_json_deserializer = NULL;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(var_string_process);
    Py_DECREF(var_string_process);
    var_string_process = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);
    CHECK_OBJECT(par_coltype);
    Py_DECREF(par_coltype);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__124_result_processor$$$function__1_process(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    PyObject *tmp_return_value = NULL;
    struct Nuitka_FrameObject *frame_cfec1619bd0b3b489d79dedee5c04bef;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_cfec1619bd0b3b489d79dedee5c04bef = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_value);
        tmp_cmp_expr_left_1 = par_value;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    branch_no_1:;
    if (isFrameUnusable(cache_frame_cfec1619bd0b3b489d79dedee5c04bef)) {
        Py_XDECREF(cache_frame_cfec1619bd0b3b489d79dedee5c04bef);

#if _DEBUG_REFCOUNTS
        if (cache_frame_cfec1619bd0b3b489d79dedee5c04bef == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_cfec1619bd0b3b489d79dedee5c04bef = MAKE_FUNCTION_FRAME(codeobj_cfec1619bd0b3b489d79dedee5c04bef, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_cfec1619bd0b3b489d79dedee5c04bef->m_type_description == NULL);
    frame_cfec1619bd0b3b489d79dedee5c04bef = cache_frame_cfec1619bd0b3b489d79dedee5c04bef;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_cfec1619bd0b3b489d79dedee5c04bef);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_cfec1619bd0b3b489d79dedee5c04bef) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_2;
        int tmp_truth_name_1;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[323]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2452;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_truth_name_1 = CHECK_IF_TRUE(Nuitka_Cell_GET(self->m_closure[1]));
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2452;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        if (Nuitka_Cell_GET(self->m_closure[1]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[323]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2453;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_value_1 = Nuitka_Cell_GET(self->m_closure[1]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_1 = par_value;
        frame_cfec1619bd0b3b489d79dedee5c04bef->m_frame.f_lineno = 2453;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2453;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_value;
            assert(old != NULL);
            par_value = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    branch_no_2:;
    {
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_2;
        if (Nuitka_Cell_GET(self->m_closure[0]) == NULL) {

            FORMAT_UNBOUND_CLOSURE_ERROR(&exception_type, &exception_value, mod_consts[326]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2454;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }

        tmp_called_value_2 = Nuitka_Cell_GET(self->m_closure[0]);
        CHECK_OBJECT(par_value);
        tmp_args_element_value_2 = par_value;
        frame_cfec1619bd0b3b489d79dedee5c04bef->m_frame.f_lineno = 2454;
        tmp_return_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_2, tmp_args_element_value_2);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2454;
            type_description_1 = "occ";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_cfec1619bd0b3b489d79dedee5c04bef);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_cfec1619bd0b3b489d79dedee5c04bef);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_cfec1619bd0b3b489d79dedee5c04bef);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_cfec1619bd0b3b489d79dedee5c04bef, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_cfec1619bd0b3b489d79dedee5c04bef->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_cfec1619bd0b3b489d79dedee5c04bef, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_cfec1619bd0b3b489d79dedee5c04bef,
        type_description_1,
        par_value,
        self->m_closure[1],
        self->m_closure[0]
    );


    // Release cached frame if used for exception.
    if (frame_cfec1619bd0b3b489d79dedee5c04bef == cache_frame_cfec1619bd0b3b489d79dedee5c04bef) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_cfec1619bd0b3b489d79dedee5c04bef);
        cache_frame_cfec1619bd0b3b489d79dedee5c04bef = NULL;
    }

    assertFrameObject(frame_cfec1619bd0b3b489d79dedee5c04bef);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(par_value);
    par_value = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_value);
    par_value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.


   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__125__setup_getitem(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_index = python_pars[1];
    PyObject *var_return_type = NULL;
    PyObject *var_adapt_kw = NULL;
    struct Nuitka_FrameObject *frame_079463e5c509f3aa05c5b3f499427a50;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    int tmp_res;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_079463e5c509f3aa05c5b3f499427a50 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_079463e5c509f3aa05c5b3f499427a50)) {
        Py_XDECREF(cache_frame_079463e5c509f3aa05c5b3f499427a50);

#if _DEBUG_REFCOUNTS
        if (cache_frame_079463e5c509f3aa05c5b3f499427a50 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_079463e5c509f3aa05c5b3f499427a50 = MAKE_FUNCTION_FRAME(codeobj_079463e5c509f3aa05c5b3f499427a50, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_079463e5c509f3aa05c5b3f499427a50->m_type_description == NULL);
    frame_079463e5c509f3aa05c5b3f499427a50 = cache_frame_079463e5c509f3aa05c5b3f499427a50;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_079463e5c509f3aa05c5b3f499427a50);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_079463e5c509f3aa05c5b3f499427a50) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT(par_index);
        tmp_isinstance_inst_1 = par_index;
        tmp_isinstance_cls_1 = (PyObject *)&PySlice_Type;
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2569;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_assign_source_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[0]);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2570;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(var_return_type == NULL);
        var_return_type = tmp_assign_source_1;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_expression_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[0]);
        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2571;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[327]);
        Py_DECREF(tmp_expression_value_2);
        if (tmp_attribute_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2571;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 2571;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_start_value_1;
        PyObject *tmp_left_value_1;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_right_value_1;
        PyObject *tmp_stop_value_1;
        PyObject *tmp_left_value_2;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_right_value_2;
        PyObject *tmp_step_value_1;
        PyObject *tmp_expression_value_6;
        CHECK_OBJECT(par_index);
        tmp_expression_value_4 = par_index;
        tmp_left_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[328]);
        if (tmp_left_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2572;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_1 = mod_consts[204];
        tmp_start_value_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT_LONG(tmp_left_value_1, tmp_right_value_1);
        Py_DECREF(tmp_left_value_1);
        if (tmp_start_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2572;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_index);
        tmp_expression_value_5 = par_index;
        tmp_left_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[329]);
        if (tmp_left_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_start_value_1);

            exception_lineno = 2572;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_2 = mod_consts[204];
        tmp_stop_value_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT_LONG(tmp_left_value_2, tmp_right_value_2);
        Py_DECREF(tmp_left_value_2);
        if (tmp_stop_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_start_value_1);

            exception_lineno = 2572;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_index);
        tmp_expression_value_6 = par_index;
        tmp_step_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[330]);
        if (tmp_step_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_start_value_1);
            Py_DECREF(tmp_stop_value_1);

            exception_lineno = 2572;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_2 = MAKE_SLICEOBJ3(tmp_start_value_1, tmp_stop_value_1, tmp_step_value_1);
        Py_DECREF(tmp_start_value_1);
        Py_DECREF(tmp_stop_value_1);
        Py_DECREF(tmp_step_value_1);
        assert(!(tmp_assign_source_2 == NULL));
        {
            PyObject *old = par_index;
            assert(old != NULL);
            par_index = tmp_assign_source_2;
            Py_DECREF(old);
        }

    }
    branch_no_2:;
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_kw_call_arg_value_0_1;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_kw_call_dict_value_0_1;
        PyObject *tmp_expression_value_8;
        PyObject *tmp_expression_value_9;
        PyObject *tmp_kw_call_dict_value_1_1;
        PyObject *tmp_expression_value_10;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_called_value_3;
        PyObject *tmp_kw_call_arg_value_0_2;
        PyObject *tmp_expression_value_11;
        PyObject *tmp_kw_call_dict_value_0_2;
        PyObject *tmp_expression_value_12;
        PyObject *tmp_expression_value_13;
        PyObject *tmp_kw_call_dict_value_1_2;
        PyObject *tmp_expression_value_14;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_called_value_4;
        PyObject *tmp_kw_call_arg_value_0_3;
        PyObject *tmp_expression_value_15;
        PyObject *tmp_kw_call_dict_value_0_3;
        PyObject *tmp_expression_value_16;
        PyObject *tmp_expression_value_17;
        PyObject *tmp_kw_call_dict_value_1_3;
        PyObject *tmp_expression_value_18;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[331]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[331]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2573;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[332]);

        if (unlikely(tmp_called_value_2 == NULL)) {
            tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[332]);
        }

        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2574;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_index);
        tmp_expression_value_7 = par_index;
        tmp_kw_call_arg_value_0_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_7, mod_consts[328]);
        if (tmp_kw_call_arg_value_0_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2575;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_9 = par_self;
        tmp_expression_value_8 = LOOKUP_ATTRIBUTE(tmp_expression_value_9, mod_consts[12]);
        if (tmp_expression_value_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_kw_call_arg_value_0_1);

            exception_lineno = 2576;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_kw_call_dict_value_0_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_8, mod_consts[333]);
        Py_DECREF(tmp_expression_value_8);
        if (tmp_kw_call_dict_value_0_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_kw_call_arg_value_0_1);

            exception_lineno = 2576;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_10 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[334]);

        if (unlikely(tmp_expression_value_10 == NULL)) {
            tmp_expression_value_10 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[334]);
        }

        if (tmp_expression_value_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_kw_call_arg_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_0_1);

            exception_lineno = 2577;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_kw_call_dict_value_1_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_10, mod_consts[335]);
        if (tmp_kw_call_dict_value_1_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_kw_call_arg_value_0_1);
            Py_DECREF(tmp_kw_call_dict_value_0_1);

            exception_lineno = 2577;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_079463e5c509f3aa05c5b3f499427a50->m_frame.f_lineno = 2574;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_1};
            PyObject *kw_values[2] = {tmp_kw_call_dict_value_0_1, tmp_kw_call_dict_value_1_1};
            tmp_args_element_value_1 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tmp_called_value_2, args, kw_values, mod_consts[336]);
        }

        Py_DECREF(tmp_kw_call_arg_value_0_1);
        Py_DECREF(tmp_kw_call_dict_value_0_1);
        Py_DECREF(tmp_kw_call_dict_value_1_1);
        if (tmp_args_element_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2574;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[332]);

        if (unlikely(tmp_called_value_3 == NULL)) {
            tmp_called_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[332]);
        }

        if (tmp_called_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_1);

            exception_lineno = 2579;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_index);
        tmp_expression_value_11 = par_index;
        tmp_kw_call_arg_value_0_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_11, mod_consts[329]);
        if (tmp_kw_call_arg_value_0_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_1);

            exception_lineno = 2580;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_13 = par_self;
        tmp_expression_value_12 = LOOKUP_ATTRIBUTE(tmp_expression_value_13, mod_consts[12]);
        if (tmp_expression_value_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_2);

            exception_lineno = 2581;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_kw_call_dict_value_0_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_12, mod_consts[333]);
        Py_DECREF(tmp_expression_value_12);
        if (tmp_kw_call_dict_value_0_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_2);

            exception_lineno = 2581;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_14 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[334]);

        if (unlikely(tmp_expression_value_14 == NULL)) {
            tmp_expression_value_14 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[334]);
        }

        if (tmp_expression_value_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_2);
            Py_DECREF(tmp_kw_call_dict_value_0_2);

            exception_lineno = 2582;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_kw_call_dict_value_1_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_14, mod_consts[335]);
        if (tmp_kw_call_dict_value_1_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_1);
            Py_DECREF(tmp_kw_call_arg_value_0_2);
            Py_DECREF(tmp_kw_call_dict_value_0_2);

            exception_lineno = 2582;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_079463e5c509f3aa05c5b3f499427a50->m_frame.f_lineno = 2579;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_2};
            PyObject *kw_values[2] = {tmp_kw_call_dict_value_0_2, tmp_kw_call_dict_value_1_2};
            tmp_args_element_value_2 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tmp_called_value_3, args, kw_values, mod_consts[336]);
        }

        Py_DECREF(tmp_kw_call_arg_value_0_2);
        Py_DECREF(tmp_kw_call_dict_value_0_2);
        Py_DECREF(tmp_kw_call_dict_value_1_2);
        if (tmp_args_element_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_1);

            exception_lineno = 2579;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[332]);

        if (unlikely(tmp_called_value_4 == NULL)) {
            tmp_called_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[332]);
        }

        if (tmp_called_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_1);
            Py_DECREF(tmp_args_element_value_2);

            exception_lineno = 2584;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_index);
        tmp_expression_value_15 = par_index;
        tmp_kw_call_arg_value_0_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_15, mod_consts[330]);
        if (tmp_kw_call_arg_value_0_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_1);
            Py_DECREF(tmp_args_element_value_2);

            exception_lineno = 2585;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_17 = par_self;
        tmp_expression_value_16 = LOOKUP_ATTRIBUTE(tmp_expression_value_17, mod_consts[12]);
        if (tmp_expression_value_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_1);
            Py_DECREF(tmp_args_element_value_2);
            Py_DECREF(tmp_kw_call_arg_value_0_3);

            exception_lineno = 2586;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_kw_call_dict_value_0_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_16, mod_consts[333]);
        Py_DECREF(tmp_expression_value_16);
        if (tmp_kw_call_dict_value_0_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_1);
            Py_DECREF(tmp_args_element_value_2);
            Py_DECREF(tmp_kw_call_arg_value_0_3);

            exception_lineno = 2586;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_18 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[334]);

        if (unlikely(tmp_expression_value_18 == NULL)) {
            tmp_expression_value_18 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[334]);
        }

        if (tmp_expression_value_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_1);
            Py_DECREF(tmp_args_element_value_2);
            Py_DECREF(tmp_kw_call_arg_value_0_3);
            Py_DECREF(tmp_kw_call_dict_value_0_3);

            exception_lineno = 2587;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_kw_call_dict_value_1_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_18, mod_consts[335]);
        if (tmp_kw_call_dict_value_1_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_1);
            Py_DECREF(tmp_args_element_value_2);
            Py_DECREF(tmp_kw_call_arg_value_0_3);
            Py_DECREF(tmp_kw_call_dict_value_0_3);

            exception_lineno = 2587;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_079463e5c509f3aa05c5b3f499427a50->m_frame.f_lineno = 2584;
        {
            PyObject *args[] = {tmp_kw_call_arg_value_0_3};
            PyObject *kw_values[2] = {tmp_kw_call_dict_value_0_3, tmp_kw_call_dict_value_1_3};
            tmp_args_element_value_3 = CALL_FUNCTION_WITH_ARGS1_KWSPLIT(tmp_called_value_4, args, kw_values, mod_consts[336]);
        }

        Py_DECREF(tmp_kw_call_arg_value_0_3);
        Py_DECREF(tmp_kw_call_dict_value_0_3);
        Py_DECREF(tmp_kw_call_dict_value_1_3);
        if (tmp_args_element_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_1);
            Py_DECREF(tmp_args_element_value_2);

            exception_lineno = 2584;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_079463e5c509f3aa05c5b3f499427a50->m_frame.f_lineno = 2573;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2, tmp_args_element_value_3};
            tmp_assign_source_3 = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_args_element_value_1);
        Py_DECREF(tmp_args_element_value_2);
        Py_DECREF(tmp_args_element_value_3);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2573;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_index;
            assert(old != NULL);
            par_index = tmp_assign_source_3;
            Py_DECREF(old);
        }

    }
    goto branch_end_1;
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_expression_value_19;
        PyObject *tmp_expression_value_20;
        PyObject *tmp_attribute_value_2;
        int tmp_truth_name_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_20 = par_self;
        tmp_expression_value_19 = LOOKUP_ATTRIBUTE(tmp_expression_value_20, mod_consts[0]);
        if (tmp_expression_value_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2591;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_attribute_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_19, mod_consts[327]);
        Py_DECREF(tmp_expression_value_19);
        if (tmp_attribute_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2591;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_attribute_value_2);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_2);

            exception_lineno = 2591;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_2);
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_left_value_3;
        PyObject *tmp_right_value_3;
        CHECK_OBJECT(par_index);
        tmp_left_value_3 = par_index;
        tmp_right_value_3 = mod_consts[204];
        tmp_result = BINARY_OPERATION_ADD_OBJECT_LONG_INPLACE(&tmp_left_value_3, tmp_right_value_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2592;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_4 = tmp_left_value_3;
        par_index = tmp_assign_source_4;

    }
    branch_no_3:;
    {
        nuitka_bool tmp_condition_result_4;
        int tmp_or_left_truth_1;
        nuitka_bool tmp_or_left_value_1;
        nuitka_bool tmp_or_right_value_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_21;
        PyObject *tmp_expression_value_22;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        PyObject *tmp_expression_value_23;
        PyObject *tmp_expression_value_24;
        CHECK_OBJECT(par_self);
        tmp_expression_value_22 = par_self;
        tmp_expression_value_21 = LOOKUP_ATTRIBUTE(tmp_expression_value_22, mod_consts[0]);
        if (tmp_expression_value_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2593;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_21, mod_consts[337]);
        Py_DECREF(tmp_expression_value_21);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2593;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = Py_None;
        tmp_or_left_value_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        Py_DECREF(tmp_cmp_expr_left_1);
        tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        CHECK_OBJECT(par_self);
        tmp_expression_value_24 = par_self;
        tmp_expression_value_23 = LOOKUP_ATTRIBUTE(tmp_expression_value_24, mod_consts[0]);
        if (tmp_expression_value_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2593;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_left_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_23, mod_consts[337]);
        Py_DECREF(tmp_expression_value_23);
        if (tmp_cmp_expr_left_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2593;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_2 = mod_consts[204];
        tmp_or_right_value_1 = RICH_COMPARE_EQ_NBOOL_OBJECT_LONG(tmp_cmp_expr_left_2, tmp_cmp_expr_right_2);
        Py_DECREF(tmp_cmp_expr_left_2);
        if (tmp_or_right_value_1 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2593;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_4 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_condition_result_4 = tmp_or_left_value_1;
        or_end_1:;
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_4;
        } else {
            goto branch_no_4;
        }
        assert(tmp_condition_result_4 != NUITKA_BOOL_UNASSIGNED);
    }
    branch_yes_4:;
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_expression_value_25;
        PyObject *tmp_expression_value_26;
        CHECK_OBJECT(par_self);
        tmp_expression_value_26 = par_self;
        tmp_expression_value_25 = LOOKUP_ATTRIBUTE(tmp_expression_value_26, mod_consts[0]);
        if (tmp_expression_value_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2594;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_25, mod_consts[338]);
        Py_DECREF(tmp_expression_value_25);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2594;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(var_return_type == NULL);
        var_return_type = tmp_assign_source_5;
    }
    goto branch_end_4;
    branch_no_4:;
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_left_value_4;
        PyObject *tmp_expression_value_27;
        PyObject *tmp_expression_value_28;
        PyObject *tmp_right_value_4;
        tmp_dict_key_1 = mod_consts[337];
        CHECK_OBJECT(par_self);
        tmp_expression_value_28 = par_self;
        tmp_expression_value_27 = LOOKUP_ATTRIBUTE(tmp_expression_value_28, mod_consts[0]);
        if (tmp_expression_value_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2596;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_left_value_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_27, mod_consts[337]);
        Py_DECREF(tmp_expression_value_27);
        if (tmp_left_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2596;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_4 = mod_consts[204];
        tmp_dict_value_1 = BINARY_OPERATION_SUB_OBJECT_OBJECT_LONG(tmp_left_value_4, tmp_right_value_4);
        Py_DECREF(tmp_left_value_4);
        if (tmp_dict_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2596;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_6 = _PyDict_NewPresized( 1 );
        tmp_res = PyDict_SetItem(tmp_assign_source_6, tmp_dict_key_1, tmp_dict_value_1);
        Py_DECREF(tmp_dict_value_1);
        assert(!(tmp_res != 0));
        assert(var_adapt_kw == NULL);
        var_adapt_kw = tmp_assign_source_6;
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_expression_value_29;
        PyObject *tmp_expression_value_30;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_expression_value_31;
        PyObject *tmp_expression_value_32;
        PyObject *tmp_dircall_arg3_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_30 = par_self;
        tmp_expression_value_29 = LOOKUP_ATTRIBUTE(tmp_expression_value_30, mod_consts[0]);
        if (tmp_expression_value_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2597;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_dircall_arg1_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_29, mod_consts[150]);
        Py_DECREF(tmp_expression_value_29);
        if (tmp_dircall_arg1_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2597;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_32 = par_self;
        tmp_expression_value_31 = LOOKUP_ATTRIBUTE(tmp_expression_value_32, mod_consts[0]);
        if (tmp_expression_value_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_dircall_arg1_1);

            exception_lineno = 2598;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_1 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_31);
        Py_DECREF(tmp_expression_value_31);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_dircall_arg1_1);

            exception_lineno = 2598;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_dircall_arg2_1 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_dircall_arg2_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(var_adapt_kw);
        tmp_dircall_arg3_1 = var_adapt_kw;
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_assign_source_7 = impl___main__$$$function__7_complex_call_helper_pos_star_dict(dir_call_args);
        }
        if (tmp_assign_source_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2597;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(var_return_type == NULL);
        var_return_type = tmp_assign_source_7;
    }
    branch_end_4:;
    branch_end_1:;
    {
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_expression_value_33;
        tmp_expression_value_33 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_33 == NULL)) {
            tmp_expression_value_33 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
        }

        if (tmp_expression_value_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2601;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_33, mod_consts[339]);
        if (tmp_tuple_element_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2601;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_return_value = PyTuple_New(3);
        PyTuple_SET_ITEM(tmp_return_value, 0, tmp_tuple_element_2);
        if (par_index == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[340]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2601;
            type_description_1 = "oooo";
            goto tuple_build_exception_1;
        }

        tmp_tuple_element_2 = par_index;
        PyTuple_SET_ITEM0(tmp_return_value, 1, tmp_tuple_element_2);
        if (var_return_type == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[341]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2601;
            type_description_1 = "oooo";
            goto tuple_build_exception_1;
        }

        tmp_tuple_element_2 = var_return_type;
        PyTuple_SET_ITEM0(tmp_return_value, 2, tmp_tuple_element_2);
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_return_value);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_079463e5c509f3aa05c5b3f499427a50);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_079463e5c509f3aa05c5b3f499427a50);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_079463e5c509f3aa05c5b3f499427a50);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_079463e5c509f3aa05c5b3f499427a50, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_079463e5c509f3aa05c5b3f499427a50->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_079463e5c509f3aa05c5b3f499427a50, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_079463e5c509f3aa05c5b3f499427a50,
        type_description_1,
        par_self,
        par_index,
        var_return_type,
        var_adapt_kw
    );


    // Release cached frame if used for exception.
    if (frame_079463e5c509f3aa05c5b3f499427a50 == cache_frame_079463e5c509f3aa05c5b3f499427a50) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_079463e5c509f3aa05c5b3f499427a50);
        cache_frame_079463e5c509f3aa05c5b3f499427a50 = NULL;
    }

    assertFrameObject(frame_079463e5c509f3aa05c5b3f499427a50);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(par_index);
    par_index = NULL;
    Py_XDECREF(var_return_type);
    var_return_type = NULL;
    Py_XDECREF(var_adapt_kw);
    var_adapt_kw = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_index);
    par_index = NULL;
    Py_XDECREF(var_return_type);
    var_return_type = NULL;
    Py_XDECREF(var_adapt_kw);
    var_adapt_kw = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__126_contains(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_arg = python_pars[1];
    PyObject *par_kw = python_pars[2];
    struct Nuitka_FrameObject *frame_38172979e7c72747fd6e0826ee4f4238;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_38172979e7c72747fd6e0826ee4f4238 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_38172979e7c72747fd6e0826ee4f4238)) {
        Py_XDECREF(cache_frame_38172979e7c72747fd6e0826ee4f4238);

#if _DEBUG_REFCOUNTS
        if (cache_frame_38172979e7c72747fd6e0826ee4f4238 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_38172979e7c72747fd6e0826ee4f4238 = MAKE_FUNCTION_FRAME(codeobj_38172979e7c72747fd6e0826ee4f4238, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_38172979e7c72747fd6e0826ee4f4238->m_type_description == NULL);
    frame_38172979e7c72747fd6e0826ee4f4238 = cache_frame_38172979e7c72747fd6e0826ee4f4238;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_38172979e7c72747fd6e0826ee4f4238);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_38172979e7c72747fd6e0826ee4f4238) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_make_exception_arg_1;
        tmp_make_exception_arg_1 = mod_consts[342];
        frame_38172979e7c72747fd6e0826ee4f4238->m_frame.f_lineno = 2604;
        tmp_raise_type_1 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_NotImplementedError, tmp_make_exception_arg_1);
        assert(!(tmp_raise_type_1 == NULL));
        exception_type = tmp_raise_type_1;
        exception_lineno = 2604;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_38172979e7c72747fd6e0826ee4f4238);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_38172979e7c72747fd6e0826ee4f4238);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_38172979e7c72747fd6e0826ee4f4238, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_38172979e7c72747fd6e0826ee4f4238->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_38172979e7c72747fd6e0826ee4f4238, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_38172979e7c72747fd6e0826ee4f4238,
        type_description_1,
        par_self,
        par_arg,
        par_kw
    );


    // Release cached frame if used for exception.
    if (frame_38172979e7c72747fd6e0826ee4f4238 == cache_frame_38172979e7c72747fd6e0826ee4f4238) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_38172979e7c72747fd6e0826ee4f4238);
        cache_frame_38172979e7c72747fd6e0826ee4f4238 = NULL;
    }

    assertFrameObject(frame_38172979e7c72747fd6e0826ee4f4238);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_arg);
    Py_DECREF(par_arg);
    CHECK_OBJECT(par_kw);
    Py_DECREF(par_kw);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__127_any(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_elements = python_pars[1];
    PyObject *par_other = python_pars[2];
    PyObject *par_operator = python_pars[3];
    struct Nuitka_FrameObject *frame_d2925d78be011dea340eeb494a6bd467;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_d2925d78be011dea340eeb494a6bd467 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_d2925d78be011dea340eeb494a6bd467)) {
        Py_XDECREF(cache_frame_d2925d78be011dea340eeb494a6bd467);

#if _DEBUG_REFCOUNTS
        if (cache_frame_d2925d78be011dea340eeb494a6bd467 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_d2925d78be011dea340eeb494a6bd467 = MAKE_FUNCTION_FRAME(codeobj_d2925d78be011dea340eeb494a6bd467, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_d2925d78be011dea340eeb494a6bd467->m_type_description == NULL);
    frame_d2925d78be011dea340eeb494a6bd467 = cache_frame_d2925d78be011dea340eeb494a6bd467;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_d2925d78be011dea340eeb494a6bd467);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_d2925d78be011dea340eeb494a6bd467) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_operator);
        tmp_truth_name_1 = CHECK_IF_TRUE(par_operator);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2638;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_1;
        } else {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        CHECK_OBJECT(par_operator);
        tmp_assign_source_1 = par_operator;
        Py_INCREF(tmp_assign_source_1);
        goto condexpr_end_1;
        condexpr_false_1:;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2638;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[343]);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2638;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        condexpr_end_1:;
        {
            PyObject *old = par_operator;
            assert(old != NULL);
            par_operator = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_args_element_value_5;
        CHECK_OBJECT(par_elements);
        tmp_expression_value_2 = par_elements;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[309]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2642;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_elements);
        tmp_called_instance_1 = par_elements;
        CHECK_OBJECT(par_other);
        tmp_args_element_value_2 = par_other;
        frame_d2925d78be011dea340eeb494a6bd467->m_frame.f_lineno = 2643;
        tmp_args_element_value_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[332], tmp_args_element_value_2);
        if (tmp_args_element_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 2643;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_elements);
        tmp_expression_value_4 = par_elements;
        tmp_expression_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[344]);
        if (tmp_expression_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_args_element_value_1);

            exception_lineno = 2644;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[345]);
        Py_DECREF(tmp_expression_value_3);
        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_args_element_value_1);

            exception_lineno = 2644;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_5 = par_self;
        tmp_args_element_value_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[12]);
        if (tmp_args_element_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_args_element_value_1);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 2644;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_d2925d78be011dea340eeb494a6bd467->m_frame.f_lineno = 2644;
        tmp_args_element_value_3 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_2, tmp_args_element_value_4);
        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_4);
        if (tmp_args_element_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_args_element_value_1);

            exception_lineno = 2644;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_operator);
        tmp_args_element_value_5 = par_operator;
        frame_d2925d78be011dea340eeb494a6bd467->m_frame.f_lineno = 2642;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_3, tmp_args_element_value_5};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        Py_DECREF(tmp_args_element_value_3);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2642;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d2925d78be011dea340eeb494a6bd467);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_d2925d78be011dea340eeb494a6bd467);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d2925d78be011dea340eeb494a6bd467);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_d2925d78be011dea340eeb494a6bd467, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_d2925d78be011dea340eeb494a6bd467->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_d2925d78be011dea340eeb494a6bd467, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_d2925d78be011dea340eeb494a6bd467,
        type_description_1,
        par_self,
        par_elements,
        par_other,
        par_operator
    );


    // Release cached frame if used for exception.
    if (frame_d2925d78be011dea340eeb494a6bd467 == cache_frame_d2925d78be011dea340eeb494a6bd467) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_d2925d78be011dea340eeb494a6bd467);
        cache_frame_d2925d78be011dea340eeb494a6bd467 = NULL;
    }

    assertFrameObject(frame_d2925d78be011dea340eeb494a6bd467);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_operator);
    Py_DECREF(par_operator);
    par_operator = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_operator);
    par_operator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elements);
    Py_DECREF(par_elements);
    CHECK_OBJECT(par_other);
    Py_DECREF(par_other);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elements);
    Py_DECREF(par_elements);
    CHECK_OBJECT(par_other);
    Py_DECREF(par_other);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__128_all(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_elements = python_pars[1];
    PyObject *par_other = python_pars[2];
    PyObject *par_operator = python_pars[3];
    struct Nuitka_FrameObject *frame_9d7a82f8640ab292d493aadcaea78ccc;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_9d7a82f8640ab292d493aadcaea78ccc = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_9d7a82f8640ab292d493aadcaea78ccc)) {
        Py_XDECREF(cache_frame_9d7a82f8640ab292d493aadcaea78ccc);

#if _DEBUG_REFCOUNTS
        if (cache_frame_9d7a82f8640ab292d493aadcaea78ccc == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_9d7a82f8640ab292d493aadcaea78ccc = MAKE_FUNCTION_FRAME(codeobj_9d7a82f8640ab292d493aadcaea78ccc, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_9d7a82f8640ab292d493aadcaea78ccc->m_type_description == NULL);
    frame_9d7a82f8640ab292d493aadcaea78ccc = cache_frame_9d7a82f8640ab292d493aadcaea78ccc;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_9d7a82f8640ab292d493aadcaea78ccc);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_9d7a82f8640ab292d493aadcaea78ccc) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_operator);
        tmp_truth_name_1 = CHECK_IF_TRUE(par_operator);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2677;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_1;
        } else {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        CHECK_OBJECT(par_operator);
        tmp_assign_source_1 = par_operator;
        Py_INCREF(tmp_assign_source_1);
        goto condexpr_end_1;
        condexpr_false_1:;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2677;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[343]);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2677;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        condexpr_end_1:;
        {
            PyObject *old = par_operator;
            assert(old != NULL);
            par_operator = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_args_element_value_5;
        CHECK_OBJECT(par_elements);
        tmp_expression_value_2 = par_elements;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[309]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2681;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_elements);
        tmp_called_instance_1 = par_elements;
        CHECK_OBJECT(par_other);
        tmp_args_element_value_2 = par_other;
        frame_9d7a82f8640ab292d493aadcaea78ccc->m_frame.f_lineno = 2682;
        tmp_args_element_value_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[332], tmp_args_element_value_2);
        if (tmp_args_element_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 2682;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_elements);
        tmp_expression_value_4 = par_elements;
        tmp_expression_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[344]);
        if (tmp_expression_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_args_element_value_1);

            exception_lineno = 2683;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[347]);
        Py_DECREF(tmp_expression_value_3);
        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_args_element_value_1);

            exception_lineno = 2683;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_5 = par_self;
        tmp_args_element_value_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[12]);
        if (tmp_args_element_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_args_element_value_1);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 2683;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_9d7a82f8640ab292d493aadcaea78ccc->m_frame.f_lineno = 2683;
        tmp_args_element_value_3 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_2, tmp_args_element_value_4);
        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_4);
        if (tmp_args_element_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_args_element_value_1);

            exception_lineno = 2683;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_operator);
        tmp_args_element_value_5 = par_operator;
        frame_9d7a82f8640ab292d493aadcaea78ccc->m_frame.f_lineno = 2681;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_3, tmp_args_element_value_5};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        Py_DECREF(tmp_args_element_value_3);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2681;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9d7a82f8640ab292d493aadcaea78ccc);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_9d7a82f8640ab292d493aadcaea78ccc);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9d7a82f8640ab292d493aadcaea78ccc);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_9d7a82f8640ab292d493aadcaea78ccc, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_9d7a82f8640ab292d493aadcaea78ccc->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_9d7a82f8640ab292d493aadcaea78ccc, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_9d7a82f8640ab292d493aadcaea78ccc,
        type_description_1,
        par_self,
        par_elements,
        par_other,
        par_operator
    );


    // Release cached frame if used for exception.
    if (frame_9d7a82f8640ab292d493aadcaea78ccc == cache_frame_9d7a82f8640ab292d493aadcaea78ccc) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_9d7a82f8640ab292d493aadcaea78ccc);
        cache_frame_9d7a82f8640ab292d493aadcaea78ccc = NULL;
    }

    assertFrameObject(frame_9d7a82f8640ab292d493aadcaea78ccc);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_operator);
    Py_DECREF(par_operator);
    par_operator = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_operator);
    par_operator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elements);
    Py_DECREF(par_elements);
    CHECK_OBJECT(par_other);
    Py_DECREF(par_other);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_elements);
    Py_DECREF(par_elements);
    CHECK_OBJECT(par_other);
    Py_DECREF(par_other);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__129___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_item_type = python_pars[1];
    PyObject *par_as_tuple = python_pars[2];
    PyObject *par_dimensions = python_pars[3];
    PyObject *par_zero_indexes = python_pars[4];
    struct Nuitka_FrameObject *frame_f6152c17500efff202cce07f22b56f12;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_f6152c17500efff202cce07f22b56f12 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_f6152c17500efff202cce07f22b56f12)) {
        Py_XDECREF(cache_frame_f6152c17500efff202cce07f22b56f12);

#if _DEBUG_REFCOUNTS
        if (cache_frame_f6152c17500efff202cce07f22b56f12 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_f6152c17500efff202cce07f22b56f12 = MAKE_FUNCTION_FRAME(codeobj_f6152c17500efff202cce07f22b56f12, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_f6152c17500efff202cce07f22b56f12->m_type_description == NULL);
    frame_f6152c17500efff202cce07f22b56f12 = cache_frame_f6152c17500efff202cce07f22b56f12;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_f6152c17500efff202cce07f22b56f12);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_f6152c17500efff202cce07f22b56f12) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT(par_item_type);
        tmp_isinstance_inst_1 = par_item_type;
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[349]);

        if (unlikely(tmp_isinstance_cls_1 == NULL)) {
            tmp_isinstance_cls_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[349]);
        }

        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2723;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2723;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_make_exception_arg_1;
        tmp_make_exception_arg_1 = mod_consts[350];
        frame_f6152c17500efff202cce07f22b56f12->m_frame.f_lineno = 2724;
        tmp_raise_type_1 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_ValueError, tmp_make_exception_arg_1);
        assert(!(tmp_raise_type_1 == NULL));
        exception_type = tmp_raise_type_1;
        exception_lineno = 2724;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ooooo";
        goto frame_exception_exit_1;
    }
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_isinstance_inst_2;
        PyObject *tmp_isinstance_cls_2;
        CHECK_OBJECT(par_item_type);
        tmp_isinstance_inst_2 = par_item_type;
        tmp_isinstance_cls_2 = (PyObject *)&PyType_Type;
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_2, tmp_isinstance_cls_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2728;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        CHECK_OBJECT(par_item_type);
        tmp_called_value_1 = par_item_type;
        frame_f6152c17500efff202cce07f22b56f12->m_frame.f_lineno = 2729;
        tmp_assign_source_1 = CALL_FUNCTION_NO_ARGS(tmp_called_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2729;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_item_type;
            assert(old != NULL);
            par_item_type = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    branch_no_2:;
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_item_type);
        tmp_assattr_value_1 = par_item_type;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[338], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2730;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT(par_as_tuple);
        tmp_assattr_value_2 = par_as_tuple;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[351], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2731;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_3;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT(par_dimensions);
        tmp_assattr_value_3 = par_dimensions;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_3, mod_consts[337], tmp_assattr_value_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2732;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_4;
        PyObject *tmp_assattr_target_4;
        CHECK_OBJECT(par_zero_indexes);
        tmp_assattr_value_4 = par_zero_indexes;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_4, mod_consts[327], tmp_assattr_value_4);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2733;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_f6152c17500efff202cce07f22b56f12);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_f6152c17500efff202cce07f22b56f12);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_f6152c17500efff202cce07f22b56f12, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_f6152c17500efff202cce07f22b56f12->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_f6152c17500efff202cce07f22b56f12, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_f6152c17500efff202cce07f22b56f12,
        type_description_1,
        par_self,
        par_item_type,
        par_as_tuple,
        par_dimensions,
        par_zero_indexes
    );


    // Release cached frame if used for exception.
    if (frame_f6152c17500efff202cce07f22b56f12 == cache_frame_f6152c17500efff202cce07f22b56f12) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_f6152c17500efff202cce07f22b56f12);
        cache_frame_f6152c17500efff202cce07f22b56f12 = NULL;
    }

    assertFrameObject(frame_f6152c17500efff202cce07f22b56f12);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_item_type);
    Py_DECREF(par_item_type);
    par_item_type = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_item_type);
    par_item_type = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_as_tuple);
    Py_DECREF(par_as_tuple);
    CHECK_OBJECT(par_dimensions);
    Py_DECREF(par_dimensions);
    CHECK_OBJECT(par_zero_indexes);
    Py_DECREF(par_zero_indexes);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_as_tuple);
    Py_DECREF(par_as_tuple);
    CHECK_OBJECT(par_dimensions);
    Py_DECREF(par_dimensions);
    CHECK_OBJECT(par_zero_indexes);
    Py_DECREF(par_zero_indexes);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__130_hashable(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_e16e5e50ea2e711f8cc87e563ecd9dc0;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_e16e5e50ea2e711f8cc87e563ecd9dc0 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_e16e5e50ea2e711f8cc87e563ecd9dc0)) {
        Py_XDECREF(cache_frame_e16e5e50ea2e711f8cc87e563ecd9dc0);

#if _DEBUG_REFCOUNTS
        if (cache_frame_e16e5e50ea2e711f8cc87e563ecd9dc0 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_e16e5e50ea2e711f8cc87e563ecd9dc0 = MAKE_FUNCTION_FRAME(codeobj_e16e5e50ea2e711f8cc87e563ecd9dc0, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_e16e5e50ea2e711f8cc87e563ecd9dc0->m_type_description == NULL);
    frame_e16e5e50ea2e711f8cc87e563ecd9dc0 = cache_frame_e16e5e50ea2e711f8cc87e563ecd9dc0;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_e16e5e50ea2e711f8cc87e563ecd9dc0);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_e16e5e50ea2e711f8cc87e563ecd9dc0) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[351]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2737;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e16e5e50ea2e711f8cc87e563ecd9dc0);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_e16e5e50ea2e711f8cc87e563ecd9dc0);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e16e5e50ea2e711f8cc87e563ecd9dc0);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_e16e5e50ea2e711f8cc87e563ecd9dc0, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_e16e5e50ea2e711f8cc87e563ecd9dc0->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_e16e5e50ea2e711f8cc87e563ecd9dc0, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_e16e5e50ea2e711f8cc87e563ecd9dc0,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_e16e5e50ea2e711f8cc87e563ecd9dc0 == cache_frame_e16e5e50ea2e711f8cc87e563ecd9dc0) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_e16e5e50ea2e711f8cc87e563ecd9dc0);
        cache_frame_e16e5e50ea2e711f8cc87e563ecd9dc0 = NULL;
    }

    assertFrameObject(frame_e16e5e50ea2e711f8cc87e563ecd9dc0);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__132_compare_values(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_x = python_pars[1];
    PyObject *par_y = python_pars[2];
    struct Nuitka_FrameObject *frame_0ce3e2965ab607e9de338028eb14df8b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_0ce3e2965ab607e9de338028eb14df8b = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_0ce3e2965ab607e9de338028eb14df8b)) {
        Py_XDECREF(cache_frame_0ce3e2965ab607e9de338028eb14df8b);

#if _DEBUG_REFCOUNTS
        if (cache_frame_0ce3e2965ab607e9de338028eb14df8b == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_0ce3e2965ab607e9de338028eb14df8b = MAKE_FUNCTION_FRAME(codeobj_0ce3e2965ab607e9de338028eb14df8b, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_0ce3e2965ab607e9de338028eb14df8b->m_type_description == NULL);
    frame_0ce3e2965ab607e9de338028eb14df8b = cache_frame_0ce3e2965ab607e9de338028eb14df8b;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_0ce3e2965ab607e9de338028eb14df8b);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_0ce3e2965ab607e9de338028eb14df8b) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_x);
        tmp_cmp_expr_left_1 = par_x;
        CHECK_OBJECT(par_y);
        tmp_cmp_expr_right_1 = par_y;
        tmp_return_value = RICH_COMPARE_EQ_OBJECT_OBJECT_OBJECT(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2744;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_0ce3e2965ab607e9de338028eb14df8b);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_0ce3e2965ab607e9de338028eb14df8b);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_0ce3e2965ab607e9de338028eb14df8b);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_0ce3e2965ab607e9de338028eb14df8b, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_0ce3e2965ab607e9de338028eb14df8b->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_0ce3e2965ab607e9de338028eb14df8b, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_0ce3e2965ab607e9de338028eb14df8b,
        type_description_1,
        par_self,
        par_x,
        par_y
    );


    // Release cached frame if used for exception.
    if (frame_0ce3e2965ab607e9de338028eb14df8b == cache_frame_0ce3e2965ab607e9de338028eb14df8b) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_0ce3e2965ab607e9de338028eb14df8b);
        cache_frame_0ce3e2965ab607e9de338028eb14df8b = NULL;
    }

    assertFrameObject(frame_0ce3e2965ab607e9de338028eb14df8b);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_x);
    Py_DECREF(par_x);
    CHECK_OBJECT(par_y);
    Py_DECREF(par_y);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_x);
    Py_DECREF(par_x);
    CHECK_OBJECT(par_y);
    Py_DECREF(par_y);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__133__set_parent(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_column = python_pars[1];
    struct Nuitka_FrameObject *frame_5ef141461848d6bd366ef1806b992337;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_5ef141461848d6bd366ef1806b992337 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_5ef141461848d6bd366ef1806b992337)) {
        Py_XDECREF(cache_frame_5ef141461848d6bd366ef1806b992337);

#if _DEBUG_REFCOUNTS
        if (cache_frame_5ef141461848d6bd366ef1806b992337 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_5ef141461848d6bd366ef1806b992337 = MAKE_FUNCTION_FRAME(codeobj_5ef141461848d6bd366ef1806b992337, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_5ef141461848d6bd366ef1806b992337->m_type_description == NULL);
    frame_5ef141461848d6bd366ef1806b992337 = cache_frame_5ef141461848d6bd366ef1806b992337;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_5ef141461848d6bd366ef1806b992337);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_5ef141461848d6bd366ef1806b992337) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_isinstance_inst_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[338]);
        if (tmp_isinstance_inst_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2749;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[353]);

        if (unlikely(tmp_isinstance_cls_1 == NULL)) {
            tmp_isinstance_cls_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[353]);
        }

        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_isinstance_inst_1);

            exception_lineno = 2749;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_inst_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2749;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[338]);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2750;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_column);
        tmp_args_element_value_1 = par_column;
        frame_5ef141461848d6bd366ef1806b992337->m_frame.f_lineno = 2750;
        tmp_call_result_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[354], tmp_args_element_value_1);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2750;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    branch_no_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_5ef141461848d6bd366ef1806b992337);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_5ef141461848d6bd366ef1806b992337);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_5ef141461848d6bd366ef1806b992337, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_5ef141461848d6bd366ef1806b992337->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_5ef141461848d6bd366ef1806b992337, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_5ef141461848d6bd366ef1806b992337,
        type_description_1,
        par_self,
        par_column
    );


    // Release cached frame if used for exception.
    if (frame_5ef141461848d6bd366ef1806b992337 == cache_frame_5ef141461848d6bd366ef1806b992337) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_5ef141461848d6bd366ef1806b992337);
        cache_frame_5ef141461848d6bd366ef1806b992337 = NULL;
    }

    assertFrameObject(frame_5ef141461848d6bd366ef1806b992337);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_column);
    Py_DECREF(par_column);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_column);
    Py_DECREF(par_column);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__134__set_parent_with_dispatch(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_parent = python_pars[1];
    struct Nuitka_FrameObject *frame_40abf0db3fdb969e82dccb13bae0b9fe;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    static struct Nuitka_FrameObject *cache_frame_40abf0db3fdb969e82dccb13bae0b9fe = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_40abf0db3fdb969e82dccb13bae0b9fe)) {
        Py_XDECREF(cache_frame_40abf0db3fdb969e82dccb13bae0b9fe);

#if _DEBUG_REFCOUNTS
        if (cache_frame_40abf0db3fdb969e82dccb13bae0b9fe == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_40abf0db3fdb969e82dccb13bae0b9fe = MAKE_FUNCTION_FRAME(codeobj_40abf0db3fdb969e82dccb13bae0b9fe, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_40abf0db3fdb969e82dccb13bae0b9fe->m_type_description == NULL);
    frame_40abf0db3fdb969e82dccb13bae0b9fe = cache_frame_40abf0db3fdb969e82dccb13bae0b9fe;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_40abf0db3fdb969e82dccb13bae0b9fe);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_40abf0db3fdb969e82dccb13bae0b9fe) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_1;
        tmp_type_arg_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[349]);

        if (unlikely(tmp_type_arg_value_1 == NULL)) {
            tmp_type_arg_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[349]);
        }

        if (tmp_type_arg_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2755;
            type_description_1 = "ooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_object_arg_value_1 = par_self;
        tmp_called_instance_1 = BUILTIN_SUPER2(tmp_type_arg_value_1, tmp_object_arg_value_1);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2755;
            type_description_1 = "ooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_parent);
        tmp_args_element_value_1 = par_parent;
        frame_40abf0db3fdb969e82dccb13bae0b9fe->m_frame.f_lineno = 2755;
        tmp_call_result_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[356], tmp_args_element_value_1);
        Py_DECREF(tmp_called_instance_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2755;
            type_description_1 = "ooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_isinstance_inst_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[338]);
        if (tmp_isinstance_inst_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2757;
            type_description_1 = "ooN";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[353]);

        if (unlikely(tmp_isinstance_cls_1 == NULL)) {
            tmp_isinstance_cls_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[353]);
        }

        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_isinstance_inst_1);

            exception_lineno = 2757;
            type_description_1 = "ooN";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_inst_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2757;
            type_description_1 = "ooN";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_called_instance_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[338]);
        if (tmp_called_instance_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2758;
            type_description_1 = "ooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_parent);
        tmp_args_element_value_2 = par_parent;
        frame_40abf0db3fdb969e82dccb13bae0b9fe->m_frame.f_lineno = 2758;
        tmp_call_result_2 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_2, mod_consts[356], tmp_args_element_value_2);
        Py_DECREF(tmp_called_instance_2);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2758;
            type_description_1 = "ooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    branch_no_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_40abf0db3fdb969e82dccb13bae0b9fe);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_40abf0db3fdb969e82dccb13bae0b9fe);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_40abf0db3fdb969e82dccb13bae0b9fe, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_40abf0db3fdb969e82dccb13bae0b9fe->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_40abf0db3fdb969e82dccb13bae0b9fe, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_40abf0db3fdb969e82dccb13bae0b9fe,
        type_description_1,
        par_self,
        par_parent,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_40abf0db3fdb969e82dccb13bae0b9fe == cache_frame_40abf0db3fdb969e82dccb13bae0b9fe) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_40abf0db3fdb969e82dccb13bae0b9fe);
        cache_frame_40abf0db3fdb969e82dccb13bae0b9fe = NULL;
    }

    assertFrameObject(frame_40abf0db3fdb969e82dccb13bae0b9fe);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_parent);
    Py_DECREF(par_parent);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__135___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_timezone = python_pars[1];
    struct Nuitka_FrameObject *frame_2cbcfcdd5f5e2fcd9e0fd6ec8f725ecc;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_2cbcfcdd5f5e2fcd9e0fd6ec8f725ecc = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_2cbcfcdd5f5e2fcd9e0fd6ec8f725ecc)) {
        Py_XDECREF(cache_frame_2cbcfcdd5f5e2fcd9e0fd6ec8f725ecc);

#if _DEBUG_REFCOUNTS
        if (cache_frame_2cbcfcdd5f5e2fcd9e0fd6ec8f725ecc == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_2cbcfcdd5f5e2fcd9e0fd6ec8f725ecc = MAKE_FUNCTION_FRAME(codeobj_2cbcfcdd5f5e2fcd9e0fd6ec8f725ecc, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_2cbcfcdd5f5e2fcd9e0fd6ec8f725ecc->m_type_description == NULL);
    frame_2cbcfcdd5f5e2fcd9e0fd6ec8f725ecc = cache_frame_2cbcfcdd5f5e2fcd9e0fd6ec8f725ecc;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_2cbcfcdd5f5e2fcd9e0fd6ec8f725ecc);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_2cbcfcdd5f5e2fcd9e0fd6ec8f725ecc) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_type_arg_value_1;
        PyObject *tmp_object_arg_value_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_kw_call_value_0_1;
        tmp_type_arg_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[357]);

        if (unlikely(tmp_type_arg_value_1 == NULL)) {
            tmp_type_arg_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[357]);
        }

        if (tmp_type_arg_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2837;
            type_description_1 = "ooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_object_arg_value_1 = par_self;
        tmp_expression_value_1 = BUILTIN_SUPER2(tmp_type_arg_value_1, tmp_object_arg_value_1);
        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2837;
            type_description_1 = "ooN";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[66]);
        Py_DECREF(tmp_expression_value_1);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2837;
            type_description_1 = "ooN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_timezone);
        tmp_kw_call_value_0_1 = par_timezone;
        frame_2cbcfcdd5f5e2fcd9e0fd6ec8f725ecc->m_frame.f_lineno = 2837;
        {
            PyObject *kw_values[1] = {tmp_kw_call_value_0_1};

            tmp_call_result_1 = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tmp_called_value_1, kw_values, mod_consts[358]);
        }

        Py_DECREF(tmp_called_value_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2837;
            type_description_1 = "ooN";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2cbcfcdd5f5e2fcd9e0fd6ec8f725ecc);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2cbcfcdd5f5e2fcd9e0fd6ec8f725ecc);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_2cbcfcdd5f5e2fcd9e0fd6ec8f725ecc, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_2cbcfcdd5f5e2fcd9e0fd6ec8f725ecc->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_2cbcfcdd5f5e2fcd9e0fd6ec8f725ecc, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_2cbcfcdd5f5e2fcd9e0fd6ec8f725ecc,
        type_description_1,
        par_self,
        par_timezone,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_2cbcfcdd5f5e2fcd9e0fd6ec8f725ecc == cache_frame_2cbcfcdd5f5e2fcd9e0fd6ec8f725ecc) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_2cbcfcdd5f5e2fcd9e0fd6ec8f725ecc);
        cache_frame_2cbcfcdd5f5e2fcd9e0fd6ec8f725ecc = NULL;
    }

    assertFrameObject(frame_2cbcfcdd5f5e2fcd9e0fd6ec8f725ecc);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_timezone);
    Py_DECREF(par_timezone);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_timezone);
    Py_DECREF(par_timezone);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__136_get_dbapi_type(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dbapi = python_pars[1];
    struct Nuitka_FrameObject *frame_631718d8db30c776f185afbe18b6d8e3;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_631718d8db30c776f185afbe18b6d8e3 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_631718d8db30c776f185afbe18b6d8e3)) {
        Py_XDECREF(cache_frame_631718d8db30c776f185afbe18b6d8e3);

#if _DEBUG_REFCOUNTS
        if (cache_frame_631718d8db30c776f185afbe18b6d8e3 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_631718d8db30c776f185afbe18b6d8e3 = MAKE_FUNCTION_FRAME(codeobj_631718d8db30c776f185afbe18b6d8e3, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_631718d8db30c776f185afbe18b6d8e3->m_type_description == NULL);
    frame_631718d8db30c776f185afbe18b6d8e3 = cache_frame_631718d8db30c776f185afbe18b6d8e3;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_631718d8db30c776f185afbe18b6d8e3);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_631718d8db30c776f185afbe18b6d8e3) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_dbapi);
        tmp_expression_value_1 = par_dbapi;
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[357]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2840;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_631718d8db30c776f185afbe18b6d8e3);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_631718d8db30c776f185afbe18b6d8e3);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_631718d8db30c776f185afbe18b6d8e3);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_631718d8db30c776f185afbe18b6d8e3, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_631718d8db30c776f185afbe18b6d8e3->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_631718d8db30c776f185afbe18b6d8e3, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_631718d8db30c776f185afbe18b6d8e3,
        type_description_1,
        par_self,
        par_dbapi
    );


    // Release cached frame if used for exception.
    if (frame_631718d8db30c776f185afbe18b6d8e3 == cache_frame_631718d8db30c776f185afbe18b6d8e3) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_631718d8db30c776f185afbe18b6d8e3);
        cache_frame_631718d8db30c776f185afbe18b6d8e3 = NULL;
    }

    assertFrameObject(frame_631718d8db30c776f185afbe18b6d8e3);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dbapi);
    Py_DECREF(par_dbapi);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dbapi);
    Py_DECREF(par_dbapi);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__137_literal_processor(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_dialect = python_pars[1];
    PyObject *var_process = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;


        tmp_assign_source_1 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__137_literal_processor$$$function__1_process();

        assert(var_process == NULL);
        var_process = tmp_assign_source_1;
    }
    // Tried code:
    CHECK_OBJECT(var_process);
    tmp_return_value = var_process;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_process);
    Py_DECREF(var_process);
    var_process = NULL;
    goto function_return_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;


function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_dialect);
    Py_DECREF(par_dialect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__138__adapt_expression(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_op = python_pars[1];
    PyObject *par_other_comparator = python_pars[2];
    struct Nuitka_FrameObject *frame_21f9212f45d6cbdb4082180fb62f0ff4;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_21f9212f45d6cbdb4082180fb62f0ff4 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_21f9212f45d6cbdb4082180fb62f0ff4)) {
        Py_XDECREF(cache_frame_21f9212f45d6cbdb4082180fb62f0ff4);

#if _DEBUG_REFCOUNTS
        if (cache_frame_21f9212f45d6cbdb4082180fb62f0ff4 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_21f9212f45d6cbdb4082180fb62f0ff4 = MAKE_FUNCTION_FRAME(codeobj_21f9212f45d6cbdb4082180fb62f0ff4, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_21f9212f45d6cbdb4082180fb62f0ff4->m_type_description == NULL);
    frame_21f9212f45d6cbdb4082180fb62f0ff4 = cache_frame_21f9212f45d6cbdb4082180fb62f0ff4;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_21f9212f45d6cbdb4082180fb62f0ff4);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_21f9212f45d6cbdb4082180fb62f0ff4) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_or_left_truth_1;
        nuitka_bool tmp_or_left_value_1;
        nuitka_bool tmp_or_right_value_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_1;
        CHECK_OBJECT(par_other_comparator);
        tmp_isinstance_inst_1 = par_other_comparator;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[10]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[10]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2979;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_isinstance_cls_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[9]);
        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2979;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        Py_DECREF(tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2978;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_or_left_value_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_or_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2978;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        tmp_called_instance_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6]);

        if (unlikely(tmp_called_instance_1 == NULL)) {
            tmp_called_instance_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[6]);
        }

        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2980;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_op);
        tmp_args_element_value_1 = par_op;
        frame_21f9212f45d6cbdb4082180fb62f0ff4->m_frame.f_lineno = 2980;
        tmp_operand_value_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[361], tmp_args_element_value_1);
        if (tmp_operand_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2980;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        Py_DECREF(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2980;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_or_right_value_1 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_1 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_condition_result_1 = tmp_or_left_value_1;
        or_end_1:;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_tuple_element_1;
        if (par_op == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[362]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2981;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_element_1 = par_op;
        tmp_return_value = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_2;
            PyObject *tmp_expression_value_3;
            PyTuple_SET_ITEM0(tmp_return_value, 0, tmp_tuple_element_1);
            CHECK_OBJECT(par_self);
            tmp_expression_value_3 = par_self;
            tmp_expression_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[12]);
            if (tmp_expression_value_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2981;
                type_description_1 = "ooo";
                goto tuple_build_exception_1;
            }
            tmp_tuple_element_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[0]);
            Py_DECREF(tmp_expression_value_2);
            if (tmp_tuple_element_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2981;
                type_description_1 = "ooo";
                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_return_value, 1, tmp_tuple_element_1);
        }
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_return_value);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        goto frame_return_exit_1;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        CHECK_OBJECT(par_other_comparator);
        tmp_expression_value_4 = par_other_comparator;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[13]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2983;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        if (par_op == NULL) {
            Py_DECREF(tmp_called_value_1);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[362]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2983;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_value_2 = par_op;
        CHECK_OBJECT(par_self);
        tmp_args_element_value_3 = par_self;
        frame_21f9212f45d6cbdb4082180fb62f0ff4->m_frame.f_lineno = 2983;
        {
            PyObject *call_args[] = {tmp_args_element_value_2, tmp_args_element_value_3};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_called_value_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2983;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_21f9212f45d6cbdb4082180fb62f0ff4);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_21f9212f45d6cbdb4082180fb62f0ff4);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_21f9212f45d6cbdb4082180fb62f0ff4);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_21f9212f45d6cbdb4082180fb62f0ff4, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_21f9212f45d6cbdb4082180fb62f0ff4->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_21f9212f45d6cbdb4082180fb62f0ff4, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_21f9212f45d6cbdb4082180fb62f0ff4,
        type_description_1,
        par_self,
        par_op,
        par_other_comparator
    );


    // Release cached frame if used for exception.
    if (frame_21f9212f45d6cbdb4082180fb62f0ff4 == cache_frame_21f9212f45d6cbdb4082180fb62f0ff4) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_21f9212f45d6cbdb4082180fb62f0ff4);
        cache_frame_21f9212f45d6cbdb4082180fb62f0ff4 = NULL;
    }

    assertFrameObject(frame_21f9212f45d6cbdb4082180fb62f0ff4);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_op);
    Py_DECREF(par_op);
    CHECK_OBJECT(par_other_comparator);
    Py_DECREF(par_other_comparator);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_op);
    Py_DECREF(par_op);
    CHECK_OBJECT(par_other_comparator);
    Py_DECREF(par_other_comparator);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_sqlalchemy$sql$sqltypes$$$function__139__resolve_value_to_type(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_value = python_pars[0];
    PyObject *var__result_type = NULL;
    PyObject *var_insp = NULL;
    struct Nuitka_FrameObject *frame_ca7c095483db54a04856f44ce46345a1;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_ca7c095483db54a04856f44ce46345a1 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_ca7c095483db54a04856f44ce46345a1)) {
        Py_XDECREF(cache_frame_ca7c095483db54a04856f44ce46345a1);

#if _DEBUG_REFCOUNTS
        if (cache_frame_ca7c095483db54a04856f44ce46345a1 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_ca7c095483db54a04856f44ce46345a1 = MAKE_FUNCTION_FRAME(codeobj_ca7c095483db54a04856f44ce46345a1, module_sqlalchemy$sql$sqltypes, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_ca7c095483db54a04856f44ce46345a1->m_type_description == NULL);
    frame_ca7c095483db54a04856f44ce46345a1 = cache_frame_ca7c095483db54a04856f44ce46345a1;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_ca7c095483db54a04856f44ce46345a1);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_ca7c095483db54a04856f44ce46345a1) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_type_arg_1;
        PyObject *tmp_args_element_value_2;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[363]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[363]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3033;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_value);
        tmp_type_arg_1 = par_value;
        tmp_args_element_value_1 = BUILTIN_TYPE1(tmp_type_arg_1);
        assert(!(tmp_args_element_value_1 == NULL));
        tmp_args_element_value_2 = Py_False;
        frame_ca7c095483db54a04856f44ce46345a1->m_frame.f_lineno = 3033;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_args_element_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3033;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert(var__result_type == NULL);
        var__result_type = tmp_assign_source_1;
    }
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(var__result_type);
        tmp_cmp_expr_left_1 = var__result_type;
        tmp_cmp_expr_right_1 = Py_False;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 == tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        tmp_called_instance_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[364]);

        if (unlikely(tmp_called_instance_1 == NULL)) {
            tmp_called_instance_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[364]);
        }

        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3037;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_value);
        tmp_args_element_value_3 = par_value;
        tmp_args_element_value_4 = Py_False;
        frame_ca7c095483db54a04856f44ce46345a1->m_frame.f_lineno = 3037;
        {
            PyObject *call_args[] = {tmp_args_element_value_3, tmp_args_element_value_4};
            tmp_assign_source_2 = CALL_METHOD_WITH_ARGS2(
                tmp_called_instance_1,
                mod_consts[365],
                call_args
            );
        }

        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3037;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert(var_insp == NULL);
        var_insp = tmp_assign_source_2;
    }
    {
        bool tmp_condition_result_2;
        int tmp_and_left_truth_1;
        bool tmp_and_left_value_1;
        bool tmp_and_right_value_1;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        PyObject *tmp_cmp_expr_left_3;
        PyObject *tmp_cmp_expr_right_3;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(var_insp);
        tmp_cmp_expr_left_2 = var_insp;
        tmp_cmp_expr_right_2 = Py_None;
        tmp_and_left_value_1 = (tmp_cmp_expr_left_2 != tmp_cmp_expr_right_2) ? true : false;
        tmp_and_left_truth_1 = tmp_and_left_value_1 != false ? 1 : 0;
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        CHECK_OBJECT(var_insp);
        tmp_expression_value_1 = var_insp;
        tmp_cmp_expr_left_3 = LOOKUP_ATTRIBUTE_CLASS_SLOT(tmp_expression_value_1);
        if (tmp_cmp_expr_left_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3043;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_expression_value_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[364]);

        if (unlikely(tmp_expression_value_2 == NULL)) {
            tmp_expression_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[364]);
        }

        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_cmp_expr_left_3);

            exception_lineno = 3043;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[366]);
        if (tmp_cmp_expr_right_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_cmp_expr_left_3);

            exception_lineno = 3043;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PySequence_Contains(tmp_cmp_expr_right_3, tmp_cmp_expr_left_3);
        Py_DECREF(tmp_cmp_expr_left_3);
        Py_DECREF(tmp_cmp_expr_right_3);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3043;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res == 1) ? true : false;
        tmp_condition_result_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_2 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_2 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        tmp_expression_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[19]);

        if (unlikely(tmp_expression_value_3 == NULL)) {
            tmp_expression_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[19]);
        }

        if (tmp_expression_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3045;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[20]);
        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3045;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_left_value_1 = mod_consts[367];
        CHECK_OBJECT(par_value);
        tmp_right_value_1 = par_value;
        tmp_args_element_value_5 = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_left_value_1, tmp_right_value_1);
        if (tmp_args_element_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 3046;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_ca7c095483db54a04856f44ce46345a1->m_frame.f_lineno = 3045;
        tmp_raise_type_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_2, tmp_args_element_value_5);
        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_5);
        if (tmp_raise_type_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3045;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        exception_type = tmp_raise_type_1;
        exception_lineno = 3045;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    branch_no_2:;
    tmp_return_value = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[368]);

    if (unlikely(tmp_return_value == NULL)) {
        tmp_return_value = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[368]);
    }

    if (tmp_return_value == NULL) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 3048;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    goto branch_end_1;
    branch_no_1:;
    CHECK_OBJECT(var__result_type);
    tmp_return_value = var__result_type;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ca7c095483db54a04856f44ce46345a1);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_ca7c095483db54a04856f44ce46345a1);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ca7c095483db54a04856f44ce46345a1);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_ca7c095483db54a04856f44ce46345a1, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_ca7c095483db54a04856f44ce46345a1->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_ca7c095483db54a04856f44ce46345a1, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_ca7c095483db54a04856f44ce46345a1,
        type_description_1,
        par_value,
        var__result_type,
        var_insp
    );


    // Release cached frame if used for exception.
    if (frame_ca7c095483db54a04856f44ce46345a1 == cache_frame_ca7c095483db54a04856f44ce46345a1) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_ca7c095483db54a04856f44ce46345a1);
        cache_frame_ca7c095483db54a04856f44ce46345a1 = NULL;
    }

    assertFrameObject(frame_ca7c095483db54a04856f44ce46345a1);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var__result_type);
    Py_DECREF(var__result_type);
    var__result_type = NULL;
    Py_XDECREF(var_insp);
    var_insp = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var__result_type);
    var__result_type = NULL;
    Py_XDECREF(var_insp);
    var_insp = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_value);
    Py_DECREF(par_value);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__100__type_affinity() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__100__type_affinity,
        mod_consts[1],
#if PYTHON_VERSION >= 0x300
        mod_consts[594],
#endif
        codeobj_8ed18f4e8d0ae2ee0973bc43157c0e2b,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__101_coerce_compared_value() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__101_coerce_compared_value,
        mod_consts[120],
#if PYTHON_VERSION >= 0x300
        mod_consts[595],
#endif
        codeobj_869ef4d1b9431aba84fee71430c018c5,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[121],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__102___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__102___init__,
        mod_consts[66],
#if PYTHON_VERSION >= 0x300
        mod_consts[600],
#endif
        codeobj_b2c0d81d602498657431b7d36cb611a8,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[269],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__103_python_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__103_python_type,
        mod_consts[236],
#if PYTHON_VERSION >= 0x300
        mod_consts[601],
#endif
        codeobj_1517404864390463d00b2823a600abfd,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__104_adapt_to_emulated() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__104_adapt_to_emulated,
        mod_consts[558],
#if PYTHON_VERSION >= 0x300
        mod_consts[602],
#endif
        codeobj_ea706dcc6e194808881a16f7aa1ed6c1,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__105_bind_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__105_bind_processor,
        mod_consts[232],
#if PYTHON_VERSION >= 0x300
        mod_consts[603],
#endif
        codeobj_6fd982c4f965f315b319c69ddc5bb056,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__105_bind_processor$$$function__1_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__105_bind_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[273],
#endif
        codeobj_721d898bd11a13c19c76e956025de367,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        2
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__105_bind_processor$$$function__2_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__105_bind_processor$$$function__2_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[273],
#endif
        codeobj_e5e57fd08df72921834834662e50725e,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        1
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__106_result_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__106_result_processor,
        mod_consts[233],
#if PYTHON_VERSION >= 0x300
        mod_consts[604],
#endif
        codeobj_ca6015480afd717c6a68e5cd5c83f22b,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__106_result_processor$$$function__1_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__106_result_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[274],
#endif
        codeobj_040968a2f49c9a024ff8b7ebca05e479,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        2
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__106_result_processor$$$function__2_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__106_result_processor$$$function__2_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[274],
#endif
        codeobj_9b2cbb8752b7ee5f04ba8a9c6b65ed1f,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        1
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__107___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__107___init__,
        mod_consts[66],
#if PYTHON_VERSION >= 0x300
        mod_consts[609],
#endif
        codeobj_2d58f2d4625ac7878ff3544d5422428b,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[276],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__108_string_bind_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__108_string_bind_processor,
        mod_consts[281],
#if PYTHON_VERSION >= 0x300
        mod_consts[613],
#endif
        codeobj_52849325a34baac4c3d0efb32eccf004,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__109_string_literal_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__109_string_literal_processor,
        mod_consts[285],
#if PYTHON_VERSION >= 0x300
        mod_consts[614],
#endif
        codeobj_c4437ebcc356d068272586f6f953e6e3,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__10_python_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__10_python_type,
        mod_consts[236],
#if PYTHON_VERSION >= 0x300
        mod_consts[446],
#endif
        codeobj_8eeafd0a23a514f068dca3b32200ad71,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__110_bind_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__110_bind_processor,
        mod_consts[232],
#if PYTHON_VERSION >= 0x300
        mod_consts[615],
#endif
        codeobj_110b2519219ff1ad5f5bf55af6c317e0,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__110_bind_processor$$$function__1_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__110_bind_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[282],
#endif
        codeobj_e25634e3711c6b5cb1101160ca5f64c8,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        2
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__111_literal_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__111_literal_processor,
        mod_consts[228],
#if PYTHON_VERSION >= 0x300
        mod_consts[616],
#endif
        codeobj_73aa4383e90c67b2095c8cf4b55b97a6,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__111_literal_processor$$$function__1_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__111_literal_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[286],
#endif
        codeobj_d4cce7be2c6d61e939ff8f1737aebd5f,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        2
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__112__setup_getitem() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__112__setup_getitem,
        mod_consts[14],
#if PYTHON_VERSION >= 0x300
        mod_consts[624],
#endif
        codeobj_f9850d2f1ed7b54d61515f605f3ef6b1,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__113_as_boolean() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__113_as_boolean,
        mod_consts[298],
#if PYTHON_VERSION >= 0x300
        mod_consts[625],
#endif
        codeobj_3d77773966012aba04345bacfce29158,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[299],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__114_as_string() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__114_as_string,
        mod_consts[300],
#if PYTHON_VERSION >= 0x300
        mod_consts[626],
#endif
        codeobj_50108bbfeeb6db035247c41dd86925b3,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[301],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__115_as_integer() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__115_as_integer,
        mod_consts[302],
#if PYTHON_VERSION >= 0x300
        mod_consts[627],
#endif
        codeobj_a753e11085ed5c53e0416ffdd76de3a5,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[303],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__116_as_float() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__116_as_float,
        mod_consts[305],
#if PYTHON_VERSION >= 0x300
        mod_consts[628],
#endif
        codeobj_d83a073fe0d4c2933f92991fd7b06aa1,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[306],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__117_as_json() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__117_as_json,
        mod_consts[629],
#if PYTHON_VERSION >= 0x300
        mod_consts[630],
#endif
        codeobj_f7bcbb04c91cdb79fa9579bb535a5950,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[307],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__118__binary_w_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__118__binary_w_type,
        mod_consts[296],
#if PYTHON_VERSION >= 0x300
        mod_consts[631],
#endif
        codeobj_a67b7bcb220e71ddb0aa4a7f9ca70c58,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__119_python_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        mod_consts[236],
#if PYTHON_VERSION >= 0x300
        mod_consts[632],
#endif
        codeobj_e07ca732601db60324dcfd936de3c53e,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );
    Nuitka_Function_EnableConstReturnGeneric(result, (PyObject *)&PyDict_Type);

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__11_get_dbapi_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__11_get_dbapi_type,
        mod_consts[447],
#if PYTHON_VERSION >= 0x300
        mod_consts[448],
#endif
        codeobj_a2871293caed309651ea4a744447c14b,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__120_should_evaluate_none() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__120_should_evaluate_none,
        mod_consts[633],
#if PYTHON_VERSION >= 0x300
        mod_consts[634],
#endif
        codeobj_1d5640d11aeb82ae763f927b9f5c804a,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[314],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__121_should_evaluate_none() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__121_should_evaluate_none,
        mod_consts[633],
#if PYTHON_VERSION >= 0x300
        mod_consts[634],
#endif
        codeobj_c5c406697da523074099ecbcf0fe8ffc,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__122__str_impl() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__122__str_impl,
        mod_consts[316],
#if PYTHON_VERSION >= 0x300
        mod_consts[636],
#endif
        codeobj_5642929c27d1565d95c4e766d5e2e1a9,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__123_bind_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__123_bind_processor,
        mod_consts[232],
#if PYTHON_VERSION >= 0x300
        mod_consts[637],
#endif
        codeobj_297628ca1575a9b2bb8e8a867f132882,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__123_bind_processor$$$function__1_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__123_bind_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[319],
#endif
        codeobj_d6dee81af77776b48bf2d4db1bf6e30b,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        3
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__124_result_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__124_result_processor,
        mod_consts[233],
#if PYTHON_VERSION >= 0x300
        mod_consts[638],
#endif
        codeobj_b5dc4d7e9c1118009c9e6035626d916f,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__124_result_processor$$$function__1_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__124_result_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[325],
#endif
        codeobj_cfec1619bd0b3b489d79dedee5c04bef,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        2
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__125__setup_getitem() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__125__setup_getitem,
        mod_consts[14],
#if PYTHON_VERSION >= 0x300
        mod_consts[642],
#endif
        codeobj_079463e5c509f3aa05c5b3f499427a50,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__126_contains() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__126_contains,
        mod_consts[643],
#if PYTHON_VERSION >= 0x300
        mod_consts[644],
#endif
        codeobj_38172979e7c72747fd6e0826ee4f4238,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__127_any(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__127_any,
        mod_consts[646],
#if PYTHON_VERSION >= 0x300
        mod_consts[647],
#endif
        codeobj_d2925d78be011dea340eeb494a6bd467,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[346],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__128_all(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__128_all,
        mod_consts[648],
#if PYTHON_VERSION >= 0x300
        mod_consts[649],
#endif
        codeobj_9d7a82f8640ab292d493aadcaea78ccc,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[348],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__129___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__129___init__,
        mod_consts[66],
#if PYTHON_VERSION >= 0x300
        mod_consts[651],
#endif
        codeobj_f6152c17500efff202cce07f22b56f12,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[352],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__12__warn_deprecated_unicode() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__12__warn_deprecated_unicode,
        mod_consts[450],
#if PYTHON_VERSION >= 0x300
        mod_consts[451],
#endif
        codeobj_98170ba504fa88cccd4e23f59b258463,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__130_hashable() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__130_hashable,
        mod_consts[606],
#if PYTHON_VERSION >= 0x300
        mod_consts[652],
#endif
        codeobj_e16e5e50ea2e711f8cc87e563ecd9dc0,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__131_python_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        mod_consts[236],
#if PYTHON_VERSION >= 0x300
        mod_consts[653],
#endif
        codeobj_6b9111e982b267f962148ba4387afa38,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );
    Nuitka_Function_EnableConstReturnGeneric(result, (PyObject *)&PyList_Type);

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__132_compare_values() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__132_compare_values,
        mod_consts[577],
#if PYTHON_VERSION >= 0x300
        mod_consts[654],
#endif
        codeobj_0ce3e2965ab607e9de338028eb14df8b,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__133__set_parent() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__133__set_parent,
        mod_consts[354],
#if PYTHON_VERSION >= 0x300
        mod_consts[655],
#endif
        codeobj_5ef141461848d6bd366ef1806b992337,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[355],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__134__set_parent_with_dispatch() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__134__set_parent_with_dispatch,
        mod_consts[356],
#if PYTHON_VERSION >= 0x300
        mod_consts[656],
#endif
        codeobj_40abf0db3fdb969e82dccb13bae0b9fe,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[355],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__135___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__135___init__,
        mod_consts[66],
#if PYTHON_VERSION >= 0x300
        mod_consts[673],
#endif
        codeobj_2cbcfcdd5f5e2fcd9e0fd6ec8f725ecc,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[359],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__136_get_dbapi_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__136_get_dbapi_type,
        mod_consts[447],
#if PYTHON_VERSION >= 0x300
        mod_consts[674],
#endif
        codeobj_631718d8db30c776f185afbe18b6d8e3,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__137_literal_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__137_literal_processor,
        mod_consts[228],
#if PYTHON_VERSION >= 0x300
        mod_consts[702],
#endif
        codeobj_65269d50c8427a1405f2cc27af6fa453,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__137_literal_processor$$$function__1_process() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[360],
#endif
        codeobj_a7b57745929293a4180b06fbafb0e794,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );
    Nuitka_Function_EnableConstReturnGeneric(result, mod_consts[320]);

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__138__adapt_expression() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__138__adapt_expression,
        mod_consts[13],
#if PYTHON_VERSION >= 0x300
        mod_consts[704],
#endif
        codeobj_21f9212f45d6cbdb4082180fb62f0ff4,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__139__resolve_value_to_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__139__resolve_value_to_type,
        mod_consts[713],
#if PYTHON_VERSION >= 0x300
        NULL,
#endif
        codeobj_ca7c095483db54a04856f44ce46345a1,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__13___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__13___init__,
        mod_consts[66],
#if PYTHON_VERSION >= 0x300
        mod_consts[457],
#endif
        codeobj_51654e74df76627f13ae9c2a2ea727c1,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[67],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__14___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__14___init__,
        mod_consts[66],
#if PYTHON_VERSION >= 0x300
        mod_consts[460],
#endif
        codeobj_697faab2681508b3798a98b9058765c8,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[69],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__15__warn_deprecated_unicode() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        mod_consts[450],
#if PYTHON_VERSION >= 0x300
        mod_consts[461],
#endif
        codeobj_56f94477688e419f9189db00211c443a,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__16_get_dbapi_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__16_get_dbapi_type,
        mod_consts[447],
#if PYTHON_VERSION >= 0x300
        mod_consts[464],
#endif
        codeobj_19f7812994aeaf50575de802808c1910,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__17_python_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        mod_consts[236],
#if PYTHON_VERSION >= 0x300
        mod_consts[465],
#endif
        codeobj_d15f2af2d97d3af049beb49dcfb9a55e,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );
    Nuitka_Function_EnableConstReturnGeneric(result, (PyObject *)&PyLong_Type);

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__18_literal_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__18_literal_processor,
        mod_consts[228],
#if PYTHON_VERSION >= 0x300
        mod_consts[466],
#endif
        codeobj_a444f75fdfcac1f36d21d335b140f215,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__18_literal_processor$$$function__1_process() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__18_literal_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[71],
#endif
        codeobj_5130bb61216b451d0eb1f14864720cad,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__19__expression_adaptations() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__19__expression_adaptations,
        mod_consts[2],
#if PYTHON_VERSION >= 0x300
        mod_consts[468],
#endif
        codeobj_35db4acbd81c58a447a779e82586ae91,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__1__expression_adaptations() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__1__expression_adaptations,
        mod_consts[2],
#if PYTHON_VERSION >= 0x300
        mod_consts[421],
#endif
        codeobj_52bef6c65aa0ebe73e3b3a1af2374252,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__20___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__20___init__,
        mod_consts[66],
#if PYTHON_VERSION >= 0x300
        mod_consts[479],
#endif
        codeobj_da4886736b8a5372b7d4e4b67f076065,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[84],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__21__effective_decimal_return_scale() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__21__effective_decimal_return_scale,
        mod_consts[97],
#if PYTHON_VERSION >= 0x300
        mod_consts[480],
#endif
        codeobj_32401629046c0569afb5e84ea376a75d,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__22_get_dbapi_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__22_get_dbapi_type,
        mod_consts[447],
#if PYTHON_VERSION >= 0x300
        mod_consts[481],
#endif
        codeobj_8dec9bf35a3d35a9a08cd3ac5d62091b,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__23_literal_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__23_literal_processor,
        mod_consts[228],
#if PYTHON_VERSION >= 0x300
        mod_consts[482],
#endif
        codeobj_358590c8faefc21cbc031397837c2c5a,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__23_literal_processor$$$function__1_process() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__23_literal_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[86],
#endif
        codeobj_cebebc8fdf1b5b7034c3ebe5c05b2b33,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__24_python_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__24_python_type,
        mod_consts[236],
#if PYTHON_VERSION >= 0x300
        mod_consts[483],
#endif
        codeobj_4def468570d1a6b0955db33a856f684f,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__25_bind_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__25_bind_processor,
        mod_consts[232],
#if PYTHON_VERSION >= 0x300
        mod_consts[484],
#endif
        codeobj_900d7e8d229934c609179045dc96cd37,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__26_result_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__26_result_processor,
        mod_consts[233],
#if PYTHON_VERSION >= 0x300
        mod_consts[485],
#endif
        codeobj_5782e8db7cc9b9b09909a8d7c2344ef8,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__27__expression_adaptations() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__27__expression_adaptations,
        mod_consts[2],
#if PYTHON_VERSION >= 0x300
        mod_consts[486],
#endif
        codeobj_5fea2d0a13180650d03edcb1be2ec25a,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__28___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__28___init__,
        mod_consts[66],
#if PYTHON_VERSION >= 0x300
        mod_consts[490],
#endif
        codeobj_4fa1541da2e5544116ce9c61af4c7589,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[96],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__29_result_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__29_result_processor,
        mod_consts[233],
#if PYTHON_VERSION >= 0x300
        mod_consts[491],
#endif
        codeobj_4114bd0ac152e003245e0a5f3c383370,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__2__adapt_expression() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__2__adapt_expression,
        mod_consts[13],
#if PYTHON_VERSION >= 0x300
        mod_consts[424],
#endif
        codeobj_93bd1b5dde42351f2cc97d3dfe3d4028,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__30___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__30___init__,
        mod_consts[66],
#if PYTHON_VERSION >= 0x300
        mod_consts[494],
#endif
        codeobj_7d27396219160c20eb32d0e52d1cbc7b,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[99],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__31_get_dbapi_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__31_get_dbapi_type,
        mod_consts[447],
#if PYTHON_VERSION >= 0x300
        mod_consts[495],
#endif
        codeobj_d602dea3fafc7887a40c46ff4868cc37,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__32_python_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__32_python_type,
        mod_consts[236],
#if PYTHON_VERSION >= 0x300
        mod_consts[496],
#endif
        codeobj_09bc773089160ae25520ee75955ab821,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__33__expression_adaptations() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__33__expression_adaptations,
        mod_consts[2],
#if PYTHON_VERSION >= 0x300
        mod_consts[497],
#endif
        codeobj_9531191c57440301d6fe173eea3ed4a2,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__34_get_dbapi_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__34_get_dbapi_type,
        mod_consts[447],
#if PYTHON_VERSION >= 0x300
        mod_consts[499],
#endif
        codeobj_dd136002a7b1d65c393838c253df1571,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__35_python_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__35_python_type,
        mod_consts[236],
#if PYTHON_VERSION >= 0x300
        mod_consts[500],
#endif
        codeobj_e7cef0473820344c14b6f8d33e4175a2,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__36__expression_adaptations() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__36__expression_adaptations,
        mod_consts[2],
#if PYTHON_VERSION >= 0x300
        mod_consts[501],
#endif
        codeobj_175ab3d6f152360f198aa0f400f51963,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__37___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__37___init__,
        mod_consts[66],
#if PYTHON_VERSION >= 0x300
        mod_consts[503],
#endif
        codeobj_64489e8438dad652f740f8de8258ba14,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__38_get_dbapi_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__38_get_dbapi_type,
        mod_consts[447],
#if PYTHON_VERSION >= 0x300
        mod_consts[504],
#endif
        codeobj_e50570ddb5d241e469c85d33b14f06a7,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__39_python_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__39_python_type,
        mod_consts[236],
#if PYTHON_VERSION >= 0x300
        mod_consts[505],
#endif
        codeobj_66456ce309790c2214ab611d32d52f5b,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__3__adapt_expression() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__3__adapt_expression,
        mod_consts[13],
#if PYTHON_VERSION >= 0x300
        mod_consts[429],
#endif
        codeobj_9b94820dde9ae1619590d189944705ab,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__40__expression_adaptations() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__40__expression_adaptations,
        mod_consts[2],
#if PYTHON_VERSION >= 0x300
        mod_consts[506],
#endif
        codeobj_7d0d935729b36d094bbd555e9b47d2a4,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__41___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__41___init__,
        mod_consts[66],
#if PYTHON_VERSION >= 0x300
        mod_consts[508],
#endif
        codeobj_4aacf380a58948d6c3d3dd7b7bc1a643,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__42_literal_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__42_literal_processor,
        mod_consts[228],
#if PYTHON_VERSION >= 0x300
        mod_consts[509],
#endif
        codeobj_8b010af3c4cec60845c9798f15a9e9c1,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__42_literal_processor$$$function__1_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__42_literal_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[107],
#endif
        codeobj_89692ce6656ecf43c2c7e75e2ac32991,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        1
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__43_python_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__43_python_type,
        mod_consts[236],
#if PYTHON_VERSION >= 0x300
        mod_consts[510],
#endif
        codeobj_251229f7216f07084fb1cdbb281588b2,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__44_bind_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__44_bind_processor,
        mod_consts[232],
#if PYTHON_VERSION >= 0x300
        mod_consts[511],
#endif
        codeobj_bb490b01efdce5ce06a5d056c467cb0e,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__44_bind_processor$$$function__1_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__44_bind_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[111],
#endif
        codeobj_d46eb5e851689f39d42df9005a5bccab,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        1
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__45_result_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__45_result_processor,
        mod_consts[233],
#if PYTHON_VERSION >= 0x300
        mod_consts[513],
#endif
        codeobj_1756c05d48e2c2b0e3146e16d7f42efe,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__45_result_processor$$$function__1_process() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__45_result_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[114],
#endif
        codeobj_d4c81abf6a43866a0767f93fe917f8f9,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__46_result_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__46_result_processor,
        mod_consts[233],
#if PYTHON_VERSION >= 0x300
        mod_consts[513],
#endif
        codeobj_724ab77bb3c61d142e9f500149e6a792,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__46_result_processor$$$function__1_process() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__46_result_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[114],
#endif
        codeobj_b36711c2963cf141646b9c711e21ccf6,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__47_coerce_compared_value() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__47_coerce_compared_value,
        mod_consts[120],
#if PYTHON_VERSION >= 0x300
        mod_consts[514],
#endif
        codeobj_11006c39680b562e97db1cca598b4175,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[121],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__48_get_dbapi_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__48_get_dbapi_type,
        mod_consts[447],
#if PYTHON_VERSION >= 0x300
        mod_consts[515],
#endif
        codeobj_5dc23e3c611a3907031273184fb1177f,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__49___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__49___init__,
        mod_consts[66],
#if PYTHON_VERSION >= 0x300
        mod_consts[518],
#endif
        codeobj_61455f2f5f4a7f37b222ffc578ee75d1,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[124],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__4__setup_getitem() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__4__setup_getitem,
        mod_consts[14],
#if PYTHON_VERSION >= 0x300
        mod_consts[433],
#endif
        codeobj_5bf41b8d00196928b2b3a6ff632a8512,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__50___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__50___init__,
        mod_consts[66],
#if PYTHON_VERSION >= 0x300
        mod_consts[521],
#endif
        codeobj_0750143555959753a924ef7d0a5bfde8,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__51___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__51___init__,
        mod_consts[66],
#if PYTHON_VERSION >= 0x300
        mod_consts[524],
#endif
        codeobj_394bac202f9a68f7a19b92e945c22056,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__52__translate_schema() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__52__translate_schema,
        mod_consts[525],
#if PYTHON_VERSION >= 0x300
        mod_consts[526],
#endif
        codeobj_4032c3dfea19bcd8f7c88283a2719554,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__53__set_parent() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__53__set_parent,
        mod_consts[354],
#if PYTHON_VERSION >= 0x300
        mod_consts[527],
#endif
        codeobj_f9aac4d77fb1b95b4b0e78bcad32c2bc,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__54__variant_mapping_for_set_table() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__54__variant_mapping_for_set_table,
        mod_consts[146],
#if PYTHON_VERSION >= 0x300
        mod_consts[528],
#endif
        codeobj_e0a68c9cf4ff975f03c94de87ad726a5,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__55__set_table() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__55__set_table,
        mod_consts[139],
#if PYTHON_VERSION >= 0x300
        mod_consts[529],
#endif
        codeobj_d2426f7bc495f163f33af1e9581c3942,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__56_copy() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__56_copy,
        mod_consts[142],
#if PYTHON_VERSION >= 0x300
        mod_consts[530],
#endif
        codeobj_ce6b71a74edb04e90997815ade78abf4,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__57_adapt() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__57_adapt,
        mod_consts[150],
#if PYTHON_VERSION >= 0x300
        mod_consts[531],
#endif
        codeobj_4ffd4726b010892e5058831b7aa44309,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__58_bind() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__58_bind,
        mod_consts[154],
#if PYTHON_VERSION >= 0x300
        mod_consts[532],
#endif
        codeobj_93f50b3e2416e30fe5e08326a67bdf7f,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__59_create(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__59_create,
        mod_consts[158],
#if PYTHON_VERSION >= 0x300
        mod_consts[534],
#endif
        codeobj_7d07039ef161c516955860313b970433,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[160],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__5___getitem__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__5___getitem__,
        mod_consts[413],
#if PYTHON_VERSION >= 0x300
        mod_consts[434],
#endif
        codeobj_1cba04e9296337f0e8797e70d0bc03c8,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__60_drop(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__60_drop,
        mod_consts[161],
#if PYTHON_VERSION >= 0x300
        mod_consts[535],
#endif
        codeobj_92afc2cd8d359ac5ceb82d4f2266314c,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[162],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__61__on_table_create() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__61__on_table_create,
        mod_consts[148],
#if PYTHON_VERSION >= 0x300
        mod_consts[536],
#endif
        codeobj_628cb3a07479cec616a7d851fdfcd8f4,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__62__on_table_drop() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__62__on_table_drop,
        mod_consts[149],
#if PYTHON_VERSION >= 0x300
        mod_consts[537],
#endif
        codeobj_936d394a138c62c0070f8e0bbfeb0a9f,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__63__on_metadata_create() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__63__on_metadata_create,
        mod_consts[135],
#if PYTHON_VERSION >= 0x300
        mod_consts[538],
#endif
        codeobj_d878efcc110e7dc34a2229eb2531c29b,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__64__on_metadata_drop() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__64__on_metadata_drop,
        mod_consts[137],
#if PYTHON_VERSION >= 0x300
        mod_consts[539],
#endif
        codeobj_f414018bdc3f452738c5a6158d1580ca,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__65__is_impl_for_variant() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__65__is_impl_for_variant,
        mod_consts[163],
#if PYTHON_VERSION >= 0x300
        mod_consts[540],
#endif
        codeobj_68c9024274b1dc9263d94050118bad2a,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__66___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__66___init__,
        mod_consts[66],
#if PYTHON_VERSION >= 0x300
        mod_consts[545],
#endif
        codeobj_a47461af6a6a5feab30dc1362277f50c,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[166],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__67__enums_argument() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__67__enums_argument,
        mod_consts[220],
#if PYTHON_VERSION >= 0x300
        mod_consts[546],
#endif
        codeobj_9e45727e74315d64c429ad65bc142e05,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__68__enum_init() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__68__enum_init,
        mod_consts[165],
#if PYTHON_VERSION >= 0x300
        mod_consts[547],
#endif
        codeobj_3a3349635ec550d42656800d62fe557c,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[199],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__69__parse_into_values() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__69__parse_into_values,
        mod_consts[178],
#if PYTHON_VERSION >= 0x300
        mod_consts[548],
#endif
        codeobj_6d57f6b83eb64ab1a32aecd7155a9b5b,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__6___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__6___init__,
        mod_consts[66],
#if PYTHON_VERSION >= 0x300
        mod_consts[442],
#endif
        codeobj_ad31cca6ac3b51f7b040f743cbbda453,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[27],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__70__setup_for_values() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__70__setup_for_values,
        mod_consts[180],
#if PYTHON_VERSION >= 0x300
        mod_consts[549],
#endif
        codeobj_16508b3962b4efa5d9d1c826e6716a18,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__71_sort_key_function() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__71_sort_key_function,
        mod_consts[175],
#if PYTHON_VERSION >= 0x300
        mod_consts[550],
#endif
        codeobj_cc5d7818e1d16c45d2492e45873c6db2,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__72_native() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__72_native,
        mod_consts[266],
#if PYTHON_VERSION >= 0x300
        mod_consts[551],
#endif
        codeobj_51f690878161021e112c7a30b155f739,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__73__db_value_for_elem() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__73__db_value_for_elem,
        mod_consts[208],
#if PYTHON_VERSION >= 0x300
        mod_consts[552],
#endif
        codeobj_32af4388d65bb38b854f470572060b5c,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__74__adapt_expression() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__74__adapt_expression,
        mod_consts[13],
#if PYTHON_VERSION >= 0x300
        mod_consts[554],
#endif
        codeobj_51110ecc8f24b34da8af942e7e7c2f3f,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__75__object_value_for_elem() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__75__object_value_for_elem,
        mod_consts[235],
#if PYTHON_VERSION >= 0x300
        mod_consts[555],
#endif
        codeobj_4f3b38aed9d46df7c5f79083f8b39a1c,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__76___repr__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__76___repr__,
        mod_consts[556],
#if PYTHON_VERSION >= 0x300
        mod_consts[557],
#endif
        codeobj_2b86c7165651569226a4ff1aeee473ea,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__77_adapt_to_emulated() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__77_adapt_to_emulated,
        mod_consts[558],
#if PYTHON_VERSION >= 0x300
        mod_consts[559],
#endif
        codeobj_b3a1e6aaff693ec3ad0c43ec06639e47,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__78_adapt() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__78_adapt,
        mod_consts[150],
#if PYTHON_VERSION >= 0x300
        mod_consts[560],
#endif
        codeobj_2fe18abc35771a0e7f052b237768acb3,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__79__should_create_constraint() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__79__should_create_constraint,
        mod_consts[226],
#if PYTHON_VERSION >= 0x300
        mod_consts[561],
#endif
        codeobj_fcc9aa921a21d2d219cc711d5cd95289,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__7_literal_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__7_literal_processor,
        mod_consts[228],
#if PYTHON_VERSION >= 0x300
        mod_consts[443],
#endif
        codeobj_7fcc8dd077b03a724bfa811103a25c0c,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__7_literal_processor$$$function__1_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__7_literal_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[29],
#endif
        codeobj_c36e7994bc212bb5c1b07a12afdd52de,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        1
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__80__set_table() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__80__set_table,
        mod_consts[139],
#if PYTHON_VERSION >= 0x300
        mod_consts[564],
#endif
        codeobj_d7e17d58aba054fac37133b44e76a379,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__81_literal_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__81_literal_processor,
        mod_consts[228],
#if PYTHON_VERSION >= 0x300
        mod_consts[565],
#endif
        codeobj_365a69ad8eb3d66979a38a5e638934a8,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__81_literal_processor$$$function__1_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__81_literal_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[229],
#endif
        codeobj_d7365d3affe70e314de644a6f13c58c8,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        2
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__82_bind_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__82_bind_processor,
        mod_consts[232],
#if PYTHON_VERSION >= 0x300
        mod_consts[566],
#endif
        codeobj_c2b905ea7623bb19793972c6e80cd636,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__82_bind_processor$$$function__1_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__82_bind_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[231],
#endif
        codeobj_9e189f814f4382329c3f44ef4bcf122f,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        2
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__83_result_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__83_result_processor,
        mod_consts[233],
#if PYTHON_VERSION >= 0x300
        mod_consts[567],
#endif
        codeobj_4a98522ce6e4fae80f8ea987181e8c29,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__83_result_processor$$$function__1_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__83_result_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[234],
#endif
        codeobj_4059fcd1cafd84c042c9e6346852cb49,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        2
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__84_copy() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__84_copy,
        mod_consts[142],
#if PYTHON_VERSION >= 0x300
        mod_consts[568],
#endif
        codeobj_900383480205fc1c720bc61c0ed6566d,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__85_python_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__85_python_type,
        mod_consts[236],
#if PYTHON_VERSION >= 0x300
        mod_consts[569],
#endif
        codeobj_a3a5549b67da9f53c5b7b693705607d6,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__86___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__86___init__,
        mod_consts[66],
#if PYTHON_VERSION >= 0x300
        mod_consts[572],
#endif
        codeobj_e4ffc89c424ffae204eee7e128817de9,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[242],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__87___reduce__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__87___reduce__,
        mod_consts[573],
#if PYTHON_VERSION >= 0x300
        mod_consts[574],
#endif
        codeobj_c19b681fc6b6f3bec99c4da113c175cc,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__88_bind_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__88_bind_processor,
        mod_consts[232],
#if PYTHON_VERSION >= 0x300
        mod_consts[575],
#endif
        codeobj_d6c2189e8d8ddb8218d9095cd81d1826,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__88_bind_processor$$$function__1_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__88_bind_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[244],
#endif
        codeobj_4c8a56e694f5d15875d2ca208020840b,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        3
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__88_bind_processor$$$function__2_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__88_bind_processor$$$function__2_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[244],
#endif
        codeobj_9d17a7b500307add96efcef3a367ec57,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        2
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__89_result_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__89_result_processor,
        mod_consts[233],
#if PYTHON_VERSION >= 0x300
        mod_consts[576],
#endif
        codeobj_e75df1520546e1544b8084b31ce6b779,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__89_result_processor$$$function__1_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__89_result_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[247],
#endif
        codeobj_180a86d96068098c506a7ad191e7fe62,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        2
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__89_result_processor$$$function__2_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__89_result_processor$$$function__2_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[247],
#endif
        codeobj_3d11807b5a58354e263d81c58bcef810,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        1
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__8_bind_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__8_bind_processor,
        mod_consts[232],
#if PYTHON_VERSION >= 0x300
        mod_consts[444],
#endif
        codeobj_81bc495459da7a35f1e1139afa7d5da8,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__8_bind_processor$$$function__1_process() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__8_bind_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[39],
#endif
        codeobj_a8d5175f36cbc474b0daf68ecfd3ed5d,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__8_bind_processor$$$function__2_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__8_bind_processor$$$function__2_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[39],
#endif
        codeobj_dc9c90d4e39e91b260ea6725b3645a83,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        3
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__90_compare_values() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__90_compare_values,
        mod_consts[577],
#if PYTHON_VERSION >= 0x300
        mod_consts[578],
#endif
        codeobj_7b9907040ed376eb8922a1e4d91f706e,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__91___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__91___init__,
        mod_consts[66],
#if PYTHON_VERSION >= 0x300
        mod_consts[582],
#endif
        codeobj_edd1ad7a4a448a44712386309b66849f,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        mod_consts[248],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__92__should_create_constraint() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__92__should_create_constraint,
        mod_consts[226],
#if PYTHON_VERSION >= 0x300
        mod_consts[583],
#endif
        codeobj_e7b0c7bb7c3feca116a78f79da4f3ff2,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__93__set_table() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__93__set_table,
        mod_consts[139],
#if PYTHON_VERSION >= 0x300
        mod_consts[584],
#endif
        codeobj_9edba9d640a5664248a1ad2a8c15ea20,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__94_python_type() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        NULL,
        mod_consts[236],
#if PYTHON_VERSION >= 0x300
        mod_consts[585],
#endif
        codeobj_2297632e10cffebf22f47d2f8a62432e,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );
    Nuitka_Function_EnableConstReturnGeneric(result, (PyObject *)&PyBool_Type);

    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__95__strict_as_bool() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__95__strict_as_bool,
        mod_consts[260],
#if PYTHON_VERSION >= 0x300
        mod_consts[589],
#endif
        codeobj_f3fde94ee97be72f9f754c770f4662f0,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__96_literal_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__96_literal_processor,
        mod_consts[228],
#if PYTHON_VERSION >= 0x300
        mod_consts[590],
#endif
        codeobj_db9ff17a464d992a5a6416cb07c39126,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__96_literal_processor$$$function__1_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__96_literal_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[259],
#endif
        codeobj_8b4d492b04debbbf1882680dd19ce299,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        3
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__97_bind_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__97_bind_processor,
        mod_consts[232],
#if PYTHON_VERSION >= 0x300
        mod_consts[591],
#endif
        codeobj_316ead9e8eef23411cca05facc04d131,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__97_bind_processor$$$function__1_process(struct Nuitka_CellObject **closure) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__97_bind_processor$$$function__1_process,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[263],
#endif
        codeobj_09fd947af5ae5ee2537e1e3c83e1c5c2,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        closure,
        2
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__98_result_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__98_result_processor,
        mod_consts[233],
#if PYTHON_VERSION >= 0x300
        mod_consts[592],
#endif
        codeobj_e65bfdb285f2b292b211690ab41ddfe6,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__99__expression_adaptations() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__99__expression_adaptations,
        mod_consts[2],
#if PYTHON_VERSION >= 0x300
        mod_consts[593],
#endif
        codeobj_2bf8083789a52456cc5d1f2f334f077a,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__9_result_processor() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_sqlalchemy$sql$sqltypes$$$function__9_result_processor,
        mod_consts[233],
#if PYTHON_VERSION >= 0x300
        mod_consts[445],
#endif
        codeobj_1b34e3bd40d8681fa037c2b35e766719,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_sqlalchemy$sql$sqltypes,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}


extern void _initCompiledCellType();
extern void _initCompiledGeneratorType();
extern void _initCompiledFunctionType();
extern void _initCompiledMethodType();
extern void _initCompiledFrameType();

extern PyTypeObject Nuitka_Loader_Type;

#ifdef _NUITKA_PLUGIN_DILL_ENABLED
// Provide a way to create find a function via its C code and create it back
// in another process, useful for multiprocessing extensions like dill
extern void registerDillPluginTables(char const *module_name, PyMethodDef *reduce_compiled_function, PyMethodDef *create_compiled_function);

function_impl_code functable_sqlalchemy$sql$sqltypes[] = {
    impl_sqlalchemy$sql$sqltypes$$$function__7_literal_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__8_bind_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__8_bind_processor$$$function__2_process,
    impl_sqlalchemy$sql$sqltypes$$$function__18_literal_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__23_literal_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__42_literal_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__44_bind_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__45_result_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__46_result_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__81_literal_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__82_bind_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__83_result_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__88_bind_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__88_bind_processor$$$function__2_process,
    impl_sqlalchemy$sql$sqltypes$$$function__89_result_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__89_result_processor$$$function__2_process,
    impl_sqlalchemy$sql$sqltypes$$$function__96_literal_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__97_bind_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__105_bind_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__105_bind_processor$$$function__2_process,
    impl_sqlalchemy$sql$sqltypes$$$function__106_result_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__106_result_processor$$$function__2_process,
    impl_sqlalchemy$sql$sqltypes$$$function__110_bind_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__111_literal_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__123_bind_processor$$$function__1_process,
    impl_sqlalchemy$sql$sqltypes$$$function__124_result_processor$$$function__1_process,
    NULL,
    impl_sqlalchemy$sql$sqltypes$$$function__1__expression_adaptations,
    impl_sqlalchemy$sql$sqltypes$$$function__2__adapt_expression,
    impl_sqlalchemy$sql$sqltypes$$$function__3__adapt_expression,
    impl_sqlalchemy$sql$sqltypes$$$function__4__setup_getitem,
    impl_sqlalchemy$sql$sqltypes$$$function__5___getitem__,
    impl_sqlalchemy$sql$sqltypes$$$function__6___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__7_literal_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__8_bind_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__9_result_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__10_python_type,
    impl_sqlalchemy$sql$sqltypes$$$function__11_get_dbapi_type,
    impl_sqlalchemy$sql$sqltypes$$$function__12__warn_deprecated_unicode,
    impl_sqlalchemy$sql$sqltypes$$$function__13___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__14___init__,
    NULL,
    impl_sqlalchemy$sql$sqltypes$$$function__16_get_dbapi_type,
    NULL,
    impl_sqlalchemy$sql$sqltypes$$$function__18_literal_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__19__expression_adaptations,
    impl_sqlalchemy$sql$sqltypes$$$function__20___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__21__effective_decimal_return_scale,
    impl_sqlalchemy$sql$sqltypes$$$function__22_get_dbapi_type,
    impl_sqlalchemy$sql$sqltypes$$$function__23_literal_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__24_python_type,
    impl_sqlalchemy$sql$sqltypes$$$function__25_bind_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__26_result_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__27__expression_adaptations,
    impl_sqlalchemy$sql$sqltypes$$$function__28___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__29_result_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__30___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__31_get_dbapi_type,
    impl_sqlalchemy$sql$sqltypes$$$function__32_python_type,
    impl_sqlalchemy$sql$sqltypes$$$function__33__expression_adaptations,
    impl_sqlalchemy$sql$sqltypes$$$function__34_get_dbapi_type,
    impl_sqlalchemy$sql$sqltypes$$$function__35_python_type,
    impl_sqlalchemy$sql$sqltypes$$$function__36__expression_adaptations,
    impl_sqlalchemy$sql$sqltypes$$$function__37___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__38_get_dbapi_type,
    impl_sqlalchemy$sql$sqltypes$$$function__39_python_type,
    impl_sqlalchemy$sql$sqltypes$$$function__40__expression_adaptations,
    impl_sqlalchemy$sql$sqltypes$$$function__41___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__42_literal_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__43_python_type,
    impl_sqlalchemy$sql$sqltypes$$$function__44_bind_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__45_result_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__46_result_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__47_coerce_compared_value,
    impl_sqlalchemy$sql$sqltypes$$$function__48_get_dbapi_type,
    impl_sqlalchemy$sql$sqltypes$$$function__49___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__50___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__51___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__52__translate_schema,
    impl_sqlalchemy$sql$sqltypes$$$function__53__set_parent,
    impl_sqlalchemy$sql$sqltypes$$$function__54__variant_mapping_for_set_table,
    impl_sqlalchemy$sql$sqltypes$$$function__55__set_table,
    impl_sqlalchemy$sql$sqltypes$$$function__56_copy,
    impl_sqlalchemy$sql$sqltypes$$$function__57_adapt,
    impl_sqlalchemy$sql$sqltypes$$$function__58_bind,
    impl_sqlalchemy$sql$sqltypes$$$function__59_create,
    impl_sqlalchemy$sql$sqltypes$$$function__60_drop,
    impl_sqlalchemy$sql$sqltypes$$$function__61__on_table_create,
    impl_sqlalchemy$sql$sqltypes$$$function__62__on_table_drop,
    impl_sqlalchemy$sql$sqltypes$$$function__63__on_metadata_create,
    impl_sqlalchemy$sql$sqltypes$$$function__64__on_metadata_drop,
    impl_sqlalchemy$sql$sqltypes$$$function__65__is_impl_for_variant,
    impl_sqlalchemy$sql$sqltypes$$$function__66___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__67__enums_argument,
    impl_sqlalchemy$sql$sqltypes$$$function__68__enum_init,
    impl_sqlalchemy$sql$sqltypes$$$function__69__parse_into_values,
    impl_sqlalchemy$sql$sqltypes$$$function__70__setup_for_values,
    impl_sqlalchemy$sql$sqltypes$$$function__71_sort_key_function,
    impl_sqlalchemy$sql$sqltypes$$$function__72_native,
    impl_sqlalchemy$sql$sqltypes$$$function__73__db_value_for_elem,
    impl_sqlalchemy$sql$sqltypes$$$function__74__adapt_expression,
    impl_sqlalchemy$sql$sqltypes$$$function__75__object_value_for_elem,
    impl_sqlalchemy$sql$sqltypes$$$function__76___repr__,
    impl_sqlalchemy$sql$sqltypes$$$function__77_adapt_to_emulated,
    impl_sqlalchemy$sql$sqltypes$$$function__78_adapt,
    impl_sqlalchemy$sql$sqltypes$$$function__79__should_create_constraint,
    impl_sqlalchemy$sql$sqltypes$$$function__80__set_table,
    impl_sqlalchemy$sql$sqltypes$$$function__81_literal_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__82_bind_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__83_result_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__84_copy,
    impl_sqlalchemy$sql$sqltypes$$$function__85_python_type,
    impl_sqlalchemy$sql$sqltypes$$$function__86___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__87___reduce__,
    impl_sqlalchemy$sql$sqltypes$$$function__88_bind_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__89_result_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__90_compare_values,
    impl_sqlalchemy$sql$sqltypes$$$function__91___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__92__should_create_constraint,
    impl_sqlalchemy$sql$sqltypes$$$function__93__set_table,
    NULL,
    impl_sqlalchemy$sql$sqltypes$$$function__95__strict_as_bool,
    impl_sqlalchemy$sql$sqltypes$$$function__96_literal_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__97_bind_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__98_result_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__99__expression_adaptations,
    impl_sqlalchemy$sql$sqltypes$$$function__100__type_affinity,
    impl_sqlalchemy$sql$sqltypes$$$function__101_coerce_compared_value,
    impl_sqlalchemy$sql$sqltypes$$$function__102___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__103_python_type,
    impl_sqlalchemy$sql$sqltypes$$$function__104_adapt_to_emulated,
    impl_sqlalchemy$sql$sqltypes$$$function__105_bind_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__106_result_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__107___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__108_string_bind_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__109_string_literal_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__110_bind_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__111_literal_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__112__setup_getitem,
    impl_sqlalchemy$sql$sqltypes$$$function__113_as_boolean,
    impl_sqlalchemy$sql$sqltypes$$$function__114_as_string,
    impl_sqlalchemy$sql$sqltypes$$$function__115_as_integer,
    impl_sqlalchemy$sql$sqltypes$$$function__116_as_float,
    impl_sqlalchemy$sql$sqltypes$$$function__117_as_json,
    impl_sqlalchemy$sql$sqltypes$$$function__118__binary_w_type,
    NULL,
    impl_sqlalchemy$sql$sqltypes$$$function__120_should_evaluate_none,
    impl_sqlalchemy$sql$sqltypes$$$function__121_should_evaluate_none,
    impl_sqlalchemy$sql$sqltypes$$$function__122__str_impl,
    impl_sqlalchemy$sql$sqltypes$$$function__123_bind_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__124_result_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__125__setup_getitem,
    impl_sqlalchemy$sql$sqltypes$$$function__126_contains,
    impl_sqlalchemy$sql$sqltypes$$$function__127_any,
    impl_sqlalchemy$sql$sqltypes$$$function__128_all,
    impl_sqlalchemy$sql$sqltypes$$$function__129___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__130_hashable,
    NULL,
    impl_sqlalchemy$sql$sqltypes$$$function__132_compare_values,
    impl_sqlalchemy$sql$sqltypes$$$function__133__set_parent,
    impl_sqlalchemy$sql$sqltypes$$$function__134__set_parent_with_dispatch,
    impl_sqlalchemy$sql$sqltypes$$$function__135___init__,
    impl_sqlalchemy$sql$sqltypes$$$function__136_get_dbapi_type,
    impl_sqlalchemy$sql$sqltypes$$$function__137_literal_processor,
    impl_sqlalchemy$sql$sqltypes$$$function__138__adapt_expression,
    impl_sqlalchemy$sql$sqltypes$$$function__139__resolve_value_to_type,
    NULL
};

static char const *_reduce_compiled_function_argnames[] = {
    "func",
    NULL
};

static PyObject *_reduce_compiled_function(PyObject *self, PyObject *args, PyObject *kwds) {
    PyObject *func;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "O:reduce_compiled_function", (char **)_reduce_compiled_function_argnames, &func, NULL)) {
        return NULL;
    }

    if (Nuitka_Function_Check(func) == false) {
        SET_CURRENT_EXCEPTION_TYPE0_STR(PyExc_TypeError, "not a compiled function");
        return NULL;
    }

    struct Nuitka_FunctionObject *function = (struct Nuitka_FunctionObject *)func;

    function_impl_code *current = functable_sqlalchemy$sql$sqltypes;
    int offset = 0;

    while (*current != NULL) {
        if (*current == function->m_c_code) {
            break;
        }

        current += 1;
        offset += 1;
    }

    if (*current == NULL) {
        SET_CURRENT_EXCEPTION_TYPE0_STR(PyExc_TypeError, "Cannot find compiled function in module.");
        return NULL;
    }

    PyObject *code_object_desc = PyTuple_New(6);
    PyTuple_SET_ITEM0(code_object_desc, 0, function->m_code_object->co_filename);
    PyTuple_SET_ITEM0(code_object_desc, 1, function->m_code_object->co_name);
    PyTuple_SET_ITEM(code_object_desc, 2, PyLong_FromLong(function->m_code_object->co_firstlineno));
    PyTuple_SET_ITEM0(code_object_desc, 3, function->m_code_object->co_varnames);
    PyTuple_SET_ITEM(code_object_desc, 4, PyLong_FromLong(function->m_code_object->co_argcount));
    PyTuple_SET_ITEM(code_object_desc, 5, PyLong_FromLong(function->m_code_object->co_flags));

    CHECK_OBJECT_DEEP(code_object_desc);

    PyObject *result = PyTuple_New(4);
    PyTuple_SET_ITEM(result, 0, PyLong_FromLong(offset));
    PyTuple_SET_ITEM(result, 1, code_object_desc);
    PyTuple_SET_ITEM0(result, 2, function->m_defaults);
    PyTuple_SET_ITEM0(result, 3, function->m_doc != NULL ? function->m_doc : Py_None);

    CHECK_OBJECT_DEEP(result);

    return result;
}

static PyMethodDef _method_def_reduce_compiled_function = {"reduce_compiled_function", (PyCFunction)_reduce_compiled_function,
                                                           METH_VARARGS | METH_KEYWORDS, NULL};

static char const *_create_compiled_function_argnames[] = {
    "func",
    "code_object_desc",
    "defaults",
    "doc",
    NULL
};


static PyObject *_create_compiled_function(PyObject *self, PyObject *args, PyObject *kwds) {
    CHECK_OBJECT_DEEP(args);

    PyObject *func;
    PyObject *code_object_desc;
    PyObject *defaults;
    PyObject *doc;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "OOOO:create_compiled_function", (char **)_create_compiled_function_argnames, &func, &code_object_desc, &defaults, &doc, NULL)) {
        return NULL;
    }

    int offset = PyLong_AsLong(func);

    if (offset == -1 && ERROR_OCCURRED()) {
        return NULL;
    }

    if (offset > sizeof(functable_sqlalchemy$sql$sqltypes) || offset < 0) {
        SET_CURRENT_EXCEPTION_TYPE0_STR(PyExc_TypeError, "Wrong offset for compiled function.");
        return NULL;
    }

    PyObject *filename = PyTuple_GET_ITEM(code_object_desc, 0);
    PyObject *function_name = PyTuple_GET_ITEM(code_object_desc, 1);
    PyObject *line = PyTuple_GET_ITEM(code_object_desc, 2);
    int line_int = PyLong_AsLong(line);
    assert(!ERROR_OCCURRED());

    PyObject *argnames = PyTuple_GET_ITEM(code_object_desc, 3);
    PyObject *arg_count = PyTuple_GET_ITEM(code_object_desc, 4);
    int arg_count_int = PyLong_AsLong(arg_count);
    assert(!ERROR_OCCURRED());
    PyObject *flags = PyTuple_GET_ITEM(code_object_desc, 5);
    int flags_int = PyLong_AsLong(flags);
    assert(!ERROR_OCCURRED());

    PyCodeObject *code_object = MAKE_CODEOBJECT(
        filename,
        line_int,
        flags_int,
        function_name,
        argnames,
        NULL, // freevars
        arg_count_int,
        0, // TODO: Missing kw_only_count
        0 // TODO: Missing pos_only_count
    );

    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        functable_sqlalchemy$sql$sqltypes[offset],
        code_object->co_name,
#if PYTHON_VERSION >= 0x300
        NULL, // TODO: Not transferring qualname yet
#endif
        code_object,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL, // kwdefaults are done on the outside currently
        NULL, // TODO: Not transferring annotations
#endif
        module_sqlalchemy$sql$sqltypes,
        doc,
        NULL,
        0
    );

    return (PyObject *)result;
}

static PyMethodDef _method_def_create_compiled_function = {
    "create_compiled_function",
    (PyCFunction)_create_compiled_function,
    METH_VARARGS | METH_KEYWORDS, NULL
};


#endif

// Internal entry point for module code.
PyObject *modulecode_sqlalchemy$sql$sqltypes(PyObject *module, struct Nuitka_MetaPathBasedLoaderEntry const *loader_entry) {
    // Report entry to PGO.
    PGO_onModuleEntered("sqlalchemy.sql.sqltypes");

    // Store the module for future use.
    module_sqlalchemy$sql$sqltypes = module;

    // Modules can be loaded again in case of errors, avoid the init being done again.
    static bool init_done = false;

    if (init_done == false) {
#if defined(_NUITKA_MODULE) && 0
        // In case of an extension module loaded into a process, we need to call
        // initialization here because that's the first and potentially only time
        // we are going called.

        // Initialize the constant values used.
        _initBuiltinModule();
        createGlobalConstants();

        /* Initialize the compiled types of Nuitka. */
        _initCompiledCellType();
        _initCompiledGeneratorType();
        _initCompiledFunctionType();
        _initCompiledMethodType();
        _initCompiledFrameType();

        _initSlotCompare();
#if PYTHON_VERSION >= 0x270
        _initSlotIterNext();
#endif

        patchTypeComparison();

        // Enable meta path based loader if not already done.
#ifdef _NUITKA_TRACE
        PRINT_STRING("sqlalchemy.sql.sqltypes: Calling setupMetaPathBasedLoader().\n");
#endif
        setupMetaPathBasedLoader();

#if PYTHON_VERSION >= 0x300
        patchInspectModule();
#endif

#endif

        /* The constants only used by this module are created now. */
#ifdef _NUITKA_TRACE
        PRINT_STRING("sqlalchemy.sql.sqltypes: Calling createModuleConstants().\n");
#endif
        createModuleConstants();

        /* The code objects used by this module are created now. */
#ifdef _NUITKA_TRACE
        PRINT_STRING("sqlalchemy.sql.sqltypes: Calling createModuleCodeObjects().\n");
#endif
        createModuleCodeObjects();

        init_done = true;
    }

    // PRINT_STRING("in initsqlalchemy$sql$sqltypes\n");

    moduledict_sqlalchemy$sql$sqltypes = MODULE_DICT(module_sqlalchemy$sql$sqltypes);

#ifdef _NUITKA_PLUGIN_DILL_ENABLED
    registerDillPluginTables(loader_entry->name, &_method_def_reduce_compiled_function, &_method_def_create_compiled_function);
#endif

    // Set "__compiled__" to what version information we have.
    UPDATE_STRING_DICT0(
        moduledict_sqlalchemy$sql$sqltypes,
        (Nuitka_StringObject *)const_str_plain___compiled__,
        Nuitka_dunder_compiled_value
    );

    // Update "__package__" value to what it ought to be.
    {
#if 0
        UPDATE_STRING_DICT0(
            moduledict_sqlalchemy$sql$sqltypes,
            (Nuitka_StringObject *)const_str_plain___package__,
            mod_consts[376]
        );
#elif 0
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)const_str_plain___name__);

        UPDATE_STRING_DICT0(
            moduledict_sqlalchemy$sql$sqltypes,
            (Nuitka_StringObject *)const_str_plain___package__,
            module_name
        );
#else

#if PYTHON_VERSION < 0x300
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)const_str_plain___name__);
        char const *module_name_cstr = PyString_AS_STRING(module_name);

        char const *last_dot = strrchr(module_name_cstr, '.');

        if (last_dot != NULL) {
            UPDATE_STRING_DICT1(
                moduledict_sqlalchemy$sql$sqltypes,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyString_FromStringAndSize(module_name_cstr, last_dot - module_name_cstr)
            );
        }
#else
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)const_str_plain___name__);
        Py_ssize_t dot_index = PyUnicode_Find(module_name, const_str_dot, 0, PyUnicode_GetLength(module_name), -1);

        if (dot_index != -1) {
            UPDATE_STRING_DICT1(
                moduledict_sqlalchemy$sql$sqltypes,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyUnicode_Substring(module_name, 0, dot_index)
            );
        }
#endif
#endif
    }

    CHECK_OBJECT(module_sqlalchemy$sql$sqltypes);

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    if (GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)const_str_plain___builtins__) == NULL) {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then but the module itself.
#if defined(_NUITKA_MODULE) || !0
        value = PyModule_GetDict(value);
#endif

        UPDATE_STRING_DICT0(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)const_str_plain___builtins__, value);
    }

#if PYTHON_VERSION >= 0x300
    UPDATE_STRING_DICT0(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)const_str_plain___loader__, (PyObject *)&Nuitka_Loader_Type);
#endif

#if PYTHON_VERSION >= 0x340
// Set the "__spec__" value

#if 0
    // Main modules just get "None" as spec.
    UPDATE_STRING_DICT0(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)const_str_plain___spec__, Py_None);
#else
    // Other modules get a "ModuleSpec" from the standard mechanism.
    {
        PyObject *bootstrap_module = getImportLibBootstrapModule();
        CHECK_OBJECT(bootstrap_module);

        PyObject *_spec_from_module = PyObject_GetAttrString(bootstrap_module, "_spec_from_module");
        CHECK_OBJECT(_spec_from_module);

        PyObject *spec_value = CALL_FUNCTION_WITH_SINGLE_ARG(_spec_from_module, module_sqlalchemy$sql$sqltypes);
        Py_DECREF(_spec_from_module);

        // We can assume this to never fail, or else we are in trouble anyway.
        // CHECK_OBJECT(spec_value);

        if (spec_value == NULL) {
            PyErr_PrintEx(0);
            abort();
        }

// Mark the execution in the "__spec__" value.
        SET_ATTRIBUTE(spec_value, const_str_plain__initializing, Py_True);

        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)const_str_plain___spec__, spec_value);
    }
#endif
#endif

    // Temp variables if any
    PyObject *outline_0_var___class__ = NULL;
    PyObject *outline_1_var___class__ = NULL;
    PyObject *outline_2_var___class__ = NULL;
    PyObject *outline_3_var___class__ = NULL;
    PyObject *outline_4_var___class__ = NULL;
    PyObject *outline_5_var___class__ = NULL;
    PyObject *outline_6_var___class__ = NULL;
    PyObject *outline_7_var___class__ = NULL;
    PyObject *outline_8_var___class__ = NULL;
    PyObject *outline_9_var___class__ = NULL;
    PyObject *outline_10_var___class__ = NULL;
    PyObject *outline_11_var___class__ = NULL;
    PyObject *outline_12_var___class__ = NULL;
    PyObject *outline_13_var___class__ = NULL;
    PyObject *outline_14_var___class__ = NULL;
    PyObject *outline_15_var___class__ = NULL;
    PyObject *outline_16_var___class__ = NULL;
    PyObject *outline_17_var___class__ = NULL;
    PyObject *outline_18_var___class__ = NULL;
    PyObject *outline_19_var___class__ = NULL;
    PyObject *outline_20_var___class__ = NULL;
    PyObject *outline_21_var___class__ = NULL;
    PyObject *outline_22_var___class__ = NULL;
    PyObject *outline_23_var___class__ = NULL;
    PyObject *outline_24_var___class__ = NULL;
    PyObject *outline_25_var___class__ = NULL;
    PyObject *outline_26_var___class__ = NULL;
    PyObject *outline_27_var___class__ = NULL;
    PyObject *outline_28_var___class__ = NULL;
    PyObject *outline_29_var___class__ = NULL;
    PyObject *outline_30_var___class__ = NULL;
    PyObject *outline_31_var___class__ = NULL;
    PyObject *outline_32_var___class__ = NULL;
    PyObject *outline_33_var___class__ = NULL;
    PyObject *outline_34_var___class__ = NULL;
    PyObject *outline_35_var___class__ = NULL;
    PyObject *outline_36_var___class__ = NULL;
    PyObject *outline_37_var___class__ = NULL;
    PyObject *outline_38_var___class__ = NULL;
    PyObject *outline_39_var___class__ = NULL;
    PyObject *outline_40_var___class__ = NULL;
    PyObject *outline_41_var___class__ = NULL;
    PyObject *outline_42_var___class__ = NULL;
    PyObject *outline_43_var___class__ = NULL;
    PyObject *outline_44_var___class__ = NULL;
    PyObject *outline_45_var___class__ = NULL;
    PyObject *outline_46_var___class__ = NULL;
    PyObject *outline_47_var___class__ = NULL;
    PyObject *outline_48_var___class__ = NULL;
    PyObject *outline_49_var___class__ = NULL;
    PyObject *outline_50_var___class__ = NULL;
    PyObject *outline_51_var___class__ = NULL;
    PyObject *outline_52_var___class__ = NULL;
    PyObject *outline_53_var___class__ = NULL;
    PyObject *outline_54_var___class__ = NULL;
    PyObject *outline_55_var___class__ = NULL;
    PyObject *outline_56_var___class__ = NULL;
    PyObject *outline_57_var___class__ = NULL;
    PyObject *outline_58_var___class__ = NULL;
    PyObject *tmp_ARRAY$class_creation_1__bases = NULL;
    PyObject *tmp_ARRAY$class_creation_1__bases_orig = NULL;
    PyObject *tmp_ARRAY$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_ARRAY$class_creation_1__metaclass = NULL;
    PyObject *tmp_ARRAY$class_creation_1__prepared = NULL;
    PyObject *tmp_Concatenable$class_creation_1__bases = NULL;
    PyObject *tmp_Concatenable$class_creation_1__bases_orig = NULL;
    PyObject *tmp_Concatenable$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_Concatenable$class_creation_1__metaclass = NULL;
    PyObject *tmp_Concatenable$class_creation_1__prepared = NULL;
    PyObject *tmp_Enum$class_creation_1__bases = NULL;
    PyObject *tmp_Enum$class_creation_1__bases_orig = NULL;
    PyObject *tmp_Enum$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_Enum$class_creation_1__metaclass = NULL;
    PyObject *tmp_Enum$class_creation_1__prepared = NULL;
    PyObject *tmp_Indexable$class_creation_1__bases = NULL;
    PyObject *tmp_Indexable$class_creation_1__bases_orig = NULL;
    PyObject *tmp_Indexable$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_Indexable$class_creation_1__metaclass = NULL;
    PyObject *tmp_Indexable$class_creation_1__prepared = NULL;
    PyObject *tmp_JSON$class_creation_1__bases = NULL;
    PyObject *tmp_JSON$class_creation_1__bases_orig = NULL;
    PyObject *tmp_JSON$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_JSON$class_creation_1__metaclass = NULL;
    PyObject *tmp_JSON$class_creation_1__prepared = NULL;
    PyObject *tmp_JSON$class_creation_2__bases = NULL;
    PyObject *tmp_JSON$class_creation_2__bases_orig = NULL;
    PyObject *tmp_JSON$class_creation_2__class_decl_dict = NULL;
    PyObject *tmp_JSON$class_creation_2__metaclass = NULL;
    PyObject *tmp_JSON$class_creation_2__prepared = NULL;
    PyObject *tmp_JSON$class_creation_3__bases = NULL;
    PyObject *tmp_JSON$class_creation_3__bases_orig = NULL;
    PyObject *tmp_JSON$class_creation_3__class_decl_dict = NULL;
    PyObject *tmp_JSON$class_creation_3__metaclass = NULL;
    PyObject *tmp_JSON$class_creation_3__prepared = NULL;
    PyObject *tmp_JSON$class_creation_4__bases = NULL;
    PyObject *tmp_JSON$class_creation_4__bases_orig = NULL;
    PyObject *tmp_JSON$class_creation_4__class_decl_dict = NULL;
    PyObject *tmp_JSON$class_creation_4__metaclass = NULL;
    PyObject *tmp_JSON$class_creation_4__prepared = NULL;
    PyObject *tmp_NullType$class_creation_1__bases = NULL;
    PyObject *tmp_NullType$class_creation_1__bases_orig = NULL;
    PyObject *tmp_NullType$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_NullType$class_creation_1__metaclass = NULL;
    PyObject *tmp_NullType$class_creation_1__prepared = NULL;
    PyObject *tmp__LookupExpressionAdapter$class_creation_1__bases = NULL;
    PyObject *tmp__LookupExpressionAdapter$class_creation_1__bases_orig = NULL;
    PyObject *tmp__LookupExpressionAdapter$class_creation_1__class_decl_dict = NULL;
    PyObject *tmp__LookupExpressionAdapter$class_creation_1__metaclass = NULL;
    PyObject *tmp__LookupExpressionAdapter$class_creation_1__prepared = NULL;
    PyObject *tmp_class_creation_10__bases = NULL;
    PyObject *tmp_class_creation_10__bases_orig = NULL;
    PyObject *tmp_class_creation_10__class_decl_dict = NULL;
    PyObject *tmp_class_creation_10__metaclass = NULL;
    PyObject *tmp_class_creation_10__prepared = NULL;
    PyObject *tmp_class_creation_11__bases = NULL;
    PyObject *tmp_class_creation_11__bases_orig = NULL;
    PyObject *tmp_class_creation_11__class_decl_dict = NULL;
    PyObject *tmp_class_creation_11__metaclass = NULL;
    PyObject *tmp_class_creation_11__prepared = NULL;
    PyObject *tmp_class_creation_12__bases = NULL;
    PyObject *tmp_class_creation_12__bases_orig = NULL;
    PyObject *tmp_class_creation_12__class_decl_dict = NULL;
    PyObject *tmp_class_creation_12__metaclass = NULL;
    PyObject *tmp_class_creation_12__prepared = NULL;
    PyObject *tmp_class_creation_13__bases = NULL;
    PyObject *tmp_class_creation_13__bases_orig = NULL;
    PyObject *tmp_class_creation_13__class_decl_dict = NULL;
    PyObject *tmp_class_creation_13__metaclass = NULL;
    PyObject *tmp_class_creation_13__prepared = NULL;
    PyObject *tmp_class_creation_14__bases = NULL;
    PyObject *tmp_class_creation_14__bases_orig = NULL;
    PyObject *tmp_class_creation_14__class_decl_dict = NULL;
    PyObject *tmp_class_creation_14__metaclass = NULL;
    PyObject *tmp_class_creation_14__prepared = NULL;
    PyObject *tmp_class_creation_15__bases = NULL;
    PyObject *tmp_class_creation_15__bases_orig = NULL;
    PyObject *tmp_class_creation_15__class_decl_dict = NULL;
    PyObject *tmp_class_creation_15__metaclass = NULL;
    PyObject *tmp_class_creation_15__prepared = NULL;
    PyObject *tmp_class_creation_16__bases = NULL;
    PyObject *tmp_class_creation_16__bases_orig = NULL;
    PyObject *tmp_class_creation_16__class_decl_dict = NULL;
    PyObject *tmp_class_creation_16__metaclass = NULL;
    PyObject *tmp_class_creation_16__prepared = NULL;
    PyObject *tmp_class_creation_17__bases = NULL;
    PyObject *tmp_class_creation_17__bases_orig = NULL;
    PyObject *tmp_class_creation_17__class_decl_dict = NULL;
    PyObject *tmp_class_creation_17__metaclass = NULL;
    PyObject *tmp_class_creation_17__prepared = NULL;
    PyObject *tmp_class_creation_18__bases = NULL;
    PyObject *tmp_class_creation_18__bases_orig = NULL;
    PyObject *tmp_class_creation_18__class_decl_dict = NULL;
    PyObject *tmp_class_creation_18__metaclass = NULL;
    PyObject *tmp_class_creation_18__prepared = NULL;
    PyObject *tmp_class_creation_19__bases = NULL;
    PyObject *tmp_class_creation_19__bases_orig = NULL;
    PyObject *tmp_class_creation_19__class_decl_dict = NULL;
    PyObject *tmp_class_creation_19__metaclass = NULL;
    PyObject *tmp_class_creation_19__prepared = NULL;
    PyObject *tmp_class_creation_1__bases = NULL;
    PyObject *tmp_class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_class_creation_1__metaclass = NULL;
    PyObject *tmp_class_creation_1__prepared = NULL;
    PyObject *tmp_class_creation_20__bases = NULL;
    PyObject *tmp_class_creation_20__bases_orig = NULL;
    PyObject *tmp_class_creation_20__class_decl_dict = NULL;
    PyObject *tmp_class_creation_20__metaclass = NULL;
    PyObject *tmp_class_creation_20__prepared = NULL;
    PyObject *tmp_class_creation_21__bases = NULL;
    PyObject *tmp_class_creation_21__bases_orig = NULL;
    PyObject *tmp_class_creation_21__class_decl_dict = NULL;
    PyObject *tmp_class_creation_21__metaclass = NULL;
    PyObject *tmp_class_creation_21__prepared = NULL;
    PyObject *tmp_class_creation_22__bases = NULL;
    PyObject *tmp_class_creation_22__bases_orig = NULL;
    PyObject *tmp_class_creation_22__class_decl_dict = NULL;
    PyObject *tmp_class_creation_22__metaclass = NULL;
    PyObject *tmp_class_creation_22__prepared = NULL;
    PyObject *tmp_class_creation_23__bases = NULL;
    PyObject *tmp_class_creation_23__bases_orig = NULL;
    PyObject *tmp_class_creation_23__class_decl_dict = NULL;
    PyObject *tmp_class_creation_23__metaclass = NULL;
    PyObject *tmp_class_creation_23__prepared = NULL;
    PyObject *tmp_class_creation_24__bases = NULL;
    PyObject *tmp_class_creation_24__bases_orig = NULL;
    PyObject *tmp_class_creation_24__class_decl_dict = NULL;
    PyObject *tmp_class_creation_24__metaclass = NULL;
    PyObject *tmp_class_creation_24__prepared = NULL;
    PyObject *tmp_class_creation_25__bases = NULL;
    PyObject *tmp_class_creation_25__bases_orig = NULL;
    PyObject *tmp_class_creation_25__class_decl_dict = NULL;
    PyObject *tmp_class_creation_25__metaclass = NULL;
    PyObject *tmp_class_creation_25__prepared = NULL;
    PyObject *tmp_class_creation_26__bases = NULL;
    PyObject *tmp_class_creation_26__bases_orig = NULL;
    PyObject *tmp_class_creation_26__class_decl_dict = NULL;
    PyObject *tmp_class_creation_26__metaclass = NULL;
    PyObject *tmp_class_creation_26__prepared = NULL;
    PyObject *tmp_class_creation_27__bases = NULL;
    PyObject *tmp_class_creation_27__bases_orig = NULL;
    PyObject *tmp_class_creation_27__class_decl_dict = NULL;
    PyObject *tmp_class_creation_27__metaclass = NULL;
    PyObject *tmp_class_creation_27__prepared = NULL;
    PyObject *tmp_class_creation_28__bases = NULL;
    PyObject *tmp_class_creation_28__bases_orig = NULL;
    PyObject *tmp_class_creation_28__class_decl_dict = NULL;
    PyObject *tmp_class_creation_28__metaclass = NULL;
    PyObject *tmp_class_creation_28__prepared = NULL;
    PyObject *tmp_class_creation_29__bases = NULL;
    PyObject *tmp_class_creation_29__bases_orig = NULL;
    PyObject *tmp_class_creation_29__class_decl_dict = NULL;
    PyObject *tmp_class_creation_29__metaclass = NULL;
    PyObject *tmp_class_creation_29__prepared = NULL;
    PyObject *tmp_class_creation_2__bases = NULL;
    PyObject *tmp_class_creation_2__class_decl_dict = NULL;
    PyObject *tmp_class_creation_2__metaclass = NULL;
    PyObject *tmp_class_creation_2__prepared = NULL;
    PyObject *tmp_class_creation_30__bases = NULL;
    PyObject *tmp_class_creation_30__bases_orig = NULL;
    PyObject *tmp_class_creation_30__class_decl_dict = NULL;
    PyObject *tmp_class_creation_30__metaclass = NULL;
    PyObject *tmp_class_creation_30__prepared = NULL;
    PyObject *tmp_class_creation_31__bases = NULL;
    PyObject *tmp_class_creation_31__bases_orig = NULL;
    PyObject *tmp_class_creation_31__class_decl_dict = NULL;
    PyObject *tmp_class_creation_31__metaclass = NULL;
    PyObject *tmp_class_creation_31__prepared = NULL;
    PyObject *tmp_class_creation_32__bases = NULL;
    PyObject *tmp_class_creation_32__bases_orig = NULL;
    PyObject *tmp_class_creation_32__class_decl_dict = NULL;
    PyObject *tmp_class_creation_32__metaclass = NULL;
    PyObject *tmp_class_creation_32__prepared = NULL;
    PyObject *tmp_class_creation_33__bases = NULL;
    PyObject *tmp_class_creation_33__bases_orig = NULL;
    PyObject *tmp_class_creation_33__class_decl_dict = NULL;
    PyObject *tmp_class_creation_33__metaclass = NULL;
    PyObject *tmp_class_creation_33__prepared = NULL;
    PyObject *tmp_class_creation_34__bases = NULL;
    PyObject *tmp_class_creation_34__bases_orig = NULL;
    PyObject *tmp_class_creation_34__class_decl_dict = NULL;
    PyObject *tmp_class_creation_34__metaclass = NULL;
    PyObject *tmp_class_creation_34__prepared = NULL;
    PyObject *tmp_class_creation_35__bases = NULL;
    PyObject *tmp_class_creation_35__bases_orig = NULL;
    PyObject *tmp_class_creation_35__class_decl_dict = NULL;
    PyObject *tmp_class_creation_35__metaclass = NULL;
    PyObject *tmp_class_creation_35__prepared = NULL;
    PyObject *tmp_class_creation_36__bases = NULL;
    PyObject *tmp_class_creation_36__bases_orig = NULL;
    PyObject *tmp_class_creation_36__class_decl_dict = NULL;
    PyObject *tmp_class_creation_36__metaclass = NULL;
    PyObject *tmp_class_creation_36__prepared = NULL;
    PyObject *tmp_class_creation_37__bases = NULL;
    PyObject *tmp_class_creation_37__bases_orig = NULL;
    PyObject *tmp_class_creation_37__class_decl_dict = NULL;
    PyObject *tmp_class_creation_37__metaclass = NULL;
    PyObject *tmp_class_creation_37__prepared = NULL;
    PyObject *tmp_class_creation_38__bases = NULL;
    PyObject *tmp_class_creation_38__bases_orig = NULL;
    PyObject *tmp_class_creation_38__class_decl_dict = NULL;
    PyObject *tmp_class_creation_38__metaclass = NULL;
    PyObject *tmp_class_creation_38__prepared = NULL;
    PyObject *tmp_class_creation_39__bases = NULL;
    PyObject *tmp_class_creation_39__bases_orig = NULL;
    PyObject *tmp_class_creation_39__class_decl_dict = NULL;
    PyObject *tmp_class_creation_39__metaclass = NULL;
    PyObject *tmp_class_creation_39__prepared = NULL;
    PyObject *tmp_class_creation_3__bases = NULL;
    PyObject *tmp_class_creation_3__class_decl_dict = NULL;
    PyObject *tmp_class_creation_3__metaclass = NULL;
    PyObject *tmp_class_creation_3__prepared = NULL;
    PyObject *tmp_class_creation_40__bases = NULL;
    PyObject *tmp_class_creation_40__bases_orig = NULL;
    PyObject *tmp_class_creation_40__class_decl_dict = NULL;
    PyObject *tmp_class_creation_40__metaclass = NULL;
    PyObject *tmp_class_creation_40__prepared = NULL;
    PyObject *tmp_class_creation_41__bases = NULL;
    PyObject *tmp_class_creation_41__bases_orig = NULL;
    PyObject *tmp_class_creation_41__class_decl_dict = NULL;
    PyObject *tmp_class_creation_41__metaclass = NULL;
    PyObject *tmp_class_creation_41__prepared = NULL;
    PyObject *tmp_class_creation_42__bases = NULL;
    PyObject *tmp_class_creation_42__bases_orig = NULL;
    PyObject *tmp_class_creation_42__class_decl_dict = NULL;
    PyObject *tmp_class_creation_42__metaclass = NULL;
    PyObject *tmp_class_creation_42__prepared = NULL;
    PyObject *tmp_class_creation_43__bases = NULL;
    PyObject *tmp_class_creation_43__bases_orig = NULL;
    PyObject *tmp_class_creation_43__class_decl_dict = NULL;
    PyObject *tmp_class_creation_43__metaclass = NULL;
    PyObject *tmp_class_creation_43__prepared = NULL;
    PyObject *tmp_class_creation_44__bases = NULL;
    PyObject *tmp_class_creation_44__bases_orig = NULL;
    PyObject *tmp_class_creation_44__class_decl_dict = NULL;
    PyObject *tmp_class_creation_44__metaclass = NULL;
    PyObject *tmp_class_creation_44__prepared = NULL;
    PyObject *tmp_class_creation_45__bases = NULL;
    PyObject *tmp_class_creation_45__bases_orig = NULL;
    PyObject *tmp_class_creation_45__class_decl_dict = NULL;
    PyObject *tmp_class_creation_45__metaclass = NULL;
    PyObject *tmp_class_creation_45__prepared = NULL;
    PyObject *tmp_class_creation_46__bases = NULL;
    PyObject *tmp_class_creation_46__bases_orig = NULL;
    PyObject *tmp_class_creation_46__class_decl_dict = NULL;
    PyObject *tmp_class_creation_46__metaclass = NULL;
    PyObject *tmp_class_creation_46__prepared = NULL;
    PyObject *tmp_class_creation_47__bases = NULL;
    PyObject *tmp_class_creation_47__bases_orig = NULL;
    PyObject *tmp_class_creation_47__class_decl_dict = NULL;
    PyObject *tmp_class_creation_47__metaclass = NULL;
    PyObject *tmp_class_creation_47__prepared = NULL;
    PyObject *tmp_class_creation_48__bases = NULL;
    PyObject *tmp_class_creation_48__bases_orig = NULL;
    PyObject *tmp_class_creation_48__class_decl_dict = NULL;
    PyObject *tmp_class_creation_48__metaclass = NULL;
    PyObject *tmp_class_creation_48__prepared = NULL;
    PyObject *tmp_class_creation_49__bases = NULL;
    PyObject *tmp_class_creation_49__bases_orig = NULL;
    PyObject *tmp_class_creation_49__class_decl_dict = NULL;
    PyObject *tmp_class_creation_49__metaclass = NULL;
    PyObject *tmp_class_creation_49__prepared = NULL;
    PyObject *tmp_class_creation_4__bases = NULL;
    PyObject *tmp_class_creation_4__bases_orig = NULL;
    PyObject *tmp_class_creation_4__class_decl_dict = NULL;
    PyObject *tmp_class_creation_4__metaclass = NULL;
    PyObject *tmp_class_creation_4__prepared = NULL;
    PyObject *tmp_class_creation_5__bases = NULL;
    PyObject *tmp_class_creation_5__bases_orig = NULL;
    PyObject *tmp_class_creation_5__class_decl_dict = NULL;
    PyObject *tmp_class_creation_5__metaclass = NULL;
    PyObject *tmp_class_creation_5__prepared = NULL;
    PyObject *tmp_class_creation_6__bases = NULL;
    PyObject *tmp_class_creation_6__bases_orig = NULL;
    PyObject *tmp_class_creation_6__class_decl_dict = NULL;
    PyObject *tmp_class_creation_6__metaclass = NULL;
    PyObject *tmp_class_creation_6__prepared = NULL;
    PyObject *tmp_class_creation_7__bases = NULL;
    PyObject *tmp_class_creation_7__bases_orig = NULL;
    PyObject *tmp_class_creation_7__class_decl_dict = NULL;
    PyObject *tmp_class_creation_7__metaclass = NULL;
    PyObject *tmp_class_creation_7__prepared = NULL;
    PyObject *tmp_class_creation_8__bases = NULL;
    PyObject *tmp_class_creation_8__bases_orig = NULL;
    PyObject *tmp_class_creation_8__class_decl_dict = NULL;
    PyObject *tmp_class_creation_8__metaclass = NULL;
    PyObject *tmp_class_creation_8__prepared = NULL;
    PyObject *tmp_class_creation_9__bases = NULL;
    PyObject *tmp_class_creation_9__bases_orig = NULL;
    PyObject *tmp_class_creation_9__class_decl_dict = NULL;
    PyObject *tmp_class_creation_9__metaclass = NULL;
    PyObject *tmp_class_creation_9__prepared = NULL;
    struct Nuitka_FrameObject *frame_710839dc2352d5736e91d4b9f559d9ef;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_dictdel_dict;
    PyObject *tmp_dictdel_key;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48 = NULL;
    PyObject *tmp_dictset_value;
    struct Nuitka_FrameObject *frame_33b35e3605fbee533bbcddb617405a17_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__2_Comparator_61 = NULL;
    struct Nuitka_FrameObject *frame_6563461654eab3bb951d2dca64352b29_3;
    NUITKA_MAY_BE_UNUSED char const *type_description_3 = NULL;
    static struct Nuitka_FrameObject *cache_frame_6563461654eab3bb951d2dca64352b29_3 = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_33b35e3605fbee533bbcddb617405a17_2 = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__3_Concatenable_79 = NULL;
    struct Nuitka_FrameObject *frame_62f34b6062830150f94f3a0bd71c80cd_4;
    NUITKA_MAY_BE_UNUSED char const *type_description_4 = NULL;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__4_Comparator_84 = NULL;
    struct Nuitka_FrameObject *frame_95a105e5d6aa6c3fbd0de03ca55d5e46_5;
    NUITKA_MAY_BE_UNUSED char const *type_description_5 = NULL;
    static struct Nuitka_FrameObject *cache_frame_95a105e5d6aa6c3fbd0de03ca55d5e46_5 = NULL;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    static struct Nuitka_FrameObject *cache_frame_62f34b6062830150f94f3a0bd71c80cd_4 = NULL;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__5_Indexable_99 = NULL;
    struct Nuitka_FrameObject *frame_6a81b4411b72f8ba12a040659a794727_6;
    NUITKA_MAY_BE_UNUSED char const *type_description_6 = NULL;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__6_Comparator_109 = NULL;
    struct Nuitka_FrameObject *frame_5d739de253f397ad2ea22421f2a9365e_7;
    NUITKA_MAY_BE_UNUSED char const *type_description_7 = NULL;
    static struct Nuitka_FrameObject *cache_frame_5d739de253f397ad2ea22421f2a9365e_7 = NULL;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;
    static struct Nuitka_FrameObject *cache_frame_6a81b4411b72f8ba12a040659a794727_6 = NULL;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_16;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_17;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_18;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__7_String_126 = NULL;
    struct Nuitka_FrameObject *frame_92c838af8031dc4aabf281f989df2263_8;
    NUITKA_MAY_BE_UNUSED char const *type_description_8 = NULL;
    static struct Nuitka_FrameObject *cache_frame_92c838af8031dc4aabf281f989df2263_8 = NULL;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_19;
    PyObject *exception_keeper_type_20;
    PyObject *exception_keeper_value_20;
    PyTracebackObject *exception_keeper_tb_20;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_20;
    PyObject *exception_keeper_type_21;
    PyObject *exception_keeper_value_21;
    PyTracebackObject *exception_keeper_tb_21;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_21;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__8_Text_341 = NULL;
    struct Nuitka_FrameObject *frame_7a8219d4d6fa314a7b423b4da3c16504_9;
    NUITKA_MAY_BE_UNUSED char const *type_description_9 = NULL;
    static struct Nuitka_FrameObject *cache_frame_7a8219d4d6fa314a7b423b4da3c16504_9 = NULL;
    PyObject *exception_keeper_type_22;
    PyObject *exception_keeper_value_22;
    PyTracebackObject *exception_keeper_tb_22;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_22;
    PyObject *exception_keeper_type_23;
    PyObject *exception_keeper_value_23;
    PyTracebackObject *exception_keeper_tb_23;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_23;
    PyObject *exception_keeper_type_24;
    PyObject *exception_keeper_value_24;
    PyTracebackObject *exception_keeper_tb_24;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_24;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__9_Unicode_356 = NULL;
    struct Nuitka_FrameObject *frame_15c8c8b15bc55ad5757ef7c875079e87_10;
    NUITKA_MAY_BE_UNUSED char const *type_description_10 = NULL;
    static struct Nuitka_FrameObject *cache_frame_15c8c8b15bc55ad5757ef7c875079e87_10 = NULL;
    PyObject *exception_keeper_type_25;
    PyObject *exception_keeper_value_25;
    PyTracebackObject *exception_keeper_tb_25;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_25;
    PyObject *exception_keeper_type_26;
    PyObject *exception_keeper_value_26;
    PyTracebackObject *exception_keeper_tb_26;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_26;
    PyObject *exception_keeper_type_27;
    PyObject *exception_keeper_value_27;
    PyTracebackObject *exception_keeper_tb_27;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_27;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__10_UnicodeText_428 = NULL;
    struct Nuitka_FrameObject *frame_1d7fb75628949076e1e7791a7f180241_11;
    NUITKA_MAY_BE_UNUSED char const *type_description_11 = NULL;
    static struct Nuitka_FrameObject *cache_frame_1d7fb75628949076e1e7791a7f180241_11 = NULL;
    PyObject *exception_keeper_type_28;
    PyObject *exception_keeper_value_28;
    PyTracebackObject *exception_keeper_tb_28;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_28;
    PyObject *exception_keeper_type_29;
    PyObject *exception_keeper_value_29;
    PyTracebackObject *exception_keeper_tb_29;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_29;
    PyObject *exception_keeper_type_30;
    PyObject *exception_keeper_value_30;
    PyTracebackObject *exception_keeper_tb_30;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_30;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_460 = NULL;
    struct Nuitka_FrameObject *frame_346c980003d55fba9469461bcf621539_12;
    NUITKA_MAY_BE_UNUSED char const *type_description_12 = NULL;
    static struct Nuitka_FrameObject *cache_frame_346c980003d55fba9469461bcf621539_12 = NULL;
    PyObject *exception_keeper_type_31;
    PyObject *exception_keeper_value_31;
    PyTracebackObject *exception_keeper_tb_31;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_31;
    PyObject *exception_keeper_type_32;
    PyObject *exception_keeper_value_32;
    PyTracebackObject *exception_keeper_tb_32;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_32;
    PyObject *exception_keeper_type_33;
    PyObject *exception_keeper_value_33;
    PyTracebackObject *exception_keeper_tb_33;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_33;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__12_SmallInteger_500 = NULL;
    struct Nuitka_FrameObject *frame_91c720b149aa182de30f187d353d5fe1_13;
    NUITKA_MAY_BE_UNUSED char const *type_description_13 = NULL;
    static struct Nuitka_FrameObject *cache_frame_91c720b149aa182de30f187d353d5fe1_13 = NULL;
    PyObject *exception_keeper_type_34;
    PyObject *exception_keeper_value_34;
    PyTracebackObject *exception_keeper_tb_34;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_34;
    PyObject *exception_keeper_type_35;
    PyObject *exception_keeper_value_35;
    PyTracebackObject *exception_keeper_tb_35;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_35;
    PyObject *exception_keeper_type_36;
    PyObject *exception_keeper_value_36;
    PyTracebackObject *exception_keeper_tb_36;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_36;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__13_BigInteger_512 = NULL;
    struct Nuitka_FrameObject *frame_6f85b81963dc03c6b2ae53a00c99188c_14;
    NUITKA_MAY_BE_UNUSED char const *type_description_14 = NULL;
    static struct Nuitka_FrameObject *cache_frame_6f85b81963dc03c6b2ae53a00c99188c_14 = NULL;
    PyObject *exception_keeper_type_37;
    PyObject *exception_keeper_value_37;
    PyTracebackObject *exception_keeper_tb_37;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_37;
    PyObject *exception_keeper_type_38;
    PyObject *exception_keeper_value_38;
    PyTracebackObject *exception_keeper_tb_38;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_38;
    PyObject *exception_keeper_type_39;
    PyObject *exception_keeper_value_39;
    PyTracebackObject *exception_keeper_tb_39;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_39;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_524 = NULL;
    struct Nuitka_FrameObject *frame_21273c79242de84175540b11c03729d1_15;
    NUITKA_MAY_BE_UNUSED char const *type_description_15 = NULL;
    static struct Nuitka_FrameObject *cache_frame_21273c79242de84175540b11c03729d1_15 = NULL;
    PyObject *exception_keeper_type_40;
    PyObject *exception_keeper_value_40;
    PyTracebackObject *exception_keeper_tb_40;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_40;
    PyObject *exception_keeper_type_41;
    PyObject *exception_keeper_value_41;
    PyTracebackObject *exception_keeper_tb_41;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_41;
    PyObject *exception_keeper_type_42;
    PyObject *exception_keeper_value_42;
    PyTracebackObject *exception_keeper_tb_42;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_42;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__15_Float_702 = NULL;
    struct Nuitka_FrameObject *frame_d3594aa6be3e4a70feb8b430ec85c886_16;
    NUITKA_MAY_BE_UNUSED char const *type_description_16 = NULL;
    static struct Nuitka_FrameObject *cache_frame_d3594aa6be3e4a70feb8b430ec85c886_16 = NULL;
    PyObject *exception_keeper_type_43;
    PyObject *exception_keeper_value_43;
    PyTracebackObject *exception_keeper_tb_43;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_43;
    PyObject *exception_keeper_type_44;
    PyObject *exception_keeper_value_44;
    PyTracebackObject *exception_keeper_tb_44;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_44;
    PyObject *exception_keeper_type_45;
    PyObject *exception_keeper_value_45;
    PyTracebackObject *exception_keeper_tb_45;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_45;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_767 = NULL;
    struct Nuitka_FrameObject *frame_67e104d0232080aa9715957b74205b33_17;
    NUITKA_MAY_BE_UNUSED char const *type_description_17 = NULL;
    static struct Nuitka_FrameObject *cache_frame_67e104d0232080aa9715957b74205b33_17 = NULL;
    PyObject *exception_keeper_type_46;
    PyObject *exception_keeper_value_46;
    PyTracebackObject *exception_keeper_tb_46;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_46;
    PyObject *exception_keeper_type_47;
    PyObject *exception_keeper_value_47;
    PyTracebackObject *exception_keeper_tb_47;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_47;
    PyObject *exception_keeper_type_48;
    PyObject *exception_keeper_value_48;
    PyTracebackObject *exception_keeper_tb_48;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_48;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__17_Date_822 = NULL;
    struct Nuitka_FrameObject *frame_dd47fc159209508319eddb5261464e6a_18;
    NUITKA_MAY_BE_UNUSED char const *type_description_18 = NULL;
    static struct Nuitka_FrameObject *cache_frame_dd47fc159209508319eddb5261464e6a_18 = NULL;
    PyObject *exception_keeper_type_49;
    PyObject *exception_keeper_value_49;
    PyTracebackObject *exception_keeper_tb_49;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_49;
    PyObject *exception_keeper_type_50;
    PyObject *exception_keeper_value_50;
    PyTracebackObject *exception_keeper_tb_50;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_50;
    PyObject *exception_keeper_type_51;
    PyObject *exception_keeper_value_51;
    PyTracebackObject *exception_keeper_tb_51;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_51;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__18_Time_860 = NULL;
    struct Nuitka_FrameObject *frame_8df3a086079671e7c39d78ec3a51356a_19;
    NUITKA_MAY_BE_UNUSED char const *type_description_19 = NULL;
    static struct Nuitka_FrameObject *cache_frame_8df3a086079671e7c39d78ec3a51356a_19 = NULL;
    PyObject *exception_keeper_type_52;
    PyObject *exception_keeper_value_52;
    PyTracebackObject *exception_keeper_tb_52;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_52;
    PyObject *exception_keeper_type_53;
    PyObject *exception_keeper_value_53;
    PyTracebackObject *exception_keeper_tb_53;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_53;
    PyObject *exception_keeper_type_54;
    PyObject *exception_keeper_value_54;
    PyTracebackObject *exception_keeper_tb_54;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_54;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_887 = NULL;
    struct Nuitka_FrameObject *frame_8903c4a3d33544d3921ce0ac2ff35885_20;
    NUITKA_MAY_BE_UNUSED char const *type_description_20 = NULL;
    static struct Nuitka_FrameObject *cache_frame_8903c4a3d33544d3921ce0ac2ff35885_20 = NULL;
    PyObject *exception_keeper_type_55;
    PyObject *exception_keeper_value_55;
    PyTracebackObject *exception_keeper_tb_55;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_55;
    PyObject *exception_keeper_type_56;
    PyObject *exception_keeper_value_56;
    PyTracebackObject *exception_keeper_tb_56;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_56;
    PyObject *exception_keeper_type_57;
    PyObject *exception_keeper_value_57;
    PyTracebackObject *exception_keeper_tb_57;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_57;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__20_LargeBinary_963 = NULL;
    struct Nuitka_FrameObject *frame_954e881c467d99e18659617377121c4b_21;
    NUITKA_MAY_BE_UNUSED char const *type_description_21 = NULL;
    static struct Nuitka_FrameObject *cache_frame_954e881c467d99e18659617377121c4b_21 = NULL;
    PyObject *exception_keeper_type_58;
    PyObject *exception_keeper_value_58;
    PyTracebackObject *exception_keeper_tb_58;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_58;
    PyObject *exception_keeper_type_59;
    PyObject *exception_keeper_value_59;
    PyTracebackObject *exception_keeper_tb_59;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_59;
    PyObject *exception_keeper_type_60;
    PyObject *exception_keeper_value_60;
    PyTracebackObject *exception_keeper_tb_60;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_60;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__21_Binary_992 = NULL;
    struct Nuitka_FrameObject *frame_f8682397177685371c8f52cc512db74c_22;
    NUITKA_MAY_BE_UNUSED char const *type_description_22 = NULL;
    static struct Nuitka_FrameObject *cache_frame_f8682397177685371c8f52cc512db74c_22 = NULL;
    PyObject *exception_keeper_type_61;
    PyObject *exception_keeper_value_61;
    PyTracebackObject *exception_keeper_tb_61;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_61;
    PyObject *exception_keeper_type_62;
    PyObject *exception_keeper_value_62;
    PyTracebackObject *exception_keeper_tb_62;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_62;
    PyObject *exception_keeper_type_63;
    PyObject *exception_keeper_value_63;
    PyTracebackObject *exception_keeper_tb_63;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_63;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__22_SchemaType_997 = NULL;
    struct Nuitka_FrameObject *frame_1edc8a06b5cf424963435a420881e56d_23;
    NUITKA_MAY_BE_UNUSED char const *type_description_23 = NULL;
    static struct Nuitka_FrameObject *cache_frame_1edc8a06b5cf424963435a420881e56d_23 = NULL;
    PyObject *exception_keeper_type_64;
    PyObject *exception_keeper_value_64;
    PyTracebackObject *exception_keeper_tb_64;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_64;
    PyObject *exception_keeper_type_65;
    PyObject *exception_keeper_value_65;
    PyTracebackObject *exception_keeper_tb_65;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_65;
    PyObject *exception_keeper_type_66;
    PyObject *exception_keeper_value_66;
    PyTracebackObject *exception_keeper_tb_66;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_66;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191 = NULL;
    struct Nuitka_FrameObject *frame_271325c457b6cdc40b0289048d183222_24;
    NUITKA_MAY_BE_UNUSED char const *type_description_24 = NULL;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__24_Comparator_1527 = NULL;
    struct Nuitka_FrameObject *frame_47df8abc3d23b00fcd91fa61a0194987_25;
    NUITKA_MAY_BE_UNUSED char const *type_description_25 = NULL;
    static struct Nuitka_FrameObject *cache_frame_47df8abc3d23b00fcd91fa61a0194987_25 = NULL;
    PyObject *exception_keeper_type_67;
    PyObject *exception_keeper_value_67;
    PyTracebackObject *exception_keeper_tb_67;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_67;
    PyObject *exception_keeper_type_68;
    PyObject *exception_keeper_value_68;
    PyTracebackObject *exception_keeper_tb_68;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_68;
    PyObject *exception_keeper_type_69;
    PyObject *exception_keeper_value_69;
    PyTracebackObject *exception_keeper_tb_69;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_69;
    static struct Nuitka_FrameObject *cache_frame_271325c457b6cdc40b0289048d183222_24 = NULL;
    PyObject *exception_keeper_type_70;
    PyObject *exception_keeper_value_70;
    PyTracebackObject *exception_keeper_tb_70;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_70;
    PyObject *exception_keeper_type_71;
    PyObject *exception_keeper_value_71;
    PyTracebackObject *exception_keeper_tb_71;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_71;
    PyObject *exception_keeper_type_72;
    PyObject *exception_keeper_value_72;
    PyTracebackObject *exception_keeper_tb_72;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_72;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__25_PickleType_1654 = NULL;
    struct Nuitka_FrameObject *frame_9444700615de766c07ab9b2e36f34908_26;
    NUITKA_MAY_BE_UNUSED char const *type_description_26 = NULL;
    static struct Nuitka_FrameObject *cache_frame_9444700615de766c07ab9b2e36f34908_26 = NULL;
    PyObject *exception_keeper_type_73;
    PyObject *exception_keeper_value_73;
    PyTracebackObject *exception_keeper_tb_73;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_73;
    PyObject *exception_keeper_type_74;
    PyObject *exception_keeper_value_74;
    PyTracebackObject *exception_keeper_tb_74;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_74;
    PyObject *exception_keeper_type_75;
    PyObject *exception_keeper_value_75;
    PyTracebackObject *exception_keeper_tb_75;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_75;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__26_Boolean_1741 = NULL;
    struct Nuitka_FrameObject *frame_11372eb91ef81f59b652ae05db762417_27;
    NUITKA_MAY_BE_UNUSED char const *type_description_27 = NULL;
    static struct Nuitka_FrameObject *cache_frame_11372eb91ef81f59b652ae05db762417_27 = NULL;
    PyObject *exception_keeper_type_76;
    PyObject *exception_keeper_value_76;
    PyTracebackObject *exception_keeper_tb_76;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_76;
    PyObject *exception_keeper_type_77;
    PyObject *exception_keeper_value_77;
    PyTracebackObject *exception_keeper_tb_77;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_77;
    PyObject *exception_keeper_type_78;
    PyObject *exception_keeper_value_78;
    PyTracebackObject *exception_keeper_tb_78;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_78;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__27__AbstractInterval_1855 = NULL;
    struct Nuitka_FrameObject *frame_2689a9b3a13f6ecb6924457b477eb87f_28;
    NUITKA_MAY_BE_UNUSED char const *type_description_28 = NULL;
    static struct Nuitka_FrameObject *cache_frame_2689a9b3a13f6ecb6924457b477eb87f_28 = NULL;
    PyObject *exception_keeper_type_79;
    PyObject *exception_keeper_value_79;
    PyTracebackObject *exception_keeper_tb_79;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_79;
    PyObject *exception_keeper_type_80;
    PyObject *exception_keeper_value_80;
    PyTracebackObject *exception_keeper_tb_80;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_80;
    PyObject *exception_keeper_type_81;
    PyObject *exception_keeper_value_81;
    PyTracebackObject *exception_keeper_tb_81;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_81;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__28_Interval_1883 = NULL;
    struct Nuitka_FrameObject *frame_359a6b31ccc171975e0deef2d02d0d82_29;
    NUITKA_MAY_BE_UNUSED char const *type_description_29 = NULL;
    static struct Nuitka_FrameObject *cache_frame_359a6b31ccc171975e0deef2d02d0d82_29 = NULL;
    PyObject *exception_keeper_type_82;
    PyObject *exception_keeper_value_82;
    PyTracebackObject *exception_keeper_tb_82;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_82;
    PyObject *exception_keeper_type_83;
    PyObject *exception_keeper_value_83;
    PyTracebackObject *exception_keeper_tb_83;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_83;
    PyObject *exception_keeper_type_84;
    PyObject *exception_keeper_value_84;
    PyTracebackObject *exception_keeper_tb_84;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_84;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973 = NULL;
    struct Nuitka_FrameObject *frame_d4a26a0482d921abe3cdbc3568d8027f_30;
    NUITKA_MAY_BE_UNUSED char const *type_description_30 = NULL;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__30_JSONElementType_2230 = NULL;
    struct Nuitka_FrameObject *frame_57d2ef71cbf357887920bccd62d12f03_31;
    NUITKA_MAY_BE_UNUSED char const *type_description_31 = NULL;
    static struct Nuitka_FrameObject *cache_frame_57d2ef71cbf357887920bccd62d12f03_31 = NULL;
    PyObject *exception_keeper_type_85;
    PyObject *exception_keeper_value_85;
    PyTracebackObject *exception_keeper_tb_85;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_85;
    PyObject *exception_keeper_type_86;
    PyObject *exception_keeper_value_86;
    PyTracebackObject *exception_keeper_tb_86;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_86;
    PyObject *exception_keeper_type_87;
    PyObject *exception_keeper_value_87;
    PyTracebackObject *exception_keeper_tb_87;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_87;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__31_JSONIndexType_2268 = NULL;
    PyObject *exception_keeper_type_88;
    PyObject *exception_keeper_value_88;
    PyTracebackObject *exception_keeper_tb_88;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_88;
    PyObject *exception_keeper_type_89;
    PyObject *exception_keeper_value_89;
    PyTracebackObject *exception_keeper_tb_89;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_89;
    PyObject *exception_keeper_type_90;
    PyObject *exception_keeper_value_90;
    PyTracebackObject *exception_keeper_tb_90;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_90;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__32_JSONPathType_2276 = NULL;
    PyObject *exception_keeper_type_91;
    PyObject *exception_keeper_value_91;
    PyTracebackObject *exception_keeper_tb_91;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_91;
    PyObject *exception_keeper_type_92;
    PyObject *exception_keeper_value_92;
    PyTracebackObject *exception_keeper_tb_92;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_92;
    PyObject *exception_keeper_type_93;
    PyObject *exception_keeper_value_93;
    PyTracebackObject *exception_keeper_tb_93;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_93;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__33_Comparator_2284 = NULL;
    struct Nuitka_FrameObject *frame_1fd8f5d3c9f7675388c71848c1c3421a_32;
    NUITKA_MAY_BE_UNUSED char const *type_description_32 = NULL;
    static struct Nuitka_FrameObject *cache_frame_1fd8f5d3c9f7675388c71848c1c3421a_32 = NULL;
    PyObject *exception_keeper_type_94;
    PyObject *exception_keeper_value_94;
    PyTracebackObject *exception_keeper_tb_94;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_94;
    PyObject *exception_keeper_type_95;
    PyObject *exception_keeper_value_95;
    PyTracebackObject *exception_keeper_tb_95;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_95;
    PyObject *exception_keeper_type_96;
    PyObject *exception_keeper_value_96;
    PyTracebackObject *exception_keeper_tb_96;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_96;
    static struct Nuitka_FrameObject *cache_frame_d4a26a0482d921abe3cdbc3568d8027f_30 = NULL;
    PyObject *exception_keeper_type_97;
    PyObject *exception_keeper_value_97;
    PyTracebackObject *exception_keeper_tb_97;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_97;
    PyObject *exception_keeper_type_98;
    PyObject *exception_keeper_value_98;
    PyTracebackObject *exception_keeper_tb_98;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_98;
    PyObject *exception_keeper_type_99;
    PyObject *exception_keeper_value_99;
    PyTracebackObject *exception_keeper_tb_99;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_99;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__34_ARRAY_2459 = NULL;
    struct Nuitka_FrameObject *frame_369d7ea6640ba71a1b5df134a8ede170_33;
    NUITKA_MAY_BE_UNUSED char const *type_description_33 = NULL;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__35_Comparator_2559 = NULL;
    struct Nuitka_FrameObject *frame_86a9c51331c0e47ed38f7ce3dcb5063a_34;
    NUITKA_MAY_BE_UNUSED char const *type_description_34 = NULL;
    static struct Nuitka_FrameObject *cache_frame_86a9c51331c0e47ed38f7ce3dcb5063a_34 = NULL;
    PyObject *exception_keeper_type_100;
    PyObject *exception_keeper_value_100;
    PyTracebackObject *exception_keeper_tb_100;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_100;
    PyObject *exception_keeper_type_101;
    PyObject *exception_keeper_value_101;
    PyTracebackObject *exception_keeper_tb_101;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_101;
    PyObject *exception_keeper_type_102;
    PyObject *exception_keeper_value_102;
    PyTracebackObject *exception_keeper_tb_102;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_102;
    static struct Nuitka_FrameObject *cache_frame_369d7ea6640ba71a1b5df134a8ede170_33 = NULL;
    PyObject *exception_keeper_type_103;
    PyObject *exception_keeper_value_103;
    PyTracebackObject *exception_keeper_tb_103;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_103;
    PyObject *exception_keeper_type_104;
    PyObject *exception_keeper_value_104;
    PyTracebackObject *exception_keeper_tb_104;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_104;
    PyObject *exception_keeper_type_105;
    PyObject *exception_keeper_value_105;
    PyTracebackObject *exception_keeper_tb_105;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_105;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__36_REAL_2761 = NULL;
    struct Nuitka_FrameObject *frame_a7c1a7f513bbab818d3e3feeeb031df3_35;
    NUITKA_MAY_BE_UNUSED char const *type_description_35 = NULL;
    static struct Nuitka_FrameObject *cache_frame_a7c1a7f513bbab818d3e3feeeb031df3_35 = NULL;
    PyObject *exception_keeper_type_106;
    PyObject *exception_keeper_value_106;
    PyTracebackObject *exception_keeper_tb_106;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_106;
    PyObject *exception_keeper_type_107;
    PyObject *exception_keeper_value_107;
    PyTracebackObject *exception_keeper_tb_107;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_107;
    PyObject *exception_keeper_type_108;
    PyObject *exception_keeper_value_108;
    PyTracebackObject *exception_keeper_tb_108;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_108;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__37_FLOAT_2768 = NULL;
    struct Nuitka_FrameObject *frame_6402f99f19d16661ce6b6f1f95cc77c4_36;
    NUITKA_MAY_BE_UNUSED char const *type_description_36 = NULL;
    static struct Nuitka_FrameObject *cache_frame_6402f99f19d16661ce6b6f1f95cc77c4_36 = NULL;
    PyObject *exception_keeper_type_109;
    PyObject *exception_keeper_value_109;
    PyTracebackObject *exception_keeper_tb_109;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_109;
    PyObject *exception_keeper_type_110;
    PyObject *exception_keeper_value_110;
    PyTracebackObject *exception_keeper_tb_110;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_110;
    PyObject *exception_keeper_type_111;
    PyObject *exception_keeper_value_111;
    PyTracebackObject *exception_keeper_tb_111;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_111;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__38_NUMERIC_2775 = NULL;
    struct Nuitka_FrameObject *frame_66ffa44e35a8a176d73667e21cf9bebf_37;
    NUITKA_MAY_BE_UNUSED char const *type_description_37 = NULL;
    static struct Nuitka_FrameObject *cache_frame_66ffa44e35a8a176d73667e21cf9bebf_37 = NULL;
    PyObject *exception_keeper_type_112;
    PyObject *exception_keeper_value_112;
    PyTracebackObject *exception_keeper_tb_112;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_112;
    PyObject *exception_keeper_type_113;
    PyObject *exception_keeper_value_113;
    PyTracebackObject *exception_keeper_tb_113;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_113;
    PyObject *exception_keeper_type_114;
    PyObject *exception_keeper_value_114;
    PyTracebackObject *exception_keeper_tb_114;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_114;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__39_DECIMAL_2782 = NULL;
    struct Nuitka_FrameObject *frame_5858186fe4da6c516b126118950eae79_38;
    NUITKA_MAY_BE_UNUSED char const *type_description_38 = NULL;
    static struct Nuitka_FrameObject *cache_frame_5858186fe4da6c516b126118950eae79_38 = NULL;
    PyObject *exception_keeper_type_115;
    PyObject *exception_keeper_value_115;
    PyTracebackObject *exception_keeper_tb_115;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_115;
    PyObject *exception_keeper_type_116;
    PyObject *exception_keeper_value_116;
    PyTracebackObject *exception_keeper_tb_116;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_116;
    PyObject *exception_keeper_type_117;
    PyObject *exception_keeper_value_117;
    PyTracebackObject *exception_keeper_tb_117;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_117;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__40_INTEGER_2789 = NULL;
    struct Nuitka_FrameObject *frame_6af9a04e749f91af9f73eb6ffafb083e_39;
    NUITKA_MAY_BE_UNUSED char const *type_description_39 = NULL;
    static struct Nuitka_FrameObject *cache_frame_6af9a04e749f91af9f73eb6ffafb083e_39 = NULL;
    PyObject *exception_keeper_type_118;
    PyObject *exception_keeper_value_118;
    PyTracebackObject *exception_keeper_tb_118;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_118;
    PyObject *exception_keeper_type_119;
    PyObject *exception_keeper_value_119;
    PyTracebackObject *exception_keeper_tb_119;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_119;
    PyObject *exception_keeper_type_120;
    PyObject *exception_keeper_value_120;
    PyTracebackObject *exception_keeper_tb_120;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_120;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__41_SMALLINT_2799 = NULL;
    struct Nuitka_FrameObject *frame_079584d29ba204c8c42e5632d36367e0_40;
    NUITKA_MAY_BE_UNUSED char const *type_description_40 = NULL;
    static struct Nuitka_FrameObject *cache_frame_079584d29ba204c8c42e5632d36367e0_40 = NULL;
    PyObject *exception_keeper_type_121;
    PyObject *exception_keeper_value_121;
    PyTracebackObject *exception_keeper_tb_121;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_121;
    PyObject *exception_keeper_type_122;
    PyObject *exception_keeper_value_122;
    PyTracebackObject *exception_keeper_tb_122;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_122;
    PyObject *exception_keeper_type_123;
    PyObject *exception_keeper_value_123;
    PyTracebackObject *exception_keeper_tb_123;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_123;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__42_BIGINT_2806 = NULL;
    struct Nuitka_FrameObject *frame_d8df478d7eb23f028e26024736594ee7_41;
    NUITKA_MAY_BE_UNUSED char const *type_description_41 = NULL;
    static struct Nuitka_FrameObject *cache_frame_d8df478d7eb23f028e26024736594ee7_41 = NULL;
    PyObject *exception_keeper_type_124;
    PyObject *exception_keeper_value_124;
    PyTracebackObject *exception_keeper_tb_124;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_124;
    PyObject *exception_keeper_type_125;
    PyObject *exception_keeper_value_125;
    PyTracebackObject *exception_keeper_tb_125;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_125;
    PyObject *exception_keeper_type_126;
    PyObject *exception_keeper_value_126;
    PyTracebackObject *exception_keeper_tb_126;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_126;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__43_TIMESTAMP_2813 = NULL;
    struct Nuitka_FrameObject *frame_fb92ac5fa6e748da5337a2580ce7460f_42;
    NUITKA_MAY_BE_UNUSED char const *type_description_42 = NULL;
    static struct Nuitka_FrameObject *cache_frame_fb92ac5fa6e748da5337a2580ce7460f_42 = NULL;
    PyObject *exception_keeper_type_127;
    PyObject *exception_keeper_value_127;
    PyTracebackObject *exception_keeper_tb_127;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_127;
    PyObject *exception_keeper_type_128;
    PyObject *exception_keeper_value_128;
    PyTracebackObject *exception_keeper_tb_128;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_128;
    PyObject *exception_keeper_type_129;
    PyObject *exception_keeper_value_129;
    PyTracebackObject *exception_keeper_tb_129;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_129;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__44_DATETIME_2843 = NULL;
    struct Nuitka_FrameObject *frame_129b20ad960823b391a75d7794993936_43;
    NUITKA_MAY_BE_UNUSED char const *type_description_43 = NULL;
    static struct Nuitka_FrameObject *cache_frame_129b20ad960823b391a75d7794993936_43 = NULL;
    PyObject *exception_keeper_type_130;
    PyObject *exception_keeper_value_130;
    PyTracebackObject *exception_keeper_tb_130;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_130;
    PyObject *exception_keeper_type_131;
    PyObject *exception_keeper_value_131;
    PyTracebackObject *exception_keeper_tb_131;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_131;
    PyObject *exception_keeper_type_132;
    PyObject *exception_keeper_value_132;
    PyTracebackObject *exception_keeper_tb_132;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_132;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__45_DATE_2850 = NULL;
    struct Nuitka_FrameObject *frame_0c57d08b3724afe532570ab704c94d5a_44;
    NUITKA_MAY_BE_UNUSED char const *type_description_44 = NULL;
    static struct Nuitka_FrameObject *cache_frame_0c57d08b3724afe532570ab704c94d5a_44 = NULL;
    PyObject *exception_keeper_type_133;
    PyObject *exception_keeper_value_133;
    PyTracebackObject *exception_keeper_tb_133;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_133;
    PyObject *exception_keeper_type_134;
    PyObject *exception_keeper_value_134;
    PyTracebackObject *exception_keeper_tb_134;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_134;
    PyObject *exception_keeper_type_135;
    PyObject *exception_keeper_value_135;
    PyTracebackObject *exception_keeper_tb_135;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_135;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__46_TIME_2857 = NULL;
    struct Nuitka_FrameObject *frame_e299163180ce2dbf407f9be39be4d965_45;
    NUITKA_MAY_BE_UNUSED char const *type_description_45 = NULL;
    static struct Nuitka_FrameObject *cache_frame_e299163180ce2dbf407f9be39be4d965_45 = NULL;
    PyObject *exception_keeper_type_136;
    PyObject *exception_keeper_value_136;
    PyTracebackObject *exception_keeper_tb_136;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_136;
    PyObject *exception_keeper_type_137;
    PyObject *exception_keeper_value_137;
    PyTracebackObject *exception_keeper_tb_137;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_137;
    PyObject *exception_keeper_type_138;
    PyObject *exception_keeper_value_138;
    PyTracebackObject *exception_keeper_tb_138;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_138;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__47_TEXT_2864 = NULL;
    struct Nuitka_FrameObject *frame_7b206f3a6494ba4343eb418408a70f2c_46;
    NUITKA_MAY_BE_UNUSED char const *type_description_46 = NULL;
    static struct Nuitka_FrameObject *cache_frame_7b206f3a6494ba4343eb418408a70f2c_46 = NULL;
    PyObject *exception_keeper_type_139;
    PyObject *exception_keeper_value_139;
    PyTracebackObject *exception_keeper_tb_139;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_139;
    PyObject *exception_keeper_type_140;
    PyObject *exception_keeper_value_140;
    PyTracebackObject *exception_keeper_tb_140;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_140;
    PyObject *exception_keeper_type_141;
    PyObject *exception_keeper_value_141;
    PyTracebackObject *exception_keeper_tb_141;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_141;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__48_CLOB_2871 = NULL;
    struct Nuitka_FrameObject *frame_8f75080c4c2caf8a9ab8abd490624ae2_47;
    NUITKA_MAY_BE_UNUSED char const *type_description_47 = NULL;
    static struct Nuitka_FrameObject *cache_frame_8f75080c4c2caf8a9ab8abd490624ae2_47 = NULL;
    PyObject *exception_keeper_type_142;
    PyObject *exception_keeper_value_142;
    PyTracebackObject *exception_keeper_tb_142;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_142;
    PyObject *exception_keeper_type_143;
    PyObject *exception_keeper_value_143;
    PyTracebackObject *exception_keeper_tb_143;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_143;
    PyObject *exception_keeper_type_144;
    PyObject *exception_keeper_value_144;
    PyTracebackObject *exception_keeper_tb_144;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_144;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__49_VARCHAR_2881 = NULL;
    struct Nuitka_FrameObject *frame_835290d5fa19bfe44dae7be164462f32_48;
    NUITKA_MAY_BE_UNUSED char const *type_description_48 = NULL;
    static struct Nuitka_FrameObject *cache_frame_835290d5fa19bfe44dae7be164462f32_48 = NULL;
    PyObject *exception_keeper_type_145;
    PyObject *exception_keeper_value_145;
    PyTracebackObject *exception_keeper_tb_145;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_145;
    PyObject *exception_keeper_type_146;
    PyObject *exception_keeper_value_146;
    PyTracebackObject *exception_keeper_tb_146;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_146;
    PyObject *exception_keeper_type_147;
    PyObject *exception_keeper_value_147;
    PyTracebackObject *exception_keeper_tb_147;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_147;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__50_NVARCHAR_2888 = NULL;
    struct Nuitka_FrameObject *frame_8a4e565f357d6055f4c0b5024adbf69f_49;
    NUITKA_MAY_BE_UNUSED char const *type_description_49 = NULL;
    static struct Nuitka_FrameObject *cache_frame_8a4e565f357d6055f4c0b5024adbf69f_49 = NULL;
    PyObject *exception_keeper_type_148;
    PyObject *exception_keeper_value_148;
    PyTracebackObject *exception_keeper_tb_148;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_148;
    PyObject *exception_keeper_type_149;
    PyObject *exception_keeper_value_149;
    PyTracebackObject *exception_keeper_tb_149;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_149;
    PyObject *exception_keeper_type_150;
    PyObject *exception_keeper_value_150;
    PyTracebackObject *exception_keeper_tb_150;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_150;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__51_CHAR_2895 = NULL;
    struct Nuitka_FrameObject *frame_d668942271df1e498746e83d8bf29e1b_50;
    NUITKA_MAY_BE_UNUSED char const *type_description_50 = NULL;
    static struct Nuitka_FrameObject *cache_frame_d668942271df1e498746e83d8bf29e1b_50 = NULL;
    PyObject *exception_keeper_type_151;
    PyObject *exception_keeper_value_151;
    PyTracebackObject *exception_keeper_tb_151;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_151;
    PyObject *exception_keeper_type_152;
    PyObject *exception_keeper_value_152;
    PyTracebackObject *exception_keeper_tb_152;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_152;
    PyObject *exception_keeper_type_153;
    PyObject *exception_keeper_value_153;
    PyTracebackObject *exception_keeper_tb_153;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_153;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__52_NCHAR_2902 = NULL;
    struct Nuitka_FrameObject *frame_fefa8d4f1568f2058ed31d49ec673b09_51;
    NUITKA_MAY_BE_UNUSED char const *type_description_51 = NULL;
    static struct Nuitka_FrameObject *cache_frame_fefa8d4f1568f2058ed31d49ec673b09_51 = NULL;
    PyObject *exception_keeper_type_154;
    PyObject *exception_keeper_value_154;
    PyTracebackObject *exception_keeper_tb_154;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_154;
    PyObject *exception_keeper_type_155;
    PyObject *exception_keeper_value_155;
    PyTracebackObject *exception_keeper_tb_155;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_155;
    PyObject *exception_keeper_type_156;
    PyObject *exception_keeper_value_156;
    PyTracebackObject *exception_keeper_tb_156;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_156;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__53_BLOB_2909 = NULL;
    struct Nuitka_FrameObject *frame_5d289192711717ac19f9183b5f5570bf_52;
    NUITKA_MAY_BE_UNUSED char const *type_description_52 = NULL;
    static struct Nuitka_FrameObject *cache_frame_5d289192711717ac19f9183b5f5570bf_52 = NULL;
    PyObject *exception_keeper_type_157;
    PyObject *exception_keeper_value_157;
    PyTracebackObject *exception_keeper_tb_157;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_157;
    PyObject *exception_keeper_type_158;
    PyObject *exception_keeper_value_158;
    PyTracebackObject *exception_keeper_tb_158;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_158;
    PyObject *exception_keeper_type_159;
    PyObject *exception_keeper_value_159;
    PyTracebackObject *exception_keeper_tb_159;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_159;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__54_BINARY_2916 = NULL;
    struct Nuitka_FrameObject *frame_bbb3be16f4c3f03b451ed3e5919b1208_53;
    NUITKA_MAY_BE_UNUSED char const *type_description_53 = NULL;
    static struct Nuitka_FrameObject *cache_frame_bbb3be16f4c3f03b451ed3e5919b1208_53 = NULL;
    PyObject *exception_keeper_type_160;
    PyObject *exception_keeper_value_160;
    PyTracebackObject *exception_keeper_tb_160;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_160;
    PyObject *exception_keeper_type_161;
    PyObject *exception_keeper_value_161;
    PyTracebackObject *exception_keeper_tb_161;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_161;
    PyObject *exception_keeper_type_162;
    PyObject *exception_keeper_value_162;
    PyTracebackObject *exception_keeper_tb_162;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_162;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__55_VARBINARY_2923 = NULL;
    struct Nuitka_FrameObject *frame_9ed1c41dd3bbf10a08851a8fa95ad26d_54;
    NUITKA_MAY_BE_UNUSED char const *type_description_54 = NULL;
    static struct Nuitka_FrameObject *cache_frame_9ed1c41dd3bbf10a08851a8fa95ad26d_54 = NULL;
    PyObject *exception_keeper_type_163;
    PyObject *exception_keeper_value_163;
    PyTracebackObject *exception_keeper_tb_163;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_163;
    PyObject *exception_keeper_type_164;
    PyObject *exception_keeper_value_164;
    PyTracebackObject *exception_keeper_tb_164;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_164;
    PyObject *exception_keeper_type_165;
    PyObject *exception_keeper_value_165;
    PyTracebackObject *exception_keeper_tb_165;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_165;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__56_BOOLEAN_2930 = NULL;
    struct Nuitka_FrameObject *frame_5e93e047ae7af10f6f94f90bef907808_55;
    NUITKA_MAY_BE_UNUSED char const *type_description_55 = NULL;
    static struct Nuitka_FrameObject *cache_frame_5e93e047ae7af10f6f94f90bef907808_55 = NULL;
    PyObject *exception_keeper_type_166;
    PyObject *exception_keeper_value_166;
    PyTracebackObject *exception_keeper_tb_166;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_166;
    PyObject *exception_keeper_type_167;
    PyObject *exception_keeper_value_167;
    PyTracebackObject *exception_keeper_tb_167;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_167;
    PyObject *exception_keeper_type_168;
    PyObject *exception_keeper_value_168;
    PyTracebackObject *exception_keeper_tb_168;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_168;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__57_NullType_2937 = NULL;
    struct Nuitka_FrameObject *frame_20e5239b46284e37f44cef9cc19db9db_56;
    NUITKA_MAY_BE_UNUSED char const *type_description_56 = NULL;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__58_Comparator_2976 = NULL;
    struct Nuitka_FrameObject *frame_a913f0a54f81b0786bbcb5c29ee1e419_57;
    NUITKA_MAY_BE_UNUSED char const *type_description_57 = NULL;
    static struct Nuitka_FrameObject *cache_frame_a913f0a54f81b0786bbcb5c29ee1e419_57 = NULL;
    PyObject *exception_keeper_type_169;
    PyObject *exception_keeper_value_169;
    PyTracebackObject *exception_keeper_tb_169;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_169;
    PyObject *exception_keeper_type_170;
    PyObject *exception_keeper_value_170;
    PyTracebackObject *exception_keeper_tb_170;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_170;
    PyObject *exception_keeper_type_171;
    PyObject *exception_keeper_value_171;
    PyTracebackObject *exception_keeper_tb_171;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_171;
    static struct Nuitka_FrameObject *cache_frame_20e5239b46284e37f44cef9cc19db9db_56 = NULL;
    PyObject *exception_keeper_type_172;
    PyObject *exception_keeper_value_172;
    PyTracebackObject *exception_keeper_tb_172;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_172;
    PyObject *exception_keeper_type_173;
    PyObject *exception_keeper_value_173;
    PyTracebackObject *exception_keeper_tb_173;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_173;
    PyObject *exception_keeper_type_174;
    PyObject *exception_keeper_value_174;
    PyTracebackObject *exception_keeper_tb_174;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_174;
    PyObject *locals_sqlalchemy$sql$sqltypes$$$class__59_MatchType_2988 = NULL;
    PyObject *exception_keeper_type_175;
    PyObject *exception_keeper_value_175;
    PyTracebackObject *exception_keeper_tb_175;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_175;
    PyObject *exception_keeper_type_176;
    PyObject *exception_keeper_value_176;
    PyTracebackObject *exception_keeper_tb_176;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_176;
    PyObject *exception_keeper_type_177;
    PyObject *exception_keeper_value_177;
    PyTracebackObject *exception_keeper_tb_177;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_177;

    // Module code.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = mod_consts[369];
        UPDATE_STRING_DICT0(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[370], tmp_assign_source_1);
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = module_filename_obj;
        UPDATE_STRING_DICT0(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[371], tmp_assign_source_2);
    }
    // Frame without reuse.
    frame_710839dc2352d5736e91d4b9f559d9ef = MAKE_MODULE_FRAME(codeobj_710839dc2352d5736e91d4b9f559d9ef, module_sqlalchemy$sql$sqltypes);

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStack(frame_710839dc2352d5736e91d4b9f559d9ef);
    assert(Py_REFCNT(frame_710839dc2352d5736e91d4b9f559d9ef) == 2);

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_assattr_value_1 = module_filename_obj;
        tmp_assattr_target_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[372]);

        if (unlikely(tmp_assattr_target_1 == NULL)) {
            tmp_assattr_target_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[372]);
        }

        assert(!(tmp_assattr_target_1 == NULL));
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[373], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_value_2 = Py_True;
        tmp_assattr_target_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[372]);

        if (unlikely(tmp_assattr_target_2 == NULL)) {
            tmp_assattr_target_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[372]);
        }

        assert(!(tmp_assattr_target_2 == NULL));
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[374], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_3;
        tmp_assign_source_3 = Py_None;
        UPDATE_STRING_DICT0(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[375], tmp_assign_source_3);
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_name_value_1;
        PyObject *tmp_globals_arg_value_1;
        PyObject *tmp_locals_arg_value_1;
        PyObject *tmp_fromlist_value_1;
        PyObject *tmp_level_value_1;
        tmp_name_value_1 = mod_consts[40];
        tmp_globals_arg_value_1 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_1 = Py_None;
        tmp_fromlist_value_1 = Py_None;
        tmp_level_value_1 = mod_consts[52];
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 12;
        tmp_assign_source_4 = IMPORT_MODULE5(tmp_name_value_1, tmp_globals_arg_value_1, tmp_locals_arg_value_1, tmp_fromlist_value_1, tmp_level_value_1);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 12;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[40], tmp_assign_source_4);
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_name_value_2;
        PyObject *tmp_globals_arg_value_2;
        PyObject *tmp_locals_arg_value_2;
        PyObject *tmp_fromlist_value_2;
        PyObject *tmp_level_value_2;
        tmp_name_value_2 = mod_consts[102];
        tmp_globals_arg_value_2 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_2 = Py_None;
        tmp_fromlist_value_2 = Py_None;
        tmp_level_value_2 = mod_consts[52];
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 13;
        tmp_assign_source_5 = IMPORT_MODULE5(tmp_name_value_2, tmp_globals_arg_value_2, tmp_locals_arg_value_2, tmp_fromlist_value_2, tmp_level_value_2);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 13;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[101], tmp_assign_source_5);
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_name_value_3;
        PyObject *tmp_globals_arg_value_3;
        PyObject *tmp_locals_arg_value_3;
        PyObject *tmp_fromlist_value_3;
        PyObject *tmp_level_value_3;
        tmp_name_value_3 = mod_consts[87];
        tmp_globals_arg_value_3 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_3 = Py_None;
        tmp_fromlist_value_3 = Py_None;
        tmp_level_value_3 = mod_consts[52];
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 14;
        tmp_assign_source_6 = IMPORT_MODULE5(tmp_name_value_3, tmp_globals_arg_value_3, tmp_locals_arg_value_3, tmp_fromlist_value_3, tmp_level_value_3);
        if (tmp_assign_source_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 14;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[87], tmp_assign_source_6);
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_name_value_4;
        PyObject *tmp_globals_arg_value_4;
        PyObject *tmp_locals_arg_value_4;
        PyObject *tmp_fromlist_value_4;
        PyObject *tmp_level_value_4;
        tmp_name_value_4 = mod_consts[318];
        tmp_globals_arg_value_4 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_4 = Py_None;
        tmp_fromlist_value_4 = Py_None;
        tmp_level_value_4 = mod_consts[52];
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 15;
        tmp_assign_source_7 = IMPORT_MODULE5(tmp_name_value_4, tmp_globals_arg_value_4, tmp_locals_arg_value_4, tmp_fromlist_value_4, tmp_level_value_4);
        if (tmp_assign_source_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 15;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[318], tmp_assign_source_7);
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_import_name_from_1;
        PyObject *tmp_name_value_5;
        PyObject *tmp_globals_arg_value_5;
        PyObject *tmp_locals_arg_value_5;
        PyObject *tmp_fromlist_value_5;
        PyObject *tmp_level_value_5;
        tmp_name_value_5 = mod_consts[376];
        tmp_globals_arg_value_5 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_5 = Py_None;
        tmp_fromlist_value_5 = mod_consts[377];
        tmp_level_value_5 = mod_consts[204];
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 17;
        tmp_import_name_from_1 = IMPORT_MODULE5(tmp_name_value_5, tmp_globals_arg_value_5, tmp_locals_arg_value_5, tmp_fromlist_value_5, tmp_level_value_5);
        if (tmp_import_name_from_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 17;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_1)) {
            tmp_assign_source_8 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_1,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[308],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_8 = IMPORT_NAME(tmp_import_name_from_1, mod_consts[308]);
        }

        Py_DECREF(tmp_import_name_from_1);
        if (tmp_assign_source_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 17;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[308], tmp_assign_source_8);
    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_import_name_from_2;
        PyObject *tmp_name_value_6;
        PyObject *tmp_globals_arg_value_6;
        PyObject *tmp_locals_arg_value_6;
        PyObject *tmp_fromlist_value_6;
        PyObject *tmp_level_value_6;
        tmp_name_value_6 = mod_consts[376];
        tmp_globals_arg_value_6 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_6 = Py_None;
        tmp_fromlist_value_6 = mod_consts[378];
        tmp_level_value_6 = mod_consts[204];
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 18;
        tmp_import_name_from_2 = IMPORT_MODULE5(tmp_name_value_6, tmp_globals_arg_value_6, tmp_locals_arg_value_6, tmp_fromlist_value_6, tmp_level_value_6);
        if (tmp_import_name_from_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 18;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_2)) {
            tmp_assign_source_9 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_2,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[6],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_9 = IMPORT_NAME(tmp_import_name_from_2, mod_consts[6]);
        }

        Py_DECREF(tmp_import_name_from_2);
        if (tmp_assign_source_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 18;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[6], tmp_assign_source_9);
    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_import_name_from_3;
        PyObject *tmp_name_value_7;
        PyObject *tmp_globals_arg_value_7;
        PyObject *tmp_locals_arg_value_7;
        PyObject *tmp_fromlist_value_7;
        PyObject *tmp_level_value_7;
        tmp_name_value_7 = mod_consts[376];
        tmp_globals_arg_value_7 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_7 = Py_None;
        tmp_fromlist_value_7 = mod_consts[379];
        tmp_level_value_7 = mod_consts[204];
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 19;
        tmp_import_name_from_3 = IMPORT_MODULE5(tmp_name_value_7, tmp_globals_arg_value_7, tmp_locals_arg_value_7, tmp_fromlist_value_7, tmp_level_value_7);
        if (tmp_import_name_from_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_3)) {
            tmp_assign_source_10 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_3,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[334],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_10 = IMPORT_NAME(tmp_import_name_from_3, mod_consts[334]);
        }

        Py_DECREF(tmp_import_name_from_3);
        if (tmp_assign_source_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[334], tmp_assign_source_10);
    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_import_name_from_4;
        PyObject *tmp_name_value_8;
        PyObject *tmp_globals_arg_value_8;
        PyObject *tmp_locals_arg_value_8;
        PyObject *tmp_fromlist_value_8;
        PyObject *tmp_level_value_8;
        tmp_name_value_8 = mod_consts[380];
        tmp_globals_arg_value_8 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_8 = Py_None;
        tmp_fromlist_value_8 = mod_consts[381];
        tmp_level_value_8 = mod_consts[204];
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 20;
        tmp_import_name_from_4 = IMPORT_MODULE5(tmp_name_value_8, tmp_globals_arg_value_8, tmp_locals_arg_value_8, tmp_fromlist_value_8, tmp_level_value_8);
        if (tmp_import_name_from_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 20;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_4)) {
            tmp_assign_source_11 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_4,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[155],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_11 = IMPORT_NAME(tmp_import_name_from_4, mod_consts[155]);
        }

        Py_DECREF(tmp_import_name_from_4);
        if (tmp_assign_source_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 20;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[155], tmp_assign_source_11);
    }
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_import_name_from_5;
        PyObject *tmp_name_value_9;
        PyObject *tmp_globals_arg_value_9;
        PyObject *tmp_locals_arg_value_9;
        PyObject *tmp_fromlist_value_9;
        PyObject *tmp_level_value_9;
        tmp_name_value_9 = mod_consts[380];
        tmp_globals_arg_value_9 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_9 = Py_None;
        tmp_fromlist_value_9 = mod_consts[382];
        tmp_level_value_9 = mod_consts[204];
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 21;
        tmp_import_name_from_5 = IMPORT_MODULE5(tmp_name_value_9, tmp_globals_arg_value_9, tmp_locals_arg_value_9, tmp_fromlist_value_9, tmp_level_value_9);
        if (tmp_import_name_from_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 21;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_5)) {
            tmp_assign_source_12 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_5,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[176],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_12 = IMPORT_NAME(tmp_import_name_from_5, mod_consts[176]);
        }

        Py_DECREF(tmp_import_name_from_5);
        if (tmp_assign_source_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 21;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[176], tmp_assign_source_12);
    }
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_import_name_from_6;
        PyObject *tmp_name_value_10;
        PyObject *tmp_globals_arg_value_10;
        PyObject *tmp_locals_arg_value_10;
        PyObject *tmp_fromlist_value_10;
        PyObject *tmp_level_value_10;
        tmp_name_value_10 = mod_consts[380];
        tmp_globals_arg_value_10 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_10 = Py_None;
        tmp_fromlist_value_10 = mod_consts[383];
        tmp_level_value_10 = mod_consts[204];
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 22;
        tmp_import_name_from_6 = IMPORT_MODULE5(tmp_name_value_10, tmp_globals_arg_value_10, tmp_locals_arg_value_10, tmp_fromlist_value_10, tmp_level_value_10);
        if (tmp_import_name_from_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 22;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_6)) {
            tmp_assign_source_13 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_6,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[353],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_13 = IMPORT_NAME(tmp_import_name_from_6, mod_consts[353]);
        }

        Py_DECREF(tmp_import_name_from_6);
        if (tmp_assign_source_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 22;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[353], tmp_assign_source_13);
    }
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_import_name_from_7;
        PyObject *tmp_name_value_11;
        PyObject *tmp_globals_arg_value_11;
        PyObject *tmp_locals_arg_value_11;
        PyObject *tmp_fromlist_value_11;
        PyObject *tmp_level_value_11;
        tmp_name_value_11 = mod_consts[308];
        tmp_globals_arg_value_11 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_11 = Py_None;
        tmp_fromlist_value_11 = mod_consts[384];
        tmp_level_value_11 = mod_consts[204];
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 23;
        tmp_import_name_from_7 = IMPORT_MODULE5(tmp_name_value_11, tmp_globals_arg_value_11, tmp_locals_arg_value_11, tmp_fromlist_value_11, tmp_level_value_11);
        if (tmp_import_name_from_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 23;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_7)) {
            tmp_assign_source_14 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_7,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[225],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_14 = IMPORT_NAME(tmp_import_name_from_7, mod_consts[225]);
        }

        Py_DECREF(tmp_import_name_from_7);
        if (tmp_assign_source_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 23;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[225], tmp_assign_source_14);
    }
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_import_name_from_8;
        PyObject *tmp_name_value_12;
        PyObject *tmp_globals_arg_value_12;
        PyObject *tmp_locals_arg_value_12;
        PyObject *tmp_fromlist_value_12;
        PyObject *tmp_level_value_12;
        tmp_name_value_12 = mod_consts[308];
        tmp_globals_arg_value_12 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_12 = Py_None;
        tmp_fromlist_value_12 = mod_consts[385];
        tmp_level_value_12 = mod_consts[204];
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 24;
        tmp_import_name_from_8 = IMPORT_MODULE5(tmp_name_value_12, tmp_globals_arg_value_12, tmp_locals_arg_value_12, tmp_fromlist_value_12, tmp_level_value_12);
        if (tmp_import_name_from_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 24;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_8)) {
            tmp_assign_source_15 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_8,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[332],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_15 = IMPORT_NAME(tmp_import_name_from_8, mod_consts[332]);
        }

        Py_DECREF(tmp_import_name_from_8);
        if (tmp_assign_source_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 24;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[332], tmp_assign_source_15);
    }
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_import_name_from_9;
        PyObject *tmp_name_value_13;
        PyObject *tmp_globals_arg_value_13;
        PyObject *tmp_locals_arg_value_13;
        PyObject *tmp_fromlist_value_13;
        PyObject *tmp_level_value_13;
        tmp_name_value_13 = mod_consts[308];
        tmp_globals_arg_value_13 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_13 = Py_None;
        tmp_fromlist_value_13 = mod_consts[386];
        tmp_level_value_13 = mod_consts[204];
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 25;
        tmp_import_name_from_9 = IMPORT_MODULE5(tmp_name_value_13, tmp_globals_arg_value_13, tmp_locals_arg_value_13, tmp_fromlist_value_13, tmp_level_value_13);
        if (tmp_import_name_from_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 25;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_9)) {
            tmp_assign_source_16 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_9,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[126],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_16 = IMPORT_NAME(tmp_import_name_from_9, mod_consts[126]);
        }

        Py_DECREF(tmp_import_name_from_9);
        if (tmp_assign_source_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 25;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[126], tmp_assign_source_16);
    }
    {
        PyObject *tmp_assign_source_17;
        PyObject *tmp_import_name_from_10;
        PyObject *tmp_name_value_14;
        PyObject *tmp_globals_arg_value_14;
        PyObject *tmp_locals_arg_value_14;
        PyObject *tmp_fromlist_value_14;
        PyObject *tmp_level_value_14;
        tmp_name_value_14 = mod_consts[308];
        tmp_globals_arg_value_14 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_14 = Py_None;
        tmp_fromlist_value_14 = mod_consts[387];
        tmp_level_value_14 = mod_consts[204];
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 26;
        tmp_import_name_from_10 = IMPORT_MODULE5(tmp_name_value_14, tmp_globals_arg_value_14, tmp_locals_arg_value_14, tmp_fromlist_value_14, tmp_level_value_14);
        if (tmp_import_name_from_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 26;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_10)) {
            tmp_assign_source_17 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_10,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[331],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_17 = IMPORT_NAME(tmp_import_name_from_10, mod_consts[331]);
        }

        Py_DECREF(tmp_import_name_from_10);
        if (tmp_assign_source_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 26;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[331], tmp_assign_source_17);
    }
    {
        PyObject *tmp_assign_source_18;
        PyObject *tmp_import_name_from_11;
        PyObject *tmp_name_value_15;
        PyObject *tmp_globals_arg_value_15;
        PyObject *tmp_locals_arg_value_15;
        PyObject *tmp_fromlist_value_15;
        PyObject *tmp_level_value_15;
        tmp_name_value_15 = mod_consts[308];
        tmp_globals_arg_value_15 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_15 = Py_None;
        tmp_fromlist_value_15 = mod_consts[388];
        tmp_level_value_15 = mod_consts[204];
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 27;
        tmp_import_name_from_11 = IMPORT_MODULE5(tmp_name_value_15, tmp_globals_arg_value_15, tmp_locals_arg_value_15, tmp_fromlist_value_15, tmp_level_value_15);
        if (tmp_import_name_from_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 27;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_11)) {
            tmp_assign_source_18 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_11,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[389],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_18 = IMPORT_NAME(tmp_import_name_from_11, mod_consts[389]);
        }

        Py_DECREF(tmp_import_name_from_11);
        if (tmp_assign_source_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 27;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[223], tmp_assign_source_18);
    }
    {
        PyObject *tmp_assign_source_19;
        PyObject *tmp_import_name_from_12;
        PyObject *tmp_name_value_16;
        PyObject *tmp_globals_arg_value_16;
        PyObject *tmp_locals_arg_value_16;
        PyObject *tmp_fromlist_value_16;
        PyObject *tmp_level_value_16;
        tmp_name_value_16 = mod_consts[334];
        tmp_globals_arg_value_16 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_16 = Py_None;
        tmp_fromlist_value_16 = mod_consts[390];
        tmp_level_value_16 = mod_consts[204];
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 28;
        tmp_import_name_from_12 = IMPORT_MODULE5(tmp_name_value_16, tmp_globals_arg_value_16, tmp_locals_arg_value_16, tmp_fromlist_value_16, tmp_level_value_16);
        if (tmp_import_name_from_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 28;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_12)) {
            tmp_assign_source_19 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_12,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[391],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_19 = IMPORT_NAME(tmp_import_name_from_12, mod_consts[391]);
        }

        Py_DECREF(tmp_import_name_from_12);
        if (tmp_assign_source_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 28;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[391], tmp_assign_source_19);
    }
    {
        PyObject *tmp_assign_source_20;
        PyObject *tmp_import_name_from_13;
        PyObject *tmp_name_value_17;
        PyObject *tmp_globals_arg_value_17;
        PyObject *tmp_locals_arg_value_17;
        PyObject *tmp_fromlist_value_17;
        PyObject *tmp_level_value_17;
        tmp_name_value_17 = mod_consts[334];
        tmp_globals_arg_value_17 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_17 = Py_None;
        tmp_fromlist_value_17 = mod_consts[392];
        tmp_level_value_17 = mod_consts[204];
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 29;
        tmp_import_name_from_13 = IMPORT_MODULE5(tmp_name_value_17, tmp_globals_arg_value_17, tmp_locals_arg_value_17, tmp_fromlist_value_17, tmp_level_value_17);
        if (tmp_import_name_from_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 29;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_13)) {
            tmp_assign_source_20 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_13,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[393],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_20 = IMPORT_NAME(tmp_import_name_from_13, mod_consts[393]);
        }

        Py_DECREF(tmp_import_name_from_13);
        if (tmp_assign_source_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 29;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[393], tmp_assign_source_20);
    }
    {
        PyObject *tmp_assign_source_21;
        PyObject *tmp_import_name_from_14;
        PyObject *tmp_name_value_18;
        PyObject *tmp_globals_arg_value_18;
        PyObject *tmp_locals_arg_value_18;
        PyObject *tmp_fromlist_value_18;
        PyObject *tmp_level_value_18;
        tmp_name_value_18 = mod_consts[334];
        tmp_globals_arg_value_18 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_18 = Py_None;
        tmp_fromlist_value_18 = mod_consts[394];
        tmp_level_value_18 = mod_consts[204];
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 30;
        tmp_import_name_from_14 = IMPORT_MODULE5(tmp_name_value_18, tmp_globals_arg_value_18, tmp_locals_arg_value_18, tmp_fromlist_value_18, tmp_level_value_18);
        if (tmp_import_name_from_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 30;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_14)) {
            tmp_assign_source_21 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_14,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[5],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_21 = IMPORT_NAME(tmp_import_name_from_14, mod_consts[5]);
        }

        Py_DECREF(tmp_import_name_from_14);
        if (tmp_assign_source_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 30;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[5], tmp_assign_source_21);
    }
    {
        PyObject *tmp_assign_source_22;
        PyObject *tmp_import_name_from_15;
        PyObject *tmp_name_value_19;
        PyObject *tmp_globals_arg_value_19;
        PyObject *tmp_locals_arg_value_19;
        PyObject *tmp_fromlist_value_19;
        PyObject *tmp_level_value_19;
        tmp_name_value_19 = mod_consts[334];
        tmp_globals_arg_value_19 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_19 = Py_None;
        tmp_fromlist_value_19 = mod_consts[395];
        tmp_level_value_19 = mod_consts[204];
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 31;
        tmp_import_name_from_15 = IMPORT_MODULE5(tmp_name_value_19, tmp_globals_arg_value_19, tmp_locals_arg_value_19, tmp_fromlist_value_19, tmp_level_value_19);
        if (tmp_import_name_from_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 31;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_15)) {
            tmp_assign_source_22 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_15,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[396],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_22 = IMPORT_NAME(tmp_import_name_from_15, mod_consts[396]);
        }

        Py_DECREF(tmp_import_name_from_15);
        if (tmp_assign_source_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 31;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[396], tmp_assign_source_22);
    }
    {
        PyObject *tmp_assign_source_23;
        PyObject *tmp_import_name_from_16;
        PyObject *tmp_name_value_20;
        PyObject *tmp_globals_arg_value_20;
        PyObject *tmp_locals_arg_value_20;
        PyObject *tmp_fromlist_value_20;
        PyObject *tmp_level_value_20;
        tmp_name_value_20 = mod_consts[334];
        tmp_globals_arg_value_20 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_20 = Py_None;
        tmp_fromlist_value_20 = mod_consts[397];
        tmp_level_value_20 = mod_consts[204];
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 32;
        tmp_import_name_from_16 = IMPORT_MODULE5(tmp_name_value_20, tmp_globals_arg_value_20, tmp_locals_arg_value_20, tmp_fromlist_value_20, tmp_level_value_20);
        if (tmp_import_name_from_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 32;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_16)) {
            tmp_assign_source_23 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_16,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[398],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_23 = IMPORT_NAME(tmp_import_name_from_16, mod_consts[398]);
        }

        Py_DECREF(tmp_import_name_from_16);
        if (tmp_assign_source_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 32;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[398], tmp_assign_source_23);
    }
    {
        PyObject *tmp_assign_source_24;
        PyObject *tmp_import_name_from_17;
        PyObject *tmp_name_value_21;
        PyObject *tmp_globals_arg_value_21;
        PyObject *tmp_locals_arg_value_21;
        PyObject *tmp_fromlist_value_21;
        PyObject *tmp_level_value_21;
        tmp_name_value_21 = mod_consts[334];
        tmp_globals_arg_value_21 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_21 = Py_None;
        tmp_fromlist_value_21 = mod_consts[399];
        tmp_level_value_21 = mod_consts[204];
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 33;
        tmp_import_name_from_17 = IMPORT_MODULE5(tmp_name_value_21, tmp_globals_arg_value_21, tmp_locals_arg_value_21, tmp_fromlist_value_21, tmp_level_value_21);
        if (tmp_import_name_from_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 33;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_17)) {
            tmp_assign_source_24 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_17,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[140],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_24 = IMPORT_NAME(tmp_import_name_from_17, mod_consts[140]);
        }

        Py_DECREF(tmp_import_name_from_17);
        if (tmp_assign_source_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 33;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[140], tmp_assign_source_24);
    }
    {
        PyObject *tmp_assign_source_25;
        PyObject *tmp_import_name_from_18;
        PyObject *tmp_name_value_22;
        PyObject *tmp_globals_arg_value_22;
        PyObject *tmp_locals_arg_value_22;
        PyObject *tmp_fromlist_value_22;
        PyObject *tmp_level_value_22;
        tmp_name_value_22 = mod_consts[376];
        tmp_globals_arg_value_22 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_22 = Py_None;
        tmp_fromlist_value_22 = mod_consts[400];
        tmp_level_value_22 = mod_consts[401];
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 34;
        tmp_import_name_from_18 = IMPORT_MODULE5(tmp_name_value_22, tmp_globals_arg_value_22, tmp_locals_arg_value_22, tmp_fromlist_value_22, tmp_level_value_22);
        if (tmp_import_name_from_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 34;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_18)) {
            tmp_assign_source_25 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_18,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[131],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_25 = IMPORT_NAME(tmp_import_name_from_18, mod_consts[131]);
        }

        Py_DECREF(tmp_import_name_from_18);
        if (tmp_assign_source_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 34;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[131], tmp_assign_source_25);
    }
    {
        PyObject *tmp_assign_source_26;
        PyObject *tmp_import_name_from_19;
        PyObject *tmp_name_value_23;
        PyObject *tmp_globals_arg_value_23;
        PyObject *tmp_locals_arg_value_23;
        PyObject *tmp_fromlist_value_23;
        PyObject *tmp_level_value_23;
        tmp_name_value_23 = mod_consts[376];
        tmp_globals_arg_value_23 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_23 = Py_None;
        tmp_fromlist_value_23 = mod_consts[402];
        tmp_level_value_23 = mod_consts[401];
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 35;
        tmp_import_name_from_19 = IMPORT_MODULE5(tmp_name_value_23, tmp_globals_arg_value_23, tmp_locals_arg_value_23, tmp_fromlist_value_23, tmp_level_value_23);
        if (tmp_import_name_from_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 35;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_19)) {
            tmp_assign_source_26 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_19,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[19],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_26 = IMPORT_NAME(tmp_import_name_from_19, mod_consts[19]);
        }

        Py_DECREF(tmp_import_name_from_19);
        if (tmp_assign_source_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 35;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[19], tmp_assign_source_26);
    }
    {
        PyObject *tmp_assign_source_27;
        PyObject *tmp_import_name_from_20;
        PyObject *tmp_name_value_24;
        PyObject *tmp_globals_arg_value_24;
        PyObject *tmp_locals_arg_value_24;
        PyObject *tmp_fromlist_value_24;
        PyObject *tmp_level_value_24;
        tmp_name_value_24 = mod_consts[376];
        tmp_globals_arg_value_24 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_24 = Py_None;
        tmp_fromlist_value_24 = mod_consts[403];
        tmp_level_value_24 = mod_consts[401];
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 36;
        tmp_import_name_from_20 = IMPORT_MODULE5(tmp_name_value_24, tmp_globals_arg_value_24, tmp_locals_arg_value_24, tmp_fromlist_value_24, tmp_level_value_24);
        if (tmp_import_name_from_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 36;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_20)) {
            tmp_assign_source_27 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_20,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[364],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_27 = IMPORT_NAME(tmp_import_name_from_20, mod_consts[364]);
        }

        Py_DECREF(tmp_import_name_from_20);
        if (tmp_assign_source_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 36;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[364], tmp_assign_source_27);
    }
    {
        PyObject *tmp_assign_source_28;
        PyObject *tmp_import_name_from_21;
        PyObject *tmp_name_value_25;
        PyObject *tmp_globals_arg_value_25;
        PyObject *tmp_locals_arg_value_25;
        PyObject *tmp_fromlist_value_25;
        PyObject *tmp_level_value_25;
        tmp_name_value_25 = mod_consts[376];
        tmp_globals_arg_value_25 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_25 = Py_None;
        tmp_fromlist_value_25 = mod_consts[404];
        tmp_level_value_25 = mod_consts[401];
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 37;
        tmp_import_name_from_21 = IMPORT_MODULE5(tmp_name_value_25, tmp_globals_arg_value_25, tmp_locals_arg_value_25, tmp_fromlist_value_25, tmp_level_value_25);
        if (tmp_import_name_from_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 37;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_21)) {
            tmp_assign_source_28 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_21,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[57],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_28 = IMPORT_NAME(tmp_import_name_from_21, mod_consts[57]);
        }

        Py_DECREF(tmp_import_name_from_21);
        if (tmp_assign_source_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 37;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[57], tmp_assign_source_28);
    }
    {
        PyObject *tmp_assign_source_29;
        PyObject *tmp_import_name_from_22;
        PyObject *tmp_name_value_26;
        PyObject *tmp_globals_arg_value_26;
        PyObject *tmp_locals_arg_value_26;
        PyObject *tmp_fromlist_value_26;
        PyObject *tmp_level_value_26;
        tmp_name_value_26 = mod_consts[376];
        tmp_globals_arg_value_26 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_26 = Py_None;
        tmp_fromlist_value_26 = mod_consts[405];
        tmp_level_value_26 = mod_consts[401];
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 38;
        tmp_import_name_from_22 = IMPORT_MODULE5(tmp_name_value_26, tmp_globals_arg_value_26, tmp_locals_arg_value_26, tmp_fromlist_value_26, tmp_level_value_26);
        if (tmp_import_name_from_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 38;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_22)) {
            tmp_assign_source_29 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_22,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[43],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_29 = IMPORT_NAME(tmp_import_name_from_22, mod_consts[43]);
        }

        Py_DECREF(tmp_import_name_from_22);
        if (tmp_assign_source_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 38;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43], tmp_assign_source_29);
    }
    {
        PyObject *tmp_assign_source_30;
        PyObject *tmp_import_name_from_23;
        PyObject *tmp_name_value_27;
        PyObject *tmp_globals_arg_value_27;
        PyObject *tmp_locals_arg_value_27;
        PyObject *tmp_fromlist_value_27;
        PyObject *tmp_level_value_27;
        tmp_name_value_27 = mod_consts[43];
        tmp_globals_arg_value_27 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_27 = Py_None;
        tmp_fromlist_value_27 = mod_consts[406];
        tmp_level_value_27 = mod_consts[401];
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 39;
        tmp_import_name_from_23 = IMPORT_MODULE5(tmp_name_value_27, tmp_globals_arg_value_27, tmp_locals_arg_value_27, tmp_fromlist_value_27, tmp_level_value_27);
        if (tmp_import_name_from_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 39;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_23)) {
            tmp_assign_source_30 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_23,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[209],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_30 = IMPORT_NAME(tmp_import_name_from_23, mod_consts[209]);
        }

        Py_DECREF(tmp_import_name_from_23);
        if (tmp_assign_source_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 39;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[209], tmp_assign_source_30);
    }
    {
        PyObject *tmp_assign_source_31;
        PyObject *tmp_import_name_from_24;
        PyObject *tmp_name_value_28;
        PyObject *tmp_globals_arg_value_28;
        PyObject *tmp_locals_arg_value_28;
        PyObject *tmp_fromlist_value_28;
        PyObject *tmp_level_value_28;
        tmp_name_value_28 = mod_consts[43];
        tmp_globals_arg_value_28 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_28 = Py_None;
        tmp_fromlist_value_28 = mod_consts[407];
        tmp_level_value_28 = mod_consts[401];
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 40;
        tmp_import_name_from_24 = IMPORT_MODULE5(tmp_name_value_28, tmp_globals_arg_value_28, tmp_locals_arg_value_28, tmp_fromlist_value_28, tmp_level_value_28);
        if (tmp_import_name_from_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 40;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_24)) {
            tmp_assign_source_31 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_24,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[212],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_31 = IMPORT_NAME(tmp_import_name_from_24, mod_consts[212]);
        }

        Py_DECREF(tmp_import_name_from_24);
        if (tmp_assign_source_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 40;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[212], tmp_assign_source_31);
    }
    {
        PyObject *tmp_assign_source_32;
        PyObject *tmp_import_name_from_25;
        PyObject *tmp_name_value_29;
        PyObject *tmp_globals_arg_value_29;
        PyObject *tmp_locals_arg_value_29;
        PyObject *tmp_fromlist_value_29;
        PyObject *tmp_level_value_29;
        tmp_name_value_29 = mod_consts[43];
        tmp_globals_arg_value_29 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_29 = Py_None;
        tmp_fromlist_value_29 = mod_consts[408];
        tmp_level_value_29 = mod_consts[401];
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 41;
        tmp_import_name_from_25 = IMPORT_MODULE5(tmp_name_value_29, tmp_globals_arg_value_29, tmp_locals_arg_value_29, tmp_fromlist_value_29, tmp_level_value_29);
        if (tmp_import_name_from_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 41;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_25)) {
            tmp_assign_source_32 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_25,
                (PyObject *)moduledict_sqlalchemy$sql$sqltypes,
                mod_consts[238],
                mod_consts[52]
            );
        } else {
            tmp_assign_source_32 = IMPORT_NAME(tmp_import_name_from_25, mod_consts[238]);
        }

        Py_DECREF(tmp_import_name_from_25);
        if (tmp_assign_source_32 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 41;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[238], tmp_assign_source_32);
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_attribute_value_1;
        int tmp_truth_name_1;
        tmp_expression_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_1 == NULL)) {
            tmp_expression_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
        }

        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 44;

            goto frame_exception_exit_1;
        }
        tmp_attribute_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[113]);
        if (tmp_attribute_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 44;

            goto frame_exception_exit_1;
        }
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_attribute_value_1);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_1);

            exception_lineno = 44;

            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_33;
        PyObject *tmp_name_value_30;
        PyObject *tmp_globals_arg_value_30;
        PyObject *tmp_locals_arg_value_30;
        PyObject *tmp_fromlist_value_30;
        PyObject *tmp_level_value_30;
        tmp_name_value_30 = mod_consts[116];
        tmp_globals_arg_value_30 = (PyObject *)moduledict_sqlalchemy$sql$sqltypes;
        tmp_locals_arg_value_30 = Py_None;
        tmp_fromlist_value_30 = Py_None;
        tmp_level_value_30 = mod_consts[52];
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 45;
        tmp_assign_source_33 = IMPORT_MODULE5(tmp_name_value_30, tmp_globals_arg_value_30, tmp_locals_arg_value_30, tmp_fromlist_value_30, tmp_level_value_30);
        assert(!(tmp_assign_source_33 == NULL));
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[116], tmp_assign_source_33);
    }
    branch_no_1:;
    // Tried code:
    {
        PyObject *tmp_assign_source_34;
        PyObject *tmp_dircall_arg1_1;
        tmp_dircall_arg1_1 = mod_consts[409];
        Py_INCREF(tmp_dircall_arg1_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1};
            tmp_assign_source_34 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_34 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_1;
        }
        assert(tmp_class_creation_1__bases == NULL);
        tmp_class_creation_1__bases = tmp_assign_source_34;
    }
    {
        PyObject *tmp_assign_source_35;
        tmp_assign_source_35 = PyDict_New();
        assert(tmp_class_creation_1__class_decl_dict == NULL);
        tmp_class_creation_1__class_decl_dict = tmp_assign_source_35;
    }
    {
        PyObject *tmp_assign_source_36;
        PyObject *tmp_metaclass_value_1;
        bool tmp_condition_result_2;
        PyObject *tmp_key_value_1;
        PyObject *tmp_dict_arg_value_1;
        PyObject *tmp_dict_arg_value_2;
        PyObject *tmp_key_value_2;
        nuitka_bool tmp_condition_result_3;
        int tmp_truth_name_2;
        PyObject *tmp_type_arg_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_subscript_value_1;
        PyObject *tmp_bases_value_1;
        tmp_key_value_1 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dict_arg_value_1 = tmp_class_creation_1__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_1, tmp_key_value_1);
        assert(!(tmp_res == -1));
        tmp_condition_result_2 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_2 != false) {
            goto condexpr_true_1;
        } else {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dict_arg_value_2 = tmp_class_creation_1__class_decl_dict;
        tmp_key_value_2 = mod_consts[410];
        tmp_metaclass_value_1 = DICT_GET_ITEM0(tmp_dict_arg_value_2, tmp_key_value_2);
        if (tmp_metaclass_value_1 == NULL) {
            tmp_metaclass_value_1 = Py_None;
        }
        assert(!(tmp_metaclass_value_1 == NULL));
        Py_INCREF(tmp_metaclass_value_1);
        goto condexpr_end_1;
        condexpr_false_1:;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_class_creation_1__bases);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_1;
        }
        tmp_condition_result_3 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_2;
        } else {
            goto condexpr_false_2;
        }
        condexpr_true_2:;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_expression_value_2 = tmp_class_creation_1__bases;
        tmp_subscript_value_1 = mod_consts[52];
        tmp_type_arg_1 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_2, tmp_subscript_value_1, 0);
        if (tmp_type_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_1;
        }
        tmp_metaclass_value_1 = BUILTIN_TYPE1(tmp_type_arg_1);
        Py_DECREF(tmp_type_arg_1);
        if (tmp_metaclass_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_1;
        }
        goto condexpr_end_2;
        condexpr_false_2:;
        tmp_metaclass_value_1 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_1);
        condexpr_end_2:;
        condexpr_end_1:;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_bases_value_1 = tmp_class_creation_1__bases;
        tmp_assign_source_36 = SELECT_METACLASS(tmp_metaclass_value_1, tmp_bases_value_1);
        Py_DECREF(tmp_metaclass_value_1);
        if (tmp_assign_source_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_1;
        }
        assert(tmp_class_creation_1__metaclass == NULL);
        tmp_class_creation_1__metaclass = tmp_assign_source_36;
    }
    {
        bool tmp_condition_result_4;
        PyObject *tmp_key_value_3;
        PyObject *tmp_dict_arg_value_3;
        tmp_key_value_3 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dict_arg_value_3 = tmp_class_creation_1__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_3, tmp_key_value_3);
        assert(!(tmp_res == -1));
        tmp_condition_result_4 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_4 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_1__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 48;

        goto try_except_handler_1;
    }
    branch_no_2:;
    {
        nuitka_bool tmp_condition_result_5;
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_expression_value_3 = tmp_class_creation_1__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_3, mod_consts[411]);
        tmp_condition_result_5 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_assign_source_37;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_args_value_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_kwargs_value_1;
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_expression_value_4 = tmp_class_creation_1__metaclass;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[411]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_1;
        }
        tmp_tuple_element_1 = mod_consts[412];
        tmp_args_value_1 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_tuple_element_1 = tmp_class_creation_1__bases;
        PyTuple_SET_ITEM0(tmp_args_value_1, 1, tmp_tuple_element_1);
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_kwargs_value_1 = tmp_class_creation_1__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 48;
        tmp_assign_source_37 = CALL_FUNCTION(tmp_called_value_1, tmp_args_value_1, tmp_kwargs_value_1);
        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_value_1);
        if (tmp_assign_source_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_1;
        }
        assert(tmp_class_creation_1__prepared == NULL);
        tmp_class_creation_1__prepared = tmp_assign_source_37;
    }
    {
        bool tmp_condition_result_6;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_expression_value_5;
        CHECK_OBJECT(tmp_class_creation_1__prepared);
        tmp_expression_value_5 = tmp_class_creation_1__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_5, mod_consts[413]);
        tmp_operand_value_1 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_1;
        }
        tmp_condition_result_6 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_6 != false) {
            goto branch_yes_4;
        } else {
            goto branch_no_4;
        }
    }
    branch_yes_4:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_raise_value_1;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_getattr_target_1;
        PyObject *tmp_getattr_attr_1;
        PyObject *tmp_getattr_default_1;
        tmp_raise_type_1 = PyExc_TypeError;
        tmp_left_value_1 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_getattr_target_1 = tmp_class_creation_1__metaclass;
        tmp_getattr_attr_1 = mod_consts[190];
        tmp_getattr_default_1 = mod_consts[415];
        tmp_tuple_element_2 = BUILTIN_GETATTR(tmp_getattr_target_1, tmp_getattr_attr_1, tmp_getattr_default_1);
        if (tmp_tuple_element_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_1;
        }
        tmp_right_value_1 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_6;
            PyObject *tmp_type_arg_2;
            PyTuple_SET_ITEM(tmp_right_value_1, 0, tmp_tuple_element_2);
            CHECK_OBJECT(tmp_class_creation_1__prepared);
            tmp_type_arg_2 = tmp_class_creation_1__prepared;
            tmp_expression_value_6 = BUILTIN_TYPE1(tmp_type_arg_2);
            assert(!(tmp_expression_value_6 == NULL));
            tmp_tuple_element_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[190]);
            Py_DECREF(tmp_expression_value_6);
            if (tmp_tuple_element_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 48;

                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_right_value_1, 1, tmp_tuple_element_2);
        }
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_right_value_1);
        goto try_except_handler_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        tmp_raise_value_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_1, tmp_right_value_1);
        Py_DECREF(tmp_right_value_1);
        if (tmp_raise_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_1;
        }
        exception_type = tmp_raise_type_1;
        Py_INCREF(tmp_raise_type_1);
        exception_value = tmp_raise_value_1;
        exception_lineno = 48;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_1;
    }
    branch_no_4:;
    goto branch_end_3;
    branch_no_3:;
    {
        PyObject *tmp_assign_source_38;
        tmp_assign_source_38 = PyDict_New();
        assert(tmp_class_creation_1__prepared == NULL);
        tmp_class_creation_1__prepared = tmp_assign_source_38;
    }
    branch_end_3:;
    {
        PyObject *tmp_assign_source_39;
        {
            PyObject *tmp_set_locals_1;
            CHECK_OBJECT(tmp_class_creation_1__prepared);
            tmp_set_locals_1 = tmp_class_creation_1__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48 = tmp_set_locals_1;
            Py_INCREF(tmp_set_locals_1);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_3;
        }
        tmp_dictset_value = mod_consts[418];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_3;
        }
        tmp_dictset_value = mod_consts[412];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_3;
        }
        if (isFrameUnusable(cache_frame_33b35e3605fbee533bbcddb617405a17_2)) {
            Py_XDECREF(cache_frame_33b35e3605fbee533bbcddb617405a17_2);

#if _DEBUG_REFCOUNTS
            if (cache_frame_33b35e3605fbee533bbcddb617405a17_2 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_33b35e3605fbee533bbcddb617405a17_2 = MAKE_FUNCTION_FRAME(codeobj_33b35e3605fbee533bbcddb617405a17, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_33b35e3605fbee533bbcddb617405a17_2->m_type_description == NULL);
        frame_33b35e3605fbee533bbcddb617405a17_2 = cache_frame_33b35e3605fbee533bbcddb617405a17_2;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_33b35e3605fbee533bbcddb617405a17_2);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_33b35e3605fbee533bbcddb617405a17_2) == 2); // Frame stack

        // Framed code:
        {
            nuitka_bool tmp_condition_result_7;
            PyObject *tmp_called_value_2;
            PyObject *tmp_args_element_value_1;
            PyObject *tmp_called_value_3;
            PyObject *tmp_args_element_value_2;
            tmp_res = MAPPING_HAS_ITEM(locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48, mod_consts[420]);

            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 57;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            tmp_condition_result_7 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_7 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_3;
            } else {
                goto condexpr_false_3;
            }
            condexpr_true_3:;
            tmp_called_value_2 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48, mod_consts[420]);

            if (unlikely(tmp_called_value_2 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[420]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 57;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }

            if (tmp_called_value_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 57;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }


            tmp_args_element_value_1 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__1__expression_adaptations();

            frame_33b35e3605fbee533bbcddb617405a17_2->m_frame.f_lineno = 57;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_2, tmp_args_element_value_1);
            Py_DECREF(tmp_called_value_2);
            Py_DECREF(tmp_args_element_value_1);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 57;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            goto condexpr_end_3;
            condexpr_false_3:;
            tmp_called_value_3 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_2 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__1__expression_adaptations();

            frame_33b35e3605fbee533bbcddb617405a17_2->m_frame.f_lineno = 57;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_3, tmp_args_element_value_2);
            Py_DECREF(tmp_args_element_value_2);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 57;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
            condexpr_end_3:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48, mod_consts[2], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 58;
                type_description_2 = "o";
                goto frame_exception_exit_2;
            }
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_40;
            PyObject *tmp_tuple_element_3;
            PyObject *tmp_expression_value_7;
            tmp_expression_value_7 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48, mod_consts[398]);

            if (tmp_expression_value_7 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_7 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[398]);

                    if (unlikely(tmp_expression_value_7 == NULL)) {
                        tmp_expression_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[398]);
                    }

                    if (tmp_expression_value_7 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 61;
                        type_description_2 = "o";
                        goto try_except_handler_4;
                    }
                    Py_INCREF(tmp_expression_value_7);
                } else {
                    goto try_except_handler_4;
                }
            }

            tmp_tuple_element_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_7, mod_consts[9]);
            Py_DECREF(tmp_expression_value_7);
            if (tmp_tuple_element_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 61;
                type_description_2 = "o";
                goto try_except_handler_4;
            }
            tmp_assign_source_40 = PyTuple_New(1);
            PyTuple_SET_ITEM(tmp_assign_source_40, 0, tmp_tuple_element_3);
            assert(tmp__LookupExpressionAdapter$class_creation_1__bases_orig == NULL);
            tmp__LookupExpressionAdapter$class_creation_1__bases_orig = tmp_assign_source_40;
        }
        {
            PyObject *tmp_assign_source_41;
            PyObject *tmp_dircall_arg1_2;
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__bases_orig);
            tmp_dircall_arg1_2 = tmp__LookupExpressionAdapter$class_creation_1__bases_orig;
            Py_INCREF(tmp_dircall_arg1_2);

            {
                PyObject *dir_call_args[] = {tmp_dircall_arg1_2};
                tmp_assign_source_41 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
            }
            if (tmp_assign_source_41 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 61;
                type_description_2 = "o";
                goto try_except_handler_4;
            }
            assert(tmp__LookupExpressionAdapter$class_creation_1__bases == NULL);
            tmp__LookupExpressionAdapter$class_creation_1__bases = tmp_assign_source_41;
        }
        {
            PyObject *tmp_assign_source_42;
            tmp_assign_source_42 = PyDict_New();
            assert(tmp__LookupExpressionAdapter$class_creation_1__class_decl_dict == NULL);
            tmp__LookupExpressionAdapter$class_creation_1__class_decl_dict = tmp_assign_source_42;
        }
        {
            PyObject *tmp_assign_source_43;
            PyObject *tmp_metaclass_value_2;
            bool tmp_condition_result_8;
            PyObject *tmp_key_value_4;
            PyObject *tmp_dict_arg_value_4;
            PyObject *tmp_dict_arg_value_5;
            PyObject *tmp_key_value_5;
            nuitka_bool tmp_condition_result_9;
            int tmp_truth_name_3;
            PyObject *tmp_type_arg_3;
            PyObject *tmp_expression_value_8;
            PyObject *tmp_subscript_value_2;
            PyObject *tmp_bases_value_2;
            tmp_key_value_4 = mod_consts[410];
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__class_decl_dict);
            tmp_dict_arg_value_4 = tmp__LookupExpressionAdapter$class_creation_1__class_decl_dict;
            tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_4, tmp_key_value_4);
            assert(!(tmp_res == -1));
            tmp_condition_result_8 = (tmp_res != 0) ? true : false;
            if (tmp_condition_result_8 != false) {
                goto condexpr_true_4;
            } else {
                goto condexpr_false_4;
            }
            condexpr_true_4:;
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__class_decl_dict);
            tmp_dict_arg_value_5 = tmp__LookupExpressionAdapter$class_creation_1__class_decl_dict;
            tmp_key_value_5 = mod_consts[410];
            tmp_metaclass_value_2 = DICT_GET_ITEM0(tmp_dict_arg_value_5, tmp_key_value_5);
            if (tmp_metaclass_value_2 == NULL) {
                tmp_metaclass_value_2 = Py_None;
            }
            assert(!(tmp_metaclass_value_2 == NULL));
            Py_INCREF(tmp_metaclass_value_2);
            goto condexpr_end_4;
            condexpr_false_4:;
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__bases);
            tmp_truth_name_3 = CHECK_IF_TRUE(tmp__LookupExpressionAdapter$class_creation_1__bases);
            if (tmp_truth_name_3 == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 61;
                type_description_2 = "o";
                goto try_except_handler_4;
            }
            tmp_condition_result_9 = tmp_truth_name_3 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
            if (tmp_condition_result_9 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_5;
            } else {
                goto condexpr_false_5;
            }
            condexpr_true_5:;
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__bases);
            tmp_expression_value_8 = tmp__LookupExpressionAdapter$class_creation_1__bases;
            tmp_subscript_value_2 = mod_consts[52];
            tmp_type_arg_3 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_8, tmp_subscript_value_2, 0);
            if (tmp_type_arg_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 61;
                type_description_2 = "o";
                goto try_except_handler_4;
            }
            tmp_metaclass_value_2 = BUILTIN_TYPE1(tmp_type_arg_3);
            Py_DECREF(tmp_type_arg_3);
            if (tmp_metaclass_value_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 61;
                type_description_2 = "o";
                goto try_except_handler_4;
            }
            goto condexpr_end_5;
            condexpr_false_5:;
            tmp_metaclass_value_2 = (PyObject *)&PyType_Type;
            Py_INCREF(tmp_metaclass_value_2);
            condexpr_end_5:;
            condexpr_end_4:;
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__bases);
            tmp_bases_value_2 = tmp__LookupExpressionAdapter$class_creation_1__bases;
            tmp_assign_source_43 = SELECT_METACLASS(tmp_metaclass_value_2, tmp_bases_value_2);
            Py_DECREF(tmp_metaclass_value_2);
            if (tmp_assign_source_43 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 61;
                type_description_2 = "o";
                goto try_except_handler_4;
            }
            assert(tmp__LookupExpressionAdapter$class_creation_1__metaclass == NULL);
            tmp__LookupExpressionAdapter$class_creation_1__metaclass = tmp_assign_source_43;
        }
        {
            bool tmp_condition_result_10;
            PyObject *tmp_key_value_6;
            PyObject *tmp_dict_arg_value_6;
            tmp_key_value_6 = mod_consts[410];
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__class_decl_dict);
            tmp_dict_arg_value_6 = tmp__LookupExpressionAdapter$class_creation_1__class_decl_dict;
            tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_6, tmp_key_value_6);
            assert(!(tmp_res == -1));
            tmp_condition_result_10 = (tmp_res != 0) ? true : false;
            if (tmp_condition_result_10 != false) {
                goto branch_yes_5;
            } else {
                goto branch_no_5;
            }
        }
        branch_yes_5:;
        CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__class_decl_dict);
        tmp_dictdel_dict = tmp__LookupExpressionAdapter$class_creation_1__class_decl_dict;
        tmp_dictdel_key = mod_consts[410];
        tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 61;
            type_description_2 = "o";
            goto try_except_handler_4;
        }
        branch_no_5:;
        {
            nuitka_bool tmp_condition_result_11;
            PyObject *tmp_expression_value_9;
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__metaclass);
            tmp_expression_value_9 = tmp__LookupExpressionAdapter$class_creation_1__metaclass;
            tmp_result = HAS_ATTR_BOOL(tmp_expression_value_9, mod_consts[411]);
            tmp_condition_result_11 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_11 == NUITKA_BOOL_TRUE) {
                goto branch_yes_6;
            } else {
                goto branch_no_6;
            }
        }
        branch_yes_6:;
        {
            PyObject *tmp_assign_source_44;
            PyObject *tmp_called_value_4;
            PyObject *tmp_expression_value_10;
            PyObject *tmp_args_value_2;
            PyObject *tmp_tuple_element_4;
            PyObject *tmp_kwargs_value_2;
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__metaclass);
            tmp_expression_value_10 = tmp__LookupExpressionAdapter$class_creation_1__metaclass;
            tmp_called_value_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_10, mod_consts[411]);
            if (tmp_called_value_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 61;
                type_description_2 = "o";
                goto try_except_handler_4;
            }
            tmp_tuple_element_4 = mod_consts[9];
            tmp_args_value_2 = PyTuple_New(2);
            PyTuple_SET_ITEM0(tmp_args_value_2, 0, tmp_tuple_element_4);
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__bases);
            tmp_tuple_element_4 = tmp__LookupExpressionAdapter$class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_2, 1, tmp_tuple_element_4);
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__class_decl_dict);
            tmp_kwargs_value_2 = tmp__LookupExpressionAdapter$class_creation_1__class_decl_dict;
            frame_33b35e3605fbee533bbcddb617405a17_2->m_frame.f_lineno = 61;
            tmp_assign_source_44 = CALL_FUNCTION(tmp_called_value_4, tmp_args_value_2, tmp_kwargs_value_2);
            Py_DECREF(tmp_called_value_4);
            Py_DECREF(tmp_args_value_2);
            if (tmp_assign_source_44 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 61;
                type_description_2 = "o";
                goto try_except_handler_4;
            }
            assert(tmp__LookupExpressionAdapter$class_creation_1__prepared == NULL);
            tmp__LookupExpressionAdapter$class_creation_1__prepared = tmp_assign_source_44;
        }
        {
            bool tmp_condition_result_12;
            PyObject *tmp_operand_value_2;
            PyObject *tmp_expression_value_11;
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__prepared);
            tmp_expression_value_11 = tmp__LookupExpressionAdapter$class_creation_1__prepared;
            tmp_result = HAS_ATTR_BOOL(tmp_expression_value_11, mod_consts[413]);
            tmp_operand_value_2 = (tmp_result) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE(tmp_operand_value_2);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 61;
                type_description_2 = "o";
                goto try_except_handler_4;
            }
            tmp_condition_result_12 = (tmp_res == 0) ? true : false;
            if (tmp_condition_result_12 != false) {
                goto branch_yes_7;
            } else {
                goto branch_no_7;
            }
        }
        branch_yes_7:;
        {
            PyObject *tmp_raise_type_2;
            PyObject *tmp_raise_value_2;
            PyObject *tmp_left_value_2;
            PyObject *tmp_right_value_2;
            PyObject *tmp_tuple_element_5;
            PyObject *tmp_getattr_target_2;
            PyObject *tmp_getattr_attr_2;
            PyObject *tmp_getattr_default_2;
            tmp_raise_type_2 = PyExc_TypeError;
            tmp_left_value_2 = mod_consts[414];
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__metaclass);
            tmp_getattr_target_2 = tmp__LookupExpressionAdapter$class_creation_1__metaclass;
            tmp_getattr_attr_2 = mod_consts[190];
            tmp_getattr_default_2 = mod_consts[415];
            tmp_tuple_element_5 = BUILTIN_GETATTR(tmp_getattr_target_2, tmp_getattr_attr_2, tmp_getattr_default_2);
            if (tmp_tuple_element_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 61;
                type_description_2 = "o";
                goto try_except_handler_4;
            }
            tmp_right_value_2 = PyTuple_New(2);
            {
                PyObject *tmp_expression_value_12;
                PyObject *tmp_type_arg_4;
                PyTuple_SET_ITEM(tmp_right_value_2, 0, tmp_tuple_element_5);
                CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__prepared);
                tmp_type_arg_4 = tmp__LookupExpressionAdapter$class_creation_1__prepared;
                tmp_expression_value_12 = BUILTIN_TYPE1(tmp_type_arg_4);
                assert(!(tmp_expression_value_12 == NULL));
                tmp_tuple_element_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_12, mod_consts[190]);
                Py_DECREF(tmp_expression_value_12);
                if (tmp_tuple_element_5 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 61;
                    type_description_2 = "o";
                    goto tuple_build_exception_2;
                }
                PyTuple_SET_ITEM(tmp_right_value_2, 1, tmp_tuple_element_5);
            }
            goto tuple_build_noexception_2;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_2:;
            Py_DECREF(tmp_right_value_2);
            goto try_except_handler_4;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_2:;
            tmp_raise_value_2 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_2, tmp_right_value_2);
            Py_DECREF(tmp_right_value_2);
            if (tmp_raise_value_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 61;
                type_description_2 = "o";
                goto try_except_handler_4;
            }
            exception_type = tmp_raise_type_2;
            Py_INCREF(tmp_raise_type_2);
            exception_value = tmp_raise_value_2;
            exception_lineno = 61;
            RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);
            type_description_2 = "o";
            goto try_except_handler_4;
        }
        branch_no_7:;
        goto branch_end_6;
        branch_no_6:;
        {
            PyObject *tmp_assign_source_45;
            tmp_assign_source_45 = PyDict_New();
            assert(tmp__LookupExpressionAdapter$class_creation_1__prepared == NULL);
            tmp__LookupExpressionAdapter$class_creation_1__prepared = tmp_assign_source_45;
        }
        branch_end_6:;
        {
            PyObject *tmp_set_locals_2;
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__prepared);
            tmp_set_locals_2 = tmp__LookupExpressionAdapter$class_creation_1__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__2_Comparator_61 = tmp_set_locals_2;
            Py_INCREF(tmp_set_locals_2);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__2_Comparator_61, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 61;
            type_description_2 = "o";
            goto try_except_handler_6;
        }
        tmp_dictset_value = mod_consts[422];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__2_Comparator_61, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 61;
            type_description_2 = "o";
            goto try_except_handler_6;
        }
        if (isFrameUnusable(cache_frame_6563461654eab3bb951d2dca64352b29_3)) {
            Py_XDECREF(cache_frame_6563461654eab3bb951d2dca64352b29_3);

#if _DEBUG_REFCOUNTS
            if (cache_frame_6563461654eab3bb951d2dca64352b29_3 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_6563461654eab3bb951d2dca64352b29_3 = MAKE_FUNCTION_FRAME(codeobj_6563461654eab3bb951d2dca64352b29, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_6563461654eab3bb951d2dca64352b29_3->m_type_description == NULL);
        frame_6563461654eab3bb951d2dca64352b29_3 = cache_frame_6563461654eab3bb951d2dca64352b29_3;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_6563461654eab3bb951d2dca64352b29_3);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_6563461654eab3bb951d2dca64352b29_3) == 2); // Frame stack

        // Framed code:
        {
            PyObject *tmp_called_instance_1;
            tmp_called_instance_1 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__2_Comparator_61, mod_consts[43]);

            if (tmp_called_instance_1 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_called_instance_1 == NULL)) {
                        tmp_called_instance_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
                    }

                    if (tmp_called_instance_1 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 62;
                        type_description_3 = "o";
                        goto frame_exception_exit_3;
                    }
                    Py_INCREF(tmp_called_instance_1);
                } else {
                    goto frame_exception_exit_3;
                }
            }

            frame_6563461654eab3bb951d2dca64352b29_3->m_frame.f_lineno = 62;
            tmp_dictset_value = CALL_METHOD_NO_ARGS(tmp_called_instance_1, mod_consts[423]);
            Py_DECREF(tmp_called_instance_1);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 62;
                type_description_3 = "o";
                goto frame_exception_exit_3;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__2_Comparator_61, mod_consts[4], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 62;
                type_description_3 = "o";
                goto frame_exception_exit_3;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__2__adapt_expression();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__2_Comparator_61, mod_consts[13], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 64;
            type_description_3 = "o";
            goto frame_exception_exit_3;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_6563461654eab3bb951d2dca64352b29_3);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_1;

        frame_exception_exit_3:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_6563461654eab3bb951d2dca64352b29_3);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_6563461654eab3bb951d2dca64352b29_3, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_6563461654eab3bb951d2dca64352b29_3->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_6563461654eab3bb951d2dca64352b29_3, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_6563461654eab3bb951d2dca64352b29_3,
            type_description_3,
            outline_1_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_6563461654eab3bb951d2dca64352b29_3 == cache_frame_6563461654eab3bb951d2dca64352b29_3) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_6563461654eab3bb951d2dca64352b29_3);
            cache_frame_6563461654eab3bb951d2dca64352b29_3 = NULL;
        }

        assertFrameObject(frame_6563461654eab3bb951d2dca64352b29_3);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_2;

        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_2:;
        type_description_2 = "o";
        goto try_except_handler_6;
        skip_nested_handling_1:;
        {
            nuitka_bool tmp_condition_result_13;
            PyObject *tmp_cmp_expr_left_1;
            PyObject *tmp_cmp_expr_right_1;
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__bases);
            tmp_cmp_expr_left_1 = tmp__LookupExpressionAdapter$class_creation_1__bases;
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__bases_orig);
            tmp_cmp_expr_right_1 = tmp__LookupExpressionAdapter$class_creation_1__bases_orig;
            tmp_condition_result_13 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
            if (tmp_condition_result_13 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 61;
                type_description_2 = "o";
                goto try_except_handler_6;
            }
            if (tmp_condition_result_13 == NUITKA_BOOL_TRUE) {
                goto branch_yes_8;
            } else {
                goto branch_no_8;
            }
            assert(tmp_condition_result_13 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_8:;
        CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__bases_orig);
        tmp_dictset_value = tmp__LookupExpressionAdapter$class_creation_1__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__2_Comparator_61, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 61;
            type_description_2 = "o";
            goto try_except_handler_6;
        }
        branch_no_8:;
        {
            PyObject *tmp_assign_source_46;
            PyObject *tmp_called_value_5;
            PyObject *tmp_args_value_3;
            PyObject *tmp_tuple_element_6;
            PyObject *tmp_kwargs_value_3;
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__metaclass);
            tmp_called_value_5 = tmp__LookupExpressionAdapter$class_creation_1__metaclass;
            tmp_tuple_element_6 = mod_consts[9];
            tmp_args_value_3 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_3, 0, tmp_tuple_element_6);
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__bases);
            tmp_tuple_element_6 = tmp__LookupExpressionAdapter$class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_3, 1, tmp_tuple_element_6);
            tmp_tuple_element_6 = locals_sqlalchemy$sql$sqltypes$$$class__2_Comparator_61;
            PyTuple_SET_ITEM0(tmp_args_value_3, 2, tmp_tuple_element_6);
            CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__class_decl_dict);
            tmp_kwargs_value_3 = tmp__LookupExpressionAdapter$class_creation_1__class_decl_dict;
            frame_33b35e3605fbee533bbcddb617405a17_2->m_frame.f_lineno = 61;
            tmp_assign_source_46 = CALL_FUNCTION(tmp_called_value_5, tmp_args_value_3, tmp_kwargs_value_3);
            Py_DECREF(tmp_args_value_3);
            if (tmp_assign_source_46 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 61;
                type_description_2 = "o";
                goto try_except_handler_6;
            }
            assert(outline_1_var___class__ == NULL);
            outline_1_var___class__ = tmp_assign_source_46;
        }
        CHECK_OBJECT(outline_1_var___class__);
        tmp_dictset_value = outline_1_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_6;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_6:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__2_Comparator_61);
        locals_sqlalchemy$sql$sqltypes$$$class__2_Comparator_61 = NULL;
        goto try_return_handler_5;
        // Exception handler code:
        try_except_handler_6:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__2_Comparator_61);
        locals_sqlalchemy$sql$sqltypes$$$class__2_Comparator_61 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto try_except_handler_5;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_5:;
        CHECK_OBJECT(outline_1_var___class__);
        Py_DECREF(outline_1_var___class__);
        outline_1_var___class__ = NULL;
        goto outline_result_2;
        // Exception handler code:
        try_except_handler_5:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto outline_exception_2;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_2:;
        exception_lineno = 61;
        goto try_except_handler_4;
        outline_result_2:;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48, mod_consts[9], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 61;
            type_description_2 = "o";
            goto try_except_handler_4;
        }
        goto try_end_1;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_3 = exception_type;
        exception_keeper_value_3 = exception_value;
        exception_keeper_tb_3 = exception_tb;
        exception_keeper_lineno_3 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp__LookupExpressionAdapter$class_creation_1__bases_orig);
        tmp__LookupExpressionAdapter$class_creation_1__bases_orig = NULL;
        Py_XDECREF(tmp__LookupExpressionAdapter$class_creation_1__bases);
        tmp__LookupExpressionAdapter$class_creation_1__bases = NULL;
        Py_XDECREF(tmp__LookupExpressionAdapter$class_creation_1__class_decl_dict);
        tmp__LookupExpressionAdapter$class_creation_1__class_decl_dict = NULL;
        Py_XDECREF(tmp__LookupExpressionAdapter$class_creation_1__metaclass);
        tmp__LookupExpressionAdapter$class_creation_1__metaclass = NULL;
        Py_XDECREF(tmp__LookupExpressionAdapter$class_creation_1__prepared);
        tmp__LookupExpressionAdapter$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;
        exception_lineno = exception_keeper_lineno_3;

        goto frame_exception_exit_2;
        // End of try:
        try_end_1:;
        CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__bases_orig);
        Py_DECREF(tmp__LookupExpressionAdapter$class_creation_1__bases_orig);
        tmp__LookupExpressionAdapter$class_creation_1__bases_orig = NULL;
        CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__bases);
        Py_DECREF(tmp__LookupExpressionAdapter$class_creation_1__bases);
        tmp__LookupExpressionAdapter$class_creation_1__bases = NULL;
        CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__class_decl_dict);
        Py_DECREF(tmp__LookupExpressionAdapter$class_creation_1__class_decl_dict);
        tmp__LookupExpressionAdapter$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__metaclass);
        Py_DECREF(tmp__LookupExpressionAdapter$class_creation_1__metaclass);
        tmp__LookupExpressionAdapter$class_creation_1__metaclass = NULL;
        CHECK_OBJECT(tmp__LookupExpressionAdapter$class_creation_1__prepared);
        Py_DECREF(tmp__LookupExpressionAdapter$class_creation_1__prepared);
        tmp__LookupExpressionAdapter$class_creation_1__prepared = NULL;
        tmp_dictset_value = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48, mod_consts[9]);

        if (unlikely(tmp_dictset_value == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

            FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[9]);
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 76;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }

        if (tmp_dictset_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 76;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48, mod_consts[426], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 76;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_33b35e3605fbee533bbcddb617405a17_2);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_2;

        frame_exception_exit_2:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_33b35e3605fbee533bbcddb617405a17_2);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_33b35e3605fbee533bbcddb617405a17_2, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_33b35e3605fbee533bbcddb617405a17_2->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_33b35e3605fbee533bbcddb617405a17_2, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_33b35e3605fbee533bbcddb617405a17_2,
            type_description_2,
            outline_0_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_33b35e3605fbee533bbcddb617405a17_2 == cache_frame_33b35e3605fbee533bbcddb617405a17_2) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_33b35e3605fbee533bbcddb617405a17_2);
            cache_frame_33b35e3605fbee533bbcddb617405a17_2 = NULL;
        }

        assertFrameObject(frame_33b35e3605fbee533bbcddb617405a17_2);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_1;

        frame_no_exception_2:;
        goto skip_nested_handling_2;
        nested_frame_exit_1:;

        goto try_except_handler_3;
        skip_nested_handling_2:;
        {
            nuitka_bool tmp_condition_result_14;
            PyObject *tmp_cmp_expr_left_2;
            PyObject *tmp_cmp_expr_right_2;
            CHECK_OBJECT(tmp_class_creation_1__bases);
            tmp_cmp_expr_left_2 = tmp_class_creation_1__bases;
            tmp_cmp_expr_right_2 = mod_consts[409];
            tmp_condition_result_14 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_2, tmp_cmp_expr_right_2);
            if (tmp_condition_result_14 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 48;

                goto try_except_handler_3;
            }
            if (tmp_condition_result_14 == NUITKA_BOOL_TRUE) {
                goto branch_yes_9;
            } else {
                goto branch_no_9;
            }
            assert(tmp_condition_result_14 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_9:;
        tmp_dictset_value = mod_consts[409];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 48;

            goto try_except_handler_3;
        }
        branch_no_9:;
        {
            PyObject *tmp_assign_source_47;
            PyObject *tmp_called_value_6;
            PyObject *tmp_args_value_4;
            PyObject *tmp_tuple_element_7;
            PyObject *tmp_kwargs_value_4;
            CHECK_OBJECT(tmp_class_creation_1__metaclass);
            tmp_called_value_6 = tmp_class_creation_1__metaclass;
            tmp_tuple_element_7 = mod_consts[412];
            tmp_args_value_4 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_4, 0, tmp_tuple_element_7);
            CHECK_OBJECT(tmp_class_creation_1__bases);
            tmp_tuple_element_7 = tmp_class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_4, 1, tmp_tuple_element_7);
            tmp_tuple_element_7 = locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48;
            PyTuple_SET_ITEM0(tmp_args_value_4, 2, tmp_tuple_element_7);
            CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
            tmp_kwargs_value_4 = tmp_class_creation_1__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 48;
            tmp_assign_source_47 = CALL_FUNCTION(tmp_called_value_6, tmp_args_value_4, tmp_kwargs_value_4);
            Py_DECREF(tmp_args_value_4);
            if (tmp_assign_source_47 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 48;

                goto try_except_handler_3;
            }
            assert(outline_0_var___class__ == NULL);
            outline_0_var___class__ = tmp_assign_source_47;
        }
        CHECK_OBJECT(outline_0_var___class__);
        tmp_assign_source_39 = outline_0_var___class__;
        Py_INCREF(tmp_assign_source_39);
        goto try_return_handler_3;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_3:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48);
        locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48 = NULL;
        goto try_return_handler_2;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_4 = exception_type;
        exception_keeper_value_4 = exception_value;
        exception_keeper_tb_4 = exception_tb;
        exception_keeper_lineno_4 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48);
        locals_sqlalchemy$sql$sqltypes$$$class__1__LookupExpressionAdapter_48 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;
        exception_lineno = exception_keeper_lineno_4;

        goto try_except_handler_2;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        CHECK_OBJECT(outline_0_var___class__);
        Py_DECREF(outline_0_var___class__);
        outline_0_var___class__ = NULL;
        goto outline_result_1;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_5 = exception_type;
        exception_keeper_value_5 = exception_value;
        exception_keeper_tb_5 = exception_tb;
        exception_keeper_lineno_5 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_5;
        exception_value = exception_keeper_value_5;
        exception_tb = exception_keeper_tb_5;
        exception_lineno = exception_keeper_lineno_5;

        goto outline_exception_1;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_1:;
        exception_lineno = 48;
        goto try_except_handler_1;
        outline_result_1:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[412], tmp_assign_source_39);
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_1__bases);
    tmp_class_creation_1__bases = NULL;
    Py_XDECREF(tmp_class_creation_1__class_decl_dict);
    tmp_class_creation_1__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_1__metaclass);
    tmp_class_creation_1__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_1__prepared);
    tmp_class_creation_1__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(tmp_class_creation_1__bases);
    Py_DECREF(tmp_class_creation_1__bases);
    tmp_class_creation_1__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
    Py_DECREF(tmp_class_creation_1__class_decl_dict);
    tmp_class_creation_1__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_1__metaclass);
    Py_DECREF(tmp_class_creation_1__metaclass);
    tmp_class_creation_1__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_1__prepared);
    Py_DECREF(tmp_class_creation_1__prepared);
    tmp_class_creation_1__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_48;
        PyObject *tmp_dircall_arg1_3;
        tmp_dircall_arg1_3 = mod_consts[409];
        Py_INCREF(tmp_dircall_arg1_3);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_3};
            tmp_assign_source_48 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_48 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_7;
        }
        assert(tmp_class_creation_2__bases == NULL);
        tmp_class_creation_2__bases = tmp_assign_source_48;
    }
    {
        PyObject *tmp_assign_source_49;
        tmp_assign_source_49 = PyDict_New();
        assert(tmp_class_creation_2__class_decl_dict == NULL);
        tmp_class_creation_2__class_decl_dict = tmp_assign_source_49;
    }
    {
        PyObject *tmp_assign_source_50;
        PyObject *tmp_metaclass_value_3;
        bool tmp_condition_result_15;
        PyObject *tmp_key_value_7;
        PyObject *tmp_dict_arg_value_7;
        PyObject *tmp_dict_arg_value_8;
        PyObject *tmp_key_value_8;
        nuitka_bool tmp_condition_result_16;
        int tmp_truth_name_4;
        PyObject *tmp_type_arg_5;
        PyObject *tmp_expression_value_13;
        PyObject *tmp_subscript_value_3;
        PyObject *tmp_bases_value_3;
        tmp_key_value_7 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_dict_arg_value_7 = tmp_class_creation_2__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_7, tmp_key_value_7);
        assert(!(tmp_res == -1));
        tmp_condition_result_15 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_15 != false) {
            goto condexpr_true_6;
        } else {
            goto condexpr_false_6;
        }
        condexpr_true_6:;
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_dict_arg_value_8 = tmp_class_creation_2__class_decl_dict;
        tmp_key_value_8 = mod_consts[410];
        tmp_metaclass_value_3 = DICT_GET_ITEM0(tmp_dict_arg_value_8, tmp_key_value_8);
        if (tmp_metaclass_value_3 == NULL) {
            tmp_metaclass_value_3 = Py_None;
        }
        assert(!(tmp_metaclass_value_3 == NULL));
        Py_INCREF(tmp_metaclass_value_3);
        goto condexpr_end_6;
        condexpr_false_6:;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_truth_name_4 = CHECK_IF_TRUE(tmp_class_creation_2__bases);
        if (tmp_truth_name_4 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_7;
        }
        tmp_condition_result_16 = tmp_truth_name_4 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_16 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_7;
        } else {
            goto condexpr_false_7;
        }
        condexpr_true_7:;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_expression_value_13 = tmp_class_creation_2__bases;
        tmp_subscript_value_3 = mod_consts[52];
        tmp_type_arg_5 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_13, tmp_subscript_value_3, 0);
        if (tmp_type_arg_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_7;
        }
        tmp_metaclass_value_3 = BUILTIN_TYPE1(tmp_type_arg_5);
        Py_DECREF(tmp_type_arg_5);
        if (tmp_metaclass_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_7;
        }
        goto condexpr_end_7;
        condexpr_false_7:;
        tmp_metaclass_value_3 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_3);
        condexpr_end_7:;
        condexpr_end_6:;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_bases_value_3 = tmp_class_creation_2__bases;
        tmp_assign_source_50 = SELECT_METACLASS(tmp_metaclass_value_3, tmp_bases_value_3);
        Py_DECREF(tmp_metaclass_value_3);
        if (tmp_assign_source_50 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_7;
        }
        assert(tmp_class_creation_2__metaclass == NULL);
        tmp_class_creation_2__metaclass = tmp_assign_source_50;
    }
    {
        bool tmp_condition_result_17;
        PyObject *tmp_key_value_9;
        PyObject *tmp_dict_arg_value_9;
        tmp_key_value_9 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_dict_arg_value_9 = tmp_class_creation_2__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_9, tmp_key_value_9);
        assert(!(tmp_res == -1));
        tmp_condition_result_17 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_17 != false) {
            goto branch_yes_10;
        } else {
            goto branch_no_10;
        }
    }
    branch_yes_10:;
    CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_2__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 79;

        goto try_except_handler_7;
    }
    branch_no_10:;
    {
        nuitka_bool tmp_condition_result_18;
        PyObject *tmp_expression_value_14;
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_expression_value_14 = tmp_class_creation_2__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_14, mod_consts[411]);
        tmp_condition_result_18 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_18 == NUITKA_BOOL_TRUE) {
            goto branch_yes_11;
        } else {
            goto branch_no_11;
        }
    }
    branch_yes_11:;
    {
        PyObject *tmp_assign_source_51;
        PyObject *tmp_called_value_7;
        PyObject *tmp_expression_value_15;
        PyObject *tmp_args_value_5;
        PyObject *tmp_tuple_element_8;
        PyObject *tmp_kwargs_value_5;
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_expression_value_15 = tmp_class_creation_2__metaclass;
        tmp_called_value_7 = LOOKUP_ATTRIBUTE(tmp_expression_value_15, mod_consts[411]);
        if (tmp_called_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_7;
        }
        tmp_tuple_element_8 = mod_consts[8];
        tmp_args_value_5 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_5, 0, tmp_tuple_element_8);
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_tuple_element_8 = tmp_class_creation_2__bases;
        PyTuple_SET_ITEM0(tmp_args_value_5, 1, tmp_tuple_element_8);
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_kwargs_value_5 = tmp_class_creation_2__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 79;
        tmp_assign_source_51 = CALL_FUNCTION(tmp_called_value_7, tmp_args_value_5, tmp_kwargs_value_5);
        Py_DECREF(tmp_called_value_7);
        Py_DECREF(tmp_args_value_5);
        if (tmp_assign_source_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_7;
        }
        assert(tmp_class_creation_2__prepared == NULL);
        tmp_class_creation_2__prepared = tmp_assign_source_51;
    }
    {
        bool tmp_condition_result_19;
        PyObject *tmp_operand_value_3;
        PyObject *tmp_expression_value_16;
        CHECK_OBJECT(tmp_class_creation_2__prepared);
        tmp_expression_value_16 = tmp_class_creation_2__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_16, mod_consts[413]);
        tmp_operand_value_3 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_3);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_7;
        }
        tmp_condition_result_19 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_19 != false) {
            goto branch_yes_12;
        } else {
            goto branch_no_12;
        }
    }
    branch_yes_12:;
    {
        PyObject *tmp_raise_type_3;
        PyObject *tmp_raise_value_3;
        PyObject *tmp_left_value_3;
        PyObject *tmp_right_value_3;
        PyObject *tmp_tuple_element_9;
        PyObject *tmp_getattr_target_3;
        PyObject *tmp_getattr_attr_3;
        PyObject *tmp_getattr_default_3;
        tmp_raise_type_3 = PyExc_TypeError;
        tmp_left_value_3 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_getattr_target_3 = tmp_class_creation_2__metaclass;
        tmp_getattr_attr_3 = mod_consts[190];
        tmp_getattr_default_3 = mod_consts[415];
        tmp_tuple_element_9 = BUILTIN_GETATTR(tmp_getattr_target_3, tmp_getattr_attr_3, tmp_getattr_default_3);
        if (tmp_tuple_element_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_7;
        }
        tmp_right_value_3 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_17;
            PyObject *tmp_type_arg_6;
            PyTuple_SET_ITEM(tmp_right_value_3, 0, tmp_tuple_element_9);
            CHECK_OBJECT(tmp_class_creation_2__prepared);
            tmp_type_arg_6 = tmp_class_creation_2__prepared;
            tmp_expression_value_17 = BUILTIN_TYPE1(tmp_type_arg_6);
            assert(!(tmp_expression_value_17 == NULL));
            tmp_tuple_element_9 = LOOKUP_ATTRIBUTE(tmp_expression_value_17, mod_consts[190]);
            Py_DECREF(tmp_expression_value_17);
            if (tmp_tuple_element_9 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 79;

                goto tuple_build_exception_3;
            }
            PyTuple_SET_ITEM(tmp_right_value_3, 1, tmp_tuple_element_9);
        }
        goto tuple_build_noexception_3;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_3:;
        Py_DECREF(tmp_right_value_3);
        goto try_except_handler_7;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_3:;
        tmp_raise_value_3 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_3, tmp_right_value_3);
        Py_DECREF(tmp_right_value_3);
        if (tmp_raise_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_7;
        }
        exception_type = tmp_raise_type_3;
        Py_INCREF(tmp_raise_type_3);
        exception_value = tmp_raise_value_3;
        exception_lineno = 79;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_7;
    }
    branch_no_12:;
    goto branch_end_11;
    branch_no_11:;
    {
        PyObject *tmp_assign_source_52;
        tmp_assign_source_52 = PyDict_New();
        assert(tmp_class_creation_2__prepared == NULL);
        tmp_class_creation_2__prepared = tmp_assign_source_52;
    }
    branch_end_11:;
    {
        PyObject *tmp_assign_source_53;
        {
            PyObject *tmp_set_locals_3;
            CHECK_OBJECT(tmp_class_creation_2__prepared);
            tmp_set_locals_3 = tmp_class_creation_2__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__3_Concatenable_79 = tmp_set_locals_3;
            Py_INCREF(tmp_set_locals_3);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__3_Concatenable_79, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_9;
        }
        tmp_dictset_value = mod_consts[427];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__3_Concatenable_79, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_9;
        }
        tmp_dictset_value = mod_consts[8];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__3_Concatenable_79, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_9;
        }
        if (isFrameUnusable(cache_frame_62f34b6062830150f94f3a0bd71c80cd_4)) {
            Py_XDECREF(cache_frame_62f34b6062830150f94f3a0bd71c80cd_4);

#if _DEBUG_REFCOUNTS
            if (cache_frame_62f34b6062830150f94f3a0bd71c80cd_4 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_62f34b6062830150f94f3a0bd71c80cd_4 = MAKE_FUNCTION_FRAME(codeobj_62f34b6062830150f94f3a0bd71c80cd, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_62f34b6062830150f94f3a0bd71c80cd_4->m_type_description == NULL);
        frame_62f34b6062830150f94f3a0bd71c80cd_4 = cache_frame_62f34b6062830150f94f3a0bd71c80cd_4;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_62f34b6062830150f94f3a0bd71c80cd_4);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_62f34b6062830150f94f3a0bd71c80cd_4) == 2); // Frame stack

        // Framed code:
        // Tried code:
        {
            PyObject *tmp_assign_source_54;
            PyObject *tmp_tuple_element_10;
            PyObject *tmp_expression_value_18;
            tmp_expression_value_18 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__3_Concatenable_79, mod_consts[398]);

            if (tmp_expression_value_18 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_18 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[398]);

                    if (unlikely(tmp_expression_value_18 == NULL)) {
                        tmp_expression_value_18 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[398]);
                    }

                    if (tmp_expression_value_18 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 84;
                        type_description_2 = "o";
                        goto try_except_handler_10;
                    }
                    Py_INCREF(tmp_expression_value_18);
                } else {
                    goto try_except_handler_10;
                }
            }

            tmp_tuple_element_10 = LOOKUP_ATTRIBUTE(tmp_expression_value_18, mod_consts[9]);
            Py_DECREF(tmp_expression_value_18);
            if (tmp_tuple_element_10 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 84;
                type_description_2 = "o";
                goto try_except_handler_10;
            }
            tmp_assign_source_54 = PyTuple_New(1);
            PyTuple_SET_ITEM(tmp_assign_source_54, 0, tmp_tuple_element_10);
            assert(tmp_Concatenable$class_creation_1__bases_orig == NULL);
            tmp_Concatenable$class_creation_1__bases_orig = tmp_assign_source_54;
        }
        {
            PyObject *tmp_assign_source_55;
            PyObject *tmp_dircall_arg1_4;
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__bases_orig);
            tmp_dircall_arg1_4 = tmp_Concatenable$class_creation_1__bases_orig;
            Py_INCREF(tmp_dircall_arg1_4);

            {
                PyObject *dir_call_args[] = {tmp_dircall_arg1_4};
                tmp_assign_source_55 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
            }
            if (tmp_assign_source_55 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 84;
                type_description_2 = "o";
                goto try_except_handler_10;
            }
            assert(tmp_Concatenable$class_creation_1__bases == NULL);
            tmp_Concatenable$class_creation_1__bases = tmp_assign_source_55;
        }
        {
            PyObject *tmp_assign_source_56;
            tmp_assign_source_56 = PyDict_New();
            assert(tmp_Concatenable$class_creation_1__class_decl_dict == NULL);
            tmp_Concatenable$class_creation_1__class_decl_dict = tmp_assign_source_56;
        }
        {
            PyObject *tmp_assign_source_57;
            PyObject *tmp_metaclass_value_4;
            bool tmp_condition_result_20;
            PyObject *tmp_key_value_10;
            PyObject *tmp_dict_arg_value_10;
            PyObject *tmp_dict_arg_value_11;
            PyObject *tmp_key_value_11;
            nuitka_bool tmp_condition_result_21;
            int tmp_truth_name_5;
            PyObject *tmp_type_arg_7;
            PyObject *tmp_expression_value_19;
            PyObject *tmp_subscript_value_4;
            PyObject *tmp_bases_value_4;
            tmp_key_value_10 = mod_consts[410];
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__class_decl_dict);
            tmp_dict_arg_value_10 = tmp_Concatenable$class_creation_1__class_decl_dict;
            tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_10, tmp_key_value_10);
            assert(!(tmp_res == -1));
            tmp_condition_result_20 = (tmp_res != 0) ? true : false;
            if (tmp_condition_result_20 != false) {
                goto condexpr_true_8;
            } else {
                goto condexpr_false_8;
            }
            condexpr_true_8:;
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__class_decl_dict);
            tmp_dict_arg_value_11 = tmp_Concatenable$class_creation_1__class_decl_dict;
            tmp_key_value_11 = mod_consts[410];
            tmp_metaclass_value_4 = DICT_GET_ITEM0(tmp_dict_arg_value_11, tmp_key_value_11);
            if (tmp_metaclass_value_4 == NULL) {
                tmp_metaclass_value_4 = Py_None;
            }
            assert(!(tmp_metaclass_value_4 == NULL));
            Py_INCREF(tmp_metaclass_value_4);
            goto condexpr_end_8;
            condexpr_false_8:;
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__bases);
            tmp_truth_name_5 = CHECK_IF_TRUE(tmp_Concatenable$class_creation_1__bases);
            if (tmp_truth_name_5 == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 84;
                type_description_2 = "o";
                goto try_except_handler_10;
            }
            tmp_condition_result_21 = tmp_truth_name_5 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
            if (tmp_condition_result_21 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_9;
            } else {
                goto condexpr_false_9;
            }
            condexpr_true_9:;
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__bases);
            tmp_expression_value_19 = tmp_Concatenable$class_creation_1__bases;
            tmp_subscript_value_4 = mod_consts[52];
            tmp_type_arg_7 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_19, tmp_subscript_value_4, 0);
            if (tmp_type_arg_7 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 84;
                type_description_2 = "o";
                goto try_except_handler_10;
            }
            tmp_metaclass_value_4 = BUILTIN_TYPE1(tmp_type_arg_7);
            Py_DECREF(tmp_type_arg_7);
            if (tmp_metaclass_value_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 84;
                type_description_2 = "o";
                goto try_except_handler_10;
            }
            goto condexpr_end_9;
            condexpr_false_9:;
            tmp_metaclass_value_4 = (PyObject *)&PyType_Type;
            Py_INCREF(tmp_metaclass_value_4);
            condexpr_end_9:;
            condexpr_end_8:;
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__bases);
            tmp_bases_value_4 = tmp_Concatenable$class_creation_1__bases;
            tmp_assign_source_57 = SELECT_METACLASS(tmp_metaclass_value_4, tmp_bases_value_4);
            Py_DECREF(tmp_metaclass_value_4);
            if (tmp_assign_source_57 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 84;
                type_description_2 = "o";
                goto try_except_handler_10;
            }
            assert(tmp_Concatenable$class_creation_1__metaclass == NULL);
            tmp_Concatenable$class_creation_1__metaclass = tmp_assign_source_57;
        }
        {
            bool tmp_condition_result_22;
            PyObject *tmp_key_value_12;
            PyObject *tmp_dict_arg_value_12;
            tmp_key_value_12 = mod_consts[410];
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__class_decl_dict);
            tmp_dict_arg_value_12 = tmp_Concatenable$class_creation_1__class_decl_dict;
            tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_12, tmp_key_value_12);
            assert(!(tmp_res == -1));
            tmp_condition_result_22 = (tmp_res != 0) ? true : false;
            if (tmp_condition_result_22 != false) {
                goto branch_yes_13;
            } else {
                goto branch_no_13;
            }
        }
        branch_yes_13:;
        CHECK_OBJECT(tmp_Concatenable$class_creation_1__class_decl_dict);
        tmp_dictdel_dict = tmp_Concatenable$class_creation_1__class_decl_dict;
        tmp_dictdel_key = mod_consts[410];
        tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 84;
            type_description_2 = "o";
            goto try_except_handler_10;
        }
        branch_no_13:;
        {
            nuitka_bool tmp_condition_result_23;
            PyObject *tmp_expression_value_20;
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__metaclass);
            tmp_expression_value_20 = tmp_Concatenable$class_creation_1__metaclass;
            tmp_result = HAS_ATTR_BOOL(tmp_expression_value_20, mod_consts[411]);
            tmp_condition_result_23 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_23 == NUITKA_BOOL_TRUE) {
                goto branch_yes_14;
            } else {
                goto branch_no_14;
            }
        }
        branch_yes_14:;
        {
            PyObject *tmp_assign_source_58;
            PyObject *tmp_called_value_8;
            PyObject *tmp_expression_value_21;
            PyObject *tmp_args_value_6;
            PyObject *tmp_tuple_element_11;
            PyObject *tmp_kwargs_value_6;
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__metaclass);
            tmp_expression_value_21 = tmp_Concatenable$class_creation_1__metaclass;
            tmp_called_value_8 = LOOKUP_ATTRIBUTE(tmp_expression_value_21, mod_consts[411]);
            if (tmp_called_value_8 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 84;
                type_description_2 = "o";
                goto try_except_handler_10;
            }
            tmp_tuple_element_11 = mod_consts[9];
            tmp_args_value_6 = PyTuple_New(2);
            PyTuple_SET_ITEM0(tmp_args_value_6, 0, tmp_tuple_element_11);
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__bases);
            tmp_tuple_element_11 = tmp_Concatenable$class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_6, 1, tmp_tuple_element_11);
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__class_decl_dict);
            tmp_kwargs_value_6 = tmp_Concatenable$class_creation_1__class_decl_dict;
            frame_62f34b6062830150f94f3a0bd71c80cd_4->m_frame.f_lineno = 84;
            tmp_assign_source_58 = CALL_FUNCTION(tmp_called_value_8, tmp_args_value_6, tmp_kwargs_value_6);
            Py_DECREF(tmp_called_value_8);
            Py_DECREF(tmp_args_value_6);
            if (tmp_assign_source_58 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 84;
                type_description_2 = "o";
                goto try_except_handler_10;
            }
            assert(tmp_Concatenable$class_creation_1__prepared == NULL);
            tmp_Concatenable$class_creation_1__prepared = tmp_assign_source_58;
        }
        {
            bool tmp_condition_result_24;
            PyObject *tmp_operand_value_4;
            PyObject *tmp_expression_value_22;
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__prepared);
            tmp_expression_value_22 = tmp_Concatenable$class_creation_1__prepared;
            tmp_result = HAS_ATTR_BOOL(tmp_expression_value_22, mod_consts[413]);
            tmp_operand_value_4 = (tmp_result) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE(tmp_operand_value_4);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 84;
                type_description_2 = "o";
                goto try_except_handler_10;
            }
            tmp_condition_result_24 = (tmp_res == 0) ? true : false;
            if (tmp_condition_result_24 != false) {
                goto branch_yes_15;
            } else {
                goto branch_no_15;
            }
        }
        branch_yes_15:;
        {
            PyObject *tmp_raise_type_4;
            PyObject *tmp_raise_value_4;
            PyObject *tmp_left_value_4;
            PyObject *tmp_right_value_4;
            PyObject *tmp_tuple_element_12;
            PyObject *tmp_getattr_target_4;
            PyObject *tmp_getattr_attr_4;
            PyObject *tmp_getattr_default_4;
            tmp_raise_type_4 = PyExc_TypeError;
            tmp_left_value_4 = mod_consts[414];
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__metaclass);
            tmp_getattr_target_4 = tmp_Concatenable$class_creation_1__metaclass;
            tmp_getattr_attr_4 = mod_consts[190];
            tmp_getattr_default_4 = mod_consts[415];
            tmp_tuple_element_12 = BUILTIN_GETATTR(tmp_getattr_target_4, tmp_getattr_attr_4, tmp_getattr_default_4);
            if (tmp_tuple_element_12 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 84;
                type_description_2 = "o";
                goto try_except_handler_10;
            }
            tmp_right_value_4 = PyTuple_New(2);
            {
                PyObject *tmp_expression_value_23;
                PyObject *tmp_type_arg_8;
                PyTuple_SET_ITEM(tmp_right_value_4, 0, tmp_tuple_element_12);
                CHECK_OBJECT(tmp_Concatenable$class_creation_1__prepared);
                tmp_type_arg_8 = tmp_Concatenable$class_creation_1__prepared;
                tmp_expression_value_23 = BUILTIN_TYPE1(tmp_type_arg_8);
                assert(!(tmp_expression_value_23 == NULL));
                tmp_tuple_element_12 = LOOKUP_ATTRIBUTE(tmp_expression_value_23, mod_consts[190]);
                Py_DECREF(tmp_expression_value_23);
                if (tmp_tuple_element_12 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 84;
                    type_description_2 = "o";
                    goto tuple_build_exception_4;
                }
                PyTuple_SET_ITEM(tmp_right_value_4, 1, tmp_tuple_element_12);
            }
            goto tuple_build_noexception_4;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_4:;
            Py_DECREF(tmp_right_value_4);
            goto try_except_handler_10;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_4:;
            tmp_raise_value_4 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_4, tmp_right_value_4);
            Py_DECREF(tmp_right_value_4);
            if (tmp_raise_value_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 84;
                type_description_2 = "o";
                goto try_except_handler_10;
            }
            exception_type = tmp_raise_type_4;
            Py_INCREF(tmp_raise_type_4);
            exception_value = tmp_raise_value_4;
            exception_lineno = 84;
            RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);
            type_description_2 = "o";
            goto try_except_handler_10;
        }
        branch_no_15:;
        goto branch_end_14;
        branch_no_14:;
        {
            PyObject *tmp_assign_source_59;
            tmp_assign_source_59 = PyDict_New();
            assert(tmp_Concatenable$class_creation_1__prepared == NULL);
            tmp_Concatenable$class_creation_1__prepared = tmp_assign_source_59;
        }
        branch_end_14:;
        {
            PyObject *tmp_set_locals_4;
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__prepared);
            tmp_set_locals_4 = tmp_Concatenable$class_creation_1__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__4_Comparator_84 = tmp_set_locals_4;
            Py_INCREF(tmp_set_locals_4);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__4_Comparator_84, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 84;
            type_description_2 = "o";
            goto try_except_handler_12;
        }
        tmp_dictset_value = mod_consts[428];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__4_Comparator_84, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 84;
            type_description_2 = "o";
            goto try_except_handler_12;
        }
        if (isFrameUnusable(cache_frame_95a105e5d6aa6c3fbd0de03ca55d5e46_5)) {
            Py_XDECREF(cache_frame_95a105e5d6aa6c3fbd0de03ca55d5e46_5);

#if _DEBUG_REFCOUNTS
            if (cache_frame_95a105e5d6aa6c3fbd0de03ca55d5e46_5 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_95a105e5d6aa6c3fbd0de03ca55d5e46_5 = MAKE_FUNCTION_FRAME(codeobj_95a105e5d6aa6c3fbd0de03ca55d5e46, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_95a105e5d6aa6c3fbd0de03ca55d5e46_5->m_type_description == NULL);
        frame_95a105e5d6aa6c3fbd0de03ca55d5e46_5 = cache_frame_95a105e5d6aa6c3fbd0de03ca55d5e46_5;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_95a105e5d6aa6c3fbd0de03ca55d5e46_5);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_95a105e5d6aa6c3fbd0de03ca55d5e46_5) == 2); // Frame stack

        // Framed code:


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__3__adapt_expression();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__4_Comparator_84, mod_consts[13], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 85;
            type_description_3 = "o";
            goto frame_exception_exit_5;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_95a105e5d6aa6c3fbd0de03ca55d5e46_5);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_3;

        frame_exception_exit_5:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_95a105e5d6aa6c3fbd0de03ca55d5e46_5);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_95a105e5d6aa6c3fbd0de03ca55d5e46_5, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_95a105e5d6aa6c3fbd0de03ca55d5e46_5->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_95a105e5d6aa6c3fbd0de03ca55d5e46_5, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_95a105e5d6aa6c3fbd0de03ca55d5e46_5,
            type_description_3,
            outline_3_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_95a105e5d6aa6c3fbd0de03ca55d5e46_5 == cache_frame_95a105e5d6aa6c3fbd0de03ca55d5e46_5) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_95a105e5d6aa6c3fbd0de03ca55d5e46_5);
            cache_frame_95a105e5d6aa6c3fbd0de03ca55d5e46_5 = NULL;
        }

        assertFrameObject(frame_95a105e5d6aa6c3fbd0de03ca55d5e46_5);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_4;

        frame_no_exception_3:;
        goto skip_nested_handling_3;
        nested_frame_exit_4:;
        type_description_2 = "o";
        goto try_except_handler_12;
        skip_nested_handling_3:;
        {
            nuitka_bool tmp_condition_result_25;
            PyObject *tmp_cmp_expr_left_3;
            PyObject *tmp_cmp_expr_right_3;
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__bases);
            tmp_cmp_expr_left_3 = tmp_Concatenable$class_creation_1__bases;
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__bases_orig);
            tmp_cmp_expr_right_3 = tmp_Concatenable$class_creation_1__bases_orig;
            tmp_condition_result_25 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_3, tmp_cmp_expr_right_3);
            if (tmp_condition_result_25 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 84;
                type_description_2 = "o";
                goto try_except_handler_12;
            }
            if (tmp_condition_result_25 == NUITKA_BOOL_TRUE) {
                goto branch_yes_16;
            } else {
                goto branch_no_16;
            }
            assert(tmp_condition_result_25 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_16:;
        CHECK_OBJECT(tmp_Concatenable$class_creation_1__bases_orig);
        tmp_dictset_value = tmp_Concatenable$class_creation_1__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__4_Comparator_84, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 84;
            type_description_2 = "o";
            goto try_except_handler_12;
        }
        branch_no_16:;
        {
            PyObject *tmp_assign_source_60;
            PyObject *tmp_called_value_9;
            PyObject *tmp_args_value_7;
            PyObject *tmp_tuple_element_13;
            PyObject *tmp_kwargs_value_7;
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__metaclass);
            tmp_called_value_9 = tmp_Concatenable$class_creation_1__metaclass;
            tmp_tuple_element_13 = mod_consts[9];
            tmp_args_value_7 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_7, 0, tmp_tuple_element_13);
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__bases);
            tmp_tuple_element_13 = tmp_Concatenable$class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_7, 1, tmp_tuple_element_13);
            tmp_tuple_element_13 = locals_sqlalchemy$sql$sqltypes$$$class__4_Comparator_84;
            PyTuple_SET_ITEM0(tmp_args_value_7, 2, tmp_tuple_element_13);
            CHECK_OBJECT(tmp_Concatenable$class_creation_1__class_decl_dict);
            tmp_kwargs_value_7 = tmp_Concatenable$class_creation_1__class_decl_dict;
            frame_62f34b6062830150f94f3a0bd71c80cd_4->m_frame.f_lineno = 84;
            tmp_assign_source_60 = CALL_FUNCTION(tmp_called_value_9, tmp_args_value_7, tmp_kwargs_value_7);
            Py_DECREF(tmp_args_value_7);
            if (tmp_assign_source_60 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 84;
                type_description_2 = "o";
                goto try_except_handler_12;
            }
            assert(outline_3_var___class__ == NULL);
            outline_3_var___class__ = tmp_assign_source_60;
        }
        CHECK_OBJECT(outline_3_var___class__);
        tmp_dictset_value = outline_3_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_12;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_12:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__4_Comparator_84);
        locals_sqlalchemy$sql$sqltypes$$$class__4_Comparator_84 = NULL;
        goto try_return_handler_11;
        // Exception handler code:
        try_except_handler_12:;
        exception_keeper_type_7 = exception_type;
        exception_keeper_value_7 = exception_value;
        exception_keeper_tb_7 = exception_tb;
        exception_keeper_lineno_7 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__4_Comparator_84);
        locals_sqlalchemy$sql$sqltypes$$$class__4_Comparator_84 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_7;
        exception_value = exception_keeper_value_7;
        exception_tb = exception_keeper_tb_7;
        exception_lineno = exception_keeper_lineno_7;

        goto try_except_handler_11;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_11:;
        CHECK_OBJECT(outline_3_var___class__);
        Py_DECREF(outline_3_var___class__);
        outline_3_var___class__ = NULL;
        goto outline_result_4;
        // Exception handler code:
        try_except_handler_11:;
        exception_keeper_type_8 = exception_type;
        exception_keeper_value_8 = exception_value;
        exception_keeper_tb_8 = exception_tb;
        exception_keeper_lineno_8 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_8;
        exception_value = exception_keeper_value_8;
        exception_tb = exception_keeper_tb_8;
        exception_lineno = exception_keeper_lineno_8;

        goto outline_exception_4;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_4:;
        exception_lineno = 84;
        goto try_except_handler_10;
        outline_result_4:;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__3_Concatenable_79, mod_consts[9], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 84;
            type_description_2 = "o";
            goto try_except_handler_10;
        }
        goto try_end_3;
        // Exception handler code:
        try_except_handler_10:;
        exception_keeper_type_9 = exception_type;
        exception_keeper_value_9 = exception_value;
        exception_keeper_tb_9 = exception_tb;
        exception_keeper_lineno_9 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_Concatenable$class_creation_1__bases_orig);
        tmp_Concatenable$class_creation_1__bases_orig = NULL;
        Py_XDECREF(tmp_Concatenable$class_creation_1__bases);
        tmp_Concatenable$class_creation_1__bases = NULL;
        Py_XDECREF(tmp_Concatenable$class_creation_1__class_decl_dict);
        tmp_Concatenable$class_creation_1__class_decl_dict = NULL;
        Py_XDECREF(tmp_Concatenable$class_creation_1__metaclass);
        tmp_Concatenable$class_creation_1__metaclass = NULL;
        Py_XDECREF(tmp_Concatenable$class_creation_1__prepared);
        tmp_Concatenable$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_9;
        exception_value = exception_keeper_value_9;
        exception_tb = exception_keeper_tb_9;
        exception_lineno = exception_keeper_lineno_9;

        goto frame_exception_exit_4;
        // End of try:
        try_end_3:;
        CHECK_OBJECT(tmp_Concatenable$class_creation_1__bases_orig);
        Py_DECREF(tmp_Concatenable$class_creation_1__bases_orig);
        tmp_Concatenable$class_creation_1__bases_orig = NULL;
        CHECK_OBJECT(tmp_Concatenable$class_creation_1__bases);
        Py_DECREF(tmp_Concatenable$class_creation_1__bases);
        tmp_Concatenable$class_creation_1__bases = NULL;
        CHECK_OBJECT(tmp_Concatenable$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_Concatenable$class_creation_1__class_decl_dict);
        tmp_Concatenable$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_Concatenable$class_creation_1__metaclass);
        Py_DECREF(tmp_Concatenable$class_creation_1__metaclass);
        tmp_Concatenable$class_creation_1__metaclass = NULL;
        CHECK_OBJECT(tmp_Concatenable$class_creation_1__prepared);
        Py_DECREF(tmp_Concatenable$class_creation_1__prepared);
        tmp_Concatenable$class_creation_1__prepared = NULL;
        tmp_dictset_value = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__3_Concatenable_79, mod_consts[9]);

        if (unlikely(tmp_dictset_value == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

            FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[9]);
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 96;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }

        if (tmp_dictset_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 96;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__3_Concatenable_79, mod_consts[426], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 96;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_62f34b6062830150f94f3a0bd71c80cd_4);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_4;

        frame_exception_exit_4:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_62f34b6062830150f94f3a0bd71c80cd_4);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_62f34b6062830150f94f3a0bd71c80cd_4, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_62f34b6062830150f94f3a0bd71c80cd_4->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_62f34b6062830150f94f3a0bd71c80cd_4, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_62f34b6062830150f94f3a0bd71c80cd_4,
            type_description_2,
            outline_2_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_62f34b6062830150f94f3a0bd71c80cd_4 == cache_frame_62f34b6062830150f94f3a0bd71c80cd_4) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_62f34b6062830150f94f3a0bd71c80cd_4);
            cache_frame_62f34b6062830150f94f3a0bd71c80cd_4 = NULL;
        }

        assertFrameObject(frame_62f34b6062830150f94f3a0bd71c80cd_4);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_3;

        frame_no_exception_4:;
        goto skip_nested_handling_4;
        nested_frame_exit_3:;

        goto try_except_handler_9;
        skip_nested_handling_4:;
        {
            nuitka_bool tmp_condition_result_26;
            PyObject *tmp_cmp_expr_left_4;
            PyObject *tmp_cmp_expr_right_4;
            CHECK_OBJECT(tmp_class_creation_2__bases);
            tmp_cmp_expr_left_4 = tmp_class_creation_2__bases;
            tmp_cmp_expr_right_4 = mod_consts[409];
            tmp_condition_result_26 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_4, tmp_cmp_expr_right_4);
            if (tmp_condition_result_26 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 79;

                goto try_except_handler_9;
            }
            if (tmp_condition_result_26 == NUITKA_BOOL_TRUE) {
                goto branch_yes_17;
            } else {
                goto branch_no_17;
            }
            assert(tmp_condition_result_26 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_17:;
        tmp_dictset_value = mod_consts[409];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__3_Concatenable_79, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;

            goto try_except_handler_9;
        }
        branch_no_17:;
        {
            PyObject *tmp_assign_source_61;
            PyObject *tmp_called_value_10;
            PyObject *tmp_args_value_8;
            PyObject *tmp_tuple_element_14;
            PyObject *tmp_kwargs_value_8;
            CHECK_OBJECT(tmp_class_creation_2__metaclass);
            tmp_called_value_10 = tmp_class_creation_2__metaclass;
            tmp_tuple_element_14 = mod_consts[8];
            tmp_args_value_8 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_8, 0, tmp_tuple_element_14);
            CHECK_OBJECT(tmp_class_creation_2__bases);
            tmp_tuple_element_14 = tmp_class_creation_2__bases;
            PyTuple_SET_ITEM0(tmp_args_value_8, 1, tmp_tuple_element_14);
            tmp_tuple_element_14 = locals_sqlalchemy$sql$sqltypes$$$class__3_Concatenable_79;
            PyTuple_SET_ITEM0(tmp_args_value_8, 2, tmp_tuple_element_14);
            CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
            tmp_kwargs_value_8 = tmp_class_creation_2__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 79;
            tmp_assign_source_61 = CALL_FUNCTION(tmp_called_value_10, tmp_args_value_8, tmp_kwargs_value_8);
            Py_DECREF(tmp_args_value_8);
            if (tmp_assign_source_61 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 79;

                goto try_except_handler_9;
            }
            assert(outline_2_var___class__ == NULL);
            outline_2_var___class__ = tmp_assign_source_61;
        }
        CHECK_OBJECT(outline_2_var___class__);
        tmp_assign_source_53 = outline_2_var___class__;
        Py_INCREF(tmp_assign_source_53);
        goto try_return_handler_9;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_9:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__3_Concatenable_79);
        locals_sqlalchemy$sql$sqltypes$$$class__3_Concatenable_79 = NULL;
        goto try_return_handler_8;
        // Exception handler code:
        try_except_handler_9:;
        exception_keeper_type_10 = exception_type;
        exception_keeper_value_10 = exception_value;
        exception_keeper_tb_10 = exception_tb;
        exception_keeper_lineno_10 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__3_Concatenable_79);
        locals_sqlalchemy$sql$sqltypes$$$class__3_Concatenable_79 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_10;
        exception_value = exception_keeper_value_10;
        exception_tb = exception_keeper_tb_10;
        exception_lineno = exception_keeper_lineno_10;

        goto try_except_handler_8;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_8:;
        CHECK_OBJECT(outline_2_var___class__);
        Py_DECREF(outline_2_var___class__);
        outline_2_var___class__ = NULL;
        goto outline_result_3;
        // Exception handler code:
        try_except_handler_8:;
        exception_keeper_type_11 = exception_type;
        exception_keeper_value_11 = exception_value;
        exception_keeper_tb_11 = exception_tb;
        exception_keeper_lineno_11 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_11;
        exception_value = exception_keeper_value_11;
        exception_tb = exception_keeper_tb_11;
        exception_lineno = exception_keeper_lineno_11;

        goto outline_exception_3;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_3:;
        exception_lineno = 79;
        goto try_except_handler_7;
        outline_result_3:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[8], tmp_assign_source_53);
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_12 = exception_type;
    exception_keeper_value_12 = exception_value;
    exception_keeper_tb_12 = exception_tb;
    exception_keeper_lineno_12 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_2__bases);
    tmp_class_creation_2__bases = NULL;
    Py_XDECREF(tmp_class_creation_2__class_decl_dict);
    tmp_class_creation_2__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_2__metaclass);
    tmp_class_creation_2__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_2__prepared);
    tmp_class_creation_2__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_12;
    exception_value = exception_keeper_value_12;
    exception_tb = exception_keeper_tb_12;
    exception_lineno = exception_keeper_lineno_12;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    CHECK_OBJECT(tmp_class_creation_2__bases);
    Py_DECREF(tmp_class_creation_2__bases);
    tmp_class_creation_2__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
    Py_DECREF(tmp_class_creation_2__class_decl_dict);
    tmp_class_creation_2__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_2__metaclass);
    Py_DECREF(tmp_class_creation_2__metaclass);
    tmp_class_creation_2__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_2__prepared);
    Py_DECREF(tmp_class_creation_2__prepared);
    tmp_class_creation_2__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_62;
        PyObject *tmp_dircall_arg1_5;
        tmp_dircall_arg1_5 = mod_consts[409];
        Py_INCREF(tmp_dircall_arg1_5);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_5};
            tmp_assign_source_62 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_62 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_13;
        }
        assert(tmp_class_creation_3__bases == NULL);
        tmp_class_creation_3__bases = tmp_assign_source_62;
    }
    {
        PyObject *tmp_assign_source_63;
        tmp_assign_source_63 = PyDict_New();
        assert(tmp_class_creation_3__class_decl_dict == NULL);
        tmp_class_creation_3__class_decl_dict = tmp_assign_source_63;
    }
    {
        PyObject *tmp_assign_source_64;
        PyObject *tmp_metaclass_value_5;
        bool tmp_condition_result_27;
        PyObject *tmp_key_value_13;
        PyObject *tmp_dict_arg_value_13;
        PyObject *tmp_dict_arg_value_14;
        PyObject *tmp_key_value_14;
        nuitka_bool tmp_condition_result_28;
        int tmp_truth_name_6;
        PyObject *tmp_type_arg_9;
        PyObject *tmp_expression_value_24;
        PyObject *tmp_subscript_value_5;
        PyObject *tmp_bases_value_5;
        tmp_key_value_13 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_dict_arg_value_13 = tmp_class_creation_3__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_13, tmp_key_value_13);
        assert(!(tmp_res == -1));
        tmp_condition_result_27 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_27 != false) {
            goto condexpr_true_10;
        } else {
            goto condexpr_false_10;
        }
        condexpr_true_10:;
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_dict_arg_value_14 = tmp_class_creation_3__class_decl_dict;
        tmp_key_value_14 = mod_consts[410];
        tmp_metaclass_value_5 = DICT_GET_ITEM0(tmp_dict_arg_value_14, tmp_key_value_14);
        if (tmp_metaclass_value_5 == NULL) {
            tmp_metaclass_value_5 = Py_None;
        }
        assert(!(tmp_metaclass_value_5 == NULL));
        Py_INCREF(tmp_metaclass_value_5);
        goto condexpr_end_10;
        condexpr_false_10:;
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_truth_name_6 = CHECK_IF_TRUE(tmp_class_creation_3__bases);
        if (tmp_truth_name_6 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_13;
        }
        tmp_condition_result_28 = tmp_truth_name_6 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_28 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_11;
        } else {
            goto condexpr_false_11;
        }
        condexpr_true_11:;
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_expression_value_24 = tmp_class_creation_3__bases;
        tmp_subscript_value_5 = mod_consts[52];
        tmp_type_arg_9 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_24, tmp_subscript_value_5, 0);
        if (tmp_type_arg_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_13;
        }
        tmp_metaclass_value_5 = BUILTIN_TYPE1(tmp_type_arg_9);
        Py_DECREF(tmp_type_arg_9);
        if (tmp_metaclass_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_13;
        }
        goto condexpr_end_11;
        condexpr_false_11:;
        tmp_metaclass_value_5 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_5);
        condexpr_end_11:;
        condexpr_end_10:;
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_bases_value_5 = tmp_class_creation_3__bases;
        tmp_assign_source_64 = SELECT_METACLASS(tmp_metaclass_value_5, tmp_bases_value_5);
        Py_DECREF(tmp_metaclass_value_5);
        if (tmp_assign_source_64 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_13;
        }
        assert(tmp_class_creation_3__metaclass == NULL);
        tmp_class_creation_3__metaclass = tmp_assign_source_64;
    }
    {
        bool tmp_condition_result_29;
        PyObject *tmp_key_value_15;
        PyObject *tmp_dict_arg_value_15;
        tmp_key_value_15 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_dict_arg_value_15 = tmp_class_creation_3__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_15, tmp_key_value_15);
        assert(!(tmp_res == -1));
        tmp_condition_result_29 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_29 != false) {
            goto branch_yes_18;
        } else {
            goto branch_no_18;
        }
    }
    branch_yes_18:;
    CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_3__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 99;

        goto try_except_handler_13;
    }
    branch_no_18:;
    {
        nuitka_bool tmp_condition_result_30;
        PyObject *tmp_expression_value_25;
        CHECK_OBJECT(tmp_class_creation_3__metaclass);
        tmp_expression_value_25 = tmp_class_creation_3__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_25, mod_consts[411]);
        tmp_condition_result_30 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_30 == NUITKA_BOOL_TRUE) {
            goto branch_yes_19;
        } else {
            goto branch_no_19;
        }
    }
    branch_yes_19:;
    {
        PyObject *tmp_assign_source_65;
        PyObject *tmp_called_value_11;
        PyObject *tmp_expression_value_26;
        PyObject *tmp_args_value_9;
        PyObject *tmp_tuple_element_15;
        PyObject *tmp_kwargs_value_9;
        CHECK_OBJECT(tmp_class_creation_3__metaclass);
        tmp_expression_value_26 = tmp_class_creation_3__metaclass;
        tmp_called_value_11 = LOOKUP_ATTRIBUTE(tmp_expression_value_26, mod_consts[411]);
        if (tmp_called_value_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_13;
        }
        tmp_tuple_element_15 = mod_consts[430];
        tmp_args_value_9 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_9, 0, tmp_tuple_element_15);
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_tuple_element_15 = tmp_class_creation_3__bases;
        PyTuple_SET_ITEM0(tmp_args_value_9, 1, tmp_tuple_element_15);
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_kwargs_value_9 = tmp_class_creation_3__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 99;
        tmp_assign_source_65 = CALL_FUNCTION(tmp_called_value_11, tmp_args_value_9, tmp_kwargs_value_9);
        Py_DECREF(tmp_called_value_11);
        Py_DECREF(tmp_args_value_9);
        if (tmp_assign_source_65 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_13;
        }
        assert(tmp_class_creation_3__prepared == NULL);
        tmp_class_creation_3__prepared = tmp_assign_source_65;
    }
    {
        bool tmp_condition_result_31;
        PyObject *tmp_operand_value_5;
        PyObject *tmp_expression_value_27;
        CHECK_OBJECT(tmp_class_creation_3__prepared);
        tmp_expression_value_27 = tmp_class_creation_3__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_27, mod_consts[413]);
        tmp_operand_value_5 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_5);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_13;
        }
        tmp_condition_result_31 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_31 != false) {
            goto branch_yes_20;
        } else {
            goto branch_no_20;
        }
    }
    branch_yes_20:;
    {
        PyObject *tmp_raise_type_5;
        PyObject *tmp_raise_value_5;
        PyObject *tmp_left_value_5;
        PyObject *tmp_right_value_5;
        PyObject *tmp_tuple_element_16;
        PyObject *tmp_getattr_target_5;
        PyObject *tmp_getattr_attr_5;
        PyObject *tmp_getattr_default_5;
        tmp_raise_type_5 = PyExc_TypeError;
        tmp_left_value_5 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_3__metaclass);
        tmp_getattr_target_5 = tmp_class_creation_3__metaclass;
        tmp_getattr_attr_5 = mod_consts[190];
        tmp_getattr_default_5 = mod_consts[415];
        tmp_tuple_element_16 = BUILTIN_GETATTR(tmp_getattr_target_5, tmp_getattr_attr_5, tmp_getattr_default_5);
        if (tmp_tuple_element_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_13;
        }
        tmp_right_value_5 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_28;
            PyObject *tmp_type_arg_10;
            PyTuple_SET_ITEM(tmp_right_value_5, 0, tmp_tuple_element_16);
            CHECK_OBJECT(tmp_class_creation_3__prepared);
            tmp_type_arg_10 = tmp_class_creation_3__prepared;
            tmp_expression_value_28 = BUILTIN_TYPE1(tmp_type_arg_10);
            assert(!(tmp_expression_value_28 == NULL));
            tmp_tuple_element_16 = LOOKUP_ATTRIBUTE(tmp_expression_value_28, mod_consts[190]);
            Py_DECREF(tmp_expression_value_28);
            if (tmp_tuple_element_16 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 99;

                goto tuple_build_exception_5;
            }
            PyTuple_SET_ITEM(tmp_right_value_5, 1, tmp_tuple_element_16);
        }
        goto tuple_build_noexception_5;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_5:;
        Py_DECREF(tmp_right_value_5);
        goto try_except_handler_13;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_5:;
        tmp_raise_value_5 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_5, tmp_right_value_5);
        Py_DECREF(tmp_right_value_5);
        if (tmp_raise_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_13;
        }
        exception_type = tmp_raise_type_5;
        Py_INCREF(tmp_raise_type_5);
        exception_value = tmp_raise_value_5;
        exception_lineno = 99;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_13;
    }
    branch_no_20:;
    goto branch_end_19;
    branch_no_19:;
    {
        PyObject *tmp_assign_source_66;
        tmp_assign_source_66 = PyDict_New();
        assert(tmp_class_creation_3__prepared == NULL);
        tmp_class_creation_3__prepared = tmp_assign_source_66;
    }
    branch_end_19:;
    {
        PyObject *tmp_assign_source_67;
        {
            PyObject *tmp_set_locals_5;
            CHECK_OBJECT(tmp_class_creation_3__prepared);
            tmp_set_locals_5 = tmp_class_creation_3__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__5_Indexable_99 = tmp_set_locals_5;
            Py_INCREF(tmp_set_locals_5);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__5_Indexable_99, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_15;
        }
        tmp_dictset_value = mod_consts[431];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__5_Indexable_99, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_15;
        }
        tmp_dictset_value = mod_consts[430];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__5_Indexable_99, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_15;
        }
        if (isFrameUnusable(cache_frame_6a81b4411b72f8ba12a040659a794727_6)) {
            Py_XDECREF(cache_frame_6a81b4411b72f8ba12a040659a794727_6);

#if _DEBUG_REFCOUNTS
            if (cache_frame_6a81b4411b72f8ba12a040659a794727_6 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_6a81b4411b72f8ba12a040659a794727_6 = MAKE_FUNCTION_FRAME(codeobj_6a81b4411b72f8ba12a040659a794727, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_6a81b4411b72f8ba12a040659a794727_6->m_type_description == NULL);
        frame_6a81b4411b72f8ba12a040659a794727_6 = cache_frame_6a81b4411b72f8ba12a040659a794727_6;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_6a81b4411b72f8ba12a040659a794727_6);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_6a81b4411b72f8ba12a040659a794727_6) == 2); // Frame stack

        // Framed code:
        // Tried code:
        {
            PyObject *tmp_assign_source_68;
            PyObject *tmp_tuple_element_17;
            PyObject *tmp_expression_value_29;
            tmp_expression_value_29 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__5_Indexable_99, mod_consts[398]);

            if (tmp_expression_value_29 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_29 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[398]);

                    if (unlikely(tmp_expression_value_29 == NULL)) {
                        tmp_expression_value_29 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[398]);
                    }

                    if (tmp_expression_value_29 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 109;
                        type_description_2 = "o";
                        goto try_except_handler_16;
                    }
                    Py_INCREF(tmp_expression_value_29);
                } else {
                    goto try_except_handler_16;
                }
            }

            tmp_tuple_element_17 = LOOKUP_ATTRIBUTE(tmp_expression_value_29, mod_consts[9]);
            Py_DECREF(tmp_expression_value_29);
            if (tmp_tuple_element_17 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 109;
                type_description_2 = "o";
                goto try_except_handler_16;
            }
            tmp_assign_source_68 = PyTuple_New(1);
            PyTuple_SET_ITEM(tmp_assign_source_68, 0, tmp_tuple_element_17);
            assert(tmp_Indexable$class_creation_1__bases_orig == NULL);
            tmp_Indexable$class_creation_1__bases_orig = tmp_assign_source_68;
        }
        {
            PyObject *tmp_assign_source_69;
            PyObject *tmp_dircall_arg1_6;
            CHECK_OBJECT(tmp_Indexable$class_creation_1__bases_orig);
            tmp_dircall_arg1_6 = tmp_Indexable$class_creation_1__bases_orig;
            Py_INCREF(tmp_dircall_arg1_6);

            {
                PyObject *dir_call_args[] = {tmp_dircall_arg1_6};
                tmp_assign_source_69 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
            }
            if (tmp_assign_source_69 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 109;
                type_description_2 = "o";
                goto try_except_handler_16;
            }
            assert(tmp_Indexable$class_creation_1__bases == NULL);
            tmp_Indexable$class_creation_1__bases = tmp_assign_source_69;
        }
        {
            PyObject *tmp_assign_source_70;
            tmp_assign_source_70 = PyDict_New();
            assert(tmp_Indexable$class_creation_1__class_decl_dict == NULL);
            tmp_Indexable$class_creation_1__class_decl_dict = tmp_assign_source_70;
        }
        {
            PyObject *tmp_assign_source_71;
            PyObject *tmp_metaclass_value_6;
            bool tmp_condition_result_32;
            PyObject *tmp_key_value_16;
            PyObject *tmp_dict_arg_value_16;
            PyObject *tmp_dict_arg_value_17;
            PyObject *tmp_key_value_17;
            nuitka_bool tmp_condition_result_33;
            int tmp_truth_name_7;
            PyObject *tmp_type_arg_11;
            PyObject *tmp_expression_value_30;
            PyObject *tmp_subscript_value_6;
            PyObject *tmp_bases_value_6;
            tmp_key_value_16 = mod_consts[410];
            CHECK_OBJECT(tmp_Indexable$class_creation_1__class_decl_dict);
            tmp_dict_arg_value_16 = tmp_Indexable$class_creation_1__class_decl_dict;
            tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_16, tmp_key_value_16);
            assert(!(tmp_res == -1));
            tmp_condition_result_32 = (tmp_res != 0) ? true : false;
            if (tmp_condition_result_32 != false) {
                goto condexpr_true_12;
            } else {
                goto condexpr_false_12;
            }
            condexpr_true_12:;
            CHECK_OBJECT(tmp_Indexable$class_creation_1__class_decl_dict);
            tmp_dict_arg_value_17 = tmp_Indexable$class_creation_1__class_decl_dict;
            tmp_key_value_17 = mod_consts[410];
            tmp_metaclass_value_6 = DICT_GET_ITEM0(tmp_dict_arg_value_17, tmp_key_value_17);
            if (tmp_metaclass_value_6 == NULL) {
                tmp_metaclass_value_6 = Py_None;
            }
            assert(!(tmp_metaclass_value_6 == NULL));
            Py_INCREF(tmp_metaclass_value_6);
            goto condexpr_end_12;
            condexpr_false_12:;
            CHECK_OBJECT(tmp_Indexable$class_creation_1__bases);
            tmp_truth_name_7 = CHECK_IF_TRUE(tmp_Indexable$class_creation_1__bases);
            if (tmp_truth_name_7 == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 109;
                type_description_2 = "o";
                goto try_except_handler_16;
            }
            tmp_condition_result_33 = tmp_truth_name_7 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
            if (tmp_condition_result_33 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_13;
            } else {
                goto condexpr_false_13;
            }
            condexpr_true_13:;
            CHECK_OBJECT(tmp_Indexable$class_creation_1__bases);
            tmp_expression_value_30 = tmp_Indexable$class_creation_1__bases;
            tmp_subscript_value_6 = mod_consts[52];
            tmp_type_arg_11 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_30, tmp_subscript_value_6, 0);
            if (tmp_type_arg_11 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 109;
                type_description_2 = "o";
                goto try_except_handler_16;
            }
            tmp_metaclass_value_6 = BUILTIN_TYPE1(tmp_type_arg_11);
            Py_DECREF(tmp_type_arg_11);
            if (tmp_metaclass_value_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 109;
                type_description_2 = "o";
                goto try_except_handler_16;
            }
            goto condexpr_end_13;
            condexpr_false_13:;
            tmp_metaclass_value_6 = (PyObject *)&PyType_Type;
            Py_INCREF(tmp_metaclass_value_6);
            condexpr_end_13:;
            condexpr_end_12:;
            CHECK_OBJECT(tmp_Indexable$class_creation_1__bases);
            tmp_bases_value_6 = tmp_Indexable$class_creation_1__bases;
            tmp_assign_source_71 = SELECT_METACLASS(tmp_metaclass_value_6, tmp_bases_value_6);
            Py_DECREF(tmp_metaclass_value_6);
            if (tmp_assign_source_71 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 109;
                type_description_2 = "o";
                goto try_except_handler_16;
            }
            assert(tmp_Indexable$class_creation_1__metaclass == NULL);
            tmp_Indexable$class_creation_1__metaclass = tmp_assign_source_71;
        }
        {
            bool tmp_condition_result_34;
            PyObject *tmp_key_value_18;
            PyObject *tmp_dict_arg_value_18;
            tmp_key_value_18 = mod_consts[410];
            CHECK_OBJECT(tmp_Indexable$class_creation_1__class_decl_dict);
            tmp_dict_arg_value_18 = tmp_Indexable$class_creation_1__class_decl_dict;
            tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_18, tmp_key_value_18);
            assert(!(tmp_res == -1));
            tmp_condition_result_34 = (tmp_res != 0) ? true : false;
            if (tmp_condition_result_34 != false) {
                goto branch_yes_21;
            } else {
                goto branch_no_21;
            }
        }
        branch_yes_21:;
        CHECK_OBJECT(tmp_Indexable$class_creation_1__class_decl_dict);
        tmp_dictdel_dict = tmp_Indexable$class_creation_1__class_decl_dict;
        tmp_dictdel_key = mod_consts[410];
        tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 109;
            type_description_2 = "o";
            goto try_except_handler_16;
        }
        branch_no_21:;
        {
            nuitka_bool tmp_condition_result_35;
            PyObject *tmp_expression_value_31;
            CHECK_OBJECT(tmp_Indexable$class_creation_1__metaclass);
            tmp_expression_value_31 = tmp_Indexable$class_creation_1__metaclass;
            tmp_result = HAS_ATTR_BOOL(tmp_expression_value_31, mod_consts[411]);
            tmp_condition_result_35 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_35 == NUITKA_BOOL_TRUE) {
                goto branch_yes_22;
            } else {
                goto branch_no_22;
            }
        }
        branch_yes_22:;
        {
            PyObject *tmp_assign_source_72;
            PyObject *tmp_called_value_12;
            PyObject *tmp_expression_value_32;
            PyObject *tmp_args_value_10;
            PyObject *tmp_tuple_element_18;
            PyObject *tmp_kwargs_value_10;
            CHECK_OBJECT(tmp_Indexable$class_creation_1__metaclass);
            tmp_expression_value_32 = tmp_Indexable$class_creation_1__metaclass;
            tmp_called_value_12 = LOOKUP_ATTRIBUTE(tmp_expression_value_32, mod_consts[411]);
            if (tmp_called_value_12 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 109;
                type_description_2 = "o";
                goto try_except_handler_16;
            }
            tmp_tuple_element_18 = mod_consts[9];
            tmp_args_value_10 = PyTuple_New(2);
            PyTuple_SET_ITEM0(tmp_args_value_10, 0, tmp_tuple_element_18);
            CHECK_OBJECT(tmp_Indexable$class_creation_1__bases);
            tmp_tuple_element_18 = tmp_Indexable$class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_10, 1, tmp_tuple_element_18);
            CHECK_OBJECT(tmp_Indexable$class_creation_1__class_decl_dict);
            tmp_kwargs_value_10 = tmp_Indexable$class_creation_1__class_decl_dict;
            frame_6a81b4411b72f8ba12a040659a794727_6->m_frame.f_lineno = 109;
            tmp_assign_source_72 = CALL_FUNCTION(tmp_called_value_12, tmp_args_value_10, tmp_kwargs_value_10);
            Py_DECREF(tmp_called_value_12);
            Py_DECREF(tmp_args_value_10);
            if (tmp_assign_source_72 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 109;
                type_description_2 = "o";
                goto try_except_handler_16;
            }
            assert(tmp_Indexable$class_creation_1__prepared == NULL);
            tmp_Indexable$class_creation_1__prepared = tmp_assign_source_72;
        }
        {
            bool tmp_condition_result_36;
            PyObject *tmp_operand_value_6;
            PyObject *tmp_expression_value_33;
            CHECK_OBJECT(tmp_Indexable$class_creation_1__prepared);
            tmp_expression_value_33 = tmp_Indexable$class_creation_1__prepared;
            tmp_result = HAS_ATTR_BOOL(tmp_expression_value_33, mod_consts[413]);
            tmp_operand_value_6 = (tmp_result) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE(tmp_operand_value_6);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 109;
                type_description_2 = "o";
                goto try_except_handler_16;
            }
            tmp_condition_result_36 = (tmp_res == 0) ? true : false;
            if (tmp_condition_result_36 != false) {
                goto branch_yes_23;
            } else {
                goto branch_no_23;
            }
        }
        branch_yes_23:;
        {
            PyObject *tmp_raise_type_6;
            PyObject *tmp_raise_value_6;
            PyObject *tmp_left_value_6;
            PyObject *tmp_right_value_6;
            PyObject *tmp_tuple_element_19;
            PyObject *tmp_getattr_target_6;
            PyObject *tmp_getattr_attr_6;
            PyObject *tmp_getattr_default_6;
            tmp_raise_type_6 = PyExc_TypeError;
            tmp_left_value_6 = mod_consts[414];
            CHECK_OBJECT(tmp_Indexable$class_creation_1__metaclass);
            tmp_getattr_target_6 = tmp_Indexable$class_creation_1__metaclass;
            tmp_getattr_attr_6 = mod_consts[190];
            tmp_getattr_default_6 = mod_consts[415];
            tmp_tuple_element_19 = BUILTIN_GETATTR(tmp_getattr_target_6, tmp_getattr_attr_6, tmp_getattr_default_6);
            if (tmp_tuple_element_19 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 109;
                type_description_2 = "o";
                goto try_except_handler_16;
            }
            tmp_right_value_6 = PyTuple_New(2);
            {
                PyObject *tmp_expression_value_34;
                PyObject *tmp_type_arg_12;
                PyTuple_SET_ITEM(tmp_right_value_6, 0, tmp_tuple_element_19);
                CHECK_OBJECT(tmp_Indexable$class_creation_1__prepared);
                tmp_type_arg_12 = tmp_Indexable$class_creation_1__prepared;
                tmp_expression_value_34 = BUILTIN_TYPE1(tmp_type_arg_12);
                assert(!(tmp_expression_value_34 == NULL));
                tmp_tuple_element_19 = LOOKUP_ATTRIBUTE(tmp_expression_value_34, mod_consts[190]);
                Py_DECREF(tmp_expression_value_34);
                if (tmp_tuple_element_19 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 109;
                    type_description_2 = "o";
                    goto tuple_build_exception_6;
                }
                PyTuple_SET_ITEM(tmp_right_value_6, 1, tmp_tuple_element_19);
            }
            goto tuple_build_noexception_6;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_6:;
            Py_DECREF(tmp_right_value_6);
            goto try_except_handler_16;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_6:;
            tmp_raise_value_6 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_6, tmp_right_value_6);
            Py_DECREF(tmp_right_value_6);
            if (tmp_raise_value_6 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 109;
                type_description_2 = "o";
                goto try_except_handler_16;
            }
            exception_type = tmp_raise_type_6;
            Py_INCREF(tmp_raise_type_6);
            exception_value = tmp_raise_value_6;
            exception_lineno = 109;
            RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);
            type_description_2 = "o";
            goto try_except_handler_16;
        }
        branch_no_23:;
        goto branch_end_22;
        branch_no_22:;
        {
            PyObject *tmp_assign_source_73;
            tmp_assign_source_73 = PyDict_New();
            assert(tmp_Indexable$class_creation_1__prepared == NULL);
            tmp_Indexable$class_creation_1__prepared = tmp_assign_source_73;
        }
        branch_end_22:;
        {
            PyObject *tmp_set_locals_6;
            CHECK_OBJECT(tmp_Indexable$class_creation_1__prepared);
            tmp_set_locals_6 = tmp_Indexable$class_creation_1__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__6_Comparator_109 = tmp_set_locals_6;
            Py_INCREF(tmp_set_locals_6);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__6_Comparator_109, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 109;
            type_description_2 = "o";
            goto try_except_handler_18;
        }
        tmp_dictset_value = mod_consts[432];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__6_Comparator_109, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 109;
            type_description_2 = "o";
            goto try_except_handler_18;
        }
        if (isFrameUnusable(cache_frame_5d739de253f397ad2ea22421f2a9365e_7)) {
            Py_XDECREF(cache_frame_5d739de253f397ad2ea22421f2a9365e_7);

#if _DEBUG_REFCOUNTS
            if (cache_frame_5d739de253f397ad2ea22421f2a9365e_7 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_5d739de253f397ad2ea22421f2a9365e_7 = MAKE_FUNCTION_FRAME(codeobj_5d739de253f397ad2ea22421f2a9365e, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_5d739de253f397ad2ea22421f2a9365e_7->m_type_description == NULL);
        frame_5d739de253f397ad2ea22421f2a9365e_7 = cache_frame_5d739de253f397ad2ea22421f2a9365e_7;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_5d739de253f397ad2ea22421f2a9365e_7);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_5d739de253f397ad2ea22421f2a9365e_7) == 2); // Frame stack

        // Framed code:


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__4__setup_getitem();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__6_Comparator_109, mod_consts[14], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 110;
            type_description_3 = "o";
            goto frame_exception_exit_7;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__5___getitem__();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__6_Comparator_109, mod_consts[413], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 113;
            type_description_3 = "o";
            goto frame_exception_exit_7;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_5d739de253f397ad2ea22421f2a9365e_7);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_5;

        frame_exception_exit_7:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_5d739de253f397ad2ea22421f2a9365e_7);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_5d739de253f397ad2ea22421f2a9365e_7, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_5d739de253f397ad2ea22421f2a9365e_7->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_5d739de253f397ad2ea22421f2a9365e_7, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_5d739de253f397ad2ea22421f2a9365e_7,
            type_description_3,
            outline_5_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_5d739de253f397ad2ea22421f2a9365e_7 == cache_frame_5d739de253f397ad2ea22421f2a9365e_7) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_5d739de253f397ad2ea22421f2a9365e_7);
            cache_frame_5d739de253f397ad2ea22421f2a9365e_7 = NULL;
        }

        assertFrameObject(frame_5d739de253f397ad2ea22421f2a9365e_7);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_6;

        frame_no_exception_5:;
        goto skip_nested_handling_5;
        nested_frame_exit_6:;
        type_description_2 = "o";
        goto try_except_handler_18;
        skip_nested_handling_5:;
        {
            nuitka_bool tmp_condition_result_37;
            PyObject *tmp_cmp_expr_left_5;
            PyObject *tmp_cmp_expr_right_5;
            CHECK_OBJECT(tmp_Indexable$class_creation_1__bases);
            tmp_cmp_expr_left_5 = tmp_Indexable$class_creation_1__bases;
            CHECK_OBJECT(tmp_Indexable$class_creation_1__bases_orig);
            tmp_cmp_expr_right_5 = tmp_Indexable$class_creation_1__bases_orig;
            tmp_condition_result_37 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_5, tmp_cmp_expr_right_5);
            if (tmp_condition_result_37 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 109;
                type_description_2 = "o";
                goto try_except_handler_18;
            }
            if (tmp_condition_result_37 == NUITKA_BOOL_TRUE) {
                goto branch_yes_24;
            } else {
                goto branch_no_24;
            }
            assert(tmp_condition_result_37 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_24:;
        CHECK_OBJECT(tmp_Indexable$class_creation_1__bases_orig);
        tmp_dictset_value = tmp_Indexable$class_creation_1__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__6_Comparator_109, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 109;
            type_description_2 = "o";
            goto try_except_handler_18;
        }
        branch_no_24:;
        {
            PyObject *tmp_assign_source_74;
            PyObject *tmp_called_value_13;
            PyObject *tmp_args_value_11;
            PyObject *tmp_tuple_element_20;
            PyObject *tmp_kwargs_value_11;
            CHECK_OBJECT(tmp_Indexable$class_creation_1__metaclass);
            tmp_called_value_13 = tmp_Indexable$class_creation_1__metaclass;
            tmp_tuple_element_20 = mod_consts[9];
            tmp_args_value_11 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_11, 0, tmp_tuple_element_20);
            CHECK_OBJECT(tmp_Indexable$class_creation_1__bases);
            tmp_tuple_element_20 = tmp_Indexable$class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_11, 1, tmp_tuple_element_20);
            tmp_tuple_element_20 = locals_sqlalchemy$sql$sqltypes$$$class__6_Comparator_109;
            PyTuple_SET_ITEM0(tmp_args_value_11, 2, tmp_tuple_element_20);
            CHECK_OBJECT(tmp_Indexable$class_creation_1__class_decl_dict);
            tmp_kwargs_value_11 = tmp_Indexable$class_creation_1__class_decl_dict;
            frame_6a81b4411b72f8ba12a040659a794727_6->m_frame.f_lineno = 109;
            tmp_assign_source_74 = CALL_FUNCTION(tmp_called_value_13, tmp_args_value_11, tmp_kwargs_value_11);
            Py_DECREF(tmp_args_value_11);
            if (tmp_assign_source_74 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 109;
                type_description_2 = "o";
                goto try_except_handler_18;
            }
            assert(outline_5_var___class__ == NULL);
            outline_5_var___class__ = tmp_assign_source_74;
        }
        CHECK_OBJECT(outline_5_var___class__);
        tmp_dictset_value = outline_5_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_18;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_18:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__6_Comparator_109);
        locals_sqlalchemy$sql$sqltypes$$$class__6_Comparator_109 = NULL;
        goto try_return_handler_17;
        // Exception handler code:
        try_except_handler_18:;
        exception_keeper_type_13 = exception_type;
        exception_keeper_value_13 = exception_value;
        exception_keeper_tb_13 = exception_tb;
        exception_keeper_lineno_13 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__6_Comparator_109);
        locals_sqlalchemy$sql$sqltypes$$$class__6_Comparator_109 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_13;
        exception_value = exception_keeper_value_13;
        exception_tb = exception_keeper_tb_13;
        exception_lineno = exception_keeper_lineno_13;

        goto try_except_handler_17;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_17:;
        CHECK_OBJECT(outline_5_var___class__);
        Py_DECREF(outline_5_var___class__);
        outline_5_var___class__ = NULL;
        goto outline_result_6;
        // Exception handler code:
        try_except_handler_17:;
        exception_keeper_type_14 = exception_type;
        exception_keeper_value_14 = exception_value;
        exception_keeper_tb_14 = exception_tb;
        exception_keeper_lineno_14 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_14;
        exception_value = exception_keeper_value_14;
        exception_tb = exception_keeper_tb_14;
        exception_lineno = exception_keeper_lineno_14;

        goto outline_exception_6;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_6:;
        exception_lineno = 109;
        goto try_except_handler_16;
        outline_result_6:;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__5_Indexable_99, mod_consts[9], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 109;
            type_description_2 = "o";
            goto try_except_handler_16;
        }
        goto try_end_5;
        // Exception handler code:
        try_except_handler_16:;
        exception_keeper_type_15 = exception_type;
        exception_keeper_value_15 = exception_value;
        exception_keeper_tb_15 = exception_tb;
        exception_keeper_lineno_15 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_Indexable$class_creation_1__bases_orig);
        tmp_Indexable$class_creation_1__bases_orig = NULL;
        Py_XDECREF(tmp_Indexable$class_creation_1__bases);
        tmp_Indexable$class_creation_1__bases = NULL;
        Py_XDECREF(tmp_Indexable$class_creation_1__class_decl_dict);
        tmp_Indexable$class_creation_1__class_decl_dict = NULL;
        Py_XDECREF(tmp_Indexable$class_creation_1__metaclass);
        tmp_Indexable$class_creation_1__metaclass = NULL;
        Py_XDECREF(tmp_Indexable$class_creation_1__prepared);
        tmp_Indexable$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_15;
        exception_value = exception_keeper_value_15;
        exception_tb = exception_keeper_tb_15;
        exception_lineno = exception_keeper_lineno_15;

        goto frame_exception_exit_6;
        // End of try:
        try_end_5:;
        CHECK_OBJECT(tmp_Indexable$class_creation_1__bases_orig);
        Py_DECREF(tmp_Indexable$class_creation_1__bases_orig);
        tmp_Indexable$class_creation_1__bases_orig = NULL;
        CHECK_OBJECT(tmp_Indexable$class_creation_1__bases);
        Py_DECREF(tmp_Indexable$class_creation_1__bases);
        tmp_Indexable$class_creation_1__bases = NULL;
        CHECK_OBJECT(tmp_Indexable$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_Indexable$class_creation_1__class_decl_dict);
        tmp_Indexable$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_Indexable$class_creation_1__metaclass);
        Py_DECREF(tmp_Indexable$class_creation_1__metaclass);
        tmp_Indexable$class_creation_1__metaclass = NULL;
        CHECK_OBJECT(tmp_Indexable$class_creation_1__prepared);
        Py_DECREF(tmp_Indexable$class_creation_1__prepared);
        tmp_Indexable$class_creation_1__prepared = NULL;
        tmp_dictset_value = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__5_Indexable_99, mod_consts[9]);

        if (unlikely(tmp_dictset_value == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

            FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[9]);
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 123;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }

        if (tmp_dictset_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 123;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__5_Indexable_99, mod_consts[426], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 123;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_6a81b4411b72f8ba12a040659a794727_6);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_6;

        frame_exception_exit_6:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_6a81b4411b72f8ba12a040659a794727_6);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_6a81b4411b72f8ba12a040659a794727_6, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_6a81b4411b72f8ba12a040659a794727_6->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_6a81b4411b72f8ba12a040659a794727_6, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_6a81b4411b72f8ba12a040659a794727_6,
            type_description_2,
            outline_4_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_6a81b4411b72f8ba12a040659a794727_6 == cache_frame_6a81b4411b72f8ba12a040659a794727_6) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_6a81b4411b72f8ba12a040659a794727_6);
            cache_frame_6a81b4411b72f8ba12a040659a794727_6 = NULL;
        }

        assertFrameObject(frame_6a81b4411b72f8ba12a040659a794727_6);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_5;

        frame_no_exception_6:;
        goto skip_nested_handling_6;
        nested_frame_exit_5:;

        goto try_except_handler_15;
        skip_nested_handling_6:;
        {
            nuitka_bool tmp_condition_result_38;
            PyObject *tmp_cmp_expr_left_6;
            PyObject *tmp_cmp_expr_right_6;
            CHECK_OBJECT(tmp_class_creation_3__bases);
            tmp_cmp_expr_left_6 = tmp_class_creation_3__bases;
            tmp_cmp_expr_right_6 = mod_consts[409];
            tmp_condition_result_38 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_6, tmp_cmp_expr_right_6);
            if (tmp_condition_result_38 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 99;

                goto try_except_handler_15;
            }
            if (tmp_condition_result_38 == NUITKA_BOOL_TRUE) {
                goto branch_yes_25;
            } else {
                goto branch_no_25;
            }
            assert(tmp_condition_result_38 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_25:;
        tmp_dictset_value = mod_consts[409];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__5_Indexable_99, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 99;

            goto try_except_handler_15;
        }
        branch_no_25:;
        {
            PyObject *tmp_assign_source_75;
            PyObject *tmp_called_value_14;
            PyObject *tmp_args_value_12;
            PyObject *tmp_tuple_element_21;
            PyObject *tmp_kwargs_value_12;
            CHECK_OBJECT(tmp_class_creation_3__metaclass);
            tmp_called_value_14 = tmp_class_creation_3__metaclass;
            tmp_tuple_element_21 = mod_consts[430];
            tmp_args_value_12 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_12, 0, tmp_tuple_element_21);
            CHECK_OBJECT(tmp_class_creation_3__bases);
            tmp_tuple_element_21 = tmp_class_creation_3__bases;
            PyTuple_SET_ITEM0(tmp_args_value_12, 1, tmp_tuple_element_21);
            tmp_tuple_element_21 = locals_sqlalchemy$sql$sqltypes$$$class__5_Indexable_99;
            PyTuple_SET_ITEM0(tmp_args_value_12, 2, tmp_tuple_element_21);
            CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
            tmp_kwargs_value_12 = tmp_class_creation_3__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 99;
            tmp_assign_source_75 = CALL_FUNCTION(tmp_called_value_14, tmp_args_value_12, tmp_kwargs_value_12);
            Py_DECREF(tmp_args_value_12);
            if (tmp_assign_source_75 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 99;

                goto try_except_handler_15;
            }
            assert(outline_4_var___class__ == NULL);
            outline_4_var___class__ = tmp_assign_source_75;
        }
        CHECK_OBJECT(outline_4_var___class__);
        tmp_assign_source_67 = outline_4_var___class__;
        Py_INCREF(tmp_assign_source_67);
        goto try_return_handler_15;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_15:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__5_Indexable_99);
        locals_sqlalchemy$sql$sqltypes$$$class__5_Indexable_99 = NULL;
        goto try_return_handler_14;
        // Exception handler code:
        try_except_handler_15:;
        exception_keeper_type_16 = exception_type;
        exception_keeper_value_16 = exception_value;
        exception_keeper_tb_16 = exception_tb;
        exception_keeper_lineno_16 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__5_Indexable_99);
        locals_sqlalchemy$sql$sqltypes$$$class__5_Indexable_99 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_16;
        exception_value = exception_keeper_value_16;
        exception_tb = exception_keeper_tb_16;
        exception_lineno = exception_keeper_lineno_16;

        goto try_except_handler_14;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_14:;
        CHECK_OBJECT(outline_4_var___class__);
        Py_DECREF(outline_4_var___class__);
        outline_4_var___class__ = NULL;
        goto outline_result_5;
        // Exception handler code:
        try_except_handler_14:;
        exception_keeper_type_17 = exception_type;
        exception_keeper_value_17 = exception_value;
        exception_keeper_tb_17 = exception_tb;
        exception_keeper_lineno_17 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_17;
        exception_value = exception_keeper_value_17;
        exception_tb = exception_keeper_tb_17;
        exception_lineno = exception_keeper_lineno_17;

        goto outline_exception_5;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_5:;
        exception_lineno = 99;
        goto try_except_handler_13;
        outline_result_5:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[430], tmp_assign_source_67);
    }
    goto try_end_6;
    // Exception handler code:
    try_except_handler_13:;
    exception_keeper_type_18 = exception_type;
    exception_keeper_value_18 = exception_value;
    exception_keeper_tb_18 = exception_tb;
    exception_keeper_lineno_18 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_3__bases);
    tmp_class_creation_3__bases = NULL;
    Py_XDECREF(tmp_class_creation_3__class_decl_dict);
    tmp_class_creation_3__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_3__metaclass);
    tmp_class_creation_3__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_3__prepared);
    tmp_class_creation_3__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_18;
    exception_value = exception_keeper_value_18;
    exception_tb = exception_keeper_tb_18;
    exception_lineno = exception_keeper_lineno_18;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    CHECK_OBJECT(tmp_class_creation_3__bases);
    Py_DECREF(tmp_class_creation_3__bases);
    tmp_class_creation_3__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
    Py_DECREF(tmp_class_creation_3__class_decl_dict);
    tmp_class_creation_3__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_3__metaclass);
    Py_DECREF(tmp_class_creation_3__metaclass);
    tmp_class_creation_3__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_3__prepared);
    Py_DECREF(tmp_class_creation_3__prepared);
    tmp_class_creation_3__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_76;
        PyObject *tmp_tuple_element_22;
        tmp_tuple_element_22 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[8]);

        if (unlikely(tmp_tuple_element_22 == NULL)) {
            tmp_tuple_element_22 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[8]);
        }

        if (tmp_tuple_element_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_19;
        }
        tmp_assign_source_76 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_assign_source_76, 0, tmp_tuple_element_22);
        tmp_tuple_element_22 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[398]);

        if (unlikely(tmp_tuple_element_22 == NULL)) {
            tmp_tuple_element_22 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[398]);
        }

        if (tmp_tuple_element_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto tuple_build_exception_7;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_76, 1, tmp_tuple_element_22);
        goto tuple_build_noexception_7;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_7:;
        Py_DECREF(tmp_assign_source_76);
        goto try_except_handler_19;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_7:;
        assert(tmp_class_creation_4__bases_orig == NULL);
        tmp_class_creation_4__bases_orig = tmp_assign_source_76;
    }
    {
        PyObject *tmp_assign_source_77;
        PyObject *tmp_dircall_arg1_7;
        CHECK_OBJECT(tmp_class_creation_4__bases_orig);
        tmp_dircall_arg1_7 = tmp_class_creation_4__bases_orig;
        Py_INCREF(tmp_dircall_arg1_7);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_7};
            tmp_assign_source_77 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_77 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_19;
        }
        assert(tmp_class_creation_4__bases == NULL);
        tmp_class_creation_4__bases = tmp_assign_source_77;
    }
    {
        PyObject *tmp_assign_source_78;
        tmp_assign_source_78 = PyDict_New();
        assert(tmp_class_creation_4__class_decl_dict == NULL);
        tmp_class_creation_4__class_decl_dict = tmp_assign_source_78;
    }
    {
        PyObject *tmp_assign_source_79;
        PyObject *tmp_metaclass_value_7;
        bool tmp_condition_result_39;
        PyObject *tmp_key_value_19;
        PyObject *tmp_dict_arg_value_19;
        PyObject *tmp_dict_arg_value_20;
        PyObject *tmp_key_value_20;
        nuitka_bool tmp_condition_result_40;
        int tmp_truth_name_8;
        PyObject *tmp_type_arg_13;
        PyObject *tmp_expression_value_35;
        PyObject *tmp_subscript_value_7;
        PyObject *tmp_bases_value_7;
        tmp_key_value_19 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
        tmp_dict_arg_value_19 = tmp_class_creation_4__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_19, tmp_key_value_19);
        assert(!(tmp_res == -1));
        tmp_condition_result_39 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_39 != false) {
            goto condexpr_true_14;
        } else {
            goto condexpr_false_14;
        }
        condexpr_true_14:;
        CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
        tmp_dict_arg_value_20 = tmp_class_creation_4__class_decl_dict;
        tmp_key_value_20 = mod_consts[410];
        tmp_metaclass_value_7 = DICT_GET_ITEM0(tmp_dict_arg_value_20, tmp_key_value_20);
        if (tmp_metaclass_value_7 == NULL) {
            tmp_metaclass_value_7 = Py_None;
        }
        assert(!(tmp_metaclass_value_7 == NULL));
        Py_INCREF(tmp_metaclass_value_7);
        goto condexpr_end_14;
        condexpr_false_14:;
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_truth_name_8 = CHECK_IF_TRUE(tmp_class_creation_4__bases);
        if (tmp_truth_name_8 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_19;
        }
        tmp_condition_result_40 = tmp_truth_name_8 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_40 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_15;
        } else {
            goto condexpr_false_15;
        }
        condexpr_true_15:;
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_expression_value_35 = tmp_class_creation_4__bases;
        tmp_subscript_value_7 = mod_consts[52];
        tmp_type_arg_13 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_35, tmp_subscript_value_7, 0);
        if (tmp_type_arg_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_19;
        }
        tmp_metaclass_value_7 = BUILTIN_TYPE1(tmp_type_arg_13);
        Py_DECREF(tmp_type_arg_13);
        if (tmp_metaclass_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_19;
        }
        goto condexpr_end_15;
        condexpr_false_15:;
        tmp_metaclass_value_7 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_7);
        condexpr_end_15:;
        condexpr_end_14:;
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_bases_value_7 = tmp_class_creation_4__bases;
        tmp_assign_source_79 = SELECT_METACLASS(tmp_metaclass_value_7, tmp_bases_value_7);
        Py_DECREF(tmp_metaclass_value_7);
        if (tmp_assign_source_79 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_19;
        }
        assert(tmp_class_creation_4__metaclass == NULL);
        tmp_class_creation_4__metaclass = tmp_assign_source_79;
    }
    {
        bool tmp_condition_result_41;
        PyObject *tmp_key_value_21;
        PyObject *tmp_dict_arg_value_21;
        tmp_key_value_21 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
        tmp_dict_arg_value_21 = tmp_class_creation_4__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_21, tmp_key_value_21);
        assert(!(tmp_res == -1));
        tmp_condition_result_41 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_41 != false) {
            goto branch_yes_26;
        } else {
            goto branch_no_26;
        }
    }
    branch_yes_26:;
    CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_4__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 126;

        goto try_except_handler_19;
    }
    branch_no_26:;
    {
        nuitka_bool tmp_condition_result_42;
        PyObject *tmp_expression_value_36;
        CHECK_OBJECT(tmp_class_creation_4__metaclass);
        tmp_expression_value_36 = tmp_class_creation_4__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_36, mod_consts[411]);
        tmp_condition_result_42 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_42 == NUITKA_BOOL_TRUE) {
            goto branch_yes_27;
        } else {
            goto branch_no_27;
        }
    }
    branch_yes_27:;
    {
        PyObject *tmp_assign_source_80;
        PyObject *tmp_called_value_15;
        PyObject *tmp_expression_value_37;
        PyObject *tmp_args_value_13;
        PyObject *tmp_tuple_element_23;
        PyObject *tmp_kwargs_value_13;
        CHECK_OBJECT(tmp_class_creation_4__metaclass);
        tmp_expression_value_37 = tmp_class_creation_4__metaclass;
        tmp_called_value_15 = LOOKUP_ATTRIBUTE(tmp_expression_value_37, mod_consts[411]);
        if (tmp_called_value_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_19;
        }
        tmp_tuple_element_23 = mod_consts[215];
        tmp_args_value_13 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_13, 0, tmp_tuple_element_23);
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_tuple_element_23 = tmp_class_creation_4__bases;
        PyTuple_SET_ITEM0(tmp_args_value_13, 1, tmp_tuple_element_23);
        CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
        tmp_kwargs_value_13 = tmp_class_creation_4__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 126;
        tmp_assign_source_80 = CALL_FUNCTION(tmp_called_value_15, tmp_args_value_13, tmp_kwargs_value_13);
        Py_DECREF(tmp_called_value_15);
        Py_DECREF(tmp_args_value_13);
        if (tmp_assign_source_80 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_19;
        }
        assert(tmp_class_creation_4__prepared == NULL);
        tmp_class_creation_4__prepared = tmp_assign_source_80;
    }
    {
        bool tmp_condition_result_43;
        PyObject *tmp_operand_value_7;
        PyObject *tmp_expression_value_38;
        CHECK_OBJECT(tmp_class_creation_4__prepared);
        tmp_expression_value_38 = tmp_class_creation_4__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_38, mod_consts[413]);
        tmp_operand_value_7 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_7);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_19;
        }
        tmp_condition_result_43 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_43 != false) {
            goto branch_yes_28;
        } else {
            goto branch_no_28;
        }
    }
    branch_yes_28:;
    {
        PyObject *tmp_raise_type_7;
        PyObject *tmp_raise_value_7;
        PyObject *tmp_left_value_7;
        PyObject *tmp_right_value_7;
        PyObject *tmp_tuple_element_24;
        PyObject *tmp_getattr_target_7;
        PyObject *tmp_getattr_attr_7;
        PyObject *tmp_getattr_default_7;
        tmp_raise_type_7 = PyExc_TypeError;
        tmp_left_value_7 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_4__metaclass);
        tmp_getattr_target_7 = tmp_class_creation_4__metaclass;
        tmp_getattr_attr_7 = mod_consts[190];
        tmp_getattr_default_7 = mod_consts[415];
        tmp_tuple_element_24 = BUILTIN_GETATTR(tmp_getattr_target_7, tmp_getattr_attr_7, tmp_getattr_default_7);
        if (tmp_tuple_element_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_19;
        }
        tmp_right_value_7 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_39;
            PyObject *tmp_type_arg_14;
            PyTuple_SET_ITEM(tmp_right_value_7, 0, tmp_tuple_element_24);
            CHECK_OBJECT(tmp_class_creation_4__prepared);
            tmp_type_arg_14 = tmp_class_creation_4__prepared;
            tmp_expression_value_39 = BUILTIN_TYPE1(tmp_type_arg_14);
            assert(!(tmp_expression_value_39 == NULL));
            tmp_tuple_element_24 = LOOKUP_ATTRIBUTE(tmp_expression_value_39, mod_consts[190]);
            Py_DECREF(tmp_expression_value_39);
            if (tmp_tuple_element_24 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 126;

                goto tuple_build_exception_8;
            }
            PyTuple_SET_ITEM(tmp_right_value_7, 1, tmp_tuple_element_24);
        }
        goto tuple_build_noexception_8;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_8:;
        Py_DECREF(tmp_right_value_7);
        goto try_except_handler_19;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_8:;
        tmp_raise_value_7 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_7, tmp_right_value_7);
        Py_DECREF(tmp_right_value_7);
        if (tmp_raise_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_19;
        }
        exception_type = tmp_raise_type_7;
        Py_INCREF(tmp_raise_type_7);
        exception_value = tmp_raise_value_7;
        exception_lineno = 126;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_19;
    }
    branch_no_28:;
    goto branch_end_27;
    branch_no_27:;
    {
        PyObject *tmp_assign_source_81;
        tmp_assign_source_81 = PyDict_New();
        assert(tmp_class_creation_4__prepared == NULL);
        tmp_class_creation_4__prepared = tmp_assign_source_81;
    }
    branch_end_27:;
    {
        PyObject *tmp_assign_source_82;
        {
            PyObject *tmp_set_locals_7;
            CHECK_OBJECT(tmp_class_creation_4__prepared);
            tmp_set_locals_7 = tmp_class_creation_4__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__7_String_126 = tmp_set_locals_7;
            Py_INCREF(tmp_set_locals_7);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_21;
        }
        tmp_dictset_value = mod_consts[435];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_21;
        }
        tmp_dictset_value = mod_consts[215];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_21;
        }
        if (isFrameUnusable(cache_frame_92c838af8031dc4aabf281f989df2263_8)) {
            Py_XDECREF(cache_frame_92c838af8031dc4aabf281f989df2263_8);

#if _DEBUG_REFCOUNTS
            if (cache_frame_92c838af8031dc4aabf281f989df2263_8 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_92c838af8031dc4aabf281f989df2263_8 = MAKE_FUNCTION_FRAME(codeobj_92c838af8031dc4aabf281f989df2263, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_92c838af8031dc4aabf281f989df2263_8->m_type_description == NULL);
        frame_92c838af8031dc4aabf281f989df2263_8 = cache_frame_92c838af8031dc4aabf281f989df2263_8;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_92c838af8031dc4aabf281f989df2263_8);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_92c838af8031dc4aabf281f989df2263_8) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[436];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 140;
            type_description_2 = "o";
            goto frame_exception_exit_8;
        }
        {
            PyObject *tmp_called_value_16;
            PyObject *tmp_called_value_17;
            PyObject *tmp_expression_value_40;
            PyObject *tmp_args_element_value_3;
            PyObject *tmp_defaults_1;
            tmp_expression_value_40 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[43]);

            if (tmp_expression_value_40 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_40 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_expression_value_40 == NULL)) {
                        tmp_expression_value_40 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
                    }

                    if (tmp_expression_value_40 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 142;
                        type_description_2 = "o";
                        goto frame_exception_exit_8;
                    }
                    Py_INCREF(tmp_expression_value_40);
                } else {
                    goto frame_exception_exit_8;
                }
            }

            tmp_called_value_17 = LOOKUP_ATTRIBUTE(tmp_expression_value_40, mod_consts[438]);
            Py_DECREF(tmp_expression_value_40);
            if (tmp_called_value_17 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 142;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
            frame_92c838af8031dc4aabf281f989df2263_8->m_frame.f_lineno = 142;
            tmp_called_value_16 = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tmp_called_value_17, &PyTuple_GET_ITEM(mod_consts[439], 0), mod_consts[440]);
            Py_DECREF(tmp_called_value_17);
            if (tmp_called_value_16 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 142;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
            tmp_defaults_1 = mod_consts[441];
            Py_INCREF(tmp_defaults_1);


            tmp_args_element_value_3 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__6___init__(tmp_defaults_1);

            frame_92c838af8031dc4aabf281f989df2263_8->m_frame.f_lineno = 142;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_16, tmp_args_element_value_3);
            Py_DECREF(tmp_called_value_16);
            Py_DECREF(tmp_args_element_value_3);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 142;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[66], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 158;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__7_literal_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[228], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 247;
            type_description_2 = "o";
            goto frame_exception_exit_8;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__8_bind_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[232], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 258;
            type_description_2 = "o";
            goto frame_exception_exit_8;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__9_result_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[233], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 297;
            type_description_2 = "o";
            goto frame_exception_exit_8;
        }
        {
            nuitka_bool tmp_condition_result_44;
            PyObject *tmp_called_value_18;
            PyObject *tmp_args_element_value_4;
            PyObject *tmp_called_value_19;
            PyObject *tmp_args_element_value_5;
            tmp_res = MAPPING_HAS_ITEM(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[420]);

            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 320;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
            tmp_condition_result_44 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_44 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_16;
            } else {
                goto condexpr_false_16;
            }
            condexpr_true_16:;
            tmp_called_value_18 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[420]);

            if (unlikely(tmp_called_value_18 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[420]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 320;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }

            if (tmp_called_value_18 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 320;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }


            tmp_args_element_value_4 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__10_python_type();

            frame_92c838af8031dc4aabf281f989df2263_8->m_frame.f_lineno = 320;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_18, tmp_args_element_value_4);
            Py_DECREF(tmp_called_value_18);
            Py_DECREF(tmp_args_element_value_4);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 320;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
            goto condexpr_end_16;
            condexpr_false_16:;
            tmp_called_value_19 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_5 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__10_python_type();

            frame_92c838af8031dc4aabf281f989df2263_8->m_frame.f_lineno = 320;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_19, tmp_args_element_value_5);
            Py_DECREF(tmp_args_element_value_5);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 320;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
            condexpr_end_16:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[236], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 321;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__11_get_dbapi_type();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[447], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 327;
            type_description_2 = "o";
            goto frame_exception_exit_8;
        }
        {
            nuitka_bool tmp_condition_result_45;
            PyObject *tmp_called_value_20;
            PyObject *tmp_args_element_value_6;
            PyObject *tmp_classmethod_arg_1;
            tmp_res = MAPPING_HAS_ITEM(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[449]);

            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 330;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
            tmp_condition_result_45 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_45 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_17;
            } else {
                goto condexpr_false_17;
            }
            condexpr_true_17:;
            tmp_called_value_20 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[449]);

            if (unlikely(tmp_called_value_20 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[449]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 330;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }

            if (tmp_called_value_20 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 330;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }


            tmp_args_element_value_6 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__12__warn_deprecated_unicode();

            frame_92c838af8031dc4aabf281f989df2263_8->m_frame.f_lineno = 330;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_20, tmp_args_element_value_6);
            Py_DECREF(tmp_called_value_20);
            Py_DECREF(tmp_args_element_value_6);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 330;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
            goto condexpr_end_17;
            condexpr_false_17:;


            tmp_classmethod_arg_1 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__12__warn_deprecated_unicode();

            tmp_dictset_value = BUILTIN_CLASSMETHOD(tmp_classmethod_arg_1);
            Py_DECREF(tmp_classmethod_arg_1);
            assert(!(tmp_dictset_value == NULL));
            condexpr_end_17:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[450], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 331;
                type_description_2 = "o";
                goto frame_exception_exit_8;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_92c838af8031dc4aabf281f989df2263_8);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_7;

        frame_exception_exit_8:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_92c838af8031dc4aabf281f989df2263_8);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_92c838af8031dc4aabf281f989df2263_8, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_92c838af8031dc4aabf281f989df2263_8->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_92c838af8031dc4aabf281f989df2263_8, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_92c838af8031dc4aabf281f989df2263_8,
            type_description_2,
            outline_6_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_92c838af8031dc4aabf281f989df2263_8 == cache_frame_92c838af8031dc4aabf281f989df2263_8) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_92c838af8031dc4aabf281f989df2263_8);
            cache_frame_92c838af8031dc4aabf281f989df2263_8 = NULL;
        }

        assertFrameObject(frame_92c838af8031dc4aabf281f989df2263_8);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_7;

        frame_no_exception_7:;
        goto skip_nested_handling_7;
        nested_frame_exit_7:;

        goto try_except_handler_21;
        skip_nested_handling_7:;
        {
            nuitka_bool tmp_condition_result_46;
            PyObject *tmp_cmp_expr_left_7;
            PyObject *tmp_cmp_expr_right_7;
            CHECK_OBJECT(tmp_class_creation_4__bases);
            tmp_cmp_expr_left_7 = tmp_class_creation_4__bases;
            CHECK_OBJECT(tmp_class_creation_4__bases_orig);
            tmp_cmp_expr_right_7 = tmp_class_creation_4__bases_orig;
            tmp_condition_result_46 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_7, tmp_cmp_expr_right_7);
            if (tmp_condition_result_46 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 126;

                goto try_except_handler_21;
            }
            if (tmp_condition_result_46 == NUITKA_BOOL_TRUE) {
                goto branch_yes_29;
            } else {
                goto branch_no_29;
            }
            assert(tmp_condition_result_46 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_29:;
        CHECK_OBJECT(tmp_class_creation_4__bases_orig);
        tmp_dictset_value = tmp_class_creation_4__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;

            goto try_except_handler_21;
        }
        branch_no_29:;
        {
            PyObject *tmp_assign_source_83;
            PyObject *tmp_called_value_21;
            PyObject *tmp_args_value_14;
            PyObject *tmp_tuple_element_25;
            PyObject *tmp_kwargs_value_14;
            CHECK_OBJECT(tmp_class_creation_4__metaclass);
            tmp_called_value_21 = tmp_class_creation_4__metaclass;
            tmp_tuple_element_25 = mod_consts[215];
            tmp_args_value_14 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_14, 0, tmp_tuple_element_25);
            CHECK_OBJECT(tmp_class_creation_4__bases);
            tmp_tuple_element_25 = tmp_class_creation_4__bases;
            PyTuple_SET_ITEM0(tmp_args_value_14, 1, tmp_tuple_element_25);
            tmp_tuple_element_25 = locals_sqlalchemy$sql$sqltypes$$$class__7_String_126;
            PyTuple_SET_ITEM0(tmp_args_value_14, 2, tmp_tuple_element_25);
            CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
            tmp_kwargs_value_14 = tmp_class_creation_4__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 126;
            tmp_assign_source_83 = CALL_FUNCTION(tmp_called_value_21, tmp_args_value_14, tmp_kwargs_value_14);
            Py_DECREF(tmp_args_value_14);
            if (tmp_assign_source_83 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 126;

                goto try_except_handler_21;
            }
            assert(outline_6_var___class__ == NULL);
            outline_6_var___class__ = tmp_assign_source_83;
        }
        CHECK_OBJECT(outline_6_var___class__);
        tmp_assign_source_82 = outline_6_var___class__;
        Py_INCREF(tmp_assign_source_82);
        goto try_return_handler_21;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_21:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126);
        locals_sqlalchemy$sql$sqltypes$$$class__7_String_126 = NULL;
        goto try_return_handler_20;
        // Exception handler code:
        try_except_handler_21:;
        exception_keeper_type_19 = exception_type;
        exception_keeper_value_19 = exception_value;
        exception_keeper_tb_19 = exception_tb;
        exception_keeper_lineno_19 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__7_String_126);
        locals_sqlalchemy$sql$sqltypes$$$class__7_String_126 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_19;
        exception_value = exception_keeper_value_19;
        exception_tb = exception_keeper_tb_19;
        exception_lineno = exception_keeper_lineno_19;

        goto try_except_handler_20;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_20:;
        CHECK_OBJECT(outline_6_var___class__);
        Py_DECREF(outline_6_var___class__);
        outline_6_var___class__ = NULL;
        goto outline_result_7;
        // Exception handler code:
        try_except_handler_20:;
        exception_keeper_type_20 = exception_type;
        exception_keeper_value_20 = exception_value;
        exception_keeper_tb_20 = exception_tb;
        exception_keeper_lineno_20 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_20;
        exception_value = exception_keeper_value_20;
        exception_tb = exception_keeper_tb_20;
        exception_lineno = exception_keeper_lineno_20;

        goto outline_exception_7;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_7:;
        exception_lineno = 126;
        goto try_except_handler_19;
        outline_result_7:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[215], tmp_assign_source_82);
    }
    goto try_end_7;
    // Exception handler code:
    try_except_handler_19:;
    exception_keeper_type_21 = exception_type;
    exception_keeper_value_21 = exception_value;
    exception_keeper_tb_21 = exception_tb;
    exception_keeper_lineno_21 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_4__bases_orig);
    tmp_class_creation_4__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_4__bases);
    tmp_class_creation_4__bases = NULL;
    Py_XDECREF(tmp_class_creation_4__class_decl_dict);
    tmp_class_creation_4__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_4__metaclass);
    tmp_class_creation_4__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_4__prepared);
    tmp_class_creation_4__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_21;
    exception_value = exception_keeper_value_21;
    exception_tb = exception_keeper_tb_21;
    exception_lineno = exception_keeper_lineno_21;

    goto frame_exception_exit_1;
    // End of try:
    try_end_7:;
    CHECK_OBJECT(tmp_class_creation_4__bases_orig);
    Py_DECREF(tmp_class_creation_4__bases_orig);
    tmp_class_creation_4__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_4__bases);
    Py_DECREF(tmp_class_creation_4__bases);
    tmp_class_creation_4__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
    Py_DECREF(tmp_class_creation_4__class_decl_dict);
    tmp_class_creation_4__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_4__metaclass);
    Py_DECREF(tmp_class_creation_4__metaclass);
    tmp_class_creation_4__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_4__prepared);
    Py_DECREF(tmp_class_creation_4__prepared);
    tmp_class_creation_4__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_84;
        PyObject *tmp_tuple_element_26;
        tmp_tuple_element_26 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[215]);

        if (unlikely(tmp_tuple_element_26 == NULL)) {
            tmp_tuple_element_26 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[215]);
        }

        if (tmp_tuple_element_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;

            goto try_except_handler_22;
        }
        tmp_assign_source_84 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_84, 0, tmp_tuple_element_26);
        assert(tmp_class_creation_5__bases_orig == NULL);
        tmp_class_creation_5__bases_orig = tmp_assign_source_84;
    }
    {
        PyObject *tmp_assign_source_85;
        PyObject *tmp_dircall_arg1_8;
        CHECK_OBJECT(tmp_class_creation_5__bases_orig);
        tmp_dircall_arg1_8 = tmp_class_creation_5__bases_orig;
        Py_INCREF(tmp_dircall_arg1_8);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_8};
            tmp_assign_source_85 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_85 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;

            goto try_except_handler_22;
        }
        assert(tmp_class_creation_5__bases == NULL);
        tmp_class_creation_5__bases = tmp_assign_source_85;
    }
    {
        PyObject *tmp_assign_source_86;
        tmp_assign_source_86 = PyDict_New();
        assert(tmp_class_creation_5__class_decl_dict == NULL);
        tmp_class_creation_5__class_decl_dict = tmp_assign_source_86;
    }
    {
        PyObject *tmp_assign_source_87;
        PyObject *tmp_metaclass_value_8;
        bool tmp_condition_result_47;
        PyObject *tmp_key_value_22;
        PyObject *tmp_dict_arg_value_22;
        PyObject *tmp_dict_arg_value_23;
        PyObject *tmp_key_value_23;
        nuitka_bool tmp_condition_result_48;
        int tmp_truth_name_9;
        PyObject *tmp_type_arg_15;
        PyObject *tmp_expression_value_41;
        PyObject *tmp_subscript_value_8;
        PyObject *tmp_bases_value_8;
        tmp_key_value_22 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
        tmp_dict_arg_value_22 = tmp_class_creation_5__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_22, tmp_key_value_22);
        assert(!(tmp_res == -1));
        tmp_condition_result_47 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_47 != false) {
            goto condexpr_true_18;
        } else {
            goto condexpr_false_18;
        }
        condexpr_true_18:;
        CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
        tmp_dict_arg_value_23 = tmp_class_creation_5__class_decl_dict;
        tmp_key_value_23 = mod_consts[410];
        tmp_metaclass_value_8 = DICT_GET_ITEM0(tmp_dict_arg_value_23, tmp_key_value_23);
        if (tmp_metaclass_value_8 == NULL) {
            tmp_metaclass_value_8 = Py_None;
        }
        assert(!(tmp_metaclass_value_8 == NULL));
        Py_INCREF(tmp_metaclass_value_8);
        goto condexpr_end_18;
        condexpr_false_18:;
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_truth_name_9 = CHECK_IF_TRUE(tmp_class_creation_5__bases);
        if (tmp_truth_name_9 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;

            goto try_except_handler_22;
        }
        tmp_condition_result_48 = tmp_truth_name_9 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_48 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_19;
        } else {
            goto condexpr_false_19;
        }
        condexpr_true_19:;
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_expression_value_41 = tmp_class_creation_5__bases;
        tmp_subscript_value_8 = mod_consts[52];
        tmp_type_arg_15 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_41, tmp_subscript_value_8, 0);
        if (tmp_type_arg_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;

            goto try_except_handler_22;
        }
        tmp_metaclass_value_8 = BUILTIN_TYPE1(tmp_type_arg_15);
        Py_DECREF(tmp_type_arg_15);
        if (tmp_metaclass_value_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;

            goto try_except_handler_22;
        }
        goto condexpr_end_19;
        condexpr_false_19:;
        tmp_metaclass_value_8 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_8);
        condexpr_end_19:;
        condexpr_end_18:;
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_bases_value_8 = tmp_class_creation_5__bases;
        tmp_assign_source_87 = SELECT_METACLASS(tmp_metaclass_value_8, tmp_bases_value_8);
        Py_DECREF(tmp_metaclass_value_8);
        if (tmp_assign_source_87 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;

            goto try_except_handler_22;
        }
        assert(tmp_class_creation_5__metaclass == NULL);
        tmp_class_creation_5__metaclass = tmp_assign_source_87;
    }
    {
        bool tmp_condition_result_49;
        PyObject *tmp_key_value_24;
        PyObject *tmp_dict_arg_value_24;
        tmp_key_value_24 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
        tmp_dict_arg_value_24 = tmp_class_creation_5__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_24, tmp_key_value_24);
        assert(!(tmp_res == -1));
        tmp_condition_result_49 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_49 != false) {
            goto branch_yes_30;
        } else {
            goto branch_no_30;
        }
    }
    branch_yes_30:;
    CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_5__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 341;

        goto try_except_handler_22;
    }
    branch_no_30:;
    {
        nuitka_bool tmp_condition_result_50;
        PyObject *tmp_expression_value_42;
        CHECK_OBJECT(tmp_class_creation_5__metaclass);
        tmp_expression_value_42 = tmp_class_creation_5__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_42, mod_consts[411]);
        tmp_condition_result_50 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_50 == NUITKA_BOOL_TRUE) {
            goto branch_yes_31;
        } else {
            goto branch_no_31;
        }
    }
    branch_yes_31:;
    {
        PyObject *tmp_assign_source_88;
        PyObject *tmp_called_value_22;
        PyObject *tmp_expression_value_43;
        PyObject *tmp_args_value_15;
        PyObject *tmp_tuple_element_27;
        PyObject *tmp_kwargs_value_15;
        CHECK_OBJECT(tmp_class_creation_5__metaclass);
        tmp_expression_value_43 = tmp_class_creation_5__metaclass;
        tmp_called_value_22 = LOOKUP_ATTRIBUTE(tmp_expression_value_43, mod_consts[411]);
        if (tmp_called_value_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;

            goto try_except_handler_22;
        }
        tmp_tuple_element_27 = mod_consts[452];
        tmp_args_value_15 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_15, 0, tmp_tuple_element_27);
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_tuple_element_27 = tmp_class_creation_5__bases;
        PyTuple_SET_ITEM0(tmp_args_value_15, 1, tmp_tuple_element_27);
        CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
        tmp_kwargs_value_15 = tmp_class_creation_5__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 341;
        tmp_assign_source_88 = CALL_FUNCTION(tmp_called_value_22, tmp_args_value_15, tmp_kwargs_value_15);
        Py_DECREF(tmp_called_value_22);
        Py_DECREF(tmp_args_value_15);
        if (tmp_assign_source_88 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;

            goto try_except_handler_22;
        }
        assert(tmp_class_creation_5__prepared == NULL);
        tmp_class_creation_5__prepared = tmp_assign_source_88;
    }
    {
        bool tmp_condition_result_51;
        PyObject *tmp_operand_value_8;
        PyObject *tmp_expression_value_44;
        CHECK_OBJECT(tmp_class_creation_5__prepared);
        tmp_expression_value_44 = tmp_class_creation_5__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_44, mod_consts[413]);
        tmp_operand_value_8 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_8);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;

            goto try_except_handler_22;
        }
        tmp_condition_result_51 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_51 != false) {
            goto branch_yes_32;
        } else {
            goto branch_no_32;
        }
    }
    branch_yes_32:;
    {
        PyObject *tmp_raise_type_8;
        PyObject *tmp_raise_value_8;
        PyObject *tmp_left_value_8;
        PyObject *tmp_right_value_8;
        PyObject *tmp_tuple_element_28;
        PyObject *tmp_getattr_target_8;
        PyObject *tmp_getattr_attr_8;
        PyObject *tmp_getattr_default_8;
        tmp_raise_type_8 = PyExc_TypeError;
        tmp_left_value_8 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_5__metaclass);
        tmp_getattr_target_8 = tmp_class_creation_5__metaclass;
        tmp_getattr_attr_8 = mod_consts[190];
        tmp_getattr_default_8 = mod_consts[415];
        tmp_tuple_element_28 = BUILTIN_GETATTR(tmp_getattr_target_8, tmp_getattr_attr_8, tmp_getattr_default_8);
        if (tmp_tuple_element_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;

            goto try_except_handler_22;
        }
        tmp_right_value_8 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_45;
            PyObject *tmp_type_arg_16;
            PyTuple_SET_ITEM(tmp_right_value_8, 0, tmp_tuple_element_28);
            CHECK_OBJECT(tmp_class_creation_5__prepared);
            tmp_type_arg_16 = tmp_class_creation_5__prepared;
            tmp_expression_value_45 = BUILTIN_TYPE1(tmp_type_arg_16);
            assert(!(tmp_expression_value_45 == NULL));
            tmp_tuple_element_28 = LOOKUP_ATTRIBUTE(tmp_expression_value_45, mod_consts[190]);
            Py_DECREF(tmp_expression_value_45);
            if (tmp_tuple_element_28 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 341;

                goto tuple_build_exception_9;
            }
            PyTuple_SET_ITEM(tmp_right_value_8, 1, tmp_tuple_element_28);
        }
        goto tuple_build_noexception_9;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_9:;
        Py_DECREF(tmp_right_value_8);
        goto try_except_handler_22;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_9:;
        tmp_raise_value_8 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_8, tmp_right_value_8);
        Py_DECREF(tmp_right_value_8);
        if (tmp_raise_value_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;

            goto try_except_handler_22;
        }
        exception_type = tmp_raise_type_8;
        Py_INCREF(tmp_raise_type_8);
        exception_value = tmp_raise_value_8;
        exception_lineno = 341;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_22;
    }
    branch_no_32:;
    goto branch_end_31;
    branch_no_31:;
    {
        PyObject *tmp_assign_source_89;
        tmp_assign_source_89 = PyDict_New();
        assert(tmp_class_creation_5__prepared == NULL);
        tmp_class_creation_5__prepared = tmp_assign_source_89;
    }
    branch_end_31:;
    {
        PyObject *tmp_assign_source_90;
        {
            PyObject *tmp_set_locals_8;
            CHECK_OBJECT(tmp_class_creation_5__prepared);
            tmp_set_locals_8 = tmp_class_creation_5__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__8_Text_341 = tmp_set_locals_8;
            Py_INCREF(tmp_set_locals_8);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__8_Text_341, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;

            goto try_except_handler_24;
        }
        tmp_dictset_value = mod_consts[453];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__8_Text_341, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;

            goto try_except_handler_24;
        }
        tmp_dictset_value = mod_consts[452];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__8_Text_341, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;

            goto try_except_handler_24;
        }
        if (isFrameUnusable(cache_frame_7a8219d4d6fa314a7b423b4da3c16504_9)) {
            Py_XDECREF(cache_frame_7a8219d4d6fa314a7b423b4da3c16504_9);

#if _DEBUG_REFCOUNTS
            if (cache_frame_7a8219d4d6fa314a7b423b4da3c16504_9 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_7a8219d4d6fa314a7b423b4da3c16504_9 = MAKE_FUNCTION_FRAME(codeobj_7a8219d4d6fa314a7b423b4da3c16504, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_7a8219d4d6fa314a7b423b4da3c16504_9->m_type_description == NULL);
        frame_7a8219d4d6fa314a7b423b4da3c16504_9 = cache_frame_7a8219d4d6fa314a7b423b4da3c16504_9;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_7a8219d4d6fa314a7b423b4da3c16504_9);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_7a8219d4d6fa314a7b423b4da3c16504_9) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[454];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__8_Text_341, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 353;
            type_description_2 = "o";
            goto frame_exception_exit_9;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_7a8219d4d6fa314a7b423b4da3c16504_9);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_8;

        frame_exception_exit_9:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_7a8219d4d6fa314a7b423b4da3c16504_9);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_7a8219d4d6fa314a7b423b4da3c16504_9, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_7a8219d4d6fa314a7b423b4da3c16504_9->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_7a8219d4d6fa314a7b423b4da3c16504_9, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_7a8219d4d6fa314a7b423b4da3c16504_9,
            type_description_2,
            outline_7_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_7a8219d4d6fa314a7b423b4da3c16504_9 == cache_frame_7a8219d4d6fa314a7b423b4da3c16504_9) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_7a8219d4d6fa314a7b423b4da3c16504_9);
            cache_frame_7a8219d4d6fa314a7b423b4da3c16504_9 = NULL;
        }

        assertFrameObject(frame_7a8219d4d6fa314a7b423b4da3c16504_9);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_8;

        frame_no_exception_8:;
        goto skip_nested_handling_8;
        nested_frame_exit_8:;

        goto try_except_handler_24;
        skip_nested_handling_8:;
        {
            nuitka_bool tmp_condition_result_52;
            PyObject *tmp_cmp_expr_left_8;
            PyObject *tmp_cmp_expr_right_8;
            CHECK_OBJECT(tmp_class_creation_5__bases);
            tmp_cmp_expr_left_8 = tmp_class_creation_5__bases;
            CHECK_OBJECT(tmp_class_creation_5__bases_orig);
            tmp_cmp_expr_right_8 = tmp_class_creation_5__bases_orig;
            tmp_condition_result_52 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_8, tmp_cmp_expr_right_8);
            if (tmp_condition_result_52 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 341;

                goto try_except_handler_24;
            }
            if (tmp_condition_result_52 == NUITKA_BOOL_TRUE) {
                goto branch_yes_33;
            } else {
                goto branch_no_33;
            }
            assert(tmp_condition_result_52 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_33:;
        CHECK_OBJECT(tmp_class_creation_5__bases_orig);
        tmp_dictset_value = tmp_class_creation_5__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__8_Text_341, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;

            goto try_except_handler_24;
        }
        branch_no_33:;
        {
            PyObject *tmp_assign_source_91;
            PyObject *tmp_called_value_23;
            PyObject *tmp_args_value_16;
            PyObject *tmp_tuple_element_29;
            PyObject *tmp_kwargs_value_16;
            CHECK_OBJECT(tmp_class_creation_5__metaclass);
            tmp_called_value_23 = tmp_class_creation_5__metaclass;
            tmp_tuple_element_29 = mod_consts[452];
            tmp_args_value_16 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_16, 0, tmp_tuple_element_29);
            CHECK_OBJECT(tmp_class_creation_5__bases);
            tmp_tuple_element_29 = tmp_class_creation_5__bases;
            PyTuple_SET_ITEM0(tmp_args_value_16, 1, tmp_tuple_element_29);
            tmp_tuple_element_29 = locals_sqlalchemy$sql$sqltypes$$$class__8_Text_341;
            PyTuple_SET_ITEM0(tmp_args_value_16, 2, tmp_tuple_element_29);
            CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
            tmp_kwargs_value_16 = tmp_class_creation_5__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 341;
            tmp_assign_source_91 = CALL_FUNCTION(tmp_called_value_23, tmp_args_value_16, tmp_kwargs_value_16);
            Py_DECREF(tmp_args_value_16);
            if (tmp_assign_source_91 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 341;

                goto try_except_handler_24;
            }
            assert(outline_7_var___class__ == NULL);
            outline_7_var___class__ = tmp_assign_source_91;
        }
        CHECK_OBJECT(outline_7_var___class__);
        tmp_assign_source_90 = outline_7_var___class__;
        Py_INCREF(tmp_assign_source_90);
        goto try_return_handler_24;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_24:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__8_Text_341);
        locals_sqlalchemy$sql$sqltypes$$$class__8_Text_341 = NULL;
        goto try_return_handler_23;
        // Exception handler code:
        try_except_handler_24:;
        exception_keeper_type_22 = exception_type;
        exception_keeper_value_22 = exception_value;
        exception_keeper_tb_22 = exception_tb;
        exception_keeper_lineno_22 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__8_Text_341);
        locals_sqlalchemy$sql$sqltypes$$$class__8_Text_341 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_22;
        exception_value = exception_keeper_value_22;
        exception_tb = exception_keeper_tb_22;
        exception_lineno = exception_keeper_lineno_22;

        goto try_except_handler_23;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_23:;
        CHECK_OBJECT(outline_7_var___class__);
        Py_DECREF(outline_7_var___class__);
        outline_7_var___class__ = NULL;
        goto outline_result_8;
        // Exception handler code:
        try_except_handler_23:;
        exception_keeper_type_23 = exception_type;
        exception_keeper_value_23 = exception_value;
        exception_keeper_tb_23 = exception_tb;
        exception_keeper_lineno_23 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_23;
        exception_value = exception_keeper_value_23;
        exception_tb = exception_keeper_tb_23;
        exception_lineno = exception_keeper_lineno_23;

        goto outline_exception_8;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_8:;
        exception_lineno = 341;
        goto try_except_handler_22;
        outline_result_8:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[452], tmp_assign_source_90);
    }
    goto try_end_8;
    // Exception handler code:
    try_except_handler_22:;
    exception_keeper_type_24 = exception_type;
    exception_keeper_value_24 = exception_value;
    exception_keeper_tb_24 = exception_tb;
    exception_keeper_lineno_24 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_5__bases_orig);
    tmp_class_creation_5__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_5__bases);
    tmp_class_creation_5__bases = NULL;
    Py_XDECREF(tmp_class_creation_5__class_decl_dict);
    tmp_class_creation_5__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_5__metaclass);
    tmp_class_creation_5__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_5__prepared);
    tmp_class_creation_5__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_24;
    exception_value = exception_keeper_value_24;
    exception_tb = exception_keeper_tb_24;
    exception_lineno = exception_keeper_lineno_24;

    goto frame_exception_exit_1;
    // End of try:
    try_end_8:;
    CHECK_OBJECT(tmp_class_creation_5__bases_orig);
    Py_DECREF(tmp_class_creation_5__bases_orig);
    tmp_class_creation_5__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_5__bases);
    Py_DECREF(tmp_class_creation_5__bases);
    tmp_class_creation_5__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
    Py_DECREF(tmp_class_creation_5__class_decl_dict);
    tmp_class_creation_5__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_5__metaclass);
    Py_DECREF(tmp_class_creation_5__metaclass);
    tmp_class_creation_5__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_5__prepared);
    Py_DECREF(tmp_class_creation_5__prepared);
    tmp_class_creation_5__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_92;
        PyObject *tmp_tuple_element_30;
        tmp_tuple_element_30 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[215]);

        if (unlikely(tmp_tuple_element_30 == NULL)) {
            tmp_tuple_element_30 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[215]);
        }

        if (tmp_tuple_element_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_25;
        }
        tmp_assign_source_92 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_92, 0, tmp_tuple_element_30);
        assert(tmp_class_creation_6__bases_orig == NULL);
        tmp_class_creation_6__bases_orig = tmp_assign_source_92;
    }
    {
        PyObject *tmp_assign_source_93;
        PyObject *tmp_dircall_arg1_9;
        CHECK_OBJECT(tmp_class_creation_6__bases_orig);
        tmp_dircall_arg1_9 = tmp_class_creation_6__bases_orig;
        Py_INCREF(tmp_dircall_arg1_9);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_9};
            tmp_assign_source_93 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_93 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_25;
        }
        assert(tmp_class_creation_6__bases == NULL);
        tmp_class_creation_6__bases = tmp_assign_source_93;
    }
    {
        PyObject *tmp_assign_source_94;
        tmp_assign_source_94 = PyDict_New();
        assert(tmp_class_creation_6__class_decl_dict == NULL);
        tmp_class_creation_6__class_decl_dict = tmp_assign_source_94;
    }
    {
        PyObject *tmp_assign_source_95;
        PyObject *tmp_metaclass_value_9;
        bool tmp_condition_result_53;
        PyObject *tmp_key_value_25;
        PyObject *tmp_dict_arg_value_25;
        PyObject *tmp_dict_arg_value_26;
        PyObject *tmp_key_value_26;
        nuitka_bool tmp_condition_result_54;
        int tmp_truth_name_10;
        PyObject *tmp_type_arg_17;
        PyObject *tmp_expression_value_46;
        PyObject *tmp_subscript_value_9;
        PyObject *tmp_bases_value_9;
        tmp_key_value_25 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
        tmp_dict_arg_value_25 = tmp_class_creation_6__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_25, tmp_key_value_25);
        assert(!(tmp_res == -1));
        tmp_condition_result_53 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_53 != false) {
            goto condexpr_true_20;
        } else {
            goto condexpr_false_20;
        }
        condexpr_true_20:;
        CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
        tmp_dict_arg_value_26 = tmp_class_creation_6__class_decl_dict;
        tmp_key_value_26 = mod_consts[410];
        tmp_metaclass_value_9 = DICT_GET_ITEM0(tmp_dict_arg_value_26, tmp_key_value_26);
        if (tmp_metaclass_value_9 == NULL) {
            tmp_metaclass_value_9 = Py_None;
        }
        assert(!(tmp_metaclass_value_9 == NULL));
        Py_INCREF(tmp_metaclass_value_9);
        goto condexpr_end_20;
        condexpr_false_20:;
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_truth_name_10 = CHECK_IF_TRUE(tmp_class_creation_6__bases);
        if (tmp_truth_name_10 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_25;
        }
        tmp_condition_result_54 = tmp_truth_name_10 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_54 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_21;
        } else {
            goto condexpr_false_21;
        }
        condexpr_true_21:;
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_expression_value_46 = tmp_class_creation_6__bases;
        tmp_subscript_value_9 = mod_consts[52];
        tmp_type_arg_17 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_46, tmp_subscript_value_9, 0);
        if (tmp_type_arg_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_25;
        }
        tmp_metaclass_value_9 = BUILTIN_TYPE1(tmp_type_arg_17);
        Py_DECREF(tmp_type_arg_17);
        if (tmp_metaclass_value_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_25;
        }
        goto condexpr_end_21;
        condexpr_false_21:;
        tmp_metaclass_value_9 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_9);
        condexpr_end_21:;
        condexpr_end_20:;
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_bases_value_9 = tmp_class_creation_6__bases;
        tmp_assign_source_95 = SELECT_METACLASS(tmp_metaclass_value_9, tmp_bases_value_9);
        Py_DECREF(tmp_metaclass_value_9);
        if (tmp_assign_source_95 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_25;
        }
        assert(tmp_class_creation_6__metaclass == NULL);
        tmp_class_creation_6__metaclass = tmp_assign_source_95;
    }
    {
        bool tmp_condition_result_55;
        PyObject *tmp_key_value_27;
        PyObject *tmp_dict_arg_value_27;
        tmp_key_value_27 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
        tmp_dict_arg_value_27 = tmp_class_creation_6__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_27, tmp_key_value_27);
        assert(!(tmp_res == -1));
        tmp_condition_result_55 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_55 != false) {
            goto branch_yes_34;
        } else {
            goto branch_no_34;
        }
    }
    branch_yes_34:;
    CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_6__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 356;

        goto try_except_handler_25;
    }
    branch_no_34:;
    {
        nuitka_bool tmp_condition_result_56;
        PyObject *tmp_expression_value_47;
        CHECK_OBJECT(tmp_class_creation_6__metaclass);
        tmp_expression_value_47 = tmp_class_creation_6__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_47, mod_consts[411]);
        tmp_condition_result_56 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_56 == NUITKA_BOOL_TRUE) {
            goto branch_yes_35;
        } else {
            goto branch_no_35;
        }
    }
    branch_yes_35:;
    {
        PyObject *tmp_assign_source_96;
        PyObject *tmp_called_value_24;
        PyObject *tmp_expression_value_48;
        PyObject *tmp_args_value_17;
        PyObject *tmp_tuple_element_31;
        PyObject *tmp_kwargs_value_17;
        CHECK_OBJECT(tmp_class_creation_6__metaclass);
        tmp_expression_value_48 = tmp_class_creation_6__metaclass;
        tmp_called_value_24 = LOOKUP_ATTRIBUTE(tmp_expression_value_48, mod_consts[411]);
        if (tmp_called_value_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_25;
        }
        tmp_tuple_element_31 = mod_consts[65];
        tmp_args_value_17 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_17, 0, tmp_tuple_element_31);
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_tuple_element_31 = tmp_class_creation_6__bases;
        PyTuple_SET_ITEM0(tmp_args_value_17, 1, tmp_tuple_element_31);
        CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
        tmp_kwargs_value_17 = tmp_class_creation_6__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 356;
        tmp_assign_source_96 = CALL_FUNCTION(tmp_called_value_24, tmp_args_value_17, tmp_kwargs_value_17);
        Py_DECREF(tmp_called_value_24);
        Py_DECREF(tmp_args_value_17);
        if (tmp_assign_source_96 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_25;
        }
        assert(tmp_class_creation_6__prepared == NULL);
        tmp_class_creation_6__prepared = tmp_assign_source_96;
    }
    {
        bool tmp_condition_result_57;
        PyObject *tmp_operand_value_9;
        PyObject *tmp_expression_value_49;
        CHECK_OBJECT(tmp_class_creation_6__prepared);
        tmp_expression_value_49 = tmp_class_creation_6__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_49, mod_consts[413]);
        tmp_operand_value_9 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_9);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_25;
        }
        tmp_condition_result_57 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_57 != false) {
            goto branch_yes_36;
        } else {
            goto branch_no_36;
        }
    }
    branch_yes_36:;
    {
        PyObject *tmp_raise_type_9;
        PyObject *tmp_raise_value_9;
        PyObject *tmp_left_value_9;
        PyObject *tmp_right_value_9;
        PyObject *tmp_tuple_element_32;
        PyObject *tmp_getattr_target_9;
        PyObject *tmp_getattr_attr_9;
        PyObject *tmp_getattr_default_9;
        tmp_raise_type_9 = PyExc_TypeError;
        tmp_left_value_9 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_6__metaclass);
        tmp_getattr_target_9 = tmp_class_creation_6__metaclass;
        tmp_getattr_attr_9 = mod_consts[190];
        tmp_getattr_default_9 = mod_consts[415];
        tmp_tuple_element_32 = BUILTIN_GETATTR(tmp_getattr_target_9, tmp_getattr_attr_9, tmp_getattr_default_9);
        if (tmp_tuple_element_32 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_25;
        }
        tmp_right_value_9 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_50;
            PyObject *tmp_type_arg_18;
            PyTuple_SET_ITEM(tmp_right_value_9, 0, tmp_tuple_element_32);
            CHECK_OBJECT(tmp_class_creation_6__prepared);
            tmp_type_arg_18 = tmp_class_creation_6__prepared;
            tmp_expression_value_50 = BUILTIN_TYPE1(tmp_type_arg_18);
            assert(!(tmp_expression_value_50 == NULL));
            tmp_tuple_element_32 = LOOKUP_ATTRIBUTE(tmp_expression_value_50, mod_consts[190]);
            Py_DECREF(tmp_expression_value_50);
            if (tmp_tuple_element_32 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 356;

                goto tuple_build_exception_10;
            }
            PyTuple_SET_ITEM(tmp_right_value_9, 1, tmp_tuple_element_32);
        }
        goto tuple_build_noexception_10;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_10:;
        Py_DECREF(tmp_right_value_9);
        goto try_except_handler_25;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_10:;
        tmp_raise_value_9 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_9, tmp_right_value_9);
        Py_DECREF(tmp_right_value_9);
        if (tmp_raise_value_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_25;
        }
        exception_type = tmp_raise_type_9;
        Py_INCREF(tmp_raise_type_9);
        exception_value = tmp_raise_value_9;
        exception_lineno = 356;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_25;
    }
    branch_no_36:;
    goto branch_end_35;
    branch_no_35:;
    {
        PyObject *tmp_assign_source_97;
        tmp_assign_source_97 = PyDict_New();
        assert(tmp_class_creation_6__prepared == NULL);
        tmp_class_creation_6__prepared = tmp_assign_source_97;
    }
    branch_end_35:;
    {
        PyObject *tmp_assign_source_98;
        {
            PyObject *tmp_set_locals_9;
            CHECK_OBJECT(tmp_class_creation_6__prepared);
            tmp_set_locals_9 = tmp_class_creation_6__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__9_Unicode_356 = tmp_set_locals_9;
            Py_INCREF(tmp_set_locals_9);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__9_Unicode_356, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_27;
        }
        tmp_dictset_value = mod_consts[455];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__9_Unicode_356, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_27;
        }
        tmp_dictset_value = mod_consts[65];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__9_Unicode_356, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_27;
        }
        if (isFrameUnusable(cache_frame_15c8c8b15bc55ad5757ef7c875079e87_10)) {
            Py_XDECREF(cache_frame_15c8c8b15bc55ad5757ef7c875079e87_10);

#if _DEBUG_REFCOUNTS
            if (cache_frame_15c8c8b15bc55ad5757ef7c875079e87_10 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_15c8c8b15bc55ad5757ef7c875079e87_10 = MAKE_FUNCTION_FRAME(codeobj_15c8c8b15bc55ad5757ef7c875079e87, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_15c8c8b15bc55ad5757ef7c875079e87_10->m_type_description == NULL);
        frame_15c8c8b15bc55ad5757ef7c875079e87_10 = cache_frame_15c8c8b15bc55ad5757ef7c875079e87_10;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_15c8c8b15bc55ad5757ef7c875079e87_10);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_15c8c8b15bc55ad5757ef7c875079e87_10) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[456];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__9_Unicode_356, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;
            type_description_2 = "o";
            goto frame_exception_exit_10;
        }
        {
            PyObject *tmp_defaults_2;
            tmp_defaults_2 = mod_consts[257];
            Py_INCREF(tmp_defaults_2);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__13___init__(tmp_defaults_2);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__9_Unicode_356, mod_consts[66], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 414;
                type_description_2 = "o";
                goto frame_exception_exit_10;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_15c8c8b15bc55ad5757ef7c875079e87_10);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_9;

        frame_exception_exit_10:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_15c8c8b15bc55ad5757ef7c875079e87_10);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_15c8c8b15bc55ad5757ef7c875079e87_10, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_15c8c8b15bc55ad5757ef7c875079e87_10->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_15c8c8b15bc55ad5757ef7c875079e87_10, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_15c8c8b15bc55ad5757ef7c875079e87_10,
            type_description_2,
            outline_8_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_15c8c8b15bc55ad5757ef7c875079e87_10 == cache_frame_15c8c8b15bc55ad5757ef7c875079e87_10) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_15c8c8b15bc55ad5757ef7c875079e87_10);
            cache_frame_15c8c8b15bc55ad5757ef7c875079e87_10 = NULL;
        }

        assertFrameObject(frame_15c8c8b15bc55ad5757ef7c875079e87_10);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_9;

        frame_no_exception_9:;
        goto skip_nested_handling_9;
        nested_frame_exit_9:;

        goto try_except_handler_27;
        skip_nested_handling_9:;
        {
            nuitka_bool tmp_condition_result_58;
            PyObject *tmp_cmp_expr_left_9;
            PyObject *tmp_cmp_expr_right_9;
            CHECK_OBJECT(tmp_class_creation_6__bases);
            tmp_cmp_expr_left_9 = tmp_class_creation_6__bases;
            CHECK_OBJECT(tmp_class_creation_6__bases_orig);
            tmp_cmp_expr_right_9 = tmp_class_creation_6__bases_orig;
            tmp_condition_result_58 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_9, tmp_cmp_expr_right_9);
            if (tmp_condition_result_58 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 356;

                goto try_except_handler_27;
            }
            if (tmp_condition_result_58 == NUITKA_BOOL_TRUE) {
                goto branch_yes_37;
            } else {
                goto branch_no_37;
            }
            assert(tmp_condition_result_58 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_37:;
        CHECK_OBJECT(tmp_class_creation_6__bases_orig);
        tmp_dictset_value = tmp_class_creation_6__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__9_Unicode_356, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 356;

            goto try_except_handler_27;
        }
        branch_no_37:;
        {
            PyObject *tmp_assign_source_99;
            PyObject *tmp_called_value_25;
            PyObject *tmp_args_value_18;
            PyObject *tmp_tuple_element_33;
            PyObject *tmp_kwargs_value_18;
            CHECK_OBJECT(tmp_class_creation_6__metaclass);
            tmp_called_value_25 = tmp_class_creation_6__metaclass;
            tmp_tuple_element_33 = mod_consts[65];
            tmp_args_value_18 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_18, 0, tmp_tuple_element_33);
            CHECK_OBJECT(tmp_class_creation_6__bases);
            tmp_tuple_element_33 = tmp_class_creation_6__bases;
            PyTuple_SET_ITEM0(tmp_args_value_18, 1, tmp_tuple_element_33);
            tmp_tuple_element_33 = locals_sqlalchemy$sql$sqltypes$$$class__9_Unicode_356;
            PyTuple_SET_ITEM0(tmp_args_value_18, 2, tmp_tuple_element_33);
            CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
            tmp_kwargs_value_18 = tmp_class_creation_6__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 356;
            tmp_assign_source_99 = CALL_FUNCTION(tmp_called_value_25, tmp_args_value_18, tmp_kwargs_value_18);
            Py_DECREF(tmp_args_value_18);
            if (tmp_assign_source_99 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 356;

                goto try_except_handler_27;
            }
            assert(outline_8_var___class__ == NULL);
            outline_8_var___class__ = tmp_assign_source_99;
        }
        CHECK_OBJECT(outline_8_var___class__);
        tmp_assign_source_98 = outline_8_var___class__;
        Py_INCREF(tmp_assign_source_98);
        goto try_return_handler_27;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_27:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__9_Unicode_356);
        locals_sqlalchemy$sql$sqltypes$$$class__9_Unicode_356 = NULL;
        goto try_return_handler_26;
        // Exception handler code:
        try_except_handler_27:;
        exception_keeper_type_25 = exception_type;
        exception_keeper_value_25 = exception_value;
        exception_keeper_tb_25 = exception_tb;
        exception_keeper_lineno_25 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__9_Unicode_356);
        locals_sqlalchemy$sql$sqltypes$$$class__9_Unicode_356 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_25;
        exception_value = exception_keeper_value_25;
        exception_tb = exception_keeper_tb_25;
        exception_lineno = exception_keeper_lineno_25;

        goto try_except_handler_26;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_26:;
        CHECK_OBJECT(outline_8_var___class__);
        Py_DECREF(outline_8_var___class__);
        outline_8_var___class__ = NULL;
        goto outline_result_9;
        // Exception handler code:
        try_except_handler_26:;
        exception_keeper_type_26 = exception_type;
        exception_keeper_value_26 = exception_value;
        exception_keeper_tb_26 = exception_tb;
        exception_keeper_lineno_26 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_26;
        exception_value = exception_keeper_value_26;
        exception_tb = exception_keeper_tb_26;
        exception_lineno = exception_keeper_lineno_26;

        goto outline_exception_9;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_9:;
        exception_lineno = 356;
        goto try_except_handler_25;
        outline_result_9:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[65], tmp_assign_source_98);
    }
    goto try_end_9;
    // Exception handler code:
    try_except_handler_25:;
    exception_keeper_type_27 = exception_type;
    exception_keeper_value_27 = exception_value;
    exception_keeper_tb_27 = exception_tb;
    exception_keeper_lineno_27 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_6__bases_orig);
    tmp_class_creation_6__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_6__bases);
    tmp_class_creation_6__bases = NULL;
    Py_XDECREF(tmp_class_creation_6__class_decl_dict);
    tmp_class_creation_6__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_6__metaclass);
    tmp_class_creation_6__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_6__prepared);
    tmp_class_creation_6__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_27;
    exception_value = exception_keeper_value_27;
    exception_tb = exception_keeper_tb_27;
    exception_lineno = exception_keeper_lineno_27;

    goto frame_exception_exit_1;
    // End of try:
    try_end_9:;
    CHECK_OBJECT(tmp_class_creation_6__bases_orig);
    Py_DECREF(tmp_class_creation_6__bases_orig);
    tmp_class_creation_6__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_6__bases);
    Py_DECREF(tmp_class_creation_6__bases);
    tmp_class_creation_6__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
    Py_DECREF(tmp_class_creation_6__class_decl_dict);
    tmp_class_creation_6__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_6__metaclass);
    Py_DECREF(tmp_class_creation_6__metaclass);
    tmp_class_creation_6__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_6__prepared);
    Py_DECREF(tmp_class_creation_6__prepared);
    tmp_class_creation_6__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_100;
        PyObject *tmp_tuple_element_34;
        tmp_tuple_element_34 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[452]);

        if (unlikely(tmp_tuple_element_34 == NULL)) {
            tmp_tuple_element_34 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[452]);
        }

        if (tmp_tuple_element_34 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 428;

            goto try_except_handler_28;
        }
        tmp_assign_source_100 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_100, 0, tmp_tuple_element_34);
        assert(tmp_class_creation_7__bases_orig == NULL);
        tmp_class_creation_7__bases_orig = tmp_assign_source_100;
    }
    {
        PyObject *tmp_assign_source_101;
        PyObject *tmp_dircall_arg1_10;
        CHECK_OBJECT(tmp_class_creation_7__bases_orig);
        tmp_dircall_arg1_10 = tmp_class_creation_7__bases_orig;
        Py_INCREF(tmp_dircall_arg1_10);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_10};
            tmp_assign_source_101 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_101 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 428;

            goto try_except_handler_28;
        }
        assert(tmp_class_creation_7__bases == NULL);
        tmp_class_creation_7__bases = tmp_assign_source_101;
    }
    {
        PyObject *tmp_assign_source_102;
        tmp_assign_source_102 = PyDict_New();
        assert(tmp_class_creation_7__class_decl_dict == NULL);
        tmp_class_creation_7__class_decl_dict = tmp_assign_source_102;
    }
    {
        PyObject *tmp_assign_source_103;
        PyObject *tmp_metaclass_value_10;
        bool tmp_condition_result_59;
        PyObject *tmp_key_value_28;
        PyObject *tmp_dict_arg_value_28;
        PyObject *tmp_dict_arg_value_29;
        PyObject *tmp_key_value_29;
        nuitka_bool tmp_condition_result_60;
        int tmp_truth_name_11;
        PyObject *tmp_type_arg_19;
        PyObject *tmp_expression_value_51;
        PyObject *tmp_subscript_value_10;
        PyObject *tmp_bases_value_10;
        tmp_key_value_28 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
        tmp_dict_arg_value_28 = tmp_class_creation_7__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_28, tmp_key_value_28);
        assert(!(tmp_res == -1));
        tmp_condition_result_59 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_59 != false) {
            goto condexpr_true_22;
        } else {
            goto condexpr_false_22;
        }
        condexpr_true_22:;
        CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
        tmp_dict_arg_value_29 = tmp_class_creation_7__class_decl_dict;
        tmp_key_value_29 = mod_consts[410];
        tmp_metaclass_value_10 = DICT_GET_ITEM0(tmp_dict_arg_value_29, tmp_key_value_29);
        if (tmp_metaclass_value_10 == NULL) {
            tmp_metaclass_value_10 = Py_None;
        }
        assert(!(tmp_metaclass_value_10 == NULL));
        Py_INCREF(tmp_metaclass_value_10);
        goto condexpr_end_22;
        condexpr_false_22:;
        CHECK_OBJECT(tmp_class_creation_7__bases);
        tmp_truth_name_11 = CHECK_IF_TRUE(tmp_class_creation_7__bases);
        if (tmp_truth_name_11 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 428;

            goto try_except_handler_28;
        }
        tmp_condition_result_60 = tmp_truth_name_11 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_60 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_23;
        } else {
            goto condexpr_false_23;
        }
        condexpr_true_23:;
        CHECK_OBJECT(tmp_class_creation_7__bases);
        tmp_expression_value_51 = tmp_class_creation_7__bases;
        tmp_subscript_value_10 = mod_consts[52];
        tmp_type_arg_19 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_51, tmp_subscript_value_10, 0);
        if (tmp_type_arg_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 428;

            goto try_except_handler_28;
        }
        tmp_metaclass_value_10 = BUILTIN_TYPE1(tmp_type_arg_19);
        Py_DECREF(tmp_type_arg_19);
        if (tmp_metaclass_value_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 428;

            goto try_except_handler_28;
        }
        goto condexpr_end_23;
        condexpr_false_23:;
        tmp_metaclass_value_10 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_10);
        condexpr_end_23:;
        condexpr_end_22:;
        CHECK_OBJECT(tmp_class_creation_7__bases);
        tmp_bases_value_10 = tmp_class_creation_7__bases;
        tmp_assign_source_103 = SELECT_METACLASS(tmp_metaclass_value_10, tmp_bases_value_10);
        Py_DECREF(tmp_metaclass_value_10);
        if (tmp_assign_source_103 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 428;

            goto try_except_handler_28;
        }
        assert(tmp_class_creation_7__metaclass == NULL);
        tmp_class_creation_7__metaclass = tmp_assign_source_103;
    }
    {
        bool tmp_condition_result_61;
        PyObject *tmp_key_value_30;
        PyObject *tmp_dict_arg_value_30;
        tmp_key_value_30 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
        tmp_dict_arg_value_30 = tmp_class_creation_7__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_30, tmp_key_value_30);
        assert(!(tmp_res == -1));
        tmp_condition_result_61 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_61 != false) {
            goto branch_yes_38;
        } else {
            goto branch_no_38;
        }
    }
    branch_yes_38:;
    CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_7__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 428;

        goto try_except_handler_28;
    }
    branch_no_38:;
    {
        nuitka_bool tmp_condition_result_62;
        PyObject *tmp_expression_value_52;
        CHECK_OBJECT(tmp_class_creation_7__metaclass);
        tmp_expression_value_52 = tmp_class_creation_7__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_52, mod_consts[411]);
        tmp_condition_result_62 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_62 == NUITKA_BOOL_TRUE) {
            goto branch_yes_39;
        } else {
            goto branch_no_39;
        }
    }
    branch_yes_39:;
    {
        PyObject *tmp_assign_source_104;
        PyObject *tmp_called_value_26;
        PyObject *tmp_expression_value_53;
        PyObject *tmp_args_value_19;
        PyObject *tmp_tuple_element_35;
        PyObject *tmp_kwargs_value_19;
        CHECK_OBJECT(tmp_class_creation_7__metaclass);
        tmp_expression_value_53 = tmp_class_creation_7__metaclass;
        tmp_called_value_26 = LOOKUP_ATTRIBUTE(tmp_expression_value_53, mod_consts[411]);
        if (tmp_called_value_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 428;

            goto try_except_handler_28;
        }
        tmp_tuple_element_35 = mod_consts[68];
        tmp_args_value_19 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_19, 0, tmp_tuple_element_35);
        CHECK_OBJECT(tmp_class_creation_7__bases);
        tmp_tuple_element_35 = tmp_class_creation_7__bases;
        PyTuple_SET_ITEM0(tmp_args_value_19, 1, tmp_tuple_element_35);
        CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
        tmp_kwargs_value_19 = tmp_class_creation_7__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 428;
        tmp_assign_source_104 = CALL_FUNCTION(tmp_called_value_26, tmp_args_value_19, tmp_kwargs_value_19);
        Py_DECREF(tmp_called_value_26);
        Py_DECREF(tmp_args_value_19);
        if (tmp_assign_source_104 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 428;

            goto try_except_handler_28;
        }
        assert(tmp_class_creation_7__prepared == NULL);
        tmp_class_creation_7__prepared = tmp_assign_source_104;
    }
    {
        bool tmp_condition_result_63;
        PyObject *tmp_operand_value_10;
        PyObject *tmp_expression_value_54;
        CHECK_OBJECT(tmp_class_creation_7__prepared);
        tmp_expression_value_54 = tmp_class_creation_7__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_54, mod_consts[413]);
        tmp_operand_value_10 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_10);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 428;

            goto try_except_handler_28;
        }
        tmp_condition_result_63 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_63 != false) {
            goto branch_yes_40;
        } else {
            goto branch_no_40;
        }
    }
    branch_yes_40:;
    {
        PyObject *tmp_raise_type_10;
        PyObject *tmp_raise_value_10;
        PyObject *tmp_left_value_10;
        PyObject *tmp_right_value_10;
        PyObject *tmp_tuple_element_36;
        PyObject *tmp_getattr_target_10;
        PyObject *tmp_getattr_attr_10;
        PyObject *tmp_getattr_default_10;
        tmp_raise_type_10 = PyExc_TypeError;
        tmp_left_value_10 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_7__metaclass);
        tmp_getattr_target_10 = tmp_class_creation_7__metaclass;
        tmp_getattr_attr_10 = mod_consts[190];
        tmp_getattr_default_10 = mod_consts[415];
        tmp_tuple_element_36 = BUILTIN_GETATTR(tmp_getattr_target_10, tmp_getattr_attr_10, tmp_getattr_default_10);
        if (tmp_tuple_element_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 428;

            goto try_except_handler_28;
        }
        tmp_right_value_10 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_55;
            PyObject *tmp_type_arg_20;
            PyTuple_SET_ITEM(tmp_right_value_10, 0, tmp_tuple_element_36);
            CHECK_OBJECT(tmp_class_creation_7__prepared);
            tmp_type_arg_20 = tmp_class_creation_7__prepared;
            tmp_expression_value_55 = BUILTIN_TYPE1(tmp_type_arg_20);
            assert(!(tmp_expression_value_55 == NULL));
            tmp_tuple_element_36 = LOOKUP_ATTRIBUTE(tmp_expression_value_55, mod_consts[190]);
            Py_DECREF(tmp_expression_value_55);
            if (tmp_tuple_element_36 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 428;

                goto tuple_build_exception_11;
            }
            PyTuple_SET_ITEM(tmp_right_value_10, 1, tmp_tuple_element_36);
        }
        goto tuple_build_noexception_11;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_11:;
        Py_DECREF(tmp_right_value_10);
        goto try_except_handler_28;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_11:;
        tmp_raise_value_10 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_10, tmp_right_value_10);
        Py_DECREF(tmp_right_value_10);
        if (tmp_raise_value_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 428;

            goto try_except_handler_28;
        }
        exception_type = tmp_raise_type_10;
        Py_INCREF(tmp_raise_type_10);
        exception_value = tmp_raise_value_10;
        exception_lineno = 428;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_28;
    }
    branch_no_40:;
    goto branch_end_39;
    branch_no_39:;
    {
        PyObject *tmp_assign_source_105;
        tmp_assign_source_105 = PyDict_New();
        assert(tmp_class_creation_7__prepared == NULL);
        tmp_class_creation_7__prepared = tmp_assign_source_105;
    }
    branch_end_39:;
    {
        PyObject *tmp_assign_source_106;
        {
            PyObject *tmp_set_locals_10;
            CHECK_OBJECT(tmp_class_creation_7__prepared);
            tmp_set_locals_10 = tmp_class_creation_7__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__10_UnicodeText_428 = tmp_set_locals_10;
            Py_INCREF(tmp_set_locals_10);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__10_UnicodeText_428, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 428;

            goto try_except_handler_30;
        }
        tmp_dictset_value = mod_consts[458];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__10_UnicodeText_428, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 428;

            goto try_except_handler_30;
        }
        tmp_dictset_value = mod_consts[68];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__10_UnicodeText_428, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 428;

            goto try_except_handler_30;
        }
        if (isFrameUnusable(cache_frame_1d7fb75628949076e1e7791a7f180241_11)) {
            Py_XDECREF(cache_frame_1d7fb75628949076e1e7791a7f180241_11);

#if _DEBUG_REFCOUNTS
            if (cache_frame_1d7fb75628949076e1e7791a7f180241_11 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_1d7fb75628949076e1e7791a7f180241_11 = MAKE_FUNCTION_FRAME(codeobj_1d7fb75628949076e1e7791a7f180241, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_1d7fb75628949076e1e7791a7f180241_11->m_type_description == NULL);
        frame_1d7fb75628949076e1e7791a7f180241_11 = cache_frame_1d7fb75628949076e1e7791a7f180241_11;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_1d7fb75628949076e1e7791a7f180241_11);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_1d7fb75628949076e1e7791a7f180241_11) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[459];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__10_UnicodeText_428, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 441;
            type_description_2 = "o";
            goto frame_exception_exit_11;
        }
        {
            PyObject *tmp_defaults_3;
            tmp_defaults_3 = mod_consts[257];
            Py_INCREF(tmp_defaults_3);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__14___init__(tmp_defaults_3);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__10_UnicodeText_428, mod_consts[66], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 443;
                type_description_2 = "o";
                goto frame_exception_exit_11;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__15__warn_deprecated_unicode();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__10_UnicodeText_428, mod_consts[450], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 456;
            type_description_2 = "o";
            goto frame_exception_exit_11;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_1d7fb75628949076e1e7791a7f180241_11);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_10;

        frame_exception_exit_11:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_1d7fb75628949076e1e7791a7f180241_11);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_1d7fb75628949076e1e7791a7f180241_11, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_1d7fb75628949076e1e7791a7f180241_11->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_1d7fb75628949076e1e7791a7f180241_11, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_1d7fb75628949076e1e7791a7f180241_11,
            type_description_2,
            outline_9_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_1d7fb75628949076e1e7791a7f180241_11 == cache_frame_1d7fb75628949076e1e7791a7f180241_11) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_1d7fb75628949076e1e7791a7f180241_11);
            cache_frame_1d7fb75628949076e1e7791a7f180241_11 = NULL;
        }

        assertFrameObject(frame_1d7fb75628949076e1e7791a7f180241_11);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_10;

        frame_no_exception_10:;
        goto skip_nested_handling_10;
        nested_frame_exit_10:;

        goto try_except_handler_30;
        skip_nested_handling_10:;
        {
            nuitka_bool tmp_condition_result_64;
            PyObject *tmp_cmp_expr_left_10;
            PyObject *tmp_cmp_expr_right_10;
            CHECK_OBJECT(tmp_class_creation_7__bases);
            tmp_cmp_expr_left_10 = tmp_class_creation_7__bases;
            CHECK_OBJECT(tmp_class_creation_7__bases_orig);
            tmp_cmp_expr_right_10 = tmp_class_creation_7__bases_orig;
            tmp_condition_result_64 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_10, tmp_cmp_expr_right_10);
            if (tmp_condition_result_64 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 428;

                goto try_except_handler_30;
            }
            if (tmp_condition_result_64 == NUITKA_BOOL_TRUE) {
                goto branch_yes_41;
            } else {
                goto branch_no_41;
            }
            assert(tmp_condition_result_64 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_41:;
        CHECK_OBJECT(tmp_class_creation_7__bases_orig);
        tmp_dictset_value = tmp_class_creation_7__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__10_UnicodeText_428, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 428;

            goto try_except_handler_30;
        }
        branch_no_41:;
        {
            PyObject *tmp_assign_source_107;
            PyObject *tmp_called_value_27;
            PyObject *tmp_args_value_20;
            PyObject *tmp_tuple_element_37;
            PyObject *tmp_kwargs_value_20;
            CHECK_OBJECT(tmp_class_creation_7__metaclass);
            tmp_called_value_27 = tmp_class_creation_7__metaclass;
            tmp_tuple_element_37 = mod_consts[68];
            tmp_args_value_20 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_20, 0, tmp_tuple_element_37);
            CHECK_OBJECT(tmp_class_creation_7__bases);
            tmp_tuple_element_37 = tmp_class_creation_7__bases;
            PyTuple_SET_ITEM0(tmp_args_value_20, 1, tmp_tuple_element_37);
            tmp_tuple_element_37 = locals_sqlalchemy$sql$sqltypes$$$class__10_UnicodeText_428;
            PyTuple_SET_ITEM0(tmp_args_value_20, 2, tmp_tuple_element_37);
            CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
            tmp_kwargs_value_20 = tmp_class_creation_7__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 428;
            tmp_assign_source_107 = CALL_FUNCTION(tmp_called_value_27, tmp_args_value_20, tmp_kwargs_value_20);
            Py_DECREF(tmp_args_value_20);
            if (tmp_assign_source_107 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 428;

                goto try_except_handler_30;
            }
            assert(outline_9_var___class__ == NULL);
            outline_9_var___class__ = tmp_assign_source_107;
        }
        CHECK_OBJECT(outline_9_var___class__);
        tmp_assign_source_106 = outline_9_var___class__;
        Py_INCREF(tmp_assign_source_106);
        goto try_return_handler_30;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_30:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__10_UnicodeText_428);
        locals_sqlalchemy$sql$sqltypes$$$class__10_UnicodeText_428 = NULL;
        goto try_return_handler_29;
        // Exception handler code:
        try_except_handler_30:;
        exception_keeper_type_28 = exception_type;
        exception_keeper_value_28 = exception_value;
        exception_keeper_tb_28 = exception_tb;
        exception_keeper_lineno_28 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__10_UnicodeText_428);
        locals_sqlalchemy$sql$sqltypes$$$class__10_UnicodeText_428 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_28;
        exception_value = exception_keeper_value_28;
        exception_tb = exception_keeper_tb_28;
        exception_lineno = exception_keeper_lineno_28;

        goto try_except_handler_29;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_29:;
        CHECK_OBJECT(outline_9_var___class__);
        Py_DECREF(outline_9_var___class__);
        outline_9_var___class__ = NULL;
        goto outline_result_10;
        // Exception handler code:
        try_except_handler_29:;
        exception_keeper_type_29 = exception_type;
        exception_keeper_value_29 = exception_value;
        exception_keeper_tb_29 = exception_tb;
        exception_keeper_lineno_29 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_29;
        exception_value = exception_keeper_value_29;
        exception_tb = exception_keeper_tb_29;
        exception_lineno = exception_keeper_lineno_29;

        goto outline_exception_10;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_10:;
        exception_lineno = 428;
        goto try_except_handler_28;
        outline_result_10:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[68], tmp_assign_source_106);
    }
    goto try_end_10;
    // Exception handler code:
    try_except_handler_28:;
    exception_keeper_type_30 = exception_type;
    exception_keeper_value_30 = exception_value;
    exception_keeper_tb_30 = exception_tb;
    exception_keeper_lineno_30 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_7__bases_orig);
    tmp_class_creation_7__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_7__bases);
    tmp_class_creation_7__bases = NULL;
    Py_XDECREF(tmp_class_creation_7__class_decl_dict);
    tmp_class_creation_7__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_7__metaclass);
    tmp_class_creation_7__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_7__prepared);
    tmp_class_creation_7__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_30;
    exception_value = exception_keeper_value_30;
    exception_tb = exception_keeper_tb_30;
    exception_lineno = exception_keeper_lineno_30;

    goto frame_exception_exit_1;
    // End of try:
    try_end_10:;
    CHECK_OBJECT(tmp_class_creation_7__bases_orig);
    Py_DECREF(tmp_class_creation_7__bases_orig);
    tmp_class_creation_7__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_7__bases);
    Py_DECREF(tmp_class_creation_7__bases);
    tmp_class_creation_7__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
    Py_DECREF(tmp_class_creation_7__class_decl_dict);
    tmp_class_creation_7__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_7__metaclass);
    Py_DECREF(tmp_class_creation_7__metaclass);
    tmp_class_creation_7__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_7__prepared);
    Py_DECREF(tmp_class_creation_7__prepared);
    tmp_class_creation_7__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_108;
        PyObject *tmp_tuple_element_38;
        tmp_tuple_element_38 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[412]);

        if (unlikely(tmp_tuple_element_38 == NULL)) {
            tmp_tuple_element_38 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[412]);
        }

        if (tmp_tuple_element_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 460;

            goto try_except_handler_31;
        }
        tmp_assign_source_108 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_assign_source_108, 0, tmp_tuple_element_38);
        tmp_tuple_element_38 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[398]);

        if (unlikely(tmp_tuple_element_38 == NULL)) {
            tmp_tuple_element_38 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[398]);
        }

        if (tmp_tuple_element_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 460;

            goto tuple_build_exception_12;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_108, 1, tmp_tuple_element_38);
        goto tuple_build_noexception_12;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_12:;
        Py_DECREF(tmp_assign_source_108);
        goto try_except_handler_31;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_12:;
        assert(tmp_class_creation_8__bases_orig == NULL);
        tmp_class_creation_8__bases_orig = tmp_assign_source_108;
    }
    {
        PyObject *tmp_assign_source_109;
        PyObject *tmp_dircall_arg1_11;
        CHECK_OBJECT(tmp_class_creation_8__bases_orig);
        tmp_dircall_arg1_11 = tmp_class_creation_8__bases_orig;
        Py_INCREF(tmp_dircall_arg1_11);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_11};
            tmp_assign_source_109 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_109 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 460;

            goto try_except_handler_31;
        }
        assert(tmp_class_creation_8__bases == NULL);
        tmp_class_creation_8__bases = tmp_assign_source_109;
    }
    {
        PyObject *tmp_assign_source_110;
        tmp_assign_source_110 = PyDict_New();
        assert(tmp_class_creation_8__class_decl_dict == NULL);
        tmp_class_creation_8__class_decl_dict = tmp_assign_source_110;
    }
    {
        PyObject *tmp_assign_source_111;
        PyObject *tmp_metaclass_value_11;
        bool tmp_condition_result_65;
        PyObject *tmp_key_value_31;
        PyObject *tmp_dict_arg_value_31;
        PyObject *tmp_dict_arg_value_32;
        PyObject *tmp_key_value_32;
        nuitka_bool tmp_condition_result_66;
        int tmp_truth_name_12;
        PyObject *tmp_type_arg_21;
        PyObject *tmp_expression_value_56;
        PyObject *tmp_subscript_value_11;
        PyObject *tmp_bases_value_11;
        tmp_key_value_31 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
        tmp_dict_arg_value_31 = tmp_class_creation_8__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_31, tmp_key_value_31);
        assert(!(tmp_res == -1));
        tmp_condition_result_65 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_65 != false) {
            goto condexpr_true_24;
        } else {
            goto condexpr_false_24;
        }
        condexpr_true_24:;
        CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
        tmp_dict_arg_value_32 = tmp_class_creation_8__class_decl_dict;
        tmp_key_value_32 = mod_consts[410];
        tmp_metaclass_value_11 = DICT_GET_ITEM0(tmp_dict_arg_value_32, tmp_key_value_32);
        if (tmp_metaclass_value_11 == NULL) {
            tmp_metaclass_value_11 = Py_None;
        }
        assert(!(tmp_metaclass_value_11 == NULL));
        Py_INCREF(tmp_metaclass_value_11);
        goto condexpr_end_24;
        condexpr_false_24:;
        CHECK_OBJECT(tmp_class_creation_8__bases);
        tmp_truth_name_12 = CHECK_IF_TRUE(tmp_class_creation_8__bases);
        if (tmp_truth_name_12 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 460;

            goto try_except_handler_31;
        }
        tmp_condition_result_66 = tmp_truth_name_12 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_66 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_25;
        } else {
            goto condexpr_false_25;
        }
        condexpr_true_25:;
        CHECK_OBJECT(tmp_class_creation_8__bases);
        tmp_expression_value_56 = tmp_class_creation_8__bases;
        tmp_subscript_value_11 = mod_consts[52];
        tmp_type_arg_21 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_56, tmp_subscript_value_11, 0);
        if (tmp_type_arg_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 460;

            goto try_except_handler_31;
        }
        tmp_metaclass_value_11 = BUILTIN_TYPE1(tmp_type_arg_21);
        Py_DECREF(tmp_type_arg_21);
        if (tmp_metaclass_value_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 460;

            goto try_except_handler_31;
        }
        goto condexpr_end_25;
        condexpr_false_25:;
        tmp_metaclass_value_11 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_11);
        condexpr_end_25:;
        condexpr_end_24:;
        CHECK_OBJECT(tmp_class_creation_8__bases);
        tmp_bases_value_11 = tmp_class_creation_8__bases;
        tmp_assign_source_111 = SELECT_METACLASS(tmp_metaclass_value_11, tmp_bases_value_11);
        Py_DECREF(tmp_metaclass_value_11);
        if (tmp_assign_source_111 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 460;

            goto try_except_handler_31;
        }
        assert(tmp_class_creation_8__metaclass == NULL);
        tmp_class_creation_8__metaclass = tmp_assign_source_111;
    }
    {
        bool tmp_condition_result_67;
        PyObject *tmp_key_value_33;
        PyObject *tmp_dict_arg_value_33;
        tmp_key_value_33 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
        tmp_dict_arg_value_33 = tmp_class_creation_8__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_33, tmp_key_value_33);
        assert(!(tmp_res == -1));
        tmp_condition_result_67 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_67 != false) {
            goto branch_yes_42;
        } else {
            goto branch_no_42;
        }
    }
    branch_yes_42:;
    CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_8__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 460;

        goto try_except_handler_31;
    }
    branch_no_42:;
    {
        nuitka_bool tmp_condition_result_68;
        PyObject *tmp_expression_value_57;
        CHECK_OBJECT(tmp_class_creation_8__metaclass);
        tmp_expression_value_57 = tmp_class_creation_8__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_57, mod_consts[411]);
        tmp_condition_result_68 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_68 == NUITKA_BOOL_TRUE) {
            goto branch_yes_43;
        } else {
            goto branch_no_43;
        }
    }
    branch_yes_43:;
    {
        PyObject *tmp_assign_source_112;
        PyObject *tmp_called_value_28;
        PyObject *tmp_expression_value_58;
        PyObject *tmp_args_value_21;
        PyObject *tmp_tuple_element_39;
        PyObject *tmp_kwargs_value_21;
        CHECK_OBJECT(tmp_class_creation_8__metaclass);
        tmp_expression_value_58 = tmp_class_creation_8__metaclass;
        tmp_called_value_28 = LOOKUP_ATTRIBUTE(tmp_expression_value_58, mod_consts[411]);
        if (tmp_called_value_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 460;

            goto try_except_handler_31;
        }
        tmp_tuple_element_39 = mod_consts[73];
        tmp_args_value_21 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_21, 0, tmp_tuple_element_39);
        CHECK_OBJECT(tmp_class_creation_8__bases);
        tmp_tuple_element_39 = tmp_class_creation_8__bases;
        PyTuple_SET_ITEM0(tmp_args_value_21, 1, tmp_tuple_element_39);
        CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
        tmp_kwargs_value_21 = tmp_class_creation_8__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 460;
        tmp_assign_source_112 = CALL_FUNCTION(tmp_called_value_28, tmp_args_value_21, tmp_kwargs_value_21);
        Py_DECREF(tmp_called_value_28);
        Py_DECREF(tmp_args_value_21);
        if (tmp_assign_source_112 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 460;

            goto try_except_handler_31;
        }
        assert(tmp_class_creation_8__prepared == NULL);
        tmp_class_creation_8__prepared = tmp_assign_source_112;
    }
    {
        bool tmp_condition_result_69;
        PyObject *tmp_operand_value_11;
        PyObject *tmp_expression_value_59;
        CHECK_OBJECT(tmp_class_creation_8__prepared);
        tmp_expression_value_59 = tmp_class_creation_8__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_59, mod_consts[413]);
        tmp_operand_value_11 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_11);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 460;

            goto try_except_handler_31;
        }
        tmp_condition_result_69 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_69 != false) {
            goto branch_yes_44;
        } else {
            goto branch_no_44;
        }
    }
    branch_yes_44:;
    {
        PyObject *tmp_raise_type_11;
        PyObject *tmp_raise_value_11;
        PyObject *tmp_left_value_11;
        PyObject *tmp_right_value_11;
        PyObject *tmp_tuple_element_40;
        PyObject *tmp_getattr_target_11;
        PyObject *tmp_getattr_attr_11;
        PyObject *tmp_getattr_default_11;
        tmp_raise_type_11 = PyExc_TypeError;
        tmp_left_value_11 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_8__metaclass);
        tmp_getattr_target_11 = tmp_class_creation_8__metaclass;
        tmp_getattr_attr_11 = mod_consts[190];
        tmp_getattr_default_11 = mod_consts[415];
        tmp_tuple_element_40 = BUILTIN_GETATTR(tmp_getattr_target_11, tmp_getattr_attr_11, tmp_getattr_default_11);
        if (tmp_tuple_element_40 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 460;

            goto try_except_handler_31;
        }
        tmp_right_value_11 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_60;
            PyObject *tmp_type_arg_22;
            PyTuple_SET_ITEM(tmp_right_value_11, 0, tmp_tuple_element_40);
            CHECK_OBJECT(tmp_class_creation_8__prepared);
            tmp_type_arg_22 = tmp_class_creation_8__prepared;
            tmp_expression_value_60 = BUILTIN_TYPE1(tmp_type_arg_22);
            assert(!(tmp_expression_value_60 == NULL));
            tmp_tuple_element_40 = LOOKUP_ATTRIBUTE(tmp_expression_value_60, mod_consts[190]);
            Py_DECREF(tmp_expression_value_60);
            if (tmp_tuple_element_40 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 460;

                goto tuple_build_exception_13;
            }
            PyTuple_SET_ITEM(tmp_right_value_11, 1, tmp_tuple_element_40);
        }
        goto tuple_build_noexception_13;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_13:;
        Py_DECREF(tmp_right_value_11);
        goto try_except_handler_31;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_13:;
        tmp_raise_value_11 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_11, tmp_right_value_11);
        Py_DECREF(tmp_right_value_11);
        if (tmp_raise_value_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 460;

            goto try_except_handler_31;
        }
        exception_type = tmp_raise_type_11;
        Py_INCREF(tmp_raise_type_11);
        exception_value = tmp_raise_value_11;
        exception_lineno = 460;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_31;
    }
    branch_no_44:;
    goto branch_end_43;
    branch_no_43:;
    {
        PyObject *tmp_assign_source_113;
        tmp_assign_source_113 = PyDict_New();
        assert(tmp_class_creation_8__prepared == NULL);
        tmp_class_creation_8__prepared = tmp_assign_source_113;
    }
    branch_end_43:;
    {
        PyObject *tmp_assign_source_114;
        {
            PyObject *tmp_set_locals_11;
            CHECK_OBJECT(tmp_class_creation_8__prepared);
            tmp_set_locals_11 = tmp_class_creation_8__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_460 = tmp_set_locals_11;
            Py_INCREF(tmp_set_locals_11);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_460, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 460;

            goto try_except_handler_33;
        }
        tmp_dictset_value = mod_consts[462];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_460, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 460;

            goto try_except_handler_33;
        }
        tmp_dictset_value = mod_consts[73];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_460, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 460;

            goto try_except_handler_33;
        }
        if (isFrameUnusable(cache_frame_346c980003d55fba9469461bcf621539_12)) {
            Py_XDECREF(cache_frame_346c980003d55fba9469461bcf621539_12);

#if _DEBUG_REFCOUNTS
            if (cache_frame_346c980003d55fba9469461bcf621539_12 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_346c980003d55fba9469461bcf621539_12 = MAKE_FUNCTION_FRAME(codeobj_346c980003d55fba9469461bcf621539, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_346c980003d55fba9469461bcf621539_12->m_type_description == NULL);
        frame_346c980003d55fba9469461bcf621539_12 = cache_frame_346c980003d55fba9469461bcf621539_12;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_346c980003d55fba9469461bcf621539_12);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_346c980003d55fba9469461bcf621539_12) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[463];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_460, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 464;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__16_get_dbapi_type();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_460, mod_consts[447], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 466;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }
        {
            nuitka_bool tmp_condition_result_70;
            PyObject *tmp_called_value_29;
            PyObject *tmp_args_element_value_7;
            PyObject *tmp_called_value_30;
            PyObject *tmp_args_element_value_8;
            tmp_res = MAPPING_HAS_ITEM(locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_460, mod_consts[420]);

            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 469;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_condition_result_70 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_70 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_26;
            } else {
                goto condexpr_false_26;
            }
            condexpr_true_26:;
            tmp_called_value_29 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_460, mod_consts[420]);

            if (unlikely(tmp_called_value_29 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[420]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 469;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }

            if (tmp_called_value_29 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 469;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }


            tmp_args_element_value_7 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__17_python_type();

            frame_346c980003d55fba9469461bcf621539_12->m_frame.f_lineno = 469;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_29, tmp_args_element_value_7);
            Py_DECREF(tmp_called_value_29);
            Py_DECREF(tmp_args_element_value_7);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 469;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            goto condexpr_end_26;
            condexpr_false_26:;
            tmp_called_value_30 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_8 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__17_python_type();

            frame_346c980003d55fba9469461bcf621539_12->m_frame.f_lineno = 469;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_30, tmp_args_element_value_8);
            Py_DECREF(tmp_args_element_value_8);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 469;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            condexpr_end_26:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_460, mod_consts[236], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 470;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__18_literal_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_460, mod_consts[228], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 473;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }
        {
            PyObject *tmp_called_instance_2;
            PyObject *tmp_args_element_value_9;
            tmp_called_instance_2 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_460, mod_consts[43]);

            if (tmp_called_instance_2 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_called_instance_2 == NULL)) {
                        tmp_called_instance_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
                    }

                    if (tmp_called_instance_2 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 479;
                        type_description_2 = "o";
                        goto frame_exception_exit_12;
                    }
                    Py_INCREF(tmp_called_instance_2);
                } else {
                    goto frame_exception_exit_12;
                }
            }



            tmp_args_element_value_9 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__19__expression_adaptations();

            frame_346c980003d55fba9469461bcf621539_12->m_frame.f_lineno = 479;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_2, mod_consts[467], tmp_args_element_value_9);
            Py_DECREF(tmp_called_instance_2);
            Py_DECREF(tmp_args_element_value_9);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 479;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_460, mod_consts[2], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 480;
                type_description_2 = "o";
                goto frame_exception_exit_12;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_346c980003d55fba9469461bcf621539_12);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_11;

        frame_exception_exit_12:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_346c980003d55fba9469461bcf621539_12);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_346c980003d55fba9469461bcf621539_12, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_346c980003d55fba9469461bcf621539_12->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_346c980003d55fba9469461bcf621539_12, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_346c980003d55fba9469461bcf621539_12,
            type_description_2,
            outline_10_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_346c980003d55fba9469461bcf621539_12 == cache_frame_346c980003d55fba9469461bcf621539_12) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_346c980003d55fba9469461bcf621539_12);
            cache_frame_346c980003d55fba9469461bcf621539_12 = NULL;
        }

        assertFrameObject(frame_346c980003d55fba9469461bcf621539_12);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_11;

        frame_no_exception_11:;
        goto skip_nested_handling_11;
        nested_frame_exit_11:;

        goto try_except_handler_33;
        skip_nested_handling_11:;
        {
            nuitka_bool tmp_condition_result_71;
            PyObject *tmp_cmp_expr_left_11;
            PyObject *tmp_cmp_expr_right_11;
            CHECK_OBJECT(tmp_class_creation_8__bases);
            tmp_cmp_expr_left_11 = tmp_class_creation_8__bases;
            CHECK_OBJECT(tmp_class_creation_8__bases_orig);
            tmp_cmp_expr_right_11 = tmp_class_creation_8__bases_orig;
            tmp_condition_result_71 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_11, tmp_cmp_expr_right_11);
            if (tmp_condition_result_71 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 460;

                goto try_except_handler_33;
            }
            if (tmp_condition_result_71 == NUITKA_BOOL_TRUE) {
                goto branch_yes_45;
            } else {
                goto branch_no_45;
            }
            assert(tmp_condition_result_71 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_45:;
        CHECK_OBJECT(tmp_class_creation_8__bases_orig);
        tmp_dictset_value = tmp_class_creation_8__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_460, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 460;

            goto try_except_handler_33;
        }
        branch_no_45:;
        {
            PyObject *tmp_assign_source_115;
            PyObject *tmp_called_value_31;
            PyObject *tmp_args_value_22;
            PyObject *tmp_tuple_element_41;
            PyObject *tmp_kwargs_value_22;
            CHECK_OBJECT(tmp_class_creation_8__metaclass);
            tmp_called_value_31 = tmp_class_creation_8__metaclass;
            tmp_tuple_element_41 = mod_consts[73];
            tmp_args_value_22 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_22, 0, tmp_tuple_element_41);
            CHECK_OBJECT(tmp_class_creation_8__bases);
            tmp_tuple_element_41 = tmp_class_creation_8__bases;
            PyTuple_SET_ITEM0(tmp_args_value_22, 1, tmp_tuple_element_41);
            tmp_tuple_element_41 = locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_460;
            PyTuple_SET_ITEM0(tmp_args_value_22, 2, tmp_tuple_element_41);
            CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
            tmp_kwargs_value_22 = tmp_class_creation_8__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 460;
            tmp_assign_source_115 = CALL_FUNCTION(tmp_called_value_31, tmp_args_value_22, tmp_kwargs_value_22);
            Py_DECREF(tmp_args_value_22);
            if (tmp_assign_source_115 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 460;

                goto try_except_handler_33;
            }
            assert(outline_10_var___class__ == NULL);
            outline_10_var___class__ = tmp_assign_source_115;
        }
        CHECK_OBJECT(outline_10_var___class__);
        tmp_assign_source_114 = outline_10_var___class__;
        Py_INCREF(tmp_assign_source_114);
        goto try_return_handler_33;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_33:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_460);
        locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_460 = NULL;
        goto try_return_handler_32;
        // Exception handler code:
        try_except_handler_33:;
        exception_keeper_type_31 = exception_type;
        exception_keeper_value_31 = exception_value;
        exception_keeper_tb_31 = exception_tb;
        exception_keeper_lineno_31 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_460);
        locals_sqlalchemy$sql$sqltypes$$$class__11_Integer_460 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_31;
        exception_value = exception_keeper_value_31;
        exception_tb = exception_keeper_tb_31;
        exception_lineno = exception_keeper_lineno_31;

        goto try_except_handler_32;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_32:;
        CHECK_OBJECT(outline_10_var___class__);
        Py_DECREF(outline_10_var___class__);
        outline_10_var___class__ = NULL;
        goto outline_result_11;
        // Exception handler code:
        try_except_handler_32:;
        exception_keeper_type_32 = exception_type;
        exception_keeper_value_32 = exception_value;
        exception_keeper_tb_32 = exception_tb;
        exception_keeper_lineno_32 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_32;
        exception_value = exception_keeper_value_32;
        exception_tb = exception_keeper_tb_32;
        exception_lineno = exception_keeper_lineno_32;

        goto outline_exception_11;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_11:;
        exception_lineno = 460;
        goto try_except_handler_31;
        outline_result_11:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[73], tmp_assign_source_114);
    }
    goto try_end_11;
    // Exception handler code:
    try_except_handler_31:;
    exception_keeper_type_33 = exception_type;
    exception_keeper_value_33 = exception_value;
    exception_keeper_tb_33 = exception_tb;
    exception_keeper_lineno_33 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_8__bases_orig);
    tmp_class_creation_8__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_8__bases);
    tmp_class_creation_8__bases = NULL;
    Py_XDECREF(tmp_class_creation_8__class_decl_dict);
    tmp_class_creation_8__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_8__metaclass);
    tmp_class_creation_8__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_8__prepared);
    tmp_class_creation_8__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_33;
    exception_value = exception_keeper_value_33;
    exception_tb = exception_keeper_tb_33;
    exception_lineno = exception_keeper_lineno_33;

    goto frame_exception_exit_1;
    // End of try:
    try_end_11:;
    CHECK_OBJECT(tmp_class_creation_8__bases_orig);
    Py_DECREF(tmp_class_creation_8__bases_orig);
    tmp_class_creation_8__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_8__bases);
    Py_DECREF(tmp_class_creation_8__bases);
    tmp_class_creation_8__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
    Py_DECREF(tmp_class_creation_8__class_decl_dict);
    tmp_class_creation_8__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_8__metaclass);
    Py_DECREF(tmp_class_creation_8__metaclass);
    tmp_class_creation_8__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_8__prepared);
    Py_DECREF(tmp_class_creation_8__prepared);
    tmp_class_creation_8__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_116;
        PyObject *tmp_tuple_element_42;
        tmp_tuple_element_42 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[73]);

        if (unlikely(tmp_tuple_element_42 == NULL)) {
            tmp_tuple_element_42 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
        }

        if (tmp_tuple_element_42 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 500;

            goto try_except_handler_34;
        }
        tmp_assign_source_116 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_116, 0, tmp_tuple_element_42);
        assert(tmp_class_creation_9__bases_orig == NULL);
        tmp_class_creation_9__bases_orig = tmp_assign_source_116;
    }
    {
        PyObject *tmp_assign_source_117;
        PyObject *tmp_dircall_arg1_12;
        CHECK_OBJECT(tmp_class_creation_9__bases_orig);
        tmp_dircall_arg1_12 = tmp_class_creation_9__bases_orig;
        Py_INCREF(tmp_dircall_arg1_12);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_12};
            tmp_assign_source_117 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_117 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 500;

            goto try_except_handler_34;
        }
        assert(tmp_class_creation_9__bases == NULL);
        tmp_class_creation_9__bases = tmp_assign_source_117;
    }
    {
        PyObject *tmp_assign_source_118;
        tmp_assign_source_118 = PyDict_New();
        assert(tmp_class_creation_9__class_decl_dict == NULL);
        tmp_class_creation_9__class_decl_dict = tmp_assign_source_118;
    }
    {
        PyObject *tmp_assign_source_119;
        PyObject *tmp_metaclass_value_12;
        bool tmp_condition_result_72;
        PyObject *tmp_key_value_34;
        PyObject *tmp_dict_arg_value_34;
        PyObject *tmp_dict_arg_value_35;
        PyObject *tmp_key_value_35;
        nuitka_bool tmp_condition_result_73;
        int tmp_truth_name_13;
        PyObject *tmp_type_arg_23;
        PyObject *tmp_expression_value_61;
        PyObject *tmp_subscript_value_12;
        PyObject *tmp_bases_value_12;
        tmp_key_value_34 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
        tmp_dict_arg_value_34 = tmp_class_creation_9__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_34, tmp_key_value_34);
        assert(!(tmp_res == -1));
        tmp_condition_result_72 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_72 != false) {
            goto condexpr_true_27;
        } else {
            goto condexpr_false_27;
        }
        condexpr_true_27:;
        CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
        tmp_dict_arg_value_35 = tmp_class_creation_9__class_decl_dict;
        tmp_key_value_35 = mod_consts[410];
        tmp_metaclass_value_12 = DICT_GET_ITEM0(tmp_dict_arg_value_35, tmp_key_value_35);
        if (tmp_metaclass_value_12 == NULL) {
            tmp_metaclass_value_12 = Py_None;
        }
        assert(!(tmp_metaclass_value_12 == NULL));
        Py_INCREF(tmp_metaclass_value_12);
        goto condexpr_end_27;
        condexpr_false_27:;
        CHECK_OBJECT(tmp_class_creation_9__bases);
        tmp_truth_name_13 = CHECK_IF_TRUE(tmp_class_creation_9__bases);
        if (tmp_truth_name_13 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 500;

            goto try_except_handler_34;
        }
        tmp_condition_result_73 = tmp_truth_name_13 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_73 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_28;
        } else {
            goto condexpr_false_28;
        }
        condexpr_true_28:;
        CHECK_OBJECT(tmp_class_creation_9__bases);
        tmp_expression_value_61 = tmp_class_creation_9__bases;
        tmp_subscript_value_12 = mod_consts[52];
        tmp_type_arg_23 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_61, tmp_subscript_value_12, 0);
        if (tmp_type_arg_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 500;

            goto try_except_handler_34;
        }
        tmp_metaclass_value_12 = BUILTIN_TYPE1(tmp_type_arg_23);
        Py_DECREF(tmp_type_arg_23);
        if (tmp_metaclass_value_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 500;

            goto try_except_handler_34;
        }
        goto condexpr_end_28;
        condexpr_false_28:;
        tmp_metaclass_value_12 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_12);
        condexpr_end_28:;
        condexpr_end_27:;
        CHECK_OBJECT(tmp_class_creation_9__bases);
        tmp_bases_value_12 = tmp_class_creation_9__bases;
        tmp_assign_source_119 = SELECT_METACLASS(tmp_metaclass_value_12, tmp_bases_value_12);
        Py_DECREF(tmp_metaclass_value_12);
        if (tmp_assign_source_119 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 500;

            goto try_except_handler_34;
        }
        assert(tmp_class_creation_9__metaclass == NULL);
        tmp_class_creation_9__metaclass = tmp_assign_source_119;
    }
    {
        bool tmp_condition_result_74;
        PyObject *tmp_key_value_36;
        PyObject *tmp_dict_arg_value_36;
        tmp_key_value_36 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
        tmp_dict_arg_value_36 = tmp_class_creation_9__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_36, tmp_key_value_36);
        assert(!(tmp_res == -1));
        tmp_condition_result_74 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_74 != false) {
            goto branch_yes_46;
        } else {
            goto branch_no_46;
        }
    }
    branch_yes_46:;
    CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_9__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 500;

        goto try_except_handler_34;
    }
    branch_no_46:;
    {
        nuitka_bool tmp_condition_result_75;
        PyObject *tmp_expression_value_62;
        CHECK_OBJECT(tmp_class_creation_9__metaclass);
        tmp_expression_value_62 = tmp_class_creation_9__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_62, mod_consts[411]);
        tmp_condition_result_75 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_75 == NUITKA_BOOL_TRUE) {
            goto branch_yes_47;
        } else {
            goto branch_no_47;
        }
    }
    branch_yes_47:;
    {
        PyObject *tmp_assign_source_120;
        PyObject *tmp_called_value_32;
        PyObject *tmp_expression_value_63;
        PyObject *tmp_args_value_23;
        PyObject *tmp_tuple_element_43;
        PyObject *tmp_kwargs_value_23;
        CHECK_OBJECT(tmp_class_creation_9__metaclass);
        tmp_expression_value_63 = tmp_class_creation_9__metaclass;
        tmp_called_value_32 = LOOKUP_ATTRIBUTE(tmp_expression_value_63, mod_consts[411]);
        if (tmp_called_value_32 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 500;

            goto try_except_handler_34;
        }
        tmp_tuple_element_43 = mod_consts[469];
        tmp_args_value_23 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_23, 0, tmp_tuple_element_43);
        CHECK_OBJECT(tmp_class_creation_9__bases);
        tmp_tuple_element_43 = tmp_class_creation_9__bases;
        PyTuple_SET_ITEM0(tmp_args_value_23, 1, tmp_tuple_element_43);
        CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
        tmp_kwargs_value_23 = tmp_class_creation_9__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 500;
        tmp_assign_source_120 = CALL_FUNCTION(tmp_called_value_32, tmp_args_value_23, tmp_kwargs_value_23);
        Py_DECREF(tmp_called_value_32);
        Py_DECREF(tmp_args_value_23);
        if (tmp_assign_source_120 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 500;

            goto try_except_handler_34;
        }
        assert(tmp_class_creation_9__prepared == NULL);
        tmp_class_creation_9__prepared = tmp_assign_source_120;
    }
    {
        bool tmp_condition_result_76;
        PyObject *tmp_operand_value_12;
        PyObject *tmp_expression_value_64;
        CHECK_OBJECT(tmp_class_creation_9__prepared);
        tmp_expression_value_64 = tmp_class_creation_9__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_64, mod_consts[413]);
        tmp_operand_value_12 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_12);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 500;

            goto try_except_handler_34;
        }
        tmp_condition_result_76 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_76 != false) {
            goto branch_yes_48;
        } else {
            goto branch_no_48;
        }
    }
    branch_yes_48:;
    {
        PyObject *tmp_raise_type_12;
        PyObject *tmp_raise_value_12;
        PyObject *tmp_left_value_12;
        PyObject *tmp_right_value_12;
        PyObject *tmp_tuple_element_44;
        PyObject *tmp_getattr_target_12;
        PyObject *tmp_getattr_attr_12;
        PyObject *tmp_getattr_default_12;
        tmp_raise_type_12 = PyExc_TypeError;
        tmp_left_value_12 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_9__metaclass);
        tmp_getattr_target_12 = tmp_class_creation_9__metaclass;
        tmp_getattr_attr_12 = mod_consts[190];
        tmp_getattr_default_12 = mod_consts[415];
        tmp_tuple_element_44 = BUILTIN_GETATTR(tmp_getattr_target_12, tmp_getattr_attr_12, tmp_getattr_default_12);
        if (tmp_tuple_element_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 500;

            goto try_except_handler_34;
        }
        tmp_right_value_12 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_65;
            PyObject *tmp_type_arg_24;
            PyTuple_SET_ITEM(tmp_right_value_12, 0, tmp_tuple_element_44);
            CHECK_OBJECT(tmp_class_creation_9__prepared);
            tmp_type_arg_24 = tmp_class_creation_9__prepared;
            tmp_expression_value_65 = BUILTIN_TYPE1(tmp_type_arg_24);
            assert(!(tmp_expression_value_65 == NULL));
            tmp_tuple_element_44 = LOOKUP_ATTRIBUTE(tmp_expression_value_65, mod_consts[190]);
            Py_DECREF(tmp_expression_value_65);
            if (tmp_tuple_element_44 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 500;

                goto tuple_build_exception_14;
            }
            PyTuple_SET_ITEM(tmp_right_value_12, 1, tmp_tuple_element_44);
        }
        goto tuple_build_noexception_14;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_14:;
        Py_DECREF(tmp_right_value_12);
        goto try_except_handler_34;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_14:;
        tmp_raise_value_12 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_12, tmp_right_value_12);
        Py_DECREF(tmp_right_value_12);
        if (tmp_raise_value_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 500;

            goto try_except_handler_34;
        }
        exception_type = tmp_raise_type_12;
        Py_INCREF(tmp_raise_type_12);
        exception_value = tmp_raise_value_12;
        exception_lineno = 500;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_34;
    }
    branch_no_48:;
    goto branch_end_47;
    branch_no_47:;
    {
        PyObject *tmp_assign_source_121;
        tmp_assign_source_121 = PyDict_New();
        assert(tmp_class_creation_9__prepared == NULL);
        tmp_class_creation_9__prepared = tmp_assign_source_121;
    }
    branch_end_47:;
    {
        PyObject *tmp_assign_source_122;
        {
            PyObject *tmp_set_locals_12;
            CHECK_OBJECT(tmp_class_creation_9__prepared);
            tmp_set_locals_12 = tmp_class_creation_9__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__12_SmallInteger_500 = tmp_set_locals_12;
            Py_INCREF(tmp_set_locals_12);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__12_SmallInteger_500, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 500;

            goto try_except_handler_36;
        }
        tmp_dictset_value = mod_consts[470];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__12_SmallInteger_500, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 500;

            goto try_except_handler_36;
        }
        tmp_dictset_value = mod_consts[469];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__12_SmallInteger_500, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 500;

            goto try_except_handler_36;
        }
        if (isFrameUnusable(cache_frame_91c720b149aa182de30f187d353d5fe1_13)) {
            Py_XDECREF(cache_frame_91c720b149aa182de30f187d353d5fe1_13);

#if _DEBUG_REFCOUNTS
            if (cache_frame_91c720b149aa182de30f187d353d5fe1_13 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_91c720b149aa182de30f187d353d5fe1_13 = MAKE_FUNCTION_FRAME(codeobj_91c720b149aa182de30f187d353d5fe1, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_91c720b149aa182de30f187d353d5fe1_13->m_type_description == NULL);
        frame_91c720b149aa182de30f187d353d5fe1_13 = cache_frame_91c720b149aa182de30f187d353d5fe1_13;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_91c720b149aa182de30f187d353d5fe1_13);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_91c720b149aa182de30f187d353d5fe1_13) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[471];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__12_SmallInteger_500, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 509;
            type_description_2 = "o";
            goto frame_exception_exit_13;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_91c720b149aa182de30f187d353d5fe1_13);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_12;

        frame_exception_exit_13:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_91c720b149aa182de30f187d353d5fe1_13);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_91c720b149aa182de30f187d353d5fe1_13, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_91c720b149aa182de30f187d353d5fe1_13->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_91c720b149aa182de30f187d353d5fe1_13, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_91c720b149aa182de30f187d353d5fe1_13,
            type_description_2,
            outline_11_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_91c720b149aa182de30f187d353d5fe1_13 == cache_frame_91c720b149aa182de30f187d353d5fe1_13) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_91c720b149aa182de30f187d353d5fe1_13);
            cache_frame_91c720b149aa182de30f187d353d5fe1_13 = NULL;
        }

        assertFrameObject(frame_91c720b149aa182de30f187d353d5fe1_13);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_12;

        frame_no_exception_12:;
        goto skip_nested_handling_12;
        nested_frame_exit_12:;

        goto try_except_handler_36;
        skip_nested_handling_12:;
        {
            nuitka_bool tmp_condition_result_77;
            PyObject *tmp_cmp_expr_left_12;
            PyObject *tmp_cmp_expr_right_12;
            CHECK_OBJECT(tmp_class_creation_9__bases);
            tmp_cmp_expr_left_12 = tmp_class_creation_9__bases;
            CHECK_OBJECT(tmp_class_creation_9__bases_orig);
            tmp_cmp_expr_right_12 = tmp_class_creation_9__bases_orig;
            tmp_condition_result_77 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_12, tmp_cmp_expr_right_12);
            if (tmp_condition_result_77 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 500;

                goto try_except_handler_36;
            }
            if (tmp_condition_result_77 == NUITKA_BOOL_TRUE) {
                goto branch_yes_49;
            } else {
                goto branch_no_49;
            }
            assert(tmp_condition_result_77 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_49:;
        CHECK_OBJECT(tmp_class_creation_9__bases_orig);
        tmp_dictset_value = tmp_class_creation_9__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__12_SmallInteger_500, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 500;

            goto try_except_handler_36;
        }
        branch_no_49:;
        {
            PyObject *tmp_assign_source_123;
            PyObject *tmp_called_value_33;
            PyObject *tmp_args_value_24;
            PyObject *tmp_tuple_element_45;
            PyObject *tmp_kwargs_value_24;
            CHECK_OBJECT(tmp_class_creation_9__metaclass);
            tmp_called_value_33 = tmp_class_creation_9__metaclass;
            tmp_tuple_element_45 = mod_consts[469];
            tmp_args_value_24 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_24, 0, tmp_tuple_element_45);
            CHECK_OBJECT(tmp_class_creation_9__bases);
            tmp_tuple_element_45 = tmp_class_creation_9__bases;
            PyTuple_SET_ITEM0(tmp_args_value_24, 1, tmp_tuple_element_45);
            tmp_tuple_element_45 = locals_sqlalchemy$sql$sqltypes$$$class__12_SmallInteger_500;
            PyTuple_SET_ITEM0(tmp_args_value_24, 2, tmp_tuple_element_45);
            CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
            tmp_kwargs_value_24 = tmp_class_creation_9__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 500;
            tmp_assign_source_123 = CALL_FUNCTION(tmp_called_value_33, tmp_args_value_24, tmp_kwargs_value_24);
            Py_DECREF(tmp_args_value_24);
            if (tmp_assign_source_123 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 500;

                goto try_except_handler_36;
            }
            assert(outline_11_var___class__ == NULL);
            outline_11_var___class__ = tmp_assign_source_123;
        }
        CHECK_OBJECT(outline_11_var___class__);
        tmp_assign_source_122 = outline_11_var___class__;
        Py_INCREF(tmp_assign_source_122);
        goto try_return_handler_36;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_36:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__12_SmallInteger_500);
        locals_sqlalchemy$sql$sqltypes$$$class__12_SmallInteger_500 = NULL;
        goto try_return_handler_35;
        // Exception handler code:
        try_except_handler_36:;
        exception_keeper_type_34 = exception_type;
        exception_keeper_value_34 = exception_value;
        exception_keeper_tb_34 = exception_tb;
        exception_keeper_lineno_34 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__12_SmallInteger_500);
        locals_sqlalchemy$sql$sqltypes$$$class__12_SmallInteger_500 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_34;
        exception_value = exception_keeper_value_34;
        exception_tb = exception_keeper_tb_34;
        exception_lineno = exception_keeper_lineno_34;

        goto try_except_handler_35;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_35:;
        CHECK_OBJECT(outline_11_var___class__);
        Py_DECREF(outline_11_var___class__);
        outline_11_var___class__ = NULL;
        goto outline_result_12;
        // Exception handler code:
        try_except_handler_35:;
        exception_keeper_type_35 = exception_type;
        exception_keeper_value_35 = exception_value;
        exception_keeper_tb_35 = exception_tb;
        exception_keeper_lineno_35 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_35;
        exception_value = exception_keeper_value_35;
        exception_tb = exception_keeper_tb_35;
        exception_lineno = exception_keeper_lineno_35;

        goto outline_exception_12;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_12:;
        exception_lineno = 500;
        goto try_except_handler_34;
        outline_result_12:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[469], tmp_assign_source_122);
    }
    goto try_end_12;
    // Exception handler code:
    try_except_handler_34:;
    exception_keeper_type_36 = exception_type;
    exception_keeper_value_36 = exception_value;
    exception_keeper_tb_36 = exception_tb;
    exception_keeper_lineno_36 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_9__bases_orig);
    tmp_class_creation_9__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_9__bases);
    tmp_class_creation_9__bases = NULL;
    Py_XDECREF(tmp_class_creation_9__class_decl_dict);
    tmp_class_creation_9__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_9__metaclass);
    tmp_class_creation_9__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_9__prepared);
    tmp_class_creation_9__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_36;
    exception_value = exception_keeper_value_36;
    exception_tb = exception_keeper_tb_36;
    exception_lineno = exception_keeper_lineno_36;

    goto frame_exception_exit_1;
    // End of try:
    try_end_12:;
    CHECK_OBJECT(tmp_class_creation_9__bases_orig);
    Py_DECREF(tmp_class_creation_9__bases_orig);
    tmp_class_creation_9__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_9__bases);
    Py_DECREF(tmp_class_creation_9__bases);
    tmp_class_creation_9__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
    Py_DECREF(tmp_class_creation_9__class_decl_dict);
    tmp_class_creation_9__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_9__metaclass);
    Py_DECREF(tmp_class_creation_9__metaclass);
    tmp_class_creation_9__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_9__prepared);
    Py_DECREF(tmp_class_creation_9__prepared);
    tmp_class_creation_9__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_124;
        PyObject *tmp_tuple_element_46;
        tmp_tuple_element_46 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[73]);

        if (unlikely(tmp_tuple_element_46 == NULL)) {
            tmp_tuple_element_46 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
        }

        if (tmp_tuple_element_46 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 512;

            goto try_except_handler_37;
        }
        tmp_assign_source_124 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_124, 0, tmp_tuple_element_46);
        assert(tmp_class_creation_10__bases_orig == NULL);
        tmp_class_creation_10__bases_orig = tmp_assign_source_124;
    }
    {
        PyObject *tmp_assign_source_125;
        PyObject *tmp_dircall_arg1_13;
        CHECK_OBJECT(tmp_class_creation_10__bases_orig);
        tmp_dircall_arg1_13 = tmp_class_creation_10__bases_orig;
        Py_INCREF(tmp_dircall_arg1_13);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_13};
            tmp_assign_source_125 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_125 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 512;

            goto try_except_handler_37;
        }
        assert(tmp_class_creation_10__bases == NULL);
        tmp_class_creation_10__bases = tmp_assign_source_125;
    }
    {
        PyObject *tmp_assign_source_126;
        tmp_assign_source_126 = PyDict_New();
        assert(tmp_class_creation_10__class_decl_dict == NULL);
        tmp_class_creation_10__class_decl_dict = tmp_assign_source_126;
    }
    {
        PyObject *tmp_assign_source_127;
        PyObject *tmp_metaclass_value_13;
        bool tmp_condition_result_78;
        PyObject *tmp_key_value_37;
        PyObject *tmp_dict_arg_value_37;
        PyObject *tmp_dict_arg_value_38;
        PyObject *tmp_key_value_38;
        nuitka_bool tmp_condition_result_79;
        int tmp_truth_name_14;
        PyObject *tmp_type_arg_25;
        PyObject *tmp_expression_value_66;
        PyObject *tmp_subscript_value_13;
        PyObject *tmp_bases_value_13;
        tmp_key_value_37 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
        tmp_dict_arg_value_37 = tmp_class_creation_10__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_37, tmp_key_value_37);
        assert(!(tmp_res == -1));
        tmp_condition_result_78 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_78 != false) {
            goto condexpr_true_29;
        } else {
            goto condexpr_false_29;
        }
        condexpr_true_29:;
        CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
        tmp_dict_arg_value_38 = tmp_class_creation_10__class_decl_dict;
        tmp_key_value_38 = mod_consts[410];
        tmp_metaclass_value_13 = DICT_GET_ITEM0(tmp_dict_arg_value_38, tmp_key_value_38);
        if (tmp_metaclass_value_13 == NULL) {
            tmp_metaclass_value_13 = Py_None;
        }
        assert(!(tmp_metaclass_value_13 == NULL));
        Py_INCREF(tmp_metaclass_value_13);
        goto condexpr_end_29;
        condexpr_false_29:;
        CHECK_OBJECT(tmp_class_creation_10__bases);
        tmp_truth_name_14 = CHECK_IF_TRUE(tmp_class_creation_10__bases);
        if (tmp_truth_name_14 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 512;

            goto try_except_handler_37;
        }
        tmp_condition_result_79 = tmp_truth_name_14 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_79 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_30;
        } else {
            goto condexpr_false_30;
        }
        condexpr_true_30:;
        CHECK_OBJECT(tmp_class_creation_10__bases);
        tmp_expression_value_66 = tmp_class_creation_10__bases;
        tmp_subscript_value_13 = mod_consts[52];
        tmp_type_arg_25 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_66, tmp_subscript_value_13, 0);
        if (tmp_type_arg_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 512;

            goto try_except_handler_37;
        }
        tmp_metaclass_value_13 = BUILTIN_TYPE1(tmp_type_arg_25);
        Py_DECREF(tmp_type_arg_25);
        if (tmp_metaclass_value_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 512;

            goto try_except_handler_37;
        }
        goto condexpr_end_30;
        condexpr_false_30:;
        tmp_metaclass_value_13 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_13);
        condexpr_end_30:;
        condexpr_end_29:;
        CHECK_OBJECT(tmp_class_creation_10__bases);
        tmp_bases_value_13 = tmp_class_creation_10__bases;
        tmp_assign_source_127 = SELECT_METACLASS(tmp_metaclass_value_13, tmp_bases_value_13);
        Py_DECREF(tmp_metaclass_value_13);
        if (tmp_assign_source_127 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 512;

            goto try_except_handler_37;
        }
        assert(tmp_class_creation_10__metaclass == NULL);
        tmp_class_creation_10__metaclass = tmp_assign_source_127;
    }
    {
        bool tmp_condition_result_80;
        PyObject *tmp_key_value_39;
        PyObject *tmp_dict_arg_value_39;
        tmp_key_value_39 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
        tmp_dict_arg_value_39 = tmp_class_creation_10__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_39, tmp_key_value_39);
        assert(!(tmp_res == -1));
        tmp_condition_result_80 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_80 != false) {
            goto branch_yes_50;
        } else {
            goto branch_no_50;
        }
    }
    branch_yes_50:;
    CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_10__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 512;

        goto try_except_handler_37;
    }
    branch_no_50:;
    {
        nuitka_bool tmp_condition_result_81;
        PyObject *tmp_expression_value_67;
        CHECK_OBJECT(tmp_class_creation_10__metaclass);
        tmp_expression_value_67 = tmp_class_creation_10__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_67, mod_consts[411]);
        tmp_condition_result_81 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_81 == NUITKA_BOOL_TRUE) {
            goto branch_yes_51;
        } else {
            goto branch_no_51;
        }
    }
    branch_yes_51:;
    {
        PyObject *tmp_assign_source_128;
        PyObject *tmp_called_value_34;
        PyObject *tmp_expression_value_68;
        PyObject *tmp_args_value_25;
        PyObject *tmp_tuple_element_47;
        PyObject *tmp_kwargs_value_25;
        CHECK_OBJECT(tmp_class_creation_10__metaclass);
        tmp_expression_value_68 = tmp_class_creation_10__metaclass;
        tmp_called_value_34 = LOOKUP_ATTRIBUTE(tmp_expression_value_68, mod_consts[411]);
        if (tmp_called_value_34 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 512;

            goto try_except_handler_37;
        }
        tmp_tuple_element_47 = mod_consts[472];
        tmp_args_value_25 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_25, 0, tmp_tuple_element_47);
        CHECK_OBJECT(tmp_class_creation_10__bases);
        tmp_tuple_element_47 = tmp_class_creation_10__bases;
        PyTuple_SET_ITEM0(tmp_args_value_25, 1, tmp_tuple_element_47);
        CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
        tmp_kwargs_value_25 = tmp_class_creation_10__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 512;
        tmp_assign_source_128 = CALL_FUNCTION(tmp_called_value_34, tmp_args_value_25, tmp_kwargs_value_25);
        Py_DECREF(tmp_called_value_34);
        Py_DECREF(tmp_args_value_25);
        if (tmp_assign_source_128 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 512;

            goto try_except_handler_37;
        }
        assert(tmp_class_creation_10__prepared == NULL);
        tmp_class_creation_10__prepared = tmp_assign_source_128;
    }
    {
        bool tmp_condition_result_82;
        PyObject *tmp_operand_value_13;
        PyObject *tmp_expression_value_69;
        CHECK_OBJECT(tmp_class_creation_10__prepared);
        tmp_expression_value_69 = tmp_class_creation_10__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_69, mod_consts[413]);
        tmp_operand_value_13 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_13);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 512;

            goto try_except_handler_37;
        }
        tmp_condition_result_82 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_82 != false) {
            goto branch_yes_52;
        } else {
            goto branch_no_52;
        }
    }
    branch_yes_52:;
    {
        PyObject *tmp_raise_type_13;
        PyObject *tmp_raise_value_13;
        PyObject *tmp_left_value_13;
        PyObject *tmp_right_value_13;
        PyObject *tmp_tuple_element_48;
        PyObject *tmp_getattr_target_13;
        PyObject *tmp_getattr_attr_13;
        PyObject *tmp_getattr_default_13;
        tmp_raise_type_13 = PyExc_TypeError;
        tmp_left_value_13 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_10__metaclass);
        tmp_getattr_target_13 = tmp_class_creation_10__metaclass;
        tmp_getattr_attr_13 = mod_consts[190];
        tmp_getattr_default_13 = mod_consts[415];
        tmp_tuple_element_48 = BUILTIN_GETATTR(tmp_getattr_target_13, tmp_getattr_attr_13, tmp_getattr_default_13);
        if (tmp_tuple_element_48 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 512;

            goto try_except_handler_37;
        }
        tmp_right_value_13 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_70;
            PyObject *tmp_type_arg_26;
            PyTuple_SET_ITEM(tmp_right_value_13, 0, tmp_tuple_element_48);
            CHECK_OBJECT(tmp_class_creation_10__prepared);
            tmp_type_arg_26 = tmp_class_creation_10__prepared;
            tmp_expression_value_70 = BUILTIN_TYPE1(tmp_type_arg_26);
            assert(!(tmp_expression_value_70 == NULL));
            tmp_tuple_element_48 = LOOKUP_ATTRIBUTE(tmp_expression_value_70, mod_consts[190]);
            Py_DECREF(tmp_expression_value_70);
            if (tmp_tuple_element_48 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 512;

                goto tuple_build_exception_15;
            }
            PyTuple_SET_ITEM(tmp_right_value_13, 1, tmp_tuple_element_48);
        }
        goto tuple_build_noexception_15;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_15:;
        Py_DECREF(tmp_right_value_13);
        goto try_except_handler_37;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_15:;
        tmp_raise_value_13 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_13, tmp_right_value_13);
        Py_DECREF(tmp_right_value_13);
        if (tmp_raise_value_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 512;

            goto try_except_handler_37;
        }
        exception_type = tmp_raise_type_13;
        Py_INCREF(tmp_raise_type_13);
        exception_value = tmp_raise_value_13;
        exception_lineno = 512;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_37;
    }
    branch_no_52:;
    goto branch_end_51;
    branch_no_51:;
    {
        PyObject *tmp_assign_source_129;
        tmp_assign_source_129 = PyDict_New();
        assert(tmp_class_creation_10__prepared == NULL);
        tmp_class_creation_10__prepared = tmp_assign_source_129;
    }
    branch_end_51:;
    {
        PyObject *tmp_assign_source_130;
        {
            PyObject *tmp_set_locals_13;
            CHECK_OBJECT(tmp_class_creation_10__prepared);
            tmp_set_locals_13 = tmp_class_creation_10__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__13_BigInteger_512 = tmp_set_locals_13;
            Py_INCREF(tmp_set_locals_13);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__13_BigInteger_512, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 512;

            goto try_except_handler_39;
        }
        tmp_dictset_value = mod_consts[473];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__13_BigInteger_512, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 512;

            goto try_except_handler_39;
        }
        tmp_dictset_value = mod_consts[472];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__13_BigInteger_512, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 512;

            goto try_except_handler_39;
        }
        if (isFrameUnusable(cache_frame_6f85b81963dc03c6b2ae53a00c99188c_14)) {
            Py_XDECREF(cache_frame_6f85b81963dc03c6b2ae53a00c99188c_14);

#if _DEBUG_REFCOUNTS
            if (cache_frame_6f85b81963dc03c6b2ae53a00c99188c_14 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_6f85b81963dc03c6b2ae53a00c99188c_14 = MAKE_FUNCTION_FRAME(codeobj_6f85b81963dc03c6b2ae53a00c99188c, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_6f85b81963dc03c6b2ae53a00c99188c_14->m_type_description == NULL);
        frame_6f85b81963dc03c6b2ae53a00c99188c_14 = cache_frame_6f85b81963dc03c6b2ae53a00c99188c_14;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_6f85b81963dc03c6b2ae53a00c99188c_14);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_6f85b81963dc03c6b2ae53a00c99188c_14) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[474];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__13_BigInteger_512, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 521;
            type_description_2 = "o";
            goto frame_exception_exit_14;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_6f85b81963dc03c6b2ae53a00c99188c_14);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_13;

        frame_exception_exit_14:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_6f85b81963dc03c6b2ae53a00c99188c_14);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_6f85b81963dc03c6b2ae53a00c99188c_14, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_6f85b81963dc03c6b2ae53a00c99188c_14->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_6f85b81963dc03c6b2ae53a00c99188c_14, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_6f85b81963dc03c6b2ae53a00c99188c_14,
            type_description_2,
            outline_12_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_6f85b81963dc03c6b2ae53a00c99188c_14 == cache_frame_6f85b81963dc03c6b2ae53a00c99188c_14) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_6f85b81963dc03c6b2ae53a00c99188c_14);
            cache_frame_6f85b81963dc03c6b2ae53a00c99188c_14 = NULL;
        }

        assertFrameObject(frame_6f85b81963dc03c6b2ae53a00c99188c_14);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_13;

        frame_no_exception_13:;
        goto skip_nested_handling_13;
        nested_frame_exit_13:;

        goto try_except_handler_39;
        skip_nested_handling_13:;
        {
            nuitka_bool tmp_condition_result_83;
            PyObject *tmp_cmp_expr_left_13;
            PyObject *tmp_cmp_expr_right_13;
            CHECK_OBJECT(tmp_class_creation_10__bases);
            tmp_cmp_expr_left_13 = tmp_class_creation_10__bases;
            CHECK_OBJECT(tmp_class_creation_10__bases_orig);
            tmp_cmp_expr_right_13 = tmp_class_creation_10__bases_orig;
            tmp_condition_result_83 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_13, tmp_cmp_expr_right_13);
            if (tmp_condition_result_83 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 512;

                goto try_except_handler_39;
            }
            if (tmp_condition_result_83 == NUITKA_BOOL_TRUE) {
                goto branch_yes_53;
            } else {
                goto branch_no_53;
            }
            assert(tmp_condition_result_83 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_53:;
        CHECK_OBJECT(tmp_class_creation_10__bases_orig);
        tmp_dictset_value = tmp_class_creation_10__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__13_BigInteger_512, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 512;

            goto try_except_handler_39;
        }
        branch_no_53:;
        {
            PyObject *tmp_assign_source_131;
            PyObject *tmp_called_value_35;
            PyObject *tmp_args_value_26;
            PyObject *tmp_tuple_element_49;
            PyObject *tmp_kwargs_value_26;
            CHECK_OBJECT(tmp_class_creation_10__metaclass);
            tmp_called_value_35 = tmp_class_creation_10__metaclass;
            tmp_tuple_element_49 = mod_consts[472];
            tmp_args_value_26 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_26, 0, tmp_tuple_element_49);
            CHECK_OBJECT(tmp_class_creation_10__bases);
            tmp_tuple_element_49 = tmp_class_creation_10__bases;
            PyTuple_SET_ITEM0(tmp_args_value_26, 1, tmp_tuple_element_49);
            tmp_tuple_element_49 = locals_sqlalchemy$sql$sqltypes$$$class__13_BigInteger_512;
            PyTuple_SET_ITEM0(tmp_args_value_26, 2, tmp_tuple_element_49);
            CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
            tmp_kwargs_value_26 = tmp_class_creation_10__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 512;
            tmp_assign_source_131 = CALL_FUNCTION(tmp_called_value_35, tmp_args_value_26, tmp_kwargs_value_26);
            Py_DECREF(tmp_args_value_26);
            if (tmp_assign_source_131 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 512;

                goto try_except_handler_39;
            }
            assert(outline_12_var___class__ == NULL);
            outline_12_var___class__ = tmp_assign_source_131;
        }
        CHECK_OBJECT(outline_12_var___class__);
        tmp_assign_source_130 = outline_12_var___class__;
        Py_INCREF(tmp_assign_source_130);
        goto try_return_handler_39;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_39:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__13_BigInteger_512);
        locals_sqlalchemy$sql$sqltypes$$$class__13_BigInteger_512 = NULL;
        goto try_return_handler_38;
        // Exception handler code:
        try_except_handler_39:;
        exception_keeper_type_37 = exception_type;
        exception_keeper_value_37 = exception_value;
        exception_keeper_tb_37 = exception_tb;
        exception_keeper_lineno_37 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__13_BigInteger_512);
        locals_sqlalchemy$sql$sqltypes$$$class__13_BigInteger_512 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_37;
        exception_value = exception_keeper_value_37;
        exception_tb = exception_keeper_tb_37;
        exception_lineno = exception_keeper_lineno_37;

        goto try_except_handler_38;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_38:;
        CHECK_OBJECT(outline_12_var___class__);
        Py_DECREF(outline_12_var___class__);
        outline_12_var___class__ = NULL;
        goto outline_result_13;
        // Exception handler code:
        try_except_handler_38:;
        exception_keeper_type_38 = exception_type;
        exception_keeper_value_38 = exception_value;
        exception_keeper_tb_38 = exception_tb;
        exception_keeper_lineno_38 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_38;
        exception_value = exception_keeper_value_38;
        exception_tb = exception_keeper_tb_38;
        exception_lineno = exception_keeper_lineno_38;

        goto outline_exception_13;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_13:;
        exception_lineno = 512;
        goto try_except_handler_37;
        outline_result_13:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[472], tmp_assign_source_130);
    }
    goto try_end_13;
    // Exception handler code:
    try_except_handler_37:;
    exception_keeper_type_39 = exception_type;
    exception_keeper_value_39 = exception_value;
    exception_keeper_tb_39 = exception_tb;
    exception_keeper_lineno_39 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_10__bases_orig);
    tmp_class_creation_10__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_10__bases);
    tmp_class_creation_10__bases = NULL;
    Py_XDECREF(tmp_class_creation_10__class_decl_dict);
    tmp_class_creation_10__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_10__metaclass);
    tmp_class_creation_10__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_10__prepared);
    tmp_class_creation_10__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_39;
    exception_value = exception_keeper_value_39;
    exception_tb = exception_keeper_tb_39;
    exception_lineno = exception_keeper_lineno_39;

    goto frame_exception_exit_1;
    // End of try:
    try_end_13:;
    CHECK_OBJECT(tmp_class_creation_10__bases_orig);
    Py_DECREF(tmp_class_creation_10__bases_orig);
    tmp_class_creation_10__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_10__bases);
    Py_DECREF(tmp_class_creation_10__bases);
    tmp_class_creation_10__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
    Py_DECREF(tmp_class_creation_10__class_decl_dict);
    tmp_class_creation_10__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_10__metaclass);
    Py_DECREF(tmp_class_creation_10__metaclass);
    tmp_class_creation_10__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_10__prepared);
    Py_DECREF(tmp_class_creation_10__prepared);
    tmp_class_creation_10__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_132;
        PyObject *tmp_tuple_element_50;
        tmp_tuple_element_50 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[412]);

        if (unlikely(tmp_tuple_element_50 == NULL)) {
            tmp_tuple_element_50 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[412]);
        }

        if (tmp_tuple_element_50 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;

            goto try_except_handler_40;
        }
        tmp_assign_source_132 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_assign_source_132, 0, tmp_tuple_element_50);
        tmp_tuple_element_50 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[398]);

        if (unlikely(tmp_tuple_element_50 == NULL)) {
            tmp_tuple_element_50 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[398]);
        }

        if (tmp_tuple_element_50 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;

            goto tuple_build_exception_16;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_132, 1, tmp_tuple_element_50);
        goto tuple_build_noexception_16;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_16:;
        Py_DECREF(tmp_assign_source_132);
        goto try_except_handler_40;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_16:;
        assert(tmp_class_creation_11__bases_orig == NULL);
        tmp_class_creation_11__bases_orig = tmp_assign_source_132;
    }
    {
        PyObject *tmp_assign_source_133;
        PyObject *tmp_dircall_arg1_14;
        CHECK_OBJECT(tmp_class_creation_11__bases_orig);
        tmp_dircall_arg1_14 = tmp_class_creation_11__bases_orig;
        Py_INCREF(tmp_dircall_arg1_14);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_14};
            tmp_assign_source_133 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_133 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;

            goto try_except_handler_40;
        }
        assert(tmp_class_creation_11__bases == NULL);
        tmp_class_creation_11__bases = tmp_assign_source_133;
    }
    {
        PyObject *tmp_assign_source_134;
        tmp_assign_source_134 = PyDict_New();
        assert(tmp_class_creation_11__class_decl_dict == NULL);
        tmp_class_creation_11__class_decl_dict = tmp_assign_source_134;
    }
    {
        PyObject *tmp_assign_source_135;
        PyObject *tmp_metaclass_value_14;
        bool tmp_condition_result_84;
        PyObject *tmp_key_value_40;
        PyObject *tmp_dict_arg_value_40;
        PyObject *tmp_dict_arg_value_41;
        PyObject *tmp_key_value_41;
        nuitka_bool tmp_condition_result_85;
        int tmp_truth_name_15;
        PyObject *tmp_type_arg_27;
        PyObject *tmp_expression_value_71;
        PyObject *tmp_subscript_value_14;
        PyObject *tmp_bases_value_14;
        tmp_key_value_40 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
        tmp_dict_arg_value_40 = tmp_class_creation_11__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_40, tmp_key_value_40);
        assert(!(tmp_res == -1));
        tmp_condition_result_84 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_84 != false) {
            goto condexpr_true_31;
        } else {
            goto condexpr_false_31;
        }
        condexpr_true_31:;
        CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
        tmp_dict_arg_value_41 = tmp_class_creation_11__class_decl_dict;
        tmp_key_value_41 = mod_consts[410];
        tmp_metaclass_value_14 = DICT_GET_ITEM0(tmp_dict_arg_value_41, tmp_key_value_41);
        if (tmp_metaclass_value_14 == NULL) {
            tmp_metaclass_value_14 = Py_None;
        }
        assert(!(tmp_metaclass_value_14 == NULL));
        Py_INCREF(tmp_metaclass_value_14);
        goto condexpr_end_31;
        condexpr_false_31:;
        CHECK_OBJECT(tmp_class_creation_11__bases);
        tmp_truth_name_15 = CHECK_IF_TRUE(tmp_class_creation_11__bases);
        if (tmp_truth_name_15 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;

            goto try_except_handler_40;
        }
        tmp_condition_result_85 = tmp_truth_name_15 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_85 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_32;
        } else {
            goto condexpr_false_32;
        }
        condexpr_true_32:;
        CHECK_OBJECT(tmp_class_creation_11__bases);
        tmp_expression_value_71 = tmp_class_creation_11__bases;
        tmp_subscript_value_14 = mod_consts[52];
        tmp_type_arg_27 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_71, tmp_subscript_value_14, 0);
        if (tmp_type_arg_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;

            goto try_except_handler_40;
        }
        tmp_metaclass_value_14 = BUILTIN_TYPE1(tmp_type_arg_27);
        Py_DECREF(tmp_type_arg_27);
        if (tmp_metaclass_value_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;

            goto try_except_handler_40;
        }
        goto condexpr_end_32;
        condexpr_false_32:;
        tmp_metaclass_value_14 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_14);
        condexpr_end_32:;
        condexpr_end_31:;
        CHECK_OBJECT(tmp_class_creation_11__bases);
        tmp_bases_value_14 = tmp_class_creation_11__bases;
        tmp_assign_source_135 = SELECT_METACLASS(tmp_metaclass_value_14, tmp_bases_value_14);
        Py_DECREF(tmp_metaclass_value_14);
        if (tmp_assign_source_135 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;

            goto try_except_handler_40;
        }
        assert(tmp_class_creation_11__metaclass == NULL);
        tmp_class_creation_11__metaclass = tmp_assign_source_135;
    }
    {
        bool tmp_condition_result_86;
        PyObject *tmp_key_value_42;
        PyObject *tmp_dict_arg_value_42;
        tmp_key_value_42 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
        tmp_dict_arg_value_42 = tmp_class_creation_11__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_42, tmp_key_value_42);
        assert(!(tmp_res == -1));
        tmp_condition_result_86 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_86 != false) {
            goto branch_yes_54;
        } else {
            goto branch_no_54;
        }
    }
    branch_yes_54:;
    CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_11__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 524;

        goto try_except_handler_40;
    }
    branch_no_54:;
    {
        nuitka_bool tmp_condition_result_87;
        PyObject *tmp_expression_value_72;
        CHECK_OBJECT(tmp_class_creation_11__metaclass);
        tmp_expression_value_72 = tmp_class_creation_11__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_72, mod_consts[411]);
        tmp_condition_result_87 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_87 == NUITKA_BOOL_TRUE) {
            goto branch_yes_55;
        } else {
            goto branch_no_55;
        }
    }
    branch_yes_55:;
    {
        PyObject *tmp_assign_source_136;
        PyObject *tmp_called_value_36;
        PyObject *tmp_expression_value_73;
        PyObject *tmp_args_value_27;
        PyObject *tmp_tuple_element_51;
        PyObject *tmp_kwargs_value_27;
        CHECK_OBJECT(tmp_class_creation_11__metaclass);
        tmp_expression_value_73 = tmp_class_creation_11__metaclass;
        tmp_called_value_36 = LOOKUP_ATTRIBUTE(tmp_expression_value_73, mod_consts[411]);
        if (tmp_called_value_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;

            goto try_except_handler_40;
        }
        tmp_tuple_element_51 = mod_consts[74];
        tmp_args_value_27 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_27, 0, tmp_tuple_element_51);
        CHECK_OBJECT(tmp_class_creation_11__bases);
        tmp_tuple_element_51 = tmp_class_creation_11__bases;
        PyTuple_SET_ITEM0(tmp_args_value_27, 1, tmp_tuple_element_51);
        CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
        tmp_kwargs_value_27 = tmp_class_creation_11__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 524;
        tmp_assign_source_136 = CALL_FUNCTION(tmp_called_value_36, tmp_args_value_27, tmp_kwargs_value_27);
        Py_DECREF(tmp_called_value_36);
        Py_DECREF(tmp_args_value_27);
        if (tmp_assign_source_136 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;

            goto try_except_handler_40;
        }
        assert(tmp_class_creation_11__prepared == NULL);
        tmp_class_creation_11__prepared = tmp_assign_source_136;
    }
    {
        bool tmp_condition_result_88;
        PyObject *tmp_operand_value_14;
        PyObject *tmp_expression_value_74;
        CHECK_OBJECT(tmp_class_creation_11__prepared);
        tmp_expression_value_74 = tmp_class_creation_11__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_74, mod_consts[413]);
        tmp_operand_value_14 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_14);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;

            goto try_except_handler_40;
        }
        tmp_condition_result_88 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_88 != false) {
            goto branch_yes_56;
        } else {
            goto branch_no_56;
        }
    }
    branch_yes_56:;
    {
        PyObject *tmp_raise_type_14;
        PyObject *tmp_raise_value_14;
        PyObject *tmp_left_value_14;
        PyObject *tmp_right_value_14;
        PyObject *tmp_tuple_element_52;
        PyObject *tmp_getattr_target_14;
        PyObject *tmp_getattr_attr_14;
        PyObject *tmp_getattr_default_14;
        tmp_raise_type_14 = PyExc_TypeError;
        tmp_left_value_14 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_11__metaclass);
        tmp_getattr_target_14 = tmp_class_creation_11__metaclass;
        tmp_getattr_attr_14 = mod_consts[190];
        tmp_getattr_default_14 = mod_consts[415];
        tmp_tuple_element_52 = BUILTIN_GETATTR(tmp_getattr_target_14, tmp_getattr_attr_14, tmp_getattr_default_14);
        if (tmp_tuple_element_52 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;

            goto try_except_handler_40;
        }
        tmp_right_value_14 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_75;
            PyObject *tmp_type_arg_28;
            PyTuple_SET_ITEM(tmp_right_value_14, 0, tmp_tuple_element_52);
            CHECK_OBJECT(tmp_class_creation_11__prepared);
            tmp_type_arg_28 = tmp_class_creation_11__prepared;
            tmp_expression_value_75 = BUILTIN_TYPE1(tmp_type_arg_28);
            assert(!(tmp_expression_value_75 == NULL));
            tmp_tuple_element_52 = LOOKUP_ATTRIBUTE(tmp_expression_value_75, mod_consts[190]);
            Py_DECREF(tmp_expression_value_75);
            if (tmp_tuple_element_52 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 524;

                goto tuple_build_exception_17;
            }
            PyTuple_SET_ITEM(tmp_right_value_14, 1, tmp_tuple_element_52);
        }
        goto tuple_build_noexception_17;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_17:;
        Py_DECREF(tmp_right_value_14);
        goto try_except_handler_40;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_17:;
        tmp_raise_value_14 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_14, tmp_right_value_14);
        Py_DECREF(tmp_right_value_14);
        if (tmp_raise_value_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;

            goto try_except_handler_40;
        }
        exception_type = tmp_raise_type_14;
        Py_INCREF(tmp_raise_type_14);
        exception_value = tmp_raise_value_14;
        exception_lineno = 524;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_40;
    }
    branch_no_56:;
    goto branch_end_55;
    branch_no_55:;
    {
        PyObject *tmp_assign_source_137;
        tmp_assign_source_137 = PyDict_New();
        assert(tmp_class_creation_11__prepared == NULL);
        tmp_class_creation_11__prepared = tmp_assign_source_137;
    }
    branch_end_55:;
    {
        PyObject *tmp_assign_source_138;
        {
            PyObject *tmp_set_locals_14;
            CHECK_OBJECT(tmp_class_creation_11__prepared);
            tmp_set_locals_14 = tmp_class_creation_11__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_524 = tmp_set_locals_14;
            Py_INCREF(tmp_set_locals_14);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_524, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;

            goto try_except_handler_42;
        }
        tmp_dictset_value = mod_consts[475];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_524, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;

            goto try_except_handler_42;
        }
        tmp_dictset_value = mod_consts[74];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_524, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;

            goto try_except_handler_42;
        }
        if (isFrameUnusable(cache_frame_21273c79242de84175540b11c03729d1_15)) {
            Py_XDECREF(cache_frame_21273c79242de84175540b11c03729d1_15);

#if _DEBUG_REFCOUNTS
            if (cache_frame_21273c79242de84175540b11c03729d1_15 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_21273c79242de84175540b11c03729d1_15 = MAKE_FUNCTION_FRAME(codeobj_21273c79242de84175540b11c03729d1, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_21273c79242de84175540b11c03729d1_15->m_type_description == NULL);
        frame_21273c79242de84175540b11c03729d1_15 = cache_frame_21273c79242de84175540b11c03729d1_15;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_21273c79242de84175540b11c03729d1_15);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_21273c79242de84175540b11c03729d1_15) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[476];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_524, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 564;
            type_description_2 = "o";
            goto frame_exception_exit_15;
        }
        tmp_dictset_value = mod_consts[477];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_524, mod_consts[85], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 566;
            type_description_2 = "o";
            goto frame_exception_exit_15;
        }
        {
            PyObject *tmp_defaults_4;
            tmp_defaults_4 = mod_consts[478];
            Py_INCREF(tmp_defaults_4);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__20___init__(tmp_defaults_4);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_524, mod_consts[66], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 568;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }
        }
        {
            nuitka_bool tmp_condition_result_89;
            PyObject *tmp_called_value_37;
            PyObject *tmp_args_element_value_10;
            PyObject *tmp_called_value_38;
            PyObject *tmp_args_element_value_11;
            tmp_res = MAPPING_HAS_ITEM(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_524, mod_consts[420]);

            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 624;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }
            tmp_condition_result_89 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_89 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_33;
            } else {
                goto condexpr_false_33;
            }
            condexpr_true_33:;
            tmp_called_value_37 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_524, mod_consts[420]);

            if (unlikely(tmp_called_value_37 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[420]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 624;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }

            if (tmp_called_value_37 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 624;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }


            tmp_args_element_value_10 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__21__effective_decimal_return_scale();

            frame_21273c79242de84175540b11c03729d1_15->m_frame.f_lineno = 624;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_37, tmp_args_element_value_10);
            Py_DECREF(tmp_called_value_37);
            Py_DECREF(tmp_args_element_value_10);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 624;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }
            goto condexpr_end_33;
            condexpr_false_33:;
            tmp_called_value_38 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_11 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__21__effective_decimal_return_scale();

            frame_21273c79242de84175540b11c03729d1_15->m_frame.f_lineno = 624;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_38, tmp_args_element_value_11);
            Py_DECREF(tmp_args_element_value_11);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 624;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }
            condexpr_end_33:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_524, mod_consts[97], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 625;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__22_get_dbapi_type();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_524, mod_consts[447], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 633;
            type_description_2 = "o";
            goto frame_exception_exit_15;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__23_literal_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_524, mod_consts[228], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 636;
            type_description_2 = "o";
            goto frame_exception_exit_15;
        }
        {
            nuitka_bool tmp_condition_result_90;
            PyObject *tmp_called_value_39;
            PyObject *tmp_args_element_value_12;
            PyObject *tmp_called_value_40;
            PyObject *tmp_args_element_value_13;
            tmp_res = MAPPING_HAS_ITEM(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_524, mod_consts[420]);

            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 642;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }
            tmp_condition_result_90 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_90 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_34;
            } else {
                goto condexpr_false_34;
            }
            condexpr_true_34:;
            tmp_called_value_39 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_524, mod_consts[420]);

            if (unlikely(tmp_called_value_39 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[420]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 642;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }

            if (tmp_called_value_39 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 642;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }


            tmp_args_element_value_12 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__24_python_type();

            frame_21273c79242de84175540b11c03729d1_15->m_frame.f_lineno = 642;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_39, tmp_args_element_value_12);
            Py_DECREF(tmp_called_value_39);
            Py_DECREF(tmp_args_element_value_12);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 642;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }
            goto condexpr_end_34;
            condexpr_false_34:;
            tmp_called_value_40 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_13 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__24_python_type();

            frame_21273c79242de84175540b11c03729d1_15->m_frame.f_lineno = 642;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_40, tmp_args_element_value_13);
            Py_DECREF(tmp_args_element_value_13);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 642;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }
            condexpr_end_34:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_524, mod_consts[236], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 643;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__25_bind_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_524, mod_consts[232], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 649;
            type_description_2 = "o";
            goto frame_exception_exit_15;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__26_result_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_524, mod_consts[233], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 655;
            type_description_2 = "o";
            goto frame_exception_exit_15;
        }
        {
            PyObject *tmp_called_instance_3;
            PyObject *tmp_args_element_value_14;
            tmp_called_instance_3 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_524, mod_consts[43]);

            if (tmp_called_instance_3 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_called_instance_3 == NULL)) {
                        tmp_called_instance_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
                    }

                    if (tmp_called_instance_3 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 684;
                        type_description_2 = "o";
                        goto frame_exception_exit_15;
                    }
                    Py_INCREF(tmp_called_instance_3);
                } else {
                    goto frame_exception_exit_15;
                }
            }



            tmp_args_element_value_14 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__27__expression_adaptations();

            frame_21273c79242de84175540b11c03729d1_15->m_frame.f_lineno = 684;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_3, mod_consts[467], tmp_args_element_value_14);
            Py_DECREF(tmp_called_instance_3);
            Py_DECREF(tmp_args_element_value_14);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 684;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_524, mod_consts[2], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 685;
                type_description_2 = "o";
                goto frame_exception_exit_15;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_21273c79242de84175540b11c03729d1_15);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_14;

        frame_exception_exit_15:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_21273c79242de84175540b11c03729d1_15);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_21273c79242de84175540b11c03729d1_15, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_21273c79242de84175540b11c03729d1_15->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_21273c79242de84175540b11c03729d1_15, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_21273c79242de84175540b11c03729d1_15,
            type_description_2,
            outline_13_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_21273c79242de84175540b11c03729d1_15 == cache_frame_21273c79242de84175540b11c03729d1_15) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_21273c79242de84175540b11c03729d1_15);
            cache_frame_21273c79242de84175540b11c03729d1_15 = NULL;
        }

        assertFrameObject(frame_21273c79242de84175540b11c03729d1_15);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_14;

        frame_no_exception_14:;
        goto skip_nested_handling_14;
        nested_frame_exit_14:;

        goto try_except_handler_42;
        skip_nested_handling_14:;
        {
            nuitka_bool tmp_condition_result_91;
            PyObject *tmp_cmp_expr_left_14;
            PyObject *tmp_cmp_expr_right_14;
            CHECK_OBJECT(tmp_class_creation_11__bases);
            tmp_cmp_expr_left_14 = tmp_class_creation_11__bases;
            CHECK_OBJECT(tmp_class_creation_11__bases_orig);
            tmp_cmp_expr_right_14 = tmp_class_creation_11__bases_orig;
            tmp_condition_result_91 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_14, tmp_cmp_expr_right_14);
            if (tmp_condition_result_91 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 524;

                goto try_except_handler_42;
            }
            if (tmp_condition_result_91 == NUITKA_BOOL_TRUE) {
                goto branch_yes_57;
            } else {
                goto branch_no_57;
            }
            assert(tmp_condition_result_91 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_57:;
        CHECK_OBJECT(tmp_class_creation_11__bases_orig);
        tmp_dictset_value = tmp_class_creation_11__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_524, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 524;

            goto try_except_handler_42;
        }
        branch_no_57:;
        {
            PyObject *tmp_assign_source_139;
            PyObject *tmp_called_value_41;
            PyObject *tmp_args_value_28;
            PyObject *tmp_tuple_element_53;
            PyObject *tmp_kwargs_value_28;
            CHECK_OBJECT(tmp_class_creation_11__metaclass);
            tmp_called_value_41 = tmp_class_creation_11__metaclass;
            tmp_tuple_element_53 = mod_consts[74];
            tmp_args_value_28 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_28, 0, tmp_tuple_element_53);
            CHECK_OBJECT(tmp_class_creation_11__bases);
            tmp_tuple_element_53 = tmp_class_creation_11__bases;
            PyTuple_SET_ITEM0(tmp_args_value_28, 1, tmp_tuple_element_53);
            tmp_tuple_element_53 = locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_524;
            PyTuple_SET_ITEM0(tmp_args_value_28, 2, tmp_tuple_element_53);
            CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
            tmp_kwargs_value_28 = tmp_class_creation_11__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 524;
            tmp_assign_source_139 = CALL_FUNCTION(tmp_called_value_41, tmp_args_value_28, tmp_kwargs_value_28);
            Py_DECREF(tmp_args_value_28);
            if (tmp_assign_source_139 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 524;

                goto try_except_handler_42;
            }
            assert(outline_13_var___class__ == NULL);
            outline_13_var___class__ = tmp_assign_source_139;
        }
        CHECK_OBJECT(outline_13_var___class__);
        tmp_assign_source_138 = outline_13_var___class__;
        Py_INCREF(tmp_assign_source_138);
        goto try_return_handler_42;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_42:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_524);
        locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_524 = NULL;
        goto try_return_handler_41;
        // Exception handler code:
        try_except_handler_42:;
        exception_keeper_type_40 = exception_type;
        exception_keeper_value_40 = exception_value;
        exception_keeper_tb_40 = exception_tb;
        exception_keeper_lineno_40 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_524);
        locals_sqlalchemy$sql$sqltypes$$$class__14_Numeric_524 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_40;
        exception_value = exception_keeper_value_40;
        exception_tb = exception_keeper_tb_40;
        exception_lineno = exception_keeper_lineno_40;

        goto try_except_handler_41;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_41:;
        CHECK_OBJECT(outline_13_var___class__);
        Py_DECREF(outline_13_var___class__);
        outline_13_var___class__ = NULL;
        goto outline_result_14;
        // Exception handler code:
        try_except_handler_41:;
        exception_keeper_type_41 = exception_type;
        exception_keeper_value_41 = exception_value;
        exception_keeper_tb_41 = exception_tb;
        exception_keeper_lineno_41 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_41;
        exception_value = exception_keeper_value_41;
        exception_tb = exception_keeper_tb_41;
        exception_lineno = exception_keeper_lineno_41;

        goto outline_exception_14;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_14:;
        exception_lineno = 524;
        goto try_except_handler_40;
        outline_result_14:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[74], tmp_assign_source_138);
    }
    goto try_end_14;
    // Exception handler code:
    try_except_handler_40:;
    exception_keeper_type_42 = exception_type;
    exception_keeper_value_42 = exception_value;
    exception_keeper_tb_42 = exception_tb;
    exception_keeper_lineno_42 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_11__bases_orig);
    tmp_class_creation_11__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_11__bases);
    tmp_class_creation_11__bases = NULL;
    Py_XDECREF(tmp_class_creation_11__class_decl_dict);
    tmp_class_creation_11__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_11__metaclass);
    tmp_class_creation_11__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_11__prepared);
    tmp_class_creation_11__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_42;
    exception_value = exception_keeper_value_42;
    exception_tb = exception_keeper_tb_42;
    exception_lineno = exception_keeper_lineno_42;

    goto frame_exception_exit_1;
    // End of try:
    try_end_14:;
    CHECK_OBJECT(tmp_class_creation_11__bases_orig);
    Py_DECREF(tmp_class_creation_11__bases_orig);
    tmp_class_creation_11__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_11__bases);
    Py_DECREF(tmp_class_creation_11__bases);
    tmp_class_creation_11__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
    Py_DECREF(tmp_class_creation_11__class_decl_dict);
    tmp_class_creation_11__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_11__metaclass);
    Py_DECREF(tmp_class_creation_11__metaclass);
    tmp_class_creation_11__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_11__prepared);
    Py_DECREF(tmp_class_creation_11__prepared);
    tmp_class_creation_11__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_140;
        PyObject *tmp_tuple_element_54;
        tmp_tuple_element_54 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[74]);

        if (unlikely(tmp_tuple_element_54 == NULL)) {
            tmp_tuple_element_54 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[74]);
        }

        if (tmp_tuple_element_54 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 702;

            goto try_except_handler_43;
        }
        tmp_assign_source_140 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_140, 0, tmp_tuple_element_54);
        assert(tmp_class_creation_12__bases_orig == NULL);
        tmp_class_creation_12__bases_orig = tmp_assign_source_140;
    }
    {
        PyObject *tmp_assign_source_141;
        PyObject *tmp_dircall_arg1_15;
        CHECK_OBJECT(tmp_class_creation_12__bases_orig);
        tmp_dircall_arg1_15 = tmp_class_creation_12__bases_orig;
        Py_INCREF(tmp_dircall_arg1_15);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_15};
            tmp_assign_source_141 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_141 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 702;

            goto try_except_handler_43;
        }
        assert(tmp_class_creation_12__bases == NULL);
        tmp_class_creation_12__bases = tmp_assign_source_141;
    }
    {
        PyObject *tmp_assign_source_142;
        tmp_assign_source_142 = PyDict_New();
        assert(tmp_class_creation_12__class_decl_dict == NULL);
        tmp_class_creation_12__class_decl_dict = tmp_assign_source_142;
    }
    {
        PyObject *tmp_assign_source_143;
        PyObject *tmp_metaclass_value_15;
        bool tmp_condition_result_92;
        PyObject *tmp_key_value_43;
        PyObject *tmp_dict_arg_value_43;
        PyObject *tmp_dict_arg_value_44;
        PyObject *tmp_key_value_44;
        nuitka_bool tmp_condition_result_93;
        int tmp_truth_name_16;
        PyObject *tmp_type_arg_29;
        PyObject *tmp_expression_value_76;
        PyObject *tmp_subscript_value_15;
        PyObject *tmp_bases_value_15;
        tmp_key_value_43 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
        tmp_dict_arg_value_43 = tmp_class_creation_12__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_43, tmp_key_value_43);
        assert(!(tmp_res == -1));
        tmp_condition_result_92 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_92 != false) {
            goto condexpr_true_35;
        } else {
            goto condexpr_false_35;
        }
        condexpr_true_35:;
        CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
        tmp_dict_arg_value_44 = tmp_class_creation_12__class_decl_dict;
        tmp_key_value_44 = mod_consts[410];
        tmp_metaclass_value_15 = DICT_GET_ITEM0(tmp_dict_arg_value_44, tmp_key_value_44);
        if (tmp_metaclass_value_15 == NULL) {
            tmp_metaclass_value_15 = Py_None;
        }
        assert(!(tmp_metaclass_value_15 == NULL));
        Py_INCREF(tmp_metaclass_value_15);
        goto condexpr_end_35;
        condexpr_false_35:;
        CHECK_OBJECT(tmp_class_creation_12__bases);
        tmp_truth_name_16 = CHECK_IF_TRUE(tmp_class_creation_12__bases);
        if (tmp_truth_name_16 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 702;

            goto try_except_handler_43;
        }
        tmp_condition_result_93 = tmp_truth_name_16 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_93 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_36;
        } else {
            goto condexpr_false_36;
        }
        condexpr_true_36:;
        CHECK_OBJECT(tmp_class_creation_12__bases);
        tmp_expression_value_76 = tmp_class_creation_12__bases;
        tmp_subscript_value_15 = mod_consts[52];
        tmp_type_arg_29 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_76, tmp_subscript_value_15, 0);
        if (tmp_type_arg_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 702;

            goto try_except_handler_43;
        }
        tmp_metaclass_value_15 = BUILTIN_TYPE1(tmp_type_arg_29);
        Py_DECREF(tmp_type_arg_29);
        if (tmp_metaclass_value_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 702;

            goto try_except_handler_43;
        }
        goto condexpr_end_36;
        condexpr_false_36:;
        tmp_metaclass_value_15 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_15);
        condexpr_end_36:;
        condexpr_end_35:;
        CHECK_OBJECT(tmp_class_creation_12__bases);
        tmp_bases_value_15 = tmp_class_creation_12__bases;
        tmp_assign_source_143 = SELECT_METACLASS(tmp_metaclass_value_15, tmp_bases_value_15);
        Py_DECREF(tmp_metaclass_value_15);
        if (tmp_assign_source_143 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 702;

            goto try_except_handler_43;
        }
        assert(tmp_class_creation_12__metaclass == NULL);
        tmp_class_creation_12__metaclass = tmp_assign_source_143;
    }
    {
        bool tmp_condition_result_94;
        PyObject *tmp_key_value_45;
        PyObject *tmp_dict_arg_value_45;
        tmp_key_value_45 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
        tmp_dict_arg_value_45 = tmp_class_creation_12__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_45, tmp_key_value_45);
        assert(!(tmp_res == -1));
        tmp_condition_result_94 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_94 != false) {
            goto branch_yes_58;
        } else {
            goto branch_no_58;
        }
    }
    branch_yes_58:;
    CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_12__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 702;

        goto try_except_handler_43;
    }
    branch_no_58:;
    {
        nuitka_bool tmp_condition_result_95;
        PyObject *tmp_expression_value_77;
        CHECK_OBJECT(tmp_class_creation_12__metaclass);
        tmp_expression_value_77 = tmp_class_creation_12__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_77, mod_consts[411]);
        tmp_condition_result_95 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_95 == NUITKA_BOOL_TRUE) {
            goto branch_yes_59;
        } else {
            goto branch_no_59;
        }
    }
    branch_yes_59:;
    {
        PyObject *tmp_assign_source_144;
        PyObject *tmp_called_value_42;
        PyObject *tmp_expression_value_78;
        PyObject *tmp_args_value_29;
        PyObject *tmp_tuple_element_55;
        PyObject *tmp_kwargs_value_29;
        CHECK_OBJECT(tmp_class_creation_12__metaclass);
        tmp_expression_value_78 = tmp_class_creation_12__metaclass;
        tmp_called_value_42 = LOOKUP_ATTRIBUTE(tmp_expression_value_78, mod_consts[411]);
        if (tmp_called_value_42 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 702;

            goto try_except_handler_43;
        }
        tmp_tuple_element_55 = mod_consts[304];
        tmp_args_value_29 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_29, 0, tmp_tuple_element_55);
        CHECK_OBJECT(tmp_class_creation_12__bases);
        tmp_tuple_element_55 = tmp_class_creation_12__bases;
        PyTuple_SET_ITEM0(tmp_args_value_29, 1, tmp_tuple_element_55);
        CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
        tmp_kwargs_value_29 = tmp_class_creation_12__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 702;
        tmp_assign_source_144 = CALL_FUNCTION(tmp_called_value_42, tmp_args_value_29, tmp_kwargs_value_29);
        Py_DECREF(tmp_called_value_42);
        Py_DECREF(tmp_args_value_29);
        if (tmp_assign_source_144 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 702;

            goto try_except_handler_43;
        }
        assert(tmp_class_creation_12__prepared == NULL);
        tmp_class_creation_12__prepared = tmp_assign_source_144;
    }
    {
        bool tmp_condition_result_96;
        PyObject *tmp_operand_value_15;
        PyObject *tmp_expression_value_79;
        CHECK_OBJECT(tmp_class_creation_12__prepared);
        tmp_expression_value_79 = tmp_class_creation_12__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_79, mod_consts[413]);
        tmp_operand_value_15 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_15);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 702;

            goto try_except_handler_43;
        }
        tmp_condition_result_96 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_96 != false) {
            goto branch_yes_60;
        } else {
            goto branch_no_60;
        }
    }
    branch_yes_60:;
    {
        PyObject *tmp_raise_type_15;
        PyObject *tmp_raise_value_15;
        PyObject *tmp_left_value_15;
        PyObject *tmp_right_value_15;
        PyObject *tmp_tuple_element_56;
        PyObject *tmp_getattr_target_15;
        PyObject *tmp_getattr_attr_15;
        PyObject *tmp_getattr_default_15;
        tmp_raise_type_15 = PyExc_TypeError;
        tmp_left_value_15 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_12__metaclass);
        tmp_getattr_target_15 = tmp_class_creation_12__metaclass;
        tmp_getattr_attr_15 = mod_consts[190];
        tmp_getattr_default_15 = mod_consts[415];
        tmp_tuple_element_56 = BUILTIN_GETATTR(tmp_getattr_target_15, tmp_getattr_attr_15, tmp_getattr_default_15);
        if (tmp_tuple_element_56 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 702;

            goto try_except_handler_43;
        }
        tmp_right_value_15 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_80;
            PyObject *tmp_type_arg_30;
            PyTuple_SET_ITEM(tmp_right_value_15, 0, tmp_tuple_element_56);
            CHECK_OBJECT(tmp_class_creation_12__prepared);
            tmp_type_arg_30 = tmp_class_creation_12__prepared;
            tmp_expression_value_80 = BUILTIN_TYPE1(tmp_type_arg_30);
            assert(!(tmp_expression_value_80 == NULL));
            tmp_tuple_element_56 = LOOKUP_ATTRIBUTE(tmp_expression_value_80, mod_consts[190]);
            Py_DECREF(tmp_expression_value_80);
            if (tmp_tuple_element_56 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 702;

                goto tuple_build_exception_18;
            }
            PyTuple_SET_ITEM(tmp_right_value_15, 1, tmp_tuple_element_56);
        }
        goto tuple_build_noexception_18;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_18:;
        Py_DECREF(tmp_right_value_15);
        goto try_except_handler_43;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_18:;
        tmp_raise_value_15 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_15, tmp_right_value_15);
        Py_DECREF(tmp_right_value_15);
        if (tmp_raise_value_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 702;

            goto try_except_handler_43;
        }
        exception_type = tmp_raise_type_15;
        Py_INCREF(tmp_raise_type_15);
        exception_value = tmp_raise_value_15;
        exception_lineno = 702;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_43;
    }
    branch_no_60:;
    goto branch_end_59;
    branch_no_59:;
    {
        PyObject *tmp_assign_source_145;
        tmp_assign_source_145 = PyDict_New();
        assert(tmp_class_creation_12__prepared == NULL);
        tmp_class_creation_12__prepared = tmp_assign_source_145;
    }
    branch_end_59:;
    {
        PyObject *tmp_assign_source_146;
        {
            PyObject *tmp_set_locals_15;
            CHECK_OBJECT(tmp_class_creation_12__prepared);
            tmp_set_locals_15 = tmp_class_creation_12__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__15_Float_702 = tmp_set_locals_15;
            Py_INCREF(tmp_set_locals_15);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__15_Float_702, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 702;

            goto try_except_handler_45;
        }
        tmp_dictset_value = mod_consts[487];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__15_Float_702, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 702;

            goto try_except_handler_45;
        }
        tmp_dictset_value = mod_consts[304];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__15_Float_702, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 702;

            goto try_except_handler_45;
        }
        if (isFrameUnusable(cache_frame_d3594aa6be3e4a70feb8b430ec85c886_16)) {
            Py_XDECREF(cache_frame_d3594aa6be3e4a70feb8b430ec85c886_16);

#if _DEBUG_REFCOUNTS
            if (cache_frame_d3594aa6be3e4a70feb8b430ec85c886_16 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_d3594aa6be3e4a70feb8b430ec85c886_16 = MAKE_FUNCTION_FRAME(codeobj_d3594aa6be3e4a70feb8b430ec85c886, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_d3594aa6be3e4a70feb8b430ec85c886_16->m_type_description == NULL);
        frame_d3594aa6be3e4a70feb8b430ec85c886_16 = cache_frame_d3594aa6be3e4a70feb8b430ec85c886_16;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_d3594aa6be3e4a70feb8b430ec85c886_16);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_d3594aa6be3e4a70feb8b430ec85c886_16) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[488];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__15_Float_702, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 723;
            type_description_2 = "o";
            goto frame_exception_exit_16;
        }
        tmp_dictset_value = Py_None;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__15_Float_702, mod_consts[81], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 725;
            type_description_2 = "o";
            goto frame_exception_exit_16;
        }
        {
            PyObject *tmp_defaults_5;
            tmp_defaults_5 = mod_consts[489];
            Py_INCREF(tmp_defaults_5);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__28___init__(tmp_defaults_5);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__15_Float_702, mod_consts[66], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 727;
                type_description_2 = "o";
                goto frame_exception_exit_16;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__29_result_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__15_Float_702, mod_consts[233], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 756;
            type_description_2 = "o";
            goto frame_exception_exit_16;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_d3594aa6be3e4a70feb8b430ec85c886_16);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_15;

        frame_exception_exit_16:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_d3594aa6be3e4a70feb8b430ec85c886_16);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_d3594aa6be3e4a70feb8b430ec85c886_16, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_d3594aa6be3e4a70feb8b430ec85c886_16->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_d3594aa6be3e4a70feb8b430ec85c886_16, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_d3594aa6be3e4a70feb8b430ec85c886_16,
            type_description_2,
            outline_14_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_d3594aa6be3e4a70feb8b430ec85c886_16 == cache_frame_d3594aa6be3e4a70feb8b430ec85c886_16) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_d3594aa6be3e4a70feb8b430ec85c886_16);
            cache_frame_d3594aa6be3e4a70feb8b430ec85c886_16 = NULL;
        }

        assertFrameObject(frame_d3594aa6be3e4a70feb8b430ec85c886_16);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_15;

        frame_no_exception_15:;
        goto skip_nested_handling_15;
        nested_frame_exit_15:;

        goto try_except_handler_45;
        skip_nested_handling_15:;
        {
            nuitka_bool tmp_condition_result_97;
            PyObject *tmp_cmp_expr_left_15;
            PyObject *tmp_cmp_expr_right_15;
            CHECK_OBJECT(tmp_class_creation_12__bases);
            tmp_cmp_expr_left_15 = tmp_class_creation_12__bases;
            CHECK_OBJECT(tmp_class_creation_12__bases_orig);
            tmp_cmp_expr_right_15 = tmp_class_creation_12__bases_orig;
            tmp_condition_result_97 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_15, tmp_cmp_expr_right_15);
            if (tmp_condition_result_97 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 702;

                goto try_except_handler_45;
            }
            if (tmp_condition_result_97 == NUITKA_BOOL_TRUE) {
                goto branch_yes_61;
            } else {
                goto branch_no_61;
            }
            assert(tmp_condition_result_97 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_61:;
        CHECK_OBJECT(tmp_class_creation_12__bases_orig);
        tmp_dictset_value = tmp_class_creation_12__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__15_Float_702, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 702;

            goto try_except_handler_45;
        }
        branch_no_61:;
        {
            PyObject *tmp_assign_source_147;
            PyObject *tmp_called_value_43;
            PyObject *tmp_args_value_30;
            PyObject *tmp_tuple_element_57;
            PyObject *tmp_kwargs_value_30;
            CHECK_OBJECT(tmp_class_creation_12__metaclass);
            tmp_called_value_43 = tmp_class_creation_12__metaclass;
            tmp_tuple_element_57 = mod_consts[304];
            tmp_args_value_30 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_30, 0, tmp_tuple_element_57);
            CHECK_OBJECT(tmp_class_creation_12__bases);
            tmp_tuple_element_57 = tmp_class_creation_12__bases;
            PyTuple_SET_ITEM0(tmp_args_value_30, 1, tmp_tuple_element_57);
            tmp_tuple_element_57 = locals_sqlalchemy$sql$sqltypes$$$class__15_Float_702;
            PyTuple_SET_ITEM0(tmp_args_value_30, 2, tmp_tuple_element_57);
            CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
            tmp_kwargs_value_30 = tmp_class_creation_12__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 702;
            tmp_assign_source_147 = CALL_FUNCTION(tmp_called_value_43, tmp_args_value_30, tmp_kwargs_value_30);
            Py_DECREF(tmp_args_value_30);
            if (tmp_assign_source_147 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 702;

                goto try_except_handler_45;
            }
            assert(outline_14_var___class__ == NULL);
            outline_14_var___class__ = tmp_assign_source_147;
        }
        CHECK_OBJECT(outline_14_var___class__);
        tmp_assign_source_146 = outline_14_var___class__;
        Py_INCREF(tmp_assign_source_146);
        goto try_return_handler_45;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_45:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__15_Float_702);
        locals_sqlalchemy$sql$sqltypes$$$class__15_Float_702 = NULL;
        goto try_return_handler_44;
        // Exception handler code:
        try_except_handler_45:;
        exception_keeper_type_43 = exception_type;
        exception_keeper_value_43 = exception_value;
        exception_keeper_tb_43 = exception_tb;
        exception_keeper_lineno_43 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__15_Float_702);
        locals_sqlalchemy$sql$sqltypes$$$class__15_Float_702 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_43;
        exception_value = exception_keeper_value_43;
        exception_tb = exception_keeper_tb_43;
        exception_lineno = exception_keeper_lineno_43;

        goto try_except_handler_44;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_44:;
        CHECK_OBJECT(outline_14_var___class__);
        Py_DECREF(outline_14_var___class__);
        outline_14_var___class__ = NULL;
        goto outline_result_15;
        // Exception handler code:
        try_except_handler_44:;
        exception_keeper_type_44 = exception_type;
        exception_keeper_value_44 = exception_value;
        exception_keeper_tb_44 = exception_tb;
        exception_keeper_lineno_44 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_44;
        exception_value = exception_keeper_value_44;
        exception_tb = exception_keeper_tb_44;
        exception_lineno = exception_keeper_lineno_44;

        goto outline_exception_15;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_15:;
        exception_lineno = 702;
        goto try_except_handler_43;
        outline_result_15:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[304], tmp_assign_source_146);
    }
    goto try_end_15;
    // Exception handler code:
    try_except_handler_43:;
    exception_keeper_type_45 = exception_type;
    exception_keeper_value_45 = exception_value;
    exception_keeper_tb_45 = exception_tb;
    exception_keeper_lineno_45 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_12__bases_orig);
    tmp_class_creation_12__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_12__bases);
    tmp_class_creation_12__bases = NULL;
    Py_XDECREF(tmp_class_creation_12__class_decl_dict);
    tmp_class_creation_12__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_12__metaclass);
    tmp_class_creation_12__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_12__prepared);
    tmp_class_creation_12__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_45;
    exception_value = exception_keeper_value_45;
    exception_tb = exception_keeper_tb_45;
    exception_lineno = exception_keeper_lineno_45;

    goto frame_exception_exit_1;
    // End of try:
    try_end_15:;
    CHECK_OBJECT(tmp_class_creation_12__bases_orig);
    Py_DECREF(tmp_class_creation_12__bases_orig);
    tmp_class_creation_12__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_12__bases);
    Py_DECREF(tmp_class_creation_12__bases);
    tmp_class_creation_12__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
    Py_DECREF(tmp_class_creation_12__class_decl_dict);
    tmp_class_creation_12__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_12__metaclass);
    Py_DECREF(tmp_class_creation_12__metaclass);
    tmp_class_creation_12__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_12__prepared);
    Py_DECREF(tmp_class_creation_12__prepared);
    tmp_class_creation_12__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_148;
        PyObject *tmp_tuple_element_58;
        tmp_tuple_element_58 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[412]);

        if (unlikely(tmp_tuple_element_58 == NULL)) {
            tmp_tuple_element_58 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[412]);
        }

        if (tmp_tuple_element_58 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 767;

            goto try_except_handler_46;
        }
        tmp_assign_source_148 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_assign_source_148, 0, tmp_tuple_element_58);
        tmp_tuple_element_58 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[398]);

        if (unlikely(tmp_tuple_element_58 == NULL)) {
            tmp_tuple_element_58 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[398]);
        }

        if (tmp_tuple_element_58 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 767;

            goto tuple_build_exception_19;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_148, 1, tmp_tuple_element_58);
        goto tuple_build_noexception_19;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_19:;
        Py_DECREF(tmp_assign_source_148);
        goto try_except_handler_46;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_19:;
        assert(tmp_class_creation_13__bases_orig == NULL);
        tmp_class_creation_13__bases_orig = tmp_assign_source_148;
    }
    {
        PyObject *tmp_assign_source_149;
        PyObject *tmp_dircall_arg1_16;
        CHECK_OBJECT(tmp_class_creation_13__bases_orig);
        tmp_dircall_arg1_16 = tmp_class_creation_13__bases_orig;
        Py_INCREF(tmp_dircall_arg1_16);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_16};
            tmp_assign_source_149 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_149 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 767;

            goto try_except_handler_46;
        }
        assert(tmp_class_creation_13__bases == NULL);
        tmp_class_creation_13__bases = tmp_assign_source_149;
    }
    {
        PyObject *tmp_assign_source_150;
        tmp_assign_source_150 = PyDict_New();
        assert(tmp_class_creation_13__class_decl_dict == NULL);
        tmp_class_creation_13__class_decl_dict = tmp_assign_source_150;
    }
    {
        PyObject *tmp_assign_source_151;
        PyObject *tmp_metaclass_value_16;
        bool tmp_condition_result_98;
        PyObject *tmp_key_value_46;
        PyObject *tmp_dict_arg_value_46;
        PyObject *tmp_dict_arg_value_47;
        PyObject *tmp_key_value_47;
        nuitka_bool tmp_condition_result_99;
        int tmp_truth_name_17;
        PyObject *tmp_type_arg_31;
        PyObject *tmp_expression_value_81;
        PyObject *tmp_subscript_value_16;
        PyObject *tmp_bases_value_16;
        tmp_key_value_46 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
        tmp_dict_arg_value_46 = tmp_class_creation_13__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_46, tmp_key_value_46);
        assert(!(tmp_res == -1));
        tmp_condition_result_98 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_98 != false) {
            goto condexpr_true_37;
        } else {
            goto condexpr_false_37;
        }
        condexpr_true_37:;
        CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
        tmp_dict_arg_value_47 = tmp_class_creation_13__class_decl_dict;
        tmp_key_value_47 = mod_consts[410];
        tmp_metaclass_value_16 = DICT_GET_ITEM0(tmp_dict_arg_value_47, tmp_key_value_47);
        if (tmp_metaclass_value_16 == NULL) {
            tmp_metaclass_value_16 = Py_None;
        }
        assert(!(tmp_metaclass_value_16 == NULL));
        Py_INCREF(tmp_metaclass_value_16);
        goto condexpr_end_37;
        condexpr_false_37:;
        CHECK_OBJECT(tmp_class_creation_13__bases);
        tmp_truth_name_17 = CHECK_IF_TRUE(tmp_class_creation_13__bases);
        if (tmp_truth_name_17 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 767;

            goto try_except_handler_46;
        }
        tmp_condition_result_99 = tmp_truth_name_17 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_99 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_38;
        } else {
            goto condexpr_false_38;
        }
        condexpr_true_38:;
        CHECK_OBJECT(tmp_class_creation_13__bases);
        tmp_expression_value_81 = tmp_class_creation_13__bases;
        tmp_subscript_value_16 = mod_consts[52];
        tmp_type_arg_31 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_81, tmp_subscript_value_16, 0);
        if (tmp_type_arg_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 767;

            goto try_except_handler_46;
        }
        tmp_metaclass_value_16 = BUILTIN_TYPE1(tmp_type_arg_31);
        Py_DECREF(tmp_type_arg_31);
        if (tmp_metaclass_value_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 767;

            goto try_except_handler_46;
        }
        goto condexpr_end_38;
        condexpr_false_38:;
        tmp_metaclass_value_16 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_16);
        condexpr_end_38:;
        condexpr_end_37:;
        CHECK_OBJECT(tmp_class_creation_13__bases);
        tmp_bases_value_16 = tmp_class_creation_13__bases;
        tmp_assign_source_151 = SELECT_METACLASS(tmp_metaclass_value_16, tmp_bases_value_16);
        Py_DECREF(tmp_metaclass_value_16);
        if (tmp_assign_source_151 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 767;

            goto try_except_handler_46;
        }
        assert(tmp_class_creation_13__metaclass == NULL);
        tmp_class_creation_13__metaclass = tmp_assign_source_151;
    }
    {
        bool tmp_condition_result_100;
        PyObject *tmp_key_value_48;
        PyObject *tmp_dict_arg_value_48;
        tmp_key_value_48 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
        tmp_dict_arg_value_48 = tmp_class_creation_13__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_48, tmp_key_value_48);
        assert(!(tmp_res == -1));
        tmp_condition_result_100 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_100 != false) {
            goto branch_yes_62;
        } else {
            goto branch_no_62;
        }
    }
    branch_yes_62:;
    CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_13__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 767;

        goto try_except_handler_46;
    }
    branch_no_62:;
    {
        nuitka_bool tmp_condition_result_101;
        PyObject *tmp_expression_value_82;
        CHECK_OBJECT(tmp_class_creation_13__metaclass);
        tmp_expression_value_82 = tmp_class_creation_13__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_82, mod_consts[411]);
        tmp_condition_result_101 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_101 == NUITKA_BOOL_TRUE) {
            goto branch_yes_63;
        } else {
            goto branch_no_63;
        }
    }
    branch_yes_63:;
    {
        PyObject *tmp_assign_source_152;
        PyObject *tmp_called_value_44;
        PyObject *tmp_expression_value_83;
        PyObject *tmp_args_value_31;
        PyObject *tmp_tuple_element_59;
        PyObject *tmp_kwargs_value_31;
        CHECK_OBJECT(tmp_class_creation_13__metaclass);
        tmp_expression_value_83 = tmp_class_creation_13__metaclass;
        tmp_called_value_44 = LOOKUP_ATTRIBUTE(tmp_expression_value_83, mod_consts[411]);
        if (tmp_called_value_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 767;

            goto try_except_handler_46;
        }
        tmp_tuple_element_59 = mod_consts[103];
        tmp_args_value_31 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_31, 0, tmp_tuple_element_59);
        CHECK_OBJECT(tmp_class_creation_13__bases);
        tmp_tuple_element_59 = tmp_class_creation_13__bases;
        PyTuple_SET_ITEM0(tmp_args_value_31, 1, tmp_tuple_element_59);
        CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
        tmp_kwargs_value_31 = tmp_class_creation_13__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 767;
        tmp_assign_source_152 = CALL_FUNCTION(tmp_called_value_44, tmp_args_value_31, tmp_kwargs_value_31);
        Py_DECREF(tmp_called_value_44);
        Py_DECREF(tmp_args_value_31);
        if (tmp_assign_source_152 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 767;

            goto try_except_handler_46;
        }
        assert(tmp_class_creation_13__prepared == NULL);
        tmp_class_creation_13__prepared = tmp_assign_source_152;
    }
    {
        bool tmp_condition_result_102;
        PyObject *tmp_operand_value_16;
        PyObject *tmp_expression_value_84;
        CHECK_OBJECT(tmp_class_creation_13__prepared);
        tmp_expression_value_84 = tmp_class_creation_13__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_84, mod_consts[413]);
        tmp_operand_value_16 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_16);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 767;

            goto try_except_handler_46;
        }
        tmp_condition_result_102 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_102 != false) {
            goto branch_yes_64;
        } else {
            goto branch_no_64;
        }
    }
    branch_yes_64:;
    {
        PyObject *tmp_raise_type_16;
        PyObject *tmp_raise_value_16;
        PyObject *tmp_left_value_16;
        PyObject *tmp_right_value_16;
        PyObject *tmp_tuple_element_60;
        PyObject *tmp_getattr_target_16;
        PyObject *tmp_getattr_attr_16;
        PyObject *tmp_getattr_default_16;
        tmp_raise_type_16 = PyExc_TypeError;
        tmp_left_value_16 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_13__metaclass);
        tmp_getattr_target_16 = tmp_class_creation_13__metaclass;
        tmp_getattr_attr_16 = mod_consts[190];
        tmp_getattr_default_16 = mod_consts[415];
        tmp_tuple_element_60 = BUILTIN_GETATTR(tmp_getattr_target_16, tmp_getattr_attr_16, tmp_getattr_default_16);
        if (tmp_tuple_element_60 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 767;

            goto try_except_handler_46;
        }
        tmp_right_value_16 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_85;
            PyObject *tmp_type_arg_32;
            PyTuple_SET_ITEM(tmp_right_value_16, 0, tmp_tuple_element_60);
            CHECK_OBJECT(tmp_class_creation_13__prepared);
            tmp_type_arg_32 = tmp_class_creation_13__prepared;
            tmp_expression_value_85 = BUILTIN_TYPE1(tmp_type_arg_32);
            assert(!(tmp_expression_value_85 == NULL));
            tmp_tuple_element_60 = LOOKUP_ATTRIBUTE(tmp_expression_value_85, mod_consts[190]);
            Py_DECREF(tmp_expression_value_85);
            if (tmp_tuple_element_60 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 767;

                goto tuple_build_exception_20;
            }
            PyTuple_SET_ITEM(tmp_right_value_16, 1, tmp_tuple_element_60);
        }
        goto tuple_build_noexception_20;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_20:;
        Py_DECREF(tmp_right_value_16);
        goto try_except_handler_46;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_20:;
        tmp_raise_value_16 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_16, tmp_right_value_16);
        Py_DECREF(tmp_right_value_16);
        if (tmp_raise_value_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 767;

            goto try_except_handler_46;
        }
        exception_type = tmp_raise_type_16;
        Py_INCREF(tmp_raise_type_16);
        exception_value = tmp_raise_value_16;
        exception_lineno = 767;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_46;
    }
    branch_no_64:;
    goto branch_end_63;
    branch_no_63:;
    {
        PyObject *tmp_assign_source_153;
        tmp_assign_source_153 = PyDict_New();
        assert(tmp_class_creation_13__prepared == NULL);
        tmp_class_creation_13__prepared = tmp_assign_source_153;
    }
    branch_end_63:;
    {
        PyObject *tmp_assign_source_154;
        {
            PyObject *tmp_set_locals_16;
            CHECK_OBJECT(tmp_class_creation_13__prepared);
            tmp_set_locals_16 = tmp_class_creation_13__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_767 = tmp_set_locals_16;
            Py_INCREF(tmp_set_locals_16);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_767, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 767;

            goto try_except_handler_48;
        }
        tmp_dictset_value = mod_consts[492];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_767, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 767;

            goto try_except_handler_48;
        }
        tmp_dictset_value = mod_consts[103];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_767, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 767;

            goto try_except_handler_48;
        }
        if (isFrameUnusable(cache_frame_67e104d0232080aa9715957b74205b33_17)) {
            Py_XDECREF(cache_frame_67e104d0232080aa9715957b74205b33_17);

#if _DEBUG_REFCOUNTS
            if (cache_frame_67e104d0232080aa9715957b74205b33_17 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_67e104d0232080aa9715957b74205b33_17 = MAKE_FUNCTION_FRAME(codeobj_67e104d0232080aa9715957b74205b33, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_67e104d0232080aa9715957b74205b33_17->m_type_description == NULL);
        frame_67e104d0232080aa9715957b74205b33_17 = cache_frame_67e104d0232080aa9715957b74205b33_17;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_67e104d0232080aa9715957b74205b33_17);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_67e104d0232080aa9715957b74205b33_17) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[102];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_767, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 786;
            type_description_2 = "o";
            goto frame_exception_exit_17;
        }
        {
            PyObject *tmp_defaults_6;
            tmp_defaults_6 = mod_consts[493];
            Py_INCREF(tmp_defaults_6);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__30___init__(tmp_defaults_6);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_767, mod_consts[66], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 788;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__31_get_dbapi_type();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_767, mod_consts[447], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 803;
            type_description_2 = "o";
            goto frame_exception_exit_17;
        }
        {
            nuitka_bool tmp_condition_result_103;
            PyObject *tmp_called_value_45;
            PyObject *tmp_args_element_value_15;
            PyObject *tmp_called_value_46;
            PyObject *tmp_args_element_value_16;
            tmp_res = MAPPING_HAS_ITEM(locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_767, mod_consts[420]);

            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 806;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }
            tmp_condition_result_103 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_103 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_39;
            } else {
                goto condexpr_false_39;
            }
            condexpr_true_39:;
            tmp_called_value_45 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_767, mod_consts[420]);

            if (unlikely(tmp_called_value_45 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[420]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 806;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }

            if (tmp_called_value_45 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 806;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }


            tmp_args_element_value_15 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__32_python_type();

            frame_67e104d0232080aa9715957b74205b33_17->m_frame.f_lineno = 806;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_45, tmp_args_element_value_15);
            Py_DECREF(tmp_called_value_45);
            Py_DECREF(tmp_args_element_value_15);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 806;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }
            goto condexpr_end_39;
            condexpr_false_39:;
            tmp_called_value_46 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_16 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__32_python_type();

            frame_67e104d0232080aa9715957b74205b33_17->m_frame.f_lineno = 806;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_46, tmp_args_element_value_16);
            Py_DECREF(tmp_args_element_value_16);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 806;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }
            condexpr_end_39:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_767, mod_consts[236], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 807;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }
        }
        {
            PyObject *tmp_called_instance_4;
            PyObject *tmp_args_element_value_17;
            tmp_called_instance_4 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_767, mod_consts[43]);

            if (tmp_called_instance_4 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_called_instance_4 == NULL)) {
                        tmp_called_instance_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
                    }

                    if (tmp_called_instance_4 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 810;
                        type_description_2 = "o";
                        goto frame_exception_exit_17;
                    }
                    Py_INCREF(tmp_called_instance_4);
                } else {
                    goto frame_exception_exit_17;
                }
            }



            tmp_args_element_value_17 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__33__expression_adaptations();

            frame_67e104d0232080aa9715957b74205b33_17->m_frame.f_lineno = 810;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_4, mod_consts[467], tmp_args_element_value_17);
            Py_DECREF(tmp_called_instance_4);
            Py_DECREF(tmp_args_element_value_17);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 810;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_767, mod_consts[2], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 811;
                type_description_2 = "o";
                goto frame_exception_exit_17;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_67e104d0232080aa9715957b74205b33_17);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_16;

        frame_exception_exit_17:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_67e104d0232080aa9715957b74205b33_17);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_67e104d0232080aa9715957b74205b33_17, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_67e104d0232080aa9715957b74205b33_17->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_67e104d0232080aa9715957b74205b33_17, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_67e104d0232080aa9715957b74205b33_17,
            type_description_2,
            outline_15_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_67e104d0232080aa9715957b74205b33_17 == cache_frame_67e104d0232080aa9715957b74205b33_17) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_67e104d0232080aa9715957b74205b33_17);
            cache_frame_67e104d0232080aa9715957b74205b33_17 = NULL;
        }

        assertFrameObject(frame_67e104d0232080aa9715957b74205b33_17);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_16;

        frame_no_exception_16:;
        goto skip_nested_handling_16;
        nested_frame_exit_16:;

        goto try_except_handler_48;
        skip_nested_handling_16:;
        {
            nuitka_bool tmp_condition_result_104;
            PyObject *tmp_cmp_expr_left_16;
            PyObject *tmp_cmp_expr_right_16;
            CHECK_OBJECT(tmp_class_creation_13__bases);
            tmp_cmp_expr_left_16 = tmp_class_creation_13__bases;
            CHECK_OBJECT(tmp_class_creation_13__bases_orig);
            tmp_cmp_expr_right_16 = tmp_class_creation_13__bases_orig;
            tmp_condition_result_104 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_16, tmp_cmp_expr_right_16);
            if (tmp_condition_result_104 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 767;

                goto try_except_handler_48;
            }
            if (tmp_condition_result_104 == NUITKA_BOOL_TRUE) {
                goto branch_yes_65;
            } else {
                goto branch_no_65;
            }
            assert(tmp_condition_result_104 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_65:;
        CHECK_OBJECT(tmp_class_creation_13__bases_orig);
        tmp_dictset_value = tmp_class_creation_13__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_767, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 767;

            goto try_except_handler_48;
        }
        branch_no_65:;
        {
            PyObject *tmp_assign_source_155;
            PyObject *tmp_called_value_47;
            PyObject *tmp_args_value_32;
            PyObject *tmp_tuple_element_61;
            PyObject *tmp_kwargs_value_32;
            CHECK_OBJECT(tmp_class_creation_13__metaclass);
            tmp_called_value_47 = tmp_class_creation_13__metaclass;
            tmp_tuple_element_61 = mod_consts[103];
            tmp_args_value_32 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_32, 0, tmp_tuple_element_61);
            CHECK_OBJECT(tmp_class_creation_13__bases);
            tmp_tuple_element_61 = tmp_class_creation_13__bases;
            PyTuple_SET_ITEM0(tmp_args_value_32, 1, tmp_tuple_element_61);
            tmp_tuple_element_61 = locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_767;
            PyTuple_SET_ITEM0(tmp_args_value_32, 2, tmp_tuple_element_61);
            CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
            tmp_kwargs_value_32 = tmp_class_creation_13__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 767;
            tmp_assign_source_155 = CALL_FUNCTION(tmp_called_value_47, tmp_args_value_32, tmp_kwargs_value_32);
            Py_DECREF(tmp_args_value_32);
            if (tmp_assign_source_155 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 767;

                goto try_except_handler_48;
            }
            assert(outline_15_var___class__ == NULL);
            outline_15_var___class__ = tmp_assign_source_155;
        }
        CHECK_OBJECT(outline_15_var___class__);
        tmp_assign_source_154 = outline_15_var___class__;
        Py_INCREF(tmp_assign_source_154);
        goto try_return_handler_48;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_48:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_767);
        locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_767 = NULL;
        goto try_return_handler_47;
        // Exception handler code:
        try_except_handler_48:;
        exception_keeper_type_46 = exception_type;
        exception_keeper_value_46 = exception_value;
        exception_keeper_tb_46 = exception_tb;
        exception_keeper_lineno_46 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_767);
        locals_sqlalchemy$sql$sqltypes$$$class__16_DateTime_767 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_46;
        exception_value = exception_keeper_value_46;
        exception_tb = exception_keeper_tb_46;
        exception_lineno = exception_keeper_lineno_46;

        goto try_except_handler_47;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_47:;
        CHECK_OBJECT(outline_15_var___class__);
        Py_DECREF(outline_15_var___class__);
        outline_15_var___class__ = NULL;
        goto outline_result_16;
        // Exception handler code:
        try_except_handler_47:;
        exception_keeper_type_47 = exception_type;
        exception_keeper_value_47 = exception_value;
        exception_keeper_tb_47 = exception_tb;
        exception_keeper_lineno_47 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_47;
        exception_value = exception_keeper_value_47;
        exception_tb = exception_keeper_tb_47;
        exception_lineno = exception_keeper_lineno_47;

        goto outline_exception_16;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_16:;
        exception_lineno = 767;
        goto try_except_handler_46;
        outline_result_16:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[103], tmp_assign_source_154);
    }
    goto try_end_16;
    // Exception handler code:
    try_except_handler_46:;
    exception_keeper_type_48 = exception_type;
    exception_keeper_value_48 = exception_value;
    exception_keeper_tb_48 = exception_tb;
    exception_keeper_lineno_48 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_13__bases_orig);
    tmp_class_creation_13__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_13__bases);
    tmp_class_creation_13__bases = NULL;
    Py_XDECREF(tmp_class_creation_13__class_decl_dict);
    tmp_class_creation_13__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_13__metaclass);
    tmp_class_creation_13__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_13__prepared);
    tmp_class_creation_13__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_48;
    exception_value = exception_keeper_value_48;
    exception_tb = exception_keeper_tb_48;
    exception_lineno = exception_keeper_lineno_48;

    goto frame_exception_exit_1;
    // End of try:
    try_end_16:;
    CHECK_OBJECT(tmp_class_creation_13__bases_orig);
    Py_DECREF(tmp_class_creation_13__bases_orig);
    tmp_class_creation_13__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_13__bases);
    Py_DECREF(tmp_class_creation_13__bases);
    tmp_class_creation_13__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
    Py_DECREF(tmp_class_creation_13__class_decl_dict);
    tmp_class_creation_13__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_13__metaclass);
    Py_DECREF(tmp_class_creation_13__metaclass);
    tmp_class_creation_13__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_13__prepared);
    Py_DECREF(tmp_class_creation_13__prepared);
    tmp_class_creation_13__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_156;
        PyObject *tmp_tuple_element_62;
        tmp_tuple_element_62 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[412]);

        if (unlikely(tmp_tuple_element_62 == NULL)) {
            tmp_tuple_element_62 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[412]);
        }

        if (tmp_tuple_element_62 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 822;

            goto try_except_handler_49;
        }
        tmp_assign_source_156 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_assign_source_156, 0, tmp_tuple_element_62);
        tmp_tuple_element_62 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[398]);

        if (unlikely(tmp_tuple_element_62 == NULL)) {
            tmp_tuple_element_62 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[398]);
        }

        if (tmp_tuple_element_62 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 822;

            goto tuple_build_exception_21;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_156, 1, tmp_tuple_element_62);
        goto tuple_build_noexception_21;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_21:;
        Py_DECREF(tmp_assign_source_156);
        goto try_except_handler_49;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_21:;
        assert(tmp_class_creation_14__bases_orig == NULL);
        tmp_class_creation_14__bases_orig = tmp_assign_source_156;
    }
    {
        PyObject *tmp_assign_source_157;
        PyObject *tmp_dircall_arg1_17;
        CHECK_OBJECT(tmp_class_creation_14__bases_orig);
        tmp_dircall_arg1_17 = tmp_class_creation_14__bases_orig;
        Py_INCREF(tmp_dircall_arg1_17);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_17};
            tmp_assign_source_157 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_157 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 822;

            goto try_except_handler_49;
        }
        assert(tmp_class_creation_14__bases == NULL);
        tmp_class_creation_14__bases = tmp_assign_source_157;
    }
    {
        PyObject *tmp_assign_source_158;
        tmp_assign_source_158 = PyDict_New();
        assert(tmp_class_creation_14__class_decl_dict == NULL);
        tmp_class_creation_14__class_decl_dict = tmp_assign_source_158;
    }
    {
        PyObject *tmp_assign_source_159;
        PyObject *tmp_metaclass_value_17;
        bool tmp_condition_result_105;
        PyObject *tmp_key_value_49;
        PyObject *tmp_dict_arg_value_49;
        PyObject *tmp_dict_arg_value_50;
        PyObject *tmp_key_value_50;
        nuitka_bool tmp_condition_result_106;
        int tmp_truth_name_18;
        PyObject *tmp_type_arg_33;
        PyObject *tmp_expression_value_86;
        PyObject *tmp_subscript_value_17;
        PyObject *tmp_bases_value_17;
        tmp_key_value_49 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
        tmp_dict_arg_value_49 = tmp_class_creation_14__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_49, tmp_key_value_49);
        assert(!(tmp_res == -1));
        tmp_condition_result_105 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_105 != false) {
            goto condexpr_true_40;
        } else {
            goto condexpr_false_40;
        }
        condexpr_true_40:;
        CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
        tmp_dict_arg_value_50 = tmp_class_creation_14__class_decl_dict;
        tmp_key_value_50 = mod_consts[410];
        tmp_metaclass_value_17 = DICT_GET_ITEM0(tmp_dict_arg_value_50, tmp_key_value_50);
        if (tmp_metaclass_value_17 == NULL) {
            tmp_metaclass_value_17 = Py_None;
        }
        assert(!(tmp_metaclass_value_17 == NULL));
        Py_INCREF(tmp_metaclass_value_17);
        goto condexpr_end_40;
        condexpr_false_40:;
        CHECK_OBJECT(tmp_class_creation_14__bases);
        tmp_truth_name_18 = CHECK_IF_TRUE(tmp_class_creation_14__bases);
        if (tmp_truth_name_18 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 822;

            goto try_except_handler_49;
        }
        tmp_condition_result_106 = tmp_truth_name_18 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_106 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_41;
        } else {
            goto condexpr_false_41;
        }
        condexpr_true_41:;
        CHECK_OBJECT(tmp_class_creation_14__bases);
        tmp_expression_value_86 = tmp_class_creation_14__bases;
        tmp_subscript_value_17 = mod_consts[52];
        tmp_type_arg_33 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_86, tmp_subscript_value_17, 0);
        if (tmp_type_arg_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 822;

            goto try_except_handler_49;
        }
        tmp_metaclass_value_17 = BUILTIN_TYPE1(tmp_type_arg_33);
        Py_DECREF(tmp_type_arg_33);
        if (tmp_metaclass_value_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 822;

            goto try_except_handler_49;
        }
        goto condexpr_end_41;
        condexpr_false_41:;
        tmp_metaclass_value_17 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_17);
        condexpr_end_41:;
        condexpr_end_40:;
        CHECK_OBJECT(tmp_class_creation_14__bases);
        tmp_bases_value_17 = tmp_class_creation_14__bases;
        tmp_assign_source_159 = SELECT_METACLASS(tmp_metaclass_value_17, tmp_bases_value_17);
        Py_DECREF(tmp_metaclass_value_17);
        if (tmp_assign_source_159 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 822;

            goto try_except_handler_49;
        }
        assert(tmp_class_creation_14__metaclass == NULL);
        tmp_class_creation_14__metaclass = tmp_assign_source_159;
    }
    {
        bool tmp_condition_result_107;
        PyObject *tmp_key_value_51;
        PyObject *tmp_dict_arg_value_51;
        tmp_key_value_51 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
        tmp_dict_arg_value_51 = tmp_class_creation_14__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_51, tmp_key_value_51);
        assert(!(tmp_res == -1));
        tmp_condition_result_107 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_107 != false) {
            goto branch_yes_66;
        } else {
            goto branch_no_66;
        }
    }
    branch_yes_66:;
    CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_14__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 822;

        goto try_except_handler_49;
    }
    branch_no_66:;
    {
        nuitka_bool tmp_condition_result_108;
        PyObject *tmp_expression_value_87;
        CHECK_OBJECT(tmp_class_creation_14__metaclass);
        tmp_expression_value_87 = tmp_class_creation_14__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_87, mod_consts[411]);
        tmp_condition_result_108 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_108 == NUITKA_BOOL_TRUE) {
            goto branch_yes_67;
        } else {
            goto branch_no_67;
        }
    }
    branch_yes_67:;
    {
        PyObject *tmp_assign_source_160;
        PyObject *tmp_called_value_48;
        PyObject *tmp_expression_value_88;
        PyObject *tmp_args_value_33;
        PyObject *tmp_tuple_element_63;
        PyObject *tmp_kwargs_value_33;
        CHECK_OBJECT(tmp_class_creation_14__metaclass);
        tmp_expression_value_88 = tmp_class_creation_14__metaclass;
        tmp_called_value_48 = LOOKUP_ATTRIBUTE(tmp_expression_value_88, mod_consts[411]);
        if (tmp_called_value_48 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 822;

            goto try_except_handler_49;
        }
        tmp_tuple_element_63 = mod_consts[72];
        tmp_args_value_33 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_33, 0, tmp_tuple_element_63);
        CHECK_OBJECT(tmp_class_creation_14__bases);
        tmp_tuple_element_63 = tmp_class_creation_14__bases;
        PyTuple_SET_ITEM0(tmp_args_value_33, 1, tmp_tuple_element_63);
        CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
        tmp_kwargs_value_33 = tmp_class_creation_14__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 822;
        tmp_assign_source_160 = CALL_FUNCTION(tmp_called_value_48, tmp_args_value_33, tmp_kwargs_value_33);
        Py_DECREF(tmp_called_value_48);
        Py_DECREF(tmp_args_value_33);
        if (tmp_assign_source_160 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 822;

            goto try_except_handler_49;
        }
        assert(tmp_class_creation_14__prepared == NULL);
        tmp_class_creation_14__prepared = tmp_assign_source_160;
    }
    {
        bool tmp_condition_result_109;
        PyObject *tmp_operand_value_17;
        PyObject *tmp_expression_value_89;
        CHECK_OBJECT(tmp_class_creation_14__prepared);
        tmp_expression_value_89 = tmp_class_creation_14__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_89, mod_consts[413]);
        tmp_operand_value_17 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_17);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 822;

            goto try_except_handler_49;
        }
        tmp_condition_result_109 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_109 != false) {
            goto branch_yes_68;
        } else {
            goto branch_no_68;
        }
    }
    branch_yes_68:;
    {
        PyObject *tmp_raise_type_17;
        PyObject *tmp_raise_value_17;
        PyObject *tmp_left_value_17;
        PyObject *tmp_right_value_17;
        PyObject *tmp_tuple_element_64;
        PyObject *tmp_getattr_target_17;
        PyObject *tmp_getattr_attr_17;
        PyObject *tmp_getattr_default_17;
        tmp_raise_type_17 = PyExc_TypeError;
        tmp_left_value_17 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_14__metaclass);
        tmp_getattr_target_17 = tmp_class_creation_14__metaclass;
        tmp_getattr_attr_17 = mod_consts[190];
        tmp_getattr_default_17 = mod_consts[415];
        tmp_tuple_element_64 = BUILTIN_GETATTR(tmp_getattr_target_17, tmp_getattr_attr_17, tmp_getattr_default_17);
        if (tmp_tuple_element_64 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 822;

            goto try_except_handler_49;
        }
        tmp_right_value_17 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_90;
            PyObject *tmp_type_arg_34;
            PyTuple_SET_ITEM(tmp_right_value_17, 0, tmp_tuple_element_64);
            CHECK_OBJECT(tmp_class_creation_14__prepared);
            tmp_type_arg_34 = tmp_class_creation_14__prepared;
            tmp_expression_value_90 = BUILTIN_TYPE1(tmp_type_arg_34);
            assert(!(tmp_expression_value_90 == NULL));
            tmp_tuple_element_64 = LOOKUP_ATTRIBUTE(tmp_expression_value_90, mod_consts[190]);
            Py_DECREF(tmp_expression_value_90);
            if (tmp_tuple_element_64 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 822;

                goto tuple_build_exception_22;
            }
            PyTuple_SET_ITEM(tmp_right_value_17, 1, tmp_tuple_element_64);
        }
        goto tuple_build_noexception_22;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_22:;
        Py_DECREF(tmp_right_value_17);
        goto try_except_handler_49;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_22:;
        tmp_raise_value_17 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_17, tmp_right_value_17);
        Py_DECREF(tmp_right_value_17);
        if (tmp_raise_value_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 822;

            goto try_except_handler_49;
        }
        exception_type = tmp_raise_type_17;
        Py_INCREF(tmp_raise_type_17);
        exception_value = tmp_raise_value_17;
        exception_lineno = 822;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_49;
    }
    branch_no_68:;
    goto branch_end_67;
    branch_no_67:;
    {
        PyObject *tmp_assign_source_161;
        tmp_assign_source_161 = PyDict_New();
        assert(tmp_class_creation_14__prepared == NULL);
        tmp_class_creation_14__prepared = tmp_assign_source_161;
    }
    branch_end_67:;
    {
        PyObject *tmp_assign_source_162;
        {
            PyObject *tmp_set_locals_17;
            CHECK_OBJECT(tmp_class_creation_14__prepared);
            tmp_set_locals_17 = tmp_class_creation_14__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__17_Date_822 = tmp_set_locals_17;
            Py_INCREF(tmp_set_locals_17);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__17_Date_822, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 822;

            goto try_except_handler_51;
        }
        tmp_dictset_value = mod_consts[498];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__17_Date_822, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 822;

            goto try_except_handler_51;
        }
        tmp_dictset_value = mod_consts[72];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__17_Date_822, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 822;

            goto try_except_handler_51;
        }
        if (isFrameUnusable(cache_frame_dd47fc159209508319eddb5261464e6a_18)) {
            Py_XDECREF(cache_frame_dd47fc159209508319eddb5261464e6a_18);

#if _DEBUG_REFCOUNTS
            if (cache_frame_dd47fc159209508319eddb5261464e6a_18 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_dd47fc159209508319eddb5261464e6a_18 = MAKE_FUNCTION_FRAME(codeobj_dd47fc159209508319eddb5261464e6a, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_dd47fc159209508319eddb5261464e6a_18->m_type_description == NULL);
        frame_dd47fc159209508319eddb5261464e6a_18 = cache_frame_dd47fc159209508319eddb5261464e6a_18;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_dd47fc159209508319eddb5261464e6a_18);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_dd47fc159209508319eddb5261464e6a_18) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[104];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__17_Date_822, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 826;
            type_description_2 = "o";
            goto frame_exception_exit_18;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__34_get_dbapi_type();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__17_Date_822, mod_consts[447], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 828;
            type_description_2 = "o";
            goto frame_exception_exit_18;
        }
        {
            nuitka_bool tmp_condition_result_110;
            PyObject *tmp_called_value_49;
            PyObject *tmp_args_element_value_18;
            PyObject *tmp_called_value_50;
            PyObject *tmp_args_element_value_19;
            tmp_res = MAPPING_HAS_ITEM(locals_sqlalchemy$sql$sqltypes$$$class__17_Date_822, mod_consts[420]);

            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 831;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
            tmp_condition_result_110 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_110 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_42;
            } else {
                goto condexpr_false_42;
            }
            condexpr_true_42:;
            tmp_called_value_49 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__17_Date_822, mod_consts[420]);

            if (unlikely(tmp_called_value_49 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[420]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 831;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }

            if (tmp_called_value_49 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 831;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }


            tmp_args_element_value_18 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__35_python_type();

            frame_dd47fc159209508319eddb5261464e6a_18->m_frame.f_lineno = 831;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_49, tmp_args_element_value_18);
            Py_DECREF(tmp_called_value_49);
            Py_DECREF(tmp_args_element_value_18);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 831;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
            goto condexpr_end_42;
            condexpr_false_42:;
            tmp_called_value_50 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_19 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__35_python_type();

            frame_dd47fc159209508319eddb5261464e6a_18->m_frame.f_lineno = 831;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_50, tmp_args_element_value_19);
            Py_DECREF(tmp_args_element_value_19);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 831;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
            condexpr_end_42:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__17_Date_822, mod_consts[236], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 832;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
        }
        {
            PyObject *tmp_called_instance_5;
            PyObject *tmp_args_element_value_20;
            tmp_called_instance_5 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__17_Date_822, mod_consts[43]);

            if (tmp_called_instance_5 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_5 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_called_instance_5 == NULL)) {
                        tmp_called_instance_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
                    }

                    if (tmp_called_instance_5 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 835;
                        type_description_2 = "o";
                        goto frame_exception_exit_18;
                    }
                    Py_INCREF(tmp_called_instance_5);
                } else {
                    goto frame_exception_exit_18;
                }
            }



            tmp_args_element_value_20 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__36__expression_adaptations();

            frame_dd47fc159209508319eddb5261464e6a_18->m_frame.f_lineno = 835;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_5, mod_consts[467], tmp_args_element_value_20);
            Py_DECREF(tmp_called_instance_5);
            Py_DECREF(tmp_args_element_value_20);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 835;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__17_Date_822, mod_consts[2], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 836;
                type_description_2 = "o";
                goto frame_exception_exit_18;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_dd47fc159209508319eddb5261464e6a_18);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_17;

        frame_exception_exit_18:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_dd47fc159209508319eddb5261464e6a_18);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_dd47fc159209508319eddb5261464e6a_18, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_dd47fc159209508319eddb5261464e6a_18->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_dd47fc159209508319eddb5261464e6a_18, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_dd47fc159209508319eddb5261464e6a_18,
            type_description_2,
            outline_16_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_dd47fc159209508319eddb5261464e6a_18 == cache_frame_dd47fc159209508319eddb5261464e6a_18) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_dd47fc159209508319eddb5261464e6a_18);
            cache_frame_dd47fc159209508319eddb5261464e6a_18 = NULL;
        }

        assertFrameObject(frame_dd47fc159209508319eddb5261464e6a_18);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_17;

        frame_no_exception_17:;
        goto skip_nested_handling_17;
        nested_frame_exit_17:;

        goto try_except_handler_51;
        skip_nested_handling_17:;
        {
            nuitka_bool tmp_condition_result_111;
            PyObject *tmp_cmp_expr_left_17;
            PyObject *tmp_cmp_expr_right_17;
            CHECK_OBJECT(tmp_class_creation_14__bases);
            tmp_cmp_expr_left_17 = tmp_class_creation_14__bases;
            CHECK_OBJECT(tmp_class_creation_14__bases_orig);
            tmp_cmp_expr_right_17 = tmp_class_creation_14__bases_orig;
            tmp_condition_result_111 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_17, tmp_cmp_expr_right_17);
            if (tmp_condition_result_111 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 822;

                goto try_except_handler_51;
            }
            if (tmp_condition_result_111 == NUITKA_BOOL_TRUE) {
                goto branch_yes_69;
            } else {
                goto branch_no_69;
            }
            assert(tmp_condition_result_111 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_69:;
        CHECK_OBJECT(tmp_class_creation_14__bases_orig);
        tmp_dictset_value = tmp_class_creation_14__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__17_Date_822, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 822;

            goto try_except_handler_51;
        }
        branch_no_69:;
        {
            PyObject *tmp_assign_source_163;
            PyObject *tmp_called_value_51;
            PyObject *tmp_args_value_34;
            PyObject *tmp_tuple_element_65;
            PyObject *tmp_kwargs_value_34;
            CHECK_OBJECT(tmp_class_creation_14__metaclass);
            tmp_called_value_51 = tmp_class_creation_14__metaclass;
            tmp_tuple_element_65 = mod_consts[72];
            tmp_args_value_34 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_34, 0, tmp_tuple_element_65);
            CHECK_OBJECT(tmp_class_creation_14__bases);
            tmp_tuple_element_65 = tmp_class_creation_14__bases;
            PyTuple_SET_ITEM0(tmp_args_value_34, 1, tmp_tuple_element_65);
            tmp_tuple_element_65 = locals_sqlalchemy$sql$sqltypes$$$class__17_Date_822;
            PyTuple_SET_ITEM0(tmp_args_value_34, 2, tmp_tuple_element_65);
            CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
            tmp_kwargs_value_34 = tmp_class_creation_14__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 822;
            tmp_assign_source_163 = CALL_FUNCTION(tmp_called_value_51, tmp_args_value_34, tmp_kwargs_value_34);
            Py_DECREF(tmp_args_value_34);
            if (tmp_assign_source_163 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 822;

                goto try_except_handler_51;
            }
            assert(outline_16_var___class__ == NULL);
            outline_16_var___class__ = tmp_assign_source_163;
        }
        CHECK_OBJECT(outline_16_var___class__);
        tmp_assign_source_162 = outline_16_var___class__;
        Py_INCREF(tmp_assign_source_162);
        goto try_return_handler_51;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_51:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__17_Date_822);
        locals_sqlalchemy$sql$sqltypes$$$class__17_Date_822 = NULL;
        goto try_return_handler_50;
        // Exception handler code:
        try_except_handler_51:;
        exception_keeper_type_49 = exception_type;
        exception_keeper_value_49 = exception_value;
        exception_keeper_tb_49 = exception_tb;
        exception_keeper_lineno_49 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__17_Date_822);
        locals_sqlalchemy$sql$sqltypes$$$class__17_Date_822 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_49;
        exception_value = exception_keeper_value_49;
        exception_tb = exception_keeper_tb_49;
        exception_lineno = exception_keeper_lineno_49;

        goto try_except_handler_50;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_50:;
        CHECK_OBJECT(outline_16_var___class__);
        Py_DECREF(outline_16_var___class__);
        outline_16_var___class__ = NULL;
        goto outline_result_17;
        // Exception handler code:
        try_except_handler_50:;
        exception_keeper_type_50 = exception_type;
        exception_keeper_value_50 = exception_value;
        exception_keeper_tb_50 = exception_tb;
        exception_keeper_lineno_50 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_50;
        exception_value = exception_keeper_value_50;
        exception_tb = exception_keeper_tb_50;
        exception_lineno = exception_keeper_lineno_50;

        goto outline_exception_17;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_17:;
        exception_lineno = 822;
        goto try_except_handler_49;
        outline_result_17:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[72], tmp_assign_source_162);
    }
    goto try_end_17;
    // Exception handler code:
    try_except_handler_49:;
    exception_keeper_type_51 = exception_type;
    exception_keeper_value_51 = exception_value;
    exception_keeper_tb_51 = exception_tb;
    exception_keeper_lineno_51 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_14__bases_orig);
    tmp_class_creation_14__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_14__bases);
    tmp_class_creation_14__bases = NULL;
    Py_XDECREF(tmp_class_creation_14__class_decl_dict);
    tmp_class_creation_14__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_14__metaclass);
    tmp_class_creation_14__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_14__prepared);
    tmp_class_creation_14__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_51;
    exception_value = exception_keeper_value_51;
    exception_tb = exception_keeper_tb_51;
    exception_lineno = exception_keeper_lineno_51;

    goto frame_exception_exit_1;
    // End of try:
    try_end_17:;
    CHECK_OBJECT(tmp_class_creation_14__bases_orig);
    Py_DECREF(tmp_class_creation_14__bases_orig);
    tmp_class_creation_14__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_14__bases);
    Py_DECREF(tmp_class_creation_14__bases);
    tmp_class_creation_14__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
    Py_DECREF(tmp_class_creation_14__class_decl_dict);
    tmp_class_creation_14__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_14__metaclass);
    Py_DECREF(tmp_class_creation_14__metaclass);
    tmp_class_creation_14__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_14__prepared);
    Py_DECREF(tmp_class_creation_14__prepared);
    tmp_class_creation_14__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_164;
        PyObject *tmp_tuple_element_66;
        tmp_tuple_element_66 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[412]);

        if (unlikely(tmp_tuple_element_66 == NULL)) {
            tmp_tuple_element_66 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[412]);
        }

        if (tmp_tuple_element_66 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 860;

            goto try_except_handler_52;
        }
        tmp_assign_source_164 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_assign_source_164, 0, tmp_tuple_element_66);
        tmp_tuple_element_66 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[398]);

        if (unlikely(tmp_tuple_element_66 == NULL)) {
            tmp_tuple_element_66 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[398]);
        }

        if (tmp_tuple_element_66 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 860;

            goto tuple_build_exception_23;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_164, 1, tmp_tuple_element_66);
        goto tuple_build_noexception_23;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_23:;
        Py_DECREF(tmp_assign_source_164);
        goto try_except_handler_52;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_23:;
        assert(tmp_class_creation_15__bases_orig == NULL);
        tmp_class_creation_15__bases_orig = tmp_assign_source_164;
    }
    {
        PyObject *tmp_assign_source_165;
        PyObject *tmp_dircall_arg1_18;
        CHECK_OBJECT(tmp_class_creation_15__bases_orig);
        tmp_dircall_arg1_18 = tmp_class_creation_15__bases_orig;
        Py_INCREF(tmp_dircall_arg1_18);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_18};
            tmp_assign_source_165 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_165 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 860;

            goto try_except_handler_52;
        }
        assert(tmp_class_creation_15__bases == NULL);
        tmp_class_creation_15__bases = tmp_assign_source_165;
    }
    {
        PyObject *tmp_assign_source_166;
        tmp_assign_source_166 = PyDict_New();
        assert(tmp_class_creation_15__class_decl_dict == NULL);
        tmp_class_creation_15__class_decl_dict = tmp_assign_source_166;
    }
    {
        PyObject *tmp_assign_source_167;
        PyObject *tmp_metaclass_value_18;
        bool tmp_condition_result_112;
        PyObject *tmp_key_value_52;
        PyObject *tmp_dict_arg_value_52;
        PyObject *tmp_dict_arg_value_53;
        PyObject *tmp_key_value_53;
        nuitka_bool tmp_condition_result_113;
        int tmp_truth_name_19;
        PyObject *tmp_type_arg_35;
        PyObject *tmp_expression_value_91;
        PyObject *tmp_subscript_value_18;
        PyObject *tmp_bases_value_18;
        tmp_key_value_52 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
        tmp_dict_arg_value_52 = tmp_class_creation_15__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_52, tmp_key_value_52);
        assert(!(tmp_res == -1));
        tmp_condition_result_112 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_112 != false) {
            goto condexpr_true_43;
        } else {
            goto condexpr_false_43;
        }
        condexpr_true_43:;
        CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
        tmp_dict_arg_value_53 = tmp_class_creation_15__class_decl_dict;
        tmp_key_value_53 = mod_consts[410];
        tmp_metaclass_value_18 = DICT_GET_ITEM0(tmp_dict_arg_value_53, tmp_key_value_53);
        if (tmp_metaclass_value_18 == NULL) {
            tmp_metaclass_value_18 = Py_None;
        }
        assert(!(tmp_metaclass_value_18 == NULL));
        Py_INCREF(tmp_metaclass_value_18);
        goto condexpr_end_43;
        condexpr_false_43:;
        CHECK_OBJECT(tmp_class_creation_15__bases);
        tmp_truth_name_19 = CHECK_IF_TRUE(tmp_class_creation_15__bases);
        if (tmp_truth_name_19 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 860;

            goto try_except_handler_52;
        }
        tmp_condition_result_113 = tmp_truth_name_19 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_113 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_44;
        } else {
            goto condexpr_false_44;
        }
        condexpr_true_44:;
        CHECK_OBJECT(tmp_class_creation_15__bases);
        tmp_expression_value_91 = tmp_class_creation_15__bases;
        tmp_subscript_value_18 = mod_consts[52];
        tmp_type_arg_35 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_91, tmp_subscript_value_18, 0);
        if (tmp_type_arg_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 860;

            goto try_except_handler_52;
        }
        tmp_metaclass_value_18 = BUILTIN_TYPE1(tmp_type_arg_35);
        Py_DECREF(tmp_type_arg_35);
        if (tmp_metaclass_value_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 860;

            goto try_except_handler_52;
        }
        goto condexpr_end_44;
        condexpr_false_44:;
        tmp_metaclass_value_18 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_18);
        condexpr_end_44:;
        condexpr_end_43:;
        CHECK_OBJECT(tmp_class_creation_15__bases);
        tmp_bases_value_18 = tmp_class_creation_15__bases;
        tmp_assign_source_167 = SELECT_METACLASS(tmp_metaclass_value_18, tmp_bases_value_18);
        Py_DECREF(tmp_metaclass_value_18);
        if (tmp_assign_source_167 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 860;

            goto try_except_handler_52;
        }
        assert(tmp_class_creation_15__metaclass == NULL);
        tmp_class_creation_15__metaclass = tmp_assign_source_167;
    }
    {
        bool tmp_condition_result_114;
        PyObject *tmp_key_value_54;
        PyObject *tmp_dict_arg_value_54;
        tmp_key_value_54 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
        tmp_dict_arg_value_54 = tmp_class_creation_15__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_54, tmp_key_value_54);
        assert(!(tmp_res == -1));
        tmp_condition_result_114 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_114 != false) {
            goto branch_yes_70;
        } else {
            goto branch_no_70;
        }
    }
    branch_yes_70:;
    CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_15__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 860;

        goto try_except_handler_52;
    }
    branch_no_70:;
    {
        nuitka_bool tmp_condition_result_115;
        PyObject *tmp_expression_value_92;
        CHECK_OBJECT(tmp_class_creation_15__metaclass);
        tmp_expression_value_92 = tmp_class_creation_15__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_92, mod_consts[411]);
        tmp_condition_result_115 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_115 == NUITKA_BOOL_TRUE) {
            goto branch_yes_71;
        } else {
            goto branch_no_71;
        }
    }
    branch_yes_71:;
    {
        PyObject *tmp_assign_source_168;
        PyObject *tmp_called_value_52;
        PyObject *tmp_expression_value_93;
        PyObject *tmp_args_value_35;
        PyObject *tmp_tuple_element_67;
        PyObject *tmp_kwargs_value_35;
        CHECK_OBJECT(tmp_class_creation_15__metaclass);
        tmp_expression_value_93 = tmp_class_creation_15__metaclass;
        tmp_called_value_52 = LOOKUP_ATTRIBUTE(tmp_expression_value_93, mod_consts[411]);
        if (tmp_called_value_52 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 860;

            goto try_except_handler_52;
        }
        tmp_tuple_element_67 = mod_consts[105];
        tmp_args_value_35 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_35, 0, tmp_tuple_element_67);
        CHECK_OBJECT(tmp_class_creation_15__bases);
        tmp_tuple_element_67 = tmp_class_creation_15__bases;
        PyTuple_SET_ITEM0(tmp_args_value_35, 1, tmp_tuple_element_67);
        CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
        tmp_kwargs_value_35 = tmp_class_creation_15__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 860;
        tmp_assign_source_168 = CALL_FUNCTION(tmp_called_value_52, tmp_args_value_35, tmp_kwargs_value_35);
        Py_DECREF(tmp_called_value_52);
        Py_DECREF(tmp_args_value_35);
        if (tmp_assign_source_168 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 860;

            goto try_except_handler_52;
        }
        assert(tmp_class_creation_15__prepared == NULL);
        tmp_class_creation_15__prepared = tmp_assign_source_168;
    }
    {
        bool tmp_condition_result_116;
        PyObject *tmp_operand_value_18;
        PyObject *tmp_expression_value_94;
        CHECK_OBJECT(tmp_class_creation_15__prepared);
        tmp_expression_value_94 = tmp_class_creation_15__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_94, mod_consts[413]);
        tmp_operand_value_18 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_18);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 860;

            goto try_except_handler_52;
        }
        tmp_condition_result_116 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_116 != false) {
            goto branch_yes_72;
        } else {
            goto branch_no_72;
        }
    }
    branch_yes_72:;
    {
        PyObject *tmp_raise_type_18;
        PyObject *tmp_raise_value_18;
        PyObject *tmp_left_value_18;
        PyObject *tmp_right_value_18;
        PyObject *tmp_tuple_element_68;
        PyObject *tmp_getattr_target_18;
        PyObject *tmp_getattr_attr_18;
        PyObject *tmp_getattr_default_18;
        tmp_raise_type_18 = PyExc_TypeError;
        tmp_left_value_18 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_15__metaclass);
        tmp_getattr_target_18 = tmp_class_creation_15__metaclass;
        tmp_getattr_attr_18 = mod_consts[190];
        tmp_getattr_default_18 = mod_consts[415];
        tmp_tuple_element_68 = BUILTIN_GETATTR(tmp_getattr_target_18, tmp_getattr_attr_18, tmp_getattr_default_18);
        if (tmp_tuple_element_68 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 860;

            goto try_except_handler_52;
        }
        tmp_right_value_18 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_95;
            PyObject *tmp_type_arg_36;
            PyTuple_SET_ITEM(tmp_right_value_18, 0, tmp_tuple_element_68);
            CHECK_OBJECT(tmp_class_creation_15__prepared);
            tmp_type_arg_36 = tmp_class_creation_15__prepared;
            tmp_expression_value_95 = BUILTIN_TYPE1(tmp_type_arg_36);
            assert(!(tmp_expression_value_95 == NULL));
            tmp_tuple_element_68 = LOOKUP_ATTRIBUTE(tmp_expression_value_95, mod_consts[190]);
            Py_DECREF(tmp_expression_value_95);
            if (tmp_tuple_element_68 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 860;

                goto tuple_build_exception_24;
            }
            PyTuple_SET_ITEM(tmp_right_value_18, 1, tmp_tuple_element_68);
        }
        goto tuple_build_noexception_24;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_24:;
        Py_DECREF(tmp_right_value_18);
        goto try_except_handler_52;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_24:;
        tmp_raise_value_18 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_18, tmp_right_value_18);
        Py_DECREF(tmp_right_value_18);
        if (tmp_raise_value_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 860;

            goto try_except_handler_52;
        }
        exception_type = tmp_raise_type_18;
        Py_INCREF(tmp_raise_type_18);
        exception_value = tmp_raise_value_18;
        exception_lineno = 860;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_52;
    }
    branch_no_72:;
    goto branch_end_71;
    branch_no_71:;
    {
        PyObject *tmp_assign_source_169;
        tmp_assign_source_169 = PyDict_New();
        assert(tmp_class_creation_15__prepared == NULL);
        tmp_class_creation_15__prepared = tmp_assign_source_169;
    }
    branch_end_71:;
    {
        PyObject *tmp_assign_source_170;
        {
            PyObject *tmp_set_locals_18;
            CHECK_OBJECT(tmp_class_creation_15__prepared);
            tmp_set_locals_18 = tmp_class_creation_15__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__18_Time_860 = tmp_set_locals_18;
            Py_INCREF(tmp_set_locals_18);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__18_Time_860, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 860;

            goto try_except_handler_54;
        }
        tmp_dictset_value = mod_consts[502];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__18_Time_860, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 860;

            goto try_except_handler_54;
        }
        tmp_dictset_value = mod_consts[105];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__18_Time_860, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 860;

            goto try_except_handler_54;
        }
        if (isFrameUnusable(cache_frame_8df3a086079671e7c39d78ec3a51356a_19)) {
            Py_XDECREF(cache_frame_8df3a086079671e7c39d78ec3a51356a_19);

#if _DEBUG_REFCOUNTS
            if (cache_frame_8df3a086079671e7c39d78ec3a51356a_19 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_8df3a086079671e7c39d78ec3a51356a_19 = MAKE_FUNCTION_FRAME(codeobj_8df3a086079671e7c39d78ec3a51356a, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_8df3a086079671e7c39d78ec3a51356a_19->m_type_description == NULL);
        frame_8df3a086079671e7c39d78ec3a51356a_19 = cache_frame_8df3a086079671e7c39d78ec3a51356a_19;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_8df3a086079671e7c39d78ec3a51356a_19);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_8df3a086079671e7c39d78ec3a51356a_19) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[106];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__18_Time_860, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 864;
            type_description_2 = "o";
            goto frame_exception_exit_19;
        }
        {
            PyObject *tmp_defaults_7;
            tmp_defaults_7 = mod_consts[493];
            Py_INCREF(tmp_defaults_7);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__37___init__(tmp_defaults_7);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__18_Time_860, mod_consts[66], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 866;
                type_description_2 = "o";
                goto frame_exception_exit_19;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__38_get_dbapi_type();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__18_Time_860, mod_consts[447], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 869;
            type_description_2 = "o";
            goto frame_exception_exit_19;
        }
        {
            nuitka_bool tmp_condition_result_117;
            PyObject *tmp_called_value_53;
            PyObject *tmp_args_element_value_21;
            PyObject *tmp_called_value_54;
            PyObject *tmp_args_element_value_22;
            tmp_res = MAPPING_HAS_ITEM(locals_sqlalchemy$sql$sqltypes$$$class__18_Time_860, mod_consts[420]);

            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 872;
                type_description_2 = "o";
                goto frame_exception_exit_19;
            }
            tmp_condition_result_117 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_117 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_45;
            } else {
                goto condexpr_false_45;
            }
            condexpr_true_45:;
            tmp_called_value_53 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__18_Time_860, mod_consts[420]);

            if (unlikely(tmp_called_value_53 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[420]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 872;
                type_description_2 = "o";
                goto frame_exception_exit_19;
            }

            if (tmp_called_value_53 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 872;
                type_description_2 = "o";
                goto frame_exception_exit_19;
            }


            tmp_args_element_value_21 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__39_python_type();

            frame_8df3a086079671e7c39d78ec3a51356a_19->m_frame.f_lineno = 872;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_53, tmp_args_element_value_21);
            Py_DECREF(tmp_called_value_53);
            Py_DECREF(tmp_args_element_value_21);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 872;
                type_description_2 = "o";
                goto frame_exception_exit_19;
            }
            goto condexpr_end_45;
            condexpr_false_45:;
            tmp_called_value_54 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_22 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__39_python_type();

            frame_8df3a086079671e7c39d78ec3a51356a_19->m_frame.f_lineno = 872;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_54, tmp_args_element_value_22);
            Py_DECREF(tmp_args_element_value_22);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 872;
                type_description_2 = "o";
                goto frame_exception_exit_19;
            }
            condexpr_end_45:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__18_Time_860, mod_consts[236], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 873;
                type_description_2 = "o";
                goto frame_exception_exit_19;
            }
        }
        {
            PyObject *tmp_called_instance_6;
            PyObject *tmp_args_element_value_23;
            tmp_called_instance_6 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__18_Time_860, mod_consts[43]);

            if (tmp_called_instance_6 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_6 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_called_instance_6 == NULL)) {
                        tmp_called_instance_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
                    }

                    if (tmp_called_instance_6 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 876;
                        type_description_2 = "o";
                        goto frame_exception_exit_19;
                    }
                    Py_INCREF(tmp_called_instance_6);
                } else {
                    goto frame_exception_exit_19;
                }
            }



            tmp_args_element_value_23 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__40__expression_adaptations();

            frame_8df3a086079671e7c39d78ec3a51356a_19->m_frame.f_lineno = 876;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_6, mod_consts[467], tmp_args_element_value_23);
            Py_DECREF(tmp_called_instance_6);
            Py_DECREF(tmp_args_element_value_23);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 876;
                type_description_2 = "o";
                goto frame_exception_exit_19;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__18_Time_860, mod_consts[2], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 877;
                type_description_2 = "o";
                goto frame_exception_exit_19;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_8df3a086079671e7c39d78ec3a51356a_19);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_18;

        frame_exception_exit_19:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_8df3a086079671e7c39d78ec3a51356a_19);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_8df3a086079671e7c39d78ec3a51356a_19, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_8df3a086079671e7c39d78ec3a51356a_19->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_8df3a086079671e7c39d78ec3a51356a_19, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_8df3a086079671e7c39d78ec3a51356a_19,
            type_description_2,
            outline_17_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_8df3a086079671e7c39d78ec3a51356a_19 == cache_frame_8df3a086079671e7c39d78ec3a51356a_19) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_8df3a086079671e7c39d78ec3a51356a_19);
            cache_frame_8df3a086079671e7c39d78ec3a51356a_19 = NULL;
        }

        assertFrameObject(frame_8df3a086079671e7c39d78ec3a51356a_19);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_18;

        frame_no_exception_18:;
        goto skip_nested_handling_18;
        nested_frame_exit_18:;

        goto try_except_handler_54;
        skip_nested_handling_18:;
        {
            nuitka_bool tmp_condition_result_118;
            PyObject *tmp_cmp_expr_left_18;
            PyObject *tmp_cmp_expr_right_18;
            CHECK_OBJECT(tmp_class_creation_15__bases);
            tmp_cmp_expr_left_18 = tmp_class_creation_15__bases;
            CHECK_OBJECT(tmp_class_creation_15__bases_orig);
            tmp_cmp_expr_right_18 = tmp_class_creation_15__bases_orig;
            tmp_condition_result_118 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_18, tmp_cmp_expr_right_18);
            if (tmp_condition_result_118 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 860;

                goto try_except_handler_54;
            }
            if (tmp_condition_result_118 == NUITKA_BOOL_TRUE) {
                goto branch_yes_73;
            } else {
                goto branch_no_73;
            }
            assert(tmp_condition_result_118 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_73:;
        CHECK_OBJECT(tmp_class_creation_15__bases_orig);
        tmp_dictset_value = tmp_class_creation_15__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__18_Time_860, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 860;

            goto try_except_handler_54;
        }
        branch_no_73:;
        {
            PyObject *tmp_assign_source_171;
            PyObject *tmp_called_value_55;
            PyObject *tmp_args_value_36;
            PyObject *tmp_tuple_element_69;
            PyObject *tmp_kwargs_value_36;
            CHECK_OBJECT(tmp_class_creation_15__metaclass);
            tmp_called_value_55 = tmp_class_creation_15__metaclass;
            tmp_tuple_element_69 = mod_consts[105];
            tmp_args_value_36 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_36, 0, tmp_tuple_element_69);
            CHECK_OBJECT(tmp_class_creation_15__bases);
            tmp_tuple_element_69 = tmp_class_creation_15__bases;
            PyTuple_SET_ITEM0(tmp_args_value_36, 1, tmp_tuple_element_69);
            tmp_tuple_element_69 = locals_sqlalchemy$sql$sqltypes$$$class__18_Time_860;
            PyTuple_SET_ITEM0(tmp_args_value_36, 2, tmp_tuple_element_69);
            CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
            tmp_kwargs_value_36 = tmp_class_creation_15__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 860;
            tmp_assign_source_171 = CALL_FUNCTION(tmp_called_value_55, tmp_args_value_36, tmp_kwargs_value_36);
            Py_DECREF(tmp_args_value_36);
            if (tmp_assign_source_171 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 860;

                goto try_except_handler_54;
            }
            assert(outline_17_var___class__ == NULL);
            outline_17_var___class__ = tmp_assign_source_171;
        }
        CHECK_OBJECT(outline_17_var___class__);
        tmp_assign_source_170 = outline_17_var___class__;
        Py_INCREF(tmp_assign_source_170);
        goto try_return_handler_54;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_54:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__18_Time_860);
        locals_sqlalchemy$sql$sqltypes$$$class__18_Time_860 = NULL;
        goto try_return_handler_53;
        // Exception handler code:
        try_except_handler_54:;
        exception_keeper_type_52 = exception_type;
        exception_keeper_value_52 = exception_value;
        exception_keeper_tb_52 = exception_tb;
        exception_keeper_lineno_52 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__18_Time_860);
        locals_sqlalchemy$sql$sqltypes$$$class__18_Time_860 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_52;
        exception_value = exception_keeper_value_52;
        exception_tb = exception_keeper_tb_52;
        exception_lineno = exception_keeper_lineno_52;

        goto try_except_handler_53;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_53:;
        CHECK_OBJECT(outline_17_var___class__);
        Py_DECREF(outline_17_var___class__);
        outline_17_var___class__ = NULL;
        goto outline_result_18;
        // Exception handler code:
        try_except_handler_53:;
        exception_keeper_type_53 = exception_type;
        exception_keeper_value_53 = exception_value;
        exception_keeper_tb_53 = exception_tb;
        exception_keeper_lineno_53 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_53;
        exception_value = exception_keeper_value_53;
        exception_tb = exception_keeper_tb_53;
        exception_lineno = exception_keeper_lineno_53;

        goto outline_exception_18;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_18:;
        exception_lineno = 860;
        goto try_except_handler_52;
        outline_result_18:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[105], tmp_assign_source_170);
    }
    goto try_end_18;
    // Exception handler code:
    try_except_handler_52:;
    exception_keeper_type_54 = exception_type;
    exception_keeper_value_54 = exception_value;
    exception_keeper_tb_54 = exception_tb;
    exception_keeper_lineno_54 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_15__bases_orig);
    tmp_class_creation_15__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_15__bases);
    tmp_class_creation_15__bases = NULL;
    Py_XDECREF(tmp_class_creation_15__class_decl_dict);
    tmp_class_creation_15__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_15__metaclass);
    tmp_class_creation_15__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_15__prepared);
    tmp_class_creation_15__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_54;
    exception_value = exception_keeper_value_54;
    exception_tb = exception_keeper_tb_54;
    exception_lineno = exception_keeper_lineno_54;

    goto frame_exception_exit_1;
    // End of try:
    try_end_18:;
    CHECK_OBJECT(tmp_class_creation_15__bases_orig);
    Py_DECREF(tmp_class_creation_15__bases_orig);
    tmp_class_creation_15__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_15__bases);
    Py_DECREF(tmp_class_creation_15__bases);
    tmp_class_creation_15__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
    Py_DECREF(tmp_class_creation_15__class_decl_dict);
    tmp_class_creation_15__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_15__metaclass);
    Py_DECREF(tmp_class_creation_15__metaclass);
    tmp_class_creation_15__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_15__prepared);
    Py_DECREF(tmp_class_creation_15__prepared);
    tmp_class_creation_15__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_172;
        PyObject *tmp_tuple_element_70;
        tmp_tuple_element_70 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[398]);

        if (unlikely(tmp_tuple_element_70 == NULL)) {
            tmp_tuple_element_70 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[398]);
        }

        if (tmp_tuple_element_70 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 887;

            goto try_except_handler_55;
        }
        tmp_assign_source_172 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_172, 0, tmp_tuple_element_70);
        assert(tmp_class_creation_16__bases_orig == NULL);
        tmp_class_creation_16__bases_orig = tmp_assign_source_172;
    }
    {
        PyObject *tmp_assign_source_173;
        PyObject *tmp_dircall_arg1_19;
        CHECK_OBJECT(tmp_class_creation_16__bases_orig);
        tmp_dircall_arg1_19 = tmp_class_creation_16__bases_orig;
        Py_INCREF(tmp_dircall_arg1_19);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_19};
            tmp_assign_source_173 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_173 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 887;

            goto try_except_handler_55;
        }
        assert(tmp_class_creation_16__bases == NULL);
        tmp_class_creation_16__bases = tmp_assign_source_173;
    }
    {
        PyObject *tmp_assign_source_174;
        tmp_assign_source_174 = PyDict_New();
        assert(tmp_class_creation_16__class_decl_dict == NULL);
        tmp_class_creation_16__class_decl_dict = tmp_assign_source_174;
    }
    {
        PyObject *tmp_assign_source_175;
        PyObject *tmp_metaclass_value_19;
        bool tmp_condition_result_119;
        PyObject *tmp_key_value_55;
        PyObject *tmp_dict_arg_value_55;
        PyObject *tmp_dict_arg_value_56;
        PyObject *tmp_key_value_56;
        nuitka_bool tmp_condition_result_120;
        int tmp_truth_name_20;
        PyObject *tmp_type_arg_37;
        PyObject *tmp_expression_value_96;
        PyObject *tmp_subscript_value_19;
        PyObject *tmp_bases_value_19;
        tmp_key_value_55 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
        tmp_dict_arg_value_55 = tmp_class_creation_16__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_55, tmp_key_value_55);
        assert(!(tmp_res == -1));
        tmp_condition_result_119 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_119 != false) {
            goto condexpr_true_46;
        } else {
            goto condexpr_false_46;
        }
        condexpr_true_46:;
        CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
        tmp_dict_arg_value_56 = tmp_class_creation_16__class_decl_dict;
        tmp_key_value_56 = mod_consts[410];
        tmp_metaclass_value_19 = DICT_GET_ITEM0(tmp_dict_arg_value_56, tmp_key_value_56);
        if (tmp_metaclass_value_19 == NULL) {
            tmp_metaclass_value_19 = Py_None;
        }
        assert(!(tmp_metaclass_value_19 == NULL));
        Py_INCREF(tmp_metaclass_value_19);
        goto condexpr_end_46;
        condexpr_false_46:;
        CHECK_OBJECT(tmp_class_creation_16__bases);
        tmp_truth_name_20 = CHECK_IF_TRUE(tmp_class_creation_16__bases);
        if (tmp_truth_name_20 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 887;

            goto try_except_handler_55;
        }
        tmp_condition_result_120 = tmp_truth_name_20 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_120 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_47;
        } else {
            goto condexpr_false_47;
        }
        condexpr_true_47:;
        CHECK_OBJECT(tmp_class_creation_16__bases);
        tmp_expression_value_96 = tmp_class_creation_16__bases;
        tmp_subscript_value_19 = mod_consts[52];
        tmp_type_arg_37 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_96, tmp_subscript_value_19, 0);
        if (tmp_type_arg_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 887;

            goto try_except_handler_55;
        }
        tmp_metaclass_value_19 = BUILTIN_TYPE1(tmp_type_arg_37);
        Py_DECREF(tmp_type_arg_37);
        if (tmp_metaclass_value_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 887;

            goto try_except_handler_55;
        }
        goto condexpr_end_47;
        condexpr_false_47:;
        tmp_metaclass_value_19 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_19);
        condexpr_end_47:;
        condexpr_end_46:;
        CHECK_OBJECT(tmp_class_creation_16__bases);
        tmp_bases_value_19 = tmp_class_creation_16__bases;
        tmp_assign_source_175 = SELECT_METACLASS(tmp_metaclass_value_19, tmp_bases_value_19);
        Py_DECREF(tmp_metaclass_value_19);
        if (tmp_assign_source_175 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 887;

            goto try_except_handler_55;
        }
        assert(tmp_class_creation_16__metaclass == NULL);
        tmp_class_creation_16__metaclass = tmp_assign_source_175;
    }
    {
        bool tmp_condition_result_121;
        PyObject *tmp_key_value_57;
        PyObject *tmp_dict_arg_value_57;
        tmp_key_value_57 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
        tmp_dict_arg_value_57 = tmp_class_creation_16__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_57, tmp_key_value_57);
        assert(!(tmp_res == -1));
        tmp_condition_result_121 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_121 != false) {
            goto branch_yes_74;
        } else {
            goto branch_no_74;
        }
    }
    branch_yes_74:;
    CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_16__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 887;

        goto try_except_handler_55;
    }
    branch_no_74:;
    {
        nuitka_bool tmp_condition_result_122;
        PyObject *tmp_expression_value_97;
        CHECK_OBJECT(tmp_class_creation_16__metaclass);
        tmp_expression_value_97 = tmp_class_creation_16__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_97, mod_consts[411]);
        tmp_condition_result_122 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_122 == NUITKA_BOOL_TRUE) {
            goto branch_yes_75;
        } else {
            goto branch_no_75;
        }
    }
    branch_yes_75:;
    {
        PyObject *tmp_assign_source_176;
        PyObject *tmp_called_value_56;
        PyObject *tmp_expression_value_98;
        PyObject *tmp_args_value_37;
        PyObject *tmp_tuple_element_71;
        PyObject *tmp_kwargs_value_37;
        CHECK_OBJECT(tmp_class_creation_16__metaclass);
        tmp_expression_value_98 = tmp_class_creation_16__metaclass;
        tmp_called_value_56 = LOOKUP_ATTRIBUTE(tmp_expression_value_98, mod_consts[411]);
        if (tmp_called_value_56 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 887;

            goto try_except_handler_55;
        }
        tmp_tuple_element_71 = mod_consts[119];
        tmp_args_value_37 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_37, 0, tmp_tuple_element_71);
        CHECK_OBJECT(tmp_class_creation_16__bases);
        tmp_tuple_element_71 = tmp_class_creation_16__bases;
        PyTuple_SET_ITEM0(tmp_args_value_37, 1, tmp_tuple_element_71);
        CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
        tmp_kwargs_value_37 = tmp_class_creation_16__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 887;
        tmp_assign_source_176 = CALL_FUNCTION(tmp_called_value_56, tmp_args_value_37, tmp_kwargs_value_37);
        Py_DECREF(tmp_called_value_56);
        Py_DECREF(tmp_args_value_37);
        if (tmp_assign_source_176 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 887;

            goto try_except_handler_55;
        }
        assert(tmp_class_creation_16__prepared == NULL);
        tmp_class_creation_16__prepared = tmp_assign_source_176;
    }
    {
        bool tmp_condition_result_123;
        PyObject *tmp_operand_value_19;
        PyObject *tmp_expression_value_99;
        CHECK_OBJECT(tmp_class_creation_16__prepared);
        tmp_expression_value_99 = tmp_class_creation_16__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_99, mod_consts[413]);
        tmp_operand_value_19 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_19);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 887;

            goto try_except_handler_55;
        }
        tmp_condition_result_123 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_123 != false) {
            goto branch_yes_76;
        } else {
            goto branch_no_76;
        }
    }
    branch_yes_76:;
    {
        PyObject *tmp_raise_type_19;
        PyObject *tmp_raise_value_19;
        PyObject *tmp_left_value_19;
        PyObject *tmp_right_value_19;
        PyObject *tmp_tuple_element_72;
        PyObject *tmp_getattr_target_19;
        PyObject *tmp_getattr_attr_19;
        PyObject *tmp_getattr_default_19;
        tmp_raise_type_19 = PyExc_TypeError;
        tmp_left_value_19 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_16__metaclass);
        tmp_getattr_target_19 = tmp_class_creation_16__metaclass;
        tmp_getattr_attr_19 = mod_consts[190];
        tmp_getattr_default_19 = mod_consts[415];
        tmp_tuple_element_72 = BUILTIN_GETATTR(tmp_getattr_target_19, tmp_getattr_attr_19, tmp_getattr_default_19);
        if (tmp_tuple_element_72 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 887;

            goto try_except_handler_55;
        }
        tmp_right_value_19 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_100;
            PyObject *tmp_type_arg_38;
            PyTuple_SET_ITEM(tmp_right_value_19, 0, tmp_tuple_element_72);
            CHECK_OBJECT(tmp_class_creation_16__prepared);
            tmp_type_arg_38 = tmp_class_creation_16__prepared;
            tmp_expression_value_100 = BUILTIN_TYPE1(tmp_type_arg_38);
            assert(!(tmp_expression_value_100 == NULL));
            tmp_tuple_element_72 = LOOKUP_ATTRIBUTE(tmp_expression_value_100, mod_consts[190]);
            Py_DECREF(tmp_expression_value_100);
            if (tmp_tuple_element_72 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 887;

                goto tuple_build_exception_25;
            }
            PyTuple_SET_ITEM(tmp_right_value_19, 1, tmp_tuple_element_72);
        }
        goto tuple_build_noexception_25;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_25:;
        Py_DECREF(tmp_right_value_19);
        goto try_except_handler_55;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_25:;
        tmp_raise_value_19 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_19, tmp_right_value_19);
        Py_DECREF(tmp_right_value_19);
        if (tmp_raise_value_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 887;

            goto try_except_handler_55;
        }
        exception_type = tmp_raise_type_19;
        Py_INCREF(tmp_raise_type_19);
        exception_value = tmp_raise_value_19;
        exception_lineno = 887;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_55;
    }
    branch_no_76:;
    goto branch_end_75;
    branch_no_75:;
    {
        PyObject *tmp_assign_source_177;
        tmp_assign_source_177 = PyDict_New();
        assert(tmp_class_creation_16__prepared == NULL);
        tmp_class_creation_16__prepared = tmp_assign_source_177;
    }
    branch_end_75:;
    {
        PyObject *tmp_assign_source_178;
        {
            PyObject *tmp_set_locals_19;
            CHECK_OBJECT(tmp_class_creation_16__prepared);
            tmp_set_locals_19 = tmp_class_creation_16__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_887 = tmp_set_locals_19;
            Py_INCREF(tmp_set_locals_19);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_887, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 887;

            goto try_except_handler_57;
        }
        tmp_dictset_value = mod_consts[507];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_887, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 887;

            goto try_except_handler_57;
        }
        tmp_dictset_value = mod_consts[119];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_887, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 887;

            goto try_except_handler_57;
        }
        if (isFrameUnusable(cache_frame_8903c4a3d33544d3921ce0ac2ff35885_20)) {
            Py_XDECREF(cache_frame_8903c4a3d33544d3921ce0ac2ff35885_20);

#if _DEBUG_REFCOUNTS
            if (cache_frame_8903c4a3d33544d3921ce0ac2ff35885_20 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_8903c4a3d33544d3921ce0ac2ff35885_20 = MAKE_FUNCTION_FRAME(codeobj_8903c4a3d33544d3921ce0ac2ff35885, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_8903c4a3d33544d3921ce0ac2ff35885_20->m_type_description == NULL);
        frame_8903c4a3d33544d3921ce0ac2ff35885_20 = cache_frame_8903c4a3d33544d3921ce0ac2ff35885_20;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_8903c4a3d33544d3921ce0ac2ff35885_20);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_8903c4a3d33544d3921ce0ac2ff35885_20) == 2); // Frame stack

        // Framed code:
        {
            PyObject *tmp_defaults_8;
            tmp_defaults_8 = mod_consts[257];
            Py_INCREF(tmp_defaults_8);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__41___init__(tmp_defaults_8);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_887, mod_consts[66], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 891;
                type_description_2 = "o";
                goto frame_exception_exit_20;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__42_literal_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_887, mod_consts[228], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 894;
            type_description_2 = "o";
            goto frame_exception_exit_20;
        }
        {
            nuitka_bool tmp_condition_result_124;
            PyObject *tmp_called_value_57;
            PyObject *tmp_args_element_value_24;
            PyObject *tmp_called_value_58;
            PyObject *tmp_args_element_value_25;
            tmp_res = MAPPING_HAS_ITEM(locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_887, mod_consts[420]);

            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 901;
                type_description_2 = "o";
                goto frame_exception_exit_20;
            }
            tmp_condition_result_124 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_124 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_48;
            } else {
                goto condexpr_false_48;
            }
            condexpr_true_48:;
            tmp_called_value_57 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_887, mod_consts[420]);

            if (unlikely(tmp_called_value_57 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[420]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 901;
                type_description_2 = "o";
                goto frame_exception_exit_20;
            }

            if (tmp_called_value_57 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 901;
                type_description_2 = "o";
                goto frame_exception_exit_20;
            }


            tmp_args_element_value_24 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__43_python_type();

            frame_8903c4a3d33544d3921ce0ac2ff35885_20->m_frame.f_lineno = 901;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_57, tmp_args_element_value_24);
            Py_DECREF(tmp_called_value_57);
            Py_DECREF(tmp_args_element_value_24);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 901;
                type_description_2 = "o";
                goto frame_exception_exit_20;
            }
            goto condexpr_end_48;
            condexpr_false_48:;
            tmp_called_value_58 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_25 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__43_python_type();

            frame_8903c4a3d33544d3921ce0ac2ff35885_20->m_frame.f_lineno = 901;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_58, tmp_args_element_value_25);
            Py_DECREF(tmp_args_element_value_25);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 901;
                type_description_2 = "o";
                goto frame_exception_exit_20;
            }
            condexpr_end_48:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_887, mod_consts[236], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 902;
                type_description_2 = "o";
                goto frame_exception_exit_20;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__44_bind_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_887, mod_consts[232], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 907;
            type_description_2 = "o";
            goto frame_exception_exit_20;
        }
        {
            nuitka_bool tmp_condition_result_125;
            PyObject *tmp_expression_value_101;
            PyObject *tmp_attribute_value_2;
            int tmp_truth_name_21;
            tmp_expression_value_101 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_887, mod_consts[43]);

            if (tmp_expression_value_101 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_101 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_expression_value_101 == NULL)) {
                        tmp_expression_value_101 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
                    }

                    if (tmp_expression_value_101 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 924;
                        type_description_2 = "o";
                        goto frame_exception_exit_20;
                    }
                    Py_INCREF(tmp_expression_value_101);
                } else {
                    goto frame_exception_exit_20;
                }
            }

            tmp_attribute_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_101, mod_consts[512]);
            Py_DECREF(tmp_expression_value_101);
            if (tmp_attribute_value_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 924;
                type_description_2 = "o";
                goto frame_exception_exit_20;
            }
            tmp_truth_name_21 = CHECK_IF_TRUE(tmp_attribute_value_2);
            if (tmp_truth_name_21 == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_attribute_value_2);

                exception_lineno = 924;
                type_description_2 = "o";
                goto frame_exception_exit_20;
            }
            tmp_condition_result_125 = tmp_truth_name_21 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
            Py_DECREF(tmp_attribute_value_2);
            if (tmp_condition_result_125 == NUITKA_BOOL_TRUE) {
                goto branch_yes_77;
            } else {
                goto branch_no_77;
            }
        }
        branch_yes_77:;


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__45_result_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_887, mod_consts[233], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 926;
            type_description_2 = "o";
            goto frame_exception_exit_20;
        }
        goto branch_end_77;
        branch_no_77:;


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__46_result_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_887, mod_consts[233], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 943;
            type_description_2 = "o";
            goto frame_exception_exit_20;
        }
        branch_end_77:;


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__47_coerce_compared_value();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_887, mod_consts[120], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 951;
            type_description_2 = "o";
            goto frame_exception_exit_20;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__48_get_dbapi_type();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_887, mod_consts[447], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 959;
            type_description_2 = "o";
            goto frame_exception_exit_20;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_8903c4a3d33544d3921ce0ac2ff35885_20);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_19;

        frame_exception_exit_20:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_8903c4a3d33544d3921ce0ac2ff35885_20);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_8903c4a3d33544d3921ce0ac2ff35885_20, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_8903c4a3d33544d3921ce0ac2ff35885_20->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_8903c4a3d33544d3921ce0ac2ff35885_20, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_8903c4a3d33544d3921ce0ac2ff35885_20,
            type_description_2,
            outline_18_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_8903c4a3d33544d3921ce0ac2ff35885_20 == cache_frame_8903c4a3d33544d3921ce0ac2ff35885_20) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_8903c4a3d33544d3921ce0ac2ff35885_20);
            cache_frame_8903c4a3d33544d3921ce0ac2ff35885_20 = NULL;
        }

        assertFrameObject(frame_8903c4a3d33544d3921ce0ac2ff35885_20);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_19;

        frame_no_exception_19:;
        goto skip_nested_handling_19;
        nested_frame_exit_19:;

        goto try_except_handler_57;
        skip_nested_handling_19:;
        {
            nuitka_bool tmp_condition_result_126;
            PyObject *tmp_cmp_expr_left_19;
            PyObject *tmp_cmp_expr_right_19;
            CHECK_OBJECT(tmp_class_creation_16__bases);
            tmp_cmp_expr_left_19 = tmp_class_creation_16__bases;
            CHECK_OBJECT(tmp_class_creation_16__bases_orig);
            tmp_cmp_expr_right_19 = tmp_class_creation_16__bases_orig;
            tmp_condition_result_126 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_19, tmp_cmp_expr_right_19);
            if (tmp_condition_result_126 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 887;

                goto try_except_handler_57;
            }
            if (tmp_condition_result_126 == NUITKA_BOOL_TRUE) {
                goto branch_yes_78;
            } else {
                goto branch_no_78;
            }
            assert(tmp_condition_result_126 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_78:;
        CHECK_OBJECT(tmp_class_creation_16__bases_orig);
        tmp_dictset_value = tmp_class_creation_16__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_887, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 887;

            goto try_except_handler_57;
        }
        branch_no_78:;
        {
            PyObject *tmp_assign_source_179;
            PyObject *tmp_called_value_59;
            PyObject *tmp_args_value_38;
            PyObject *tmp_tuple_element_73;
            PyObject *tmp_kwargs_value_38;
            CHECK_OBJECT(tmp_class_creation_16__metaclass);
            tmp_called_value_59 = tmp_class_creation_16__metaclass;
            tmp_tuple_element_73 = mod_consts[119];
            tmp_args_value_38 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_38, 0, tmp_tuple_element_73);
            CHECK_OBJECT(tmp_class_creation_16__bases);
            tmp_tuple_element_73 = tmp_class_creation_16__bases;
            PyTuple_SET_ITEM0(tmp_args_value_38, 1, tmp_tuple_element_73);
            tmp_tuple_element_73 = locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_887;
            PyTuple_SET_ITEM0(tmp_args_value_38, 2, tmp_tuple_element_73);
            CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
            tmp_kwargs_value_38 = tmp_class_creation_16__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 887;
            tmp_assign_source_179 = CALL_FUNCTION(tmp_called_value_59, tmp_args_value_38, tmp_kwargs_value_38);
            Py_DECREF(tmp_args_value_38);
            if (tmp_assign_source_179 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 887;

                goto try_except_handler_57;
            }
            assert(outline_18_var___class__ == NULL);
            outline_18_var___class__ = tmp_assign_source_179;
        }
        CHECK_OBJECT(outline_18_var___class__);
        tmp_assign_source_178 = outline_18_var___class__;
        Py_INCREF(tmp_assign_source_178);
        goto try_return_handler_57;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_57:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_887);
        locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_887 = NULL;
        goto try_return_handler_56;
        // Exception handler code:
        try_except_handler_57:;
        exception_keeper_type_55 = exception_type;
        exception_keeper_value_55 = exception_value;
        exception_keeper_tb_55 = exception_tb;
        exception_keeper_lineno_55 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_887);
        locals_sqlalchemy$sql$sqltypes$$$class__19__Binary_887 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_55;
        exception_value = exception_keeper_value_55;
        exception_tb = exception_keeper_tb_55;
        exception_lineno = exception_keeper_lineno_55;

        goto try_except_handler_56;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_56:;
        CHECK_OBJECT(outline_18_var___class__);
        Py_DECREF(outline_18_var___class__);
        outline_18_var___class__ = NULL;
        goto outline_result_19;
        // Exception handler code:
        try_except_handler_56:;
        exception_keeper_type_56 = exception_type;
        exception_keeper_value_56 = exception_value;
        exception_keeper_tb_56 = exception_tb;
        exception_keeper_lineno_56 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_56;
        exception_value = exception_keeper_value_56;
        exception_tb = exception_keeper_tb_56;
        exception_lineno = exception_keeper_lineno_56;

        goto outline_exception_19;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_19:;
        exception_lineno = 887;
        goto try_except_handler_55;
        outline_result_19:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[119], tmp_assign_source_178);
    }
    goto try_end_19;
    // Exception handler code:
    try_except_handler_55:;
    exception_keeper_type_57 = exception_type;
    exception_keeper_value_57 = exception_value;
    exception_keeper_tb_57 = exception_tb;
    exception_keeper_lineno_57 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_16__bases_orig);
    tmp_class_creation_16__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_16__bases);
    tmp_class_creation_16__bases = NULL;
    Py_XDECREF(tmp_class_creation_16__class_decl_dict);
    tmp_class_creation_16__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_16__metaclass);
    tmp_class_creation_16__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_16__prepared);
    tmp_class_creation_16__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_57;
    exception_value = exception_keeper_value_57;
    exception_tb = exception_keeper_tb_57;
    exception_lineno = exception_keeper_lineno_57;

    goto frame_exception_exit_1;
    // End of try:
    try_end_19:;
    CHECK_OBJECT(tmp_class_creation_16__bases_orig);
    Py_DECREF(tmp_class_creation_16__bases_orig);
    tmp_class_creation_16__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_16__bases);
    Py_DECREF(tmp_class_creation_16__bases);
    tmp_class_creation_16__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
    Py_DECREF(tmp_class_creation_16__class_decl_dict);
    tmp_class_creation_16__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_16__metaclass);
    Py_DECREF(tmp_class_creation_16__metaclass);
    tmp_class_creation_16__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_16__prepared);
    Py_DECREF(tmp_class_creation_16__prepared);
    tmp_class_creation_16__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_180;
        PyObject *tmp_tuple_element_74;
        tmp_tuple_element_74 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[119]);

        if (unlikely(tmp_tuple_element_74 == NULL)) {
            tmp_tuple_element_74 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[119]);
        }

        if (tmp_tuple_element_74 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 963;

            goto try_except_handler_58;
        }
        tmp_assign_source_180 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_180, 0, tmp_tuple_element_74);
        assert(tmp_class_creation_17__bases_orig == NULL);
        tmp_class_creation_17__bases_orig = tmp_assign_source_180;
    }
    {
        PyObject *tmp_assign_source_181;
        PyObject *tmp_dircall_arg1_20;
        CHECK_OBJECT(tmp_class_creation_17__bases_orig);
        tmp_dircall_arg1_20 = tmp_class_creation_17__bases_orig;
        Py_INCREF(tmp_dircall_arg1_20);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_20};
            tmp_assign_source_181 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_181 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 963;

            goto try_except_handler_58;
        }
        assert(tmp_class_creation_17__bases == NULL);
        tmp_class_creation_17__bases = tmp_assign_source_181;
    }
    {
        PyObject *tmp_assign_source_182;
        tmp_assign_source_182 = PyDict_New();
        assert(tmp_class_creation_17__class_decl_dict == NULL);
        tmp_class_creation_17__class_decl_dict = tmp_assign_source_182;
    }
    {
        PyObject *tmp_assign_source_183;
        PyObject *tmp_metaclass_value_20;
        bool tmp_condition_result_127;
        PyObject *tmp_key_value_58;
        PyObject *tmp_dict_arg_value_58;
        PyObject *tmp_dict_arg_value_59;
        PyObject *tmp_key_value_59;
        nuitka_bool tmp_condition_result_128;
        int tmp_truth_name_22;
        PyObject *tmp_type_arg_39;
        PyObject *tmp_expression_value_102;
        PyObject *tmp_subscript_value_20;
        PyObject *tmp_bases_value_20;
        tmp_key_value_58 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
        tmp_dict_arg_value_58 = tmp_class_creation_17__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_58, tmp_key_value_58);
        assert(!(tmp_res == -1));
        tmp_condition_result_127 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_127 != false) {
            goto condexpr_true_49;
        } else {
            goto condexpr_false_49;
        }
        condexpr_true_49:;
        CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
        tmp_dict_arg_value_59 = tmp_class_creation_17__class_decl_dict;
        tmp_key_value_59 = mod_consts[410];
        tmp_metaclass_value_20 = DICT_GET_ITEM0(tmp_dict_arg_value_59, tmp_key_value_59);
        if (tmp_metaclass_value_20 == NULL) {
            tmp_metaclass_value_20 = Py_None;
        }
        assert(!(tmp_metaclass_value_20 == NULL));
        Py_INCREF(tmp_metaclass_value_20);
        goto condexpr_end_49;
        condexpr_false_49:;
        CHECK_OBJECT(tmp_class_creation_17__bases);
        tmp_truth_name_22 = CHECK_IF_TRUE(tmp_class_creation_17__bases);
        if (tmp_truth_name_22 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 963;

            goto try_except_handler_58;
        }
        tmp_condition_result_128 = tmp_truth_name_22 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_128 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_50;
        } else {
            goto condexpr_false_50;
        }
        condexpr_true_50:;
        CHECK_OBJECT(tmp_class_creation_17__bases);
        tmp_expression_value_102 = tmp_class_creation_17__bases;
        tmp_subscript_value_20 = mod_consts[52];
        tmp_type_arg_39 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_102, tmp_subscript_value_20, 0);
        if (tmp_type_arg_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 963;

            goto try_except_handler_58;
        }
        tmp_metaclass_value_20 = BUILTIN_TYPE1(tmp_type_arg_39);
        Py_DECREF(tmp_type_arg_39);
        if (tmp_metaclass_value_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 963;

            goto try_except_handler_58;
        }
        goto condexpr_end_50;
        condexpr_false_50:;
        tmp_metaclass_value_20 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_20);
        condexpr_end_50:;
        condexpr_end_49:;
        CHECK_OBJECT(tmp_class_creation_17__bases);
        tmp_bases_value_20 = tmp_class_creation_17__bases;
        tmp_assign_source_183 = SELECT_METACLASS(tmp_metaclass_value_20, tmp_bases_value_20);
        Py_DECREF(tmp_metaclass_value_20);
        if (tmp_assign_source_183 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 963;

            goto try_except_handler_58;
        }
        assert(tmp_class_creation_17__metaclass == NULL);
        tmp_class_creation_17__metaclass = tmp_assign_source_183;
    }
    {
        bool tmp_condition_result_129;
        PyObject *tmp_key_value_60;
        PyObject *tmp_dict_arg_value_60;
        tmp_key_value_60 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
        tmp_dict_arg_value_60 = tmp_class_creation_17__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_60, tmp_key_value_60);
        assert(!(tmp_res == -1));
        tmp_condition_result_129 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_129 != false) {
            goto branch_yes_79;
        } else {
            goto branch_no_79;
        }
    }
    branch_yes_79:;
    CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_17__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 963;

        goto try_except_handler_58;
    }
    branch_no_79:;
    {
        nuitka_bool tmp_condition_result_130;
        PyObject *tmp_expression_value_103;
        CHECK_OBJECT(tmp_class_creation_17__metaclass);
        tmp_expression_value_103 = tmp_class_creation_17__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_103, mod_consts[411]);
        tmp_condition_result_130 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_130 == NUITKA_BOOL_TRUE) {
            goto branch_yes_80;
        } else {
            goto branch_no_80;
        }
    }
    branch_yes_80:;
    {
        PyObject *tmp_assign_source_184;
        PyObject *tmp_called_value_60;
        PyObject *tmp_expression_value_104;
        PyObject *tmp_args_value_39;
        PyObject *tmp_tuple_element_75;
        PyObject *tmp_kwargs_value_39;
        CHECK_OBJECT(tmp_class_creation_17__metaclass);
        tmp_expression_value_104 = tmp_class_creation_17__metaclass;
        tmp_called_value_60 = LOOKUP_ATTRIBUTE(tmp_expression_value_104, mod_consts[411]);
        if (tmp_called_value_60 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 963;

            goto try_except_handler_58;
        }
        tmp_tuple_element_75 = mod_consts[125];
        tmp_args_value_39 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_39, 0, tmp_tuple_element_75);
        CHECK_OBJECT(tmp_class_creation_17__bases);
        tmp_tuple_element_75 = tmp_class_creation_17__bases;
        PyTuple_SET_ITEM0(tmp_args_value_39, 1, tmp_tuple_element_75);
        CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
        tmp_kwargs_value_39 = tmp_class_creation_17__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 963;
        tmp_assign_source_184 = CALL_FUNCTION(tmp_called_value_60, tmp_args_value_39, tmp_kwargs_value_39);
        Py_DECREF(tmp_called_value_60);
        Py_DECREF(tmp_args_value_39);
        if (tmp_assign_source_184 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 963;

            goto try_except_handler_58;
        }
        assert(tmp_class_creation_17__prepared == NULL);
        tmp_class_creation_17__prepared = tmp_assign_source_184;
    }
    {
        bool tmp_condition_result_131;
        PyObject *tmp_operand_value_20;
        PyObject *tmp_expression_value_105;
        CHECK_OBJECT(tmp_class_creation_17__prepared);
        tmp_expression_value_105 = tmp_class_creation_17__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_105, mod_consts[413]);
        tmp_operand_value_20 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_20);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 963;

            goto try_except_handler_58;
        }
        tmp_condition_result_131 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_131 != false) {
            goto branch_yes_81;
        } else {
            goto branch_no_81;
        }
    }
    branch_yes_81:;
    {
        PyObject *tmp_raise_type_20;
        PyObject *tmp_raise_value_20;
        PyObject *tmp_left_value_20;
        PyObject *tmp_right_value_20;
        PyObject *tmp_tuple_element_76;
        PyObject *tmp_getattr_target_20;
        PyObject *tmp_getattr_attr_20;
        PyObject *tmp_getattr_default_20;
        tmp_raise_type_20 = PyExc_TypeError;
        tmp_left_value_20 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_17__metaclass);
        tmp_getattr_target_20 = tmp_class_creation_17__metaclass;
        tmp_getattr_attr_20 = mod_consts[190];
        tmp_getattr_default_20 = mod_consts[415];
        tmp_tuple_element_76 = BUILTIN_GETATTR(tmp_getattr_target_20, tmp_getattr_attr_20, tmp_getattr_default_20);
        if (tmp_tuple_element_76 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 963;

            goto try_except_handler_58;
        }
        tmp_right_value_20 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_106;
            PyObject *tmp_type_arg_40;
            PyTuple_SET_ITEM(tmp_right_value_20, 0, tmp_tuple_element_76);
            CHECK_OBJECT(tmp_class_creation_17__prepared);
            tmp_type_arg_40 = tmp_class_creation_17__prepared;
            tmp_expression_value_106 = BUILTIN_TYPE1(tmp_type_arg_40);
            assert(!(tmp_expression_value_106 == NULL));
            tmp_tuple_element_76 = LOOKUP_ATTRIBUTE(tmp_expression_value_106, mod_consts[190]);
            Py_DECREF(tmp_expression_value_106);
            if (tmp_tuple_element_76 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 963;

                goto tuple_build_exception_26;
            }
            PyTuple_SET_ITEM(tmp_right_value_20, 1, tmp_tuple_element_76);
        }
        goto tuple_build_noexception_26;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_26:;
        Py_DECREF(tmp_right_value_20);
        goto try_except_handler_58;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_26:;
        tmp_raise_value_20 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_20, tmp_right_value_20);
        Py_DECREF(tmp_right_value_20);
        if (tmp_raise_value_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 963;

            goto try_except_handler_58;
        }
        exception_type = tmp_raise_type_20;
        Py_INCREF(tmp_raise_type_20);
        exception_value = tmp_raise_value_20;
        exception_lineno = 963;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_58;
    }
    branch_no_81:;
    goto branch_end_80;
    branch_no_80:;
    {
        PyObject *tmp_assign_source_185;
        tmp_assign_source_185 = PyDict_New();
        assert(tmp_class_creation_17__prepared == NULL);
        tmp_class_creation_17__prepared = tmp_assign_source_185;
    }
    branch_end_80:;
    {
        PyObject *tmp_assign_source_186;
        {
            PyObject *tmp_set_locals_20;
            CHECK_OBJECT(tmp_class_creation_17__prepared);
            tmp_set_locals_20 = tmp_class_creation_17__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__20_LargeBinary_963 = tmp_set_locals_20;
            Py_INCREF(tmp_set_locals_20);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__20_LargeBinary_963, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 963;

            goto try_except_handler_60;
        }
        tmp_dictset_value = mod_consts[516];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__20_LargeBinary_963, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 963;

            goto try_except_handler_60;
        }
        tmp_dictset_value = mod_consts[125];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__20_LargeBinary_963, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 963;

            goto try_except_handler_60;
        }
        if (isFrameUnusable(cache_frame_954e881c467d99e18659617377121c4b_21)) {
            Py_XDECREF(cache_frame_954e881c467d99e18659617377121c4b_21);

#if _DEBUG_REFCOUNTS
            if (cache_frame_954e881c467d99e18659617377121c4b_21 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_954e881c467d99e18659617377121c4b_21 = MAKE_FUNCTION_FRAME(codeobj_954e881c467d99e18659617377121c4b, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_954e881c467d99e18659617377121c4b_21->m_type_description == NULL);
        frame_954e881c467d99e18659617377121c4b_21 = cache_frame_954e881c467d99e18659617377121c4b_21;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_954e881c467d99e18659617377121c4b_21);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_954e881c467d99e18659617377121c4b_21) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[517];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__20_LargeBinary_963, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 973;
            type_description_2 = "o";
            goto frame_exception_exit_21;
        }
        {
            PyObject *tmp_defaults_9;
            tmp_defaults_9 = mod_consts[257];
            Py_INCREF(tmp_defaults_9);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__49___init__(tmp_defaults_9);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__20_LargeBinary_963, mod_consts[66], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 975;
                type_description_2 = "o";
                goto frame_exception_exit_21;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_954e881c467d99e18659617377121c4b_21);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_20;

        frame_exception_exit_21:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_954e881c467d99e18659617377121c4b_21);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_954e881c467d99e18659617377121c4b_21, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_954e881c467d99e18659617377121c4b_21->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_954e881c467d99e18659617377121c4b_21, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_954e881c467d99e18659617377121c4b_21,
            type_description_2,
            outline_19_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_954e881c467d99e18659617377121c4b_21 == cache_frame_954e881c467d99e18659617377121c4b_21) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_954e881c467d99e18659617377121c4b_21);
            cache_frame_954e881c467d99e18659617377121c4b_21 = NULL;
        }

        assertFrameObject(frame_954e881c467d99e18659617377121c4b_21);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_20;

        frame_no_exception_20:;
        goto skip_nested_handling_20;
        nested_frame_exit_20:;

        goto try_except_handler_60;
        skip_nested_handling_20:;
        {
            nuitka_bool tmp_condition_result_132;
            PyObject *tmp_cmp_expr_left_20;
            PyObject *tmp_cmp_expr_right_20;
            CHECK_OBJECT(tmp_class_creation_17__bases);
            tmp_cmp_expr_left_20 = tmp_class_creation_17__bases;
            CHECK_OBJECT(tmp_class_creation_17__bases_orig);
            tmp_cmp_expr_right_20 = tmp_class_creation_17__bases_orig;
            tmp_condition_result_132 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_20, tmp_cmp_expr_right_20);
            if (tmp_condition_result_132 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 963;

                goto try_except_handler_60;
            }
            if (tmp_condition_result_132 == NUITKA_BOOL_TRUE) {
                goto branch_yes_82;
            } else {
                goto branch_no_82;
            }
            assert(tmp_condition_result_132 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_82:;
        CHECK_OBJECT(tmp_class_creation_17__bases_orig);
        tmp_dictset_value = tmp_class_creation_17__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__20_LargeBinary_963, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 963;

            goto try_except_handler_60;
        }
        branch_no_82:;
        {
            PyObject *tmp_assign_source_187;
            PyObject *tmp_called_value_61;
            PyObject *tmp_args_value_40;
            PyObject *tmp_tuple_element_77;
            PyObject *tmp_kwargs_value_40;
            CHECK_OBJECT(tmp_class_creation_17__metaclass);
            tmp_called_value_61 = tmp_class_creation_17__metaclass;
            tmp_tuple_element_77 = mod_consts[125];
            tmp_args_value_40 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_40, 0, tmp_tuple_element_77);
            CHECK_OBJECT(tmp_class_creation_17__bases);
            tmp_tuple_element_77 = tmp_class_creation_17__bases;
            PyTuple_SET_ITEM0(tmp_args_value_40, 1, tmp_tuple_element_77);
            tmp_tuple_element_77 = locals_sqlalchemy$sql$sqltypes$$$class__20_LargeBinary_963;
            PyTuple_SET_ITEM0(tmp_args_value_40, 2, tmp_tuple_element_77);
            CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
            tmp_kwargs_value_40 = tmp_class_creation_17__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 963;
            tmp_assign_source_187 = CALL_FUNCTION(tmp_called_value_61, tmp_args_value_40, tmp_kwargs_value_40);
            Py_DECREF(tmp_args_value_40);
            if (tmp_assign_source_187 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 963;

                goto try_except_handler_60;
            }
            assert(outline_19_var___class__ == NULL);
            outline_19_var___class__ = tmp_assign_source_187;
        }
        CHECK_OBJECT(outline_19_var___class__);
        tmp_assign_source_186 = outline_19_var___class__;
        Py_INCREF(tmp_assign_source_186);
        goto try_return_handler_60;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_60:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__20_LargeBinary_963);
        locals_sqlalchemy$sql$sqltypes$$$class__20_LargeBinary_963 = NULL;
        goto try_return_handler_59;
        // Exception handler code:
        try_except_handler_60:;
        exception_keeper_type_58 = exception_type;
        exception_keeper_value_58 = exception_value;
        exception_keeper_tb_58 = exception_tb;
        exception_keeper_lineno_58 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__20_LargeBinary_963);
        locals_sqlalchemy$sql$sqltypes$$$class__20_LargeBinary_963 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_58;
        exception_value = exception_keeper_value_58;
        exception_tb = exception_keeper_tb_58;
        exception_lineno = exception_keeper_lineno_58;

        goto try_except_handler_59;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_59:;
        CHECK_OBJECT(outline_19_var___class__);
        Py_DECREF(outline_19_var___class__);
        outline_19_var___class__ = NULL;
        goto outline_result_20;
        // Exception handler code:
        try_except_handler_59:;
        exception_keeper_type_59 = exception_type;
        exception_keeper_value_59 = exception_value;
        exception_keeper_tb_59 = exception_tb;
        exception_keeper_lineno_59 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_59;
        exception_value = exception_keeper_value_59;
        exception_tb = exception_keeper_tb_59;
        exception_lineno = exception_keeper_lineno_59;

        goto outline_exception_20;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_20:;
        exception_lineno = 963;
        goto try_except_handler_58;
        outline_result_20:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[125], tmp_assign_source_186);
    }
    goto try_end_20;
    // Exception handler code:
    try_except_handler_58:;
    exception_keeper_type_60 = exception_type;
    exception_keeper_value_60 = exception_value;
    exception_keeper_tb_60 = exception_tb;
    exception_keeper_lineno_60 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_17__bases_orig);
    tmp_class_creation_17__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_17__bases);
    tmp_class_creation_17__bases = NULL;
    Py_XDECREF(tmp_class_creation_17__class_decl_dict);
    tmp_class_creation_17__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_17__metaclass);
    tmp_class_creation_17__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_17__prepared);
    tmp_class_creation_17__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_60;
    exception_value = exception_keeper_value_60;
    exception_tb = exception_keeper_tb_60;
    exception_lineno = exception_keeper_lineno_60;

    goto frame_exception_exit_1;
    // End of try:
    try_end_20:;
    CHECK_OBJECT(tmp_class_creation_17__bases_orig);
    Py_DECREF(tmp_class_creation_17__bases_orig);
    tmp_class_creation_17__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_17__bases);
    Py_DECREF(tmp_class_creation_17__bases);
    tmp_class_creation_17__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
    Py_DECREF(tmp_class_creation_17__class_decl_dict);
    tmp_class_creation_17__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_17__metaclass);
    Py_DECREF(tmp_class_creation_17__metaclass);
    tmp_class_creation_17__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_17__prepared);
    Py_DECREF(tmp_class_creation_17__prepared);
    tmp_class_creation_17__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_188;
        PyObject *tmp_tuple_element_78;
        tmp_tuple_element_78 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[125]);

        if (unlikely(tmp_tuple_element_78 == NULL)) {
            tmp_tuple_element_78 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[125]);
        }

        if (tmp_tuple_element_78 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 992;

            goto try_except_handler_61;
        }
        tmp_assign_source_188 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_188, 0, tmp_tuple_element_78);
        assert(tmp_class_creation_18__bases_orig == NULL);
        tmp_class_creation_18__bases_orig = tmp_assign_source_188;
    }
    {
        PyObject *tmp_assign_source_189;
        PyObject *tmp_dircall_arg1_21;
        CHECK_OBJECT(tmp_class_creation_18__bases_orig);
        tmp_dircall_arg1_21 = tmp_class_creation_18__bases_orig;
        Py_INCREF(tmp_dircall_arg1_21);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_21};
            tmp_assign_source_189 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_189 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 992;

            goto try_except_handler_61;
        }
        assert(tmp_class_creation_18__bases == NULL);
        tmp_class_creation_18__bases = tmp_assign_source_189;
    }
    {
        PyObject *tmp_assign_source_190;
        tmp_assign_source_190 = PyDict_New();
        assert(tmp_class_creation_18__class_decl_dict == NULL);
        tmp_class_creation_18__class_decl_dict = tmp_assign_source_190;
    }
    {
        PyObject *tmp_assign_source_191;
        PyObject *tmp_metaclass_value_21;
        bool tmp_condition_result_133;
        PyObject *tmp_key_value_61;
        PyObject *tmp_dict_arg_value_61;
        PyObject *tmp_dict_arg_value_62;
        PyObject *tmp_key_value_62;
        nuitka_bool tmp_condition_result_134;
        int tmp_truth_name_23;
        PyObject *tmp_type_arg_41;
        PyObject *tmp_expression_value_107;
        PyObject *tmp_subscript_value_21;
        PyObject *tmp_bases_value_21;
        tmp_key_value_61 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
        tmp_dict_arg_value_61 = tmp_class_creation_18__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_61, tmp_key_value_61);
        assert(!(tmp_res == -1));
        tmp_condition_result_133 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_133 != false) {
            goto condexpr_true_51;
        } else {
            goto condexpr_false_51;
        }
        condexpr_true_51:;
        CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
        tmp_dict_arg_value_62 = tmp_class_creation_18__class_decl_dict;
        tmp_key_value_62 = mod_consts[410];
        tmp_metaclass_value_21 = DICT_GET_ITEM0(tmp_dict_arg_value_62, tmp_key_value_62);
        if (tmp_metaclass_value_21 == NULL) {
            tmp_metaclass_value_21 = Py_None;
        }
        assert(!(tmp_metaclass_value_21 == NULL));
        Py_INCREF(tmp_metaclass_value_21);
        goto condexpr_end_51;
        condexpr_false_51:;
        CHECK_OBJECT(tmp_class_creation_18__bases);
        tmp_truth_name_23 = CHECK_IF_TRUE(tmp_class_creation_18__bases);
        if (tmp_truth_name_23 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 992;

            goto try_except_handler_61;
        }
        tmp_condition_result_134 = tmp_truth_name_23 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_134 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_52;
        } else {
            goto condexpr_false_52;
        }
        condexpr_true_52:;
        CHECK_OBJECT(tmp_class_creation_18__bases);
        tmp_expression_value_107 = tmp_class_creation_18__bases;
        tmp_subscript_value_21 = mod_consts[52];
        tmp_type_arg_41 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_107, tmp_subscript_value_21, 0);
        if (tmp_type_arg_41 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 992;

            goto try_except_handler_61;
        }
        tmp_metaclass_value_21 = BUILTIN_TYPE1(tmp_type_arg_41);
        Py_DECREF(tmp_type_arg_41);
        if (tmp_metaclass_value_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 992;

            goto try_except_handler_61;
        }
        goto condexpr_end_52;
        condexpr_false_52:;
        tmp_metaclass_value_21 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_21);
        condexpr_end_52:;
        condexpr_end_51:;
        CHECK_OBJECT(tmp_class_creation_18__bases);
        tmp_bases_value_21 = tmp_class_creation_18__bases;
        tmp_assign_source_191 = SELECT_METACLASS(tmp_metaclass_value_21, tmp_bases_value_21);
        Py_DECREF(tmp_metaclass_value_21);
        if (tmp_assign_source_191 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 992;

            goto try_except_handler_61;
        }
        assert(tmp_class_creation_18__metaclass == NULL);
        tmp_class_creation_18__metaclass = tmp_assign_source_191;
    }
    {
        bool tmp_condition_result_135;
        PyObject *tmp_key_value_63;
        PyObject *tmp_dict_arg_value_63;
        tmp_key_value_63 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
        tmp_dict_arg_value_63 = tmp_class_creation_18__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_63, tmp_key_value_63);
        assert(!(tmp_res == -1));
        tmp_condition_result_135 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_135 != false) {
            goto branch_yes_83;
        } else {
            goto branch_no_83;
        }
    }
    branch_yes_83:;
    CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_18__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 992;

        goto try_except_handler_61;
    }
    branch_no_83:;
    {
        nuitka_bool tmp_condition_result_136;
        PyObject *tmp_expression_value_108;
        CHECK_OBJECT(tmp_class_creation_18__metaclass);
        tmp_expression_value_108 = tmp_class_creation_18__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_108, mod_consts[411]);
        tmp_condition_result_136 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_136 == NUITKA_BOOL_TRUE) {
            goto branch_yes_84;
        } else {
            goto branch_no_84;
        }
    }
    branch_yes_84:;
    {
        PyObject *tmp_assign_source_192;
        PyObject *tmp_called_value_62;
        PyObject *tmp_expression_value_109;
        PyObject *tmp_args_value_41;
        PyObject *tmp_tuple_element_79;
        PyObject *tmp_kwargs_value_41;
        CHECK_OBJECT(tmp_class_creation_18__metaclass);
        tmp_expression_value_109 = tmp_class_creation_18__metaclass;
        tmp_called_value_62 = LOOKUP_ATTRIBUTE(tmp_expression_value_109, mod_consts[411]);
        if (tmp_called_value_62 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 992;

            goto try_except_handler_61;
        }
        tmp_tuple_element_79 = mod_consts[110];
        tmp_args_value_41 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_41, 0, tmp_tuple_element_79);
        CHECK_OBJECT(tmp_class_creation_18__bases);
        tmp_tuple_element_79 = tmp_class_creation_18__bases;
        PyTuple_SET_ITEM0(tmp_args_value_41, 1, tmp_tuple_element_79);
        CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
        tmp_kwargs_value_41 = tmp_class_creation_18__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 992;
        tmp_assign_source_192 = CALL_FUNCTION(tmp_called_value_62, tmp_args_value_41, tmp_kwargs_value_41);
        Py_DECREF(tmp_called_value_62);
        Py_DECREF(tmp_args_value_41);
        if (tmp_assign_source_192 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 992;

            goto try_except_handler_61;
        }
        assert(tmp_class_creation_18__prepared == NULL);
        tmp_class_creation_18__prepared = tmp_assign_source_192;
    }
    {
        bool tmp_condition_result_137;
        PyObject *tmp_operand_value_21;
        PyObject *tmp_expression_value_110;
        CHECK_OBJECT(tmp_class_creation_18__prepared);
        tmp_expression_value_110 = tmp_class_creation_18__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_110, mod_consts[413]);
        tmp_operand_value_21 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_21);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 992;

            goto try_except_handler_61;
        }
        tmp_condition_result_137 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_137 != false) {
            goto branch_yes_85;
        } else {
            goto branch_no_85;
        }
    }
    branch_yes_85:;
    {
        PyObject *tmp_raise_type_21;
        PyObject *tmp_raise_value_21;
        PyObject *tmp_left_value_21;
        PyObject *tmp_right_value_21;
        PyObject *tmp_tuple_element_80;
        PyObject *tmp_getattr_target_21;
        PyObject *tmp_getattr_attr_21;
        PyObject *tmp_getattr_default_21;
        tmp_raise_type_21 = PyExc_TypeError;
        tmp_left_value_21 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_18__metaclass);
        tmp_getattr_target_21 = tmp_class_creation_18__metaclass;
        tmp_getattr_attr_21 = mod_consts[190];
        tmp_getattr_default_21 = mod_consts[415];
        tmp_tuple_element_80 = BUILTIN_GETATTR(tmp_getattr_target_21, tmp_getattr_attr_21, tmp_getattr_default_21);
        if (tmp_tuple_element_80 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 992;

            goto try_except_handler_61;
        }
        tmp_right_value_21 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_111;
            PyObject *tmp_type_arg_42;
            PyTuple_SET_ITEM(tmp_right_value_21, 0, tmp_tuple_element_80);
            CHECK_OBJECT(tmp_class_creation_18__prepared);
            tmp_type_arg_42 = tmp_class_creation_18__prepared;
            tmp_expression_value_111 = BUILTIN_TYPE1(tmp_type_arg_42);
            assert(!(tmp_expression_value_111 == NULL));
            tmp_tuple_element_80 = LOOKUP_ATTRIBUTE(tmp_expression_value_111, mod_consts[190]);
            Py_DECREF(tmp_expression_value_111);
            if (tmp_tuple_element_80 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 992;

                goto tuple_build_exception_27;
            }
            PyTuple_SET_ITEM(tmp_right_value_21, 1, tmp_tuple_element_80);
        }
        goto tuple_build_noexception_27;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_27:;
        Py_DECREF(tmp_right_value_21);
        goto try_except_handler_61;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_27:;
        tmp_raise_value_21 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_21, tmp_right_value_21);
        Py_DECREF(tmp_right_value_21);
        if (tmp_raise_value_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 992;

            goto try_except_handler_61;
        }
        exception_type = tmp_raise_type_21;
        Py_INCREF(tmp_raise_type_21);
        exception_value = tmp_raise_value_21;
        exception_lineno = 992;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_61;
    }
    branch_no_85:;
    goto branch_end_84;
    branch_no_84:;
    {
        PyObject *tmp_assign_source_193;
        tmp_assign_source_193 = PyDict_New();
        assert(tmp_class_creation_18__prepared == NULL);
        tmp_class_creation_18__prepared = tmp_assign_source_193;
    }
    branch_end_84:;
    {
        PyObject *tmp_assign_source_194;
        PyObject *tmp_called_value_63;
        PyObject *tmp_called_instance_7;
        PyObject *tmp_args_element_value_26;
        tmp_called_instance_7 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_called_instance_7 == NULL)) {
            tmp_called_instance_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
        }

        if (tmp_called_instance_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 987;

            goto try_except_handler_61;
        }
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 987;
        tmp_called_value_63 = CALL_METHOD_WITH_ARGS2(
            tmp_called_instance_7,
            mod_consts[519],
            &PyTuple_GET_ITEM(mod_consts[520], 0)
        );

        if (tmp_called_value_63 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 987;

            goto try_except_handler_61;
        }
        {
            PyObject *tmp_set_locals_21;
            CHECK_OBJECT(tmp_class_creation_18__prepared);
            tmp_set_locals_21 = tmp_class_creation_18__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__21_Binary_992 = tmp_set_locals_21;
            Py_INCREF(tmp_set_locals_21);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__21_Binary_992, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 992;

            goto try_except_handler_63;
        }
        tmp_dictset_value = mod_consts[110];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__21_Binary_992, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 992;

            goto try_except_handler_63;
        }
        if (isFrameUnusable(cache_frame_f8682397177685371c8f52cc512db74c_22)) {
            Py_XDECREF(cache_frame_f8682397177685371c8f52cc512db74c_22);

#if _DEBUG_REFCOUNTS
            if (cache_frame_f8682397177685371c8f52cc512db74c_22 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_f8682397177685371c8f52cc512db74c_22 = MAKE_FUNCTION_FRAME(codeobj_f8682397177685371c8f52cc512db74c, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_f8682397177685371c8f52cc512db74c_22->m_type_description == NULL);
        frame_f8682397177685371c8f52cc512db74c_22 = cache_frame_f8682397177685371c8f52cc512db74c_22;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_f8682397177685371c8f52cc512db74c_22);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_f8682397177685371c8f52cc512db74c_22) == 2); // Frame stack

        // Framed code:


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__50___init__();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__21_Binary_992, mod_consts[66], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 993;
            type_description_2 = "o";
            goto frame_exception_exit_22;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_f8682397177685371c8f52cc512db74c_22);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_21;

        frame_exception_exit_22:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_f8682397177685371c8f52cc512db74c_22);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_f8682397177685371c8f52cc512db74c_22, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_f8682397177685371c8f52cc512db74c_22->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_f8682397177685371c8f52cc512db74c_22, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_f8682397177685371c8f52cc512db74c_22,
            type_description_2,
            outline_20_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_f8682397177685371c8f52cc512db74c_22 == cache_frame_f8682397177685371c8f52cc512db74c_22) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_f8682397177685371c8f52cc512db74c_22);
            cache_frame_f8682397177685371c8f52cc512db74c_22 = NULL;
        }

        assertFrameObject(frame_f8682397177685371c8f52cc512db74c_22);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_21;

        frame_no_exception_21:;
        goto skip_nested_handling_21;
        nested_frame_exit_21:;

        goto try_except_handler_63;
        skip_nested_handling_21:;
        {
            nuitka_bool tmp_condition_result_138;
            PyObject *tmp_cmp_expr_left_21;
            PyObject *tmp_cmp_expr_right_21;
            CHECK_OBJECT(tmp_class_creation_18__bases);
            tmp_cmp_expr_left_21 = tmp_class_creation_18__bases;
            CHECK_OBJECT(tmp_class_creation_18__bases_orig);
            tmp_cmp_expr_right_21 = tmp_class_creation_18__bases_orig;
            tmp_condition_result_138 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_21, tmp_cmp_expr_right_21);
            if (tmp_condition_result_138 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 992;

                goto try_except_handler_63;
            }
            if (tmp_condition_result_138 == NUITKA_BOOL_TRUE) {
                goto branch_yes_86;
            } else {
                goto branch_no_86;
            }
            assert(tmp_condition_result_138 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_86:;
        CHECK_OBJECT(tmp_class_creation_18__bases_orig);
        tmp_dictset_value = tmp_class_creation_18__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__21_Binary_992, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 992;

            goto try_except_handler_63;
        }
        branch_no_86:;
        {
            PyObject *tmp_assign_source_195;
            PyObject *tmp_called_value_64;
            PyObject *tmp_args_value_42;
            PyObject *tmp_tuple_element_81;
            PyObject *tmp_kwargs_value_42;
            CHECK_OBJECT(tmp_class_creation_18__metaclass);
            tmp_called_value_64 = tmp_class_creation_18__metaclass;
            tmp_tuple_element_81 = mod_consts[110];
            tmp_args_value_42 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_42, 0, tmp_tuple_element_81);
            CHECK_OBJECT(tmp_class_creation_18__bases);
            tmp_tuple_element_81 = tmp_class_creation_18__bases;
            PyTuple_SET_ITEM0(tmp_args_value_42, 1, tmp_tuple_element_81);
            tmp_tuple_element_81 = locals_sqlalchemy$sql$sqltypes$$$class__21_Binary_992;
            PyTuple_SET_ITEM0(tmp_args_value_42, 2, tmp_tuple_element_81);
            CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
            tmp_kwargs_value_42 = tmp_class_creation_18__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 992;
            tmp_assign_source_195 = CALL_FUNCTION(tmp_called_value_64, tmp_args_value_42, tmp_kwargs_value_42);
            Py_DECREF(tmp_args_value_42);
            if (tmp_assign_source_195 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 992;

                goto try_except_handler_63;
            }
            assert(outline_20_var___class__ == NULL);
            outline_20_var___class__ = tmp_assign_source_195;
        }
        CHECK_OBJECT(outline_20_var___class__);
        tmp_args_element_value_26 = outline_20_var___class__;
        Py_INCREF(tmp_args_element_value_26);
        goto try_return_handler_63;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_63:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__21_Binary_992);
        locals_sqlalchemy$sql$sqltypes$$$class__21_Binary_992 = NULL;
        goto try_return_handler_62;
        // Exception handler code:
        try_except_handler_63:;
        exception_keeper_type_61 = exception_type;
        exception_keeper_value_61 = exception_value;
        exception_keeper_tb_61 = exception_tb;
        exception_keeper_lineno_61 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__21_Binary_992);
        locals_sqlalchemy$sql$sqltypes$$$class__21_Binary_992 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_61;
        exception_value = exception_keeper_value_61;
        exception_tb = exception_keeper_tb_61;
        exception_lineno = exception_keeper_lineno_61;

        goto try_except_handler_62;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_62:;
        CHECK_OBJECT(outline_20_var___class__);
        Py_DECREF(outline_20_var___class__);
        outline_20_var___class__ = NULL;
        goto outline_result_21;
        // Exception handler code:
        try_except_handler_62:;
        exception_keeper_type_62 = exception_type;
        exception_keeper_value_62 = exception_value;
        exception_keeper_tb_62 = exception_tb;
        exception_keeper_lineno_62 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_62;
        exception_value = exception_keeper_value_62;
        exception_tb = exception_keeper_tb_62;
        exception_lineno = exception_keeper_lineno_62;

        goto outline_exception_21;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_21:;
        exception_lineno = 992;
        goto try_except_handler_61;
        outline_result_21:;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 987;
        tmp_assign_source_194 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_63, tmp_args_element_value_26);
        Py_DECREF(tmp_called_value_63);
        Py_DECREF(tmp_args_element_value_26);
        if (tmp_assign_source_194 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 987;

            goto try_except_handler_61;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[110], tmp_assign_source_194);
    }
    goto try_end_21;
    // Exception handler code:
    try_except_handler_61:;
    exception_keeper_type_63 = exception_type;
    exception_keeper_value_63 = exception_value;
    exception_keeper_tb_63 = exception_tb;
    exception_keeper_lineno_63 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_18__bases_orig);
    tmp_class_creation_18__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_18__bases);
    tmp_class_creation_18__bases = NULL;
    Py_XDECREF(tmp_class_creation_18__class_decl_dict);
    tmp_class_creation_18__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_18__metaclass);
    tmp_class_creation_18__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_18__prepared);
    tmp_class_creation_18__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_63;
    exception_value = exception_keeper_value_63;
    exception_tb = exception_keeper_tb_63;
    exception_lineno = exception_keeper_lineno_63;

    goto frame_exception_exit_1;
    // End of try:
    try_end_21:;
    CHECK_OBJECT(tmp_class_creation_18__bases_orig);
    Py_DECREF(tmp_class_creation_18__bases_orig);
    tmp_class_creation_18__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_18__bases);
    Py_DECREF(tmp_class_creation_18__bases);
    tmp_class_creation_18__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
    Py_DECREF(tmp_class_creation_18__class_decl_dict);
    tmp_class_creation_18__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_18__metaclass);
    Py_DECREF(tmp_class_creation_18__metaclass);
    tmp_class_creation_18__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_18__prepared);
    Py_DECREF(tmp_class_creation_18__prepared);
    tmp_class_creation_18__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_196;
        PyObject *tmp_tuple_element_82;
        tmp_tuple_element_82 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[353]);

        if (unlikely(tmp_tuple_element_82 == NULL)) {
            tmp_tuple_element_82 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[353]);
        }

        if (tmp_tuple_element_82 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 997;

            goto try_except_handler_64;
        }
        tmp_assign_source_196 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_196, 0, tmp_tuple_element_82);
        assert(tmp_class_creation_19__bases_orig == NULL);
        tmp_class_creation_19__bases_orig = tmp_assign_source_196;
    }
    {
        PyObject *tmp_assign_source_197;
        PyObject *tmp_dircall_arg1_22;
        CHECK_OBJECT(tmp_class_creation_19__bases_orig);
        tmp_dircall_arg1_22 = tmp_class_creation_19__bases_orig;
        Py_INCREF(tmp_dircall_arg1_22);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_22};
            tmp_assign_source_197 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_197 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 997;

            goto try_except_handler_64;
        }
        assert(tmp_class_creation_19__bases == NULL);
        tmp_class_creation_19__bases = tmp_assign_source_197;
    }
    {
        PyObject *tmp_assign_source_198;
        tmp_assign_source_198 = PyDict_New();
        assert(tmp_class_creation_19__class_decl_dict == NULL);
        tmp_class_creation_19__class_decl_dict = tmp_assign_source_198;
    }
    {
        PyObject *tmp_assign_source_199;
        PyObject *tmp_metaclass_value_22;
        bool tmp_condition_result_139;
        PyObject *tmp_key_value_64;
        PyObject *tmp_dict_arg_value_64;
        PyObject *tmp_dict_arg_value_65;
        PyObject *tmp_key_value_65;
        nuitka_bool tmp_condition_result_140;
        int tmp_truth_name_24;
        PyObject *tmp_type_arg_43;
        PyObject *tmp_expression_value_112;
        PyObject *tmp_subscript_value_22;
        PyObject *tmp_bases_value_22;
        tmp_key_value_64 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
        tmp_dict_arg_value_64 = tmp_class_creation_19__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_64, tmp_key_value_64);
        assert(!(tmp_res == -1));
        tmp_condition_result_139 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_139 != false) {
            goto condexpr_true_53;
        } else {
            goto condexpr_false_53;
        }
        condexpr_true_53:;
        CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
        tmp_dict_arg_value_65 = tmp_class_creation_19__class_decl_dict;
        tmp_key_value_65 = mod_consts[410];
        tmp_metaclass_value_22 = DICT_GET_ITEM0(tmp_dict_arg_value_65, tmp_key_value_65);
        if (tmp_metaclass_value_22 == NULL) {
            tmp_metaclass_value_22 = Py_None;
        }
        assert(!(tmp_metaclass_value_22 == NULL));
        Py_INCREF(tmp_metaclass_value_22);
        goto condexpr_end_53;
        condexpr_false_53:;
        CHECK_OBJECT(tmp_class_creation_19__bases);
        tmp_truth_name_24 = CHECK_IF_TRUE(tmp_class_creation_19__bases);
        if (tmp_truth_name_24 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 997;

            goto try_except_handler_64;
        }
        tmp_condition_result_140 = tmp_truth_name_24 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_140 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_54;
        } else {
            goto condexpr_false_54;
        }
        condexpr_true_54:;
        CHECK_OBJECT(tmp_class_creation_19__bases);
        tmp_expression_value_112 = tmp_class_creation_19__bases;
        tmp_subscript_value_22 = mod_consts[52];
        tmp_type_arg_43 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_112, tmp_subscript_value_22, 0);
        if (tmp_type_arg_43 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 997;

            goto try_except_handler_64;
        }
        tmp_metaclass_value_22 = BUILTIN_TYPE1(tmp_type_arg_43);
        Py_DECREF(tmp_type_arg_43);
        if (tmp_metaclass_value_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 997;

            goto try_except_handler_64;
        }
        goto condexpr_end_54;
        condexpr_false_54:;
        tmp_metaclass_value_22 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_22);
        condexpr_end_54:;
        condexpr_end_53:;
        CHECK_OBJECT(tmp_class_creation_19__bases);
        tmp_bases_value_22 = tmp_class_creation_19__bases;
        tmp_assign_source_199 = SELECT_METACLASS(tmp_metaclass_value_22, tmp_bases_value_22);
        Py_DECREF(tmp_metaclass_value_22);
        if (tmp_assign_source_199 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 997;

            goto try_except_handler_64;
        }
        assert(tmp_class_creation_19__metaclass == NULL);
        tmp_class_creation_19__metaclass = tmp_assign_source_199;
    }
    {
        bool tmp_condition_result_141;
        PyObject *tmp_key_value_66;
        PyObject *tmp_dict_arg_value_66;
        tmp_key_value_66 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
        tmp_dict_arg_value_66 = tmp_class_creation_19__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_66, tmp_key_value_66);
        assert(!(tmp_res == -1));
        tmp_condition_result_141 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_141 != false) {
            goto branch_yes_87;
        } else {
            goto branch_no_87;
        }
    }
    branch_yes_87:;
    CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_19__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 997;

        goto try_except_handler_64;
    }
    branch_no_87:;
    {
        nuitka_bool tmp_condition_result_142;
        PyObject *tmp_expression_value_113;
        CHECK_OBJECT(tmp_class_creation_19__metaclass);
        tmp_expression_value_113 = tmp_class_creation_19__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_113, mod_consts[411]);
        tmp_condition_result_142 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_142 == NUITKA_BOOL_TRUE) {
            goto branch_yes_88;
        } else {
            goto branch_no_88;
        }
    }
    branch_yes_88:;
    {
        PyObject *tmp_assign_source_200;
        PyObject *tmp_called_value_65;
        PyObject *tmp_expression_value_114;
        PyObject *tmp_args_value_43;
        PyObject *tmp_tuple_element_83;
        PyObject *tmp_kwargs_value_43;
        CHECK_OBJECT(tmp_class_creation_19__metaclass);
        tmp_expression_value_114 = tmp_class_creation_19__metaclass;
        tmp_called_value_65 = LOOKUP_ATTRIBUTE(tmp_expression_value_114, mod_consts[411]);
        if (tmp_called_value_65 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 997;

            goto try_except_handler_64;
        }
        tmp_tuple_element_83 = mod_consts[157];
        tmp_args_value_43 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_43, 0, tmp_tuple_element_83);
        CHECK_OBJECT(tmp_class_creation_19__bases);
        tmp_tuple_element_83 = tmp_class_creation_19__bases;
        PyTuple_SET_ITEM0(tmp_args_value_43, 1, tmp_tuple_element_83);
        CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
        tmp_kwargs_value_43 = tmp_class_creation_19__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 997;
        tmp_assign_source_200 = CALL_FUNCTION(tmp_called_value_65, tmp_args_value_43, tmp_kwargs_value_43);
        Py_DECREF(tmp_called_value_65);
        Py_DECREF(tmp_args_value_43);
        if (tmp_assign_source_200 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 997;

            goto try_except_handler_64;
        }
        assert(tmp_class_creation_19__prepared == NULL);
        tmp_class_creation_19__prepared = tmp_assign_source_200;
    }
    {
        bool tmp_condition_result_143;
        PyObject *tmp_operand_value_22;
        PyObject *tmp_expression_value_115;
        CHECK_OBJECT(tmp_class_creation_19__prepared);
        tmp_expression_value_115 = tmp_class_creation_19__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_115, mod_consts[413]);
        tmp_operand_value_22 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_22);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 997;

            goto try_except_handler_64;
        }
        tmp_condition_result_143 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_143 != false) {
            goto branch_yes_89;
        } else {
            goto branch_no_89;
        }
    }
    branch_yes_89:;
    {
        PyObject *tmp_raise_type_22;
        PyObject *tmp_raise_value_22;
        PyObject *tmp_left_value_22;
        PyObject *tmp_right_value_22;
        PyObject *tmp_tuple_element_84;
        PyObject *tmp_getattr_target_22;
        PyObject *tmp_getattr_attr_22;
        PyObject *tmp_getattr_default_22;
        tmp_raise_type_22 = PyExc_TypeError;
        tmp_left_value_22 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_19__metaclass);
        tmp_getattr_target_22 = tmp_class_creation_19__metaclass;
        tmp_getattr_attr_22 = mod_consts[190];
        tmp_getattr_default_22 = mod_consts[415];
        tmp_tuple_element_84 = BUILTIN_GETATTR(tmp_getattr_target_22, tmp_getattr_attr_22, tmp_getattr_default_22);
        if (tmp_tuple_element_84 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 997;

            goto try_except_handler_64;
        }
        tmp_right_value_22 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_116;
            PyObject *tmp_type_arg_44;
            PyTuple_SET_ITEM(tmp_right_value_22, 0, tmp_tuple_element_84);
            CHECK_OBJECT(tmp_class_creation_19__prepared);
            tmp_type_arg_44 = tmp_class_creation_19__prepared;
            tmp_expression_value_116 = BUILTIN_TYPE1(tmp_type_arg_44);
            assert(!(tmp_expression_value_116 == NULL));
            tmp_tuple_element_84 = LOOKUP_ATTRIBUTE(tmp_expression_value_116, mod_consts[190]);
            Py_DECREF(tmp_expression_value_116);
            if (tmp_tuple_element_84 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 997;

                goto tuple_build_exception_28;
            }
            PyTuple_SET_ITEM(tmp_right_value_22, 1, tmp_tuple_element_84);
        }
        goto tuple_build_noexception_28;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_28:;
        Py_DECREF(tmp_right_value_22);
        goto try_except_handler_64;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_28:;
        tmp_raise_value_22 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_22, tmp_right_value_22);
        Py_DECREF(tmp_right_value_22);
        if (tmp_raise_value_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 997;

            goto try_except_handler_64;
        }
        exception_type = tmp_raise_type_22;
        Py_INCREF(tmp_raise_type_22);
        exception_value = tmp_raise_value_22;
        exception_lineno = 997;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_64;
    }
    branch_no_89:;
    goto branch_end_88;
    branch_no_88:;
    {
        PyObject *tmp_assign_source_201;
        tmp_assign_source_201 = PyDict_New();
        assert(tmp_class_creation_19__prepared == NULL);
        tmp_class_creation_19__prepared = tmp_assign_source_201;
    }
    branch_end_88:;
    {
        PyObject *tmp_assign_source_202;
        {
            PyObject *tmp_set_locals_22;
            CHECK_OBJECT(tmp_class_creation_19__prepared);
            tmp_set_locals_22 = tmp_class_creation_19__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__22_SchemaType_997 = tmp_set_locals_22;
            Py_INCREF(tmp_set_locals_22);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_SchemaType_997, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 997;

            goto try_except_handler_66;
        }
        tmp_dictset_value = mod_consts[522];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_SchemaType_997, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 997;

            goto try_except_handler_66;
        }
        tmp_dictset_value = mod_consts[157];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_SchemaType_997, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 997;

            goto try_except_handler_66;
        }
        if (isFrameUnusable(cache_frame_1edc8a06b5cf424963435a420881e56d_23)) {
            Py_XDECREF(cache_frame_1edc8a06b5cf424963435a420881e56d_23);

#if _DEBUG_REFCOUNTS
            if (cache_frame_1edc8a06b5cf424963435a420881e56d_23 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_1edc8a06b5cf424963435a420881e56d_23 = MAKE_FUNCTION_FRAME(codeobj_1edc8a06b5cf424963435a420881e56d, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_1edc8a06b5cf424963435a420881e56d_23->m_type_description == NULL);
        frame_1edc8a06b5cf424963435a420881e56d_23 = cache_frame_1edc8a06b5cf424963435a420881e56d_23;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_1edc8a06b5cf424963435a420881e56d_23);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_1edc8a06b5cf424963435a420881e56d_23) == 2); // Frame stack

        // Framed code:
        {
            PyObject *tmp_defaults_10;
            tmp_defaults_10 = mod_consts[523];
            Py_INCREF(tmp_defaults_10);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__51___init__(tmp_defaults_10);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_SchemaType_997, mod_consts[66], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1020;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__52__translate_schema();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_SchemaType_997, mod_consts[525], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1050;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__53__set_parent();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_SchemaType_997, mod_consts[354], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1053;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__54__variant_mapping_for_set_table();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_SchemaType_997, mod_consts[146], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1056;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__55__set_table();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_SchemaType_997, mod_consts[139], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1064;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__56_copy();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_SchemaType_997, mod_consts[142], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1107;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__57_adapt();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_SchemaType_997, mod_consts[150], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1110;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }
        {
            nuitka_bool tmp_condition_result_144;
            PyObject *tmp_called_value_66;
            PyObject *tmp_args_element_value_27;
            PyObject *tmp_called_value_67;
            PyObject *tmp_args_element_value_28;
            tmp_res = MAPPING_HAS_ITEM(locals_sqlalchemy$sql$sqltypes$$$class__22_SchemaType_997, mod_consts[420]);

            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1123;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            tmp_condition_result_144 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_144 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_55;
            } else {
                goto condexpr_false_55;
            }
            condexpr_true_55:;
            tmp_called_value_66 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_SchemaType_997, mod_consts[420]);

            if (unlikely(tmp_called_value_66 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[420]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 1123;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }

            if (tmp_called_value_66 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1123;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }


            tmp_args_element_value_27 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__58_bind();

            frame_1edc8a06b5cf424963435a420881e56d_23->m_frame.f_lineno = 1123;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_66, tmp_args_element_value_27);
            Py_DECREF(tmp_called_value_66);
            Py_DECREF(tmp_args_element_value_27);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1123;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            goto condexpr_end_55;
            condexpr_false_55:;
            tmp_called_value_67 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_28 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__58_bind();

            frame_1edc8a06b5cf424963435a420881e56d_23->m_frame.f_lineno = 1123;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_67, tmp_args_element_value_28);
            Py_DECREF(tmp_args_element_value_28);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1123;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
            condexpr_end_55:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_SchemaType_997, mod_consts[154], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1124;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
        }
        {
            PyObject *tmp_defaults_11;
            tmp_defaults_11 = mod_consts[533];
            Py_INCREF(tmp_defaults_11);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__59_create(tmp_defaults_11);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_SchemaType_997, mod_consts[158], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1127;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
        }
        {
            PyObject *tmp_defaults_12;
            tmp_defaults_12 = mod_consts[533];
            Py_INCREF(tmp_defaults_12);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__60_drop(tmp_defaults_12);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_SchemaType_997, mod_consts[161], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1136;
                type_description_2 = "o";
                goto frame_exception_exit_23;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__61__on_table_create();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_SchemaType_997, mod_consts[148], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1145;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__62__on_table_drop();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_SchemaType_997, mod_consts[149], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1153;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__63__on_metadata_create();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_SchemaType_997, mod_consts[135], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1161;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__64__on_metadata_drop();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_SchemaType_997, mod_consts[137], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1169;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__65__is_impl_for_variant();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_SchemaType_997, mod_consts[163], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1177;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_1edc8a06b5cf424963435a420881e56d_23);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_22;

        frame_exception_exit_23:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_1edc8a06b5cf424963435a420881e56d_23);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_1edc8a06b5cf424963435a420881e56d_23, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_1edc8a06b5cf424963435a420881e56d_23->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_1edc8a06b5cf424963435a420881e56d_23, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_1edc8a06b5cf424963435a420881e56d_23,
            type_description_2,
            outline_21_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_1edc8a06b5cf424963435a420881e56d_23 == cache_frame_1edc8a06b5cf424963435a420881e56d_23) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_1edc8a06b5cf424963435a420881e56d_23);
            cache_frame_1edc8a06b5cf424963435a420881e56d_23 = NULL;
        }

        assertFrameObject(frame_1edc8a06b5cf424963435a420881e56d_23);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_22;

        frame_no_exception_22:;
        goto skip_nested_handling_22;
        nested_frame_exit_22:;

        goto try_except_handler_66;
        skip_nested_handling_22:;
        {
            nuitka_bool tmp_condition_result_145;
            PyObject *tmp_cmp_expr_left_22;
            PyObject *tmp_cmp_expr_right_22;
            CHECK_OBJECT(tmp_class_creation_19__bases);
            tmp_cmp_expr_left_22 = tmp_class_creation_19__bases;
            CHECK_OBJECT(tmp_class_creation_19__bases_orig);
            tmp_cmp_expr_right_22 = tmp_class_creation_19__bases_orig;
            tmp_condition_result_145 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_22, tmp_cmp_expr_right_22);
            if (tmp_condition_result_145 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 997;

                goto try_except_handler_66;
            }
            if (tmp_condition_result_145 == NUITKA_BOOL_TRUE) {
                goto branch_yes_90;
            } else {
                goto branch_no_90;
            }
            assert(tmp_condition_result_145 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_90:;
        CHECK_OBJECT(tmp_class_creation_19__bases_orig);
        tmp_dictset_value = tmp_class_creation_19__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__22_SchemaType_997, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 997;

            goto try_except_handler_66;
        }
        branch_no_90:;
        {
            PyObject *tmp_assign_source_203;
            PyObject *tmp_called_value_68;
            PyObject *tmp_args_value_44;
            PyObject *tmp_tuple_element_85;
            PyObject *tmp_kwargs_value_44;
            CHECK_OBJECT(tmp_class_creation_19__metaclass);
            tmp_called_value_68 = tmp_class_creation_19__metaclass;
            tmp_tuple_element_85 = mod_consts[157];
            tmp_args_value_44 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_44, 0, tmp_tuple_element_85);
            CHECK_OBJECT(tmp_class_creation_19__bases);
            tmp_tuple_element_85 = tmp_class_creation_19__bases;
            PyTuple_SET_ITEM0(tmp_args_value_44, 1, tmp_tuple_element_85);
            tmp_tuple_element_85 = locals_sqlalchemy$sql$sqltypes$$$class__22_SchemaType_997;
            PyTuple_SET_ITEM0(tmp_args_value_44, 2, tmp_tuple_element_85);
            CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
            tmp_kwargs_value_44 = tmp_class_creation_19__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 997;
            tmp_assign_source_203 = CALL_FUNCTION(tmp_called_value_68, tmp_args_value_44, tmp_kwargs_value_44);
            Py_DECREF(tmp_args_value_44);
            if (tmp_assign_source_203 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 997;

                goto try_except_handler_66;
            }
            assert(outline_21_var___class__ == NULL);
            outline_21_var___class__ = tmp_assign_source_203;
        }
        CHECK_OBJECT(outline_21_var___class__);
        tmp_assign_source_202 = outline_21_var___class__;
        Py_INCREF(tmp_assign_source_202);
        goto try_return_handler_66;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_66:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__22_SchemaType_997);
        locals_sqlalchemy$sql$sqltypes$$$class__22_SchemaType_997 = NULL;
        goto try_return_handler_65;
        // Exception handler code:
        try_except_handler_66:;
        exception_keeper_type_64 = exception_type;
        exception_keeper_value_64 = exception_value;
        exception_keeper_tb_64 = exception_tb;
        exception_keeper_lineno_64 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__22_SchemaType_997);
        locals_sqlalchemy$sql$sqltypes$$$class__22_SchemaType_997 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_64;
        exception_value = exception_keeper_value_64;
        exception_tb = exception_keeper_tb_64;
        exception_lineno = exception_keeper_lineno_64;

        goto try_except_handler_65;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_65:;
        CHECK_OBJECT(outline_21_var___class__);
        Py_DECREF(outline_21_var___class__);
        outline_21_var___class__ = NULL;
        goto outline_result_22;
        // Exception handler code:
        try_except_handler_65:;
        exception_keeper_type_65 = exception_type;
        exception_keeper_value_65 = exception_value;
        exception_keeper_tb_65 = exception_tb;
        exception_keeper_lineno_65 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_65;
        exception_value = exception_keeper_value_65;
        exception_tb = exception_keeper_tb_65;
        exception_lineno = exception_keeper_lineno_65;

        goto outline_exception_22;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_22:;
        exception_lineno = 997;
        goto try_except_handler_64;
        outline_result_22:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[157], tmp_assign_source_202);
    }
    goto try_end_22;
    // Exception handler code:
    try_except_handler_64:;
    exception_keeper_type_66 = exception_type;
    exception_keeper_value_66 = exception_value;
    exception_keeper_tb_66 = exception_tb;
    exception_keeper_lineno_66 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_19__bases_orig);
    tmp_class_creation_19__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_19__bases);
    tmp_class_creation_19__bases = NULL;
    Py_XDECREF(tmp_class_creation_19__class_decl_dict);
    tmp_class_creation_19__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_19__metaclass);
    tmp_class_creation_19__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_19__prepared);
    tmp_class_creation_19__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_66;
    exception_value = exception_keeper_value_66;
    exception_tb = exception_keeper_tb_66;
    exception_lineno = exception_keeper_lineno_66;

    goto frame_exception_exit_1;
    // End of try:
    try_end_22:;
    CHECK_OBJECT(tmp_class_creation_19__bases_orig);
    Py_DECREF(tmp_class_creation_19__bases_orig);
    tmp_class_creation_19__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_19__bases);
    Py_DECREF(tmp_class_creation_19__bases);
    tmp_class_creation_19__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
    Py_DECREF(tmp_class_creation_19__class_decl_dict);
    tmp_class_creation_19__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_19__metaclass);
    Py_DECREF(tmp_class_creation_19__metaclass);
    tmp_class_creation_19__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_19__prepared);
    Py_DECREF(tmp_class_creation_19__prepared);
    tmp_class_creation_19__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_204;
        PyObject *tmp_tuple_element_86;
        tmp_tuple_element_86 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[391]);

        if (unlikely(tmp_tuple_element_86 == NULL)) {
            tmp_tuple_element_86 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[391]);
        }

        if (tmp_tuple_element_86 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1191;

            goto try_except_handler_67;
        }
        tmp_assign_source_204 = PyTuple_New(3);
        PyTuple_SET_ITEM0(tmp_assign_source_204, 0, tmp_tuple_element_86);
        tmp_tuple_element_86 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[215]);

        if (unlikely(tmp_tuple_element_86 == NULL)) {
            tmp_tuple_element_86 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[215]);
        }

        if (tmp_tuple_element_86 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1191;

            goto tuple_build_exception_29;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_204, 1, tmp_tuple_element_86);
        tmp_tuple_element_86 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[157]);

        if (unlikely(tmp_tuple_element_86 == NULL)) {
            tmp_tuple_element_86 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[157]);
        }

        if (tmp_tuple_element_86 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1191;

            goto tuple_build_exception_29;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_204, 2, tmp_tuple_element_86);
        goto tuple_build_noexception_29;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_29:;
        Py_DECREF(tmp_assign_source_204);
        goto try_except_handler_67;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_29:;
        assert(tmp_class_creation_20__bases_orig == NULL);
        tmp_class_creation_20__bases_orig = tmp_assign_source_204;
    }
    {
        PyObject *tmp_assign_source_205;
        PyObject *tmp_dircall_arg1_23;
        CHECK_OBJECT(tmp_class_creation_20__bases_orig);
        tmp_dircall_arg1_23 = tmp_class_creation_20__bases_orig;
        Py_INCREF(tmp_dircall_arg1_23);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_23};
            tmp_assign_source_205 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_205 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1191;

            goto try_except_handler_67;
        }
        assert(tmp_class_creation_20__bases == NULL);
        tmp_class_creation_20__bases = tmp_assign_source_205;
    }
    {
        PyObject *tmp_assign_source_206;
        tmp_assign_source_206 = PyDict_New();
        assert(tmp_class_creation_20__class_decl_dict == NULL);
        tmp_class_creation_20__class_decl_dict = tmp_assign_source_206;
    }
    {
        PyObject *tmp_assign_source_207;
        PyObject *tmp_metaclass_value_23;
        bool tmp_condition_result_146;
        PyObject *tmp_key_value_67;
        PyObject *tmp_dict_arg_value_67;
        PyObject *tmp_dict_arg_value_68;
        PyObject *tmp_key_value_68;
        nuitka_bool tmp_condition_result_147;
        int tmp_truth_name_25;
        PyObject *tmp_type_arg_45;
        PyObject *tmp_expression_value_117;
        PyObject *tmp_subscript_value_23;
        PyObject *tmp_bases_value_23;
        tmp_key_value_67 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
        tmp_dict_arg_value_67 = tmp_class_creation_20__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_67, tmp_key_value_67);
        assert(!(tmp_res == -1));
        tmp_condition_result_146 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_146 != false) {
            goto condexpr_true_56;
        } else {
            goto condexpr_false_56;
        }
        condexpr_true_56:;
        CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
        tmp_dict_arg_value_68 = tmp_class_creation_20__class_decl_dict;
        tmp_key_value_68 = mod_consts[410];
        tmp_metaclass_value_23 = DICT_GET_ITEM0(tmp_dict_arg_value_68, tmp_key_value_68);
        if (tmp_metaclass_value_23 == NULL) {
            tmp_metaclass_value_23 = Py_None;
        }
        assert(!(tmp_metaclass_value_23 == NULL));
        Py_INCREF(tmp_metaclass_value_23);
        goto condexpr_end_56;
        condexpr_false_56:;
        CHECK_OBJECT(tmp_class_creation_20__bases);
        tmp_truth_name_25 = CHECK_IF_TRUE(tmp_class_creation_20__bases);
        if (tmp_truth_name_25 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1191;

            goto try_except_handler_67;
        }
        tmp_condition_result_147 = tmp_truth_name_25 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_147 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_57;
        } else {
            goto condexpr_false_57;
        }
        condexpr_true_57:;
        CHECK_OBJECT(tmp_class_creation_20__bases);
        tmp_expression_value_117 = tmp_class_creation_20__bases;
        tmp_subscript_value_23 = mod_consts[52];
        tmp_type_arg_45 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_117, tmp_subscript_value_23, 0);
        if (tmp_type_arg_45 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1191;

            goto try_except_handler_67;
        }
        tmp_metaclass_value_23 = BUILTIN_TYPE1(tmp_type_arg_45);
        Py_DECREF(tmp_type_arg_45);
        if (tmp_metaclass_value_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1191;

            goto try_except_handler_67;
        }
        goto condexpr_end_57;
        condexpr_false_57:;
        tmp_metaclass_value_23 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_23);
        condexpr_end_57:;
        condexpr_end_56:;
        CHECK_OBJECT(tmp_class_creation_20__bases);
        tmp_bases_value_23 = tmp_class_creation_20__bases;
        tmp_assign_source_207 = SELECT_METACLASS(tmp_metaclass_value_23, tmp_bases_value_23);
        Py_DECREF(tmp_metaclass_value_23);
        if (tmp_assign_source_207 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1191;

            goto try_except_handler_67;
        }
        assert(tmp_class_creation_20__metaclass == NULL);
        tmp_class_creation_20__metaclass = tmp_assign_source_207;
    }
    {
        bool tmp_condition_result_148;
        PyObject *tmp_key_value_69;
        PyObject *tmp_dict_arg_value_69;
        tmp_key_value_69 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
        tmp_dict_arg_value_69 = tmp_class_creation_20__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_69, tmp_key_value_69);
        assert(!(tmp_res == -1));
        tmp_condition_result_148 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_148 != false) {
            goto branch_yes_91;
        } else {
            goto branch_no_91;
        }
    }
    branch_yes_91:;
    CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_20__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1191;

        goto try_except_handler_67;
    }
    branch_no_91:;
    {
        nuitka_bool tmp_condition_result_149;
        PyObject *tmp_expression_value_118;
        CHECK_OBJECT(tmp_class_creation_20__metaclass);
        tmp_expression_value_118 = tmp_class_creation_20__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_118, mod_consts[411]);
        tmp_condition_result_149 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_149 == NUITKA_BOOL_TRUE) {
            goto branch_yes_92;
        } else {
            goto branch_no_92;
        }
    }
    branch_yes_92:;
    {
        PyObject *tmp_assign_source_208;
        PyObject *tmp_called_value_69;
        PyObject *tmp_expression_value_119;
        PyObject *tmp_args_value_45;
        PyObject *tmp_tuple_element_87;
        PyObject *tmp_kwargs_value_45;
        CHECK_OBJECT(tmp_class_creation_20__metaclass);
        tmp_expression_value_119 = tmp_class_creation_20__metaclass;
        tmp_called_value_69 = LOOKUP_ATTRIBUTE(tmp_expression_value_119, mod_consts[411]);
        if (tmp_called_value_69 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1191;

            goto try_except_handler_67;
        }
        tmp_tuple_element_87 = mod_consts[188];
        tmp_args_value_45 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_45, 0, tmp_tuple_element_87);
        CHECK_OBJECT(tmp_class_creation_20__bases);
        tmp_tuple_element_87 = tmp_class_creation_20__bases;
        PyTuple_SET_ITEM0(tmp_args_value_45, 1, tmp_tuple_element_87);
        CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
        tmp_kwargs_value_45 = tmp_class_creation_20__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 1191;
        tmp_assign_source_208 = CALL_FUNCTION(tmp_called_value_69, tmp_args_value_45, tmp_kwargs_value_45);
        Py_DECREF(tmp_called_value_69);
        Py_DECREF(tmp_args_value_45);
        if (tmp_assign_source_208 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1191;

            goto try_except_handler_67;
        }
        assert(tmp_class_creation_20__prepared == NULL);
        tmp_class_creation_20__prepared = tmp_assign_source_208;
    }
    {
        bool tmp_condition_result_150;
        PyObject *tmp_operand_value_23;
        PyObject *tmp_expression_value_120;
        CHECK_OBJECT(tmp_class_creation_20__prepared);
        tmp_expression_value_120 = tmp_class_creation_20__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_120, mod_consts[413]);
        tmp_operand_value_23 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_23);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1191;

            goto try_except_handler_67;
        }
        tmp_condition_result_150 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_150 != false) {
            goto branch_yes_93;
        } else {
            goto branch_no_93;
        }
    }
    branch_yes_93:;
    {
        PyObject *tmp_raise_type_23;
        PyObject *tmp_raise_value_23;
        PyObject *tmp_left_value_23;
        PyObject *tmp_right_value_23;
        PyObject *tmp_tuple_element_88;
        PyObject *tmp_getattr_target_23;
        PyObject *tmp_getattr_attr_23;
        PyObject *tmp_getattr_default_23;
        tmp_raise_type_23 = PyExc_TypeError;
        tmp_left_value_23 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_20__metaclass);
        tmp_getattr_target_23 = tmp_class_creation_20__metaclass;
        tmp_getattr_attr_23 = mod_consts[190];
        tmp_getattr_default_23 = mod_consts[415];
        tmp_tuple_element_88 = BUILTIN_GETATTR(tmp_getattr_target_23, tmp_getattr_attr_23, tmp_getattr_default_23);
        if (tmp_tuple_element_88 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1191;

            goto try_except_handler_67;
        }
        tmp_right_value_23 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_121;
            PyObject *tmp_type_arg_46;
            PyTuple_SET_ITEM(tmp_right_value_23, 0, tmp_tuple_element_88);
            CHECK_OBJECT(tmp_class_creation_20__prepared);
            tmp_type_arg_46 = tmp_class_creation_20__prepared;
            tmp_expression_value_121 = BUILTIN_TYPE1(tmp_type_arg_46);
            assert(!(tmp_expression_value_121 == NULL));
            tmp_tuple_element_88 = LOOKUP_ATTRIBUTE(tmp_expression_value_121, mod_consts[190]);
            Py_DECREF(tmp_expression_value_121);
            if (tmp_tuple_element_88 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1191;

                goto tuple_build_exception_30;
            }
            PyTuple_SET_ITEM(tmp_right_value_23, 1, tmp_tuple_element_88);
        }
        goto tuple_build_noexception_30;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_30:;
        Py_DECREF(tmp_right_value_23);
        goto try_except_handler_67;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_30:;
        tmp_raise_value_23 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_23, tmp_right_value_23);
        Py_DECREF(tmp_right_value_23);
        if (tmp_raise_value_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1191;

            goto try_except_handler_67;
        }
        exception_type = tmp_raise_type_23;
        Py_INCREF(tmp_raise_type_23);
        exception_value = tmp_raise_value_23;
        exception_lineno = 1191;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_67;
    }
    branch_no_93:;
    goto branch_end_92;
    branch_no_92:;
    {
        PyObject *tmp_assign_source_209;
        tmp_assign_source_209 = PyDict_New();
        assert(tmp_class_creation_20__prepared == NULL);
        tmp_class_creation_20__prepared = tmp_assign_source_209;
    }
    branch_end_92:;
    {
        PyObject *tmp_assign_source_210;
        {
            PyObject *tmp_set_locals_23;
            CHECK_OBJECT(tmp_class_creation_20__prepared);
            tmp_set_locals_23 = tmp_class_creation_20__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191 = tmp_set_locals_23;
            Py_INCREF(tmp_set_locals_23);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1191;

            goto try_except_handler_69;
        }
        tmp_dictset_value = mod_consts[541];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1191;

            goto try_except_handler_69;
        }
        tmp_dictset_value = mod_consts[188];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1191;

            goto try_except_handler_69;
        }
        if (isFrameUnusable(cache_frame_271325c457b6cdc40b0289048d183222_24)) {
            Py_XDECREF(cache_frame_271325c457b6cdc40b0289048d183222_24);

#if _DEBUG_REFCOUNTS
            if (cache_frame_271325c457b6cdc40b0289048d183222_24 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_271325c457b6cdc40b0289048d183222_24 = MAKE_FUNCTION_FRAME(codeobj_271325c457b6cdc40b0289048d183222, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_271325c457b6cdc40b0289048d183222_24->m_type_description == NULL);
        frame_271325c457b6cdc40b0289048d183222_24 = cache_frame_271325c457b6cdc40b0289048d183222_24;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_271325c457b6cdc40b0289048d183222_24);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_271325c457b6cdc40b0289048d183222_24) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[542];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1268;
            type_description_2 = "o";
            goto frame_exception_exit_24;
        }
        {
            PyObject *tmp_called_value_70;
            PyObject *tmp_called_value_71;
            PyObject *tmp_expression_value_122;
            PyObject *tmp_args_element_value_29;
            tmp_expression_value_122 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[43]);

            if (tmp_expression_value_122 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_122 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_expression_value_122 == NULL)) {
                        tmp_expression_value_122 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
                    }

                    if (tmp_expression_value_122 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1270;
                        type_description_2 = "o";
                        goto frame_exception_exit_24;
                    }
                    Py_INCREF(tmp_expression_value_122);
                } else {
                    goto frame_exception_exit_24;
                }
            }

            tmp_called_value_71 = LOOKUP_ATTRIBUTE(tmp_expression_value_122, mod_consts[438]);
            Py_DECREF(tmp_expression_value_122);
            if (tmp_called_value_71 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1270;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            frame_271325c457b6cdc40b0289048d183222_24->m_frame.f_lineno = 1270;
            tmp_called_value_70 = CALL_FUNCTION_WITH_NO_ARGS_KWSPLIT(tmp_called_value_71, &PyTuple_GET_ITEM(mod_consts[543], 0), mod_consts[544]);
            Py_DECREF(tmp_called_value_71);
            if (tmp_called_value_70 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1270;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }


            tmp_args_element_value_29 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__66___init__();

            frame_271325c457b6cdc40b0289048d183222_24->m_frame.f_lineno = 1270;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_70, tmp_args_element_value_29);
            Py_DECREF(tmp_called_value_70);
            Py_DECREF(tmp_args_element_value_29);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1270;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[66], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1279;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
        }
        {
            nuitka_bool tmp_condition_result_151;
            PyObject *tmp_called_value_72;
            PyObject *tmp_args_element_value_30;
            PyObject *tmp_called_value_73;
            PyObject *tmp_args_element_value_31;
            tmp_res = MAPPING_HAS_ITEM(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[420]);

            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1385;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_condition_result_151 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_151 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_58;
            } else {
                goto condexpr_false_58;
            }
            condexpr_true_58:;
            tmp_called_value_72 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[420]);

            if (unlikely(tmp_called_value_72 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[420]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 1385;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }

            if (tmp_called_value_72 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1385;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }


            tmp_args_element_value_30 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__67__enums_argument();

            frame_271325c457b6cdc40b0289048d183222_24->m_frame.f_lineno = 1385;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_72, tmp_args_element_value_30);
            Py_DECREF(tmp_called_value_72);
            Py_DECREF(tmp_args_element_value_30);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1385;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            goto condexpr_end_58;
            condexpr_false_58:;
            tmp_called_value_73 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_31 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__67__enums_argument();

            frame_271325c457b6cdc40b0289048d183222_24->m_frame.f_lineno = 1385;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_73, tmp_args_element_value_31);
            Py_DECREF(tmp_args_element_value_31);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1385;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            condexpr_end_58:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[220], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1386;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__68__enum_init();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[165], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1392;
            type_description_2 = "o";
            goto frame_exception_exit_24;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__69__parse_into_values();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[178], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1455;
            type_description_2 = "o";
            goto frame_exception_exit_24;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__70__setup_for_values();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[180], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1472;
            type_description_2 = "o";
            goto frame_exception_exit_24;
        }
        {
            nuitka_bool tmp_condition_result_152;
            PyObject *tmp_called_value_74;
            PyObject *tmp_args_element_value_32;
            PyObject *tmp_called_value_75;
            PyObject *tmp_args_element_value_33;
            tmp_res = MAPPING_HAS_ITEM(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[420]);

            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1486;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_condition_result_152 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_152 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_59;
            } else {
                goto condexpr_false_59;
            }
            condexpr_true_59:;
            tmp_called_value_74 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[420]);

            if (unlikely(tmp_called_value_74 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[420]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 1486;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }

            if (tmp_called_value_74 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1486;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }


            tmp_args_element_value_32 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__71_sort_key_function();

            frame_271325c457b6cdc40b0289048d183222_24->m_frame.f_lineno = 1486;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_74, tmp_args_element_value_32);
            Py_DECREF(tmp_called_value_74);
            Py_DECREF(tmp_args_element_value_32);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1486;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            goto condexpr_end_59;
            condexpr_false_59:;
            tmp_called_value_75 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_33 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__71_sort_key_function();

            frame_271325c457b6cdc40b0289048d183222_24->m_frame.f_lineno = 1486;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_75, tmp_args_element_value_33);
            Py_DECREF(tmp_args_element_value_33);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1486;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            condexpr_end_59:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[175], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1487;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
        }
        {
            nuitka_bool tmp_condition_result_153;
            PyObject *tmp_called_value_76;
            PyObject *tmp_args_element_value_34;
            PyObject *tmp_called_value_77;
            PyObject *tmp_args_element_value_35;
            tmp_res = MAPPING_HAS_ITEM(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[420]);

            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1493;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_condition_result_153 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_153 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_60;
            } else {
                goto condexpr_false_60;
            }
            condexpr_true_60:;
            tmp_called_value_76 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[420]);

            if (unlikely(tmp_called_value_76 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[420]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 1493;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }

            if (tmp_called_value_76 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1493;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }


            tmp_args_element_value_34 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__72_native();

            frame_271325c457b6cdc40b0289048d183222_24->m_frame.f_lineno = 1493;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_76, tmp_args_element_value_34);
            Py_DECREF(tmp_called_value_76);
            Py_DECREF(tmp_args_element_value_34);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1493;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            goto condexpr_end_60;
            condexpr_false_60:;
            tmp_called_value_77 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_35 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__72_native();

            frame_271325c457b6cdc40b0289048d183222_24->m_frame.f_lineno = 1493;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_77, tmp_args_element_value_35);
            Py_DECREF(tmp_args_element_value_35);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1493;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            condexpr_end_60:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[266], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1494;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__73__db_value_for_elem();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[208], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1497;
            type_description_2 = "o";
            goto frame_exception_exit_24;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_211;
            PyObject *tmp_tuple_element_89;
            PyObject *tmp_expression_value_123;
            tmp_expression_value_123 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[215]);

            if (tmp_expression_value_123 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_123 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[215]);

                    if (unlikely(tmp_expression_value_123 == NULL)) {
                        tmp_expression_value_123 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[215]);
                    }

                    if (tmp_expression_value_123 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1527;
                        type_description_2 = "o";
                        goto try_except_handler_70;
                    }
                    Py_INCREF(tmp_expression_value_123);
                } else {
                    goto try_except_handler_70;
                }
            }

            tmp_tuple_element_89 = LOOKUP_ATTRIBUTE(tmp_expression_value_123, mod_consts[9]);
            Py_DECREF(tmp_expression_value_123);
            if (tmp_tuple_element_89 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1527;
                type_description_2 = "o";
                goto try_except_handler_70;
            }
            tmp_assign_source_211 = PyTuple_New(1);
            PyTuple_SET_ITEM(tmp_assign_source_211, 0, tmp_tuple_element_89);
            assert(tmp_Enum$class_creation_1__bases_orig == NULL);
            tmp_Enum$class_creation_1__bases_orig = tmp_assign_source_211;
        }
        {
            PyObject *tmp_assign_source_212;
            PyObject *tmp_dircall_arg1_24;
            CHECK_OBJECT(tmp_Enum$class_creation_1__bases_orig);
            tmp_dircall_arg1_24 = tmp_Enum$class_creation_1__bases_orig;
            Py_INCREF(tmp_dircall_arg1_24);

            {
                PyObject *dir_call_args[] = {tmp_dircall_arg1_24};
                tmp_assign_source_212 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
            }
            if (tmp_assign_source_212 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1527;
                type_description_2 = "o";
                goto try_except_handler_70;
            }
            assert(tmp_Enum$class_creation_1__bases == NULL);
            tmp_Enum$class_creation_1__bases = tmp_assign_source_212;
        }
        {
            PyObject *tmp_assign_source_213;
            tmp_assign_source_213 = PyDict_New();
            assert(tmp_Enum$class_creation_1__class_decl_dict == NULL);
            tmp_Enum$class_creation_1__class_decl_dict = tmp_assign_source_213;
        }
        {
            PyObject *tmp_assign_source_214;
            PyObject *tmp_metaclass_value_24;
            bool tmp_condition_result_154;
            PyObject *tmp_key_value_70;
            PyObject *tmp_dict_arg_value_70;
            PyObject *tmp_dict_arg_value_71;
            PyObject *tmp_key_value_71;
            nuitka_bool tmp_condition_result_155;
            int tmp_truth_name_26;
            PyObject *tmp_type_arg_47;
            PyObject *tmp_expression_value_124;
            PyObject *tmp_subscript_value_24;
            PyObject *tmp_bases_value_24;
            tmp_key_value_70 = mod_consts[410];
            CHECK_OBJECT(tmp_Enum$class_creation_1__class_decl_dict);
            tmp_dict_arg_value_70 = tmp_Enum$class_creation_1__class_decl_dict;
            tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_70, tmp_key_value_70);
            assert(!(tmp_res == -1));
            tmp_condition_result_154 = (tmp_res != 0) ? true : false;
            if (tmp_condition_result_154 != false) {
                goto condexpr_true_61;
            } else {
                goto condexpr_false_61;
            }
            condexpr_true_61:;
            CHECK_OBJECT(tmp_Enum$class_creation_1__class_decl_dict);
            tmp_dict_arg_value_71 = tmp_Enum$class_creation_1__class_decl_dict;
            tmp_key_value_71 = mod_consts[410];
            tmp_metaclass_value_24 = DICT_GET_ITEM0(tmp_dict_arg_value_71, tmp_key_value_71);
            if (tmp_metaclass_value_24 == NULL) {
                tmp_metaclass_value_24 = Py_None;
            }
            assert(!(tmp_metaclass_value_24 == NULL));
            Py_INCREF(tmp_metaclass_value_24);
            goto condexpr_end_61;
            condexpr_false_61:;
            CHECK_OBJECT(tmp_Enum$class_creation_1__bases);
            tmp_truth_name_26 = CHECK_IF_TRUE(tmp_Enum$class_creation_1__bases);
            if (tmp_truth_name_26 == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1527;
                type_description_2 = "o";
                goto try_except_handler_70;
            }
            tmp_condition_result_155 = tmp_truth_name_26 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
            if (tmp_condition_result_155 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_62;
            } else {
                goto condexpr_false_62;
            }
            condexpr_true_62:;
            CHECK_OBJECT(tmp_Enum$class_creation_1__bases);
            tmp_expression_value_124 = tmp_Enum$class_creation_1__bases;
            tmp_subscript_value_24 = mod_consts[52];
            tmp_type_arg_47 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_124, tmp_subscript_value_24, 0);
            if (tmp_type_arg_47 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1527;
                type_description_2 = "o";
                goto try_except_handler_70;
            }
            tmp_metaclass_value_24 = BUILTIN_TYPE1(tmp_type_arg_47);
            Py_DECREF(tmp_type_arg_47);
            if (tmp_metaclass_value_24 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1527;
                type_description_2 = "o";
                goto try_except_handler_70;
            }
            goto condexpr_end_62;
            condexpr_false_62:;
            tmp_metaclass_value_24 = (PyObject *)&PyType_Type;
            Py_INCREF(tmp_metaclass_value_24);
            condexpr_end_62:;
            condexpr_end_61:;
            CHECK_OBJECT(tmp_Enum$class_creation_1__bases);
            tmp_bases_value_24 = tmp_Enum$class_creation_1__bases;
            tmp_assign_source_214 = SELECT_METACLASS(tmp_metaclass_value_24, tmp_bases_value_24);
            Py_DECREF(tmp_metaclass_value_24);
            if (tmp_assign_source_214 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1527;
                type_description_2 = "o";
                goto try_except_handler_70;
            }
            assert(tmp_Enum$class_creation_1__metaclass == NULL);
            tmp_Enum$class_creation_1__metaclass = tmp_assign_source_214;
        }
        {
            bool tmp_condition_result_156;
            PyObject *tmp_key_value_72;
            PyObject *tmp_dict_arg_value_72;
            tmp_key_value_72 = mod_consts[410];
            CHECK_OBJECT(tmp_Enum$class_creation_1__class_decl_dict);
            tmp_dict_arg_value_72 = tmp_Enum$class_creation_1__class_decl_dict;
            tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_72, tmp_key_value_72);
            assert(!(tmp_res == -1));
            tmp_condition_result_156 = (tmp_res != 0) ? true : false;
            if (tmp_condition_result_156 != false) {
                goto branch_yes_94;
            } else {
                goto branch_no_94;
            }
        }
        branch_yes_94:;
        CHECK_OBJECT(tmp_Enum$class_creation_1__class_decl_dict);
        tmp_dictdel_dict = tmp_Enum$class_creation_1__class_decl_dict;
        tmp_dictdel_key = mod_consts[410];
        tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1527;
            type_description_2 = "o";
            goto try_except_handler_70;
        }
        branch_no_94:;
        {
            nuitka_bool tmp_condition_result_157;
            PyObject *tmp_expression_value_125;
            CHECK_OBJECT(tmp_Enum$class_creation_1__metaclass);
            tmp_expression_value_125 = tmp_Enum$class_creation_1__metaclass;
            tmp_result = HAS_ATTR_BOOL(tmp_expression_value_125, mod_consts[411]);
            tmp_condition_result_157 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_157 == NUITKA_BOOL_TRUE) {
                goto branch_yes_95;
            } else {
                goto branch_no_95;
            }
        }
        branch_yes_95:;
        {
            PyObject *tmp_assign_source_215;
            PyObject *tmp_called_value_78;
            PyObject *tmp_expression_value_126;
            PyObject *tmp_args_value_46;
            PyObject *tmp_tuple_element_90;
            PyObject *tmp_kwargs_value_46;
            CHECK_OBJECT(tmp_Enum$class_creation_1__metaclass);
            tmp_expression_value_126 = tmp_Enum$class_creation_1__metaclass;
            tmp_called_value_78 = LOOKUP_ATTRIBUTE(tmp_expression_value_126, mod_consts[411]);
            if (tmp_called_value_78 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1527;
                type_description_2 = "o";
                goto try_except_handler_70;
            }
            tmp_tuple_element_90 = mod_consts[9];
            tmp_args_value_46 = PyTuple_New(2);
            PyTuple_SET_ITEM0(tmp_args_value_46, 0, tmp_tuple_element_90);
            CHECK_OBJECT(tmp_Enum$class_creation_1__bases);
            tmp_tuple_element_90 = tmp_Enum$class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_46, 1, tmp_tuple_element_90);
            CHECK_OBJECT(tmp_Enum$class_creation_1__class_decl_dict);
            tmp_kwargs_value_46 = tmp_Enum$class_creation_1__class_decl_dict;
            frame_271325c457b6cdc40b0289048d183222_24->m_frame.f_lineno = 1527;
            tmp_assign_source_215 = CALL_FUNCTION(tmp_called_value_78, tmp_args_value_46, tmp_kwargs_value_46);
            Py_DECREF(tmp_called_value_78);
            Py_DECREF(tmp_args_value_46);
            if (tmp_assign_source_215 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1527;
                type_description_2 = "o";
                goto try_except_handler_70;
            }
            assert(tmp_Enum$class_creation_1__prepared == NULL);
            tmp_Enum$class_creation_1__prepared = tmp_assign_source_215;
        }
        {
            bool tmp_condition_result_158;
            PyObject *tmp_operand_value_24;
            PyObject *tmp_expression_value_127;
            CHECK_OBJECT(tmp_Enum$class_creation_1__prepared);
            tmp_expression_value_127 = tmp_Enum$class_creation_1__prepared;
            tmp_result = HAS_ATTR_BOOL(tmp_expression_value_127, mod_consts[413]);
            tmp_operand_value_24 = (tmp_result) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE(tmp_operand_value_24);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1527;
                type_description_2 = "o";
                goto try_except_handler_70;
            }
            tmp_condition_result_158 = (tmp_res == 0) ? true : false;
            if (tmp_condition_result_158 != false) {
                goto branch_yes_96;
            } else {
                goto branch_no_96;
            }
        }
        branch_yes_96:;
        {
            PyObject *tmp_raise_type_24;
            PyObject *tmp_raise_value_24;
            PyObject *tmp_left_value_24;
            PyObject *tmp_right_value_24;
            PyObject *tmp_tuple_element_91;
            PyObject *tmp_getattr_target_24;
            PyObject *tmp_getattr_attr_24;
            PyObject *tmp_getattr_default_24;
            tmp_raise_type_24 = PyExc_TypeError;
            tmp_left_value_24 = mod_consts[414];
            CHECK_OBJECT(tmp_Enum$class_creation_1__metaclass);
            tmp_getattr_target_24 = tmp_Enum$class_creation_1__metaclass;
            tmp_getattr_attr_24 = mod_consts[190];
            tmp_getattr_default_24 = mod_consts[415];
            tmp_tuple_element_91 = BUILTIN_GETATTR(tmp_getattr_target_24, tmp_getattr_attr_24, tmp_getattr_default_24);
            if (tmp_tuple_element_91 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1527;
                type_description_2 = "o";
                goto try_except_handler_70;
            }
            tmp_right_value_24 = PyTuple_New(2);
            {
                PyObject *tmp_expression_value_128;
                PyObject *tmp_type_arg_48;
                PyTuple_SET_ITEM(tmp_right_value_24, 0, tmp_tuple_element_91);
                CHECK_OBJECT(tmp_Enum$class_creation_1__prepared);
                tmp_type_arg_48 = tmp_Enum$class_creation_1__prepared;
                tmp_expression_value_128 = BUILTIN_TYPE1(tmp_type_arg_48);
                assert(!(tmp_expression_value_128 == NULL));
                tmp_tuple_element_91 = LOOKUP_ATTRIBUTE(tmp_expression_value_128, mod_consts[190]);
                Py_DECREF(tmp_expression_value_128);
                if (tmp_tuple_element_91 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1527;
                    type_description_2 = "o";
                    goto tuple_build_exception_31;
                }
                PyTuple_SET_ITEM(tmp_right_value_24, 1, tmp_tuple_element_91);
            }
            goto tuple_build_noexception_31;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_31:;
            Py_DECREF(tmp_right_value_24);
            goto try_except_handler_70;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_31:;
            tmp_raise_value_24 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_24, tmp_right_value_24);
            Py_DECREF(tmp_right_value_24);
            if (tmp_raise_value_24 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1527;
                type_description_2 = "o";
                goto try_except_handler_70;
            }
            exception_type = tmp_raise_type_24;
            Py_INCREF(tmp_raise_type_24);
            exception_value = tmp_raise_value_24;
            exception_lineno = 1527;
            RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);
            type_description_2 = "o";
            goto try_except_handler_70;
        }
        branch_no_96:;
        goto branch_end_95;
        branch_no_95:;
        {
            PyObject *tmp_assign_source_216;
            tmp_assign_source_216 = PyDict_New();
            assert(tmp_Enum$class_creation_1__prepared == NULL);
            tmp_Enum$class_creation_1__prepared = tmp_assign_source_216;
        }
        branch_end_95:;
        {
            PyObject *tmp_set_locals_24;
            CHECK_OBJECT(tmp_Enum$class_creation_1__prepared);
            tmp_set_locals_24 = tmp_Enum$class_creation_1__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__24_Comparator_1527 = tmp_set_locals_24;
            Py_INCREF(tmp_set_locals_24);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__24_Comparator_1527, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1527;
            type_description_2 = "o";
            goto try_except_handler_72;
        }
        tmp_dictset_value = mod_consts[553];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__24_Comparator_1527, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1527;
            type_description_2 = "o";
            goto try_except_handler_72;
        }
        if (isFrameUnusable(cache_frame_47df8abc3d23b00fcd91fa61a0194987_25)) {
            Py_XDECREF(cache_frame_47df8abc3d23b00fcd91fa61a0194987_25);

#if _DEBUG_REFCOUNTS
            if (cache_frame_47df8abc3d23b00fcd91fa61a0194987_25 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_47df8abc3d23b00fcd91fa61a0194987_25 = MAKE_FUNCTION_FRAME(codeobj_47df8abc3d23b00fcd91fa61a0194987, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_47df8abc3d23b00fcd91fa61a0194987_25->m_type_description == NULL);
        frame_47df8abc3d23b00fcd91fa61a0194987_25 = cache_frame_47df8abc3d23b00fcd91fa61a0194987_25;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_47df8abc3d23b00fcd91fa61a0194987_25);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_47df8abc3d23b00fcd91fa61a0194987_25) == 2); // Frame stack

        // Framed code:


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__74__adapt_expression();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__24_Comparator_1527, mod_consts[13], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1528;
            type_description_3 = "o";
            goto frame_exception_exit_25;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_47df8abc3d23b00fcd91fa61a0194987_25);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_23;

        frame_exception_exit_25:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_47df8abc3d23b00fcd91fa61a0194987_25);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_47df8abc3d23b00fcd91fa61a0194987_25, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_47df8abc3d23b00fcd91fa61a0194987_25->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_47df8abc3d23b00fcd91fa61a0194987_25, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_47df8abc3d23b00fcd91fa61a0194987_25,
            type_description_3,
            outline_23_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_47df8abc3d23b00fcd91fa61a0194987_25 == cache_frame_47df8abc3d23b00fcd91fa61a0194987_25) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_47df8abc3d23b00fcd91fa61a0194987_25);
            cache_frame_47df8abc3d23b00fcd91fa61a0194987_25 = NULL;
        }

        assertFrameObject(frame_47df8abc3d23b00fcd91fa61a0194987_25);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_24;

        frame_no_exception_23:;
        goto skip_nested_handling_23;
        nested_frame_exit_24:;
        type_description_2 = "o";
        goto try_except_handler_72;
        skip_nested_handling_23:;
        {
            nuitka_bool tmp_condition_result_159;
            PyObject *tmp_cmp_expr_left_23;
            PyObject *tmp_cmp_expr_right_23;
            CHECK_OBJECT(tmp_Enum$class_creation_1__bases);
            tmp_cmp_expr_left_23 = tmp_Enum$class_creation_1__bases;
            CHECK_OBJECT(tmp_Enum$class_creation_1__bases_orig);
            tmp_cmp_expr_right_23 = tmp_Enum$class_creation_1__bases_orig;
            tmp_condition_result_159 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_23, tmp_cmp_expr_right_23);
            if (tmp_condition_result_159 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1527;
                type_description_2 = "o";
                goto try_except_handler_72;
            }
            if (tmp_condition_result_159 == NUITKA_BOOL_TRUE) {
                goto branch_yes_97;
            } else {
                goto branch_no_97;
            }
            assert(tmp_condition_result_159 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_97:;
        CHECK_OBJECT(tmp_Enum$class_creation_1__bases_orig);
        tmp_dictset_value = tmp_Enum$class_creation_1__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__24_Comparator_1527, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1527;
            type_description_2 = "o";
            goto try_except_handler_72;
        }
        branch_no_97:;
        {
            PyObject *tmp_assign_source_217;
            PyObject *tmp_called_value_79;
            PyObject *tmp_args_value_47;
            PyObject *tmp_tuple_element_92;
            PyObject *tmp_kwargs_value_47;
            CHECK_OBJECT(tmp_Enum$class_creation_1__metaclass);
            tmp_called_value_79 = tmp_Enum$class_creation_1__metaclass;
            tmp_tuple_element_92 = mod_consts[9];
            tmp_args_value_47 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_47, 0, tmp_tuple_element_92);
            CHECK_OBJECT(tmp_Enum$class_creation_1__bases);
            tmp_tuple_element_92 = tmp_Enum$class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_47, 1, tmp_tuple_element_92);
            tmp_tuple_element_92 = locals_sqlalchemy$sql$sqltypes$$$class__24_Comparator_1527;
            PyTuple_SET_ITEM0(tmp_args_value_47, 2, tmp_tuple_element_92);
            CHECK_OBJECT(tmp_Enum$class_creation_1__class_decl_dict);
            tmp_kwargs_value_47 = tmp_Enum$class_creation_1__class_decl_dict;
            frame_271325c457b6cdc40b0289048d183222_24->m_frame.f_lineno = 1527;
            tmp_assign_source_217 = CALL_FUNCTION(tmp_called_value_79, tmp_args_value_47, tmp_kwargs_value_47);
            Py_DECREF(tmp_args_value_47);
            if (tmp_assign_source_217 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1527;
                type_description_2 = "o";
                goto try_except_handler_72;
            }
            assert(outline_23_var___class__ == NULL);
            outline_23_var___class__ = tmp_assign_source_217;
        }
        CHECK_OBJECT(outline_23_var___class__);
        tmp_dictset_value = outline_23_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_72;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_72:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__24_Comparator_1527);
        locals_sqlalchemy$sql$sqltypes$$$class__24_Comparator_1527 = NULL;
        goto try_return_handler_71;
        // Exception handler code:
        try_except_handler_72:;
        exception_keeper_type_67 = exception_type;
        exception_keeper_value_67 = exception_value;
        exception_keeper_tb_67 = exception_tb;
        exception_keeper_lineno_67 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__24_Comparator_1527);
        locals_sqlalchemy$sql$sqltypes$$$class__24_Comparator_1527 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_67;
        exception_value = exception_keeper_value_67;
        exception_tb = exception_keeper_tb_67;
        exception_lineno = exception_keeper_lineno_67;

        goto try_except_handler_71;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_71:;
        CHECK_OBJECT(outline_23_var___class__);
        Py_DECREF(outline_23_var___class__);
        outline_23_var___class__ = NULL;
        goto outline_result_24;
        // Exception handler code:
        try_except_handler_71:;
        exception_keeper_type_68 = exception_type;
        exception_keeper_value_68 = exception_value;
        exception_keeper_tb_68 = exception_tb;
        exception_keeper_lineno_68 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_68;
        exception_value = exception_keeper_value_68;
        exception_tb = exception_keeper_tb_68;
        exception_lineno = exception_keeper_lineno_68;

        goto outline_exception_24;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_24:;
        exception_lineno = 1527;
        goto try_except_handler_70;
        outline_result_24:;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[9], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1527;
            type_description_2 = "o";
            goto try_except_handler_70;
        }
        goto try_end_23;
        // Exception handler code:
        try_except_handler_70:;
        exception_keeper_type_69 = exception_type;
        exception_keeper_value_69 = exception_value;
        exception_keeper_tb_69 = exception_tb;
        exception_keeper_lineno_69 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_Enum$class_creation_1__bases_orig);
        tmp_Enum$class_creation_1__bases_orig = NULL;
        Py_XDECREF(tmp_Enum$class_creation_1__bases);
        tmp_Enum$class_creation_1__bases = NULL;
        Py_XDECREF(tmp_Enum$class_creation_1__class_decl_dict);
        tmp_Enum$class_creation_1__class_decl_dict = NULL;
        Py_XDECREF(tmp_Enum$class_creation_1__metaclass);
        tmp_Enum$class_creation_1__metaclass = NULL;
        Py_XDECREF(tmp_Enum$class_creation_1__prepared);
        tmp_Enum$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_69;
        exception_value = exception_keeper_value_69;
        exception_tb = exception_keeper_tb_69;
        exception_lineno = exception_keeper_lineno_69;

        goto frame_exception_exit_24;
        // End of try:
        try_end_23:;
        CHECK_OBJECT(tmp_Enum$class_creation_1__bases_orig);
        Py_DECREF(tmp_Enum$class_creation_1__bases_orig);
        tmp_Enum$class_creation_1__bases_orig = NULL;
        CHECK_OBJECT(tmp_Enum$class_creation_1__bases);
        Py_DECREF(tmp_Enum$class_creation_1__bases);
        tmp_Enum$class_creation_1__bases = NULL;
        CHECK_OBJECT(tmp_Enum$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_Enum$class_creation_1__class_decl_dict);
        tmp_Enum$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_Enum$class_creation_1__metaclass);
        Py_DECREF(tmp_Enum$class_creation_1__metaclass);
        tmp_Enum$class_creation_1__metaclass = NULL;
        CHECK_OBJECT(tmp_Enum$class_creation_1__prepared);
        Py_DECREF(tmp_Enum$class_creation_1__prepared);
        tmp_Enum$class_creation_1__prepared = NULL;
        tmp_dictset_value = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[9]);

        if (unlikely(tmp_dictset_value == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

            FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[9]);
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1538;
            type_description_2 = "o";
            goto frame_exception_exit_24;
        }

        if (tmp_dictset_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1538;
            type_description_2 = "o";
            goto frame_exception_exit_24;
        }
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[426], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1538;
            type_description_2 = "o";
            goto frame_exception_exit_24;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__75__object_value_for_elem();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[235], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1540;
            type_description_2 = "o";
            goto frame_exception_exit_24;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__76___repr__();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[556], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1557;
            type_description_2 = "o";
            goto frame_exception_exit_24;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__77_adapt_to_emulated();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[558], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1564;
            type_description_2 = "o";
            goto frame_exception_exit_24;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__78_adapt();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[150], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1579;
            type_description_2 = "o";
            goto frame_exception_exit_24;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__79__should_create_constraint();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[226], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1583;
            type_description_2 = "o";
            goto frame_exception_exit_24;
        }
        {
            PyObject *tmp_called_value_80;
            PyObject *tmp_called_instance_8;
            PyObject *tmp_args_element_value_36;
            tmp_called_instance_8 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[43]);

            if (tmp_called_instance_8 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_8 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_called_instance_8 == NULL)) {
                        tmp_called_instance_8 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
                    }

                    if (tmp_called_instance_8 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1590;
                        type_description_2 = "o";
                        goto frame_exception_exit_24;
                    }
                    Py_INCREF(tmp_called_instance_8);
                } else {
                    goto frame_exception_exit_24;
                }
            }

            frame_271325c457b6cdc40b0289048d183222_24->m_frame.f_lineno = 1590;
            tmp_called_value_80 = CALL_METHOD_WITH_SINGLE_ARG(
                tmp_called_instance_8,
                mod_consts[562],
                PyTuple_GET_ITEM(mod_consts[563], 0)
            );

            Py_DECREF(tmp_called_instance_8);
            if (tmp_called_value_80 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1590;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }


            tmp_args_element_value_36 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__80__set_table();

            frame_271325c457b6cdc40b0289048d183222_24->m_frame.f_lineno = 1590;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_80, tmp_args_element_value_36);
            Py_DECREF(tmp_called_value_80);
            Py_DECREF(tmp_args_element_value_36);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1590;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[139], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1591;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__81_literal_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[228], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1610;
            type_description_2 = "o";
            goto frame_exception_exit_24;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__82_bind_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[232], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1621;
            type_description_2 = "o";
            goto frame_exception_exit_24;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__83_result_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[233], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1631;
            type_description_2 = "o";
            goto frame_exception_exit_24;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__84_copy();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[142], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1643;
            type_description_2 = "o";
            goto frame_exception_exit_24;
        }
        {
            nuitka_bool tmp_condition_result_160;
            PyObject *tmp_called_value_81;
            PyObject *tmp_args_element_value_37;
            PyObject *tmp_called_value_82;
            PyObject *tmp_args_element_value_38;
            tmp_res = MAPPING_HAS_ITEM(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[420]);

            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1646;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            tmp_condition_result_160 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_160 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_63;
            } else {
                goto condexpr_false_63;
            }
            condexpr_true_63:;
            tmp_called_value_81 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[420]);

            if (unlikely(tmp_called_value_81 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[420]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 1646;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }

            if (tmp_called_value_81 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1646;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }


            tmp_args_element_value_37 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__85_python_type();

            frame_271325c457b6cdc40b0289048d183222_24->m_frame.f_lineno = 1646;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_81, tmp_args_element_value_37);
            Py_DECREF(tmp_called_value_81);
            Py_DECREF(tmp_args_element_value_37);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1646;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            goto condexpr_end_63;
            condexpr_false_63:;
            tmp_called_value_82 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_38 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__85_python_type();

            frame_271325c457b6cdc40b0289048d183222_24->m_frame.f_lineno = 1646;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_82, tmp_args_element_value_38);
            Py_DECREF(tmp_args_element_value_38);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1646;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
            condexpr_end_63:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[236], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1647;
                type_description_2 = "o";
                goto frame_exception_exit_24;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_271325c457b6cdc40b0289048d183222_24);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_24;

        frame_exception_exit_24:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_271325c457b6cdc40b0289048d183222_24);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_271325c457b6cdc40b0289048d183222_24, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_271325c457b6cdc40b0289048d183222_24->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_271325c457b6cdc40b0289048d183222_24, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_271325c457b6cdc40b0289048d183222_24,
            type_description_2,
            outline_22_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_271325c457b6cdc40b0289048d183222_24 == cache_frame_271325c457b6cdc40b0289048d183222_24) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_271325c457b6cdc40b0289048d183222_24);
            cache_frame_271325c457b6cdc40b0289048d183222_24 = NULL;
        }

        assertFrameObject(frame_271325c457b6cdc40b0289048d183222_24);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_23;

        frame_no_exception_24:;
        goto skip_nested_handling_24;
        nested_frame_exit_23:;

        goto try_except_handler_69;
        skip_nested_handling_24:;
        {
            nuitka_bool tmp_condition_result_161;
            PyObject *tmp_cmp_expr_left_24;
            PyObject *tmp_cmp_expr_right_24;
            CHECK_OBJECT(tmp_class_creation_20__bases);
            tmp_cmp_expr_left_24 = tmp_class_creation_20__bases;
            CHECK_OBJECT(tmp_class_creation_20__bases_orig);
            tmp_cmp_expr_right_24 = tmp_class_creation_20__bases_orig;
            tmp_condition_result_161 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_24, tmp_cmp_expr_right_24);
            if (tmp_condition_result_161 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1191;

                goto try_except_handler_69;
            }
            if (tmp_condition_result_161 == NUITKA_BOOL_TRUE) {
                goto branch_yes_98;
            } else {
                goto branch_no_98;
            }
            assert(tmp_condition_result_161 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_98:;
        CHECK_OBJECT(tmp_class_creation_20__bases_orig);
        tmp_dictset_value = tmp_class_creation_20__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1191;

            goto try_except_handler_69;
        }
        branch_no_98:;
        {
            PyObject *tmp_assign_source_218;
            PyObject *tmp_called_value_83;
            PyObject *tmp_args_value_48;
            PyObject *tmp_tuple_element_93;
            PyObject *tmp_kwargs_value_48;
            CHECK_OBJECT(tmp_class_creation_20__metaclass);
            tmp_called_value_83 = tmp_class_creation_20__metaclass;
            tmp_tuple_element_93 = mod_consts[188];
            tmp_args_value_48 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_48, 0, tmp_tuple_element_93);
            CHECK_OBJECT(tmp_class_creation_20__bases);
            tmp_tuple_element_93 = tmp_class_creation_20__bases;
            PyTuple_SET_ITEM0(tmp_args_value_48, 1, tmp_tuple_element_93);
            tmp_tuple_element_93 = locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191;
            PyTuple_SET_ITEM0(tmp_args_value_48, 2, tmp_tuple_element_93);
            CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
            tmp_kwargs_value_48 = tmp_class_creation_20__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 1191;
            tmp_assign_source_218 = CALL_FUNCTION(tmp_called_value_83, tmp_args_value_48, tmp_kwargs_value_48);
            Py_DECREF(tmp_args_value_48);
            if (tmp_assign_source_218 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1191;

                goto try_except_handler_69;
            }
            assert(outline_22_var___class__ == NULL);
            outline_22_var___class__ = tmp_assign_source_218;
        }
        CHECK_OBJECT(outline_22_var___class__);
        tmp_assign_source_210 = outline_22_var___class__;
        Py_INCREF(tmp_assign_source_210);
        goto try_return_handler_69;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_69:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191);
        locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191 = NULL;
        goto try_return_handler_68;
        // Exception handler code:
        try_except_handler_69:;
        exception_keeper_type_70 = exception_type;
        exception_keeper_value_70 = exception_value;
        exception_keeper_tb_70 = exception_tb;
        exception_keeper_lineno_70 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191);
        locals_sqlalchemy$sql$sqltypes$$$class__23_Enum_1191 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_70;
        exception_value = exception_keeper_value_70;
        exception_tb = exception_keeper_tb_70;
        exception_lineno = exception_keeper_lineno_70;

        goto try_except_handler_68;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_68:;
        CHECK_OBJECT(outline_22_var___class__);
        Py_DECREF(outline_22_var___class__);
        outline_22_var___class__ = NULL;
        goto outline_result_23;
        // Exception handler code:
        try_except_handler_68:;
        exception_keeper_type_71 = exception_type;
        exception_keeper_value_71 = exception_value;
        exception_keeper_tb_71 = exception_tb;
        exception_keeper_lineno_71 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_71;
        exception_value = exception_keeper_value_71;
        exception_tb = exception_keeper_tb_71;
        exception_lineno = exception_keeper_lineno_71;

        goto outline_exception_23;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_23:;
        exception_lineno = 1191;
        goto try_except_handler_67;
        outline_result_23:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[188], tmp_assign_source_210);
    }
    goto try_end_24;
    // Exception handler code:
    try_except_handler_67:;
    exception_keeper_type_72 = exception_type;
    exception_keeper_value_72 = exception_value;
    exception_keeper_tb_72 = exception_tb;
    exception_keeper_lineno_72 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_20__bases_orig);
    tmp_class_creation_20__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_20__bases);
    tmp_class_creation_20__bases = NULL;
    Py_XDECREF(tmp_class_creation_20__class_decl_dict);
    tmp_class_creation_20__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_20__metaclass);
    tmp_class_creation_20__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_20__prepared);
    tmp_class_creation_20__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_72;
    exception_value = exception_keeper_value_72;
    exception_tb = exception_keeper_tb_72;
    exception_lineno = exception_keeper_lineno_72;

    goto frame_exception_exit_1;
    // End of try:
    try_end_24:;
    CHECK_OBJECT(tmp_class_creation_20__bases_orig);
    Py_DECREF(tmp_class_creation_20__bases_orig);
    tmp_class_creation_20__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_20__bases);
    Py_DECREF(tmp_class_creation_20__bases);
    tmp_class_creation_20__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
    Py_DECREF(tmp_class_creation_20__class_decl_dict);
    tmp_class_creation_20__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_20__metaclass);
    Py_DECREF(tmp_class_creation_20__metaclass);
    tmp_class_creation_20__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_20__prepared);
    Py_DECREF(tmp_class_creation_20__prepared);
    tmp_class_creation_20__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_219;
        PyObject *tmp_tuple_element_94;
        tmp_tuple_element_94 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[396]);

        if (unlikely(tmp_tuple_element_94 == NULL)) {
            tmp_tuple_element_94 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[396]);
        }

        if (tmp_tuple_element_94 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1654;

            goto try_except_handler_73;
        }
        tmp_assign_source_219 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_219, 0, tmp_tuple_element_94);
        assert(tmp_class_creation_21__bases_orig == NULL);
        tmp_class_creation_21__bases_orig = tmp_assign_source_219;
    }
    {
        PyObject *tmp_assign_source_220;
        PyObject *tmp_dircall_arg1_25;
        CHECK_OBJECT(tmp_class_creation_21__bases_orig);
        tmp_dircall_arg1_25 = tmp_class_creation_21__bases_orig;
        Py_INCREF(tmp_dircall_arg1_25);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_25};
            tmp_assign_source_220 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_220 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1654;

            goto try_except_handler_73;
        }
        assert(tmp_class_creation_21__bases == NULL);
        tmp_class_creation_21__bases = tmp_assign_source_220;
    }
    {
        PyObject *tmp_assign_source_221;
        tmp_assign_source_221 = PyDict_New();
        assert(tmp_class_creation_21__class_decl_dict == NULL);
        tmp_class_creation_21__class_decl_dict = tmp_assign_source_221;
    }
    {
        PyObject *tmp_assign_source_222;
        PyObject *tmp_metaclass_value_25;
        bool tmp_condition_result_162;
        PyObject *tmp_key_value_73;
        PyObject *tmp_dict_arg_value_73;
        PyObject *tmp_dict_arg_value_74;
        PyObject *tmp_key_value_74;
        nuitka_bool tmp_condition_result_163;
        int tmp_truth_name_27;
        PyObject *tmp_type_arg_49;
        PyObject *tmp_expression_value_129;
        PyObject *tmp_subscript_value_25;
        PyObject *tmp_bases_value_25;
        tmp_key_value_73 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
        tmp_dict_arg_value_73 = tmp_class_creation_21__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_73, tmp_key_value_73);
        assert(!(tmp_res == -1));
        tmp_condition_result_162 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_162 != false) {
            goto condexpr_true_64;
        } else {
            goto condexpr_false_64;
        }
        condexpr_true_64:;
        CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
        tmp_dict_arg_value_74 = tmp_class_creation_21__class_decl_dict;
        tmp_key_value_74 = mod_consts[410];
        tmp_metaclass_value_25 = DICT_GET_ITEM0(tmp_dict_arg_value_74, tmp_key_value_74);
        if (tmp_metaclass_value_25 == NULL) {
            tmp_metaclass_value_25 = Py_None;
        }
        assert(!(tmp_metaclass_value_25 == NULL));
        Py_INCREF(tmp_metaclass_value_25);
        goto condexpr_end_64;
        condexpr_false_64:;
        CHECK_OBJECT(tmp_class_creation_21__bases);
        tmp_truth_name_27 = CHECK_IF_TRUE(tmp_class_creation_21__bases);
        if (tmp_truth_name_27 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1654;

            goto try_except_handler_73;
        }
        tmp_condition_result_163 = tmp_truth_name_27 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_163 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_65;
        } else {
            goto condexpr_false_65;
        }
        condexpr_true_65:;
        CHECK_OBJECT(tmp_class_creation_21__bases);
        tmp_expression_value_129 = tmp_class_creation_21__bases;
        tmp_subscript_value_25 = mod_consts[52];
        tmp_type_arg_49 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_129, tmp_subscript_value_25, 0);
        if (tmp_type_arg_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1654;

            goto try_except_handler_73;
        }
        tmp_metaclass_value_25 = BUILTIN_TYPE1(tmp_type_arg_49);
        Py_DECREF(tmp_type_arg_49);
        if (tmp_metaclass_value_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1654;

            goto try_except_handler_73;
        }
        goto condexpr_end_65;
        condexpr_false_65:;
        tmp_metaclass_value_25 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_25);
        condexpr_end_65:;
        condexpr_end_64:;
        CHECK_OBJECT(tmp_class_creation_21__bases);
        tmp_bases_value_25 = tmp_class_creation_21__bases;
        tmp_assign_source_222 = SELECT_METACLASS(tmp_metaclass_value_25, tmp_bases_value_25);
        Py_DECREF(tmp_metaclass_value_25);
        if (tmp_assign_source_222 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1654;

            goto try_except_handler_73;
        }
        assert(tmp_class_creation_21__metaclass == NULL);
        tmp_class_creation_21__metaclass = tmp_assign_source_222;
    }
    {
        bool tmp_condition_result_164;
        PyObject *tmp_key_value_75;
        PyObject *tmp_dict_arg_value_75;
        tmp_key_value_75 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
        tmp_dict_arg_value_75 = tmp_class_creation_21__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_75, tmp_key_value_75);
        assert(!(tmp_res == -1));
        tmp_condition_result_164 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_164 != false) {
            goto branch_yes_99;
        } else {
            goto branch_no_99;
        }
    }
    branch_yes_99:;
    CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_21__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1654;

        goto try_except_handler_73;
    }
    branch_no_99:;
    {
        nuitka_bool tmp_condition_result_165;
        PyObject *tmp_expression_value_130;
        CHECK_OBJECT(tmp_class_creation_21__metaclass);
        tmp_expression_value_130 = tmp_class_creation_21__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_130, mod_consts[411]);
        tmp_condition_result_165 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_165 == NUITKA_BOOL_TRUE) {
            goto branch_yes_100;
        } else {
            goto branch_no_100;
        }
    }
    branch_yes_100:;
    {
        PyObject *tmp_assign_source_223;
        PyObject *tmp_called_value_84;
        PyObject *tmp_expression_value_131;
        PyObject *tmp_args_value_49;
        PyObject *tmp_tuple_element_95;
        PyObject *tmp_kwargs_value_49;
        CHECK_OBJECT(tmp_class_creation_21__metaclass);
        tmp_expression_value_131 = tmp_class_creation_21__metaclass;
        tmp_called_value_84 = LOOKUP_ATTRIBUTE(tmp_expression_value_131, mod_consts[411]);
        if (tmp_called_value_84 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1654;

            goto try_except_handler_73;
        }
        tmp_tuple_element_95 = mod_consts[241];
        tmp_args_value_49 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_49, 0, tmp_tuple_element_95);
        CHECK_OBJECT(tmp_class_creation_21__bases);
        tmp_tuple_element_95 = tmp_class_creation_21__bases;
        PyTuple_SET_ITEM0(tmp_args_value_49, 1, tmp_tuple_element_95);
        CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
        tmp_kwargs_value_49 = tmp_class_creation_21__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 1654;
        tmp_assign_source_223 = CALL_FUNCTION(tmp_called_value_84, tmp_args_value_49, tmp_kwargs_value_49);
        Py_DECREF(tmp_called_value_84);
        Py_DECREF(tmp_args_value_49);
        if (tmp_assign_source_223 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1654;

            goto try_except_handler_73;
        }
        assert(tmp_class_creation_21__prepared == NULL);
        tmp_class_creation_21__prepared = tmp_assign_source_223;
    }
    {
        bool tmp_condition_result_166;
        PyObject *tmp_operand_value_25;
        PyObject *tmp_expression_value_132;
        CHECK_OBJECT(tmp_class_creation_21__prepared);
        tmp_expression_value_132 = tmp_class_creation_21__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_132, mod_consts[413]);
        tmp_operand_value_25 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_25);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1654;

            goto try_except_handler_73;
        }
        tmp_condition_result_166 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_166 != false) {
            goto branch_yes_101;
        } else {
            goto branch_no_101;
        }
    }
    branch_yes_101:;
    {
        PyObject *tmp_raise_type_25;
        PyObject *tmp_raise_value_25;
        PyObject *tmp_left_value_25;
        PyObject *tmp_right_value_25;
        PyObject *tmp_tuple_element_96;
        PyObject *tmp_getattr_target_25;
        PyObject *tmp_getattr_attr_25;
        PyObject *tmp_getattr_default_25;
        tmp_raise_type_25 = PyExc_TypeError;
        tmp_left_value_25 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_21__metaclass);
        tmp_getattr_target_25 = tmp_class_creation_21__metaclass;
        tmp_getattr_attr_25 = mod_consts[190];
        tmp_getattr_default_25 = mod_consts[415];
        tmp_tuple_element_96 = BUILTIN_GETATTR(tmp_getattr_target_25, tmp_getattr_attr_25, tmp_getattr_default_25);
        if (tmp_tuple_element_96 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1654;

            goto try_except_handler_73;
        }
        tmp_right_value_25 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_133;
            PyObject *tmp_type_arg_50;
            PyTuple_SET_ITEM(tmp_right_value_25, 0, tmp_tuple_element_96);
            CHECK_OBJECT(tmp_class_creation_21__prepared);
            tmp_type_arg_50 = tmp_class_creation_21__prepared;
            tmp_expression_value_133 = BUILTIN_TYPE1(tmp_type_arg_50);
            assert(!(tmp_expression_value_133 == NULL));
            tmp_tuple_element_96 = LOOKUP_ATTRIBUTE(tmp_expression_value_133, mod_consts[190]);
            Py_DECREF(tmp_expression_value_133);
            if (tmp_tuple_element_96 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1654;

                goto tuple_build_exception_32;
            }
            PyTuple_SET_ITEM(tmp_right_value_25, 1, tmp_tuple_element_96);
        }
        goto tuple_build_noexception_32;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_32:;
        Py_DECREF(tmp_right_value_25);
        goto try_except_handler_73;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_32:;
        tmp_raise_value_25 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_25, tmp_right_value_25);
        Py_DECREF(tmp_right_value_25);
        if (tmp_raise_value_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1654;

            goto try_except_handler_73;
        }
        exception_type = tmp_raise_type_25;
        Py_INCREF(tmp_raise_type_25);
        exception_value = tmp_raise_value_25;
        exception_lineno = 1654;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_73;
    }
    branch_no_101:;
    goto branch_end_100;
    branch_no_100:;
    {
        PyObject *tmp_assign_source_224;
        tmp_assign_source_224 = PyDict_New();
        assert(tmp_class_creation_21__prepared == NULL);
        tmp_class_creation_21__prepared = tmp_assign_source_224;
    }
    branch_end_100:;
    {
        PyObject *tmp_assign_source_225;
        {
            PyObject *tmp_set_locals_25;
            CHECK_OBJECT(tmp_class_creation_21__prepared);
            tmp_set_locals_25 = tmp_class_creation_21__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__25_PickleType_1654 = tmp_set_locals_25;
            Py_INCREF(tmp_set_locals_25);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__25_PickleType_1654, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1654;

            goto try_except_handler_75;
        }
        tmp_dictset_value = mod_consts[570];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__25_PickleType_1654, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1654;

            goto try_except_handler_75;
        }
        tmp_dictset_value = mod_consts[241];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__25_PickleType_1654, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1654;

            goto try_except_handler_75;
        }
        if (isFrameUnusable(cache_frame_9444700615de766c07ab9b2e36f34908_26)) {
            Py_XDECREF(cache_frame_9444700615de766c07ab9b2e36f34908_26);

#if _DEBUG_REFCOUNTS
            if (cache_frame_9444700615de766c07ab9b2e36f34908_26 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_9444700615de766c07ab9b2e36f34908_26 = MAKE_FUNCTION_FRAME(codeobj_9444700615de766c07ab9b2e36f34908, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_9444700615de766c07ab9b2e36f34908_26->m_type_description == NULL);
        frame_9444700615de766c07ab9b2e36f34908_26 = cache_frame_9444700615de766c07ab9b2e36f34908_26;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_9444700615de766c07ab9b2e36f34908_26);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_9444700615de766c07ab9b2e36f34908_26) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__25_PickleType_1654, mod_consts[125]);

        if (tmp_dictset_value == NULL) {
            if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                tmp_dictset_value = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[125]);

                if (unlikely(tmp_dictset_value == NULL)) {
                    tmp_dictset_value = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[125]);
                }

                if (tmp_dictset_value == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1667;
                    type_description_2 = "o";
                    goto frame_exception_exit_26;
                }
                Py_INCREF(tmp_dictset_value);
            } else {
                goto frame_exception_exit_26;
            }
        }

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__25_PickleType_1654, mod_consts[143], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1667;
            type_description_2 = "o";
            goto frame_exception_exit_26;
        }
        {
            PyObject *tmp_defaults_13;
            PyObject *tmp_tuple_element_97;
            PyObject *tmp_expression_value_134;
            tmp_expression_value_134 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__25_PickleType_1654, mod_consts[238]);

            if (tmp_expression_value_134 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_134 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[238]);

                    if (unlikely(tmp_expression_value_134 == NULL)) {
                        tmp_expression_value_134 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[238]);
                    }

                    if (tmp_expression_value_134 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1670;
                        type_description_2 = "o";
                        goto frame_exception_exit_26;
                    }
                    Py_INCREF(tmp_expression_value_134);
                } else {
                    goto frame_exception_exit_26;
                }
            }

            tmp_tuple_element_97 = LOOKUP_ATTRIBUTE(tmp_expression_value_134, mod_consts[571]);
            Py_DECREF(tmp_expression_value_134);
            if (tmp_tuple_element_97 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1670;
                type_description_2 = "o";
                goto frame_exception_exit_26;
            }
            tmp_defaults_13 = PyTuple_New(3);
            PyTuple_SET_ITEM(tmp_defaults_13, 0, tmp_tuple_element_97);
            tmp_tuple_element_97 = Py_None;
            PyTuple_SET_ITEM0(tmp_defaults_13, 1, tmp_tuple_element_97);
            tmp_tuple_element_97 = Py_None;
            PyTuple_SET_ITEM0(tmp_defaults_13, 2, tmp_tuple_element_97);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__86___init__(tmp_defaults_13);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__25_PickleType_1654, mod_consts[66], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1669;
                type_description_2 = "o";
                goto frame_exception_exit_26;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__87___reduce__();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__25_PickleType_1654, mod_consts[573], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1691;
            type_description_2 = "o";
            goto frame_exception_exit_26;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__88_bind_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__25_PickleType_1654, mod_consts[232], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1694;
            type_description_2 = "o";
            goto frame_exception_exit_26;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__89_result_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__25_PickleType_1654, mod_consts[233], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1714;
            type_description_2 = "o";
            goto frame_exception_exit_26;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__90_compare_values();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__25_PickleType_1654, mod_consts[577], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1734;
            type_description_2 = "o";
            goto frame_exception_exit_26;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_9444700615de766c07ab9b2e36f34908_26);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_25;

        frame_exception_exit_26:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_9444700615de766c07ab9b2e36f34908_26);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_9444700615de766c07ab9b2e36f34908_26, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_9444700615de766c07ab9b2e36f34908_26->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_9444700615de766c07ab9b2e36f34908_26, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_9444700615de766c07ab9b2e36f34908_26,
            type_description_2,
            outline_24_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_9444700615de766c07ab9b2e36f34908_26 == cache_frame_9444700615de766c07ab9b2e36f34908_26) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_9444700615de766c07ab9b2e36f34908_26);
            cache_frame_9444700615de766c07ab9b2e36f34908_26 = NULL;
        }

        assertFrameObject(frame_9444700615de766c07ab9b2e36f34908_26);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_25;

        frame_no_exception_25:;
        goto skip_nested_handling_25;
        nested_frame_exit_25:;

        goto try_except_handler_75;
        skip_nested_handling_25:;
        {
            nuitka_bool tmp_condition_result_167;
            PyObject *tmp_cmp_expr_left_25;
            PyObject *tmp_cmp_expr_right_25;
            CHECK_OBJECT(tmp_class_creation_21__bases);
            tmp_cmp_expr_left_25 = tmp_class_creation_21__bases;
            CHECK_OBJECT(tmp_class_creation_21__bases_orig);
            tmp_cmp_expr_right_25 = tmp_class_creation_21__bases_orig;
            tmp_condition_result_167 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_25, tmp_cmp_expr_right_25);
            if (tmp_condition_result_167 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1654;

                goto try_except_handler_75;
            }
            if (tmp_condition_result_167 == NUITKA_BOOL_TRUE) {
                goto branch_yes_102;
            } else {
                goto branch_no_102;
            }
            assert(tmp_condition_result_167 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_102:;
        CHECK_OBJECT(tmp_class_creation_21__bases_orig);
        tmp_dictset_value = tmp_class_creation_21__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__25_PickleType_1654, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1654;

            goto try_except_handler_75;
        }
        branch_no_102:;
        {
            PyObject *tmp_assign_source_226;
            PyObject *tmp_called_value_85;
            PyObject *tmp_args_value_50;
            PyObject *tmp_tuple_element_98;
            PyObject *tmp_kwargs_value_50;
            CHECK_OBJECT(tmp_class_creation_21__metaclass);
            tmp_called_value_85 = tmp_class_creation_21__metaclass;
            tmp_tuple_element_98 = mod_consts[241];
            tmp_args_value_50 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_50, 0, tmp_tuple_element_98);
            CHECK_OBJECT(tmp_class_creation_21__bases);
            tmp_tuple_element_98 = tmp_class_creation_21__bases;
            PyTuple_SET_ITEM0(tmp_args_value_50, 1, tmp_tuple_element_98);
            tmp_tuple_element_98 = locals_sqlalchemy$sql$sqltypes$$$class__25_PickleType_1654;
            PyTuple_SET_ITEM0(tmp_args_value_50, 2, tmp_tuple_element_98);
            CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
            tmp_kwargs_value_50 = tmp_class_creation_21__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 1654;
            tmp_assign_source_226 = CALL_FUNCTION(tmp_called_value_85, tmp_args_value_50, tmp_kwargs_value_50);
            Py_DECREF(tmp_args_value_50);
            if (tmp_assign_source_226 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1654;

                goto try_except_handler_75;
            }
            assert(outline_24_var___class__ == NULL);
            outline_24_var___class__ = tmp_assign_source_226;
        }
        CHECK_OBJECT(outline_24_var___class__);
        tmp_assign_source_225 = outline_24_var___class__;
        Py_INCREF(tmp_assign_source_225);
        goto try_return_handler_75;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_75:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__25_PickleType_1654);
        locals_sqlalchemy$sql$sqltypes$$$class__25_PickleType_1654 = NULL;
        goto try_return_handler_74;
        // Exception handler code:
        try_except_handler_75:;
        exception_keeper_type_73 = exception_type;
        exception_keeper_value_73 = exception_value;
        exception_keeper_tb_73 = exception_tb;
        exception_keeper_lineno_73 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__25_PickleType_1654);
        locals_sqlalchemy$sql$sqltypes$$$class__25_PickleType_1654 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_73;
        exception_value = exception_keeper_value_73;
        exception_tb = exception_keeper_tb_73;
        exception_lineno = exception_keeper_lineno_73;

        goto try_except_handler_74;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_74:;
        CHECK_OBJECT(outline_24_var___class__);
        Py_DECREF(outline_24_var___class__);
        outline_24_var___class__ = NULL;
        goto outline_result_25;
        // Exception handler code:
        try_except_handler_74:;
        exception_keeper_type_74 = exception_type;
        exception_keeper_value_74 = exception_value;
        exception_keeper_tb_74 = exception_tb;
        exception_keeper_lineno_74 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_74;
        exception_value = exception_keeper_value_74;
        exception_tb = exception_keeper_tb_74;
        exception_lineno = exception_keeper_lineno_74;

        goto outline_exception_25;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_25:;
        exception_lineno = 1654;
        goto try_except_handler_73;
        outline_result_25:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[241], tmp_assign_source_225);
    }
    goto try_end_25;
    // Exception handler code:
    try_except_handler_73:;
    exception_keeper_type_75 = exception_type;
    exception_keeper_value_75 = exception_value;
    exception_keeper_tb_75 = exception_tb;
    exception_keeper_lineno_75 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_21__bases_orig);
    tmp_class_creation_21__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_21__bases);
    tmp_class_creation_21__bases = NULL;
    Py_XDECREF(tmp_class_creation_21__class_decl_dict);
    tmp_class_creation_21__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_21__metaclass);
    tmp_class_creation_21__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_21__prepared);
    tmp_class_creation_21__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_75;
    exception_value = exception_keeper_value_75;
    exception_tb = exception_keeper_tb_75;
    exception_lineno = exception_keeper_lineno_75;

    goto frame_exception_exit_1;
    // End of try:
    try_end_25:;
    CHECK_OBJECT(tmp_class_creation_21__bases_orig);
    Py_DECREF(tmp_class_creation_21__bases_orig);
    tmp_class_creation_21__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_21__bases);
    Py_DECREF(tmp_class_creation_21__bases);
    tmp_class_creation_21__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
    Py_DECREF(tmp_class_creation_21__class_decl_dict);
    tmp_class_creation_21__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_21__metaclass);
    Py_DECREF(tmp_class_creation_21__metaclass);
    tmp_class_creation_21__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_21__prepared);
    Py_DECREF(tmp_class_creation_21__prepared);
    tmp_class_creation_21__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_227;
        PyObject *tmp_tuple_element_99;
        tmp_tuple_element_99 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[391]);

        if (unlikely(tmp_tuple_element_99 == NULL)) {
            tmp_tuple_element_99 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[391]);
        }

        if (tmp_tuple_element_99 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1741;

            goto try_except_handler_76;
        }
        tmp_assign_source_227 = PyTuple_New(3);
        PyTuple_SET_ITEM0(tmp_assign_source_227, 0, tmp_tuple_element_99);
        tmp_tuple_element_99 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[398]);

        if (unlikely(tmp_tuple_element_99 == NULL)) {
            tmp_tuple_element_99 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[398]);
        }

        if (tmp_tuple_element_99 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1741;

            goto tuple_build_exception_33;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_227, 1, tmp_tuple_element_99);
        tmp_tuple_element_99 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[157]);

        if (unlikely(tmp_tuple_element_99 == NULL)) {
            tmp_tuple_element_99 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[157]);
        }

        if (tmp_tuple_element_99 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1741;

            goto tuple_build_exception_33;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_227, 2, tmp_tuple_element_99);
        goto tuple_build_noexception_33;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_33:;
        Py_DECREF(tmp_assign_source_227);
        goto try_except_handler_76;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_33:;
        assert(tmp_class_creation_22__bases_orig == NULL);
        tmp_class_creation_22__bases_orig = tmp_assign_source_227;
    }
    {
        PyObject *tmp_assign_source_228;
        PyObject *tmp_dircall_arg1_26;
        CHECK_OBJECT(tmp_class_creation_22__bases_orig);
        tmp_dircall_arg1_26 = tmp_class_creation_22__bases_orig;
        Py_INCREF(tmp_dircall_arg1_26);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_26};
            tmp_assign_source_228 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_228 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1741;

            goto try_except_handler_76;
        }
        assert(tmp_class_creation_22__bases == NULL);
        tmp_class_creation_22__bases = tmp_assign_source_228;
    }
    {
        PyObject *tmp_assign_source_229;
        tmp_assign_source_229 = PyDict_New();
        assert(tmp_class_creation_22__class_decl_dict == NULL);
        tmp_class_creation_22__class_decl_dict = tmp_assign_source_229;
    }
    {
        PyObject *tmp_assign_source_230;
        PyObject *tmp_metaclass_value_26;
        bool tmp_condition_result_168;
        PyObject *tmp_key_value_76;
        PyObject *tmp_dict_arg_value_76;
        PyObject *tmp_dict_arg_value_77;
        PyObject *tmp_key_value_77;
        nuitka_bool tmp_condition_result_169;
        int tmp_truth_name_28;
        PyObject *tmp_type_arg_51;
        PyObject *tmp_expression_value_135;
        PyObject *tmp_subscript_value_26;
        PyObject *tmp_bases_value_26;
        tmp_key_value_76 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
        tmp_dict_arg_value_76 = tmp_class_creation_22__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_76, tmp_key_value_76);
        assert(!(tmp_res == -1));
        tmp_condition_result_168 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_168 != false) {
            goto condexpr_true_66;
        } else {
            goto condexpr_false_66;
        }
        condexpr_true_66:;
        CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
        tmp_dict_arg_value_77 = tmp_class_creation_22__class_decl_dict;
        tmp_key_value_77 = mod_consts[410];
        tmp_metaclass_value_26 = DICT_GET_ITEM0(tmp_dict_arg_value_77, tmp_key_value_77);
        if (tmp_metaclass_value_26 == NULL) {
            tmp_metaclass_value_26 = Py_None;
        }
        assert(!(tmp_metaclass_value_26 == NULL));
        Py_INCREF(tmp_metaclass_value_26);
        goto condexpr_end_66;
        condexpr_false_66:;
        CHECK_OBJECT(tmp_class_creation_22__bases);
        tmp_truth_name_28 = CHECK_IF_TRUE(tmp_class_creation_22__bases);
        if (tmp_truth_name_28 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1741;

            goto try_except_handler_76;
        }
        tmp_condition_result_169 = tmp_truth_name_28 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_169 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_67;
        } else {
            goto condexpr_false_67;
        }
        condexpr_true_67:;
        CHECK_OBJECT(tmp_class_creation_22__bases);
        tmp_expression_value_135 = tmp_class_creation_22__bases;
        tmp_subscript_value_26 = mod_consts[52];
        tmp_type_arg_51 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_135, tmp_subscript_value_26, 0);
        if (tmp_type_arg_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1741;

            goto try_except_handler_76;
        }
        tmp_metaclass_value_26 = BUILTIN_TYPE1(tmp_type_arg_51);
        Py_DECREF(tmp_type_arg_51);
        if (tmp_metaclass_value_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1741;

            goto try_except_handler_76;
        }
        goto condexpr_end_67;
        condexpr_false_67:;
        tmp_metaclass_value_26 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_26);
        condexpr_end_67:;
        condexpr_end_66:;
        CHECK_OBJECT(tmp_class_creation_22__bases);
        tmp_bases_value_26 = tmp_class_creation_22__bases;
        tmp_assign_source_230 = SELECT_METACLASS(tmp_metaclass_value_26, tmp_bases_value_26);
        Py_DECREF(tmp_metaclass_value_26);
        if (tmp_assign_source_230 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1741;

            goto try_except_handler_76;
        }
        assert(tmp_class_creation_22__metaclass == NULL);
        tmp_class_creation_22__metaclass = tmp_assign_source_230;
    }
    {
        bool tmp_condition_result_170;
        PyObject *tmp_key_value_78;
        PyObject *tmp_dict_arg_value_78;
        tmp_key_value_78 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
        tmp_dict_arg_value_78 = tmp_class_creation_22__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_78, tmp_key_value_78);
        assert(!(tmp_res == -1));
        tmp_condition_result_170 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_170 != false) {
            goto branch_yes_103;
        } else {
            goto branch_no_103;
        }
    }
    branch_yes_103:;
    CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_22__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1741;

        goto try_except_handler_76;
    }
    branch_no_103:;
    {
        nuitka_bool tmp_condition_result_171;
        PyObject *tmp_expression_value_136;
        CHECK_OBJECT(tmp_class_creation_22__metaclass);
        tmp_expression_value_136 = tmp_class_creation_22__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_136, mod_consts[411]);
        tmp_condition_result_171 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_171 == NUITKA_BOOL_TRUE) {
            goto branch_yes_104;
        } else {
            goto branch_no_104;
        }
    }
    branch_yes_104:;
    {
        PyObject *tmp_assign_source_231;
        PyObject *tmp_called_value_86;
        PyObject *tmp_expression_value_137;
        PyObject *tmp_args_value_51;
        PyObject *tmp_tuple_element_100;
        PyObject *tmp_kwargs_value_51;
        CHECK_OBJECT(tmp_class_creation_22__metaclass);
        tmp_expression_value_137 = tmp_class_creation_22__metaclass;
        tmp_called_value_86 = LOOKUP_ATTRIBUTE(tmp_expression_value_137, mod_consts[411]);
        if (tmp_called_value_86 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1741;

            goto try_except_handler_76;
        }
        tmp_tuple_element_100 = mod_consts[297];
        tmp_args_value_51 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_51, 0, tmp_tuple_element_100);
        CHECK_OBJECT(tmp_class_creation_22__bases);
        tmp_tuple_element_100 = tmp_class_creation_22__bases;
        PyTuple_SET_ITEM0(tmp_args_value_51, 1, tmp_tuple_element_100);
        CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
        tmp_kwargs_value_51 = tmp_class_creation_22__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 1741;
        tmp_assign_source_231 = CALL_FUNCTION(tmp_called_value_86, tmp_args_value_51, tmp_kwargs_value_51);
        Py_DECREF(tmp_called_value_86);
        Py_DECREF(tmp_args_value_51);
        if (tmp_assign_source_231 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1741;

            goto try_except_handler_76;
        }
        assert(tmp_class_creation_22__prepared == NULL);
        tmp_class_creation_22__prepared = tmp_assign_source_231;
    }
    {
        bool tmp_condition_result_172;
        PyObject *tmp_operand_value_26;
        PyObject *tmp_expression_value_138;
        CHECK_OBJECT(tmp_class_creation_22__prepared);
        tmp_expression_value_138 = tmp_class_creation_22__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_138, mod_consts[413]);
        tmp_operand_value_26 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_26);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1741;

            goto try_except_handler_76;
        }
        tmp_condition_result_172 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_172 != false) {
            goto branch_yes_105;
        } else {
            goto branch_no_105;
        }
    }
    branch_yes_105:;
    {
        PyObject *tmp_raise_type_26;
        PyObject *tmp_raise_value_26;
        PyObject *tmp_left_value_26;
        PyObject *tmp_right_value_26;
        PyObject *tmp_tuple_element_101;
        PyObject *tmp_getattr_target_26;
        PyObject *tmp_getattr_attr_26;
        PyObject *tmp_getattr_default_26;
        tmp_raise_type_26 = PyExc_TypeError;
        tmp_left_value_26 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_22__metaclass);
        tmp_getattr_target_26 = tmp_class_creation_22__metaclass;
        tmp_getattr_attr_26 = mod_consts[190];
        tmp_getattr_default_26 = mod_consts[415];
        tmp_tuple_element_101 = BUILTIN_GETATTR(tmp_getattr_target_26, tmp_getattr_attr_26, tmp_getattr_default_26);
        if (tmp_tuple_element_101 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1741;

            goto try_except_handler_76;
        }
        tmp_right_value_26 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_139;
            PyObject *tmp_type_arg_52;
            PyTuple_SET_ITEM(tmp_right_value_26, 0, tmp_tuple_element_101);
            CHECK_OBJECT(tmp_class_creation_22__prepared);
            tmp_type_arg_52 = tmp_class_creation_22__prepared;
            tmp_expression_value_139 = BUILTIN_TYPE1(tmp_type_arg_52);
            assert(!(tmp_expression_value_139 == NULL));
            tmp_tuple_element_101 = LOOKUP_ATTRIBUTE(tmp_expression_value_139, mod_consts[190]);
            Py_DECREF(tmp_expression_value_139);
            if (tmp_tuple_element_101 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1741;

                goto tuple_build_exception_34;
            }
            PyTuple_SET_ITEM(tmp_right_value_26, 1, tmp_tuple_element_101);
        }
        goto tuple_build_noexception_34;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_34:;
        Py_DECREF(tmp_right_value_26);
        goto try_except_handler_76;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_34:;
        tmp_raise_value_26 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_26, tmp_right_value_26);
        Py_DECREF(tmp_right_value_26);
        if (tmp_raise_value_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1741;

            goto try_except_handler_76;
        }
        exception_type = tmp_raise_type_26;
        Py_INCREF(tmp_raise_type_26);
        exception_value = tmp_raise_value_26;
        exception_lineno = 1741;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_76;
    }
    branch_no_105:;
    goto branch_end_104;
    branch_no_104:;
    {
        PyObject *tmp_assign_source_232;
        tmp_assign_source_232 = PyDict_New();
        assert(tmp_class_creation_22__prepared == NULL);
        tmp_class_creation_22__prepared = tmp_assign_source_232;
    }
    branch_end_104:;
    {
        PyObject *tmp_assign_source_233;
        {
            PyObject *tmp_set_locals_26;
            CHECK_OBJECT(tmp_class_creation_22__prepared);
            tmp_set_locals_26 = tmp_class_creation_22__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__26_Boolean_1741 = tmp_set_locals_26;
            Py_INCREF(tmp_set_locals_26);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__26_Boolean_1741, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1741;

            goto try_except_handler_78;
        }
        tmp_dictset_value = mod_consts[579];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__26_Boolean_1741, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1741;

            goto try_except_handler_78;
        }
        tmp_dictset_value = mod_consts[297];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__26_Boolean_1741, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1741;

            goto try_except_handler_78;
        }
        if (isFrameUnusable(cache_frame_11372eb91ef81f59b652ae05db762417_27)) {
            Py_XDECREF(cache_frame_11372eb91ef81f59b652ae05db762417_27);

#if _DEBUG_REFCOUNTS
            if (cache_frame_11372eb91ef81f59b652ae05db762417_27 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_11372eb91ef81f59b652ae05db762417_27 = MAKE_FUNCTION_FRAME(codeobj_11372eb91ef81f59b652ae05db762417, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_11372eb91ef81f59b652ae05db762417_27->m_type_description == NULL);
        frame_11372eb91ef81f59b652ae05db762417_27 = cache_frame_11372eb91ef81f59b652ae05db762417_27;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_11372eb91ef81f59b652ae05db762417_27);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_11372eb91ef81f59b652ae05db762417_27) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[580];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__26_Boolean_1741, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1763;
            type_description_2 = "o";
            goto frame_exception_exit_27;
        }
        tmp_dictset_value = Py_True;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__26_Boolean_1741, mod_consts[266], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1764;
            type_description_2 = "o";
            goto frame_exception_exit_27;
        }
        {
            PyObject *tmp_defaults_14;
            tmp_defaults_14 = mod_consts[581];
            Py_INCREF(tmp_defaults_14);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__91___init__(tmp_defaults_14);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__26_Boolean_1741, mod_consts[66], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1766;
                type_description_2 = "o";
                goto frame_exception_exit_27;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__92__should_create_constraint();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__26_Boolean_1741, mod_consts[226], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1781;
            type_description_2 = "o";
            goto frame_exception_exit_27;
        }
        {
            PyObject *tmp_called_value_87;
            PyObject *tmp_called_instance_9;
            PyObject *tmp_args_element_value_39;
            tmp_called_instance_9 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__26_Boolean_1741, mod_consts[43]);

            if (tmp_called_instance_9 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_9 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_called_instance_9 == NULL)) {
                        tmp_called_instance_9 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
                    }

                    if (tmp_called_instance_9 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1789;
                        type_description_2 = "o";
                        goto frame_exception_exit_27;
                    }
                    Py_INCREF(tmp_called_instance_9);
                } else {
                    goto frame_exception_exit_27;
                }
            }

            frame_11372eb91ef81f59b652ae05db762417_27->m_frame.f_lineno = 1789;
            tmp_called_value_87 = CALL_METHOD_WITH_SINGLE_ARG(
                tmp_called_instance_9,
                mod_consts[562],
                PyTuple_GET_ITEM(mod_consts[563], 0)
            );

            Py_DECREF(tmp_called_instance_9);
            if (tmp_called_value_87 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1789;
                type_description_2 = "o";
                goto frame_exception_exit_27;
            }


            tmp_args_element_value_39 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__93__set_table();

            frame_11372eb91ef81f59b652ae05db762417_27->m_frame.f_lineno = 1789;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_87, tmp_args_element_value_39);
            Py_DECREF(tmp_called_value_87);
            Py_DECREF(tmp_args_element_value_39);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1789;
                type_description_2 = "o";
                goto frame_exception_exit_27;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__26_Boolean_1741, mod_consts[139], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1790;
                type_description_2 = "o";
                goto frame_exception_exit_27;
            }
        }
        {
            nuitka_bool tmp_condition_result_173;
            PyObject *tmp_called_value_88;
            PyObject *tmp_args_element_value_40;
            PyObject *tmp_called_value_89;
            PyObject *tmp_args_element_value_41;
            tmp_res = MAPPING_HAS_ITEM(locals_sqlalchemy$sql$sqltypes$$$class__26_Boolean_1741, mod_consts[420]);

            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1807;
                type_description_2 = "o";
                goto frame_exception_exit_27;
            }
            tmp_condition_result_173 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_173 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_68;
            } else {
                goto condexpr_false_68;
            }
            condexpr_true_68:;
            tmp_called_value_88 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__26_Boolean_1741, mod_consts[420]);

            if (unlikely(tmp_called_value_88 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[420]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 1807;
                type_description_2 = "o";
                goto frame_exception_exit_27;
            }

            if (tmp_called_value_88 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1807;
                type_description_2 = "o";
                goto frame_exception_exit_27;
            }


            tmp_args_element_value_40 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__94_python_type();

            frame_11372eb91ef81f59b652ae05db762417_27->m_frame.f_lineno = 1807;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_88, tmp_args_element_value_40);
            Py_DECREF(tmp_called_value_88);
            Py_DECREF(tmp_args_element_value_40);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1807;
                type_description_2 = "o";
                goto frame_exception_exit_27;
            }
            goto condexpr_end_68;
            condexpr_false_68:;
            tmp_called_value_89 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_41 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__94_python_type();

            frame_11372eb91ef81f59b652ae05db762417_27->m_frame.f_lineno = 1807;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_89, tmp_args_element_value_41);
            Py_DECREF(tmp_args_element_value_41);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1807;
                type_description_2 = "o";
                goto frame_exception_exit_27;
            }
            condexpr_end_68:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__26_Boolean_1741, mod_consts[236], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1808;
                type_description_2 = "o";
                goto frame_exception_exit_27;
            }
        }
        {
            nuitka_bool tmp_condition_result_174;
            PyObject *tmp_called_value_90;
            PyObject *tmp_call_arg_element_1;
            tmp_res = MAPPING_HAS_ITEM(locals_sqlalchemy$sql$sqltypes$$$class__26_Boolean_1741, mod_consts[586]);

            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1811;
                type_description_2 = "o";
                goto frame_exception_exit_27;
            }
            tmp_condition_result_174 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_174 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_69;
            } else {
                goto condexpr_false_69;
            }
            condexpr_true_69:;
            tmp_called_value_90 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__26_Boolean_1741, mod_consts[586]);

            if (unlikely(tmp_called_value_90 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[586]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 1811;
                type_description_2 = "o";
                goto frame_exception_exit_27;
            }

            if (tmp_called_value_90 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1811;
                type_description_2 = "o";
                goto frame_exception_exit_27;
            }
            tmp_call_arg_element_1 = LIST_COPY(mod_consts[587]);
            frame_11372eb91ef81f59b652ae05db762417_27->m_frame.f_lineno = 1811;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_90, tmp_call_arg_element_1);
            Py_DECREF(tmp_called_value_90);
            Py_DECREF(tmp_call_arg_element_1);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1811;
                type_description_2 = "o";
                goto frame_exception_exit_27;
            }
            goto condexpr_end_69;
            condexpr_false_69:;
            tmp_dictset_value = mod_consts[588];
            Py_INCREF(tmp_dictset_value);
            condexpr_end_69:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__26_Boolean_1741, mod_consts[252], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1811;
                type_description_2 = "o";
                goto frame_exception_exit_27;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__95__strict_as_bool();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__26_Boolean_1741, mod_consts[260], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1813;
            type_description_2 = "o";
            goto frame_exception_exit_27;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__96_literal_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__26_Boolean_1741, mod_consts[228], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1823;
            type_description_2 = "o";
            goto frame_exception_exit_27;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__97_bind_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__26_Boolean_1741, mod_consts[232], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1833;
            type_description_2 = "o";
            goto frame_exception_exit_27;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__98_result_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__26_Boolean_1741, mod_consts[233], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1848;
            type_description_2 = "o";
            goto frame_exception_exit_27;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_11372eb91ef81f59b652ae05db762417_27);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_26;

        frame_exception_exit_27:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_11372eb91ef81f59b652ae05db762417_27);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_11372eb91ef81f59b652ae05db762417_27, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_11372eb91ef81f59b652ae05db762417_27->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_11372eb91ef81f59b652ae05db762417_27, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_11372eb91ef81f59b652ae05db762417_27,
            type_description_2,
            outline_25_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_11372eb91ef81f59b652ae05db762417_27 == cache_frame_11372eb91ef81f59b652ae05db762417_27) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_11372eb91ef81f59b652ae05db762417_27);
            cache_frame_11372eb91ef81f59b652ae05db762417_27 = NULL;
        }

        assertFrameObject(frame_11372eb91ef81f59b652ae05db762417_27);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_26;

        frame_no_exception_26:;
        goto skip_nested_handling_26;
        nested_frame_exit_26:;

        goto try_except_handler_78;
        skip_nested_handling_26:;
        {
            nuitka_bool tmp_condition_result_175;
            PyObject *tmp_cmp_expr_left_26;
            PyObject *tmp_cmp_expr_right_26;
            CHECK_OBJECT(tmp_class_creation_22__bases);
            tmp_cmp_expr_left_26 = tmp_class_creation_22__bases;
            CHECK_OBJECT(tmp_class_creation_22__bases_orig);
            tmp_cmp_expr_right_26 = tmp_class_creation_22__bases_orig;
            tmp_condition_result_175 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_26, tmp_cmp_expr_right_26);
            if (tmp_condition_result_175 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1741;

                goto try_except_handler_78;
            }
            if (tmp_condition_result_175 == NUITKA_BOOL_TRUE) {
                goto branch_yes_106;
            } else {
                goto branch_no_106;
            }
            assert(tmp_condition_result_175 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_106:;
        CHECK_OBJECT(tmp_class_creation_22__bases_orig);
        tmp_dictset_value = tmp_class_creation_22__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__26_Boolean_1741, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1741;

            goto try_except_handler_78;
        }
        branch_no_106:;
        {
            PyObject *tmp_assign_source_234;
            PyObject *tmp_called_value_91;
            PyObject *tmp_args_value_52;
            PyObject *tmp_tuple_element_102;
            PyObject *tmp_kwargs_value_52;
            CHECK_OBJECT(tmp_class_creation_22__metaclass);
            tmp_called_value_91 = tmp_class_creation_22__metaclass;
            tmp_tuple_element_102 = mod_consts[297];
            tmp_args_value_52 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_52, 0, tmp_tuple_element_102);
            CHECK_OBJECT(tmp_class_creation_22__bases);
            tmp_tuple_element_102 = tmp_class_creation_22__bases;
            PyTuple_SET_ITEM0(tmp_args_value_52, 1, tmp_tuple_element_102);
            tmp_tuple_element_102 = locals_sqlalchemy$sql$sqltypes$$$class__26_Boolean_1741;
            PyTuple_SET_ITEM0(tmp_args_value_52, 2, tmp_tuple_element_102);
            CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
            tmp_kwargs_value_52 = tmp_class_creation_22__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 1741;
            tmp_assign_source_234 = CALL_FUNCTION(tmp_called_value_91, tmp_args_value_52, tmp_kwargs_value_52);
            Py_DECREF(tmp_args_value_52);
            if (tmp_assign_source_234 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1741;

                goto try_except_handler_78;
            }
            assert(outline_25_var___class__ == NULL);
            outline_25_var___class__ = tmp_assign_source_234;
        }
        CHECK_OBJECT(outline_25_var___class__);
        tmp_assign_source_233 = outline_25_var___class__;
        Py_INCREF(tmp_assign_source_233);
        goto try_return_handler_78;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_78:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__26_Boolean_1741);
        locals_sqlalchemy$sql$sqltypes$$$class__26_Boolean_1741 = NULL;
        goto try_return_handler_77;
        // Exception handler code:
        try_except_handler_78:;
        exception_keeper_type_76 = exception_type;
        exception_keeper_value_76 = exception_value;
        exception_keeper_tb_76 = exception_tb;
        exception_keeper_lineno_76 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__26_Boolean_1741);
        locals_sqlalchemy$sql$sqltypes$$$class__26_Boolean_1741 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_76;
        exception_value = exception_keeper_value_76;
        exception_tb = exception_keeper_tb_76;
        exception_lineno = exception_keeper_lineno_76;

        goto try_except_handler_77;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_77:;
        CHECK_OBJECT(outline_25_var___class__);
        Py_DECREF(outline_25_var___class__);
        outline_25_var___class__ = NULL;
        goto outline_result_26;
        // Exception handler code:
        try_except_handler_77:;
        exception_keeper_type_77 = exception_type;
        exception_keeper_value_77 = exception_value;
        exception_keeper_tb_77 = exception_tb;
        exception_keeper_lineno_77 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_77;
        exception_value = exception_keeper_value_77;
        exception_tb = exception_keeper_tb_77;
        exception_lineno = exception_keeper_lineno_77;

        goto outline_exception_26;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_26:;
        exception_lineno = 1741;
        goto try_except_handler_76;
        outline_result_26:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[297], tmp_assign_source_233);
    }
    goto try_end_26;
    // Exception handler code:
    try_except_handler_76:;
    exception_keeper_type_78 = exception_type;
    exception_keeper_value_78 = exception_value;
    exception_keeper_tb_78 = exception_tb;
    exception_keeper_lineno_78 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_22__bases_orig);
    tmp_class_creation_22__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_22__bases);
    tmp_class_creation_22__bases = NULL;
    Py_XDECREF(tmp_class_creation_22__class_decl_dict);
    tmp_class_creation_22__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_22__metaclass);
    tmp_class_creation_22__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_22__prepared);
    tmp_class_creation_22__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_78;
    exception_value = exception_keeper_value_78;
    exception_tb = exception_keeper_tb_78;
    exception_lineno = exception_keeper_lineno_78;

    goto frame_exception_exit_1;
    // End of try:
    try_end_26:;
    CHECK_OBJECT(tmp_class_creation_22__bases_orig);
    Py_DECREF(tmp_class_creation_22__bases_orig);
    tmp_class_creation_22__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_22__bases);
    Py_DECREF(tmp_class_creation_22__bases);
    tmp_class_creation_22__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
    Py_DECREF(tmp_class_creation_22__class_decl_dict);
    tmp_class_creation_22__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_22__metaclass);
    Py_DECREF(tmp_class_creation_22__metaclass);
    tmp_class_creation_22__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_22__prepared);
    Py_DECREF(tmp_class_creation_22__prepared);
    tmp_class_creation_22__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_235;
        PyObject *tmp_tuple_element_103;
        tmp_tuple_element_103 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[412]);

        if (unlikely(tmp_tuple_element_103 == NULL)) {
            tmp_tuple_element_103 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[412]);
        }

        if (tmp_tuple_element_103 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1855;

            goto try_except_handler_79;
        }
        tmp_assign_source_235 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_assign_source_235, 0, tmp_tuple_element_103);
        tmp_tuple_element_103 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[398]);

        if (unlikely(tmp_tuple_element_103 == NULL)) {
            tmp_tuple_element_103 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[398]);
        }

        if (tmp_tuple_element_103 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1855;

            goto tuple_build_exception_35;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_235, 1, tmp_tuple_element_103);
        goto tuple_build_noexception_35;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_35:;
        Py_DECREF(tmp_assign_source_235);
        goto try_except_handler_79;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_35:;
        assert(tmp_class_creation_23__bases_orig == NULL);
        tmp_class_creation_23__bases_orig = tmp_assign_source_235;
    }
    {
        PyObject *tmp_assign_source_236;
        PyObject *tmp_dircall_arg1_27;
        CHECK_OBJECT(tmp_class_creation_23__bases_orig);
        tmp_dircall_arg1_27 = tmp_class_creation_23__bases_orig;
        Py_INCREF(tmp_dircall_arg1_27);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_27};
            tmp_assign_source_236 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_236 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1855;

            goto try_except_handler_79;
        }
        assert(tmp_class_creation_23__bases == NULL);
        tmp_class_creation_23__bases = tmp_assign_source_236;
    }
    {
        PyObject *tmp_assign_source_237;
        tmp_assign_source_237 = PyDict_New();
        assert(tmp_class_creation_23__class_decl_dict == NULL);
        tmp_class_creation_23__class_decl_dict = tmp_assign_source_237;
    }
    {
        PyObject *tmp_assign_source_238;
        PyObject *tmp_metaclass_value_27;
        bool tmp_condition_result_176;
        PyObject *tmp_key_value_79;
        PyObject *tmp_dict_arg_value_79;
        PyObject *tmp_dict_arg_value_80;
        PyObject *tmp_key_value_80;
        nuitka_bool tmp_condition_result_177;
        int tmp_truth_name_29;
        PyObject *tmp_type_arg_53;
        PyObject *tmp_expression_value_140;
        PyObject *tmp_subscript_value_27;
        PyObject *tmp_bases_value_27;
        tmp_key_value_79 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
        tmp_dict_arg_value_79 = tmp_class_creation_23__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_79, tmp_key_value_79);
        assert(!(tmp_res == -1));
        tmp_condition_result_176 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_176 != false) {
            goto condexpr_true_70;
        } else {
            goto condexpr_false_70;
        }
        condexpr_true_70:;
        CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
        tmp_dict_arg_value_80 = tmp_class_creation_23__class_decl_dict;
        tmp_key_value_80 = mod_consts[410];
        tmp_metaclass_value_27 = DICT_GET_ITEM0(tmp_dict_arg_value_80, tmp_key_value_80);
        if (tmp_metaclass_value_27 == NULL) {
            tmp_metaclass_value_27 = Py_None;
        }
        assert(!(tmp_metaclass_value_27 == NULL));
        Py_INCREF(tmp_metaclass_value_27);
        goto condexpr_end_70;
        condexpr_false_70:;
        CHECK_OBJECT(tmp_class_creation_23__bases);
        tmp_truth_name_29 = CHECK_IF_TRUE(tmp_class_creation_23__bases);
        if (tmp_truth_name_29 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1855;

            goto try_except_handler_79;
        }
        tmp_condition_result_177 = tmp_truth_name_29 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_177 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_71;
        } else {
            goto condexpr_false_71;
        }
        condexpr_true_71:;
        CHECK_OBJECT(tmp_class_creation_23__bases);
        tmp_expression_value_140 = tmp_class_creation_23__bases;
        tmp_subscript_value_27 = mod_consts[52];
        tmp_type_arg_53 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_140, tmp_subscript_value_27, 0);
        if (tmp_type_arg_53 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1855;

            goto try_except_handler_79;
        }
        tmp_metaclass_value_27 = BUILTIN_TYPE1(tmp_type_arg_53);
        Py_DECREF(tmp_type_arg_53);
        if (tmp_metaclass_value_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1855;

            goto try_except_handler_79;
        }
        goto condexpr_end_71;
        condexpr_false_71:;
        tmp_metaclass_value_27 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_27);
        condexpr_end_71:;
        condexpr_end_70:;
        CHECK_OBJECT(tmp_class_creation_23__bases);
        tmp_bases_value_27 = tmp_class_creation_23__bases;
        tmp_assign_source_238 = SELECT_METACLASS(tmp_metaclass_value_27, tmp_bases_value_27);
        Py_DECREF(tmp_metaclass_value_27);
        if (tmp_assign_source_238 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1855;

            goto try_except_handler_79;
        }
        assert(tmp_class_creation_23__metaclass == NULL);
        tmp_class_creation_23__metaclass = tmp_assign_source_238;
    }
    {
        bool tmp_condition_result_178;
        PyObject *tmp_key_value_81;
        PyObject *tmp_dict_arg_value_81;
        tmp_key_value_81 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
        tmp_dict_arg_value_81 = tmp_class_creation_23__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_81, tmp_key_value_81);
        assert(!(tmp_res == -1));
        tmp_condition_result_178 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_178 != false) {
            goto branch_yes_107;
        } else {
            goto branch_no_107;
        }
    }
    branch_yes_107:;
    CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_23__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1855;

        goto try_except_handler_79;
    }
    branch_no_107:;
    {
        nuitka_bool tmp_condition_result_179;
        PyObject *tmp_expression_value_141;
        CHECK_OBJECT(tmp_class_creation_23__metaclass);
        tmp_expression_value_141 = tmp_class_creation_23__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_141, mod_consts[411]);
        tmp_condition_result_179 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_179 == NUITKA_BOOL_TRUE) {
            goto branch_yes_108;
        } else {
            goto branch_no_108;
        }
    }
    branch_yes_108:;
    {
        PyObject *tmp_assign_source_239;
        PyObject *tmp_called_value_92;
        PyObject *tmp_expression_value_142;
        PyObject *tmp_args_value_53;
        PyObject *tmp_tuple_element_104;
        PyObject *tmp_kwargs_value_53;
        CHECK_OBJECT(tmp_class_creation_23__metaclass);
        tmp_expression_value_142 = tmp_class_creation_23__metaclass;
        tmp_called_value_92 = LOOKUP_ATTRIBUTE(tmp_expression_value_142, mod_consts[411]);
        if (tmp_called_value_92 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1855;

            goto try_except_handler_79;
        }
        tmp_tuple_element_104 = mod_consts[271];
        tmp_args_value_53 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_53, 0, tmp_tuple_element_104);
        CHECK_OBJECT(tmp_class_creation_23__bases);
        tmp_tuple_element_104 = tmp_class_creation_23__bases;
        PyTuple_SET_ITEM0(tmp_args_value_53, 1, tmp_tuple_element_104);
        CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
        tmp_kwargs_value_53 = tmp_class_creation_23__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 1855;
        tmp_assign_source_239 = CALL_FUNCTION(tmp_called_value_92, tmp_args_value_53, tmp_kwargs_value_53);
        Py_DECREF(tmp_called_value_92);
        Py_DECREF(tmp_args_value_53);
        if (tmp_assign_source_239 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1855;

            goto try_except_handler_79;
        }
        assert(tmp_class_creation_23__prepared == NULL);
        tmp_class_creation_23__prepared = tmp_assign_source_239;
    }
    {
        bool tmp_condition_result_180;
        PyObject *tmp_operand_value_27;
        PyObject *tmp_expression_value_143;
        CHECK_OBJECT(tmp_class_creation_23__prepared);
        tmp_expression_value_143 = tmp_class_creation_23__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_143, mod_consts[413]);
        tmp_operand_value_27 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_27);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1855;

            goto try_except_handler_79;
        }
        tmp_condition_result_180 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_180 != false) {
            goto branch_yes_109;
        } else {
            goto branch_no_109;
        }
    }
    branch_yes_109:;
    {
        PyObject *tmp_raise_type_27;
        PyObject *tmp_raise_value_27;
        PyObject *tmp_left_value_27;
        PyObject *tmp_right_value_27;
        PyObject *tmp_tuple_element_105;
        PyObject *tmp_getattr_target_27;
        PyObject *tmp_getattr_attr_27;
        PyObject *tmp_getattr_default_27;
        tmp_raise_type_27 = PyExc_TypeError;
        tmp_left_value_27 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_23__metaclass);
        tmp_getattr_target_27 = tmp_class_creation_23__metaclass;
        tmp_getattr_attr_27 = mod_consts[190];
        tmp_getattr_default_27 = mod_consts[415];
        tmp_tuple_element_105 = BUILTIN_GETATTR(tmp_getattr_target_27, tmp_getattr_attr_27, tmp_getattr_default_27);
        if (tmp_tuple_element_105 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1855;

            goto try_except_handler_79;
        }
        tmp_right_value_27 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_144;
            PyObject *tmp_type_arg_54;
            PyTuple_SET_ITEM(tmp_right_value_27, 0, tmp_tuple_element_105);
            CHECK_OBJECT(tmp_class_creation_23__prepared);
            tmp_type_arg_54 = tmp_class_creation_23__prepared;
            tmp_expression_value_144 = BUILTIN_TYPE1(tmp_type_arg_54);
            assert(!(tmp_expression_value_144 == NULL));
            tmp_tuple_element_105 = LOOKUP_ATTRIBUTE(tmp_expression_value_144, mod_consts[190]);
            Py_DECREF(tmp_expression_value_144);
            if (tmp_tuple_element_105 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1855;

                goto tuple_build_exception_36;
            }
            PyTuple_SET_ITEM(tmp_right_value_27, 1, tmp_tuple_element_105);
        }
        goto tuple_build_noexception_36;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_36:;
        Py_DECREF(tmp_right_value_27);
        goto try_except_handler_79;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_36:;
        tmp_raise_value_27 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_27, tmp_right_value_27);
        Py_DECREF(tmp_right_value_27);
        if (tmp_raise_value_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1855;

            goto try_except_handler_79;
        }
        exception_type = tmp_raise_type_27;
        Py_INCREF(tmp_raise_type_27);
        exception_value = tmp_raise_value_27;
        exception_lineno = 1855;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_79;
    }
    branch_no_109:;
    goto branch_end_108;
    branch_no_108:;
    {
        PyObject *tmp_assign_source_240;
        tmp_assign_source_240 = PyDict_New();
        assert(tmp_class_creation_23__prepared == NULL);
        tmp_class_creation_23__prepared = tmp_assign_source_240;
    }
    branch_end_108:;
    {
        PyObject *tmp_assign_source_241;
        {
            PyObject *tmp_set_locals_27;
            CHECK_OBJECT(tmp_class_creation_23__prepared);
            tmp_set_locals_27 = tmp_class_creation_23__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__27__AbstractInterval_1855 = tmp_set_locals_27;
            Py_INCREF(tmp_set_locals_27);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__27__AbstractInterval_1855, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1855;

            goto try_except_handler_81;
        }
        tmp_dictset_value = mod_consts[271];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__27__AbstractInterval_1855, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1855;

            goto try_except_handler_81;
        }
        if (isFrameUnusable(cache_frame_2689a9b3a13f6ecb6924457b477eb87f_28)) {
            Py_XDECREF(cache_frame_2689a9b3a13f6ecb6924457b477eb87f_28);

#if _DEBUG_REFCOUNTS
            if (cache_frame_2689a9b3a13f6ecb6924457b477eb87f_28 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_2689a9b3a13f6ecb6924457b477eb87f_28 = MAKE_FUNCTION_FRAME(codeobj_2689a9b3a13f6ecb6924457b477eb87f, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_2689a9b3a13f6ecb6924457b477eb87f_28->m_type_description == NULL);
        frame_2689a9b3a13f6ecb6924457b477eb87f_28 = cache_frame_2689a9b3a13f6ecb6924457b477eb87f_28;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_2689a9b3a13f6ecb6924457b477eb87f_28);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_2689a9b3a13f6ecb6924457b477eb87f_28) == 2); // Frame stack

        // Framed code:
        {
            PyObject *tmp_called_instance_10;
            PyObject *tmp_args_element_value_42;
            tmp_called_instance_10 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__27__AbstractInterval_1855, mod_consts[43]);

            if (tmp_called_instance_10 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_10 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_called_instance_10 == NULL)) {
                        tmp_called_instance_10 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
                    }

                    if (tmp_called_instance_10 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1856;
                        type_description_2 = "o";
                        goto frame_exception_exit_28;
                    }
                    Py_INCREF(tmp_called_instance_10);
                } else {
                    goto frame_exception_exit_28;
                }
            }



            tmp_args_element_value_42 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__99__expression_adaptations();

            frame_2689a9b3a13f6ecb6924457b477eb87f_28->m_frame.f_lineno = 1856;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_10, mod_consts[467], tmp_args_element_value_42);
            Py_DECREF(tmp_called_instance_10);
            Py_DECREF(tmp_args_element_value_42);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1856;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__27__AbstractInterval_1855, mod_consts[2], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1857;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }
        }
        {
            nuitka_bool tmp_condition_result_181;
            PyObject *tmp_called_value_93;
            PyObject *tmp_args_element_value_43;
            PyObject *tmp_called_value_94;
            PyObject *tmp_args_element_value_44;
            tmp_res = MAPPING_HAS_ITEM(locals_sqlalchemy$sql$sqltypes$$$class__27__AbstractInterval_1855, mod_consts[420]);

            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1874;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }
            tmp_condition_result_181 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_181 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_72;
            } else {
                goto condexpr_false_72;
            }
            condexpr_true_72:;
            tmp_called_value_93 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__27__AbstractInterval_1855, mod_consts[420]);

            if (unlikely(tmp_called_value_93 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[420]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 1874;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }

            if (tmp_called_value_93 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1874;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }


            tmp_args_element_value_43 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__100__type_affinity();

            frame_2689a9b3a13f6ecb6924457b477eb87f_28->m_frame.f_lineno = 1874;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_93, tmp_args_element_value_43);
            Py_DECREF(tmp_called_value_93);
            Py_DECREF(tmp_args_element_value_43);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1874;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }
            goto condexpr_end_72;
            condexpr_false_72:;
            tmp_called_value_94 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_44 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__100__type_affinity();

            frame_2689a9b3a13f6ecb6924457b477eb87f_28->m_frame.f_lineno = 1874;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_94, tmp_args_element_value_44);
            Py_DECREF(tmp_args_element_value_44);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1874;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }
            condexpr_end_72:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__27__AbstractInterval_1855, mod_consts[1], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1875;
                type_description_2 = "o";
                goto frame_exception_exit_28;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__101_coerce_compared_value();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__27__AbstractInterval_1855, mod_consts[120], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1878;
            type_description_2 = "o";
            goto frame_exception_exit_28;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_2689a9b3a13f6ecb6924457b477eb87f_28);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_27;

        frame_exception_exit_28:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_2689a9b3a13f6ecb6924457b477eb87f_28);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_2689a9b3a13f6ecb6924457b477eb87f_28, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_2689a9b3a13f6ecb6924457b477eb87f_28->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_2689a9b3a13f6ecb6924457b477eb87f_28, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_2689a9b3a13f6ecb6924457b477eb87f_28,
            type_description_2,
            outline_26_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_2689a9b3a13f6ecb6924457b477eb87f_28 == cache_frame_2689a9b3a13f6ecb6924457b477eb87f_28) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_2689a9b3a13f6ecb6924457b477eb87f_28);
            cache_frame_2689a9b3a13f6ecb6924457b477eb87f_28 = NULL;
        }

        assertFrameObject(frame_2689a9b3a13f6ecb6924457b477eb87f_28);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_27;

        frame_no_exception_27:;
        goto skip_nested_handling_27;
        nested_frame_exit_27:;

        goto try_except_handler_81;
        skip_nested_handling_27:;
        {
            nuitka_bool tmp_condition_result_182;
            PyObject *tmp_cmp_expr_left_27;
            PyObject *tmp_cmp_expr_right_27;
            CHECK_OBJECT(tmp_class_creation_23__bases);
            tmp_cmp_expr_left_27 = tmp_class_creation_23__bases;
            CHECK_OBJECT(tmp_class_creation_23__bases_orig);
            tmp_cmp_expr_right_27 = tmp_class_creation_23__bases_orig;
            tmp_condition_result_182 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_27, tmp_cmp_expr_right_27);
            if (tmp_condition_result_182 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1855;

                goto try_except_handler_81;
            }
            if (tmp_condition_result_182 == NUITKA_BOOL_TRUE) {
                goto branch_yes_110;
            } else {
                goto branch_no_110;
            }
            assert(tmp_condition_result_182 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_110:;
        CHECK_OBJECT(tmp_class_creation_23__bases_orig);
        tmp_dictset_value = tmp_class_creation_23__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__27__AbstractInterval_1855, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1855;

            goto try_except_handler_81;
        }
        branch_no_110:;
        {
            PyObject *tmp_assign_source_242;
            PyObject *tmp_called_value_95;
            PyObject *tmp_args_value_54;
            PyObject *tmp_tuple_element_106;
            PyObject *tmp_kwargs_value_54;
            CHECK_OBJECT(tmp_class_creation_23__metaclass);
            tmp_called_value_95 = tmp_class_creation_23__metaclass;
            tmp_tuple_element_106 = mod_consts[271];
            tmp_args_value_54 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_54, 0, tmp_tuple_element_106);
            CHECK_OBJECT(tmp_class_creation_23__bases);
            tmp_tuple_element_106 = tmp_class_creation_23__bases;
            PyTuple_SET_ITEM0(tmp_args_value_54, 1, tmp_tuple_element_106);
            tmp_tuple_element_106 = locals_sqlalchemy$sql$sqltypes$$$class__27__AbstractInterval_1855;
            PyTuple_SET_ITEM0(tmp_args_value_54, 2, tmp_tuple_element_106);
            CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
            tmp_kwargs_value_54 = tmp_class_creation_23__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 1855;
            tmp_assign_source_242 = CALL_FUNCTION(tmp_called_value_95, tmp_args_value_54, tmp_kwargs_value_54);
            Py_DECREF(tmp_args_value_54);
            if (tmp_assign_source_242 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1855;

                goto try_except_handler_81;
            }
            assert(outline_26_var___class__ == NULL);
            outline_26_var___class__ = tmp_assign_source_242;
        }
        CHECK_OBJECT(outline_26_var___class__);
        tmp_assign_source_241 = outline_26_var___class__;
        Py_INCREF(tmp_assign_source_241);
        goto try_return_handler_81;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_81:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__27__AbstractInterval_1855);
        locals_sqlalchemy$sql$sqltypes$$$class__27__AbstractInterval_1855 = NULL;
        goto try_return_handler_80;
        // Exception handler code:
        try_except_handler_81:;
        exception_keeper_type_79 = exception_type;
        exception_keeper_value_79 = exception_value;
        exception_keeper_tb_79 = exception_tb;
        exception_keeper_lineno_79 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__27__AbstractInterval_1855);
        locals_sqlalchemy$sql$sqltypes$$$class__27__AbstractInterval_1855 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_79;
        exception_value = exception_keeper_value_79;
        exception_tb = exception_keeper_tb_79;
        exception_lineno = exception_keeper_lineno_79;

        goto try_except_handler_80;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_80:;
        CHECK_OBJECT(outline_26_var___class__);
        Py_DECREF(outline_26_var___class__);
        outline_26_var___class__ = NULL;
        goto outline_result_27;
        // Exception handler code:
        try_except_handler_80:;
        exception_keeper_type_80 = exception_type;
        exception_keeper_value_80 = exception_value;
        exception_keeper_tb_80 = exception_tb;
        exception_keeper_lineno_80 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_80;
        exception_value = exception_keeper_value_80;
        exception_tb = exception_keeper_tb_80;
        exception_lineno = exception_keeper_lineno_80;

        goto outline_exception_27;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_27:;
        exception_lineno = 1855;
        goto try_except_handler_79;
        outline_result_27:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[271], tmp_assign_source_241);
    }
    goto try_end_27;
    // Exception handler code:
    try_except_handler_79:;
    exception_keeper_type_81 = exception_type;
    exception_keeper_value_81 = exception_value;
    exception_keeper_tb_81 = exception_tb;
    exception_keeper_lineno_81 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_23__bases_orig);
    tmp_class_creation_23__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_23__bases);
    tmp_class_creation_23__bases = NULL;
    Py_XDECREF(tmp_class_creation_23__class_decl_dict);
    tmp_class_creation_23__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_23__metaclass);
    tmp_class_creation_23__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_23__prepared);
    tmp_class_creation_23__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_81;
    exception_value = exception_keeper_value_81;
    exception_tb = exception_keeper_tb_81;
    exception_lineno = exception_keeper_lineno_81;

    goto frame_exception_exit_1;
    // End of try:
    try_end_27:;
    CHECK_OBJECT(tmp_class_creation_23__bases_orig);
    Py_DECREF(tmp_class_creation_23__bases_orig);
    tmp_class_creation_23__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_23__bases);
    Py_DECREF(tmp_class_creation_23__bases);
    tmp_class_creation_23__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
    Py_DECREF(tmp_class_creation_23__class_decl_dict);
    tmp_class_creation_23__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_23__metaclass);
    Py_DECREF(tmp_class_creation_23__metaclass);
    tmp_class_creation_23__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_23__prepared);
    Py_DECREF(tmp_class_creation_23__prepared);
    tmp_class_creation_23__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_243;
        PyObject *tmp_tuple_element_107;
        tmp_tuple_element_107 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[391]);

        if (unlikely(tmp_tuple_element_107 == NULL)) {
            tmp_tuple_element_107 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[391]);
        }

        if (tmp_tuple_element_107 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1883;

            goto try_except_handler_82;
        }
        tmp_assign_source_243 = PyTuple_New(3);
        PyTuple_SET_ITEM0(tmp_assign_source_243, 0, tmp_tuple_element_107);
        tmp_tuple_element_107 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[271]);

        if (unlikely(tmp_tuple_element_107 == NULL)) {
            tmp_tuple_element_107 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[271]);
        }

        if (tmp_tuple_element_107 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1883;

            goto tuple_build_exception_37;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_243, 1, tmp_tuple_element_107);
        tmp_tuple_element_107 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[396]);

        if (unlikely(tmp_tuple_element_107 == NULL)) {
            tmp_tuple_element_107 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[396]);
        }

        if (tmp_tuple_element_107 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1883;

            goto tuple_build_exception_37;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_243, 2, tmp_tuple_element_107);
        goto tuple_build_noexception_37;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_37:;
        Py_DECREF(tmp_assign_source_243);
        goto try_except_handler_82;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_37:;
        assert(tmp_class_creation_24__bases_orig == NULL);
        tmp_class_creation_24__bases_orig = tmp_assign_source_243;
    }
    {
        PyObject *tmp_assign_source_244;
        PyObject *tmp_dircall_arg1_28;
        CHECK_OBJECT(tmp_class_creation_24__bases_orig);
        tmp_dircall_arg1_28 = tmp_class_creation_24__bases_orig;
        Py_INCREF(tmp_dircall_arg1_28);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_28};
            tmp_assign_source_244 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_244 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1883;

            goto try_except_handler_82;
        }
        assert(tmp_class_creation_24__bases == NULL);
        tmp_class_creation_24__bases = tmp_assign_source_244;
    }
    {
        PyObject *tmp_assign_source_245;
        tmp_assign_source_245 = PyDict_New();
        assert(tmp_class_creation_24__class_decl_dict == NULL);
        tmp_class_creation_24__class_decl_dict = tmp_assign_source_245;
    }
    {
        PyObject *tmp_assign_source_246;
        PyObject *tmp_metaclass_value_28;
        bool tmp_condition_result_183;
        PyObject *tmp_key_value_82;
        PyObject *tmp_dict_arg_value_82;
        PyObject *tmp_dict_arg_value_83;
        PyObject *tmp_key_value_83;
        nuitka_bool tmp_condition_result_184;
        int tmp_truth_name_30;
        PyObject *tmp_type_arg_55;
        PyObject *tmp_expression_value_145;
        PyObject *tmp_subscript_value_28;
        PyObject *tmp_bases_value_28;
        tmp_key_value_82 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
        tmp_dict_arg_value_82 = tmp_class_creation_24__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_82, tmp_key_value_82);
        assert(!(tmp_res == -1));
        tmp_condition_result_183 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_183 != false) {
            goto condexpr_true_73;
        } else {
            goto condexpr_false_73;
        }
        condexpr_true_73:;
        CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
        tmp_dict_arg_value_83 = tmp_class_creation_24__class_decl_dict;
        tmp_key_value_83 = mod_consts[410];
        tmp_metaclass_value_28 = DICT_GET_ITEM0(tmp_dict_arg_value_83, tmp_key_value_83);
        if (tmp_metaclass_value_28 == NULL) {
            tmp_metaclass_value_28 = Py_None;
        }
        assert(!(tmp_metaclass_value_28 == NULL));
        Py_INCREF(tmp_metaclass_value_28);
        goto condexpr_end_73;
        condexpr_false_73:;
        CHECK_OBJECT(tmp_class_creation_24__bases);
        tmp_truth_name_30 = CHECK_IF_TRUE(tmp_class_creation_24__bases);
        if (tmp_truth_name_30 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1883;

            goto try_except_handler_82;
        }
        tmp_condition_result_184 = tmp_truth_name_30 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_184 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_74;
        } else {
            goto condexpr_false_74;
        }
        condexpr_true_74:;
        CHECK_OBJECT(tmp_class_creation_24__bases);
        tmp_expression_value_145 = tmp_class_creation_24__bases;
        tmp_subscript_value_28 = mod_consts[52];
        tmp_type_arg_55 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_145, tmp_subscript_value_28, 0);
        if (tmp_type_arg_55 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1883;

            goto try_except_handler_82;
        }
        tmp_metaclass_value_28 = BUILTIN_TYPE1(tmp_type_arg_55);
        Py_DECREF(tmp_type_arg_55);
        if (tmp_metaclass_value_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1883;

            goto try_except_handler_82;
        }
        goto condexpr_end_74;
        condexpr_false_74:;
        tmp_metaclass_value_28 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_28);
        condexpr_end_74:;
        condexpr_end_73:;
        CHECK_OBJECT(tmp_class_creation_24__bases);
        tmp_bases_value_28 = tmp_class_creation_24__bases;
        tmp_assign_source_246 = SELECT_METACLASS(tmp_metaclass_value_28, tmp_bases_value_28);
        Py_DECREF(tmp_metaclass_value_28);
        if (tmp_assign_source_246 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1883;

            goto try_except_handler_82;
        }
        assert(tmp_class_creation_24__metaclass == NULL);
        tmp_class_creation_24__metaclass = tmp_assign_source_246;
    }
    {
        bool tmp_condition_result_185;
        PyObject *tmp_key_value_84;
        PyObject *tmp_dict_arg_value_84;
        tmp_key_value_84 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
        tmp_dict_arg_value_84 = tmp_class_creation_24__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_84, tmp_key_value_84);
        assert(!(tmp_res == -1));
        tmp_condition_result_185 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_185 != false) {
            goto branch_yes_111;
        } else {
            goto branch_no_111;
        }
    }
    branch_yes_111:;
    CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_24__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1883;

        goto try_except_handler_82;
    }
    branch_no_111:;
    {
        nuitka_bool tmp_condition_result_186;
        PyObject *tmp_expression_value_146;
        CHECK_OBJECT(tmp_class_creation_24__metaclass);
        tmp_expression_value_146 = tmp_class_creation_24__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_146, mod_consts[411]);
        tmp_condition_result_186 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_186 == NUITKA_BOOL_TRUE) {
            goto branch_yes_112;
        } else {
            goto branch_no_112;
        }
    }
    branch_yes_112:;
    {
        PyObject *tmp_assign_source_247;
        PyObject *tmp_called_value_96;
        PyObject *tmp_expression_value_147;
        PyObject *tmp_args_value_55;
        PyObject *tmp_tuple_element_108;
        PyObject *tmp_kwargs_value_55;
        CHECK_OBJECT(tmp_class_creation_24__metaclass);
        tmp_expression_value_147 = tmp_class_creation_24__metaclass;
        tmp_called_value_96 = LOOKUP_ATTRIBUTE(tmp_expression_value_147, mod_consts[411]);
        if (tmp_called_value_96 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1883;

            goto try_except_handler_82;
        }
        tmp_tuple_element_108 = mod_consts[76];
        tmp_args_value_55 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_55, 0, tmp_tuple_element_108);
        CHECK_OBJECT(tmp_class_creation_24__bases);
        tmp_tuple_element_108 = tmp_class_creation_24__bases;
        PyTuple_SET_ITEM0(tmp_args_value_55, 1, tmp_tuple_element_108);
        CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
        tmp_kwargs_value_55 = tmp_class_creation_24__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 1883;
        tmp_assign_source_247 = CALL_FUNCTION(tmp_called_value_96, tmp_args_value_55, tmp_kwargs_value_55);
        Py_DECREF(tmp_called_value_96);
        Py_DECREF(tmp_args_value_55);
        if (tmp_assign_source_247 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1883;

            goto try_except_handler_82;
        }
        assert(tmp_class_creation_24__prepared == NULL);
        tmp_class_creation_24__prepared = tmp_assign_source_247;
    }
    {
        bool tmp_condition_result_187;
        PyObject *tmp_operand_value_28;
        PyObject *tmp_expression_value_148;
        CHECK_OBJECT(tmp_class_creation_24__prepared);
        tmp_expression_value_148 = tmp_class_creation_24__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_148, mod_consts[413]);
        tmp_operand_value_28 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_28);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1883;

            goto try_except_handler_82;
        }
        tmp_condition_result_187 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_187 != false) {
            goto branch_yes_113;
        } else {
            goto branch_no_113;
        }
    }
    branch_yes_113:;
    {
        PyObject *tmp_raise_type_28;
        PyObject *tmp_raise_value_28;
        PyObject *tmp_left_value_28;
        PyObject *tmp_right_value_28;
        PyObject *tmp_tuple_element_109;
        PyObject *tmp_getattr_target_28;
        PyObject *tmp_getattr_attr_28;
        PyObject *tmp_getattr_default_28;
        tmp_raise_type_28 = PyExc_TypeError;
        tmp_left_value_28 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_24__metaclass);
        tmp_getattr_target_28 = tmp_class_creation_24__metaclass;
        tmp_getattr_attr_28 = mod_consts[190];
        tmp_getattr_default_28 = mod_consts[415];
        tmp_tuple_element_109 = BUILTIN_GETATTR(tmp_getattr_target_28, tmp_getattr_attr_28, tmp_getattr_default_28);
        if (tmp_tuple_element_109 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1883;

            goto try_except_handler_82;
        }
        tmp_right_value_28 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_149;
            PyObject *tmp_type_arg_56;
            PyTuple_SET_ITEM(tmp_right_value_28, 0, tmp_tuple_element_109);
            CHECK_OBJECT(tmp_class_creation_24__prepared);
            tmp_type_arg_56 = tmp_class_creation_24__prepared;
            tmp_expression_value_149 = BUILTIN_TYPE1(tmp_type_arg_56);
            assert(!(tmp_expression_value_149 == NULL));
            tmp_tuple_element_109 = LOOKUP_ATTRIBUTE(tmp_expression_value_149, mod_consts[190]);
            Py_DECREF(tmp_expression_value_149);
            if (tmp_tuple_element_109 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1883;

                goto tuple_build_exception_38;
            }
            PyTuple_SET_ITEM(tmp_right_value_28, 1, tmp_tuple_element_109);
        }
        goto tuple_build_noexception_38;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_38:;
        Py_DECREF(tmp_right_value_28);
        goto try_except_handler_82;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_38:;
        tmp_raise_value_28 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_28, tmp_right_value_28);
        Py_DECREF(tmp_right_value_28);
        if (tmp_raise_value_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1883;

            goto try_except_handler_82;
        }
        exception_type = tmp_raise_type_28;
        Py_INCREF(tmp_raise_type_28);
        exception_value = tmp_raise_value_28;
        exception_lineno = 1883;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_82;
    }
    branch_no_113:;
    goto branch_end_112;
    branch_no_112:;
    {
        PyObject *tmp_assign_source_248;
        tmp_assign_source_248 = PyDict_New();
        assert(tmp_class_creation_24__prepared == NULL);
        tmp_class_creation_24__prepared = tmp_assign_source_248;
    }
    branch_end_112:;
    {
        PyObject *tmp_assign_source_249;
        {
            PyObject *tmp_set_locals_28;
            CHECK_OBJECT(tmp_class_creation_24__prepared);
            tmp_set_locals_28 = tmp_class_creation_24__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__28_Interval_1883 = tmp_set_locals_28;
            Py_INCREF(tmp_set_locals_28);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_Interval_1883, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1883;

            goto try_except_handler_84;
        }
        tmp_dictset_value = mod_consts[596];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_Interval_1883, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1883;

            goto try_except_handler_84;
        }
        tmp_dictset_value = mod_consts[76];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_Interval_1883, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1883;

            goto try_except_handler_84;
        }
        if (isFrameUnusable(cache_frame_359a6b31ccc171975e0deef2d02d0d82_29)) {
            Py_XDECREF(cache_frame_359a6b31ccc171975e0deef2d02d0d82_29);

#if _DEBUG_REFCOUNTS
            if (cache_frame_359a6b31ccc171975e0deef2d02d0d82_29 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_359a6b31ccc171975e0deef2d02d0d82_29 = MAKE_FUNCTION_FRAME(codeobj_359a6b31ccc171975e0deef2d02d0d82, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_359a6b31ccc171975e0deef2d02d0d82_29->m_type_description == NULL);
        frame_359a6b31ccc171975e0deef2d02d0d82_29 = cache_frame_359a6b31ccc171975e0deef2d02d0d82_29;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_359a6b31ccc171975e0deef2d02d0d82_29);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_359a6b31ccc171975e0deef2d02d0d82_29) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_Interval_1883, mod_consts[103]);

        if (tmp_dictset_value == NULL) {
            if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                tmp_dictset_value = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[103]);

                if (unlikely(tmp_dictset_value == NULL)) {
                    tmp_dictset_value = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[103]);
                }

                if (tmp_dictset_value == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 1901;
                    type_description_2 = "o";
                    goto frame_exception_exit_29;
                }
                Py_INCREF(tmp_dictset_value);
            } else {
                goto frame_exception_exit_29;
            }
        }

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_Interval_1883, mod_consts[143], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1901;
            type_description_2 = "o";
            goto frame_exception_exit_29;
        }
        {
            PyObject *tmp_called_instance_11;
            PyObject *tmp_expression_value_150;
            tmp_expression_value_150 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_Interval_1883, mod_consts[101]);

            if (tmp_expression_value_150 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_150 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[101]);

                    if (unlikely(tmp_expression_value_150 == NULL)) {
                        tmp_expression_value_150 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[101]);
                    }

                    if (tmp_expression_value_150 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 1902;
                        type_description_2 = "o";
                        goto frame_exception_exit_29;
                    }
                    Py_INCREF(tmp_expression_value_150);
                } else {
                    goto frame_exception_exit_29;
                }
            }

            tmp_called_instance_11 = LOOKUP_ATTRIBUTE(tmp_expression_value_150, mod_consts[102]);
            Py_DECREF(tmp_expression_value_150);
            if (tmp_called_instance_11 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1902;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }
            frame_359a6b31ccc171975e0deef2d02d0d82_29->m_frame.f_lineno = 1902;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(
                tmp_called_instance_11,
                mod_consts[597],
                PyTuple_GET_ITEM(mod_consts[598], 0)
            );

            Py_DECREF(tmp_called_instance_11);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1902;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_Interval_1883, mod_consts[272], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1902;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }
        }
        {
            PyObject *tmp_defaults_15;
            tmp_defaults_15 = mod_consts[599];
            Py_INCREF(tmp_defaults_15);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__102___init__(tmp_defaults_15);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_Interval_1883, mod_consts[66], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1904;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }
        }
        {
            nuitka_bool tmp_condition_result_188;
            PyObject *tmp_called_value_97;
            PyObject *tmp_args_element_value_45;
            PyObject *tmp_called_value_98;
            PyObject *tmp_args_element_value_46;
            tmp_res = MAPPING_HAS_ITEM(locals_sqlalchemy$sql$sqltypes$$$class__28_Interval_1883, mod_consts[420]);

            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1926;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }
            tmp_condition_result_188 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_188 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_75;
            } else {
                goto condexpr_false_75;
            }
            condexpr_true_75:;
            tmp_called_value_97 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_Interval_1883, mod_consts[420]);

            if (unlikely(tmp_called_value_97 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[420]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 1926;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }

            if (tmp_called_value_97 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1926;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }


            tmp_args_element_value_45 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__103_python_type();

            frame_359a6b31ccc171975e0deef2d02d0d82_29->m_frame.f_lineno = 1926;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_97, tmp_args_element_value_45);
            Py_DECREF(tmp_called_value_97);
            Py_DECREF(tmp_args_element_value_45);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1926;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }
            goto condexpr_end_75;
            condexpr_false_75:;
            tmp_called_value_98 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_46 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__103_python_type();

            frame_359a6b31ccc171975e0deef2d02d0d82_29->m_frame.f_lineno = 1926;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_98, tmp_args_element_value_46);
            Py_DECREF(tmp_args_element_value_46);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1926;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }
            condexpr_end_75:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_Interval_1883, mod_consts[236], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1927;
                type_description_2 = "o";
                goto frame_exception_exit_29;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__104_adapt_to_emulated();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_Interval_1883, mod_consts[558], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1930;
            type_description_2 = "o";
            goto frame_exception_exit_29;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__105_bind_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_Interval_1883, mod_consts[232], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1933;
            type_description_2 = "o";
            goto frame_exception_exit_29;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__106_result_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_Interval_1883, mod_consts[233], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1952;
            type_description_2 = "o";
            goto frame_exception_exit_29;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_359a6b31ccc171975e0deef2d02d0d82_29);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_28;

        frame_exception_exit_29:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_359a6b31ccc171975e0deef2d02d0d82_29);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_359a6b31ccc171975e0deef2d02d0d82_29, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_359a6b31ccc171975e0deef2d02d0d82_29->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_359a6b31ccc171975e0deef2d02d0d82_29, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_359a6b31ccc171975e0deef2d02d0d82_29,
            type_description_2,
            outline_27_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_359a6b31ccc171975e0deef2d02d0d82_29 == cache_frame_359a6b31ccc171975e0deef2d02d0d82_29) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_359a6b31ccc171975e0deef2d02d0d82_29);
            cache_frame_359a6b31ccc171975e0deef2d02d0d82_29 = NULL;
        }

        assertFrameObject(frame_359a6b31ccc171975e0deef2d02d0d82_29);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_28;

        frame_no_exception_28:;
        goto skip_nested_handling_28;
        nested_frame_exit_28:;

        goto try_except_handler_84;
        skip_nested_handling_28:;
        {
            nuitka_bool tmp_condition_result_189;
            PyObject *tmp_cmp_expr_left_28;
            PyObject *tmp_cmp_expr_right_28;
            CHECK_OBJECT(tmp_class_creation_24__bases);
            tmp_cmp_expr_left_28 = tmp_class_creation_24__bases;
            CHECK_OBJECT(tmp_class_creation_24__bases_orig);
            tmp_cmp_expr_right_28 = tmp_class_creation_24__bases_orig;
            tmp_condition_result_189 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_28, tmp_cmp_expr_right_28);
            if (tmp_condition_result_189 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1883;

                goto try_except_handler_84;
            }
            if (tmp_condition_result_189 == NUITKA_BOOL_TRUE) {
                goto branch_yes_114;
            } else {
                goto branch_no_114;
            }
            assert(tmp_condition_result_189 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_114:;
        CHECK_OBJECT(tmp_class_creation_24__bases_orig);
        tmp_dictset_value = tmp_class_creation_24__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__28_Interval_1883, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1883;

            goto try_except_handler_84;
        }
        branch_no_114:;
        {
            PyObject *tmp_assign_source_250;
            PyObject *tmp_called_value_99;
            PyObject *tmp_args_value_56;
            PyObject *tmp_tuple_element_110;
            PyObject *tmp_kwargs_value_56;
            CHECK_OBJECT(tmp_class_creation_24__metaclass);
            tmp_called_value_99 = tmp_class_creation_24__metaclass;
            tmp_tuple_element_110 = mod_consts[76];
            tmp_args_value_56 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_56, 0, tmp_tuple_element_110);
            CHECK_OBJECT(tmp_class_creation_24__bases);
            tmp_tuple_element_110 = tmp_class_creation_24__bases;
            PyTuple_SET_ITEM0(tmp_args_value_56, 1, tmp_tuple_element_110);
            tmp_tuple_element_110 = locals_sqlalchemy$sql$sqltypes$$$class__28_Interval_1883;
            PyTuple_SET_ITEM0(tmp_args_value_56, 2, tmp_tuple_element_110);
            CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
            tmp_kwargs_value_56 = tmp_class_creation_24__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 1883;
            tmp_assign_source_250 = CALL_FUNCTION(tmp_called_value_99, tmp_args_value_56, tmp_kwargs_value_56);
            Py_DECREF(tmp_args_value_56);
            if (tmp_assign_source_250 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1883;

                goto try_except_handler_84;
            }
            assert(outline_27_var___class__ == NULL);
            outline_27_var___class__ = tmp_assign_source_250;
        }
        CHECK_OBJECT(outline_27_var___class__);
        tmp_assign_source_249 = outline_27_var___class__;
        Py_INCREF(tmp_assign_source_249);
        goto try_return_handler_84;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_84:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__28_Interval_1883);
        locals_sqlalchemy$sql$sqltypes$$$class__28_Interval_1883 = NULL;
        goto try_return_handler_83;
        // Exception handler code:
        try_except_handler_84:;
        exception_keeper_type_82 = exception_type;
        exception_keeper_value_82 = exception_value;
        exception_keeper_tb_82 = exception_tb;
        exception_keeper_lineno_82 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__28_Interval_1883);
        locals_sqlalchemy$sql$sqltypes$$$class__28_Interval_1883 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_82;
        exception_value = exception_keeper_value_82;
        exception_tb = exception_keeper_tb_82;
        exception_lineno = exception_keeper_lineno_82;

        goto try_except_handler_83;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_83:;
        CHECK_OBJECT(outline_27_var___class__);
        Py_DECREF(outline_27_var___class__);
        outline_27_var___class__ = NULL;
        goto outline_result_28;
        // Exception handler code:
        try_except_handler_83:;
        exception_keeper_type_83 = exception_type;
        exception_keeper_value_83 = exception_value;
        exception_keeper_tb_83 = exception_tb;
        exception_keeper_lineno_83 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_83;
        exception_value = exception_keeper_value_83;
        exception_tb = exception_keeper_tb_83;
        exception_lineno = exception_keeper_lineno_83;

        goto outline_exception_28;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_28:;
        exception_lineno = 1883;
        goto try_except_handler_82;
        outline_result_28:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[76], tmp_assign_source_249);
    }
    goto try_end_28;
    // Exception handler code:
    try_except_handler_82:;
    exception_keeper_type_84 = exception_type;
    exception_keeper_value_84 = exception_value;
    exception_keeper_tb_84 = exception_tb;
    exception_keeper_lineno_84 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_24__bases_orig);
    tmp_class_creation_24__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_24__bases);
    tmp_class_creation_24__bases = NULL;
    Py_XDECREF(tmp_class_creation_24__class_decl_dict);
    tmp_class_creation_24__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_24__metaclass);
    tmp_class_creation_24__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_24__prepared);
    tmp_class_creation_24__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_84;
    exception_value = exception_keeper_value_84;
    exception_tb = exception_keeper_tb_84;
    exception_lineno = exception_keeper_lineno_84;

    goto frame_exception_exit_1;
    // End of try:
    try_end_28:;
    CHECK_OBJECT(tmp_class_creation_24__bases_orig);
    Py_DECREF(tmp_class_creation_24__bases_orig);
    tmp_class_creation_24__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_24__bases);
    Py_DECREF(tmp_class_creation_24__bases);
    tmp_class_creation_24__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
    Py_DECREF(tmp_class_creation_24__class_decl_dict);
    tmp_class_creation_24__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_24__metaclass);
    Py_DECREF(tmp_class_creation_24__metaclass);
    tmp_class_creation_24__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_24__prepared);
    Py_DECREF(tmp_class_creation_24__prepared);
    tmp_class_creation_24__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_251;
        PyObject *tmp_tuple_element_111;
        tmp_tuple_element_111 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[430]);

        if (unlikely(tmp_tuple_element_111 == NULL)) {
            tmp_tuple_element_111 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[430]);
        }

        if (tmp_tuple_element_111 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1973;

            goto try_except_handler_85;
        }
        tmp_assign_source_251 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_assign_source_251, 0, tmp_tuple_element_111);
        tmp_tuple_element_111 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[398]);

        if (unlikely(tmp_tuple_element_111 == NULL)) {
            tmp_tuple_element_111 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[398]);
        }

        if (tmp_tuple_element_111 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1973;

            goto tuple_build_exception_39;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_251, 1, tmp_tuple_element_111);
        goto tuple_build_noexception_39;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_39:;
        Py_DECREF(tmp_assign_source_251);
        goto try_except_handler_85;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_39:;
        assert(tmp_class_creation_25__bases_orig == NULL);
        tmp_class_creation_25__bases_orig = tmp_assign_source_251;
    }
    {
        PyObject *tmp_assign_source_252;
        PyObject *tmp_dircall_arg1_29;
        CHECK_OBJECT(tmp_class_creation_25__bases_orig);
        tmp_dircall_arg1_29 = tmp_class_creation_25__bases_orig;
        Py_INCREF(tmp_dircall_arg1_29);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_29};
            tmp_assign_source_252 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_252 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1973;

            goto try_except_handler_85;
        }
        assert(tmp_class_creation_25__bases == NULL);
        tmp_class_creation_25__bases = tmp_assign_source_252;
    }
    {
        PyObject *tmp_assign_source_253;
        tmp_assign_source_253 = PyDict_New();
        assert(tmp_class_creation_25__class_decl_dict == NULL);
        tmp_class_creation_25__class_decl_dict = tmp_assign_source_253;
    }
    {
        PyObject *tmp_assign_source_254;
        PyObject *tmp_metaclass_value_29;
        bool tmp_condition_result_190;
        PyObject *tmp_key_value_85;
        PyObject *tmp_dict_arg_value_85;
        PyObject *tmp_dict_arg_value_86;
        PyObject *tmp_key_value_86;
        nuitka_bool tmp_condition_result_191;
        int tmp_truth_name_31;
        PyObject *tmp_type_arg_57;
        PyObject *tmp_expression_value_151;
        PyObject *tmp_subscript_value_29;
        PyObject *tmp_bases_value_29;
        tmp_key_value_85 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
        tmp_dict_arg_value_85 = tmp_class_creation_25__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_85, tmp_key_value_85);
        assert(!(tmp_res == -1));
        tmp_condition_result_190 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_190 != false) {
            goto condexpr_true_76;
        } else {
            goto condexpr_false_76;
        }
        condexpr_true_76:;
        CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
        tmp_dict_arg_value_86 = tmp_class_creation_25__class_decl_dict;
        tmp_key_value_86 = mod_consts[410];
        tmp_metaclass_value_29 = DICT_GET_ITEM0(tmp_dict_arg_value_86, tmp_key_value_86);
        if (tmp_metaclass_value_29 == NULL) {
            tmp_metaclass_value_29 = Py_None;
        }
        assert(!(tmp_metaclass_value_29 == NULL));
        Py_INCREF(tmp_metaclass_value_29);
        goto condexpr_end_76;
        condexpr_false_76:;
        CHECK_OBJECT(tmp_class_creation_25__bases);
        tmp_truth_name_31 = CHECK_IF_TRUE(tmp_class_creation_25__bases);
        if (tmp_truth_name_31 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1973;

            goto try_except_handler_85;
        }
        tmp_condition_result_191 = tmp_truth_name_31 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_191 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_77;
        } else {
            goto condexpr_false_77;
        }
        condexpr_true_77:;
        CHECK_OBJECT(tmp_class_creation_25__bases);
        tmp_expression_value_151 = tmp_class_creation_25__bases;
        tmp_subscript_value_29 = mod_consts[52];
        tmp_type_arg_57 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_151, tmp_subscript_value_29, 0);
        if (tmp_type_arg_57 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1973;

            goto try_except_handler_85;
        }
        tmp_metaclass_value_29 = BUILTIN_TYPE1(tmp_type_arg_57);
        Py_DECREF(tmp_type_arg_57);
        if (tmp_metaclass_value_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1973;

            goto try_except_handler_85;
        }
        goto condexpr_end_77;
        condexpr_false_77:;
        tmp_metaclass_value_29 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_29);
        condexpr_end_77:;
        condexpr_end_76:;
        CHECK_OBJECT(tmp_class_creation_25__bases);
        tmp_bases_value_29 = tmp_class_creation_25__bases;
        tmp_assign_source_254 = SELECT_METACLASS(tmp_metaclass_value_29, tmp_bases_value_29);
        Py_DECREF(tmp_metaclass_value_29);
        if (tmp_assign_source_254 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1973;

            goto try_except_handler_85;
        }
        assert(tmp_class_creation_25__metaclass == NULL);
        tmp_class_creation_25__metaclass = tmp_assign_source_254;
    }
    {
        bool tmp_condition_result_192;
        PyObject *tmp_key_value_87;
        PyObject *tmp_dict_arg_value_87;
        tmp_key_value_87 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
        tmp_dict_arg_value_87 = tmp_class_creation_25__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_87, tmp_key_value_87);
        assert(!(tmp_res == -1));
        tmp_condition_result_192 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_192 != false) {
            goto branch_yes_115;
        } else {
            goto branch_no_115;
        }
    }
    branch_yes_115:;
    CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_25__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1973;

        goto try_except_handler_85;
    }
    branch_no_115:;
    {
        nuitka_bool tmp_condition_result_193;
        PyObject *tmp_expression_value_152;
        CHECK_OBJECT(tmp_class_creation_25__metaclass);
        tmp_expression_value_152 = tmp_class_creation_25__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_152, mod_consts[411]);
        tmp_condition_result_193 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_193 == NUITKA_BOOL_TRUE) {
            goto branch_yes_116;
        } else {
            goto branch_no_116;
        }
    }
    branch_yes_116:;
    {
        PyObject *tmp_assign_source_255;
        PyObject *tmp_called_value_100;
        PyObject *tmp_expression_value_153;
        PyObject *tmp_args_value_57;
        PyObject *tmp_tuple_element_112;
        PyObject *tmp_kwargs_value_57;
        CHECK_OBJECT(tmp_class_creation_25__metaclass);
        tmp_expression_value_153 = tmp_class_creation_25__metaclass;
        tmp_called_value_100 = LOOKUP_ATTRIBUTE(tmp_expression_value_153, mod_consts[411]);
        if (tmp_called_value_100 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1973;

            goto try_except_handler_85;
        }
        tmp_tuple_element_112 = mod_consts[291];
        tmp_args_value_57 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_57, 0, tmp_tuple_element_112);
        CHECK_OBJECT(tmp_class_creation_25__bases);
        tmp_tuple_element_112 = tmp_class_creation_25__bases;
        PyTuple_SET_ITEM0(tmp_args_value_57, 1, tmp_tuple_element_112);
        CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
        tmp_kwargs_value_57 = tmp_class_creation_25__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 1973;
        tmp_assign_source_255 = CALL_FUNCTION(tmp_called_value_100, tmp_args_value_57, tmp_kwargs_value_57);
        Py_DECREF(tmp_called_value_100);
        Py_DECREF(tmp_args_value_57);
        if (tmp_assign_source_255 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1973;

            goto try_except_handler_85;
        }
        assert(tmp_class_creation_25__prepared == NULL);
        tmp_class_creation_25__prepared = tmp_assign_source_255;
    }
    {
        bool tmp_condition_result_194;
        PyObject *tmp_operand_value_29;
        PyObject *tmp_expression_value_154;
        CHECK_OBJECT(tmp_class_creation_25__prepared);
        tmp_expression_value_154 = tmp_class_creation_25__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_154, mod_consts[413]);
        tmp_operand_value_29 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_29);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1973;

            goto try_except_handler_85;
        }
        tmp_condition_result_194 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_194 != false) {
            goto branch_yes_117;
        } else {
            goto branch_no_117;
        }
    }
    branch_yes_117:;
    {
        PyObject *tmp_raise_type_29;
        PyObject *tmp_raise_value_29;
        PyObject *tmp_left_value_29;
        PyObject *tmp_right_value_29;
        PyObject *tmp_tuple_element_113;
        PyObject *tmp_getattr_target_29;
        PyObject *tmp_getattr_attr_29;
        PyObject *tmp_getattr_default_29;
        tmp_raise_type_29 = PyExc_TypeError;
        tmp_left_value_29 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_25__metaclass);
        tmp_getattr_target_29 = tmp_class_creation_25__metaclass;
        tmp_getattr_attr_29 = mod_consts[190];
        tmp_getattr_default_29 = mod_consts[415];
        tmp_tuple_element_113 = BUILTIN_GETATTR(tmp_getattr_target_29, tmp_getattr_attr_29, tmp_getattr_default_29);
        if (tmp_tuple_element_113 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1973;

            goto try_except_handler_85;
        }
        tmp_right_value_29 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_155;
            PyObject *tmp_type_arg_58;
            PyTuple_SET_ITEM(tmp_right_value_29, 0, tmp_tuple_element_113);
            CHECK_OBJECT(tmp_class_creation_25__prepared);
            tmp_type_arg_58 = tmp_class_creation_25__prepared;
            tmp_expression_value_155 = BUILTIN_TYPE1(tmp_type_arg_58);
            assert(!(tmp_expression_value_155 == NULL));
            tmp_tuple_element_113 = LOOKUP_ATTRIBUTE(tmp_expression_value_155, mod_consts[190]);
            Py_DECREF(tmp_expression_value_155);
            if (tmp_tuple_element_113 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1973;

                goto tuple_build_exception_40;
            }
            PyTuple_SET_ITEM(tmp_right_value_29, 1, tmp_tuple_element_113);
        }
        goto tuple_build_noexception_40;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_40:;
        Py_DECREF(tmp_right_value_29);
        goto try_except_handler_85;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_40:;
        tmp_raise_value_29 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_29, tmp_right_value_29);
        Py_DECREF(tmp_right_value_29);
        if (tmp_raise_value_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1973;

            goto try_except_handler_85;
        }
        exception_type = tmp_raise_type_29;
        Py_INCREF(tmp_raise_type_29);
        exception_value = tmp_raise_value_29;
        exception_lineno = 1973;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_85;
    }
    branch_no_117:;
    goto branch_end_116;
    branch_no_116:;
    {
        PyObject *tmp_assign_source_256;
        tmp_assign_source_256 = PyDict_New();
        assert(tmp_class_creation_25__prepared == NULL);
        tmp_class_creation_25__prepared = tmp_assign_source_256;
    }
    branch_end_116:;
    {
        PyObject *tmp_assign_source_257;
        {
            PyObject *tmp_set_locals_29;
            CHECK_OBJECT(tmp_class_creation_25__prepared);
            tmp_set_locals_29 = tmp_class_creation_25__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973 = tmp_set_locals_29;
            Py_INCREF(tmp_set_locals_29);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1973;

            goto try_except_handler_87;
        }
        tmp_dictset_value = mod_consts[605];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1973;

            goto try_except_handler_87;
        }
        tmp_dictset_value = mod_consts[291];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1973;

            goto try_except_handler_87;
        }
        if (isFrameUnusable(cache_frame_d4a26a0482d921abe3cdbc3568d8027f_30)) {
            Py_XDECREF(cache_frame_d4a26a0482d921abe3cdbc3568d8027f_30);

#if _DEBUG_REFCOUNTS
            if (cache_frame_d4a26a0482d921abe3cdbc3568d8027f_30 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_d4a26a0482d921abe3cdbc3568d8027f_30 = MAKE_FUNCTION_FRAME(codeobj_d4a26a0482d921abe3cdbc3568d8027f, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_d4a26a0482d921abe3cdbc3568d8027f_30->m_type_description == NULL);
        frame_d4a26a0482d921abe3cdbc3568d8027f_30 = cache_frame_d4a26a0482d921abe3cdbc3568d8027f_30;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_d4a26a0482d921abe3cdbc3568d8027f_30);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_d4a26a0482d921abe3cdbc3568d8027f_30) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[291];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2158;
            type_description_2 = "o";
            goto frame_exception_exit_30;
        }
        tmp_dictset_value = Py_False;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973, mod_consts[606], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2160;
            type_description_2 = "o";
            goto frame_exception_exit_30;
        }
        {
            PyObject *tmp_called_instance_12;
            tmp_called_instance_12 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973, mod_consts[43]);

            if (tmp_called_instance_12 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_12 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_called_instance_12 == NULL)) {
                        tmp_called_instance_12 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
                    }

                    if (tmp_called_instance_12 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2161;
                        type_description_2 = "o";
                        goto frame_exception_exit_30;
                    }
                    Py_INCREF(tmp_called_instance_12);
                } else {
                    goto frame_exception_exit_30;
                }
            }

            frame_d4a26a0482d921abe3cdbc3568d8027f_30->m_frame.f_lineno = 2161;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(
                tmp_called_instance_12,
                mod_consts[607],
                PyTuple_GET_ITEM(mod_consts[608], 0)
            );

            Py_DECREF(tmp_called_instance_12);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2161;
                type_description_2 = "o";
                goto frame_exception_exit_30;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973, mod_consts[320], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2161;
                type_description_2 = "o";
                goto frame_exception_exit_30;
            }
        }
        {
            PyObject *tmp_defaults_16;
            tmp_defaults_16 = mod_consts[493];
            Py_INCREF(tmp_defaults_16);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__107___init__(tmp_defaults_16);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973, mod_consts[66], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2205;
                type_description_2 = "o";
                goto frame_exception_exit_30;
            }
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_258;
            PyObject *tmp_tuple_element_114;
            tmp_tuple_element_114 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973, mod_consts[398]);

            if (tmp_tuple_element_114 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_tuple_element_114 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[398]);

                    if (unlikely(tmp_tuple_element_114 == NULL)) {
                        tmp_tuple_element_114 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[398]);
                    }

                    if (tmp_tuple_element_114 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2230;
                        type_description_2 = "o";
                        goto try_except_handler_88;
                    }
                    Py_INCREF(tmp_tuple_element_114);
                } else {
                    goto try_except_handler_88;
                }
            }

            tmp_assign_source_258 = PyTuple_New(1);
            PyTuple_SET_ITEM(tmp_assign_source_258, 0, tmp_tuple_element_114);
            assert(tmp_JSON$class_creation_1__bases_orig == NULL);
            tmp_JSON$class_creation_1__bases_orig = tmp_assign_source_258;
        }
        {
            PyObject *tmp_assign_source_259;
            PyObject *tmp_dircall_arg1_30;
            CHECK_OBJECT(tmp_JSON$class_creation_1__bases_orig);
            tmp_dircall_arg1_30 = tmp_JSON$class_creation_1__bases_orig;
            Py_INCREF(tmp_dircall_arg1_30);

            {
                PyObject *dir_call_args[] = {tmp_dircall_arg1_30};
                tmp_assign_source_259 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
            }
            if (tmp_assign_source_259 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2230;
                type_description_2 = "o";
                goto try_except_handler_88;
            }
            assert(tmp_JSON$class_creation_1__bases == NULL);
            tmp_JSON$class_creation_1__bases = tmp_assign_source_259;
        }
        {
            PyObject *tmp_assign_source_260;
            tmp_assign_source_260 = PyDict_New();
            assert(tmp_JSON$class_creation_1__class_decl_dict == NULL);
            tmp_JSON$class_creation_1__class_decl_dict = tmp_assign_source_260;
        }
        {
            PyObject *tmp_assign_source_261;
            PyObject *tmp_metaclass_value_30;
            bool tmp_condition_result_195;
            PyObject *tmp_key_value_88;
            PyObject *tmp_dict_arg_value_88;
            PyObject *tmp_dict_arg_value_89;
            PyObject *tmp_key_value_89;
            nuitka_bool tmp_condition_result_196;
            int tmp_truth_name_32;
            PyObject *tmp_type_arg_59;
            PyObject *tmp_expression_value_156;
            PyObject *tmp_subscript_value_30;
            PyObject *tmp_bases_value_30;
            tmp_key_value_88 = mod_consts[410];
            CHECK_OBJECT(tmp_JSON$class_creation_1__class_decl_dict);
            tmp_dict_arg_value_88 = tmp_JSON$class_creation_1__class_decl_dict;
            tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_88, tmp_key_value_88);
            assert(!(tmp_res == -1));
            tmp_condition_result_195 = (tmp_res != 0) ? true : false;
            if (tmp_condition_result_195 != false) {
                goto condexpr_true_78;
            } else {
                goto condexpr_false_78;
            }
            condexpr_true_78:;
            CHECK_OBJECT(tmp_JSON$class_creation_1__class_decl_dict);
            tmp_dict_arg_value_89 = tmp_JSON$class_creation_1__class_decl_dict;
            tmp_key_value_89 = mod_consts[410];
            tmp_metaclass_value_30 = DICT_GET_ITEM0(tmp_dict_arg_value_89, tmp_key_value_89);
            if (tmp_metaclass_value_30 == NULL) {
                tmp_metaclass_value_30 = Py_None;
            }
            assert(!(tmp_metaclass_value_30 == NULL));
            Py_INCREF(tmp_metaclass_value_30);
            goto condexpr_end_78;
            condexpr_false_78:;
            CHECK_OBJECT(tmp_JSON$class_creation_1__bases);
            tmp_truth_name_32 = CHECK_IF_TRUE(tmp_JSON$class_creation_1__bases);
            if (tmp_truth_name_32 == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2230;
                type_description_2 = "o";
                goto try_except_handler_88;
            }
            tmp_condition_result_196 = tmp_truth_name_32 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
            if (tmp_condition_result_196 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_79;
            } else {
                goto condexpr_false_79;
            }
            condexpr_true_79:;
            CHECK_OBJECT(tmp_JSON$class_creation_1__bases);
            tmp_expression_value_156 = tmp_JSON$class_creation_1__bases;
            tmp_subscript_value_30 = mod_consts[52];
            tmp_type_arg_59 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_156, tmp_subscript_value_30, 0);
            if (tmp_type_arg_59 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2230;
                type_description_2 = "o";
                goto try_except_handler_88;
            }
            tmp_metaclass_value_30 = BUILTIN_TYPE1(tmp_type_arg_59);
            Py_DECREF(tmp_type_arg_59);
            if (tmp_metaclass_value_30 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2230;
                type_description_2 = "o";
                goto try_except_handler_88;
            }
            goto condexpr_end_79;
            condexpr_false_79:;
            tmp_metaclass_value_30 = (PyObject *)&PyType_Type;
            Py_INCREF(tmp_metaclass_value_30);
            condexpr_end_79:;
            condexpr_end_78:;
            CHECK_OBJECT(tmp_JSON$class_creation_1__bases);
            tmp_bases_value_30 = tmp_JSON$class_creation_1__bases;
            tmp_assign_source_261 = SELECT_METACLASS(tmp_metaclass_value_30, tmp_bases_value_30);
            Py_DECREF(tmp_metaclass_value_30);
            if (tmp_assign_source_261 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2230;
                type_description_2 = "o";
                goto try_except_handler_88;
            }
            assert(tmp_JSON$class_creation_1__metaclass == NULL);
            tmp_JSON$class_creation_1__metaclass = tmp_assign_source_261;
        }
        {
            bool tmp_condition_result_197;
            PyObject *tmp_key_value_90;
            PyObject *tmp_dict_arg_value_90;
            tmp_key_value_90 = mod_consts[410];
            CHECK_OBJECT(tmp_JSON$class_creation_1__class_decl_dict);
            tmp_dict_arg_value_90 = tmp_JSON$class_creation_1__class_decl_dict;
            tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_90, tmp_key_value_90);
            assert(!(tmp_res == -1));
            tmp_condition_result_197 = (tmp_res != 0) ? true : false;
            if (tmp_condition_result_197 != false) {
                goto branch_yes_118;
            } else {
                goto branch_no_118;
            }
        }
        branch_yes_118:;
        CHECK_OBJECT(tmp_JSON$class_creation_1__class_decl_dict);
        tmp_dictdel_dict = tmp_JSON$class_creation_1__class_decl_dict;
        tmp_dictdel_key = mod_consts[410];
        tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2230;
            type_description_2 = "o";
            goto try_except_handler_88;
        }
        branch_no_118:;
        {
            nuitka_bool tmp_condition_result_198;
            PyObject *tmp_expression_value_157;
            CHECK_OBJECT(tmp_JSON$class_creation_1__metaclass);
            tmp_expression_value_157 = tmp_JSON$class_creation_1__metaclass;
            tmp_result = HAS_ATTR_BOOL(tmp_expression_value_157, mod_consts[411]);
            tmp_condition_result_198 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_198 == NUITKA_BOOL_TRUE) {
                goto branch_yes_119;
            } else {
                goto branch_no_119;
            }
        }
        branch_yes_119:;
        {
            PyObject *tmp_assign_source_262;
            PyObject *tmp_called_value_101;
            PyObject *tmp_expression_value_158;
            PyObject *tmp_args_value_58;
            PyObject *tmp_tuple_element_115;
            PyObject *tmp_kwargs_value_58;
            CHECK_OBJECT(tmp_JSON$class_creation_1__metaclass);
            tmp_expression_value_158 = tmp_JSON$class_creation_1__metaclass;
            tmp_called_value_101 = LOOKUP_ATTRIBUTE(tmp_expression_value_158, mod_consts[411]);
            if (tmp_called_value_101 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2230;
                type_description_2 = "o";
                goto try_except_handler_88;
            }
            tmp_tuple_element_115 = mod_consts[610];
            tmp_args_value_58 = PyTuple_New(2);
            PyTuple_SET_ITEM0(tmp_args_value_58, 0, tmp_tuple_element_115);
            CHECK_OBJECT(tmp_JSON$class_creation_1__bases);
            tmp_tuple_element_115 = tmp_JSON$class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_58, 1, tmp_tuple_element_115);
            CHECK_OBJECT(tmp_JSON$class_creation_1__class_decl_dict);
            tmp_kwargs_value_58 = tmp_JSON$class_creation_1__class_decl_dict;
            frame_d4a26a0482d921abe3cdbc3568d8027f_30->m_frame.f_lineno = 2230;
            tmp_assign_source_262 = CALL_FUNCTION(tmp_called_value_101, tmp_args_value_58, tmp_kwargs_value_58);
            Py_DECREF(tmp_called_value_101);
            Py_DECREF(tmp_args_value_58);
            if (tmp_assign_source_262 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2230;
                type_description_2 = "o";
                goto try_except_handler_88;
            }
            assert(tmp_JSON$class_creation_1__prepared == NULL);
            tmp_JSON$class_creation_1__prepared = tmp_assign_source_262;
        }
        {
            bool tmp_condition_result_199;
            PyObject *tmp_operand_value_30;
            PyObject *tmp_expression_value_159;
            CHECK_OBJECT(tmp_JSON$class_creation_1__prepared);
            tmp_expression_value_159 = tmp_JSON$class_creation_1__prepared;
            tmp_result = HAS_ATTR_BOOL(tmp_expression_value_159, mod_consts[413]);
            tmp_operand_value_30 = (tmp_result) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE(tmp_operand_value_30);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2230;
                type_description_2 = "o";
                goto try_except_handler_88;
            }
            tmp_condition_result_199 = (tmp_res == 0) ? true : false;
            if (tmp_condition_result_199 != false) {
                goto branch_yes_120;
            } else {
                goto branch_no_120;
            }
        }
        branch_yes_120:;
        {
            PyObject *tmp_raise_type_30;
            PyObject *tmp_raise_value_30;
            PyObject *tmp_left_value_30;
            PyObject *tmp_right_value_30;
            PyObject *tmp_tuple_element_116;
            PyObject *tmp_getattr_target_30;
            PyObject *tmp_getattr_attr_30;
            PyObject *tmp_getattr_default_30;
            tmp_raise_type_30 = PyExc_TypeError;
            tmp_left_value_30 = mod_consts[414];
            CHECK_OBJECT(tmp_JSON$class_creation_1__metaclass);
            tmp_getattr_target_30 = tmp_JSON$class_creation_1__metaclass;
            tmp_getattr_attr_30 = mod_consts[190];
            tmp_getattr_default_30 = mod_consts[415];
            tmp_tuple_element_116 = BUILTIN_GETATTR(tmp_getattr_target_30, tmp_getattr_attr_30, tmp_getattr_default_30);
            if (tmp_tuple_element_116 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2230;
                type_description_2 = "o";
                goto try_except_handler_88;
            }
            tmp_right_value_30 = PyTuple_New(2);
            {
                PyObject *tmp_expression_value_160;
                PyObject *tmp_type_arg_60;
                PyTuple_SET_ITEM(tmp_right_value_30, 0, tmp_tuple_element_116);
                CHECK_OBJECT(tmp_JSON$class_creation_1__prepared);
                tmp_type_arg_60 = tmp_JSON$class_creation_1__prepared;
                tmp_expression_value_160 = BUILTIN_TYPE1(tmp_type_arg_60);
                assert(!(tmp_expression_value_160 == NULL));
                tmp_tuple_element_116 = LOOKUP_ATTRIBUTE(tmp_expression_value_160, mod_consts[190]);
                Py_DECREF(tmp_expression_value_160);
                if (tmp_tuple_element_116 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2230;
                    type_description_2 = "o";
                    goto tuple_build_exception_41;
                }
                PyTuple_SET_ITEM(tmp_right_value_30, 1, tmp_tuple_element_116);
            }
            goto tuple_build_noexception_41;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_41:;
            Py_DECREF(tmp_right_value_30);
            goto try_except_handler_88;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_41:;
            tmp_raise_value_30 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_30, tmp_right_value_30);
            Py_DECREF(tmp_right_value_30);
            if (tmp_raise_value_30 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2230;
                type_description_2 = "o";
                goto try_except_handler_88;
            }
            exception_type = tmp_raise_type_30;
            Py_INCREF(tmp_raise_type_30);
            exception_value = tmp_raise_value_30;
            exception_lineno = 2230;
            RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);
            type_description_2 = "o";
            goto try_except_handler_88;
        }
        branch_no_120:;
        goto branch_end_119;
        branch_no_119:;
        {
            PyObject *tmp_assign_source_263;
            tmp_assign_source_263 = PyDict_New();
            assert(tmp_JSON$class_creation_1__prepared == NULL);
            tmp_JSON$class_creation_1__prepared = tmp_assign_source_263;
        }
        branch_end_119:;
        {
            PyObject *tmp_set_locals_30;
            CHECK_OBJECT(tmp_JSON$class_creation_1__prepared);
            tmp_set_locals_30 = tmp_JSON$class_creation_1__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__30_JSONElementType_2230 = tmp_set_locals_30;
            Py_INCREF(tmp_set_locals_30);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__30_JSONElementType_2230, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2230;
            type_description_2 = "o";
            goto try_except_handler_90;
        }
        tmp_dictset_value = mod_consts[611];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__30_JSONElementType_2230, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2230;
            type_description_2 = "o";
            goto try_except_handler_90;
        }
        tmp_dictset_value = mod_consts[612];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__30_JSONElementType_2230, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2230;
            type_description_2 = "o";
            goto try_except_handler_90;
        }
        if (isFrameUnusable(cache_frame_57d2ef71cbf357887920bccd62d12f03_31)) {
            Py_XDECREF(cache_frame_57d2ef71cbf357887920bccd62d12f03_31);

#if _DEBUG_REFCOUNTS
            if (cache_frame_57d2ef71cbf357887920bccd62d12f03_31 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_57d2ef71cbf357887920bccd62d12f03_31 = MAKE_FUNCTION_FRAME(codeobj_57d2ef71cbf357887920bccd62d12f03, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_57d2ef71cbf357887920bccd62d12f03_31->m_type_description == NULL);
        frame_57d2ef71cbf357887920bccd62d12f03_31 = cache_frame_57d2ef71cbf357887920bccd62d12f03_31;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_57d2ef71cbf357887920bccd62d12f03_31);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_57d2ef71cbf357887920bccd62d12f03_31) == 2); // Frame stack

        // Framed code:
        {
            PyObject *tmp_called_value_102;
            tmp_called_value_102 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__30_JSONElementType_2230, mod_consts[73]);

            if (tmp_called_value_102 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_value_102 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[73]);

                    if (unlikely(tmp_called_value_102 == NULL)) {
                        tmp_called_value_102 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
                    }

                    if (tmp_called_value_102 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2233;
                        type_description_3 = "o";
                        goto frame_exception_exit_31;
                    }
                    Py_INCREF(tmp_called_value_102);
                } else {
                    goto frame_exception_exit_31;
                }
            }

            frame_57d2ef71cbf357887920bccd62d12f03_31->m_frame.f_lineno = 2233;
            tmp_dictset_value = CALL_FUNCTION_NO_ARGS(tmp_called_value_102);
            Py_DECREF(tmp_called_value_102);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2233;
                type_description_3 = "o";
                goto frame_exception_exit_31;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__30_JSONElementType_2230, mod_consts[280], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2233;
                type_description_3 = "o";
                goto frame_exception_exit_31;
            }
        }
        {
            PyObject *tmp_called_value_103;
            tmp_called_value_103 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__30_JSONElementType_2230, mod_consts[215]);

            if (tmp_called_value_103 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_value_103 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[215]);

                    if (unlikely(tmp_called_value_103 == NULL)) {
                        tmp_called_value_103 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[215]);
                    }

                    if (tmp_called_value_103 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2234;
                        type_description_3 = "o";
                        goto frame_exception_exit_31;
                    }
                    Py_INCREF(tmp_called_value_103);
                } else {
                    goto frame_exception_exit_31;
                }
            }

            frame_57d2ef71cbf357887920bccd62d12f03_31->m_frame.f_lineno = 2234;
            tmp_dictset_value = CALL_FUNCTION_NO_ARGS(tmp_called_value_103);
            Py_DECREF(tmp_called_value_103);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2234;
                type_description_3 = "o";
                goto frame_exception_exit_31;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__30_JSONElementType_2230, mod_consts[277], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2234;
                type_description_3 = "o";
                goto frame_exception_exit_31;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__108_string_bind_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__30_JSONElementType_2230, mod_consts[281], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2236;
            type_description_3 = "o";
            goto frame_exception_exit_31;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__109_string_literal_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__30_JSONElementType_2230, mod_consts[285], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2239;
            type_description_3 = "o";
            goto frame_exception_exit_31;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__110_bind_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__30_JSONElementType_2230, mod_consts[232], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2242;
            type_description_3 = "o";
            goto frame_exception_exit_31;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__111_literal_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__30_JSONElementType_2230, mod_consts[228], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2255;
            type_description_3 = "o";
            goto frame_exception_exit_31;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_57d2ef71cbf357887920bccd62d12f03_31);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_29;

        frame_exception_exit_31:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_57d2ef71cbf357887920bccd62d12f03_31);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_57d2ef71cbf357887920bccd62d12f03_31, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_57d2ef71cbf357887920bccd62d12f03_31->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_57d2ef71cbf357887920bccd62d12f03_31, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_57d2ef71cbf357887920bccd62d12f03_31,
            type_description_3,
            outline_29_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_57d2ef71cbf357887920bccd62d12f03_31 == cache_frame_57d2ef71cbf357887920bccd62d12f03_31) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_57d2ef71cbf357887920bccd62d12f03_31);
            cache_frame_57d2ef71cbf357887920bccd62d12f03_31 = NULL;
        }

        assertFrameObject(frame_57d2ef71cbf357887920bccd62d12f03_31);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_30;

        frame_no_exception_29:;
        goto skip_nested_handling_29;
        nested_frame_exit_30:;
        type_description_2 = "o";
        goto try_except_handler_90;
        skip_nested_handling_29:;
        {
            nuitka_bool tmp_condition_result_200;
            PyObject *tmp_cmp_expr_left_29;
            PyObject *tmp_cmp_expr_right_29;
            CHECK_OBJECT(tmp_JSON$class_creation_1__bases);
            tmp_cmp_expr_left_29 = tmp_JSON$class_creation_1__bases;
            CHECK_OBJECT(tmp_JSON$class_creation_1__bases_orig);
            tmp_cmp_expr_right_29 = tmp_JSON$class_creation_1__bases_orig;
            tmp_condition_result_200 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_29, tmp_cmp_expr_right_29);
            if (tmp_condition_result_200 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2230;
                type_description_2 = "o";
                goto try_except_handler_90;
            }
            if (tmp_condition_result_200 == NUITKA_BOOL_TRUE) {
                goto branch_yes_121;
            } else {
                goto branch_no_121;
            }
            assert(tmp_condition_result_200 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_121:;
        CHECK_OBJECT(tmp_JSON$class_creation_1__bases_orig);
        tmp_dictset_value = tmp_JSON$class_creation_1__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__30_JSONElementType_2230, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2230;
            type_description_2 = "o";
            goto try_except_handler_90;
        }
        branch_no_121:;
        {
            PyObject *tmp_assign_source_264;
            PyObject *tmp_called_value_104;
            PyObject *tmp_args_value_59;
            PyObject *tmp_tuple_element_117;
            PyObject *tmp_kwargs_value_59;
            CHECK_OBJECT(tmp_JSON$class_creation_1__metaclass);
            tmp_called_value_104 = tmp_JSON$class_creation_1__metaclass;
            tmp_tuple_element_117 = mod_consts[610];
            tmp_args_value_59 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_59, 0, tmp_tuple_element_117);
            CHECK_OBJECT(tmp_JSON$class_creation_1__bases);
            tmp_tuple_element_117 = tmp_JSON$class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_59, 1, tmp_tuple_element_117);
            tmp_tuple_element_117 = locals_sqlalchemy$sql$sqltypes$$$class__30_JSONElementType_2230;
            PyTuple_SET_ITEM0(tmp_args_value_59, 2, tmp_tuple_element_117);
            CHECK_OBJECT(tmp_JSON$class_creation_1__class_decl_dict);
            tmp_kwargs_value_59 = tmp_JSON$class_creation_1__class_decl_dict;
            frame_d4a26a0482d921abe3cdbc3568d8027f_30->m_frame.f_lineno = 2230;
            tmp_assign_source_264 = CALL_FUNCTION(tmp_called_value_104, tmp_args_value_59, tmp_kwargs_value_59);
            Py_DECREF(tmp_args_value_59);
            if (tmp_assign_source_264 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2230;
                type_description_2 = "o";
                goto try_except_handler_90;
            }
            assert(outline_29_var___class__ == NULL);
            outline_29_var___class__ = tmp_assign_source_264;
        }
        CHECK_OBJECT(outline_29_var___class__);
        tmp_dictset_value = outline_29_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_90;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_90:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__30_JSONElementType_2230);
        locals_sqlalchemy$sql$sqltypes$$$class__30_JSONElementType_2230 = NULL;
        goto try_return_handler_89;
        // Exception handler code:
        try_except_handler_90:;
        exception_keeper_type_85 = exception_type;
        exception_keeper_value_85 = exception_value;
        exception_keeper_tb_85 = exception_tb;
        exception_keeper_lineno_85 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__30_JSONElementType_2230);
        locals_sqlalchemy$sql$sqltypes$$$class__30_JSONElementType_2230 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_85;
        exception_value = exception_keeper_value_85;
        exception_tb = exception_keeper_tb_85;
        exception_lineno = exception_keeper_lineno_85;

        goto try_except_handler_89;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_89:;
        CHECK_OBJECT(outline_29_var___class__);
        Py_DECREF(outline_29_var___class__);
        outline_29_var___class__ = NULL;
        goto outline_result_30;
        // Exception handler code:
        try_except_handler_89:;
        exception_keeper_type_86 = exception_type;
        exception_keeper_value_86 = exception_value;
        exception_keeper_tb_86 = exception_tb;
        exception_keeper_lineno_86 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_86;
        exception_value = exception_keeper_value_86;
        exception_tb = exception_keeper_tb_86;
        exception_lineno = exception_keeper_lineno_86;

        goto outline_exception_30;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_30:;
        exception_lineno = 2230;
        goto try_except_handler_88;
        outline_result_30:;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973, mod_consts[610], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2230;
            type_description_2 = "o";
            goto try_except_handler_88;
        }
        goto try_end_29;
        // Exception handler code:
        try_except_handler_88:;
        exception_keeper_type_87 = exception_type;
        exception_keeper_value_87 = exception_value;
        exception_keeper_tb_87 = exception_tb;
        exception_keeper_lineno_87 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_JSON$class_creation_1__bases_orig);
        tmp_JSON$class_creation_1__bases_orig = NULL;
        Py_XDECREF(tmp_JSON$class_creation_1__bases);
        tmp_JSON$class_creation_1__bases = NULL;
        Py_XDECREF(tmp_JSON$class_creation_1__class_decl_dict);
        tmp_JSON$class_creation_1__class_decl_dict = NULL;
        Py_XDECREF(tmp_JSON$class_creation_1__metaclass);
        tmp_JSON$class_creation_1__metaclass = NULL;
        Py_XDECREF(tmp_JSON$class_creation_1__prepared);
        tmp_JSON$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_87;
        exception_value = exception_keeper_value_87;
        exception_tb = exception_keeper_tb_87;
        exception_lineno = exception_keeper_lineno_87;

        goto frame_exception_exit_30;
        // End of try:
        try_end_29:;
        CHECK_OBJECT(tmp_JSON$class_creation_1__bases_orig);
        Py_DECREF(tmp_JSON$class_creation_1__bases_orig);
        tmp_JSON$class_creation_1__bases_orig = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_1__bases);
        Py_DECREF(tmp_JSON$class_creation_1__bases);
        tmp_JSON$class_creation_1__bases = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_JSON$class_creation_1__class_decl_dict);
        tmp_JSON$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_1__metaclass);
        Py_DECREF(tmp_JSON$class_creation_1__metaclass);
        tmp_JSON$class_creation_1__metaclass = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_1__prepared);
        Py_DECREF(tmp_JSON$class_creation_1__prepared);
        tmp_JSON$class_creation_1__prepared = NULL;
        {
            PyObject *tmp_assign_source_265;
            PyObject *tmp_tuple_element_118;
            tmp_tuple_element_118 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973, mod_consts[610]);

            if (unlikely(tmp_tuple_element_118 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[610]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2268;
                type_description_2 = "o";
                goto frame_exception_exit_30;
            }

            if (tmp_tuple_element_118 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2268;
                type_description_2 = "o";
                goto frame_exception_exit_30;
            }
            tmp_assign_source_265 = PyTuple_New(1);
            PyTuple_SET_ITEM(tmp_assign_source_265, 0, tmp_tuple_element_118);
            assert(tmp_JSON$class_creation_2__bases_orig == NULL);
            tmp_JSON$class_creation_2__bases_orig = tmp_assign_source_265;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_266;
            PyObject *tmp_dircall_arg1_31;
            CHECK_OBJECT(tmp_JSON$class_creation_2__bases_orig);
            tmp_dircall_arg1_31 = tmp_JSON$class_creation_2__bases_orig;
            Py_INCREF(tmp_dircall_arg1_31);

            {
                PyObject *dir_call_args[] = {tmp_dircall_arg1_31};
                tmp_assign_source_266 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
            }
            if (tmp_assign_source_266 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2268;
                type_description_2 = "o";
                goto try_except_handler_91;
            }
            assert(tmp_JSON$class_creation_2__bases == NULL);
            tmp_JSON$class_creation_2__bases = tmp_assign_source_266;
        }
        {
            PyObject *tmp_assign_source_267;
            tmp_assign_source_267 = PyDict_New();
            assert(tmp_JSON$class_creation_2__class_decl_dict == NULL);
            tmp_JSON$class_creation_2__class_decl_dict = tmp_assign_source_267;
        }
        {
            PyObject *tmp_assign_source_268;
            PyObject *tmp_metaclass_value_31;
            bool tmp_condition_result_201;
            PyObject *tmp_key_value_91;
            PyObject *tmp_dict_arg_value_91;
            PyObject *tmp_dict_arg_value_92;
            PyObject *tmp_key_value_92;
            nuitka_bool tmp_condition_result_202;
            int tmp_truth_name_33;
            PyObject *tmp_type_arg_61;
            PyObject *tmp_expression_value_161;
            PyObject *tmp_subscript_value_31;
            PyObject *tmp_bases_value_31;
            tmp_key_value_91 = mod_consts[410];
            CHECK_OBJECT(tmp_JSON$class_creation_2__class_decl_dict);
            tmp_dict_arg_value_91 = tmp_JSON$class_creation_2__class_decl_dict;
            tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_91, tmp_key_value_91);
            assert(!(tmp_res == -1));
            tmp_condition_result_201 = (tmp_res != 0) ? true : false;
            if (tmp_condition_result_201 != false) {
                goto condexpr_true_80;
            } else {
                goto condexpr_false_80;
            }
            condexpr_true_80:;
            CHECK_OBJECT(tmp_JSON$class_creation_2__class_decl_dict);
            tmp_dict_arg_value_92 = tmp_JSON$class_creation_2__class_decl_dict;
            tmp_key_value_92 = mod_consts[410];
            tmp_metaclass_value_31 = DICT_GET_ITEM0(tmp_dict_arg_value_92, tmp_key_value_92);
            if (tmp_metaclass_value_31 == NULL) {
                tmp_metaclass_value_31 = Py_None;
            }
            assert(!(tmp_metaclass_value_31 == NULL));
            Py_INCREF(tmp_metaclass_value_31);
            goto condexpr_end_80;
            condexpr_false_80:;
            CHECK_OBJECT(tmp_JSON$class_creation_2__bases);
            tmp_truth_name_33 = CHECK_IF_TRUE(tmp_JSON$class_creation_2__bases);
            if (tmp_truth_name_33 == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2268;
                type_description_2 = "o";
                goto try_except_handler_91;
            }
            tmp_condition_result_202 = tmp_truth_name_33 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
            if (tmp_condition_result_202 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_81;
            } else {
                goto condexpr_false_81;
            }
            condexpr_true_81:;
            CHECK_OBJECT(tmp_JSON$class_creation_2__bases);
            tmp_expression_value_161 = tmp_JSON$class_creation_2__bases;
            tmp_subscript_value_31 = mod_consts[52];
            tmp_type_arg_61 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_161, tmp_subscript_value_31, 0);
            if (tmp_type_arg_61 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2268;
                type_description_2 = "o";
                goto try_except_handler_91;
            }
            tmp_metaclass_value_31 = BUILTIN_TYPE1(tmp_type_arg_61);
            Py_DECREF(tmp_type_arg_61);
            if (tmp_metaclass_value_31 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2268;
                type_description_2 = "o";
                goto try_except_handler_91;
            }
            goto condexpr_end_81;
            condexpr_false_81:;
            tmp_metaclass_value_31 = (PyObject *)&PyType_Type;
            Py_INCREF(tmp_metaclass_value_31);
            condexpr_end_81:;
            condexpr_end_80:;
            CHECK_OBJECT(tmp_JSON$class_creation_2__bases);
            tmp_bases_value_31 = tmp_JSON$class_creation_2__bases;
            tmp_assign_source_268 = SELECT_METACLASS(tmp_metaclass_value_31, tmp_bases_value_31);
            Py_DECREF(tmp_metaclass_value_31);
            if (tmp_assign_source_268 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2268;
                type_description_2 = "o";
                goto try_except_handler_91;
            }
            assert(tmp_JSON$class_creation_2__metaclass == NULL);
            tmp_JSON$class_creation_2__metaclass = tmp_assign_source_268;
        }
        {
            bool tmp_condition_result_203;
            PyObject *tmp_key_value_93;
            PyObject *tmp_dict_arg_value_93;
            tmp_key_value_93 = mod_consts[410];
            CHECK_OBJECT(tmp_JSON$class_creation_2__class_decl_dict);
            tmp_dict_arg_value_93 = tmp_JSON$class_creation_2__class_decl_dict;
            tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_93, tmp_key_value_93);
            assert(!(tmp_res == -1));
            tmp_condition_result_203 = (tmp_res != 0) ? true : false;
            if (tmp_condition_result_203 != false) {
                goto branch_yes_122;
            } else {
                goto branch_no_122;
            }
        }
        branch_yes_122:;
        CHECK_OBJECT(tmp_JSON$class_creation_2__class_decl_dict);
        tmp_dictdel_dict = tmp_JSON$class_creation_2__class_decl_dict;
        tmp_dictdel_key = mod_consts[410];
        tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2268;
            type_description_2 = "o";
            goto try_except_handler_91;
        }
        branch_no_122:;
        {
            nuitka_bool tmp_condition_result_204;
            PyObject *tmp_expression_value_162;
            CHECK_OBJECT(tmp_JSON$class_creation_2__metaclass);
            tmp_expression_value_162 = tmp_JSON$class_creation_2__metaclass;
            tmp_result = HAS_ATTR_BOOL(tmp_expression_value_162, mod_consts[411]);
            tmp_condition_result_204 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_204 == NUITKA_BOOL_TRUE) {
                goto branch_yes_123;
            } else {
                goto branch_no_123;
            }
        }
        branch_yes_123:;
        {
            PyObject *tmp_assign_source_269;
            PyObject *tmp_called_value_105;
            PyObject *tmp_expression_value_163;
            PyObject *tmp_args_value_60;
            PyObject *tmp_tuple_element_119;
            PyObject *tmp_kwargs_value_60;
            CHECK_OBJECT(tmp_JSON$class_creation_2__metaclass);
            tmp_expression_value_163 = tmp_JSON$class_creation_2__metaclass;
            tmp_called_value_105 = LOOKUP_ATTRIBUTE(tmp_expression_value_163, mod_consts[411]);
            if (tmp_called_value_105 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2268;
                type_description_2 = "o";
                goto try_except_handler_91;
            }
            tmp_tuple_element_119 = mod_consts[295];
            tmp_args_value_60 = PyTuple_New(2);
            PyTuple_SET_ITEM0(tmp_args_value_60, 0, tmp_tuple_element_119);
            CHECK_OBJECT(tmp_JSON$class_creation_2__bases);
            tmp_tuple_element_119 = tmp_JSON$class_creation_2__bases;
            PyTuple_SET_ITEM0(tmp_args_value_60, 1, tmp_tuple_element_119);
            CHECK_OBJECT(tmp_JSON$class_creation_2__class_decl_dict);
            tmp_kwargs_value_60 = tmp_JSON$class_creation_2__class_decl_dict;
            frame_d4a26a0482d921abe3cdbc3568d8027f_30->m_frame.f_lineno = 2268;
            tmp_assign_source_269 = CALL_FUNCTION(tmp_called_value_105, tmp_args_value_60, tmp_kwargs_value_60);
            Py_DECREF(tmp_called_value_105);
            Py_DECREF(tmp_args_value_60);
            if (tmp_assign_source_269 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2268;
                type_description_2 = "o";
                goto try_except_handler_91;
            }
            assert(tmp_JSON$class_creation_2__prepared == NULL);
            tmp_JSON$class_creation_2__prepared = tmp_assign_source_269;
        }
        {
            bool tmp_condition_result_205;
            PyObject *tmp_operand_value_31;
            PyObject *tmp_expression_value_164;
            CHECK_OBJECT(tmp_JSON$class_creation_2__prepared);
            tmp_expression_value_164 = tmp_JSON$class_creation_2__prepared;
            tmp_result = HAS_ATTR_BOOL(tmp_expression_value_164, mod_consts[413]);
            tmp_operand_value_31 = (tmp_result) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE(tmp_operand_value_31);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2268;
                type_description_2 = "o";
                goto try_except_handler_91;
            }
            tmp_condition_result_205 = (tmp_res == 0) ? true : false;
            if (tmp_condition_result_205 != false) {
                goto branch_yes_124;
            } else {
                goto branch_no_124;
            }
        }
        branch_yes_124:;
        {
            PyObject *tmp_raise_type_31;
            PyObject *tmp_raise_value_31;
            PyObject *tmp_left_value_31;
            PyObject *tmp_right_value_31;
            PyObject *tmp_tuple_element_120;
            PyObject *tmp_getattr_target_31;
            PyObject *tmp_getattr_attr_31;
            PyObject *tmp_getattr_default_31;
            tmp_raise_type_31 = PyExc_TypeError;
            tmp_left_value_31 = mod_consts[414];
            CHECK_OBJECT(tmp_JSON$class_creation_2__metaclass);
            tmp_getattr_target_31 = tmp_JSON$class_creation_2__metaclass;
            tmp_getattr_attr_31 = mod_consts[190];
            tmp_getattr_default_31 = mod_consts[415];
            tmp_tuple_element_120 = BUILTIN_GETATTR(tmp_getattr_target_31, tmp_getattr_attr_31, tmp_getattr_default_31);
            if (tmp_tuple_element_120 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2268;
                type_description_2 = "o";
                goto try_except_handler_91;
            }
            tmp_right_value_31 = PyTuple_New(2);
            {
                PyObject *tmp_expression_value_165;
                PyObject *tmp_type_arg_62;
                PyTuple_SET_ITEM(tmp_right_value_31, 0, tmp_tuple_element_120);
                CHECK_OBJECT(tmp_JSON$class_creation_2__prepared);
                tmp_type_arg_62 = tmp_JSON$class_creation_2__prepared;
                tmp_expression_value_165 = BUILTIN_TYPE1(tmp_type_arg_62);
                assert(!(tmp_expression_value_165 == NULL));
                tmp_tuple_element_120 = LOOKUP_ATTRIBUTE(tmp_expression_value_165, mod_consts[190]);
                Py_DECREF(tmp_expression_value_165);
                if (tmp_tuple_element_120 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2268;
                    type_description_2 = "o";
                    goto tuple_build_exception_42;
                }
                PyTuple_SET_ITEM(tmp_right_value_31, 1, tmp_tuple_element_120);
            }
            goto tuple_build_noexception_42;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_42:;
            Py_DECREF(tmp_right_value_31);
            goto try_except_handler_91;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_42:;
            tmp_raise_value_31 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_31, tmp_right_value_31);
            Py_DECREF(tmp_right_value_31);
            if (tmp_raise_value_31 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2268;
                type_description_2 = "o";
                goto try_except_handler_91;
            }
            exception_type = tmp_raise_type_31;
            Py_INCREF(tmp_raise_type_31);
            exception_value = tmp_raise_value_31;
            exception_lineno = 2268;
            RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);
            type_description_2 = "o";
            goto try_except_handler_91;
        }
        branch_no_124:;
        goto branch_end_123;
        branch_no_123:;
        {
            PyObject *tmp_assign_source_270;
            tmp_assign_source_270 = PyDict_New();
            assert(tmp_JSON$class_creation_2__prepared == NULL);
            tmp_JSON$class_creation_2__prepared = tmp_assign_source_270;
        }
        branch_end_123:;
        {
            PyObject *tmp_set_locals_31;
            CHECK_OBJECT(tmp_JSON$class_creation_2__prepared);
            tmp_set_locals_31 = tmp_JSON$class_creation_2__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__31_JSONIndexType_2268 = tmp_set_locals_31;
            Py_INCREF(tmp_set_locals_31);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__31_JSONIndexType_2268, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2268;
            type_description_2 = "o";
            goto try_except_handler_93;
        }
        tmp_dictset_value = mod_consts[617];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__31_JSONIndexType_2268, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2268;
            type_description_2 = "o";
            goto try_except_handler_93;
        }
        tmp_dictset_value = mod_consts[618];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__31_JSONIndexType_2268, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2268;
            type_description_2 = "o";
            goto try_except_handler_93;
        }
        {
            nuitka_bool tmp_condition_result_206;
            PyObject *tmp_cmp_expr_left_30;
            PyObject *tmp_cmp_expr_right_30;
            CHECK_OBJECT(tmp_JSON$class_creation_2__bases);
            tmp_cmp_expr_left_30 = tmp_JSON$class_creation_2__bases;
            CHECK_OBJECT(tmp_JSON$class_creation_2__bases_orig);
            tmp_cmp_expr_right_30 = tmp_JSON$class_creation_2__bases_orig;
            tmp_condition_result_206 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_30, tmp_cmp_expr_right_30);
            if (tmp_condition_result_206 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2268;
                type_description_2 = "o";
                goto try_except_handler_93;
            }
            if (tmp_condition_result_206 == NUITKA_BOOL_TRUE) {
                goto branch_yes_125;
            } else {
                goto branch_no_125;
            }
            assert(tmp_condition_result_206 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_125:;
        CHECK_OBJECT(tmp_JSON$class_creation_2__bases_orig);
        tmp_dictset_value = tmp_JSON$class_creation_2__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__31_JSONIndexType_2268, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2268;
            type_description_2 = "o";
            goto try_except_handler_93;
        }
        branch_no_125:;
        {
            PyObject *tmp_assign_source_271;
            PyObject *tmp_called_value_106;
            PyObject *tmp_args_value_61;
            PyObject *tmp_tuple_element_121;
            PyObject *tmp_kwargs_value_61;
            CHECK_OBJECT(tmp_JSON$class_creation_2__metaclass);
            tmp_called_value_106 = tmp_JSON$class_creation_2__metaclass;
            tmp_tuple_element_121 = mod_consts[295];
            tmp_args_value_61 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_61, 0, tmp_tuple_element_121);
            CHECK_OBJECT(tmp_JSON$class_creation_2__bases);
            tmp_tuple_element_121 = tmp_JSON$class_creation_2__bases;
            PyTuple_SET_ITEM0(tmp_args_value_61, 1, tmp_tuple_element_121);
            tmp_tuple_element_121 = locals_sqlalchemy$sql$sqltypes$$$class__31_JSONIndexType_2268;
            PyTuple_SET_ITEM0(tmp_args_value_61, 2, tmp_tuple_element_121);
            CHECK_OBJECT(tmp_JSON$class_creation_2__class_decl_dict);
            tmp_kwargs_value_61 = tmp_JSON$class_creation_2__class_decl_dict;
            frame_d4a26a0482d921abe3cdbc3568d8027f_30->m_frame.f_lineno = 2268;
            tmp_assign_source_271 = CALL_FUNCTION(tmp_called_value_106, tmp_args_value_61, tmp_kwargs_value_61);
            Py_DECREF(tmp_args_value_61);
            if (tmp_assign_source_271 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2268;
                type_description_2 = "o";
                goto try_except_handler_93;
            }
            assert(outline_30_var___class__ == NULL);
            outline_30_var___class__ = tmp_assign_source_271;
        }
        CHECK_OBJECT(outline_30_var___class__);
        tmp_dictset_value = outline_30_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_93;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_93:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__31_JSONIndexType_2268);
        locals_sqlalchemy$sql$sqltypes$$$class__31_JSONIndexType_2268 = NULL;
        goto try_return_handler_92;
        // Exception handler code:
        try_except_handler_93:;
        exception_keeper_type_88 = exception_type;
        exception_keeper_value_88 = exception_value;
        exception_keeper_tb_88 = exception_tb;
        exception_keeper_lineno_88 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__31_JSONIndexType_2268);
        locals_sqlalchemy$sql$sqltypes$$$class__31_JSONIndexType_2268 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_88;
        exception_value = exception_keeper_value_88;
        exception_tb = exception_keeper_tb_88;
        exception_lineno = exception_keeper_lineno_88;

        goto try_except_handler_92;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_92:;
        CHECK_OBJECT(outline_30_var___class__);
        Py_DECREF(outline_30_var___class__);
        outline_30_var___class__ = NULL;
        goto outline_result_31;
        // Exception handler code:
        try_except_handler_92:;
        exception_keeper_type_89 = exception_type;
        exception_keeper_value_89 = exception_value;
        exception_keeper_tb_89 = exception_tb;
        exception_keeper_lineno_89 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_89;
        exception_value = exception_keeper_value_89;
        exception_tb = exception_keeper_tb_89;
        exception_lineno = exception_keeper_lineno_89;

        goto outline_exception_31;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_31:;
        exception_lineno = 2268;
        goto try_except_handler_91;
        outline_result_31:;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973, mod_consts[295], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2268;
            type_description_2 = "o";
            goto try_except_handler_91;
        }
        goto try_end_30;
        // Exception handler code:
        try_except_handler_91:;
        exception_keeper_type_90 = exception_type;
        exception_keeper_value_90 = exception_value;
        exception_keeper_tb_90 = exception_tb;
        exception_keeper_lineno_90 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_JSON$class_creation_2__bases_orig);
        Py_DECREF(tmp_JSON$class_creation_2__bases_orig);
        tmp_JSON$class_creation_2__bases_orig = NULL;
        Py_XDECREF(tmp_JSON$class_creation_2__bases);
        tmp_JSON$class_creation_2__bases = NULL;
        Py_XDECREF(tmp_JSON$class_creation_2__class_decl_dict);
        tmp_JSON$class_creation_2__class_decl_dict = NULL;
        Py_XDECREF(tmp_JSON$class_creation_2__metaclass);
        tmp_JSON$class_creation_2__metaclass = NULL;
        Py_XDECREF(tmp_JSON$class_creation_2__prepared);
        tmp_JSON$class_creation_2__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_90;
        exception_value = exception_keeper_value_90;
        exception_tb = exception_keeper_tb_90;
        exception_lineno = exception_keeper_lineno_90;

        goto frame_exception_exit_30;
        // End of try:
        try_end_30:;
        CHECK_OBJECT(tmp_JSON$class_creation_2__bases_orig);
        Py_DECREF(tmp_JSON$class_creation_2__bases_orig);
        tmp_JSON$class_creation_2__bases_orig = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_2__bases);
        Py_DECREF(tmp_JSON$class_creation_2__bases);
        tmp_JSON$class_creation_2__bases = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_2__class_decl_dict);
        Py_DECREF(tmp_JSON$class_creation_2__class_decl_dict);
        tmp_JSON$class_creation_2__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_2__metaclass);
        Py_DECREF(tmp_JSON$class_creation_2__metaclass);
        tmp_JSON$class_creation_2__metaclass = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_2__prepared);
        Py_DECREF(tmp_JSON$class_creation_2__prepared);
        tmp_JSON$class_creation_2__prepared = NULL;
        {
            PyObject *tmp_assign_source_272;
            PyObject *tmp_tuple_element_122;
            tmp_tuple_element_122 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973, mod_consts[610]);

            if (unlikely(tmp_tuple_element_122 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[610]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2276;
                type_description_2 = "o";
                goto frame_exception_exit_30;
            }

            if (tmp_tuple_element_122 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2276;
                type_description_2 = "o";
                goto frame_exception_exit_30;
            }
            tmp_assign_source_272 = PyTuple_New(1);
            PyTuple_SET_ITEM(tmp_assign_source_272, 0, tmp_tuple_element_122);
            assert(tmp_JSON$class_creation_3__bases_orig == NULL);
            tmp_JSON$class_creation_3__bases_orig = tmp_assign_source_272;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_273;
            PyObject *tmp_dircall_arg1_32;
            CHECK_OBJECT(tmp_JSON$class_creation_3__bases_orig);
            tmp_dircall_arg1_32 = tmp_JSON$class_creation_3__bases_orig;
            Py_INCREF(tmp_dircall_arg1_32);

            {
                PyObject *dir_call_args[] = {tmp_dircall_arg1_32};
                tmp_assign_source_273 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
            }
            if (tmp_assign_source_273 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2276;
                type_description_2 = "o";
                goto try_except_handler_94;
            }
            assert(tmp_JSON$class_creation_3__bases == NULL);
            tmp_JSON$class_creation_3__bases = tmp_assign_source_273;
        }
        {
            PyObject *tmp_assign_source_274;
            tmp_assign_source_274 = PyDict_New();
            assert(tmp_JSON$class_creation_3__class_decl_dict == NULL);
            tmp_JSON$class_creation_3__class_decl_dict = tmp_assign_source_274;
        }
        {
            PyObject *tmp_assign_source_275;
            PyObject *tmp_metaclass_value_32;
            bool tmp_condition_result_207;
            PyObject *tmp_key_value_94;
            PyObject *tmp_dict_arg_value_94;
            PyObject *tmp_dict_arg_value_95;
            PyObject *tmp_key_value_95;
            nuitka_bool tmp_condition_result_208;
            int tmp_truth_name_34;
            PyObject *tmp_type_arg_63;
            PyObject *tmp_expression_value_166;
            PyObject *tmp_subscript_value_32;
            PyObject *tmp_bases_value_32;
            tmp_key_value_94 = mod_consts[410];
            CHECK_OBJECT(tmp_JSON$class_creation_3__class_decl_dict);
            tmp_dict_arg_value_94 = tmp_JSON$class_creation_3__class_decl_dict;
            tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_94, tmp_key_value_94);
            assert(!(tmp_res == -1));
            tmp_condition_result_207 = (tmp_res != 0) ? true : false;
            if (tmp_condition_result_207 != false) {
                goto condexpr_true_82;
            } else {
                goto condexpr_false_82;
            }
            condexpr_true_82:;
            CHECK_OBJECT(tmp_JSON$class_creation_3__class_decl_dict);
            tmp_dict_arg_value_95 = tmp_JSON$class_creation_3__class_decl_dict;
            tmp_key_value_95 = mod_consts[410];
            tmp_metaclass_value_32 = DICT_GET_ITEM0(tmp_dict_arg_value_95, tmp_key_value_95);
            if (tmp_metaclass_value_32 == NULL) {
                tmp_metaclass_value_32 = Py_None;
            }
            assert(!(tmp_metaclass_value_32 == NULL));
            Py_INCREF(tmp_metaclass_value_32);
            goto condexpr_end_82;
            condexpr_false_82:;
            CHECK_OBJECT(tmp_JSON$class_creation_3__bases);
            tmp_truth_name_34 = CHECK_IF_TRUE(tmp_JSON$class_creation_3__bases);
            if (tmp_truth_name_34 == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2276;
                type_description_2 = "o";
                goto try_except_handler_94;
            }
            tmp_condition_result_208 = tmp_truth_name_34 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
            if (tmp_condition_result_208 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_83;
            } else {
                goto condexpr_false_83;
            }
            condexpr_true_83:;
            CHECK_OBJECT(tmp_JSON$class_creation_3__bases);
            tmp_expression_value_166 = tmp_JSON$class_creation_3__bases;
            tmp_subscript_value_32 = mod_consts[52];
            tmp_type_arg_63 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_166, tmp_subscript_value_32, 0);
            if (tmp_type_arg_63 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2276;
                type_description_2 = "o";
                goto try_except_handler_94;
            }
            tmp_metaclass_value_32 = BUILTIN_TYPE1(tmp_type_arg_63);
            Py_DECREF(tmp_type_arg_63);
            if (tmp_metaclass_value_32 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2276;
                type_description_2 = "o";
                goto try_except_handler_94;
            }
            goto condexpr_end_83;
            condexpr_false_83:;
            tmp_metaclass_value_32 = (PyObject *)&PyType_Type;
            Py_INCREF(tmp_metaclass_value_32);
            condexpr_end_83:;
            condexpr_end_82:;
            CHECK_OBJECT(tmp_JSON$class_creation_3__bases);
            tmp_bases_value_32 = tmp_JSON$class_creation_3__bases;
            tmp_assign_source_275 = SELECT_METACLASS(tmp_metaclass_value_32, tmp_bases_value_32);
            Py_DECREF(tmp_metaclass_value_32);
            if (tmp_assign_source_275 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2276;
                type_description_2 = "o";
                goto try_except_handler_94;
            }
            assert(tmp_JSON$class_creation_3__metaclass == NULL);
            tmp_JSON$class_creation_3__metaclass = tmp_assign_source_275;
        }
        {
            bool tmp_condition_result_209;
            PyObject *tmp_key_value_96;
            PyObject *tmp_dict_arg_value_96;
            tmp_key_value_96 = mod_consts[410];
            CHECK_OBJECT(tmp_JSON$class_creation_3__class_decl_dict);
            tmp_dict_arg_value_96 = tmp_JSON$class_creation_3__class_decl_dict;
            tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_96, tmp_key_value_96);
            assert(!(tmp_res == -1));
            tmp_condition_result_209 = (tmp_res != 0) ? true : false;
            if (tmp_condition_result_209 != false) {
                goto branch_yes_126;
            } else {
                goto branch_no_126;
            }
        }
        branch_yes_126:;
        CHECK_OBJECT(tmp_JSON$class_creation_3__class_decl_dict);
        tmp_dictdel_dict = tmp_JSON$class_creation_3__class_decl_dict;
        tmp_dictdel_key = mod_consts[410];
        tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2276;
            type_description_2 = "o";
            goto try_except_handler_94;
        }
        branch_no_126:;
        {
            nuitka_bool tmp_condition_result_210;
            PyObject *tmp_expression_value_167;
            CHECK_OBJECT(tmp_JSON$class_creation_3__metaclass);
            tmp_expression_value_167 = tmp_JSON$class_creation_3__metaclass;
            tmp_result = HAS_ATTR_BOOL(tmp_expression_value_167, mod_consts[411]);
            tmp_condition_result_210 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_210 == NUITKA_BOOL_TRUE) {
                goto branch_yes_127;
            } else {
                goto branch_no_127;
            }
        }
        branch_yes_127:;
        {
            PyObject *tmp_assign_source_276;
            PyObject *tmp_called_value_107;
            PyObject *tmp_expression_value_168;
            PyObject *tmp_args_value_62;
            PyObject *tmp_tuple_element_123;
            PyObject *tmp_kwargs_value_62;
            CHECK_OBJECT(tmp_JSON$class_creation_3__metaclass);
            tmp_expression_value_168 = tmp_JSON$class_creation_3__metaclass;
            tmp_called_value_107 = LOOKUP_ATTRIBUTE(tmp_expression_value_168, mod_consts[411]);
            if (tmp_called_value_107 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2276;
                type_description_2 = "o";
                goto try_except_handler_94;
            }
            tmp_tuple_element_123 = mod_consts[292];
            tmp_args_value_62 = PyTuple_New(2);
            PyTuple_SET_ITEM0(tmp_args_value_62, 0, tmp_tuple_element_123);
            CHECK_OBJECT(tmp_JSON$class_creation_3__bases);
            tmp_tuple_element_123 = tmp_JSON$class_creation_3__bases;
            PyTuple_SET_ITEM0(tmp_args_value_62, 1, tmp_tuple_element_123);
            CHECK_OBJECT(tmp_JSON$class_creation_3__class_decl_dict);
            tmp_kwargs_value_62 = tmp_JSON$class_creation_3__class_decl_dict;
            frame_d4a26a0482d921abe3cdbc3568d8027f_30->m_frame.f_lineno = 2276;
            tmp_assign_source_276 = CALL_FUNCTION(tmp_called_value_107, tmp_args_value_62, tmp_kwargs_value_62);
            Py_DECREF(tmp_called_value_107);
            Py_DECREF(tmp_args_value_62);
            if (tmp_assign_source_276 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2276;
                type_description_2 = "o";
                goto try_except_handler_94;
            }
            assert(tmp_JSON$class_creation_3__prepared == NULL);
            tmp_JSON$class_creation_3__prepared = tmp_assign_source_276;
        }
        {
            bool tmp_condition_result_211;
            PyObject *tmp_operand_value_32;
            PyObject *tmp_expression_value_169;
            CHECK_OBJECT(tmp_JSON$class_creation_3__prepared);
            tmp_expression_value_169 = tmp_JSON$class_creation_3__prepared;
            tmp_result = HAS_ATTR_BOOL(tmp_expression_value_169, mod_consts[413]);
            tmp_operand_value_32 = (tmp_result) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE(tmp_operand_value_32);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2276;
                type_description_2 = "o";
                goto try_except_handler_94;
            }
            tmp_condition_result_211 = (tmp_res == 0) ? true : false;
            if (tmp_condition_result_211 != false) {
                goto branch_yes_128;
            } else {
                goto branch_no_128;
            }
        }
        branch_yes_128:;
        {
            PyObject *tmp_raise_type_32;
            PyObject *tmp_raise_value_32;
            PyObject *tmp_left_value_32;
            PyObject *tmp_right_value_32;
            PyObject *tmp_tuple_element_124;
            PyObject *tmp_getattr_target_32;
            PyObject *tmp_getattr_attr_32;
            PyObject *tmp_getattr_default_32;
            tmp_raise_type_32 = PyExc_TypeError;
            tmp_left_value_32 = mod_consts[414];
            CHECK_OBJECT(tmp_JSON$class_creation_3__metaclass);
            tmp_getattr_target_32 = tmp_JSON$class_creation_3__metaclass;
            tmp_getattr_attr_32 = mod_consts[190];
            tmp_getattr_default_32 = mod_consts[415];
            tmp_tuple_element_124 = BUILTIN_GETATTR(tmp_getattr_target_32, tmp_getattr_attr_32, tmp_getattr_default_32);
            if (tmp_tuple_element_124 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2276;
                type_description_2 = "o";
                goto try_except_handler_94;
            }
            tmp_right_value_32 = PyTuple_New(2);
            {
                PyObject *tmp_expression_value_170;
                PyObject *tmp_type_arg_64;
                PyTuple_SET_ITEM(tmp_right_value_32, 0, tmp_tuple_element_124);
                CHECK_OBJECT(tmp_JSON$class_creation_3__prepared);
                tmp_type_arg_64 = tmp_JSON$class_creation_3__prepared;
                tmp_expression_value_170 = BUILTIN_TYPE1(tmp_type_arg_64);
                assert(!(tmp_expression_value_170 == NULL));
                tmp_tuple_element_124 = LOOKUP_ATTRIBUTE(tmp_expression_value_170, mod_consts[190]);
                Py_DECREF(tmp_expression_value_170);
                if (tmp_tuple_element_124 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2276;
                    type_description_2 = "o";
                    goto tuple_build_exception_43;
                }
                PyTuple_SET_ITEM(tmp_right_value_32, 1, tmp_tuple_element_124);
            }
            goto tuple_build_noexception_43;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_43:;
            Py_DECREF(tmp_right_value_32);
            goto try_except_handler_94;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_43:;
            tmp_raise_value_32 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_32, tmp_right_value_32);
            Py_DECREF(tmp_right_value_32);
            if (tmp_raise_value_32 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2276;
                type_description_2 = "o";
                goto try_except_handler_94;
            }
            exception_type = tmp_raise_type_32;
            Py_INCREF(tmp_raise_type_32);
            exception_value = tmp_raise_value_32;
            exception_lineno = 2276;
            RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);
            type_description_2 = "o";
            goto try_except_handler_94;
        }
        branch_no_128:;
        goto branch_end_127;
        branch_no_127:;
        {
            PyObject *tmp_assign_source_277;
            tmp_assign_source_277 = PyDict_New();
            assert(tmp_JSON$class_creation_3__prepared == NULL);
            tmp_JSON$class_creation_3__prepared = tmp_assign_source_277;
        }
        branch_end_127:;
        {
            PyObject *tmp_set_locals_32;
            CHECK_OBJECT(tmp_JSON$class_creation_3__prepared);
            tmp_set_locals_32 = tmp_JSON$class_creation_3__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__32_JSONPathType_2276 = tmp_set_locals_32;
            Py_INCREF(tmp_set_locals_32);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__32_JSONPathType_2276, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2276;
            type_description_2 = "o";
            goto try_except_handler_96;
        }
        tmp_dictset_value = mod_consts[619];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__32_JSONPathType_2276, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2276;
            type_description_2 = "o";
            goto try_except_handler_96;
        }
        tmp_dictset_value = mod_consts[620];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__32_JSONPathType_2276, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2276;
            type_description_2 = "o";
            goto try_except_handler_96;
        }
        {
            nuitka_bool tmp_condition_result_212;
            PyObject *tmp_cmp_expr_left_31;
            PyObject *tmp_cmp_expr_right_31;
            CHECK_OBJECT(tmp_JSON$class_creation_3__bases);
            tmp_cmp_expr_left_31 = tmp_JSON$class_creation_3__bases;
            CHECK_OBJECT(tmp_JSON$class_creation_3__bases_orig);
            tmp_cmp_expr_right_31 = tmp_JSON$class_creation_3__bases_orig;
            tmp_condition_result_212 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_31, tmp_cmp_expr_right_31);
            if (tmp_condition_result_212 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2276;
                type_description_2 = "o";
                goto try_except_handler_96;
            }
            if (tmp_condition_result_212 == NUITKA_BOOL_TRUE) {
                goto branch_yes_129;
            } else {
                goto branch_no_129;
            }
            assert(tmp_condition_result_212 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_129:;
        CHECK_OBJECT(tmp_JSON$class_creation_3__bases_orig);
        tmp_dictset_value = tmp_JSON$class_creation_3__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__32_JSONPathType_2276, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2276;
            type_description_2 = "o";
            goto try_except_handler_96;
        }
        branch_no_129:;
        {
            PyObject *tmp_assign_source_278;
            PyObject *tmp_called_value_108;
            PyObject *tmp_args_value_63;
            PyObject *tmp_tuple_element_125;
            PyObject *tmp_kwargs_value_63;
            CHECK_OBJECT(tmp_JSON$class_creation_3__metaclass);
            tmp_called_value_108 = tmp_JSON$class_creation_3__metaclass;
            tmp_tuple_element_125 = mod_consts[292];
            tmp_args_value_63 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_63, 0, tmp_tuple_element_125);
            CHECK_OBJECT(tmp_JSON$class_creation_3__bases);
            tmp_tuple_element_125 = tmp_JSON$class_creation_3__bases;
            PyTuple_SET_ITEM0(tmp_args_value_63, 1, tmp_tuple_element_125);
            tmp_tuple_element_125 = locals_sqlalchemy$sql$sqltypes$$$class__32_JSONPathType_2276;
            PyTuple_SET_ITEM0(tmp_args_value_63, 2, tmp_tuple_element_125);
            CHECK_OBJECT(tmp_JSON$class_creation_3__class_decl_dict);
            tmp_kwargs_value_63 = tmp_JSON$class_creation_3__class_decl_dict;
            frame_d4a26a0482d921abe3cdbc3568d8027f_30->m_frame.f_lineno = 2276;
            tmp_assign_source_278 = CALL_FUNCTION(tmp_called_value_108, tmp_args_value_63, tmp_kwargs_value_63);
            Py_DECREF(tmp_args_value_63);
            if (tmp_assign_source_278 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2276;
                type_description_2 = "o";
                goto try_except_handler_96;
            }
            assert(outline_31_var___class__ == NULL);
            outline_31_var___class__ = tmp_assign_source_278;
        }
        CHECK_OBJECT(outline_31_var___class__);
        tmp_dictset_value = outline_31_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_96;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_96:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__32_JSONPathType_2276);
        locals_sqlalchemy$sql$sqltypes$$$class__32_JSONPathType_2276 = NULL;
        goto try_return_handler_95;
        // Exception handler code:
        try_except_handler_96:;
        exception_keeper_type_91 = exception_type;
        exception_keeper_value_91 = exception_value;
        exception_keeper_tb_91 = exception_tb;
        exception_keeper_lineno_91 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__32_JSONPathType_2276);
        locals_sqlalchemy$sql$sqltypes$$$class__32_JSONPathType_2276 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_91;
        exception_value = exception_keeper_value_91;
        exception_tb = exception_keeper_tb_91;
        exception_lineno = exception_keeper_lineno_91;

        goto try_except_handler_95;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_95:;
        CHECK_OBJECT(outline_31_var___class__);
        Py_DECREF(outline_31_var___class__);
        outline_31_var___class__ = NULL;
        goto outline_result_32;
        // Exception handler code:
        try_except_handler_95:;
        exception_keeper_type_92 = exception_type;
        exception_keeper_value_92 = exception_value;
        exception_keeper_tb_92 = exception_tb;
        exception_keeper_lineno_92 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_92;
        exception_value = exception_keeper_value_92;
        exception_tb = exception_keeper_tb_92;
        exception_lineno = exception_keeper_lineno_92;

        goto outline_exception_32;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_32:;
        exception_lineno = 2276;
        goto try_except_handler_94;
        outline_result_32:;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973, mod_consts[292], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2276;
            type_description_2 = "o";
            goto try_except_handler_94;
        }
        goto try_end_31;
        // Exception handler code:
        try_except_handler_94:;
        exception_keeper_type_93 = exception_type;
        exception_keeper_value_93 = exception_value;
        exception_keeper_tb_93 = exception_tb;
        exception_keeper_lineno_93 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_JSON$class_creation_3__bases_orig);
        Py_DECREF(tmp_JSON$class_creation_3__bases_orig);
        tmp_JSON$class_creation_3__bases_orig = NULL;
        Py_XDECREF(tmp_JSON$class_creation_3__bases);
        tmp_JSON$class_creation_3__bases = NULL;
        Py_XDECREF(tmp_JSON$class_creation_3__class_decl_dict);
        tmp_JSON$class_creation_3__class_decl_dict = NULL;
        Py_XDECREF(tmp_JSON$class_creation_3__metaclass);
        tmp_JSON$class_creation_3__metaclass = NULL;
        Py_XDECREF(tmp_JSON$class_creation_3__prepared);
        tmp_JSON$class_creation_3__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_93;
        exception_value = exception_keeper_value_93;
        exception_tb = exception_keeper_tb_93;
        exception_lineno = exception_keeper_lineno_93;

        goto frame_exception_exit_30;
        // End of try:
        try_end_31:;
        CHECK_OBJECT(tmp_JSON$class_creation_3__bases_orig);
        Py_DECREF(tmp_JSON$class_creation_3__bases_orig);
        tmp_JSON$class_creation_3__bases_orig = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_3__bases);
        Py_DECREF(tmp_JSON$class_creation_3__bases);
        tmp_JSON$class_creation_3__bases = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_3__class_decl_dict);
        Py_DECREF(tmp_JSON$class_creation_3__class_decl_dict);
        tmp_JSON$class_creation_3__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_3__metaclass);
        Py_DECREF(tmp_JSON$class_creation_3__metaclass);
        tmp_JSON$class_creation_3__metaclass = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_3__prepared);
        Py_DECREF(tmp_JSON$class_creation_3__prepared);
        tmp_JSON$class_creation_3__prepared = NULL;
        // Tried code:
        {
            PyObject *tmp_assign_source_279;
            PyObject *tmp_tuple_element_126;
            PyObject *tmp_expression_value_171;
            tmp_expression_value_171 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973, mod_consts[430]);

            if (tmp_expression_value_171 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_171 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[430]);

                    if (unlikely(tmp_expression_value_171 == NULL)) {
                        tmp_expression_value_171 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[430]);
                    }

                    if (tmp_expression_value_171 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2284;
                        type_description_2 = "o";
                        goto try_except_handler_97;
                    }
                    Py_INCREF(tmp_expression_value_171);
                } else {
                    goto try_except_handler_97;
                }
            }

            tmp_tuple_element_126 = LOOKUP_ATTRIBUTE(tmp_expression_value_171, mod_consts[9]);
            Py_DECREF(tmp_expression_value_171);
            if (tmp_tuple_element_126 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2284;
                type_description_2 = "o";
                goto try_except_handler_97;
            }
            tmp_assign_source_279 = PyTuple_New(2);
            {
                PyObject *tmp_expression_value_172;
                PyTuple_SET_ITEM(tmp_assign_source_279, 0, tmp_tuple_element_126);
                tmp_expression_value_172 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973, mod_consts[8]);

                if (tmp_expression_value_172 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_172 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[8]);

                        if (unlikely(tmp_expression_value_172 == NULL)) {
                            tmp_expression_value_172 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[8]);
                        }

                        if (tmp_expression_value_172 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 2284;
                            type_description_2 = "o";
                            goto tuple_build_exception_44;
                        }
                        Py_INCREF(tmp_expression_value_172);
                    } else {
                        goto tuple_build_exception_44;
                    }
                }

                tmp_tuple_element_126 = LOOKUP_ATTRIBUTE(tmp_expression_value_172, mod_consts[9]);
                Py_DECREF(tmp_expression_value_172);
                if (tmp_tuple_element_126 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2284;
                    type_description_2 = "o";
                    goto tuple_build_exception_44;
                }
                PyTuple_SET_ITEM(tmp_assign_source_279, 1, tmp_tuple_element_126);
            }
            goto tuple_build_noexception_44;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_44:;
            Py_DECREF(tmp_assign_source_279);
            goto try_except_handler_97;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_44:;
            assert(tmp_JSON$class_creation_4__bases_orig == NULL);
            tmp_JSON$class_creation_4__bases_orig = tmp_assign_source_279;
        }
        {
            PyObject *tmp_assign_source_280;
            PyObject *tmp_dircall_arg1_33;
            CHECK_OBJECT(tmp_JSON$class_creation_4__bases_orig);
            tmp_dircall_arg1_33 = tmp_JSON$class_creation_4__bases_orig;
            Py_INCREF(tmp_dircall_arg1_33);

            {
                PyObject *dir_call_args[] = {tmp_dircall_arg1_33};
                tmp_assign_source_280 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
            }
            if (tmp_assign_source_280 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2284;
                type_description_2 = "o";
                goto try_except_handler_97;
            }
            assert(tmp_JSON$class_creation_4__bases == NULL);
            tmp_JSON$class_creation_4__bases = tmp_assign_source_280;
        }
        {
            PyObject *tmp_assign_source_281;
            tmp_assign_source_281 = PyDict_New();
            assert(tmp_JSON$class_creation_4__class_decl_dict == NULL);
            tmp_JSON$class_creation_4__class_decl_dict = tmp_assign_source_281;
        }
        {
            PyObject *tmp_assign_source_282;
            PyObject *tmp_metaclass_value_33;
            bool tmp_condition_result_213;
            PyObject *tmp_key_value_97;
            PyObject *tmp_dict_arg_value_97;
            PyObject *tmp_dict_arg_value_98;
            PyObject *tmp_key_value_98;
            nuitka_bool tmp_condition_result_214;
            int tmp_truth_name_35;
            PyObject *tmp_type_arg_65;
            PyObject *tmp_expression_value_173;
            PyObject *tmp_subscript_value_33;
            PyObject *tmp_bases_value_33;
            tmp_key_value_97 = mod_consts[410];
            CHECK_OBJECT(tmp_JSON$class_creation_4__class_decl_dict);
            tmp_dict_arg_value_97 = tmp_JSON$class_creation_4__class_decl_dict;
            tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_97, tmp_key_value_97);
            assert(!(tmp_res == -1));
            tmp_condition_result_213 = (tmp_res != 0) ? true : false;
            if (tmp_condition_result_213 != false) {
                goto condexpr_true_84;
            } else {
                goto condexpr_false_84;
            }
            condexpr_true_84:;
            CHECK_OBJECT(tmp_JSON$class_creation_4__class_decl_dict);
            tmp_dict_arg_value_98 = tmp_JSON$class_creation_4__class_decl_dict;
            tmp_key_value_98 = mod_consts[410];
            tmp_metaclass_value_33 = DICT_GET_ITEM0(tmp_dict_arg_value_98, tmp_key_value_98);
            if (tmp_metaclass_value_33 == NULL) {
                tmp_metaclass_value_33 = Py_None;
            }
            assert(!(tmp_metaclass_value_33 == NULL));
            Py_INCREF(tmp_metaclass_value_33);
            goto condexpr_end_84;
            condexpr_false_84:;
            CHECK_OBJECT(tmp_JSON$class_creation_4__bases);
            tmp_truth_name_35 = CHECK_IF_TRUE(tmp_JSON$class_creation_4__bases);
            if (tmp_truth_name_35 == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2284;
                type_description_2 = "o";
                goto try_except_handler_97;
            }
            tmp_condition_result_214 = tmp_truth_name_35 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
            if (tmp_condition_result_214 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_85;
            } else {
                goto condexpr_false_85;
            }
            condexpr_true_85:;
            CHECK_OBJECT(tmp_JSON$class_creation_4__bases);
            tmp_expression_value_173 = tmp_JSON$class_creation_4__bases;
            tmp_subscript_value_33 = mod_consts[52];
            tmp_type_arg_65 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_173, tmp_subscript_value_33, 0);
            if (tmp_type_arg_65 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2284;
                type_description_2 = "o";
                goto try_except_handler_97;
            }
            tmp_metaclass_value_33 = BUILTIN_TYPE1(tmp_type_arg_65);
            Py_DECREF(tmp_type_arg_65);
            if (tmp_metaclass_value_33 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2284;
                type_description_2 = "o";
                goto try_except_handler_97;
            }
            goto condexpr_end_85;
            condexpr_false_85:;
            tmp_metaclass_value_33 = (PyObject *)&PyType_Type;
            Py_INCREF(tmp_metaclass_value_33);
            condexpr_end_85:;
            condexpr_end_84:;
            CHECK_OBJECT(tmp_JSON$class_creation_4__bases);
            tmp_bases_value_33 = tmp_JSON$class_creation_4__bases;
            tmp_assign_source_282 = SELECT_METACLASS(tmp_metaclass_value_33, tmp_bases_value_33);
            Py_DECREF(tmp_metaclass_value_33);
            if (tmp_assign_source_282 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2284;
                type_description_2 = "o";
                goto try_except_handler_97;
            }
            assert(tmp_JSON$class_creation_4__metaclass == NULL);
            tmp_JSON$class_creation_4__metaclass = tmp_assign_source_282;
        }
        {
            bool tmp_condition_result_215;
            PyObject *tmp_key_value_99;
            PyObject *tmp_dict_arg_value_99;
            tmp_key_value_99 = mod_consts[410];
            CHECK_OBJECT(tmp_JSON$class_creation_4__class_decl_dict);
            tmp_dict_arg_value_99 = tmp_JSON$class_creation_4__class_decl_dict;
            tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_99, tmp_key_value_99);
            assert(!(tmp_res == -1));
            tmp_condition_result_215 = (tmp_res != 0) ? true : false;
            if (tmp_condition_result_215 != false) {
                goto branch_yes_130;
            } else {
                goto branch_no_130;
            }
        }
        branch_yes_130:;
        CHECK_OBJECT(tmp_JSON$class_creation_4__class_decl_dict);
        tmp_dictdel_dict = tmp_JSON$class_creation_4__class_decl_dict;
        tmp_dictdel_key = mod_consts[410];
        tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2284;
            type_description_2 = "o";
            goto try_except_handler_97;
        }
        branch_no_130:;
        {
            nuitka_bool tmp_condition_result_216;
            PyObject *tmp_expression_value_174;
            CHECK_OBJECT(tmp_JSON$class_creation_4__metaclass);
            tmp_expression_value_174 = tmp_JSON$class_creation_4__metaclass;
            tmp_result = HAS_ATTR_BOOL(tmp_expression_value_174, mod_consts[411]);
            tmp_condition_result_216 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_216 == NUITKA_BOOL_TRUE) {
                goto branch_yes_131;
            } else {
                goto branch_no_131;
            }
        }
        branch_yes_131:;
        {
            PyObject *tmp_assign_source_283;
            PyObject *tmp_called_value_109;
            PyObject *tmp_expression_value_175;
            PyObject *tmp_args_value_64;
            PyObject *tmp_tuple_element_127;
            PyObject *tmp_kwargs_value_64;
            CHECK_OBJECT(tmp_JSON$class_creation_4__metaclass);
            tmp_expression_value_175 = tmp_JSON$class_creation_4__metaclass;
            tmp_called_value_109 = LOOKUP_ATTRIBUTE(tmp_expression_value_175, mod_consts[411]);
            if (tmp_called_value_109 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2284;
                type_description_2 = "o";
                goto try_except_handler_97;
            }
            tmp_tuple_element_127 = mod_consts[9];
            tmp_args_value_64 = PyTuple_New(2);
            PyTuple_SET_ITEM0(tmp_args_value_64, 0, tmp_tuple_element_127);
            CHECK_OBJECT(tmp_JSON$class_creation_4__bases);
            tmp_tuple_element_127 = tmp_JSON$class_creation_4__bases;
            PyTuple_SET_ITEM0(tmp_args_value_64, 1, tmp_tuple_element_127);
            CHECK_OBJECT(tmp_JSON$class_creation_4__class_decl_dict);
            tmp_kwargs_value_64 = tmp_JSON$class_creation_4__class_decl_dict;
            frame_d4a26a0482d921abe3cdbc3568d8027f_30->m_frame.f_lineno = 2284;
            tmp_assign_source_283 = CALL_FUNCTION(tmp_called_value_109, tmp_args_value_64, tmp_kwargs_value_64);
            Py_DECREF(tmp_called_value_109);
            Py_DECREF(tmp_args_value_64);
            if (tmp_assign_source_283 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2284;
                type_description_2 = "o";
                goto try_except_handler_97;
            }
            assert(tmp_JSON$class_creation_4__prepared == NULL);
            tmp_JSON$class_creation_4__prepared = tmp_assign_source_283;
        }
        {
            bool tmp_condition_result_217;
            PyObject *tmp_operand_value_33;
            PyObject *tmp_expression_value_176;
            CHECK_OBJECT(tmp_JSON$class_creation_4__prepared);
            tmp_expression_value_176 = tmp_JSON$class_creation_4__prepared;
            tmp_result = HAS_ATTR_BOOL(tmp_expression_value_176, mod_consts[413]);
            tmp_operand_value_33 = (tmp_result) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE(tmp_operand_value_33);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2284;
                type_description_2 = "o";
                goto try_except_handler_97;
            }
            tmp_condition_result_217 = (tmp_res == 0) ? true : false;
            if (tmp_condition_result_217 != false) {
                goto branch_yes_132;
            } else {
                goto branch_no_132;
            }
        }
        branch_yes_132:;
        {
            PyObject *tmp_raise_type_33;
            PyObject *tmp_raise_value_33;
            PyObject *tmp_left_value_33;
            PyObject *tmp_right_value_33;
            PyObject *tmp_tuple_element_128;
            PyObject *tmp_getattr_target_33;
            PyObject *tmp_getattr_attr_33;
            PyObject *tmp_getattr_default_33;
            tmp_raise_type_33 = PyExc_TypeError;
            tmp_left_value_33 = mod_consts[414];
            CHECK_OBJECT(tmp_JSON$class_creation_4__metaclass);
            tmp_getattr_target_33 = tmp_JSON$class_creation_4__metaclass;
            tmp_getattr_attr_33 = mod_consts[190];
            tmp_getattr_default_33 = mod_consts[415];
            tmp_tuple_element_128 = BUILTIN_GETATTR(tmp_getattr_target_33, tmp_getattr_attr_33, tmp_getattr_default_33);
            if (tmp_tuple_element_128 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2284;
                type_description_2 = "o";
                goto try_except_handler_97;
            }
            tmp_right_value_33 = PyTuple_New(2);
            {
                PyObject *tmp_expression_value_177;
                PyObject *tmp_type_arg_66;
                PyTuple_SET_ITEM(tmp_right_value_33, 0, tmp_tuple_element_128);
                CHECK_OBJECT(tmp_JSON$class_creation_4__prepared);
                tmp_type_arg_66 = tmp_JSON$class_creation_4__prepared;
                tmp_expression_value_177 = BUILTIN_TYPE1(tmp_type_arg_66);
                assert(!(tmp_expression_value_177 == NULL));
                tmp_tuple_element_128 = LOOKUP_ATTRIBUTE(tmp_expression_value_177, mod_consts[190]);
                Py_DECREF(tmp_expression_value_177);
                if (tmp_tuple_element_128 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2284;
                    type_description_2 = "o";
                    goto tuple_build_exception_45;
                }
                PyTuple_SET_ITEM(tmp_right_value_33, 1, tmp_tuple_element_128);
            }
            goto tuple_build_noexception_45;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_45:;
            Py_DECREF(tmp_right_value_33);
            goto try_except_handler_97;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_45:;
            tmp_raise_value_33 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_33, tmp_right_value_33);
            Py_DECREF(tmp_right_value_33);
            if (tmp_raise_value_33 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2284;
                type_description_2 = "o";
                goto try_except_handler_97;
            }
            exception_type = tmp_raise_type_33;
            Py_INCREF(tmp_raise_type_33);
            exception_value = tmp_raise_value_33;
            exception_lineno = 2284;
            RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);
            type_description_2 = "o";
            goto try_except_handler_97;
        }
        branch_no_132:;
        goto branch_end_131;
        branch_no_131:;
        {
            PyObject *tmp_assign_source_284;
            tmp_assign_source_284 = PyDict_New();
            assert(tmp_JSON$class_creation_4__prepared == NULL);
            tmp_JSON$class_creation_4__prepared = tmp_assign_source_284;
        }
        branch_end_131:;
        {
            PyObject *tmp_set_locals_33;
            CHECK_OBJECT(tmp_JSON$class_creation_4__prepared);
            tmp_set_locals_33 = tmp_JSON$class_creation_4__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__33_Comparator_2284 = tmp_set_locals_33;
            Py_INCREF(tmp_set_locals_33);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__33_Comparator_2284, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2284;
            type_description_2 = "o";
            goto try_except_handler_99;
        }
        tmp_dictset_value = mod_consts[621];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__33_Comparator_2284, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2284;
            type_description_2 = "o";
            goto try_except_handler_99;
        }
        tmp_dictset_value = mod_consts[622];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__33_Comparator_2284, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2284;
            type_description_2 = "o";
            goto try_except_handler_99;
        }
        if (isFrameUnusable(cache_frame_1fd8f5d3c9f7675388c71848c1c3421a_32)) {
            Py_XDECREF(cache_frame_1fd8f5d3c9f7675388c71848c1c3421a_32);

#if _DEBUG_REFCOUNTS
            if (cache_frame_1fd8f5d3c9f7675388c71848c1c3421a_32 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_1fd8f5d3c9f7675388c71848c1c3421a_32 = MAKE_FUNCTION_FRAME(codeobj_1fd8f5d3c9f7675388c71848c1c3421a, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_1fd8f5d3c9f7675388c71848c1c3421a_32->m_type_description == NULL);
        frame_1fd8f5d3c9f7675388c71848c1c3421a_32 = cache_frame_1fd8f5d3c9f7675388c71848c1c3421a_32;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_1fd8f5d3c9f7675388c71848c1c3421a_32);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_1fd8f5d3c9f7675388c71848c1c3421a_32) == 2); // Frame stack

        // Framed code:
        {
            PyObject *tmp_called_value_110;
            PyObject *tmp_called_instance_13;
            PyObject *tmp_args_element_value_47;
            tmp_called_instance_13 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__33_Comparator_2284, mod_consts[43]);

            if (tmp_called_instance_13 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_13 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_called_instance_13 == NULL)) {
                        tmp_called_instance_13 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
                    }

                    if (tmp_called_instance_13 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2287;
                        type_description_3 = "o";
                        goto frame_exception_exit_32;
                    }
                    Py_INCREF(tmp_called_instance_13);
                } else {
                    goto frame_exception_exit_32;
                }
            }

            frame_1fd8f5d3c9f7675388c71848c1c3421a_32->m_frame.f_lineno = 2287;
            tmp_called_value_110 = CALL_METHOD_WITH_SINGLE_ARG(
                tmp_called_instance_13,
                mod_consts[562],
                PyTuple_GET_ITEM(mod_consts[623], 0)
            );

            Py_DECREF(tmp_called_instance_13);
            if (tmp_called_value_110 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2287;
                type_description_3 = "o";
                goto frame_exception_exit_32;
            }


            tmp_args_element_value_47 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__112__setup_getitem();

            frame_1fd8f5d3c9f7675388c71848c1c3421a_32->m_frame.f_lineno = 2287;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_110, tmp_args_element_value_47);
            Py_DECREF(tmp_called_value_110);
            Py_DECREF(tmp_args_element_value_47);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2287;
                type_description_3 = "o";
                goto frame_exception_exit_32;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__33_Comparator_2284, mod_consts[14], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2288;
                type_description_3 = "o";
                goto frame_exception_exit_32;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__113_as_boolean();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__33_Comparator_2284, mod_consts[298], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2311;
            type_description_3 = "o";
            goto frame_exception_exit_32;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__114_as_string();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__33_Comparator_2284, mod_consts[300], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2327;
            type_description_3 = "o";
            goto frame_exception_exit_32;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__115_as_integer();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__33_Comparator_2284, mod_consts[302], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2344;
            type_description_3 = "o";
            goto frame_exception_exit_32;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__116_as_float();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__33_Comparator_2284, mod_consts[305], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2360;
            type_description_3 = "o";
            goto frame_exception_exit_32;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__117_as_json();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__33_Comparator_2284, mod_consts[629], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2377;
            type_description_3 = "o";
            goto frame_exception_exit_32;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__118__binary_w_type();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__33_Comparator_2284, mod_consts[296], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2390;
            type_description_3 = "o";
            goto frame_exception_exit_32;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_1fd8f5d3c9f7675388c71848c1c3421a_32);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_30;

        frame_exception_exit_32:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_1fd8f5d3c9f7675388c71848c1c3421a_32);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_1fd8f5d3c9f7675388c71848c1c3421a_32, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_1fd8f5d3c9f7675388c71848c1c3421a_32->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_1fd8f5d3c9f7675388c71848c1c3421a_32, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_1fd8f5d3c9f7675388c71848c1c3421a_32,
            type_description_3,
            outline_32_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_1fd8f5d3c9f7675388c71848c1c3421a_32 == cache_frame_1fd8f5d3c9f7675388c71848c1c3421a_32) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_1fd8f5d3c9f7675388c71848c1c3421a_32);
            cache_frame_1fd8f5d3c9f7675388c71848c1c3421a_32 = NULL;
        }

        assertFrameObject(frame_1fd8f5d3c9f7675388c71848c1c3421a_32);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_31;

        frame_no_exception_30:;
        goto skip_nested_handling_30;
        nested_frame_exit_31:;
        type_description_2 = "o";
        goto try_except_handler_99;
        skip_nested_handling_30:;
        {
            nuitka_bool tmp_condition_result_218;
            PyObject *tmp_cmp_expr_left_32;
            PyObject *tmp_cmp_expr_right_32;
            CHECK_OBJECT(tmp_JSON$class_creation_4__bases);
            tmp_cmp_expr_left_32 = tmp_JSON$class_creation_4__bases;
            CHECK_OBJECT(tmp_JSON$class_creation_4__bases_orig);
            tmp_cmp_expr_right_32 = tmp_JSON$class_creation_4__bases_orig;
            tmp_condition_result_218 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_32, tmp_cmp_expr_right_32);
            if (tmp_condition_result_218 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2284;
                type_description_2 = "o";
                goto try_except_handler_99;
            }
            if (tmp_condition_result_218 == NUITKA_BOOL_TRUE) {
                goto branch_yes_133;
            } else {
                goto branch_no_133;
            }
            assert(tmp_condition_result_218 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_133:;
        CHECK_OBJECT(tmp_JSON$class_creation_4__bases_orig);
        tmp_dictset_value = tmp_JSON$class_creation_4__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__33_Comparator_2284, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2284;
            type_description_2 = "o";
            goto try_except_handler_99;
        }
        branch_no_133:;
        {
            PyObject *tmp_assign_source_285;
            PyObject *tmp_called_value_111;
            PyObject *tmp_args_value_65;
            PyObject *tmp_tuple_element_129;
            PyObject *tmp_kwargs_value_65;
            CHECK_OBJECT(tmp_JSON$class_creation_4__metaclass);
            tmp_called_value_111 = tmp_JSON$class_creation_4__metaclass;
            tmp_tuple_element_129 = mod_consts[9];
            tmp_args_value_65 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_65, 0, tmp_tuple_element_129);
            CHECK_OBJECT(tmp_JSON$class_creation_4__bases);
            tmp_tuple_element_129 = tmp_JSON$class_creation_4__bases;
            PyTuple_SET_ITEM0(tmp_args_value_65, 1, tmp_tuple_element_129);
            tmp_tuple_element_129 = locals_sqlalchemy$sql$sqltypes$$$class__33_Comparator_2284;
            PyTuple_SET_ITEM0(tmp_args_value_65, 2, tmp_tuple_element_129);
            CHECK_OBJECT(tmp_JSON$class_creation_4__class_decl_dict);
            tmp_kwargs_value_65 = tmp_JSON$class_creation_4__class_decl_dict;
            frame_d4a26a0482d921abe3cdbc3568d8027f_30->m_frame.f_lineno = 2284;
            tmp_assign_source_285 = CALL_FUNCTION(tmp_called_value_111, tmp_args_value_65, tmp_kwargs_value_65);
            Py_DECREF(tmp_args_value_65);
            if (tmp_assign_source_285 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2284;
                type_description_2 = "o";
                goto try_except_handler_99;
            }
            assert(outline_32_var___class__ == NULL);
            outline_32_var___class__ = tmp_assign_source_285;
        }
        CHECK_OBJECT(outline_32_var___class__);
        tmp_dictset_value = outline_32_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_99;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_99:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__33_Comparator_2284);
        locals_sqlalchemy$sql$sqltypes$$$class__33_Comparator_2284 = NULL;
        goto try_return_handler_98;
        // Exception handler code:
        try_except_handler_99:;
        exception_keeper_type_94 = exception_type;
        exception_keeper_value_94 = exception_value;
        exception_keeper_tb_94 = exception_tb;
        exception_keeper_lineno_94 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__33_Comparator_2284);
        locals_sqlalchemy$sql$sqltypes$$$class__33_Comparator_2284 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_94;
        exception_value = exception_keeper_value_94;
        exception_tb = exception_keeper_tb_94;
        exception_lineno = exception_keeper_lineno_94;

        goto try_except_handler_98;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_98:;
        CHECK_OBJECT(outline_32_var___class__);
        Py_DECREF(outline_32_var___class__);
        outline_32_var___class__ = NULL;
        goto outline_result_33;
        // Exception handler code:
        try_except_handler_98:;
        exception_keeper_type_95 = exception_type;
        exception_keeper_value_95 = exception_value;
        exception_keeper_tb_95 = exception_tb;
        exception_keeper_lineno_95 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_95;
        exception_value = exception_keeper_value_95;
        exception_tb = exception_keeper_tb_95;
        exception_lineno = exception_keeper_lineno_95;

        goto outline_exception_33;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_33:;
        exception_lineno = 2284;
        goto try_except_handler_97;
        outline_result_33:;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973, mod_consts[9], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2284;
            type_description_2 = "o";
            goto try_except_handler_97;
        }
        goto try_end_32;
        // Exception handler code:
        try_except_handler_97:;
        exception_keeper_type_96 = exception_type;
        exception_keeper_value_96 = exception_value;
        exception_keeper_tb_96 = exception_tb;
        exception_keeper_lineno_96 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_JSON$class_creation_4__bases_orig);
        tmp_JSON$class_creation_4__bases_orig = NULL;
        Py_XDECREF(tmp_JSON$class_creation_4__bases);
        tmp_JSON$class_creation_4__bases = NULL;
        Py_XDECREF(tmp_JSON$class_creation_4__class_decl_dict);
        tmp_JSON$class_creation_4__class_decl_dict = NULL;
        Py_XDECREF(tmp_JSON$class_creation_4__metaclass);
        tmp_JSON$class_creation_4__metaclass = NULL;
        Py_XDECREF(tmp_JSON$class_creation_4__prepared);
        tmp_JSON$class_creation_4__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_96;
        exception_value = exception_keeper_value_96;
        exception_tb = exception_keeper_tb_96;
        exception_lineno = exception_keeper_lineno_96;

        goto frame_exception_exit_30;
        // End of try:
        try_end_32:;
        CHECK_OBJECT(tmp_JSON$class_creation_4__bases_orig);
        Py_DECREF(tmp_JSON$class_creation_4__bases_orig);
        tmp_JSON$class_creation_4__bases_orig = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_4__bases);
        Py_DECREF(tmp_JSON$class_creation_4__bases);
        tmp_JSON$class_creation_4__bases = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_4__class_decl_dict);
        Py_DECREF(tmp_JSON$class_creation_4__class_decl_dict);
        tmp_JSON$class_creation_4__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_4__metaclass);
        Py_DECREF(tmp_JSON$class_creation_4__metaclass);
        tmp_JSON$class_creation_4__metaclass = NULL;
        CHECK_OBJECT(tmp_JSON$class_creation_4__prepared);
        Py_DECREF(tmp_JSON$class_creation_4__prepared);
        tmp_JSON$class_creation_4__prepared = NULL;
        tmp_dictset_value = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973, mod_consts[9]);

        if (unlikely(tmp_dictset_value == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

            FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[9]);
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2406;
            type_description_2 = "o";
            goto frame_exception_exit_30;
        }

        if (tmp_dictset_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2406;
            type_description_2 = "o";
            goto frame_exception_exit_30;
        }
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973, mod_consts[426], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2406;
            type_description_2 = "o";
            goto frame_exception_exit_30;
        }
        {
            nuitka_bool tmp_condition_result_219;
            PyObject *tmp_called_value_112;
            PyObject *tmp_args_element_value_48;
            PyObject *tmp_called_value_113;
            PyObject *tmp_args_element_value_49;
            tmp_res = MAPPING_HAS_ITEM(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973, mod_consts[420]);

            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2408;
                type_description_2 = "o";
                goto frame_exception_exit_30;
            }
            tmp_condition_result_219 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_219 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_86;
            } else {
                goto condexpr_false_86;
            }
            condexpr_true_86:;
            tmp_called_value_112 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973, mod_consts[420]);

            if (unlikely(tmp_called_value_112 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[420]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2408;
                type_description_2 = "o";
                goto frame_exception_exit_30;
            }

            if (tmp_called_value_112 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2408;
                type_description_2 = "o";
                goto frame_exception_exit_30;
            }


            tmp_args_element_value_48 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__119_python_type();

            frame_d4a26a0482d921abe3cdbc3568d8027f_30->m_frame.f_lineno = 2408;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_112, tmp_args_element_value_48);
            Py_DECREF(tmp_called_value_112);
            Py_DECREF(tmp_args_element_value_48);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2408;
                type_description_2 = "o";
                goto frame_exception_exit_30;
            }
            goto condexpr_end_86;
            condexpr_false_86:;
            tmp_called_value_113 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_49 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__119_python_type();

            frame_d4a26a0482d921abe3cdbc3568d8027f_30->m_frame.f_lineno = 2408;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_113, tmp_args_element_value_49);
            Py_DECREF(tmp_args_element_value_49);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2408;
                type_description_2 = "o";
                goto frame_exception_exit_30;
            }
            condexpr_end_86:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973, mod_consts[236], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2409;
                type_description_2 = "o";
                goto frame_exception_exit_30;
            }
        }
        {
            nuitka_bool tmp_condition_result_220;
            PyObject *tmp_called_value_114;
            PyObject *tmp_args_element_value_50;
            PyObject *tmp_called_value_115;
            PyObject *tmp_args_element_value_51;
            tmp_res = MAPPING_HAS_ITEM(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973, mod_consts[420]);

            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2412;
                type_description_2 = "o";
                goto frame_exception_exit_30;
            }
            tmp_condition_result_220 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_220 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_87;
            } else {
                goto condexpr_false_87;
            }
            condexpr_true_87:;
            tmp_called_value_114 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973, mod_consts[420]);

            if (unlikely(tmp_called_value_114 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[420]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2412;
                type_description_2 = "o";
                goto frame_exception_exit_30;
            }

            if (tmp_called_value_114 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2412;
                type_description_2 = "o";
                goto frame_exception_exit_30;
            }


            tmp_args_element_value_50 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__120_should_evaluate_none();

            frame_d4a26a0482d921abe3cdbc3568d8027f_30->m_frame.f_lineno = 2412;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_114, tmp_args_element_value_50);
            Py_DECREF(tmp_called_value_114);
            Py_DECREF(tmp_args_element_value_50);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2412;
                type_description_2 = "o";
                goto frame_exception_exit_30;
            }
            goto condexpr_end_87;
            condexpr_false_87:;
            tmp_called_value_115 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_51 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__120_should_evaluate_none();

            frame_d4a26a0482d921abe3cdbc3568d8027f_30->m_frame.f_lineno = 2412;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_115, tmp_args_element_value_51);
            Py_DECREF(tmp_args_element_value_51);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2412;
                type_description_2 = "o";
                goto frame_exception_exit_30;
            }
            condexpr_end_87:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973, mod_consts[633], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2413;
                type_description_2 = "o";
                goto frame_exception_exit_30;
            }
        }
        {
            PyObject *tmp_called_instance_14;
            PyObject *tmp_args_element_value_52;
            tmp_called_instance_14 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973, mod_consts[633]);

            if (unlikely(tmp_called_instance_14 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[633]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2417;
                type_description_2 = "o";
                goto frame_exception_exit_30;
            }

            if (tmp_called_instance_14 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2417;
                type_description_2 = "o";
                goto frame_exception_exit_30;
            }


            tmp_args_element_value_52 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__121_should_evaluate_none();

            frame_d4a26a0482d921abe3cdbc3568d8027f_30->m_frame.f_lineno = 2417;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_14, mod_consts[635], tmp_args_element_value_52);
            Py_DECREF(tmp_called_instance_14);
            Py_DECREF(tmp_args_element_value_52);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2417;
                type_description_2 = "o";
                goto frame_exception_exit_30;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973, mod_consts[633], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2418;
                type_description_2 = "o";
                goto frame_exception_exit_30;
            }
        }
        {
            PyObject *tmp_called_instance_15;
            PyObject *tmp_args_element_value_53;
            tmp_called_instance_15 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973, mod_consts[43]);

            if (tmp_called_instance_15 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_15 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_called_instance_15 == NULL)) {
                        tmp_called_instance_15 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
                    }

                    if (tmp_called_instance_15 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2421;
                        type_description_2 = "o";
                        goto frame_exception_exit_30;
                    }
                    Py_INCREF(tmp_called_instance_15);
                } else {
                    goto frame_exception_exit_30;
                }
            }



            tmp_args_element_value_53 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__122__str_impl();

            frame_d4a26a0482d921abe3cdbc3568d8027f_30->m_frame.f_lineno = 2421;
            tmp_dictset_value = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_15, mod_consts[467], tmp_args_element_value_53);
            Py_DECREF(tmp_called_instance_15);
            Py_DECREF(tmp_args_element_value_53);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2421;
                type_description_2 = "o";
                goto frame_exception_exit_30;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973, mod_consts[316], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2422;
                type_description_2 = "o";
                goto frame_exception_exit_30;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__123_bind_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973, mod_consts[232], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2425;
            type_description_2 = "o";
            goto frame_exception_exit_30;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__124_result_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973, mod_consts[233], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2445;
            type_description_2 = "o";
            goto frame_exception_exit_30;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_d4a26a0482d921abe3cdbc3568d8027f_30);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_31;

        frame_exception_exit_30:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_d4a26a0482d921abe3cdbc3568d8027f_30);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_d4a26a0482d921abe3cdbc3568d8027f_30, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_d4a26a0482d921abe3cdbc3568d8027f_30->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_d4a26a0482d921abe3cdbc3568d8027f_30, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_d4a26a0482d921abe3cdbc3568d8027f_30,
            type_description_2,
            outline_28_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_d4a26a0482d921abe3cdbc3568d8027f_30 == cache_frame_d4a26a0482d921abe3cdbc3568d8027f_30) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_d4a26a0482d921abe3cdbc3568d8027f_30);
            cache_frame_d4a26a0482d921abe3cdbc3568d8027f_30 = NULL;
        }

        assertFrameObject(frame_d4a26a0482d921abe3cdbc3568d8027f_30);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_29;

        frame_no_exception_31:;
        goto skip_nested_handling_31;
        nested_frame_exit_29:;

        goto try_except_handler_87;
        skip_nested_handling_31:;
        {
            nuitka_bool tmp_condition_result_221;
            PyObject *tmp_cmp_expr_left_33;
            PyObject *tmp_cmp_expr_right_33;
            CHECK_OBJECT(tmp_class_creation_25__bases);
            tmp_cmp_expr_left_33 = tmp_class_creation_25__bases;
            CHECK_OBJECT(tmp_class_creation_25__bases_orig);
            tmp_cmp_expr_right_33 = tmp_class_creation_25__bases_orig;
            tmp_condition_result_221 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_33, tmp_cmp_expr_right_33);
            if (tmp_condition_result_221 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1973;

                goto try_except_handler_87;
            }
            if (tmp_condition_result_221 == NUITKA_BOOL_TRUE) {
                goto branch_yes_134;
            } else {
                goto branch_no_134;
            }
            assert(tmp_condition_result_221 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_134:;
        CHECK_OBJECT(tmp_class_creation_25__bases_orig);
        tmp_dictset_value = tmp_class_creation_25__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1973;

            goto try_except_handler_87;
        }
        branch_no_134:;
        {
            PyObject *tmp_assign_source_286;
            PyObject *tmp_called_value_116;
            PyObject *tmp_args_value_66;
            PyObject *tmp_tuple_element_130;
            PyObject *tmp_kwargs_value_66;
            CHECK_OBJECT(tmp_class_creation_25__metaclass);
            tmp_called_value_116 = tmp_class_creation_25__metaclass;
            tmp_tuple_element_130 = mod_consts[291];
            tmp_args_value_66 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_66, 0, tmp_tuple_element_130);
            CHECK_OBJECT(tmp_class_creation_25__bases);
            tmp_tuple_element_130 = tmp_class_creation_25__bases;
            PyTuple_SET_ITEM0(tmp_args_value_66, 1, tmp_tuple_element_130);
            tmp_tuple_element_130 = locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973;
            PyTuple_SET_ITEM0(tmp_args_value_66, 2, tmp_tuple_element_130);
            CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
            tmp_kwargs_value_66 = tmp_class_creation_25__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 1973;
            tmp_assign_source_286 = CALL_FUNCTION(tmp_called_value_116, tmp_args_value_66, tmp_kwargs_value_66);
            Py_DECREF(tmp_args_value_66);
            if (tmp_assign_source_286 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1973;

                goto try_except_handler_87;
            }
            assert(outline_28_var___class__ == NULL);
            outline_28_var___class__ = tmp_assign_source_286;
        }
        CHECK_OBJECT(outline_28_var___class__);
        tmp_assign_source_257 = outline_28_var___class__;
        Py_INCREF(tmp_assign_source_257);
        goto try_return_handler_87;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_87:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973);
        locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973 = NULL;
        goto try_return_handler_86;
        // Exception handler code:
        try_except_handler_87:;
        exception_keeper_type_97 = exception_type;
        exception_keeper_value_97 = exception_value;
        exception_keeper_tb_97 = exception_tb;
        exception_keeper_lineno_97 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973);
        locals_sqlalchemy$sql$sqltypes$$$class__29_JSON_1973 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_97;
        exception_value = exception_keeper_value_97;
        exception_tb = exception_keeper_tb_97;
        exception_lineno = exception_keeper_lineno_97;

        goto try_except_handler_86;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_86:;
        CHECK_OBJECT(outline_28_var___class__);
        Py_DECREF(outline_28_var___class__);
        outline_28_var___class__ = NULL;
        goto outline_result_29;
        // Exception handler code:
        try_except_handler_86:;
        exception_keeper_type_98 = exception_type;
        exception_keeper_value_98 = exception_value;
        exception_keeper_tb_98 = exception_tb;
        exception_keeper_lineno_98 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_98;
        exception_value = exception_keeper_value_98;
        exception_tb = exception_keeper_tb_98;
        exception_lineno = exception_keeper_lineno_98;

        goto outline_exception_29;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_29:;
        exception_lineno = 1973;
        goto try_except_handler_85;
        outline_result_29:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[291], tmp_assign_source_257);
    }
    goto try_end_33;
    // Exception handler code:
    try_except_handler_85:;
    exception_keeper_type_99 = exception_type;
    exception_keeper_value_99 = exception_value;
    exception_keeper_tb_99 = exception_tb;
    exception_keeper_lineno_99 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_25__bases_orig);
    tmp_class_creation_25__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_25__bases);
    tmp_class_creation_25__bases = NULL;
    Py_XDECREF(tmp_class_creation_25__class_decl_dict);
    tmp_class_creation_25__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_25__metaclass);
    tmp_class_creation_25__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_25__prepared);
    tmp_class_creation_25__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_99;
    exception_value = exception_keeper_value_99;
    exception_tb = exception_keeper_tb_99;
    exception_lineno = exception_keeper_lineno_99;

    goto frame_exception_exit_1;
    // End of try:
    try_end_33:;
    CHECK_OBJECT(tmp_class_creation_25__bases_orig);
    Py_DECREF(tmp_class_creation_25__bases_orig);
    tmp_class_creation_25__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_25__bases);
    Py_DECREF(tmp_class_creation_25__bases);
    tmp_class_creation_25__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
    Py_DECREF(tmp_class_creation_25__class_decl_dict);
    tmp_class_creation_25__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_25__metaclass);
    Py_DECREF(tmp_class_creation_25__metaclass);
    tmp_class_creation_25__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_25__prepared);
    Py_DECREF(tmp_class_creation_25__prepared);
    tmp_class_creation_25__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_287;
        PyObject *tmp_tuple_element_131;
        tmp_tuple_element_131 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[353]);

        if (unlikely(tmp_tuple_element_131 == NULL)) {
            tmp_tuple_element_131 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[353]);
        }

        if (tmp_tuple_element_131 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2459;

            goto try_except_handler_100;
        }
        tmp_assign_source_287 = PyTuple_New(4);
        PyTuple_SET_ITEM0(tmp_assign_source_287, 0, tmp_tuple_element_131);
        tmp_tuple_element_131 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[430]);

        if (unlikely(tmp_tuple_element_131 == NULL)) {
            tmp_tuple_element_131 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[430]);
        }

        if (tmp_tuple_element_131 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2459;

            goto tuple_build_exception_46;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_287, 1, tmp_tuple_element_131);
        tmp_tuple_element_131 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[8]);

        if (unlikely(tmp_tuple_element_131 == NULL)) {
            tmp_tuple_element_131 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[8]);
        }

        if (tmp_tuple_element_131 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2459;

            goto tuple_build_exception_46;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_287, 2, tmp_tuple_element_131);
        tmp_tuple_element_131 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[398]);

        if (unlikely(tmp_tuple_element_131 == NULL)) {
            tmp_tuple_element_131 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[398]);
        }

        if (tmp_tuple_element_131 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2459;

            goto tuple_build_exception_46;
        }
        PyTuple_SET_ITEM0(tmp_assign_source_287, 3, tmp_tuple_element_131);
        goto tuple_build_noexception_46;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_46:;
        Py_DECREF(tmp_assign_source_287);
        goto try_except_handler_100;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_46:;
        assert(tmp_class_creation_26__bases_orig == NULL);
        tmp_class_creation_26__bases_orig = tmp_assign_source_287;
    }
    {
        PyObject *tmp_assign_source_288;
        PyObject *tmp_dircall_arg1_34;
        CHECK_OBJECT(tmp_class_creation_26__bases_orig);
        tmp_dircall_arg1_34 = tmp_class_creation_26__bases_orig;
        Py_INCREF(tmp_dircall_arg1_34);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_34};
            tmp_assign_source_288 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_288 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2459;

            goto try_except_handler_100;
        }
        assert(tmp_class_creation_26__bases == NULL);
        tmp_class_creation_26__bases = tmp_assign_source_288;
    }
    {
        PyObject *tmp_assign_source_289;
        tmp_assign_source_289 = PyDict_New();
        assert(tmp_class_creation_26__class_decl_dict == NULL);
        tmp_class_creation_26__class_decl_dict = tmp_assign_source_289;
    }
    {
        PyObject *tmp_assign_source_290;
        PyObject *tmp_metaclass_value_34;
        bool tmp_condition_result_222;
        PyObject *tmp_key_value_100;
        PyObject *tmp_dict_arg_value_100;
        PyObject *tmp_dict_arg_value_101;
        PyObject *tmp_key_value_101;
        nuitka_bool tmp_condition_result_223;
        int tmp_truth_name_36;
        PyObject *tmp_type_arg_67;
        PyObject *tmp_expression_value_178;
        PyObject *tmp_subscript_value_34;
        PyObject *tmp_bases_value_34;
        tmp_key_value_100 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
        tmp_dict_arg_value_100 = tmp_class_creation_26__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_100, tmp_key_value_100);
        assert(!(tmp_res == -1));
        tmp_condition_result_222 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_222 != false) {
            goto condexpr_true_88;
        } else {
            goto condexpr_false_88;
        }
        condexpr_true_88:;
        CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
        tmp_dict_arg_value_101 = tmp_class_creation_26__class_decl_dict;
        tmp_key_value_101 = mod_consts[410];
        tmp_metaclass_value_34 = DICT_GET_ITEM0(tmp_dict_arg_value_101, tmp_key_value_101);
        if (tmp_metaclass_value_34 == NULL) {
            tmp_metaclass_value_34 = Py_None;
        }
        assert(!(tmp_metaclass_value_34 == NULL));
        Py_INCREF(tmp_metaclass_value_34);
        goto condexpr_end_88;
        condexpr_false_88:;
        CHECK_OBJECT(tmp_class_creation_26__bases);
        tmp_truth_name_36 = CHECK_IF_TRUE(tmp_class_creation_26__bases);
        if (tmp_truth_name_36 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2459;

            goto try_except_handler_100;
        }
        tmp_condition_result_223 = tmp_truth_name_36 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_223 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_89;
        } else {
            goto condexpr_false_89;
        }
        condexpr_true_89:;
        CHECK_OBJECT(tmp_class_creation_26__bases);
        tmp_expression_value_178 = tmp_class_creation_26__bases;
        tmp_subscript_value_34 = mod_consts[52];
        tmp_type_arg_67 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_178, tmp_subscript_value_34, 0);
        if (tmp_type_arg_67 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2459;

            goto try_except_handler_100;
        }
        tmp_metaclass_value_34 = BUILTIN_TYPE1(tmp_type_arg_67);
        Py_DECREF(tmp_type_arg_67);
        if (tmp_metaclass_value_34 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2459;

            goto try_except_handler_100;
        }
        goto condexpr_end_89;
        condexpr_false_89:;
        tmp_metaclass_value_34 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_34);
        condexpr_end_89:;
        condexpr_end_88:;
        CHECK_OBJECT(tmp_class_creation_26__bases);
        tmp_bases_value_34 = tmp_class_creation_26__bases;
        tmp_assign_source_290 = SELECT_METACLASS(tmp_metaclass_value_34, tmp_bases_value_34);
        Py_DECREF(tmp_metaclass_value_34);
        if (tmp_assign_source_290 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2459;

            goto try_except_handler_100;
        }
        assert(tmp_class_creation_26__metaclass == NULL);
        tmp_class_creation_26__metaclass = tmp_assign_source_290;
    }
    {
        bool tmp_condition_result_224;
        PyObject *tmp_key_value_102;
        PyObject *tmp_dict_arg_value_102;
        tmp_key_value_102 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
        tmp_dict_arg_value_102 = tmp_class_creation_26__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_102, tmp_key_value_102);
        assert(!(tmp_res == -1));
        tmp_condition_result_224 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_224 != false) {
            goto branch_yes_135;
        } else {
            goto branch_no_135;
        }
    }
    branch_yes_135:;
    CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_26__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2459;

        goto try_except_handler_100;
    }
    branch_no_135:;
    {
        nuitka_bool tmp_condition_result_225;
        PyObject *tmp_expression_value_179;
        CHECK_OBJECT(tmp_class_creation_26__metaclass);
        tmp_expression_value_179 = tmp_class_creation_26__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_179, mod_consts[411]);
        tmp_condition_result_225 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_225 == NUITKA_BOOL_TRUE) {
            goto branch_yes_136;
        } else {
            goto branch_no_136;
        }
    }
    branch_yes_136:;
    {
        PyObject *tmp_assign_source_291;
        PyObject *tmp_called_value_117;
        PyObject *tmp_expression_value_180;
        PyObject *tmp_args_value_67;
        PyObject *tmp_tuple_element_132;
        PyObject *tmp_kwargs_value_67;
        CHECK_OBJECT(tmp_class_creation_26__metaclass);
        tmp_expression_value_180 = tmp_class_creation_26__metaclass;
        tmp_called_value_117 = LOOKUP_ATTRIBUTE(tmp_expression_value_180, mod_consts[411]);
        if (tmp_called_value_117 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2459;

            goto try_except_handler_100;
        }
        tmp_tuple_element_132 = mod_consts[349];
        tmp_args_value_67 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_67, 0, tmp_tuple_element_132);
        CHECK_OBJECT(tmp_class_creation_26__bases);
        tmp_tuple_element_132 = tmp_class_creation_26__bases;
        PyTuple_SET_ITEM0(tmp_args_value_67, 1, tmp_tuple_element_132);
        CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
        tmp_kwargs_value_67 = tmp_class_creation_26__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2459;
        tmp_assign_source_291 = CALL_FUNCTION(tmp_called_value_117, tmp_args_value_67, tmp_kwargs_value_67);
        Py_DECREF(tmp_called_value_117);
        Py_DECREF(tmp_args_value_67);
        if (tmp_assign_source_291 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2459;

            goto try_except_handler_100;
        }
        assert(tmp_class_creation_26__prepared == NULL);
        tmp_class_creation_26__prepared = tmp_assign_source_291;
    }
    {
        bool tmp_condition_result_226;
        PyObject *tmp_operand_value_34;
        PyObject *tmp_expression_value_181;
        CHECK_OBJECT(tmp_class_creation_26__prepared);
        tmp_expression_value_181 = tmp_class_creation_26__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_181, mod_consts[413]);
        tmp_operand_value_34 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_34);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2459;

            goto try_except_handler_100;
        }
        tmp_condition_result_226 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_226 != false) {
            goto branch_yes_137;
        } else {
            goto branch_no_137;
        }
    }
    branch_yes_137:;
    {
        PyObject *tmp_raise_type_34;
        PyObject *tmp_raise_value_34;
        PyObject *tmp_left_value_34;
        PyObject *tmp_right_value_34;
        PyObject *tmp_tuple_element_133;
        PyObject *tmp_getattr_target_34;
        PyObject *tmp_getattr_attr_34;
        PyObject *tmp_getattr_default_34;
        tmp_raise_type_34 = PyExc_TypeError;
        tmp_left_value_34 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_26__metaclass);
        tmp_getattr_target_34 = tmp_class_creation_26__metaclass;
        tmp_getattr_attr_34 = mod_consts[190];
        tmp_getattr_default_34 = mod_consts[415];
        tmp_tuple_element_133 = BUILTIN_GETATTR(tmp_getattr_target_34, tmp_getattr_attr_34, tmp_getattr_default_34);
        if (tmp_tuple_element_133 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2459;

            goto try_except_handler_100;
        }
        tmp_right_value_34 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_182;
            PyObject *tmp_type_arg_68;
            PyTuple_SET_ITEM(tmp_right_value_34, 0, tmp_tuple_element_133);
            CHECK_OBJECT(tmp_class_creation_26__prepared);
            tmp_type_arg_68 = tmp_class_creation_26__prepared;
            tmp_expression_value_182 = BUILTIN_TYPE1(tmp_type_arg_68);
            assert(!(tmp_expression_value_182 == NULL));
            tmp_tuple_element_133 = LOOKUP_ATTRIBUTE(tmp_expression_value_182, mod_consts[190]);
            Py_DECREF(tmp_expression_value_182);
            if (tmp_tuple_element_133 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2459;

                goto tuple_build_exception_47;
            }
            PyTuple_SET_ITEM(tmp_right_value_34, 1, tmp_tuple_element_133);
        }
        goto tuple_build_noexception_47;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_47:;
        Py_DECREF(tmp_right_value_34);
        goto try_except_handler_100;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_47:;
        tmp_raise_value_34 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_34, tmp_right_value_34);
        Py_DECREF(tmp_right_value_34);
        if (tmp_raise_value_34 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2459;

            goto try_except_handler_100;
        }
        exception_type = tmp_raise_type_34;
        Py_INCREF(tmp_raise_type_34);
        exception_value = tmp_raise_value_34;
        exception_lineno = 2459;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_100;
    }
    branch_no_137:;
    goto branch_end_136;
    branch_no_136:;
    {
        PyObject *tmp_assign_source_292;
        tmp_assign_source_292 = PyDict_New();
        assert(tmp_class_creation_26__prepared == NULL);
        tmp_class_creation_26__prepared = tmp_assign_source_292;
    }
    branch_end_136:;
    {
        PyObject *tmp_assign_source_293;
        {
            PyObject *tmp_set_locals_34;
            CHECK_OBJECT(tmp_class_creation_26__prepared);
            tmp_set_locals_34 = tmp_class_creation_26__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__34_ARRAY_2459 = tmp_set_locals_34;
            Py_INCREF(tmp_set_locals_34);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__34_ARRAY_2459, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2459;

            goto try_except_handler_102;
        }
        tmp_dictset_value = mod_consts[639];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__34_ARRAY_2459, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2459;

            goto try_except_handler_102;
        }
        tmp_dictset_value = mod_consts[349];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__34_ARRAY_2459, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2459;

            goto try_except_handler_102;
        }
        if (isFrameUnusable(cache_frame_369d7ea6640ba71a1b5df134a8ede170_33)) {
            Py_XDECREF(cache_frame_369d7ea6640ba71a1b5df134a8ede170_33);

#if _DEBUG_REFCOUNTS
            if (cache_frame_369d7ea6640ba71a1b5df134a8ede170_33 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_369d7ea6640ba71a1b5df134a8ede170_33 = MAKE_FUNCTION_FRAME(codeobj_369d7ea6640ba71a1b5df134a8ede170, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_369d7ea6640ba71a1b5df134a8ede170_33->m_type_description == NULL);
        frame_369d7ea6640ba71a1b5df134a8ede170_33 = cache_frame_369d7ea6640ba71a1b5df134a8ede170_33;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_369d7ea6640ba71a1b5df134a8ede170_33);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_369d7ea6640ba71a1b5df134a8ede170_33) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[349];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__34_ARRAY_2459, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2553;
            type_description_2 = "o";
            goto frame_exception_exit_33;
        }
        tmp_dictset_value = Py_False;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__34_ARRAY_2459, mod_consts[327], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2555;
            type_description_2 = "o";
            goto frame_exception_exit_33;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_294;
            PyObject *tmp_tuple_element_134;
            PyObject *tmp_expression_value_183;
            tmp_expression_value_183 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__34_ARRAY_2459, mod_consts[430]);

            if (tmp_expression_value_183 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_183 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[430]);

                    if (unlikely(tmp_expression_value_183 == NULL)) {
                        tmp_expression_value_183 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[430]);
                    }

                    if (tmp_expression_value_183 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2559;
                        type_description_2 = "o";
                        goto try_except_handler_103;
                    }
                    Py_INCREF(tmp_expression_value_183);
                } else {
                    goto try_except_handler_103;
                }
            }

            tmp_tuple_element_134 = LOOKUP_ATTRIBUTE(tmp_expression_value_183, mod_consts[9]);
            Py_DECREF(tmp_expression_value_183);
            if (tmp_tuple_element_134 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2559;
                type_description_2 = "o";
                goto try_except_handler_103;
            }
            tmp_assign_source_294 = PyTuple_New(2);
            {
                PyObject *tmp_expression_value_184;
                PyTuple_SET_ITEM(tmp_assign_source_294, 0, tmp_tuple_element_134);
                tmp_expression_value_184 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__34_ARRAY_2459, mod_consts[8]);

                if (tmp_expression_value_184 == NULL) {
                    if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                        tmp_expression_value_184 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[8]);

                        if (unlikely(tmp_expression_value_184 == NULL)) {
                            tmp_expression_value_184 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[8]);
                        }

                        if (tmp_expression_value_184 == NULL) {
                            assert(ERROR_OCCURRED());

                            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                            exception_lineno = 2559;
                            type_description_2 = "o";
                            goto tuple_build_exception_48;
                        }
                        Py_INCREF(tmp_expression_value_184);
                    } else {
                        goto tuple_build_exception_48;
                    }
                }

                tmp_tuple_element_134 = LOOKUP_ATTRIBUTE(tmp_expression_value_184, mod_consts[9]);
                Py_DECREF(tmp_expression_value_184);
                if (tmp_tuple_element_134 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2559;
                    type_description_2 = "o";
                    goto tuple_build_exception_48;
                }
                PyTuple_SET_ITEM(tmp_assign_source_294, 1, tmp_tuple_element_134);
            }
            goto tuple_build_noexception_48;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_48:;
            Py_DECREF(tmp_assign_source_294);
            goto try_except_handler_103;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_48:;
            assert(tmp_ARRAY$class_creation_1__bases_orig == NULL);
            tmp_ARRAY$class_creation_1__bases_orig = tmp_assign_source_294;
        }
        {
            PyObject *tmp_assign_source_295;
            PyObject *tmp_dircall_arg1_35;
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__bases_orig);
            tmp_dircall_arg1_35 = tmp_ARRAY$class_creation_1__bases_orig;
            Py_INCREF(tmp_dircall_arg1_35);

            {
                PyObject *dir_call_args[] = {tmp_dircall_arg1_35};
                tmp_assign_source_295 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
            }
            if (tmp_assign_source_295 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2559;
                type_description_2 = "o";
                goto try_except_handler_103;
            }
            assert(tmp_ARRAY$class_creation_1__bases == NULL);
            tmp_ARRAY$class_creation_1__bases = tmp_assign_source_295;
        }
        {
            PyObject *tmp_assign_source_296;
            tmp_assign_source_296 = PyDict_New();
            assert(tmp_ARRAY$class_creation_1__class_decl_dict == NULL);
            tmp_ARRAY$class_creation_1__class_decl_dict = tmp_assign_source_296;
        }
        {
            PyObject *tmp_assign_source_297;
            PyObject *tmp_metaclass_value_35;
            bool tmp_condition_result_227;
            PyObject *tmp_key_value_103;
            PyObject *tmp_dict_arg_value_103;
            PyObject *tmp_dict_arg_value_104;
            PyObject *tmp_key_value_104;
            nuitka_bool tmp_condition_result_228;
            int tmp_truth_name_37;
            PyObject *tmp_type_arg_69;
            PyObject *tmp_expression_value_185;
            PyObject *tmp_subscript_value_35;
            PyObject *tmp_bases_value_35;
            tmp_key_value_103 = mod_consts[410];
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__class_decl_dict);
            tmp_dict_arg_value_103 = tmp_ARRAY$class_creation_1__class_decl_dict;
            tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_103, tmp_key_value_103);
            assert(!(tmp_res == -1));
            tmp_condition_result_227 = (tmp_res != 0) ? true : false;
            if (tmp_condition_result_227 != false) {
                goto condexpr_true_90;
            } else {
                goto condexpr_false_90;
            }
            condexpr_true_90:;
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__class_decl_dict);
            tmp_dict_arg_value_104 = tmp_ARRAY$class_creation_1__class_decl_dict;
            tmp_key_value_104 = mod_consts[410];
            tmp_metaclass_value_35 = DICT_GET_ITEM0(tmp_dict_arg_value_104, tmp_key_value_104);
            if (tmp_metaclass_value_35 == NULL) {
                tmp_metaclass_value_35 = Py_None;
            }
            assert(!(tmp_metaclass_value_35 == NULL));
            Py_INCREF(tmp_metaclass_value_35);
            goto condexpr_end_90;
            condexpr_false_90:;
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__bases);
            tmp_truth_name_37 = CHECK_IF_TRUE(tmp_ARRAY$class_creation_1__bases);
            if (tmp_truth_name_37 == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2559;
                type_description_2 = "o";
                goto try_except_handler_103;
            }
            tmp_condition_result_228 = tmp_truth_name_37 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
            if (tmp_condition_result_228 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_91;
            } else {
                goto condexpr_false_91;
            }
            condexpr_true_91:;
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__bases);
            tmp_expression_value_185 = tmp_ARRAY$class_creation_1__bases;
            tmp_subscript_value_35 = mod_consts[52];
            tmp_type_arg_69 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_185, tmp_subscript_value_35, 0);
            if (tmp_type_arg_69 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2559;
                type_description_2 = "o";
                goto try_except_handler_103;
            }
            tmp_metaclass_value_35 = BUILTIN_TYPE1(tmp_type_arg_69);
            Py_DECREF(tmp_type_arg_69);
            if (tmp_metaclass_value_35 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2559;
                type_description_2 = "o";
                goto try_except_handler_103;
            }
            goto condexpr_end_91;
            condexpr_false_91:;
            tmp_metaclass_value_35 = (PyObject *)&PyType_Type;
            Py_INCREF(tmp_metaclass_value_35);
            condexpr_end_91:;
            condexpr_end_90:;
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__bases);
            tmp_bases_value_35 = tmp_ARRAY$class_creation_1__bases;
            tmp_assign_source_297 = SELECT_METACLASS(tmp_metaclass_value_35, tmp_bases_value_35);
            Py_DECREF(tmp_metaclass_value_35);
            if (tmp_assign_source_297 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2559;
                type_description_2 = "o";
                goto try_except_handler_103;
            }
            assert(tmp_ARRAY$class_creation_1__metaclass == NULL);
            tmp_ARRAY$class_creation_1__metaclass = tmp_assign_source_297;
        }
        {
            bool tmp_condition_result_229;
            PyObject *tmp_key_value_105;
            PyObject *tmp_dict_arg_value_105;
            tmp_key_value_105 = mod_consts[410];
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__class_decl_dict);
            tmp_dict_arg_value_105 = tmp_ARRAY$class_creation_1__class_decl_dict;
            tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_105, tmp_key_value_105);
            assert(!(tmp_res == -1));
            tmp_condition_result_229 = (tmp_res != 0) ? true : false;
            if (tmp_condition_result_229 != false) {
                goto branch_yes_138;
            } else {
                goto branch_no_138;
            }
        }
        branch_yes_138:;
        CHECK_OBJECT(tmp_ARRAY$class_creation_1__class_decl_dict);
        tmp_dictdel_dict = tmp_ARRAY$class_creation_1__class_decl_dict;
        tmp_dictdel_key = mod_consts[410];
        tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2559;
            type_description_2 = "o";
            goto try_except_handler_103;
        }
        branch_no_138:;
        {
            nuitka_bool tmp_condition_result_230;
            PyObject *tmp_expression_value_186;
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__metaclass);
            tmp_expression_value_186 = tmp_ARRAY$class_creation_1__metaclass;
            tmp_result = HAS_ATTR_BOOL(tmp_expression_value_186, mod_consts[411]);
            tmp_condition_result_230 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_230 == NUITKA_BOOL_TRUE) {
                goto branch_yes_139;
            } else {
                goto branch_no_139;
            }
        }
        branch_yes_139:;
        {
            PyObject *tmp_assign_source_298;
            PyObject *tmp_called_value_118;
            PyObject *tmp_expression_value_187;
            PyObject *tmp_args_value_68;
            PyObject *tmp_tuple_element_135;
            PyObject *tmp_kwargs_value_68;
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__metaclass);
            tmp_expression_value_187 = tmp_ARRAY$class_creation_1__metaclass;
            tmp_called_value_118 = LOOKUP_ATTRIBUTE(tmp_expression_value_187, mod_consts[411]);
            if (tmp_called_value_118 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2559;
                type_description_2 = "o";
                goto try_except_handler_103;
            }
            tmp_tuple_element_135 = mod_consts[9];
            tmp_args_value_68 = PyTuple_New(2);
            PyTuple_SET_ITEM0(tmp_args_value_68, 0, tmp_tuple_element_135);
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__bases);
            tmp_tuple_element_135 = tmp_ARRAY$class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_68, 1, tmp_tuple_element_135);
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__class_decl_dict);
            tmp_kwargs_value_68 = tmp_ARRAY$class_creation_1__class_decl_dict;
            frame_369d7ea6640ba71a1b5df134a8ede170_33->m_frame.f_lineno = 2559;
            tmp_assign_source_298 = CALL_FUNCTION(tmp_called_value_118, tmp_args_value_68, tmp_kwargs_value_68);
            Py_DECREF(tmp_called_value_118);
            Py_DECREF(tmp_args_value_68);
            if (tmp_assign_source_298 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2559;
                type_description_2 = "o";
                goto try_except_handler_103;
            }
            assert(tmp_ARRAY$class_creation_1__prepared == NULL);
            tmp_ARRAY$class_creation_1__prepared = tmp_assign_source_298;
        }
        {
            bool tmp_condition_result_231;
            PyObject *tmp_operand_value_35;
            PyObject *tmp_expression_value_188;
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__prepared);
            tmp_expression_value_188 = tmp_ARRAY$class_creation_1__prepared;
            tmp_result = HAS_ATTR_BOOL(tmp_expression_value_188, mod_consts[413]);
            tmp_operand_value_35 = (tmp_result) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE(tmp_operand_value_35);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2559;
                type_description_2 = "o";
                goto try_except_handler_103;
            }
            tmp_condition_result_231 = (tmp_res == 0) ? true : false;
            if (tmp_condition_result_231 != false) {
                goto branch_yes_140;
            } else {
                goto branch_no_140;
            }
        }
        branch_yes_140:;
        {
            PyObject *tmp_raise_type_35;
            PyObject *tmp_raise_value_35;
            PyObject *tmp_left_value_35;
            PyObject *tmp_right_value_35;
            PyObject *tmp_tuple_element_136;
            PyObject *tmp_getattr_target_35;
            PyObject *tmp_getattr_attr_35;
            PyObject *tmp_getattr_default_35;
            tmp_raise_type_35 = PyExc_TypeError;
            tmp_left_value_35 = mod_consts[414];
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__metaclass);
            tmp_getattr_target_35 = tmp_ARRAY$class_creation_1__metaclass;
            tmp_getattr_attr_35 = mod_consts[190];
            tmp_getattr_default_35 = mod_consts[415];
            tmp_tuple_element_136 = BUILTIN_GETATTR(tmp_getattr_target_35, tmp_getattr_attr_35, tmp_getattr_default_35);
            if (tmp_tuple_element_136 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2559;
                type_description_2 = "o";
                goto try_except_handler_103;
            }
            tmp_right_value_35 = PyTuple_New(2);
            {
                PyObject *tmp_expression_value_189;
                PyObject *tmp_type_arg_70;
                PyTuple_SET_ITEM(tmp_right_value_35, 0, tmp_tuple_element_136);
                CHECK_OBJECT(tmp_ARRAY$class_creation_1__prepared);
                tmp_type_arg_70 = tmp_ARRAY$class_creation_1__prepared;
                tmp_expression_value_189 = BUILTIN_TYPE1(tmp_type_arg_70);
                assert(!(tmp_expression_value_189 == NULL));
                tmp_tuple_element_136 = LOOKUP_ATTRIBUTE(tmp_expression_value_189, mod_consts[190]);
                Py_DECREF(tmp_expression_value_189);
                if (tmp_tuple_element_136 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2559;
                    type_description_2 = "o";
                    goto tuple_build_exception_49;
                }
                PyTuple_SET_ITEM(tmp_right_value_35, 1, tmp_tuple_element_136);
            }
            goto tuple_build_noexception_49;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_49:;
            Py_DECREF(tmp_right_value_35);
            goto try_except_handler_103;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_49:;
            tmp_raise_value_35 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_35, tmp_right_value_35);
            Py_DECREF(tmp_right_value_35);
            if (tmp_raise_value_35 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2559;
                type_description_2 = "o";
                goto try_except_handler_103;
            }
            exception_type = tmp_raise_type_35;
            Py_INCREF(tmp_raise_type_35);
            exception_value = tmp_raise_value_35;
            exception_lineno = 2559;
            RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);
            type_description_2 = "o";
            goto try_except_handler_103;
        }
        branch_no_140:;
        goto branch_end_139;
        branch_no_139:;
        {
            PyObject *tmp_assign_source_299;
            tmp_assign_source_299 = PyDict_New();
            assert(tmp_ARRAY$class_creation_1__prepared == NULL);
            tmp_ARRAY$class_creation_1__prepared = tmp_assign_source_299;
        }
        branch_end_139:;
        {
            PyObject *tmp_set_locals_35;
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__prepared);
            tmp_set_locals_35 = tmp_ARRAY$class_creation_1__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__35_Comparator_2559 = tmp_set_locals_35;
            Py_INCREF(tmp_set_locals_35);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__35_Comparator_2559, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2559;
            type_description_2 = "o";
            goto try_except_handler_105;
        }
        tmp_dictset_value = mod_consts[640];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__35_Comparator_2559, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2559;
            type_description_2 = "o";
            goto try_except_handler_105;
        }
        tmp_dictset_value = mod_consts[641];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__35_Comparator_2559, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2559;
            type_description_2 = "o";
            goto try_except_handler_105;
        }
        if (isFrameUnusable(cache_frame_86a9c51331c0e47ed38f7ce3dcb5063a_34)) {
            Py_XDECREF(cache_frame_86a9c51331c0e47ed38f7ce3dcb5063a_34);

#if _DEBUG_REFCOUNTS
            if (cache_frame_86a9c51331c0e47ed38f7ce3dcb5063a_34 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_86a9c51331c0e47ed38f7ce3dcb5063a_34 = MAKE_FUNCTION_FRAME(codeobj_86a9c51331c0e47ed38f7ce3dcb5063a, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_86a9c51331c0e47ed38f7ce3dcb5063a_34->m_type_description == NULL);
        frame_86a9c51331c0e47ed38f7ce3dcb5063a_34 = cache_frame_86a9c51331c0e47ed38f7ce3dcb5063a_34;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_86a9c51331c0e47ed38f7ce3dcb5063a_34);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_86a9c51331c0e47ed38f7ce3dcb5063a_34) == 2); // Frame stack

        // Framed code:


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__125__setup_getitem();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__35_Comparator_2559, mod_consts[14], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2568;
            type_description_3 = "o";
            goto frame_exception_exit_34;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__126_contains();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__35_Comparator_2559, mod_consts[643], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2603;
            type_description_3 = "o";
            goto frame_exception_exit_34;
        }
        {
            PyObject *tmp_called_value_119;
            PyObject *tmp_called_instance_16;
            PyObject *tmp_args_element_value_54;
            PyObject *tmp_defaults_17;
            tmp_called_instance_16 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__35_Comparator_2559, mod_consts[43]);

            if (tmp_called_instance_16 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_16 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_called_instance_16 == NULL)) {
                        tmp_called_instance_16 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
                    }

                    if (tmp_called_instance_16 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2609;
                        type_description_3 = "o";
                        goto frame_exception_exit_34;
                    }
                    Py_INCREF(tmp_called_instance_16);
                } else {
                    goto frame_exception_exit_34;
                }
            }

            frame_86a9c51331c0e47ed38f7ce3dcb5063a_34->m_frame.f_lineno = 2609;
            tmp_called_value_119 = CALL_METHOD_WITH_SINGLE_ARG(
                tmp_called_instance_16,
                mod_consts[562],
                PyTuple_GET_ITEM(mod_consts[645], 0)
            );

            Py_DECREF(tmp_called_instance_16);
            if (tmp_called_value_119 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2609;
                type_description_3 = "o";
                goto frame_exception_exit_34;
            }
            tmp_defaults_17 = mod_consts[257];
            Py_INCREF(tmp_defaults_17);


            tmp_args_element_value_54 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__127_any(tmp_defaults_17);

            frame_86a9c51331c0e47ed38f7ce3dcb5063a_34->m_frame.f_lineno = 2609;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_119, tmp_args_element_value_54);
            Py_DECREF(tmp_called_value_119);
            Py_DECREF(tmp_args_element_value_54);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2609;
                type_description_3 = "o";
                goto frame_exception_exit_34;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__35_Comparator_2559, mod_consts[646], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2610;
                type_description_3 = "o";
                goto frame_exception_exit_34;
            }
        }
        {
            PyObject *tmp_called_value_120;
            PyObject *tmp_called_instance_17;
            PyObject *tmp_args_element_value_55;
            PyObject *tmp_defaults_18;
            tmp_called_instance_17 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__35_Comparator_2559, mod_consts[43]);

            if (tmp_called_instance_17 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_called_instance_17 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

                    if (unlikely(tmp_called_instance_17 == NULL)) {
                        tmp_called_instance_17 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
                    }

                    if (tmp_called_instance_17 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2648;
                        type_description_3 = "o";
                        goto frame_exception_exit_34;
                    }
                    Py_INCREF(tmp_called_instance_17);
                } else {
                    goto frame_exception_exit_34;
                }
            }

            frame_86a9c51331c0e47ed38f7ce3dcb5063a_34->m_frame.f_lineno = 2648;
            tmp_called_value_120 = CALL_METHOD_WITH_SINGLE_ARG(
                tmp_called_instance_17,
                mod_consts[562],
                PyTuple_GET_ITEM(mod_consts[645], 0)
            );

            Py_DECREF(tmp_called_instance_17);
            if (tmp_called_value_120 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2648;
                type_description_3 = "o";
                goto frame_exception_exit_34;
            }
            tmp_defaults_18 = mod_consts[257];
            Py_INCREF(tmp_defaults_18);


            tmp_args_element_value_55 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__128_all(tmp_defaults_18);

            frame_86a9c51331c0e47ed38f7ce3dcb5063a_34->m_frame.f_lineno = 2648;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_120, tmp_args_element_value_55);
            Py_DECREF(tmp_called_value_120);
            Py_DECREF(tmp_args_element_value_55);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2648;
                type_description_3 = "o";
                goto frame_exception_exit_34;
            }
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__35_Comparator_2559, mod_consts[648], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2649;
                type_description_3 = "o";
                goto frame_exception_exit_34;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_86a9c51331c0e47ed38f7ce3dcb5063a_34);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_32;

        frame_exception_exit_34:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_86a9c51331c0e47ed38f7ce3dcb5063a_34);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_86a9c51331c0e47ed38f7ce3dcb5063a_34, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_86a9c51331c0e47ed38f7ce3dcb5063a_34->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_86a9c51331c0e47ed38f7ce3dcb5063a_34, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_86a9c51331c0e47ed38f7ce3dcb5063a_34,
            type_description_3,
            outline_34_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_86a9c51331c0e47ed38f7ce3dcb5063a_34 == cache_frame_86a9c51331c0e47ed38f7ce3dcb5063a_34) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_86a9c51331c0e47ed38f7ce3dcb5063a_34);
            cache_frame_86a9c51331c0e47ed38f7ce3dcb5063a_34 = NULL;
        }

        assertFrameObject(frame_86a9c51331c0e47ed38f7ce3dcb5063a_34);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_33;

        frame_no_exception_32:;
        goto skip_nested_handling_32;
        nested_frame_exit_33:;
        type_description_2 = "o";
        goto try_except_handler_105;
        skip_nested_handling_32:;
        {
            nuitka_bool tmp_condition_result_232;
            PyObject *tmp_cmp_expr_left_34;
            PyObject *tmp_cmp_expr_right_34;
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__bases);
            tmp_cmp_expr_left_34 = tmp_ARRAY$class_creation_1__bases;
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__bases_orig);
            tmp_cmp_expr_right_34 = tmp_ARRAY$class_creation_1__bases_orig;
            tmp_condition_result_232 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_34, tmp_cmp_expr_right_34);
            if (tmp_condition_result_232 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2559;
                type_description_2 = "o";
                goto try_except_handler_105;
            }
            if (tmp_condition_result_232 == NUITKA_BOOL_TRUE) {
                goto branch_yes_141;
            } else {
                goto branch_no_141;
            }
            assert(tmp_condition_result_232 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_141:;
        CHECK_OBJECT(tmp_ARRAY$class_creation_1__bases_orig);
        tmp_dictset_value = tmp_ARRAY$class_creation_1__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__35_Comparator_2559, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2559;
            type_description_2 = "o";
            goto try_except_handler_105;
        }
        branch_no_141:;
        {
            PyObject *tmp_assign_source_300;
            PyObject *tmp_called_value_121;
            PyObject *tmp_args_value_69;
            PyObject *tmp_tuple_element_137;
            PyObject *tmp_kwargs_value_69;
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__metaclass);
            tmp_called_value_121 = tmp_ARRAY$class_creation_1__metaclass;
            tmp_tuple_element_137 = mod_consts[9];
            tmp_args_value_69 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_69, 0, tmp_tuple_element_137);
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__bases);
            tmp_tuple_element_137 = tmp_ARRAY$class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_69, 1, tmp_tuple_element_137);
            tmp_tuple_element_137 = locals_sqlalchemy$sql$sqltypes$$$class__35_Comparator_2559;
            PyTuple_SET_ITEM0(tmp_args_value_69, 2, tmp_tuple_element_137);
            CHECK_OBJECT(tmp_ARRAY$class_creation_1__class_decl_dict);
            tmp_kwargs_value_69 = tmp_ARRAY$class_creation_1__class_decl_dict;
            frame_369d7ea6640ba71a1b5df134a8ede170_33->m_frame.f_lineno = 2559;
            tmp_assign_source_300 = CALL_FUNCTION(tmp_called_value_121, tmp_args_value_69, tmp_kwargs_value_69);
            Py_DECREF(tmp_args_value_69);
            if (tmp_assign_source_300 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2559;
                type_description_2 = "o";
                goto try_except_handler_105;
            }
            assert(outline_34_var___class__ == NULL);
            outline_34_var___class__ = tmp_assign_source_300;
        }
        CHECK_OBJECT(outline_34_var___class__);
        tmp_dictset_value = outline_34_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_105;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_105:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__35_Comparator_2559);
        locals_sqlalchemy$sql$sqltypes$$$class__35_Comparator_2559 = NULL;
        goto try_return_handler_104;
        // Exception handler code:
        try_except_handler_105:;
        exception_keeper_type_100 = exception_type;
        exception_keeper_value_100 = exception_value;
        exception_keeper_tb_100 = exception_tb;
        exception_keeper_lineno_100 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__35_Comparator_2559);
        locals_sqlalchemy$sql$sqltypes$$$class__35_Comparator_2559 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_100;
        exception_value = exception_keeper_value_100;
        exception_tb = exception_keeper_tb_100;
        exception_lineno = exception_keeper_lineno_100;

        goto try_except_handler_104;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_104:;
        CHECK_OBJECT(outline_34_var___class__);
        Py_DECREF(outline_34_var___class__);
        outline_34_var___class__ = NULL;
        goto outline_result_35;
        // Exception handler code:
        try_except_handler_104:;
        exception_keeper_type_101 = exception_type;
        exception_keeper_value_101 = exception_value;
        exception_keeper_tb_101 = exception_tb;
        exception_keeper_lineno_101 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_101;
        exception_value = exception_keeper_value_101;
        exception_tb = exception_keeper_tb_101;
        exception_lineno = exception_keeper_lineno_101;

        goto outline_exception_35;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_35:;
        exception_lineno = 2559;
        goto try_except_handler_103;
        outline_result_35:;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__34_ARRAY_2459, mod_consts[9], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2559;
            type_description_2 = "o";
            goto try_except_handler_103;
        }
        goto try_end_34;
        // Exception handler code:
        try_except_handler_103:;
        exception_keeper_type_102 = exception_type;
        exception_keeper_value_102 = exception_value;
        exception_keeper_tb_102 = exception_tb;
        exception_keeper_lineno_102 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_ARRAY$class_creation_1__bases_orig);
        tmp_ARRAY$class_creation_1__bases_orig = NULL;
        Py_XDECREF(tmp_ARRAY$class_creation_1__bases);
        tmp_ARRAY$class_creation_1__bases = NULL;
        Py_XDECREF(tmp_ARRAY$class_creation_1__class_decl_dict);
        tmp_ARRAY$class_creation_1__class_decl_dict = NULL;
        Py_XDECREF(tmp_ARRAY$class_creation_1__metaclass);
        tmp_ARRAY$class_creation_1__metaclass = NULL;
        Py_XDECREF(tmp_ARRAY$class_creation_1__prepared);
        tmp_ARRAY$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_102;
        exception_value = exception_keeper_value_102;
        exception_tb = exception_keeper_tb_102;
        exception_lineno = exception_keeper_lineno_102;

        goto frame_exception_exit_33;
        // End of try:
        try_end_34:;
        CHECK_OBJECT(tmp_ARRAY$class_creation_1__bases_orig);
        Py_DECREF(tmp_ARRAY$class_creation_1__bases_orig);
        tmp_ARRAY$class_creation_1__bases_orig = NULL;
        CHECK_OBJECT(tmp_ARRAY$class_creation_1__bases);
        Py_DECREF(tmp_ARRAY$class_creation_1__bases);
        tmp_ARRAY$class_creation_1__bases = NULL;
        CHECK_OBJECT(tmp_ARRAY$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_ARRAY$class_creation_1__class_decl_dict);
        tmp_ARRAY$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_ARRAY$class_creation_1__metaclass);
        Py_DECREF(tmp_ARRAY$class_creation_1__metaclass);
        tmp_ARRAY$class_creation_1__metaclass = NULL;
        CHECK_OBJECT(tmp_ARRAY$class_creation_1__prepared);
        Py_DECREF(tmp_ARRAY$class_creation_1__prepared);
        tmp_ARRAY$class_creation_1__prepared = NULL;
        tmp_dictset_value = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__34_ARRAY_2459, mod_consts[9]);

        if (unlikely(tmp_dictset_value == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

            FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[9]);
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2687;
            type_description_2 = "o";
            goto frame_exception_exit_33;
        }

        if (tmp_dictset_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2687;
            type_description_2 = "o";
            goto frame_exception_exit_33;
        }
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__34_ARRAY_2459, mod_consts[426], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2687;
            type_description_2 = "o";
            goto frame_exception_exit_33;
        }
        {
            PyObject *tmp_defaults_19;
            tmp_defaults_19 = mod_consts[650];
            Py_INCREF(tmp_defaults_19);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__129___init__(tmp_defaults_19);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__34_ARRAY_2459, mod_consts[66], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2689;
                type_description_2 = "o";
                goto frame_exception_exit_33;
            }
        }
        {
            nuitka_bool tmp_condition_result_233;
            PyObject *tmp_called_value_122;
            PyObject *tmp_args_element_value_56;
            PyObject *tmp_called_value_123;
            PyObject *tmp_args_element_value_57;
            tmp_res = MAPPING_HAS_ITEM(locals_sqlalchemy$sql$sqltypes$$$class__34_ARRAY_2459, mod_consts[420]);

            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2735;
                type_description_2 = "o";
                goto frame_exception_exit_33;
            }
            tmp_condition_result_233 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_233 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_92;
            } else {
                goto condexpr_false_92;
            }
            condexpr_true_92:;
            tmp_called_value_122 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__34_ARRAY_2459, mod_consts[420]);

            if (unlikely(tmp_called_value_122 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[420]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2735;
                type_description_2 = "o";
                goto frame_exception_exit_33;
            }

            if (tmp_called_value_122 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2735;
                type_description_2 = "o";
                goto frame_exception_exit_33;
            }


            tmp_args_element_value_56 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__130_hashable();

            frame_369d7ea6640ba71a1b5df134a8ede170_33->m_frame.f_lineno = 2735;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_122, tmp_args_element_value_56);
            Py_DECREF(tmp_called_value_122);
            Py_DECREF(tmp_args_element_value_56);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2735;
                type_description_2 = "o";
                goto frame_exception_exit_33;
            }
            goto condexpr_end_92;
            condexpr_false_92:;
            tmp_called_value_123 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_57 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__130_hashable();

            frame_369d7ea6640ba71a1b5df134a8ede170_33->m_frame.f_lineno = 2735;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_123, tmp_args_element_value_57);
            Py_DECREF(tmp_args_element_value_57);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2735;
                type_description_2 = "o";
                goto frame_exception_exit_33;
            }
            condexpr_end_92:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__34_ARRAY_2459, mod_consts[606], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2736;
                type_description_2 = "o";
                goto frame_exception_exit_33;
            }
        }
        {
            nuitka_bool tmp_condition_result_234;
            PyObject *tmp_called_value_124;
            PyObject *tmp_args_element_value_58;
            PyObject *tmp_called_value_125;
            PyObject *tmp_args_element_value_59;
            tmp_res = MAPPING_HAS_ITEM(locals_sqlalchemy$sql$sqltypes$$$class__34_ARRAY_2459, mod_consts[420]);

            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2739;
                type_description_2 = "o";
                goto frame_exception_exit_33;
            }
            tmp_condition_result_234 = (tmp_res == 1) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_234 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_93;
            } else {
                goto condexpr_false_93;
            }
            condexpr_true_93:;
            tmp_called_value_124 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__34_ARRAY_2459, mod_consts[420]);

            if (unlikely(tmp_called_value_124 == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

                FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[420]);
                NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
                CHAIN_EXCEPTION(exception_value);

                exception_lineno = 2739;
                type_description_2 = "o";
                goto frame_exception_exit_33;
            }

            if (tmp_called_value_124 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2739;
                type_description_2 = "o";
                goto frame_exception_exit_33;
            }


            tmp_args_element_value_58 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__131_python_type();

            frame_369d7ea6640ba71a1b5df134a8ede170_33->m_frame.f_lineno = 2739;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_124, tmp_args_element_value_58);
            Py_DECREF(tmp_called_value_124);
            Py_DECREF(tmp_args_element_value_58);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2739;
                type_description_2 = "o";
                goto frame_exception_exit_33;
            }
            goto condexpr_end_93;
            condexpr_false_93:;
            tmp_called_value_125 = (PyObject *)&PyProperty_Type;


            tmp_args_element_value_59 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__131_python_type();

            frame_369d7ea6640ba71a1b5df134a8ede170_33->m_frame.f_lineno = 2739;
            tmp_dictset_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_125, tmp_args_element_value_59);
            Py_DECREF(tmp_args_element_value_59);
            if (tmp_dictset_value == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2739;
                type_description_2 = "o";
                goto frame_exception_exit_33;
            }
            condexpr_end_93:;
            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__34_ARRAY_2459, mod_consts[236], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2740;
                type_description_2 = "o";
                goto frame_exception_exit_33;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__132_compare_values();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__34_ARRAY_2459, mod_consts[577], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2743;
            type_description_2 = "o";
            goto frame_exception_exit_33;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__133__set_parent();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__34_ARRAY_2459, mod_consts[354], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2746;
            type_description_2 = "o";
            goto frame_exception_exit_33;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__134__set_parent_with_dispatch();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__34_ARRAY_2459, mod_consts[356], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2752;
            type_description_2 = "o";
            goto frame_exception_exit_33;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_369d7ea6640ba71a1b5df134a8ede170_33);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_33;

        frame_exception_exit_33:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_369d7ea6640ba71a1b5df134a8ede170_33);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_369d7ea6640ba71a1b5df134a8ede170_33, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_369d7ea6640ba71a1b5df134a8ede170_33->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_369d7ea6640ba71a1b5df134a8ede170_33, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_369d7ea6640ba71a1b5df134a8ede170_33,
            type_description_2,
            outline_33_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_369d7ea6640ba71a1b5df134a8ede170_33 == cache_frame_369d7ea6640ba71a1b5df134a8ede170_33) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_369d7ea6640ba71a1b5df134a8ede170_33);
            cache_frame_369d7ea6640ba71a1b5df134a8ede170_33 = NULL;
        }

        assertFrameObject(frame_369d7ea6640ba71a1b5df134a8ede170_33);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_32;

        frame_no_exception_33:;
        goto skip_nested_handling_33;
        nested_frame_exit_32:;

        goto try_except_handler_102;
        skip_nested_handling_33:;
        {
            nuitka_bool tmp_condition_result_235;
            PyObject *tmp_cmp_expr_left_35;
            PyObject *tmp_cmp_expr_right_35;
            CHECK_OBJECT(tmp_class_creation_26__bases);
            tmp_cmp_expr_left_35 = tmp_class_creation_26__bases;
            CHECK_OBJECT(tmp_class_creation_26__bases_orig);
            tmp_cmp_expr_right_35 = tmp_class_creation_26__bases_orig;
            tmp_condition_result_235 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_35, tmp_cmp_expr_right_35);
            if (tmp_condition_result_235 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2459;

                goto try_except_handler_102;
            }
            if (tmp_condition_result_235 == NUITKA_BOOL_TRUE) {
                goto branch_yes_142;
            } else {
                goto branch_no_142;
            }
            assert(tmp_condition_result_235 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_142:;
        CHECK_OBJECT(tmp_class_creation_26__bases_orig);
        tmp_dictset_value = tmp_class_creation_26__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__34_ARRAY_2459, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2459;

            goto try_except_handler_102;
        }
        branch_no_142:;
        {
            PyObject *tmp_assign_source_301;
            PyObject *tmp_called_value_126;
            PyObject *tmp_args_value_70;
            PyObject *tmp_tuple_element_138;
            PyObject *tmp_kwargs_value_70;
            CHECK_OBJECT(tmp_class_creation_26__metaclass);
            tmp_called_value_126 = tmp_class_creation_26__metaclass;
            tmp_tuple_element_138 = mod_consts[349];
            tmp_args_value_70 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_70, 0, tmp_tuple_element_138);
            CHECK_OBJECT(tmp_class_creation_26__bases);
            tmp_tuple_element_138 = tmp_class_creation_26__bases;
            PyTuple_SET_ITEM0(tmp_args_value_70, 1, tmp_tuple_element_138);
            tmp_tuple_element_138 = locals_sqlalchemy$sql$sqltypes$$$class__34_ARRAY_2459;
            PyTuple_SET_ITEM0(tmp_args_value_70, 2, tmp_tuple_element_138);
            CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
            tmp_kwargs_value_70 = tmp_class_creation_26__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2459;
            tmp_assign_source_301 = CALL_FUNCTION(tmp_called_value_126, tmp_args_value_70, tmp_kwargs_value_70);
            Py_DECREF(tmp_args_value_70);
            if (tmp_assign_source_301 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2459;

                goto try_except_handler_102;
            }
            assert(outline_33_var___class__ == NULL);
            outline_33_var___class__ = tmp_assign_source_301;
        }
        CHECK_OBJECT(outline_33_var___class__);
        tmp_assign_source_293 = outline_33_var___class__;
        Py_INCREF(tmp_assign_source_293);
        goto try_return_handler_102;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_102:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__34_ARRAY_2459);
        locals_sqlalchemy$sql$sqltypes$$$class__34_ARRAY_2459 = NULL;
        goto try_return_handler_101;
        // Exception handler code:
        try_except_handler_102:;
        exception_keeper_type_103 = exception_type;
        exception_keeper_value_103 = exception_value;
        exception_keeper_tb_103 = exception_tb;
        exception_keeper_lineno_103 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__34_ARRAY_2459);
        locals_sqlalchemy$sql$sqltypes$$$class__34_ARRAY_2459 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_103;
        exception_value = exception_keeper_value_103;
        exception_tb = exception_keeper_tb_103;
        exception_lineno = exception_keeper_lineno_103;

        goto try_except_handler_101;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_101:;
        CHECK_OBJECT(outline_33_var___class__);
        Py_DECREF(outline_33_var___class__);
        outline_33_var___class__ = NULL;
        goto outline_result_34;
        // Exception handler code:
        try_except_handler_101:;
        exception_keeper_type_104 = exception_type;
        exception_keeper_value_104 = exception_value;
        exception_keeper_tb_104 = exception_tb;
        exception_keeper_lineno_104 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_104;
        exception_value = exception_keeper_value_104;
        exception_tb = exception_keeper_tb_104;
        exception_lineno = exception_keeper_lineno_104;

        goto outline_exception_34;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_34:;
        exception_lineno = 2459;
        goto try_except_handler_100;
        outline_result_34:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[349], tmp_assign_source_293);
    }
    goto try_end_35;
    // Exception handler code:
    try_except_handler_100:;
    exception_keeper_type_105 = exception_type;
    exception_keeper_value_105 = exception_value;
    exception_keeper_tb_105 = exception_tb;
    exception_keeper_lineno_105 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_26__bases_orig);
    tmp_class_creation_26__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_26__bases);
    tmp_class_creation_26__bases = NULL;
    Py_XDECREF(tmp_class_creation_26__class_decl_dict);
    tmp_class_creation_26__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_26__metaclass);
    tmp_class_creation_26__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_26__prepared);
    tmp_class_creation_26__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_105;
    exception_value = exception_keeper_value_105;
    exception_tb = exception_keeper_tb_105;
    exception_lineno = exception_keeper_lineno_105;

    goto frame_exception_exit_1;
    // End of try:
    try_end_35:;
    CHECK_OBJECT(tmp_class_creation_26__bases_orig);
    Py_DECREF(tmp_class_creation_26__bases_orig);
    tmp_class_creation_26__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_26__bases);
    Py_DECREF(tmp_class_creation_26__bases);
    tmp_class_creation_26__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
    Py_DECREF(tmp_class_creation_26__class_decl_dict);
    tmp_class_creation_26__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_26__metaclass);
    Py_DECREF(tmp_class_creation_26__metaclass);
    tmp_class_creation_26__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_26__prepared);
    Py_DECREF(tmp_class_creation_26__prepared);
    tmp_class_creation_26__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_302;
        PyObject *tmp_tuple_element_139;
        tmp_tuple_element_139 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[304]);

        if (unlikely(tmp_tuple_element_139 == NULL)) {
            tmp_tuple_element_139 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[304]);
        }

        if (tmp_tuple_element_139 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2761;

            goto try_except_handler_106;
        }
        tmp_assign_source_302 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_302, 0, tmp_tuple_element_139);
        assert(tmp_class_creation_27__bases_orig == NULL);
        tmp_class_creation_27__bases_orig = tmp_assign_source_302;
    }
    {
        PyObject *tmp_assign_source_303;
        PyObject *tmp_dircall_arg1_36;
        CHECK_OBJECT(tmp_class_creation_27__bases_orig);
        tmp_dircall_arg1_36 = tmp_class_creation_27__bases_orig;
        Py_INCREF(tmp_dircall_arg1_36);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_36};
            tmp_assign_source_303 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_303 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2761;

            goto try_except_handler_106;
        }
        assert(tmp_class_creation_27__bases == NULL);
        tmp_class_creation_27__bases = tmp_assign_source_303;
    }
    {
        PyObject *tmp_assign_source_304;
        tmp_assign_source_304 = PyDict_New();
        assert(tmp_class_creation_27__class_decl_dict == NULL);
        tmp_class_creation_27__class_decl_dict = tmp_assign_source_304;
    }
    {
        PyObject *tmp_assign_source_305;
        PyObject *tmp_metaclass_value_36;
        bool tmp_condition_result_236;
        PyObject *tmp_key_value_106;
        PyObject *tmp_dict_arg_value_106;
        PyObject *tmp_dict_arg_value_107;
        PyObject *tmp_key_value_107;
        nuitka_bool tmp_condition_result_237;
        int tmp_truth_name_38;
        PyObject *tmp_type_arg_71;
        PyObject *tmp_expression_value_190;
        PyObject *tmp_subscript_value_36;
        PyObject *tmp_bases_value_36;
        tmp_key_value_106 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
        tmp_dict_arg_value_106 = tmp_class_creation_27__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_106, tmp_key_value_106);
        assert(!(tmp_res == -1));
        tmp_condition_result_236 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_236 != false) {
            goto condexpr_true_94;
        } else {
            goto condexpr_false_94;
        }
        condexpr_true_94:;
        CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
        tmp_dict_arg_value_107 = tmp_class_creation_27__class_decl_dict;
        tmp_key_value_107 = mod_consts[410];
        tmp_metaclass_value_36 = DICT_GET_ITEM0(tmp_dict_arg_value_107, tmp_key_value_107);
        if (tmp_metaclass_value_36 == NULL) {
            tmp_metaclass_value_36 = Py_None;
        }
        assert(!(tmp_metaclass_value_36 == NULL));
        Py_INCREF(tmp_metaclass_value_36);
        goto condexpr_end_94;
        condexpr_false_94:;
        CHECK_OBJECT(tmp_class_creation_27__bases);
        tmp_truth_name_38 = CHECK_IF_TRUE(tmp_class_creation_27__bases);
        if (tmp_truth_name_38 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2761;

            goto try_except_handler_106;
        }
        tmp_condition_result_237 = tmp_truth_name_38 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_237 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_95;
        } else {
            goto condexpr_false_95;
        }
        condexpr_true_95:;
        CHECK_OBJECT(tmp_class_creation_27__bases);
        tmp_expression_value_190 = tmp_class_creation_27__bases;
        tmp_subscript_value_36 = mod_consts[52];
        tmp_type_arg_71 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_190, tmp_subscript_value_36, 0);
        if (tmp_type_arg_71 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2761;

            goto try_except_handler_106;
        }
        tmp_metaclass_value_36 = BUILTIN_TYPE1(tmp_type_arg_71);
        Py_DECREF(tmp_type_arg_71);
        if (tmp_metaclass_value_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2761;

            goto try_except_handler_106;
        }
        goto condexpr_end_95;
        condexpr_false_95:;
        tmp_metaclass_value_36 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_36);
        condexpr_end_95:;
        condexpr_end_94:;
        CHECK_OBJECT(tmp_class_creation_27__bases);
        tmp_bases_value_36 = tmp_class_creation_27__bases;
        tmp_assign_source_305 = SELECT_METACLASS(tmp_metaclass_value_36, tmp_bases_value_36);
        Py_DECREF(tmp_metaclass_value_36);
        if (tmp_assign_source_305 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2761;

            goto try_except_handler_106;
        }
        assert(tmp_class_creation_27__metaclass == NULL);
        tmp_class_creation_27__metaclass = tmp_assign_source_305;
    }
    {
        bool tmp_condition_result_238;
        PyObject *tmp_key_value_108;
        PyObject *tmp_dict_arg_value_108;
        tmp_key_value_108 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
        tmp_dict_arg_value_108 = tmp_class_creation_27__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_108, tmp_key_value_108);
        assert(!(tmp_res == -1));
        tmp_condition_result_238 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_238 != false) {
            goto branch_yes_143;
        } else {
            goto branch_no_143;
        }
    }
    branch_yes_143:;
    CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_27__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2761;

        goto try_except_handler_106;
    }
    branch_no_143:;
    {
        nuitka_bool tmp_condition_result_239;
        PyObject *tmp_expression_value_191;
        CHECK_OBJECT(tmp_class_creation_27__metaclass);
        tmp_expression_value_191 = tmp_class_creation_27__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_191, mod_consts[411]);
        tmp_condition_result_239 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_239 == NUITKA_BOOL_TRUE) {
            goto branch_yes_144;
        } else {
            goto branch_no_144;
        }
    }
    branch_yes_144:;
    {
        PyObject *tmp_assign_source_306;
        PyObject *tmp_called_value_127;
        PyObject *tmp_expression_value_192;
        PyObject *tmp_args_value_71;
        PyObject *tmp_tuple_element_140;
        PyObject *tmp_kwargs_value_71;
        CHECK_OBJECT(tmp_class_creation_27__metaclass);
        tmp_expression_value_192 = tmp_class_creation_27__metaclass;
        tmp_called_value_127 = LOOKUP_ATTRIBUTE(tmp_expression_value_192, mod_consts[411]);
        if (tmp_called_value_127 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2761;

            goto try_except_handler_106;
        }
        tmp_tuple_element_140 = mod_consts[657];
        tmp_args_value_71 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_71, 0, tmp_tuple_element_140);
        CHECK_OBJECT(tmp_class_creation_27__bases);
        tmp_tuple_element_140 = tmp_class_creation_27__bases;
        PyTuple_SET_ITEM0(tmp_args_value_71, 1, tmp_tuple_element_140);
        CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
        tmp_kwargs_value_71 = tmp_class_creation_27__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2761;
        tmp_assign_source_306 = CALL_FUNCTION(tmp_called_value_127, tmp_args_value_71, tmp_kwargs_value_71);
        Py_DECREF(tmp_called_value_127);
        Py_DECREF(tmp_args_value_71);
        if (tmp_assign_source_306 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2761;

            goto try_except_handler_106;
        }
        assert(tmp_class_creation_27__prepared == NULL);
        tmp_class_creation_27__prepared = tmp_assign_source_306;
    }
    {
        bool tmp_condition_result_240;
        PyObject *tmp_operand_value_36;
        PyObject *tmp_expression_value_193;
        CHECK_OBJECT(tmp_class_creation_27__prepared);
        tmp_expression_value_193 = tmp_class_creation_27__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_193, mod_consts[413]);
        tmp_operand_value_36 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_36);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2761;

            goto try_except_handler_106;
        }
        tmp_condition_result_240 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_240 != false) {
            goto branch_yes_145;
        } else {
            goto branch_no_145;
        }
    }
    branch_yes_145:;
    {
        PyObject *tmp_raise_type_36;
        PyObject *tmp_raise_value_36;
        PyObject *tmp_left_value_36;
        PyObject *tmp_right_value_36;
        PyObject *tmp_tuple_element_141;
        PyObject *tmp_getattr_target_36;
        PyObject *tmp_getattr_attr_36;
        PyObject *tmp_getattr_default_36;
        tmp_raise_type_36 = PyExc_TypeError;
        tmp_left_value_36 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_27__metaclass);
        tmp_getattr_target_36 = tmp_class_creation_27__metaclass;
        tmp_getattr_attr_36 = mod_consts[190];
        tmp_getattr_default_36 = mod_consts[415];
        tmp_tuple_element_141 = BUILTIN_GETATTR(tmp_getattr_target_36, tmp_getattr_attr_36, tmp_getattr_default_36);
        if (tmp_tuple_element_141 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2761;

            goto try_except_handler_106;
        }
        tmp_right_value_36 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_194;
            PyObject *tmp_type_arg_72;
            PyTuple_SET_ITEM(tmp_right_value_36, 0, tmp_tuple_element_141);
            CHECK_OBJECT(tmp_class_creation_27__prepared);
            tmp_type_arg_72 = tmp_class_creation_27__prepared;
            tmp_expression_value_194 = BUILTIN_TYPE1(tmp_type_arg_72);
            assert(!(tmp_expression_value_194 == NULL));
            tmp_tuple_element_141 = LOOKUP_ATTRIBUTE(tmp_expression_value_194, mod_consts[190]);
            Py_DECREF(tmp_expression_value_194);
            if (tmp_tuple_element_141 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2761;

                goto tuple_build_exception_50;
            }
            PyTuple_SET_ITEM(tmp_right_value_36, 1, tmp_tuple_element_141);
        }
        goto tuple_build_noexception_50;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_50:;
        Py_DECREF(tmp_right_value_36);
        goto try_except_handler_106;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_50:;
        tmp_raise_value_36 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_36, tmp_right_value_36);
        Py_DECREF(tmp_right_value_36);
        if (tmp_raise_value_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2761;

            goto try_except_handler_106;
        }
        exception_type = tmp_raise_type_36;
        Py_INCREF(tmp_raise_type_36);
        exception_value = tmp_raise_value_36;
        exception_lineno = 2761;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_106;
    }
    branch_no_145:;
    goto branch_end_144;
    branch_no_144:;
    {
        PyObject *tmp_assign_source_307;
        tmp_assign_source_307 = PyDict_New();
        assert(tmp_class_creation_27__prepared == NULL);
        tmp_class_creation_27__prepared = tmp_assign_source_307;
    }
    branch_end_144:;
    {
        PyObject *tmp_assign_source_308;
        {
            PyObject *tmp_set_locals_36;
            CHECK_OBJECT(tmp_class_creation_27__prepared);
            tmp_set_locals_36 = tmp_class_creation_27__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__36_REAL_2761 = tmp_set_locals_36;
            Py_INCREF(tmp_set_locals_36);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__36_REAL_2761, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2761;

            goto try_except_handler_108;
        }
        tmp_dictset_value = mod_consts[658];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__36_REAL_2761, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2761;

            goto try_except_handler_108;
        }
        tmp_dictset_value = mod_consts[657];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__36_REAL_2761, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2761;

            goto try_except_handler_108;
        }
        if (isFrameUnusable(cache_frame_a7c1a7f513bbab818d3e3feeeb031df3_35)) {
            Py_XDECREF(cache_frame_a7c1a7f513bbab818d3e3feeeb031df3_35);

#if _DEBUG_REFCOUNTS
            if (cache_frame_a7c1a7f513bbab818d3e3feeeb031df3_35 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_a7c1a7f513bbab818d3e3feeeb031df3_35 = MAKE_FUNCTION_FRAME(codeobj_a7c1a7f513bbab818d3e3feeeb031df3, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_a7c1a7f513bbab818d3e3feeeb031df3_35->m_type_description == NULL);
        frame_a7c1a7f513bbab818d3e3feeeb031df3_35 = cache_frame_a7c1a7f513bbab818d3e3feeeb031df3_35;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_a7c1a7f513bbab818d3e3feeeb031df3_35);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_a7c1a7f513bbab818d3e3feeeb031df3_35) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[657];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__36_REAL_2761, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2765;
            type_description_2 = "o";
            goto frame_exception_exit_35;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a7c1a7f513bbab818d3e3feeeb031df3_35);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_34;

        frame_exception_exit_35:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a7c1a7f513bbab818d3e3feeeb031df3_35);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_a7c1a7f513bbab818d3e3feeeb031df3_35, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_a7c1a7f513bbab818d3e3feeeb031df3_35->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_a7c1a7f513bbab818d3e3feeeb031df3_35, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_a7c1a7f513bbab818d3e3feeeb031df3_35,
            type_description_2,
            outline_35_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_a7c1a7f513bbab818d3e3feeeb031df3_35 == cache_frame_a7c1a7f513bbab818d3e3feeeb031df3_35) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_a7c1a7f513bbab818d3e3feeeb031df3_35);
            cache_frame_a7c1a7f513bbab818d3e3feeeb031df3_35 = NULL;
        }

        assertFrameObject(frame_a7c1a7f513bbab818d3e3feeeb031df3_35);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_34;

        frame_no_exception_34:;
        goto skip_nested_handling_34;
        nested_frame_exit_34:;

        goto try_except_handler_108;
        skip_nested_handling_34:;
        {
            nuitka_bool tmp_condition_result_241;
            PyObject *tmp_cmp_expr_left_36;
            PyObject *tmp_cmp_expr_right_36;
            CHECK_OBJECT(tmp_class_creation_27__bases);
            tmp_cmp_expr_left_36 = tmp_class_creation_27__bases;
            CHECK_OBJECT(tmp_class_creation_27__bases_orig);
            tmp_cmp_expr_right_36 = tmp_class_creation_27__bases_orig;
            tmp_condition_result_241 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_36, tmp_cmp_expr_right_36);
            if (tmp_condition_result_241 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2761;

                goto try_except_handler_108;
            }
            if (tmp_condition_result_241 == NUITKA_BOOL_TRUE) {
                goto branch_yes_146;
            } else {
                goto branch_no_146;
            }
            assert(tmp_condition_result_241 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_146:;
        CHECK_OBJECT(tmp_class_creation_27__bases_orig);
        tmp_dictset_value = tmp_class_creation_27__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__36_REAL_2761, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2761;

            goto try_except_handler_108;
        }
        branch_no_146:;
        {
            PyObject *tmp_assign_source_309;
            PyObject *tmp_called_value_128;
            PyObject *tmp_args_value_72;
            PyObject *tmp_tuple_element_142;
            PyObject *tmp_kwargs_value_72;
            CHECK_OBJECT(tmp_class_creation_27__metaclass);
            tmp_called_value_128 = tmp_class_creation_27__metaclass;
            tmp_tuple_element_142 = mod_consts[657];
            tmp_args_value_72 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_72, 0, tmp_tuple_element_142);
            CHECK_OBJECT(tmp_class_creation_27__bases);
            tmp_tuple_element_142 = tmp_class_creation_27__bases;
            PyTuple_SET_ITEM0(tmp_args_value_72, 1, tmp_tuple_element_142);
            tmp_tuple_element_142 = locals_sqlalchemy$sql$sqltypes$$$class__36_REAL_2761;
            PyTuple_SET_ITEM0(tmp_args_value_72, 2, tmp_tuple_element_142);
            CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
            tmp_kwargs_value_72 = tmp_class_creation_27__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2761;
            tmp_assign_source_309 = CALL_FUNCTION(tmp_called_value_128, tmp_args_value_72, tmp_kwargs_value_72);
            Py_DECREF(tmp_args_value_72);
            if (tmp_assign_source_309 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2761;

                goto try_except_handler_108;
            }
            assert(outline_35_var___class__ == NULL);
            outline_35_var___class__ = tmp_assign_source_309;
        }
        CHECK_OBJECT(outline_35_var___class__);
        tmp_assign_source_308 = outline_35_var___class__;
        Py_INCREF(tmp_assign_source_308);
        goto try_return_handler_108;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_108:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__36_REAL_2761);
        locals_sqlalchemy$sql$sqltypes$$$class__36_REAL_2761 = NULL;
        goto try_return_handler_107;
        // Exception handler code:
        try_except_handler_108:;
        exception_keeper_type_106 = exception_type;
        exception_keeper_value_106 = exception_value;
        exception_keeper_tb_106 = exception_tb;
        exception_keeper_lineno_106 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__36_REAL_2761);
        locals_sqlalchemy$sql$sqltypes$$$class__36_REAL_2761 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_106;
        exception_value = exception_keeper_value_106;
        exception_tb = exception_keeper_tb_106;
        exception_lineno = exception_keeper_lineno_106;

        goto try_except_handler_107;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_107:;
        CHECK_OBJECT(outline_35_var___class__);
        Py_DECREF(outline_35_var___class__);
        outline_35_var___class__ = NULL;
        goto outline_result_36;
        // Exception handler code:
        try_except_handler_107:;
        exception_keeper_type_107 = exception_type;
        exception_keeper_value_107 = exception_value;
        exception_keeper_tb_107 = exception_tb;
        exception_keeper_lineno_107 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_107;
        exception_value = exception_keeper_value_107;
        exception_tb = exception_keeper_tb_107;
        exception_lineno = exception_keeper_lineno_107;

        goto outline_exception_36;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_36:;
        exception_lineno = 2761;
        goto try_except_handler_106;
        outline_result_36:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[657], tmp_assign_source_308);
    }
    goto try_end_36;
    // Exception handler code:
    try_except_handler_106:;
    exception_keeper_type_108 = exception_type;
    exception_keeper_value_108 = exception_value;
    exception_keeper_tb_108 = exception_tb;
    exception_keeper_lineno_108 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_27__bases_orig);
    tmp_class_creation_27__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_27__bases);
    tmp_class_creation_27__bases = NULL;
    Py_XDECREF(tmp_class_creation_27__class_decl_dict);
    tmp_class_creation_27__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_27__metaclass);
    tmp_class_creation_27__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_27__prepared);
    tmp_class_creation_27__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_108;
    exception_value = exception_keeper_value_108;
    exception_tb = exception_keeper_tb_108;
    exception_lineno = exception_keeper_lineno_108;

    goto frame_exception_exit_1;
    // End of try:
    try_end_36:;
    CHECK_OBJECT(tmp_class_creation_27__bases_orig);
    Py_DECREF(tmp_class_creation_27__bases_orig);
    tmp_class_creation_27__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_27__bases);
    Py_DECREF(tmp_class_creation_27__bases);
    tmp_class_creation_27__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
    Py_DECREF(tmp_class_creation_27__class_decl_dict);
    tmp_class_creation_27__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_27__metaclass);
    Py_DECREF(tmp_class_creation_27__metaclass);
    tmp_class_creation_27__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_27__prepared);
    Py_DECREF(tmp_class_creation_27__prepared);
    tmp_class_creation_27__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_310;
        PyObject *tmp_tuple_element_143;
        tmp_tuple_element_143 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[304]);

        if (unlikely(tmp_tuple_element_143 == NULL)) {
            tmp_tuple_element_143 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[304]);
        }

        if (tmp_tuple_element_143 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2768;

            goto try_except_handler_109;
        }
        tmp_assign_source_310 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_310, 0, tmp_tuple_element_143);
        assert(tmp_class_creation_28__bases_orig == NULL);
        tmp_class_creation_28__bases_orig = tmp_assign_source_310;
    }
    {
        PyObject *tmp_assign_source_311;
        PyObject *tmp_dircall_arg1_37;
        CHECK_OBJECT(tmp_class_creation_28__bases_orig);
        tmp_dircall_arg1_37 = tmp_class_creation_28__bases_orig;
        Py_INCREF(tmp_dircall_arg1_37);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_37};
            tmp_assign_source_311 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_311 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2768;

            goto try_except_handler_109;
        }
        assert(tmp_class_creation_28__bases == NULL);
        tmp_class_creation_28__bases = tmp_assign_source_311;
    }
    {
        PyObject *tmp_assign_source_312;
        tmp_assign_source_312 = PyDict_New();
        assert(tmp_class_creation_28__class_decl_dict == NULL);
        tmp_class_creation_28__class_decl_dict = tmp_assign_source_312;
    }
    {
        PyObject *tmp_assign_source_313;
        PyObject *tmp_metaclass_value_37;
        bool tmp_condition_result_242;
        PyObject *tmp_key_value_109;
        PyObject *tmp_dict_arg_value_109;
        PyObject *tmp_dict_arg_value_110;
        PyObject *tmp_key_value_110;
        nuitka_bool tmp_condition_result_243;
        int tmp_truth_name_39;
        PyObject *tmp_type_arg_73;
        PyObject *tmp_expression_value_195;
        PyObject *tmp_subscript_value_37;
        PyObject *tmp_bases_value_37;
        tmp_key_value_109 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
        tmp_dict_arg_value_109 = tmp_class_creation_28__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_109, tmp_key_value_109);
        assert(!(tmp_res == -1));
        tmp_condition_result_242 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_242 != false) {
            goto condexpr_true_96;
        } else {
            goto condexpr_false_96;
        }
        condexpr_true_96:;
        CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
        tmp_dict_arg_value_110 = tmp_class_creation_28__class_decl_dict;
        tmp_key_value_110 = mod_consts[410];
        tmp_metaclass_value_37 = DICT_GET_ITEM0(tmp_dict_arg_value_110, tmp_key_value_110);
        if (tmp_metaclass_value_37 == NULL) {
            tmp_metaclass_value_37 = Py_None;
        }
        assert(!(tmp_metaclass_value_37 == NULL));
        Py_INCREF(tmp_metaclass_value_37);
        goto condexpr_end_96;
        condexpr_false_96:;
        CHECK_OBJECT(tmp_class_creation_28__bases);
        tmp_truth_name_39 = CHECK_IF_TRUE(tmp_class_creation_28__bases);
        if (tmp_truth_name_39 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2768;

            goto try_except_handler_109;
        }
        tmp_condition_result_243 = tmp_truth_name_39 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_243 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_97;
        } else {
            goto condexpr_false_97;
        }
        condexpr_true_97:;
        CHECK_OBJECT(tmp_class_creation_28__bases);
        tmp_expression_value_195 = tmp_class_creation_28__bases;
        tmp_subscript_value_37 = mod_consts[52];
        tmp_type_arg_73 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_195, tmp_subscript_value_37, 0);
        if (tmp_type_arg_73 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2768;

            goto try_except_handler_109;
        }
        tmp_metaclass_value_37 = BUILTIN_TYPE1(tmp_type_arg_73);
        Py_DECREF(tmp_type_arg_73);
        if (tmp_metaclass_value_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2768;

            goto try_except_handler_109;
        }
        goto condexpr_end_97;
        condexpr_false_97:;
        tmp_metaclass_value_37 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_37);
        condexpr_end_97:;
        condexpr_end_96:;
        CHECK_OBJECT(tmp_class_creation_28__bases);
        tmp_bases_value_37 = tmp_class_creation_28__bases;
        tmp_assign_source_313 = SELECT_METACLASS(tmp_metaclass_value_37, tmp_bases_value_37);
        Py_DECREF(tmp_metaclass_value_37);
        if (tmp_assign_source_313 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2768;

            goto try_except_handler_109;
        }
        assert(tmp_class_creation_28__metaclass == NULL);
        tmp_class_creation_28__metaclass = tmp_assign_source_313;
    }
    {
        bool tmp_condition_result_244;
        PyObject *tmp_key_value_111;
        PyObject *tmp_dict_arg_value_111;
        tmp_key_value_111 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
        tmp_dict_arg_value_111 = tmp_class_creation_28__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_111, tmp_key_value_111);
        assert(!(tmp_res == -1));
        tmp_condition_result_244 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_244 != false) {
            goto branch_yes_147;
        } else {
            goto branch_no_147;
        }
    }
    branch_yes_147:;
    CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_28__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2768;

        goto try_except_handler_109;
    }
    branch_no_147:;
    {
        nuitka_bool tmp_condition_result_245;
        PyObject *tmp_expression_value_196;
        CHECK_OBJECT(tmp_class_creation_28__metaclass);
        tmp_expression_value_196 = tmp_class_creation_28__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_196, mod_consts[411]);
        tmp_condition_result_245 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_245 == NUITKA_BOOL_TRUE) {
            goto branch_yes_148;
        } else {
            goto branch_no_148;
        }
    }
    branch_yes_148:;
    {
        PyObject *tmp_assign_source_314;
        PyObject *tmp_called_value_129;
        PyObject *tmp_expression_value_197;
        PyObject *tmp_args_value_73;
        PyObject *tmp_tuple_element_144;
        PyObject *tmp_kwargs_value_73;
        CHECK_OBJECT(tmp_class_creation_28__metaclass);
        tmp_expression_value_197 = tmp_class_creation_28__metaclass;
        tmp_called_value_129 = LOOKUP_ATTRIBUTE(tmp_expression_value_197, mod_consts[411]);
        if (tmp_called_value_129 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2768;

            goto try_except_handler_109;
        }
        tmp_tuple_element_144 = mod_consts[659];
        tmp_args_value_73 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_73, 0, tmp_tuple_element_144);
        CHECK_OBJECT(tmp_class_creation_28__bases);
        tmp_tuple_element_144 = tmp_class_creation_28__bases;
        PyTuple_SET_ITEM0(tmp_args_value_73, 1, tmp_tuple_element_144);
        CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
        tmp_kwargs_value_73 = tmp_class_creation_28__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2768;
        tmp_assign_source_314 = CALL_FUNCTION(tmp_called_value_129, tmp_args_value_73, tmp_kwargs_value_73);
        Py_DECREF(tmp_called_value_129);
        Py_DECREF(tmp_args_value_73);
        if (tmp_assign_source_314 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2768;

            goto try_except_handler_109;
        }
        assert(tmp_class_creation_28__prepared == NULL);
        tmp_class_creation_28__prepared = tmp_assign_source_314;
    }
    {
        bool tmp_condition_result_246;
        PyObject *tmp_operand_value_37;
        PyObject *tmp_expression_value_198;
        CHECK_OBJECT(tmp_class_creation_28__prepared);
        tmp_expression_value_198 = tmp_class_creation_28__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_198, mod_consts[413]);
        tmp_operand_value_37 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_37);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2768;

            goto try_except_handler_109;
        }
        tmp_condition_result_246 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_246 != false) {
            goto branch_yes_149;
        } else {
            goto branch_no_149;
        }
    }
    branch_yes_149:;
    {
        PyObject *tmp_raise_type_37;
        PyObject *tmp_raise_value_37;
        PyObject *tmp_left_value_37;
        PyObject *tmp_right_value_37;
        PyObject *tmp_tuple_element_145;
        PyObject *tmp_getattr_target_37;
        PyObject *tmp_getattr_attr_37;
        PyObject *tmp_getattr_default_37;
        tmp_raise_type_37 = PyExc_TypeError;
        tmp_left_value_37 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_28__metaclass);
        tmp_getattr_target_37 = tmp_class_creation_28__metaclass;
        tmp_getattr_attr_37 = mod_consts[190];
        tmp_getattr_default_37 = mod_consts[415];
        tmp_tuple_element_145 = BUILTIN_GETATTR(tmp_getattr_target_37, tmp_getattr_attr_37, tmp_getattr_default_37);
        if (tmp_tuple_element_145 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2768;

            goto try_except_handler_109;
        }
        tmp_right_value_37 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_199;
            PyObject *tmp_type_arg_74;
            PyTuple_SET_ITEM(tmp_right_value_37, 0, tmp_tuple_element_145);
            CHECK_OBJECT(tmp_class_creation_28__prepared);
            tmp_type_arg_74 = tmp_class_creation_28__prepared;
            tmp_expression_value_199 = BUILTIN_TYPE1(tmp_type_arg_74);
            assert(!(tmp_expression_value_199 == NULL));
            tmp_tuple_element_145 = LOOKUP_ATTRIBUTE(tmp_expression_value_199, mod_consts[190]);
            Py_DECREF(tmp_expression_value_199);
            if (tmp_tuple_element_145 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2768;

                goto tuple_build_exception_51;
            }
            PyTuple_SET_ITEM(tmp_right_value_37, 1, tmp_tuple_element_145);
        }
        goto tuple_build_noexception_51;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_51:;
        Py_DECREF(tmp_right_value_37);
        goto try_except_handler_109;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_51:;
        tmp_raise_value_37 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_37, tmp_right_value_37);
        Py_DECREF(tmp_right_value_37);
        if (tmp_raise_value_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2768;

            goto try_except_handler_109;
        }
        exception_type = tmp_raise_type_37;
        Py_INCREF(tmp_raise_type_37);
        exception_value = tmp_raise_value_37;
        exception_lineno = 2768;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_109;
    }
    branch_no_149:;
    goto branch_end_148;
    branch_no_148:;
    {
        PyObject *tmp_assign_source_315;
        tmp_assign_source_315 = PyDict_New();
        assert(tmp_class_creation_28__prepared == NULL);
        tmp_class_creation_28__prepared = tmp_assign_source_315;
    }
    branch_end_148:;
    {
        PyObject *tmp_assign_source_316;
        {
            PyObject *tmp_set_locals_37;
            CHECK_OBJECT(tmp_class_creation_28__prepared);
            tmp_set_locals_37 = tmp_class_creation_28__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__37_FLOAT_2768 = tmp_set_locals_37;
            Py_INCREF(tmp_set_locals_37);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__37_FLOAT_2768, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2768;

            goto try_except_handler_111;
        }
        tmp_dictset_value = mod_consts[660];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__37_FLOAT_2768, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2768;

            goto try_except_handler_111;
        }
        tmp_dictset_value = mod_consts[659];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__37_FLOAT_2768, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2768;

            goto try_except_handler_111;
        }
        if (isFrameUnusable(cache_frame_6402f99f19d16661ce6b6f1f95cc77c4_36)) {
            Py_XDECREF(cache_frame_6402f99f19d16661ce6b6f1f95cc77c4_36);

#if _DEBUG_REFCOUNTS
            if (cache_frame_6402f99f19d16661ce6b6f1f95cc77c4_36 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_6402f99f19d16661ce6b6f1f95cc77c4_36 = MAKE_FUNCTION_FRAME(codeobj_6402f99f19d16661ce6b6f1f95cc77c4, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_6402f99f19d16661ce6b6f1f95cc77c4_36->m_type_description == NULL);
        frame_6402f99f19d16661ce6b6f1f95cc77c4_36 = cache_frame_6402f99f19d16661ce6b6f1f95cc77c4_36;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_6402f99f19d16661ce6b6f1f95cc77c4_36);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_6402f99f19d16661ce6b6f1f95cc77c4_36) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[659];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__37_FLOAT_2768, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2772;
            type_description_2 = "o";
            goto frame_exception_exit_36;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_6402f99f19d16661ce6b6f1f95cc77c4_36);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_35;

        frame_exception_exit_36:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_6402f99f19d16661ce6b6f1f95cc77c4_36);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_6402f99f19d16661ce6b6f1f95cc77c4_36, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_6402f99f19d16661ce6b6f1f95cc77c4_36->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_6402f99f19d16661ce6b6f1f95cc77c4_36, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_6402f99f19d16661ce6b6f1f95cc77c4_36,
            type_description_2,
            outline_36_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_6402f99f19d16661ce6b6f1f95cc77c4_36 == cache_frame_6402f99f19d16661ce6b6f1f95cc77c4_36) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_6402f99f19d16661ce6b6f1f95cc77c4_36);
            cache_frame_6402f99f19d16661ce6b6f1f95cc77c4_36 = NULL;
        }

        assertFrameObject(frame_6402f99f19d16661ce6b6f1f95cc77c4_36);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_35;

        frame_no_exception_35:;
        goto skip_nested_handling_35;
        nested_frame_exit_35:;

        goto try_except_handler_111;
        skip_nested_handling_35:;
        {
            nuitka_bool tmp_condition_result_247;
            PyObject *tmp_cmp_expr_left_37;
            PyObject *tmp_cmp_expr_right_37;
            CHECK_OBJECT(tmp_class_creation_28__bases);
            tmp_cmp_expr_left_37 = tmp_class_creation_28__bases;
            CHECK_OBJECT(tmp_class_creation_28__bases_orig);
            tmp_cmp_expr_right_37 = tmp_class_creation_28__bases_orig;
            tmp_condition_result_247 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_37, tmp_cmp_expr_right_37);
            if (tmp_condition_result_247 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2768;

                goto try_except_handler_111;
            }
            if (tmp_condition_result_247 == NUITKA_BOOL_TRUE) {
                goto branch_yes_150;
            } else {
                goto branch_no_150;
            }
            assert(tmp_condition_result_247 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_150:;
        CHECK_OBJECT(tmp_class_creation_28__bases_orig);
        tmp_dictset_value = tmp_class_creation_28__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__37_FLOAT_2768, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2768;

            goto try_except_handler_111;
        }
        branch_no_150:;
        {
            PyObject *tmp_assign_source_317;
            PyObject *tmp_called_value_130;
            PyObject *tmp_args_value_74;
            PyObject *tmp_tuple_element_146;
            PyObject *tmp_kwargs_value_74;
            CHECK_OBJECT(tmp_class_creation_28__metaclass);
            tmp_called_value_130 = tmp_class_creation_28__metaclass;
            tmp_tuple_element_146 = mod_consts[659];
            tmp_args_value_74 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_74, 0, tmp_tuple_element_146);
            CHECK_OBJECT(tmp_class_creation_28__bases);
            tmp_tuple_element_146 = tmp_class_creation_28__bases;
            PyTuple_SET_ITEM0(tmp_args_value_74, 1, tmp_tuple_element_146);
            tmp_tuple_element_146 = locals_sqlalchemy$sql$sqltypes$$$class__37_FLOAT_2768;
            PyTuple_SET_ITEM0(tmp_args_value_74, 2, tmp_tuple_element_146);
            CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
            tmp_kwargs_value_74 = tmp_class_creation_28__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2768;
            tmp_assign_source_317 = CALL_FUNCTION(tmp_called_value_130, tmp_args_value_74, tmp_kwargs_value_74);
            Py_DECREF(tmp_args_value_74);
            if (tmp_assign_source_317 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2768;

                goto try_except_handler_111;
            }
            assert(outline_36_var___class__ == NULL);
            outline_36_var___class__ = tmp_assign_source_317;
        }
        CHECK_OBJECT(outline_36_var___class__);
        tmp_assign_source_316 = outline_36_var___class__;
        Py_INCREF(tmp_assign_source_316);
        goto try_return_handler_111;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_111:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__37_FLOAT_2768);
        locals_sqlalchemy$sql$sqltypes$$$class__37_FLOAT_2768 = NULL;
        goto try_return_handler_110;
        // Exception handler code:
        try_except_handler_111:;
        exception_keeper_type_109 = exception_type;
        exception_keeper_value_109 = exception_value;
        exception_keeper_tb_109 = exception_tb;
        exception_keeper_lineno_109 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__37_FLOAT_2768);
        locals_sqlalchemy$sql$sqltypes$$$class__37_FLOAT_2768 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_109;
        exception_value = exception_keeper_value_109;
        exception_tb = exception_keeper_tb_109;
        exception_lineno = exception_keeper_lineno_109;

        goto try_except_handler_110;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_110:;
        CHECK_OBJECT(outline_36_var___class__);
        Py_DECREF(outline_36_var___class__);
        outline_36_var___class__ = NULL;
        goto outline_result_37;
        // Exception handler code:
        try_except_handler_110:;
        exception_keeper_type_110 = exception_type;
        exception_keeper_value_110 = exception_value;
        exception_keeper_tb_110 = exception_tb;
        exception_keeper_lineno_110 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_110;
        exception_value = exception_keeper_value_110;
        exception_tb = exception_keeper_tb_110;
        exception_lineno = exception_keeper_lineno_110;

        goto outline_exception_37;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_37:;
        exception_lineno = 2768;
        goto try_except_handler_109;
        outline_result_37:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[659], tmp_assign_source_316);
    }
    goto try_end_37;
    // Exception handler code:
    try_except_handler_109:;
    exception_keeper_type_111 = exception_type;
    exception_keeper_value_111 = exception_value;
    exception_keeper_tb_111 = exception_tb;
    exception_keeper_lineno_111 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_28__bases_orig);
    tmp_class_creation_28__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_28__bases);
    tmp_class_creation_28__bases = NULL;
    Py_XDECREF(tmp_class_creation_28__class_decl_dict);
    tmp_class_creation_28__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_28__metaclass);
    tmp_class_creation_28__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_28__prepared);
    tmp_class_creation_28__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_111;
    exception_value = exception_keeper_value_111;
    exception_tb = exception_keeper_tb_111;
    exception_lineno = exception_keeper_lineno_111;

    goto frame_exception_exit_1;
    // End of try:
    try_end_37:;
    CHECK_OBJECT(tmp_class_creation_28__bases_orig);
    Py_DECREF(tmp_class_creation_28__bases_orig);
    tmp_class_creation_28__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_28__bases);
    Py_DECREF(tmp_class_creation_28__bases);
    tmp_class_creation_28__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
    Py_DECREF(tmp_class_creation_28__class_decl_dict);
    tmp_class_creation_28__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_28__metaclass);
    Py_DECREF(tmp_class_creation_28__metaclass);
    tmp_class_creation_28__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_28__prepared);
    Py_DECREF(tmp_class_creation_28__prepared);
    tmp_class_creation_28__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_318;
        PyObject *tmp_tuple_element_147;
        tmp_tuple_element_147 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[74]);

        if (unlikely(tmp_tuple_element_147 == NULL)) {
            tmp_tuple_element_147 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[74]);
        }

        if (tmp_tuple_element_147 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2775;

            goto try_except_handler_112;
        }
        tmp_assign_source_318 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_318, 0, tmp_tuple_element_147);
        assert(tmp_class_creation_29__bases_orig == NULL);
        tmp_class_creation_29__bases_orig = tmp_assign_source_318;
    }
    {
        PyObject *tmp_assign_source_319;
        PyObject *tmp_dircall_arg1_38;
        CHECK_OBJECT(tmp_class_creation_29__bases_orig);
        tmp_dircall_arg1_38 = tmp_class_creation_29__bases_orig;
        Py_INCREF(tmp_dircall_arg1_38);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_38};
            tmp_assign_source_319 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_319 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2775;

            goto try_except_handler_112;
        }
        assert(tmp_class_creation_29__bases == NULL);
        tmp_class_creation_29__bases = tmp_assign_source_319;
    }
    {
        PyObject *tmp_assign_source_320;
        tmp_assign_source_320 = PyDict_New();
        assert(tmp_class_creation_29__class_decl_dict == NULL);
        tmp_class_creation_29__class_decl_dict = tmp_assign_source_320;
    }
    {
        PyObject *tmp_assign_source_321;
        PyObject *tmp_metaclass_value_38;
        bool tmp_condition_result_248;
        PyObject *tmp_key_value_112;
        PyObject *tmp_dict_arg_value_112;
        PyObject *tmp_dict_arg_value_113;
        PyObject *tmp_key_value_113;
        nuitka_bool tmp_condition_result_249;
        int tmp_truth_name_40;
        PyObject *tmp_type_arg_75;
        PyObject *tmp_expression_value_200;
        PyObject *tmp_subscript_value_38;
        PyObject *tmp_bases_value_38;
        tmp_key_value_112 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
        tmp_dict_arg_value_112 = tmp_class_creation_29__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_112, tmp_key_value_112);
        assert(!(tmp_res == -1));
        tmp_condition_result_248 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_248 != false) {
            goto condexpr_true_98;
        } else {
            goto condexpr_false_98;
        }
        condexpr_true_98:;
        CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
        tmp_dict_arg_value_113 = tmp_class_creation_29__class_decl_dict;
        tmp_key_value_113 = mod_consts[410];
        tmp_metaclass_value_38 = DICT_GET_ITEM0(tmp_dict_arg_value_113, tmp_key_value_113);
        if (tmp_metaclass_value_38 == NULL) {
            tmp_metaclass_value_38 = Py_None;
        }
        assert(!(tmp_metaclass_value_38 == NULL));
        Py_INCREF(tmp_metaclass_value_38);
        goto condexpr_end_98;
        condexpr_false_98:;
        CHECK_OBJECT(tmp_class_creation_29__bases);
        tmp_truth_name_40 = CHECK_IF_TRUE(tmp_class_creation_29__bases);
        if (tmp_truth_name_40 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2775;

            goto try_except_handler_112;
        }
        tmp_condition_result_249 = tmp_truth_name_40 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_249 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_99;
        } else {
            goto condexpr_false_99;
        }
        condexpr_true_99:;
        CHECK_OBJECT(tmp_class_creation_29__bases);
        tmp_expression_value_200 = tmp_class_creation_29__bases;
        tmp_subscript_value_38 = mod_consts[52];
        tmp_type_arg_75 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_200, tmp_subscript_value_38, 0);
        if (tmp_type_arg_75 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2775;

            goto try_except_handler_112;
        }
        tmp_metaclass_value_38 = BUILTIN_TYPE1(tmp_type_arg_75);
        Py_DECREF(tmp_type_arg_75);
        if (tmp_metaclass_value_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2775;

            goto try_except_handler_112;
        }
        goto condexpr_end_99;
        condexpr_false_99:;
        tmp_metaclass_value_38 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_38);
        condexpr_end_99:;
        condexpr_end_98:;
        CHECK_OBJECT(tmp_class_creation_29__bases);
        tmp_bases_value_38 = tmp_class_creation_29__bases;
        tmp_assign_source_321 = SELECT_METACLASS(tmp_metaclass_value_38, tmp_bases_value_38);
        Py_DECREF(tmp_metaclass_value_38);
        if (tmp_assign_source_321 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2775;

            goto try_except_handler_112;
        }
        assert(tmp_class_creation_29__metaclass == NULL);
        tmp_class_creation_29__metaclass = tmp_assign_source_321;
    }
    {
        bool tmp_condition_result_250;
        PyObject *tmp_key_value_114;
        PyObject *tmp_dict_arg_value_114;
        tmp_key_value_114 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
        tmp_dict_arg_value_114 = tmp_class_creation_29__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_114, tmp_key_value_114);
        assert(!(tmp_res == -1));
        tmp_condition_result_250 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_250 != false) {
            goto branch_yes_151;
        } else {
            goto branch_no_151;
        }
    }
    branch_yes_151:;
    CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_29__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2775;

        goto try_except_handler_112;
    }
    branch_no_151:;
    {
        nuitka_bool tmp_condition_result_251;
        PyObject *tmp_expression_value_201;
        CHECK_OBJECT(tmp_class_creation_29__metaclass);
        tmp_expression_value_201 = tmp_class_creation_29__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_201, mod_consts[411]);
        tmp_condition_result_251 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_251 == NUITKA_BOOL_TRUE) {
            goto branch_yes_152;
        } else {
            goto branch_no_152;
        }
    }
    branch_yes_152:;
    {
        PyObject *tmp_assign_source_322;
        PyObject *tmp_called_value_131;
        PyObject *tmp_expression_value_202;
        PyObject *tmp_args_value_75;
        PyObject *tmp_tuple_element_148;
        PyObject *tmp_kwargs_value_75;
        CHECK_OBJECT(tmp_class_creation_29__metaclass);
        tmp_expression_value_202 = tmp_class_creation_29__metaclass;
        tmp_called_value_131 = LOOKUP_ATTRIBUTE(tmp_expression_value_202, mod_consts[411]);
        if (tmp_called_value_131 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2775;

            goto try_except_handler_112;
        }
        tmp_tuple_element_148 = mod_consts[661];
        tmp_args_value_75 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_75, 0, tmp_tuple_element_148);
        CHECK_OBJECT(tmp_class_creation_29__bases);
        tmp_tuple_element_148 = tmp_class_creation_29__bases;
        PyTuple_SET_ITEM0(tmp_args_value_75, 1, tmp_tuple_element_148);
        CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
        tmp_kwargs_value_75 = tmp_class_creation_29__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2775;
        tmp_assign_source_322 = CALL_FUNCTION(tmp_called_value_131, tmp_args_value_75, tmp_kwargs_value_75);
        Py_DECREF(tmp_called_value_131);
        Py_DECREF(tmp_args_value_75);
        if (tmp_assign_source_322 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2775;

            goto try_except_handler_112;
        }
        assert(tmp_class_creation_29__prepared == NULL);
        tmp_class_creation_29__prepared = tmp_assign_source_322;
    }
    {
        bool tmp_condition_result_252;
        PyObject *tmp_operand_value_38;
        PyObject *tmp_expression_value_203;
        CHECK_OBJECT(tmp_class_creation_29__prepared);
        tmp_expression_value_203 = tmp_class_creation_29__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_203, mod_consts[413]);
        tmp_operand_value_38 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_38);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2775;

            goto try_except_handler_112;
        }
        tmp_condition_result_252 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_252 != false) {
            goto branch_yes_153;
        } else {
            goto branch_no_153;
        }
    }
    branch_yes_153:;
    {
        PyObject *tmp_raise_type_38;
        PyObject *tmp_raise_value_38;
        PyObject *tmp_left_value_38;
        PyObject *tmp_right_value_38;
        PyObject *tmp_tuple_element_149;
        PyObject *tmp_getattr_target_38;
        PyObject *tmp_getattr_attr_38;
        PyObject *tmp_getattr_default_38;
        tmp_raise_type_38 = PyExc_TypeError;
        tmp_left_value_38 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_29__metaclass);
        tmp_getattr_target_38 = tmp_class_creation_29__metaclass;
        tmp_getattr_attr_38 = mod_consts[190];
        tmp_getattr_default_38 = mod_consts[415];
        tmp_tuple_element_149 = BUILTIN_GETATTR(tmp_getattr_target_38, tmp_getattr_attr_38, tmp_getattr_default_38);
        if (tmp_tuple_element_149 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2775;

            goto try_except_handler_112;
        }
        tmp_right_value_38 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_204;
            PyObject *tmp_type_arg_76;
            PyTuple_SET_ITEM(tmp_right_value_38, 0, tmp_tuple_element_149);
            CHECK_OBJECT(tmp_class_creation_29__prepared);
            tmp_type_arg_76 = tmp_class_creation_29__prepared;
            tmp_expression_value_204 = BUILTIN_TYPE1(tmp_type_arg_76);
            assert(!(tmp_expression_value_204 == NULL));
            tmp_tuple_element_149 = LOOKUP_ATTRIBUTE(tmp_expression_value_204, mod_consts[190]);
            Py_DECREF(tmp_expression_value_204);
            if (tmp_tuple_element_149 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2775;

                goto tuple_build_exception_52;
            }
            PyTuple_SET_ITEM(tmp_right_value_38, 1, tmp_tuple_element_149);
        }
        goto tuple_build_noexception_52;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_52:;
        Py_DECREF(tmp_right_value_38);
        goto try_except_handler_112;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_52:;
        tmp_raise_value_38 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_38, tmp_right_value_38);
        Py_DECREF(tmp_right_value_38);
        if (tmp_raise_value_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2775;

            goto try_except_handler_112;
        }
        exception_type = tmp_raise_type_38;
        Py_INCREF(tmp_raise_type_38);
        exception_value = tmp_raise_value_38;
        exception_lineno = 2775;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_112;
    }
    branch_no_153:;
    goto branch_end_152;
    branch_no_152:;
    {
        PyObject *tmp_assign_source_323;
        tmp_assign_source_323 = PyDict_New();
        assert(tmp_class_creation_29__prepared == NULL);
        tmp_class_creation_29__prepared = tmp_assign_source_323;
    }
    branch_end_152:;
    {
        PyObject *tmp_assign_source_324;
        {
            PyObject *tmp_set_locals_38;
            CHECK_OBJECT(tmp_class_creation_29__prepared);
            tmp_set_locals_38 = tmp_class_creation_29__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__38_NUMERIC_2775 = tmp_set_locals_38;
            Py_INCREF(tmp_set_locals_38);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__38_NUMERIC_2775, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2775;

            goto try_except_handler_114;
        }
        tmp_dictset_value = mod_consts[662];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__38_NUMERIC_2775, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2775;

            goto try_except_handler_114;
        }
        tmp_dictset_value = mod_consts[661];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__38_NUMERIC_2775, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2775;

            goto try_except_handler_114;
        }
        if (isFrameUnusable(cache_frame_66ffa44e35a8a176d73667e21cf9bebf_37)) {
            Py_XDECREF(cache_frame_66ffa44e35a8a176d73667e21cf9bebf_37);

#if _DEBUG_REFCOUNTS
            if (cache_frame_66ffa44e35a8a176d73667e21cf9bebf_37 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_66ffa44e35a8a176d73667e21cf9bebf_37 = MAKE_FUNCTION_FRAME(codeobj_66ffa44e35a8a176d73667e21cf9bebf, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_66ffa44e35a8a176d73667e21cf9bebf_37->m_type_description == NULL);
        frame_66ffa44e35a8a176d73667e21cf9bebf_37 = cache_frame_66ffa44e35a8a176d73667e21cf9bebf_37;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_66ffa44e35a8a176d73667e21cf9bebf_37);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_66ffa44e35a8a176d73667e21cf9bebf_37) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[661];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__38_NUMERIC_2775, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2779;
            type_description_2 = "o";
            goto frame_exception_exit_37;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_66ffa44e35a8a176d73667e21cf9bebf_37);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_36;

        frame_exception_exit_37:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_66ffa44e35a8a176d73667e21cf9bebf_37);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_66ffa44e35a8a176d73667e21cf9bebf_37, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_66ffa44e35a8a176d73667e21cf9bebf_37->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_66ffa44e35a8a176d73667e21cf9bebf_37, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_66ffa44e35a8a176d73667e21cf9bebf_37,
            type_description_2,
            outline_37_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_66ffa44e35a8a176d73667e21cf9bebf_37 == cache_frame_66ffa44e35a8a176d73667e21cf9bebf_37) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_66ffa44e35a8a176d73667e21cf9bebf_37);
            cache_frame_66ffa44e35a8a176d73667e21cf9bebf_37 = NULL;
        }

        assertFrameObject(frame_66ffa44e35a8a176d73667e21cf9bebf_37);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_36;

        frame_no_exception_36:;
        goto skip_nested_handling_36;
        nested_frame_exit_36:;

        goto try_except_handler_114;
        skip_nested_handling_36:;
        {
            nuitka_bool tmp_condition_result_253;
            PyObject *tmp_cmp_expr_left_38;
            PyObject *tmp_cmp_expr_right_38;
            CHECK_OBJECT(tmp_class_creation_29__bases);
            tmp_cmp_expr_left_38 = tmp_class_creation_29__bases;
            CHECK_OBJECT(tmp_class_creation_29__bases_orig);
            tmp_cmp_expr_right_38 = tmp_class_creation_29__bases_orig;
            tmp_condition_result_253 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_38, tmp_cmp_expr_right_38);
            if (tmp_condition_result_253 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2775;

                goto try_except_handler_114;
            }
            if (tmp_condition_result_253 == NUITKA_BOOL_TRUE) {
                goto branch_yes_154;
            } else {
                goto branch_no_154;
            }
            assert(tmp_condition_result_253 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_154:;
        CHECK_OBJECT(tmp_class_creation_29__bases_orig);
        tmp_dictset_value = tmp_class_creation_29__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__38_NUMERIC_2775, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2775;

            goto try_except_handler_114;
        }
        branch_no_154:;
        {
            PyObject *tmp_assign_source_325;
            PyObject *tmp_called_value_132;
            PyObject *tmp_args_value_76;
            PyObject *tmp_tuple_element_150;
            PyObject *tmp_kwargs_value_76;
            CHECK_OBJECT(tmp_class_creation_29__metaclass);
            tmp_called_value_132 = tmp_class_creation_29__metaclass;
            tmp_tuple_element_150 = mod_consts[661];
            tmp_args_value_76 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_76, 0, tmp_tuple_element_150);
            CHECK_OBJECT(tmp_class_creation_29__bases);
            tmp_tuple_element_150 = tmp_class_creation_29__bases;
            PyTuple_SET_ITEM0(tmp_args_value_76, 1, tmp_tuple_element_150);
            tmp_tuple_element_150 = locals_sqlalchemy$sql$sqltypes$$$class__38_NUMERIC_2775;
            PyTuple_SET_ITEM0(tmp_args_value_76, 2, tmp_tuple_element_150);
            CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
            tmp_kwargs_value_76 = tmp_class_creation_29__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2775;
            tmp_assign_source_325 = CALL_FUNCTION(tmp_called_value_132, tmp_args_value_76, tmp_kwargs_value_76);
            Py_DECREF(tmp_args_value_76);
            if (tmp_assign_source_325 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2775;

                goto try_except_handler_114;
            }
            assert(outline_37_var___class__ == NULL);
            outline_37_var___class__ = tmp_assign_source_325;
        }
        CHECK_OBJECT(outline_37_var___class__);
        tmp_assign_source_324 = outline_37_var___class__;
        Py_INCREF(tmp_assign_source_324);
        goto try_return_handler_114;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_114:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__38_NUMERIC_2775);
        locals_sqlalchemy$sql$sqltypes$$$class__38_NUMERIC_2775 = NULL;
        goto try_return_handler_113;
        // Exception handler code:
        try_except_handler_114:;
        exception_keeper_type_112 = exception_type;
        exception_keeper_value_112 = exception_value;
        exception_keeper_tb_112 = exception_tb;
        exception_keeper_lineno_112 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__38_NUMERIC_2775);
        locals_sqlalchemy$sql$sqltypes$$$class__38_NUMERIC_2775 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_112;
        exception_value = exception_keeper_value_112;
        exception_tb = exception_keeper_tb_112;
        exception_lineno = exception_keeper_lineno_112;

        goto try_except_handler_113;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_113:;
        CHECK_OBJECT(outline_37_var___class__);
        Py_DECREF(outline_37_var___class__);
        outline_37_var___class__ = NULL;
        goto outline_result_38;
        // Exception handler code:
        try_except_handler_113:;
        exception_keeper_type_113 = exception_type;
        exception_keeper_value_113 = exception_value;
        exception_keeper_tb_113 = exception_tb;
        exception_keeper_lineno_113 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_113;
        exception_value = exception_keeper_value_113;
        exception_tb = exception_keeper_tb_113;
        exception_lineno = exception_keeper_lineno_113;

        goto outline_exception_38;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_38:;
        exception_lineno = 2775;
        goto try_except_handler_112;
        outline_result_38:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[661], tmp_assign_source_324);
    }
    goto try_end_38;
    // Exception handler code:
    try_except_handler_112:;
    exception_keeper_type_114 = exception_type;
    exception_keeper_value_114 = exception_value;
    exception_keeper_tb_114 = exception_tb;
    exception_keeper_lineno_114 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_29__bases_orig);
    tmp_class_creation_29__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_29__bases);
    tmp_class_creation_29__bases = NULL;
    Py_XDECREF(tmp_class_creation_29__class_decl_dict);
    tmp_class_creation_29__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_29__metaclass);
    tmp_class_creation_29__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_29__prepared);
    tmp_class_creation_29__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_114;
    exception_value = exception_keeper_value_114;
    exception_tb = exception_keeper_tb_114;
    exception_lineno = exception_keeper_lineno_114;

    goto frame_exception_exit_1;
    // End of try:
    try_end_38:;
    CHECK_OBJECT(tmp_class_creation_29__bases_orig);
    Py_DECREF(tmp_class_creation_29__bases_orig);
    tmp_class_creation_29__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_29__bases);
    Py_DECREF(tmp_class_creation_29__bases);
    tmp_class_creation_29__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
    Py_DECREF(tmp_class_creation_29__class_decl_dict);
    tmp_class_creation_29__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_29__metaclass);
    Py_DECREF(tmp_class_creation_29__metaclass);
    tmp_class_creation_29__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_29__prepared);
    Py_DECREF(tmp_class_creation_29__prepared);
    tmp_class_creation_29__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_326;
        PyObject *tmp_tuple_element_151;
        tmp_tuple_element_151 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[74]);

        if (unlikely(tmp_tuple_element_151 == NULL)) {
            tmp_tuple_element_151 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[74]);
        }

        if (tmp_tuple_element_151 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2782;

            goto try_except_handler_115;
        }
        tmp_assign_source_326 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_326, 0, tmp_tuple_element_151);
        assert(tmp_class_creation_30__bases_orig == NULL);
        tmp_class_creation_30__bases_orig = tmp_assign_source_326;
    }
    {
        PyObject *tmp_assign_source_327;
        PyObject *tmp_dircall_arg1_39;
        CHECK_OBJECT(tmp_class_creation_30__bases_orig);
        tmp_dircall_arg1_39 = tmp_class_creation_30__bases_orig;
        Py_INCREF(tmp_dircall_arg1_39);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_39};
            tmp_assign_source_327 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_327 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2782;

            goto try_except_handler_115;
        }
        assert(tmp_class_creation_30__bases == NULL);
        tmp_class_creation_30__bases = tmp_assign_source_327;
    }
    {
        PyObject *tmp_assign_source_328;
        tmp_assign_source_328 = PyDict_New();
        assert(tmp_class_creation_30__class_decl_dict == NULL);
        tmp_class_creation_30__class_decl_dict = tmp_assign_source_328;
    }
    {
        PyObject *tmp_assign_source_329;
        PyObject *tmp_metaclass_value_39;
        bool tmp_condition_result_254;
        PyObject *tmp_key_value_115;
        PyObject *tmp_dict_arg_value_115;
        PyObject *tmp_dict_arg_value_116;
        PyObject *tmp_key_value_116;
        nuitka_bool tmp_condition_result_255;
        int tmp_truth_name_41;
        PyObject *tmp_type_arg_77;
        PyObject *tmp_expression_value_205;
        PyObject *tmp_subscript_value_39;
        PyObject *tmp_bases_value_39;
        tmp_key_value_115 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
        tmp_dict_arg_value_115 = tmp_class_creation_30__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_115, tmp_key_value_115);
        assert(!(tmp_res == -1));
        tmp_condition_result_254 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_254 != false) {
            goto condexpr_true_100;
        } else {
            goto condexpr_false_100;
        }
        condexpr_true_100:;
        CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
        tmp_dict_arg_value_116 = tmp_class_creation_30__class_decl_dict;
        tmp_key_value_116 = mod_consts[410];
        tmp_metaclass_value_39 = DICT_GET_ITEM0(tmp_dict_arg_value_116, tmp_key_value_116);
        if (tmp_metaclass_value_39 == NULL) {
            tmp_metaclass_value_39 = Py_None;
        }
        assert(!(tmp_metaclass_value_39 == NULL));
        Py_INCREF(tmp_metaclass_value_39);
        goto condexpr_end_100;
        condexpr_false_100:;
        CHECK_OBJECT(tmp_class_creation_30__bases);
        tmp_truth_name_41 = CHECK_IF_TRUE(tmp_class_creation_30__bases);
        if (tmp_truth_name_41 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2782;

            goto try_except_handler_115;
        }
        tmp_condition_result_255 = tmp_truth_name_41 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_255 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_101;
        } else {
            goto condexpr_false_101;
        }
        condexpr_true_101:;
        CHECK_OBJECT(tmp_class_creation_30__bases);
        tmp_expression_value_205 = tmp_class_creation_30__bases;
        tmp_subscript_value_39 = mod_consts[52];
        tmp_type_arg_77 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_205, tmp_subscript_value_39, 0);
        if (tmp_type_arg_77 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2782;

            goto try_except_handler_115;
        }
        tmp_metaclass_value_39 = BUILTIN_TYPE1(tmp_type_arg_77);
        Py_DECREF(tmp_type_arg_77);
        if (tmp_metaclass_value_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2782;

            goto try_except_handler_115;
        }
        goto condexpr_end_101;
        condexpr_false_101:;
        tmp_metaclass_value_39 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_39);
        condexpr_end_101:;
        condexpr_end_100:;
        CHECK_OBJECT(tmp_class_creation_30__bases);
        tmp_bases_value_39 = tmp_class_creation_30__bases;
        tmp_assign_source_329 = SELECT_METACLASS(tmp_metaclass_value_39, tmp_bases_value_39);
        Py_DECREF(tmp_metaclass_value_39);
        if (tmp_assign_source_329 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2782;

            goto try_except_handler_115;
        }
        assert(tmp_class_creation_30__metaclass == NULL);
        tmp_class_creation_30__metaclass = tmp_assign_source_329;
    }
    {
        bool tmp_condition_result_256;
        PyObject *tmp_key_value_117;
        PyObject *tmp_dict_arg_value_117;
        tmp_key_value_117 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
        tmp_dict_arg_value_117 = tmp_class_creation_30__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_117, tmp_key_value_117);
        assert(!(tmp_res == -1));
        tmp_condition_result_256 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_256 != false) {
            goto branch_yes_155;
        } else {
            goto branch_no_155;
        }
    }
    branch_yes_155:;
    CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_30__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2782;

        goto try_except_handler_115;
    }
    branch_no_155:;
    {
        nuitka_bool tmp_condition_result_257;
        PyObject *tmp_expression_value_206;
        CHECK_OBJECT(tmp_class_creation_30__metaclass);
        tmp_expression_value_206 = tmp_class_creation_30__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_206, mod_consts[411]);
        tmp_condition_result_257 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_257 == NUITKA_BOOL_TRUE) {
            goto branch_yes_156;
        } else {
            goto branch_no_156;
        }
    }
    branch_yes_156:;
    {
        PyObject *tmp_assign_source_330;
        PyObject *tmp_called_value_133;
        PyObject *tmp_expression_value_207;
        PyObject *tmp_args_value_77;
        PyObject *tmp_tuple_element_152;
        PyObject *tmp_kwargs_value_77;
        CHECK_OBJECT(tmp_class_creation_30__metaclass);
        tmp_expression_value_207 = tmp_class_creation_30__metaclass;
        tmp_called_value_133 = LOOKUP_ATTRIBUTE(tmp_expression_value_207, mod_consts[411]);
        if (tmp_called_value_133 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2782;

            goto try_except_handler_115;
        }
        tmp_tuple_element_152 = mod_consts[663];
        tmp_args_value_77 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_77, 0, tmp_tuple_element_152);
        CHECK_OBJECT(tmp_class_creation_30__bases);
        tmp_tuple_element_152 = tmp_class_creation_30__bases;
        PyTuple_SET_ITEM0(tmp_args_value_77, 1, tmp_tuple_element_152);
        CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
        tmp_kwargs_value_77 = tmp_class_creation_30__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2782;
        tmp_assign_source_330 = CALL_FUNCTION(tmp_called_value_133, tmp_args_value_77, tmp_kwargs_value_77);
        Py_DECREF(tmp_called_value_133);
        Py_DECREF(tmp_args_value_77);
        if (tmp_assign_source_330 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2782;

            goto try_except_handler_115;
        }
        assert(tmp_class_creation_30__prepared == NULL);
        tmp_class_creation_30__prepared = tmp_assign_source_330;
    }
    {
        bool tmp_condition_result_258;
        PyObject *tmp_operand_value_39;
        PyObject *tmp_expression_value_208;
        CHECK_OBJECT(tmp_class_creation_30__prepared);
        tmp_expression_value_208 = tmp_class_creation_30__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_208, mod_consts[413]);
        tmp_operand_value_39 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_39);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2782;

            goto try_except_handler_115;
        }
        tmp_condition_result_258 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_258 != false) {
            goto branch_yes_157;
        } else {
            goto branch_no_157;
        }
    }
    branch_yes_157:;
    {
        PyObject *tmp_raise_type_39;
        PyObject *tmp_raise_value_39;
        PyObject *tmp_left_value_39;
        PyObject *tmp_right_value_39;
        PyObject *tmp_tuple_element_153;
        PyObject *tmp_getattr_target_39;
        PyObject *tmp_getattr_attr_39;
        PyObject *tmp_getattr_default_39;
        tmp_raise_type_39 = PyExc_TypeError;
        tmp_left_value_39 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_30__metaclass);
        tmp_getattr_target_39 = tmp_class_creation_30__metaclass;
        tmp_getattr_attr_39 = mod_consts[190];
        tmp_getattr_default_39 = mod_consts[415];
        tmp_tuple_element_153 = BUILTIN_GETATTR(tmp_getattr_target_39, tmp_getattr_attr_39, tmp_getattr_default_39);
        if (tmp_tuple_element_153 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2782;

            goto try_except_handler_115;
        }
        tmp_right_value_39 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_209;
            PyObject *tmp_type_arg_78;
            PyTuple_SET_ITEM(tmp_right_value_39, 0, tmp_tuple_element_153);
            CHECK_OBJECT(tmp_class_creation_30__prepared);
            tmp_type_arg_78 = tmp_class_creation_30__prepared;
            tmp_expression_value_209 = BUILTIN_TYPE1(tmp_type_arg_78);
            assert(!(tmp_expression_value_209 == NULL));
            tmp_tuple_element_153 = LOOKUP_ATTRIBUTE(tmp_expression_value_209, mod_consts[190]);
            Py_DECREF(tmp_expression_value_209);
            if (tmp_tuple_element_153 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2782;

                goto tuple_build_exception_53;
            }
            PyTuple_SET_ITEM(tmp_right_value_39, 1, tmp_tuple_element_153);
        }
        goto tuple_build_noexception_53;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_53:;
        Py_DECREF(tmp_right_value_39);
        goto try_except_handler_115;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_53:;
        tmp_raise_value_39 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_39, tmp_right_value_39);
        Py_DECREF(tmp_right_value_39);
        if (tmp_raise_value_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2782;

            goto try_except_handler_115;
        }
        exception_type = tmp_raise_type_39;
        Py_INCREF(tmp_raise_type_39);
        exception_value = tmp_raise_value_39;
        exception_lineno = 2782;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_115;
    }
    branch_no_157:;
    goto branch_end_156;
    branch_no_156:;
    {
        PyObject *tmp_assign_source_331;
        tmp_assign_source_331 = PyDict_New();
        assert(tmp_class_creation_30__prepared == NULL);
        tmp_class_creation_30__prepared = tmp_assign_source_331;
    }
    branch_end_156:;
    {
        PyObject *tmp_assign_source_332;
        {
            PyObject *tmp_set_locals_39;
            CHECK_OBJECT(tmp_class_creation_30__prepared);
            tmp_set_locals_39 = tmp_class_creation_30__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__39_DECIMAL_2782 = tmp_set_locals_39;
            Py_INCREF(tmp_set_locals_39);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__39_DECIMAL_2782, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2782;

            goto try_except_handler_117;
        }
        tmp_dictset_value = mod_consts[664];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__39_DECIMAL_2782, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2782;

            goto try_except_handler_117;
        }
        tmp_dictset_value = mod_consts[663];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__39_DECIMAL_2782, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2782;

            goto try_except_handler_117;
        }
        if (isFrameUnusable(cache_frame_5858186fe4da6c516b126118950eae79_38)) {
            Py_XDECREF(cache_frame_5858186fe4da6c516b126118950eae79_38);

#if _DEBUG_REFCOUNTS
            if (cache_frame_5858186fe4da6c516b126118950eae79_38 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_5858186fe4da6c516b126118950eae79_38 = MAKE_FUNCTION_FRAME(codeobj_5858186fe4da6c516b126118950eae79, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_5858186fe4da6c516b126118950eae79_38->m_type_description == NULL);
        frame_5858186fe4da6c516b126118950eae79_38 = cache_frame_5858186fe4da6c516b126118950eae79_38;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_5858186fe4da6c516b126118950eae79_38);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_5858186fe4da6c516b126118950eae79_38) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[663];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__39_DECIMAL_2782, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2786;
            type_description_2 = "o";
            goto frame_exception_exit_38;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_5858186fe4da6c516b126118950eae79_38);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_37;

        frame_exception_exit_38:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_5858186fe4da6c516b126118950eae79_38);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_5858186fe4da6c516b126118950eae79_38, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_5858186fe4da6c516b126118950eae79_38->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_5858186fe4da6c516b126118950eae79_38, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_5858186fe4da6c516b126118950eae79_38,
            type_description_2,
            outline_38_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_5858186fe4da6c516b126118950eae79_38 == cache_frame_5858186fe4da6c516b126118950eae79_38) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_5858186fe4da6c516b126118950eae79_38);
            cache_frame_5858186fe4da6c516b126118950eae79_38 = NULL;
        }

        assertFrameObject(frame_5858186fe4da6c516b126118950eae79_38);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_37;

        frame_no_exception_37:;
        goto skip_nested_handling_37;
        nested_frame_exit_37:;

        goto try_except_handler_117;
        skip_nested_handling_37:;
        {
            nuitka_bool tmp_condition_result_259;
            PyObject *tmp_cmp_expr_left_39;
            PyObject *tmp_cmp_expr_right_39;
            CHECK_OBJECT(tmp_class_creation_30__bases);
            tmp_cmp_expr_left_39 = tmp_class_creation_30__bases;
            CHECK_OBJECT(tmp_class_creation_30__bases_orig);
            tmp_cmp_expr_right_39 = tmp_class_creation_30__bases_orig;
            tmp_condition_result_259 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_39, tmp_cmp_expr_right_39);
            if (tmp_condition_result_259 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2782;

                goto try_except_handler_117;
            }
            if (tmp_condition_result_259 == NUITKA_BOOL_TRUE) {
                goto branch_yes_158;
            } else {
                goto branch_no_158;
            }
            assert(tmp_condition_result_259 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_158:;
        CHECK_OBJECT(tmp_class_creation_30__bases_orig);
        tmp_dictset_value = tmp_class_creation_30__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__39_DECIMAL_2782, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2782;

            goto try_except_handler_117;
        }
        branch_no_158:;
        {
            PyObject *tmp_assign_source_333;
            PyObject *tmp_called_value_134;
            PyObject *tmp_args_value_78;
            PyObject *tmp_tuple_element_154;
            PyObject *tmp_kwargs_value_78;
            CHECK_OBJECT(tmp_class_creation_30__metaclass);
            tmp_called_value_134 = tmp_class_creation_30__metaclass;
            tmp_tuple_element_154 = mod_consts[663];
            tmp_args_value_78 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_78, 0, tmp_tuple_element_154);
            CHECK_OBJECT(tmp_class_creation_30__bases);
            tmp_tuple_element_154 = tmp_class_creation_30__bases;
            PyTuple_SET_ITEM0(tmp_args_value_78, 1, tmp_tuple_element_154);
            tmp_tuple_element_154 = locals_sqlalchemy$sql$sqltypes$$$class__39_DECIMAL_2782;
            PyTuple_SET_ITEM0(tmp_args_value_78, 2, tmp_tuple_element_154);
            CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
            tmp_kwargs_value_78 = tmp_class_creation_30__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2782;
            tmp_assign_source_333 = CALL_FUNCTION(tmp_called_value_134, tmp_args_value_78, tmp_kwargs_value_78);
            Py_DECREF(tmp_args_value_78);
            if (tmp_assign_source_333 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2782;

                goto try_except_handler_117;
            }
            assert(outline_38_var___class__ == NULL);
            outline_38_var___class__ = tmp_assign_source_333;
        }
        CHECK_OBJECT(outline_38_var___class__);
        tmp_assign_source_332 = outline_38_var___class__;
        Py_INCREF(tmp_assign_source_332);
        goto try_return_handler_117;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_117:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__39_DECIMAL_2782);
        locals_sqlalchemy$sql$sqltypes$$$class__39_DECIMAL_2782 = NULL;
        goto try_return_handler_116;
        // Exception handler code:
        try_except_handler_117:;
        exception_keeper_type_115 = exception_type;
        exception_keeper_value_115 = exception_value;
        exception_keeper_tb_115 = exception_tb;
        exception_keeper_lineno_115 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__39_DECIMAL_2782);
        locals_sqlalchemy$sql$sqltypes$$$class__39_DECIMAL_2782 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_115;
        exception_value = exception_keeper_value_115;
        exception_tb = exception_keeper_tb_115;
        exception_lineno = exception_keeper_lineno_115;

        goto try_except_handler_116;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_116:;
        CHECK_OBJECT(outline_38_var___class__);
        Py_DECREF(outline_38_var___class__);
        outline_38_var___class__ = NULL;
        goto outline_result_39;
        // Exception handler code:
        try_except_handler_116:;
        exception_keeper_type_116 = exception_type;
        exception_keeper_value_116 = exception_value;
        exception_keeper_tb_116 = exception_tb;
        exception_keeper_lineno_116 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_116;
        exception_value = exception_keeper_value_116;
        exception_tb = exception_keeper_tb_116;
        exception_lineno = exception_keeper_lineno_116;

        goto outline_exception_39;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_39:;
        exception_lineno = 2782;
        goto try_except_handler_115;
        outline_result_39:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[663], tmp_assign_source_332);
    }
    goto try_end_39;
    // Exception handler code:
    try_except_handler_115:;
    exception_keeper_type_117 = exception_type;
    exception_keeper_value_117 = exception_value;
    exception_keeper_tb_117 = exception_tb;
    exception_keeper_lineno_117 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_30__bases_orig);
    tmp_class_creation_30__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_30__bases);
    tmp_class_creation_30__bases = NULL;
    Py_XDECREF(tmp_class_creation_30__class_decl_dict);
    tmp_class_creation_30__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_30__metaclass);
    tmp_class_creation_30__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_30__prepared);
    tmp_class_creation_30__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_117;
    exception_value = exception_keeper_value_117;
    exception_tb = exception_keeper_tb_117;
    exception_lineno = exception_keeper_lineno_117;

    goto frame_exception_exit_1;
    // End of try:
    try_end_39:;
    CHECK_OBJECT(tmp_class_creation_30__bases_orig);
    Py_DECREF(tmp_class_creation_30__bases_orig);
    tmp_class_creation_30__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_30__bases);
    Py_DECREF(tmp_class_creation_30__bases);
    tmp_class_creation_30__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
    Py_DECREF(tmp_class_creation_30__class_decl_dict);
    tmp_class_creation_30__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_30__metaclass);
    Py_DECREF(tmp_class_creation_30__metaclass);
    tmp_class_creation_30__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_30__prepared);
    Py_DECREF(tmp_class_creation_30__prepared);
    tmp_class_creation_30__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_334;
        PyObject *tmp_tuple_element_155;
        tmp_tuple_element_155 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[73]);

        if (unlikely(tmp_tuple_element_155 == NULL)) {
            tmp_tuple_element_155 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
        }

        if (tmp_tuple_element_155 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2789;

            goto try_except_handler_118;
        }
        tmp_assign_source_334 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_334, 0, tmp_tuple_element_155);
        assert(tmp_class_creation_31__bases_orig == NULL);
        tmp_class_creation_31__bases_orig = tmp_assign_source_334;
    }
    {
        PyObject *tmp_assign_source_335;
        PyObject *tmp_dircall_arg1_40;
        CHECK_OBJECT(tmp_class_creation_31__bases_orig);
        tmp_dircall_arg1_40 = tmp_class_creation_31__bases_orig;
        Py_INCREF(tmp_dircall_arg1_40);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_40};
            tmp_assign_source_335 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_335 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2789;

            goto try_except_handler_118;
        }
        assert(tmp_class_creation_31__bases == NULL);
        tmp_class_creation_31__bases = tmp_assign_source_335;
    }
    {
        PyObject *tmp_assign_source_336;
        tmp_assign_source_336 = PyDict_New();
        assert(tmp_class_creation_31__class_decl_dict == NULL);
        tmp_class_creation_31__class_decl_dict = tmp_assign_source_336;
    }
    {
        PyObject *tmp_assign_source_337;
        PyObject *tmp_metaclass_value_40;
        bool tmp_condition_result_260;
        PyObject *tmp_key_value_118;
        PyObject *tmp_dict_arg_value_118;
        PyObject *tmp_dict_arg_value_119;
        PyObject *tmp_key_value_119;
        nuitka_bool tmp_condition_result_261;
        int tmp_truth_name_42;
        PyObject *tmp_type_arg_79;
        PyObject *tmp_expression_value_210;
        PyObject *tmp_subscript_value_40;
        PyObject *tmp_bases_value_40;
        tmp_key_value_118 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
        tmp_dict_arg_value_118 = tmp_class_creation_31__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_118, tmp_key_value_118);
        assert(!(tmp_res == -1));
        tmp_condition_result_260 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_260 != false) {
            goto condexpr_true_102;
        } else {
            goto condexpr_false_102;
        }
        condexpr_true_102:;
        CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
        tmp_dict_arg_value_119 = tmp_class_creation_31__class_decl_dict;
        tmp_key_value_119 = mod_consts[410];
        tmp_metaclass_value_40 = DICT_GET_ITEM0(tmp_dict_arg_value_119, tmp_key_value_119);
        if (tmp_metaclass_value_40 == NULL) {
            tmp_metaclass_value_40 = Py_None;
        }
        assert(!(tmp_metaclass_value_40 == NULL));
        Py_INCREF(tmp_metaclass_value_40);
        goto condexpr_end_102;
        condexpr_false_102:;
        CHECK_OBJECT(tmp_class_creation_31__bases);
        tmp_truth_name_42 = CHECK_IF_TRUE(tmp_class_creation_31__bases);
        if (tmp_truth_name_42 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2789;

            goto try_except_handler_118;
        }
        tmp_condition_result_261 = tmp_truth_name_42 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_261 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_103;
        } else {
            goto condexpr_false_103;
        }
        condexpr_true_103:;
        CHECK_OBJECT(tmp_class_creation_31__bases);
        tmp_expression_value_210 = tmp_class_creation_31__bases;
        tmp_subscript_value_40 = mod_consts[52];
        tmp_type_arg_79 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_210, tmp_subscript_value_40, 0);
        if (tmp_type_arg_79 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2789;

            goto try_except_handler_118;
        }
        tmp_metaclass_value_40 = BUILTIN_TYPE1(tmp_type_arg_79);
        Py_DECREF(tmp_type_arg_79);
        if (tmp_metaclass_value_40 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2789;

            goto try_except_handler_118;
        }
        goto condexpr_end_103;
        condexpr_false_103:;
        tmp_metaclass_value_40 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_40);
        condexpr_end_103:;
        condexpr_end_102:;
        CHECK_OBJECT(tmp_class_creation_31__bases);
        tmp_bases_value_40 = tmp_class_creation_31__bases;
        tmp_assign_source_337 = SELECT_METACLASS(tmp_metaclass_value_40, tmp_bases_value_40);
        Py_DECREF(tmp_metaclass_value_40);
        if (tmp_assign_source_337 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2789;

            goto try_except_handler_118;
        }
        assert(tmp_class_creation_31__metaclass == NULL);
        tmp_class_creation_31__metaclass = tmp_assign_source_337;
    }
    {
        bool tmp_condition_result_262;
        PyObject *tmp_key_value_120;
        PyObject *tmp_dict_arg_value_120;
        tmp_key_value_120 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
        tmp_dict_arg_value_120 = tmp_class_creation_31__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_120, tmp_key_value_120);
        assert(!(tmp_res == -1));
        tmp_condition_result_262 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_262 != false) {
            goto branch_yes_159;
        } else {
            goto branch_no_159;
        }
    }
    branch_yes_159:;
    CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_31__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2789;

        goto try_except_handler_118;
    }
    branch_no_159:;
    {
        nuitka_bool tmp_condition_result_263;
        PyObject *tmp_expression_value_211;
        CHECK_OBJECT(tmp_class_creation_31__metaclass);
        tmp_expression_value_211 = tmp_class_creation_31__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_211, mod_consts[411]);
        tmp_condition_result_263 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_263 == NUITKA_BOOL_TRUE) {
            goto branch_yes_160;
        } else {
            goto branch_no_160;
        }
    }
    branch_yes_160:;
    {
        PyObject *tmp_assign_source_338;
        PyObject *tmp_called_value_135;
        PyObject *tmp_expression_value_212;
        PyObject *tmp_args_value_79;
        PyObject *tmp_tuple_element_156;
        PyObject *tmp_kwargs_value_79;
        CHECK_OBJECT(tmp_class_creation_31__metaclass);
        tmp_expression_value_212 = tmp_class_creation_31__metaclass;
        tmp_called_value_135 = LOOKUP_ATTRIBUTE(tmp_expression_value_212, mod_consts[411]);
        if (tmp_called_value_135 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2789;

            goto try_except_handler_118;
        }
        tmp_tuple_element_156 = mod_consts[665];
        tmp_args_value_79 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_79, 0, tmp_tuple_element_156);
        CHECK_OBJECT(tmp_class_creation_31__bases);
        tmp_tuple_element_156 = tmp_class_creation_31__bases;
        PyTuple_SET_ITEM0(tmp_args_value_79, 1, tmp_tuple_element_156);
        CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
        tmp_kwargs_value_79 = tmp_class_creation_31__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2789;
        tmp_assign_source_338 = CALL_FUNCTION(tmp_called_value_135, tmp_args_value_79, tmp_kwargs_value_79);
        Py_DECREF(tmp_called_value_135);
        Py_DECREF(tmp_args_value_79);
        if (tmp_assign_source_338 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2789;

            goto try_except_handler_118;
        }
        assert(tmp_class_creation_31__prepared == NULL);
        tmp_class_creation_31__prepared = tmp_assign_source_338;
    }
    {
        bool tmp_condition_result_264;
        PyObject *tmp_operand_value_40;
        PyObject *tmp_expression_value_213;
        CHECK_OBJECT(tmp_class_creation_31__prepared);
        tmp_expression_value_213 = tmp_class_creation_31__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_213, mod_consts[413]);
        tmp_operand_value_40 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_40);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2789;

            goto try_except_handler_118;
        }
        tmp_condition_result_264 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_264 != false) {
            goto branch_yes_161;
        } else {
            goto branch_no_161;
        }
    }
    branch_yes_161:;
    {
        PyObject *tmp_raise_type_40;
        PyObject *tmp_raise_value_40;
        PyObject *tmp_left_value_40;
        PyObject *tmp_right_value_40;
        PyObject *tmp_tuple_element_157;
        PyObject *tmp_getattr_target_40;
        PyObject *tmp_getattr_attr_40;
        PyObject *tmp_getattr_default_40;
        tmp_raise_type_40 = PyExc_TypeError;
        tmp_left_value_40 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_31__metaclass);
        tmp_getattr_target_40 = tmp_class_creation_31__metaclass;
        tmp_getattr_attr_40 = mod_consts[190];
        tmp_getattr_default_40 = mod_consts[415];
        tmp_tuple_element_157 = BUILTIN_GETATTR(tmp_getattr_target_40, tmp_getattr_attr_40, tmp_getattr_default_40);
        if (tmp_tuple_element_157 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2789;

            goto try_except_handler_118;
        }
        tmp_right_value_40 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_214;
            PyObject *tmp_type_arg_80;
            PyTuple_SET_ITEM(tmp_right_value_40, 0, tmp_tuple_element_157);
            CHECK_OBJECT(tmp_class_creation_31__prepared);
            tmp_type_arg_80 = tmp_class_creation_31__prepared;
            tmp_expression_value_214 = BUILTIN_TYPE1(tmp_type_arg_80);
            assert(!(tmp_expression_value_214 == NULL));
            tmp_tuple_element_157 = LOOKUP_ATTRIBUTE(tmp_expression_value_214, mod_consts[190]);
            Py_DECREF(tmp_expression_value_214);
            if (tmp_tuple_element_157 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2789;

                goto tuple_build_exception_54;
            }
            PyTuple_SET_ITEM(tmp_right_value_40, 1, tmp_tuple_element_157);
        }
        goto tuple_build_noexception_54;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_54:;
        Py_DECREF(tmp_right_value_40);
        goto try_except_handler_118;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_54:;
        tmp_raise_value_40 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_40, tmp_right_value_40);
        Py_DECREF(tmp_right_value_40);
        if (tmp_raise_value_40 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2789;

            goto try_except_handler_118;
        }
        exception_type = tmp_raise_type_40;
        Py_INCREF(tmp_raise_type_40);
        exception_value = tmp_raise_value_40;
        exception_lineno = 2789;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_118;
    }
    branch_no_161:;
    goto branch_end_160;
    branch_no_160:;
    {
        PyObject *tmp_assign_source_339;
        tmp_assign_source_339 = PyDict_New();
        assert(tmp_class_creation_31__prepared == NULL);
        tmp_class_creation_31__prepared = tmp_assign_source_339;
    }
    branch_end_160:;
    {
        PyObject *tmp_assign_source_340;
        {
            PyObject *tmp_set_locals_40;
            CHECK_OBJECT(tmp_class_creation_31__prepared);
            tmp_set_locals_40 = tmp_class_creation_31__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__40_INTEGER_2789 = tmp_set_locals_40;
            Py_INCREF(tmp_set_locals_40);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__40_INTEGER_2789, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2789;

            goto try_except_handler_120;
        }
        tmp_dictset_value = mod_consts[666];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__40_INTEGER_2789, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2789;

            goto try_except_handler_120;
        }
        tmp_dictset_value = mod_consts[665];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__40_INTEGER_2789, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2789;

            goto try_except_handler_120;
        }
        if (isFrameUnusable(cache_frame_6af9a04e749f91af9f73eb6ffafb083e_39)) {
            Py_XDECREF(cache_frame_6af9a04e749f91af9f73eb6ffafb083e_39);

#if _DEBUG_REFCOUNTS
            if (cache_frame_6af9a04e749f91af9f73eb6ffafb083e_39 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_6af9a04e749f91af9f73eb6ffafb083e_39 = MAKE_FUNCTION_FRAME(codeobj_6af9a04e749f91af9f73eb6ffafb083e, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_6af9a04e749f91af9f73eb6ffafb083e_39->m_type_description == NULL);
        frame_6af9a04e749f91af9f73eb6ffafb083e_39 = cache_frame_6af9a04e749f91af9f73eb6ffafb083e_39;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_6af9a04e749f91af9f73eb6ffafb083e_39);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_6af9a04e749f91af9f73eb6ffafb083e_39) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[665];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__40_INTEGER_2789, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2793;
            type_description_2 = "o";
            goto frame_exception_exit_39;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_6af9a04e749f91af9f73eb6ffafb083e_39);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_38;

        frame_exception_exit_39:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_6af9a04e749f91af9f73eb6ffafb083e_39);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_6af9a04e749f91af9f73eb6ffafb083e_39, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_6af9a04e749f91af9f73eb6ffafb083e_39->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_6af9a04e749f91af9f73eb6ffafb083e_39, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_6af9a04e749f91af9f73eb6ffafb083e_39,
            type_description_2,
            outline_39_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_6af9a04e749f91af9f73eb6ffafb083e_39 == cache_frame_6af9a04e749f91af9f73eb6ffafb083e_39) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_6af9a04e749f91af9f73eb6ffafb083e_39);
            cache_frame_6af9a04e749f91af9f73eb6ffafb083e_39 = NULL;
        }

        assertFrameObject(frame_6af9a04e749f91af9f73eb6ffafb083e_39);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_38;

        frame_no_exception_38:;
        goto skip_nested_handling_38;
        nested_frame_exit_38:;

        goto try_except_handler_120;
        skip_nested_handling_38:;
        {
            nuitka_bool tmp_condition_result_265;
            PyObject *tmp_cmp_expr_left_40;
            PyObject *tmp_cmp_expr_right_40;
            CHECK_OBJECT(tmp_class_creation_31__bases);
            tmp_cmp_expr_left_40 = tmp_class_creation_31__bases;
            CHECK_OBJECT(tmp_class_creation_31__bases_orig);
            tmp_cmp_expr_right_40 = tmp_class_creation_31__bases_orig;
            tmp_condition_result_265 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_40, tmp_cmp_expr_right_40);
            if (tmp_condition_result_265 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2789;

                goto try_except_handler_120;
            }
            if (tmp_condition_result_265 == NUITKA_BOOL_TRUE) {
                goto branch_yes_162;
            } else {
                goto branch_no_162;
            }
            assert(tmp_condition_result_265 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_162:;
        CHECK_OBJECT(tmp_class_creation_31__bases_orig);
        tmp_dictset_value = tmp_class_creation_31__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__40_INTEGER_2789, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2789;

            goto try_except_handler_120;
        }
        branch_no_162:;
        {
            PyObject *tmp_assign_source_341;
            PyObject *tmp_called_value_136;
            PyObject *tmp_args_value_80;
            PyObject *tmp_tuple_element_158;
            PyObject *tmp_kwargs_value_80;
            CHECK_OBJECT(tmp_class_creation_31__metaclass);
            tmp_called_value_136 = tmp_class_creation_31__metaclass;
            tmp_tuple_element_158 = mod_consts[665];
            tmp_args_value_80 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_80, 0, tmp_tuple_element_158);
            CHECK_OBJECT(tmp_class_creation_31__bases);
            tmp_tuple_element_158 = tmp_class_creation_31__bases;
            PyTuple_SET_ITEM0(tmp_args_value_80, 1, tmp_tuple_element_158);
            tmp_tuple_element_158 = locals_sqlalchemy$sql$sqltypes$$$class__40_INTEGER_2789;
            PyTuple_SET_ITEM0(tmp_args_value_80, 2, tmp_tuple_element_158);
            CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
            tmp_kwargs_value_80 = tmp_class_creation_31__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2789;
            tmp_assign_source_341 = CALL_FUNCTION(tmp_called_value_136, tmp_args_value_80, tmp_kwargs_value_80);
            Py_DECREF(tmp_args_value_80);
            if (tmp_assign_source_341 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2789;

                goto try_except_handler_120;
            }
            assert(outline_39_var___class__ == NULL);
            outline_39_var___class__ = tmp_assign_source_341;
        }
        CHECK_OBJECT(outline_39_var___class__);
        tmp_assign_source_340 = outline_39_var___class__;
        Py_INCREF(tmp_assign_source_340);
        goto try_return_handler_120;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_120:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__40_INTEGER_2789);
        locals_sqlalchemy$sql$sqltypes$$$class__40_INTEGER_2789 = NULL;
        goto try_return_handler_119;
        // Exception handler code:
        try_except_handler_120:;
        exception_keeper_type_118 = exception_type;
        exception_keeper_value_118 = exception_value;
        exception_keeper_tb_118 = exception_tb;
        exception_keeper_lineno_118 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__40_INTEGER_2789);
        locals_sqlalchemy$sql$sqltypes$$$class__40_INTEGER_2789 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_118;
        exception_value = exception_keeper_value_118;
        exception_tb = exception_keeper_tb_118;
        exception_lineno = exception_keeper_lineno_118;

        goto try_except_handler_119;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_119:;
        CHECK_OBJECT(outline_39_var___class__);
        Py_DECREF(outline_39_var___class__);
        outline_39_var___class__ = NULL;
        goto outline_result_40;
        // Exception handler code:
        try_except_handler_119:;
        exception_keeper_type_119 = exception_type;
        exception_keeper_value_119 = exception_value;
        exception_keeper_tb_119 = exception_tb;
        exception_keeper_lineno_119 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_119;
        exception_value = exception_keeper_value_119;
        exception_tb = exception_keeper_tb_119;
        exception_lineno = exception_keeper_lineno_119;

        goto outline_exception_40;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_40:;
        exception_lineno = 2789;
        goto try_except_handler_118;
        outline_result_40:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[665], tmp_assign_source_340);
    }
    goto try_end_40;
    // Exception handler code:
    try_except_handler_118:;
    exception_keeper_type_120 = exception_type;
    exception_keeper_value_120 = exception_value;
    exception_keeper_tb_120 = exception_tb;
    exception_keeper_lineno_120 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_31__bases_orig);
    tmp_class_creation_31__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_31__bases);
    tmp_class_creation_31__bases = NULL;
    Py_XDECREF(tmp_class_creation_31__class_decl_dict);
    tmp_class_creation_31__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_31__metaclass);
    tmp_class_creation_31__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_31__prepared);
    tmp_class_creation_31__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_120;
    exception_value = exception_keeper_value_120;
    exception_tb = exception_keeper_tb_120;
    exception_lineno = exception_keeper_lineno_120;

    goto frame_exception_exit_1;
    // End of try:
    try_end_40:;
    CHECK_OBJECT(tmp_class_creation_31__bases_orig);
    Py_DECREF(tmp_class_creation_31__bases_orig);
    tmp_class_creation_31__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_31__bases);
    Py_DECREF(tmp_class_creation_31__bases);
    tmp_class_creation_31__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
    Py_DECREF(tmp_class_creation_31__class_decl_dict);
    tmp_class_creation_31__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_31__metaclass);
    Py_DECREF(tmp_class_creation_31__metaclass);
    tmp_class_creation_31__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_31__prepared);
    Py_DECREF(tmp_class_creation_31__prepared);
    tmp_class_creation_31__prepared = NULL;
    {
        PyObject *tmp_assign_source_342;
        tmp_assign_source_342 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[665]);

        if (unlikely(tmp_assign_source_342 == NULL)) {
            tmp_assign_source_342 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[665]);
        }

        if (tmp_assign_source_342 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2796;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT0(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[667], tmp_assign_source_342);
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_343;
        PyObject *tmp_tuple_element_159;
        tmp_tuple_element_159 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[469]);

        if (unlikely(tmp_tuple_element_159 == NULL)) {
            tmp_tuple_element_159 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[469]);
        }

        if (tmp_tuple_element_159 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2799;

            goto try_except_handler_121;
        }
        tmp_assign_source_343 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_343, 0, tmp_tuple_element_159);
        assert(tmp_class_creation_32__bases_orig == NULL);
        tmp_class_creation_32__bases_orig = tmp_assign_source_343;
    }
    {
        PyObject *tmp_assign_source_344;
        PyObject *tmp_dircall_arg1_41;
        CHECK_OBJECT(tmp_class_creation_32__bases_orig);
        tmp_dircall_arg1_41 = tmp_class_creation_32__bases_orig;
        Py_INCREF(tmp_dircall_arg1_41);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_41};
            tmp_assign_source_344 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_344 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2799;

            goto try_except_handler_121;
        }
        assert(tmp_class_creation_32__bases == NULL);
        tmp_class_creation_32__bases = tmp_assign_source_344;
    }
    {
        PyObject *tmp_assign_source_345;
        tmp_assign_source_345 = PyDict_New();
        assert(tmp_class_creation_32__class_decl_dict == NULL);
        tmp_class_creation_32__class_decl_dict = tmp_assign_source_345;
    }
    {
        PyObject *tmp_assign_source_346;
        PyObject *tmp_metaclass_value_41;
        bool tmp_condition_result_266;
        PyObject *tmp_key_value_121;
        PyObject *tmp_dict_arg_value_121;
        PyObject *tmp_dict_arg_value_122;
        PyObject *tmp_key_value_122;
        nuitka_bool tmp_condition_result_267;
        int tmp_truth_name_43;
        PyObject *tmp_type_arg_81;
        PyObject *tmp_expression_value_215;
        PyObject *tmp_subscript_value_41;
        PyObject *tmp_bases_value_41;
        tmp_key_value_121 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
        tmp_dict_arg_value_121 = tmp_class_creation_32__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_121, tmp_key_value_121);
        assert(!(tmp_res == -1));
        tmp_condition_result_266 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_266 != false) {
            goto condexpr_true_104;
        } else {
            goto condexpr_false_104;
        }
        condexpr_true_104:;
        CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
        tmp_dict_arg_value_122 = tmp_class_creation_32__class_decl_dict;
        tmp_key_value_122 = mod_consts[410];
        tmp_metaclass_value_41 = DICT_GET_ITEM0(tmp_dict_arg_value_122, tmp_key_value_122);
        if (tmp_metaclass_value_41 == NULL) {
            tmp_metaclass_value_41 = Py_None;
        }
        assert(!(tmp_metaclass_value_41 == NULL));
        Py_INCREF(tmp_metaclass_value_41);
        goto condexpr_end_104;
        condexpr_false_104:;
        CHECK_OBJECT(tmp_class_creation_32__bases);
        tmp_truth_name_43 = CHECK_IF_TRUE(tmp_class_creation_32__bases);
        if (tmp_truth_name_43 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2799;

            goto try_except_handler_121;
        }
        tmp_condition_result_267 = tmp_truth_name_43 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_267 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_105;
        } else {
            goto condexpr_false_105;
        }
        condexpr_true_105:;
        CHECK_OBJECT(tmp_class_creation_32__bases);
        tmp_expression_value_215 = tmp_class_creation_32__bases;
        tmp_subscript_value_41 = mod_consts[52];
        tmp_type_arg_81 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_215, tmp_subscript_value_41, 0);
        if (tmp_type_arg_81 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2799;

            goto try_except_handler_121;
        }
        tmp_metaclass_value_41 = BUILTIN_TYPE1(tmp_type_arg_81);
        Py_DECREF(tmp_type_arg_81);
        if (tmp_metaclass_value_41 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2799;

            goto try_except_handler_121;
        }
        goto condexpr_end_105;
        condexpr_false_105:;
        tmp_metaclass_value_41 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_41);
        condexpr_end_105:;
        condexpr_end_104:;
        CHECK_OBJECT(tmp_class_creation_32__bases);
        tmp_bases_value_41 = tmp_class_creation_32__bases;
        tmp_assign_source_346 = SELECT_METACLASS(tmp_metaclass_value_41, tmp_bases_value_41);
        Py_DECREF(tmp_metaclass_value_41);
        if (tmp_assign_source_346 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2799;

            goto try_except_handler_121;
        }
        assert(tmp_class_creation_32__metaclass == NULL);
        tmp_class_creation_32__metaclass = tmp_assign_source_346;
    }
    {
        bool tmp_condition_result_268;
        PyObject *tmp_key_value_123;
        PyObject *tmp_dict_arg_value_123;
        tmp_key_value_123 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
        tmp_dict_arg_value_123 = tmp_class_creation_32__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_123, tmp_key_value_123);
        assert(!(tmp_res == -1));
        tmp_condition_result_268 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_268 != false) {
            goto branch_yes_163;
        } else {
            goto branch_no_163;
        }
    }
    branch_yes_163:;
    CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_32__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2799;

        goto try_except_handler_121;
    }
    branch_no_163:;
    {
        nuitka_bool tmp_condition_result_269;
        PyObject *tmp_expression_value_216;
        CHECK_OBJECT(tmp_class_creation_32__metaclass);
        tmp_expression_value_216 = tmp_class_creation_32__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_216, mod_consts[411]);
        tmp_condition_result_269 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_269 == NUITKA_BOOL_TRUE) {
            goto branch_yes_164;
        } else {
            goto branch_no_164;
        }
    }
    branch_yes_164:;
    {
        PyObject *tmp_assign_source_347;
        PyObject *tmp_called_value_137;
        PyObject *tmp_expression_value_217;
        PyObject *tmp_args_value_81;
        PyObject *tmp_tuple_element_160;
        PyObject *tmp_kwargs_value_81;
        CHECK_OBJECT(tmp_class_creation_32__metaclass);
        tmp_expression_value_217 = tmp_class_creation_32__metaclass;
        tmp_called_value_137 = LOOKUP_ATTRIBUTE(tmp_expression_value_217, mod_consts[411]);
        if (tmp_called_value_137 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2799;

            goto try_except_handler_121;
        }
        tmp_tuple_element_160 = mod_consts[668];
        tmp_args_value_81 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_81, 0, tmp_tuple_element_160);
        CHECK_OBJECT(tmp_class_creation_32__bases);
        tmp_tuple_element_160 = tmp_class_creation_32__bases;
        PyTuple_SET_ITEM0(tmp_args_value_81, 1, tmp_tuple_element_160);
        CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
        tmp_kwargs_value_81 = tmp_class_creation_32__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2799;
        tmp_assign_source_347 = CALL_FUNCTION(tmp_called_value_137, tmp_args_value_81, tmp_kwargs_value_81);
        Py_DECREF(tmp_called_value_137);
        Py_DECREF(tmp_args_value_81);
        if (tmp_assign_source_347 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2799;

            goto try_except_handler_121;
        }
        assert(tmp_class_creation_32__prepared == NULL);
        tmp_class_creation_32__prepared = tmp_assign_source_347;
    }
    {
        bool tmp_condition_result_270;
        PyObject *tmp_operand_value_41;
        PyObject *tmp_expression_value_218;
        CHECK_OBJECT(tmp_class_creation_32__prepared);
        tmp_expression_value_218 = tmp_class_creation_32__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_218, mod_consts[413]);
        tmp_operand_value_41 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_41);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2799;

            goto try_except_handler_121;
        }
        tmp_condition_result_270 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_270 != false) {
            goto branch_yes_165;
        } else {
            goto branch_no_165;
        }
    }
    branch_yes_165:;
    {
        PyObject *tmp_raise_type_41;
        PyObject *tmp_raise_value_41;
        PyObject *tmp_left_value_41;
        PyObject *tmp_right_value_41;
        PyObject *tmp_tuple_element_161;
        PyObject *tmp_getattr_target_41;
        PyObject *tmp_getattr_attr_41;
        PyObject *tmp_getattr_default_41;
        tmp_raise_type_41 = PyExc_TypeError;
        tmp_left_value_41 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_32__metaclass);
        tmp_getattr_target_41 = tmp_class_creation_32__metaclass;
        tmp_getattr_attr_41 = mod_consts[190];
        tmp_getattr_default_41 = mod_consts[415];
        tmp_tuple_element_161 = BUILTIN_GETATTR(tmp_getattr_target_41, tmp_getattr_attr_41, tmp_getattr_default_41);
        if (tmp_tuple_element_161 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2799;

            goto try_except_handler_121;
        }
        tmp_right_value_41 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_219;
            PyObject *tmp_type_arg_82;
            PyTuple_SET_ITEM(tmp_right_value_41, 0, tmp_tuple_element_161);
            CHECK_OBJECT(tmp_class_creation_32__prepared);
            tmp_type_arg_82 = tmp_class_creation_32__prepared;
            tmp_expression_value_219 = BUILTIN_TYPE1(tmp_type_arg_82);
            assert(!(tmp_expression_value_219 == NULL));
            tmp_tuple_element_161 = LOOKUP_ATTRIBUTE(tmp_expression_value_219, mod_consts[190]);
            Py_DECREF(tmp_expression_value_219);
            if (tmp_tuple_element_161 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2799;

                goto tuple_build_exception_55;
            }
            PyTuple_SET_ITEM(tmp_right_value_41, 1, tmp_tuple_element_161);
        }
        goto tuple_build_noexception_55;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_55:;
        Py_DECREF(tmp_right_value_41);
        goto try_except_handler_121;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_55:;
        tmp_raise_value_41 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_41, tmp_right_value_41);
        Py_DECREF(tmp_right_value_41);
        if (tmp_raise_value_41 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2799;

            goto try_except_handler_121;
        }
        exception_type = tmp_raise_type_41;
        Py_INCREF(tmp_raise_type_41);
        exception_value = tmp_raise_value_41;
        exception_lineno = 2799;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_121;
    }
    branch_no_165:;
    goto branch_end_164;
    branch_no_164:;
    {
        PyObject *tmp_assign_source_348;
        tmp_assign_source_348 = PyDict_New();
        assert(tmp_class_creation_32__prepared == NULL);
        tmp_class_creation_32__prepared = tmp_assign_source_348;
    }
    branch_end_164:;
    {
        PyObject *tmp_assign_source_349;
        {
            PyObject *tmp_set_locals_41;
            CHECK_OBJECT(tmp_class_creation_32__prepared);
            tmp_set_locals_41 = tmp_class_creation_32__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__41_SMALLINT_2799 = tmp_set_locals_41;
            Py_INCREF(tmp_set_locals_41);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__41_SMALLINT_2799, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2799;

            goto try_except_handler_123;
        }
        tmp_dictset_value = mod_consts[669];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__41_SMALLINT_2799, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2799;

            goto try_except_handler_123;
        }
        tmp_dictset_value = mod_consts[668];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__41_SMALLINT_2799, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2799;

            goto try_except_handler_123;
        }
        if (isFrameUnusable(cache_frame_079584d29ba204c8c42e5632d36367e0_40)) {
            Py_XDECREF(cache_frame_079584d29ba204c8c42e5632d36367e0_40);

#if _DEBUG_REFCOUNTS
            if (cache_frame_079584d29ba204c8c42e5632d36367e0_40 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_079584d29ba204c8c42e5632d36367e0_40 = MAKE_FUNCTION_FRAME(codeobj_079584d29ba204c8c42e5632d36367e0, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_079584d29ba204c8c42e5632d36367e0_40->m_type_description == NULL);
        frame_079584d29ba204c8c42e5632d36367e0_40 = cache_frame_079584d29ba204c8c42e5632d36367e0_40;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_079584d29ba204c8c42e5632d36367e0_40);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_079584d29ba204c8c42e5632d36367e0_40) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[668];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__41_SMALLINT_2799, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2803;
            type_description_2 = "o";
            goto frame_exception_exit_40;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_079584d29ba204c8c42e5632d36367e0_40);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_39;

        frame_exception_exit_40:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_079584d29ba204c8c42e5632d36367e0_40);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_079584d29ba204c8c42e5632d36367e0_40, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_079584d29ba204c8c42e5632d36367e0_40->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_079584d29ba204c8c42e5632d36367e0_40, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_079584d29ba204c8c42e5632d36367e0_40,
            type_description_2,
            outline_40_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_079584d29ba204c8c42e5632d36367e0_40 == cache_frame_079584d29ba204c8c42e5632d36367e0_40) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_079584d29ba204c8c42e5632d36367e0_40);
            cache_frame_079584d29ba204c8c42e5632d36367e0_40 = NULL;
        }

        assertFrameObject(frame_079584d29ba204c8c42e5632d36367e0_40);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_39;

        frame_no_exception_39:;
        goto skip_nested_handling_39;
        nested_frame_exit_39:;

        goto try_except_handler_123;
        skip_nested_handling_39:;
        {
            nuitka_bool tmp_condition_result_271;
            PyObject *tmp_cmp_expr_left_41;
            PyObject *tmp_cmp_expr_right_41;
            CHECK_OBJECT(tmp_class_creation_32__bases);
            tmp_cmp_expr_left_41 = tmp_class_creation_32__bases;
            CHECK_OBJECT(tmp_class_creation_32__bases_orig);
            tmp_cmp_expr_right_41 = tmp_class_creation_32__bases_orig;
            tmp_condition_result_271 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_41, tmp_cmp_expr_right_41);
            if (tmp_condition_result_271 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2799;

                goto try_except_handler_123;
            }
            if (tmp_condition_result_271 == NUITKA_BOOL_TRUE) {
                goto branch_yes_166;
            } else {
                goto branch_no_166;
            }
            assert(tmp_condition_result_271 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_166:;
        CHECK_OBJECT(tmp_class_creation_32__bases_orig);
        tmp_dictset_value = tmp_class_creation_32__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__41_SMALLINT_2799, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2799;

            goto try_except_handler_123;
        }
        branch_no_166:;
        {
            PyObject *tmp_assign_source_350;
            PyObject *tmp_called_value_138;
            PyObject *tmp_args_value_82;
            PyObject *tmp_tuple_element_162;
            PyObject *tmp_kwargs_value_82;
            CHECK_OBJECT(tmp_class_creation_32__metaclass);
            tmp_called_value_138 = tmp_class_creation_32__metaclass;
            tmp_tuple_element_162 = mod_consts[668];
            tmp_args_value_82 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_82, 0, tmp_tuple_element_162);
            CHECK_OBJECT(tmp_class_creation_32__bases);
            tmp_tuple_element_162 = tmp_class_creation_32__bases;
            PyTuple_SET_ITEM0(tmp_args_value_82, 1, tmp_tuple_element_162);
            tmp_tuple_element_162 = locals_sqlalchemy$sql$sqltypes$$$class__41_SMALLINT_2799;
            PyTuple_SET_ITEM0(tmp_args_value_82, 2, tmp_tuple_element_162);
            CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
            tmp_kwargs_value_82 = tmp_class_creation_32__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2799;
            tmp_assign_source_350 = CALL_FUNCTION(tmp_called_value_138, tmp_args_value_82, tmp_kwargs_value_82);
            Py_DECREF(tmp_args_value_82);
            if (tmp_assign_source_350 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2799;

                goto try_except_handler_123;
            }
            assert(outline_40_var___class__ == NULL);
            outline_40_var___class__ = tmp_assign_source_350;
        }
        CHECK_OBJECT(outline_40_var___class__);
        tmp_assign_source_349 = outline_40_var___class__;
        Py_INCREF(tmp_assign_source_349);
        goto try_return_handler_123;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_123:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__41_SMALLINT_2799);
        locals_sqlalchemy$sql$sqltypes$$$class__41_SMALLINT_2799 = NULL;
        goto try_return_handler_122;
        // Exception handler code:
        try_except_handler_123:;
        exception_keeper_type_121 = exception_type;
        exception_keeper_value_121 = exception_value;
        exception_keeper_tb_121 = exception_tb;
        exception_keeper_lineno_121 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__41_SMALLINT_2799);
        locals_sqlalchemy$sql$sqltypes$$$class__41_SMALLINT_2799 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_121;
        exception_value = exception_keeper_value_121;
        exception_tb = exception_keeper_tb_121;
        exception_lineno = exception_keeper_lineno_121;

        goto try_except_handler_122;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_122:;
        CHECK_OBJECT(outline_40_var___class__);
        Py_DECREF(outline_40_var___class__);
        outline_40_var___class__ = NULL;
        goto outline_result_41;
        // Exception handler code:
        try_except_handler_122:;
        exception_keeper_type_122 = exception_type;
        exception_keeper_value_122 = exception_value;
        exception_keeper_tb_122 = exception_tb;
        exception_keeper_lineno_122 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_122;
        exception_value = exception_keeper_value_122;
        exception_tb = exception_keeper_tb_122;
        exception_lineno = exception_keeper_lineno_122;

        goto outline_exception_41;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_41:;
        exception_lineno = 2799;
        goto try_except_handler_121;
        outline_result_41:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[668], tmp_assign_source_349);
    }
    goto try_end_41;
    // Exception handler code:
    try_except_handler_121:;
    exception_keeper_type_123 = exception_type;
    exception_keeper_value_123 = exception_value;
    exception_keeper_tb_123 = exception_tb;
    exception_keeper_lineno_123 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_32__bases_orig);
    tmp_class_creation_32__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_32__bases);
    tmp_class_creation_32__bases = NULL;
    Py_XDECREF(tmp_class_creation_32__class_decl_dict);
    tmp_class_creation_32__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_32__metaclass);
    tmp_class_creation_32__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_32__prepared);
    tmp_class_creation_32__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_123;
    exception_value = exception_keeper_value_123;
    exception_tb = exception_keeper_tb_123;
    exception_lineno = exception_keeper_lineno_123;

    goto frame_exception_exit_1;
    // End of try:
    try_end_41:;
    CHECK_OBJECT(tmp_class_creation_32__bases_orig);
    Py_DECREF(tmp_class_creation_32__bases_orig);
    tmp_class_creation_32__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_32__bases);
    Py_DECREF(tmp_class_creation_32__bases);
    tmp_class_creation_32__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
    Py_DECREF(tmp_class_creation_32__class_decl_dict);
    tmp_class_creation_32__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_32__metaclass);
    Py_DECREF(tmp_class_creation_32__metaclass);
    tmp_class_creation_32__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_32__prepared);
    Py_DECREF(tmp_class_creation_32__prepared);
    tmp_class_creation_32__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_351;
        PyObject *tmp_tuple_element_163;
        tmp_tuple_element_163 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[472]);

        if (unlikely(tmp_tuple_element_163 == NULL)) {
            tmp_tuple_element_163 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[472]);
        }

        if (tmp_tuple_element_163 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2806;

            goto try_except_handler_124;
        }
        tmp_assign_source_351 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_351, 0, tmp_tuple_element_163);
        assert(tmp_class_creation_33__bases_orig == NULL);
        tmp_class_creation_33__bases_orig = tmp_assign_source_351;
    }
    {
        PyObject *tmp_assign_source_352;
        PyObject *tmp_dircall_arg1_42;
        CHECK_OBJECT(tmp_class_creation_33__bases_orig);
        tmp_dircall_arg1_42 = tmp_class_creation_33__bases_orig;
        Py_INCREF(tmp_dircall_arg1_42);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_42};
            tmp_assign_source_352 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_352 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2806;

            goto try_except_handler_124;
        }
        assert(tmp_class_creation_33__bases == NULL);
        tmp_class_creation_33__bases = tmp_assign_source_352;
    }
    {
        PyObject *tmp_assign_source_353;
        tmp_assign_source_353 = PyDict_New();
        assert(tmp_class_creation_33__class_decl_dict == NULL);
        tmp_class_creation_33__class_decl_dict = tmp_assign_source_353;
    }
    {
        PyObject *tmp_assign_source_354;
        PyObject *tmp_metaclass_value_42;
        bool tmp_condition_result_272;
        PyObject *tmp_key_value_124;
        PyObject *tmp_dict_arg_value_124;
        PyObject *tmp_dict_arg_value_125;
        PyObject *tmp_key_value_125;
        nuitka_bool tmp_condition_result_273;
        int tmp_truth_name_44;
        PyObject *tmp_type_arg_83;
        PyObject *tmp_expression_value_220;
        PyObject *tmp_subscript_value_42;
        PyObject *tmp_bases_value_42;
        tmp_key_value_124 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
        tmp_dict_arg_value_124 = tmp_class_creation_33__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_124, tmp_key_value_124);
        assert(!(tmp_res == -1));
        tmp_condition_result_272 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_272 != false) {
            goto condexpr_true_106;
        } else {
            goto condexpr_false_106;
        }
        condexpr_true_106:;
        CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
        tmp_dict_arg_value_125 = tmp_class_creation_33__class_decl_dict;
        tmp_key_value_125 = mod_consts[410];
        tmp_metaclass_value_42 = DICT_GET_ITEM0(tmp_dict_arg_value_125, tmp_key_value_125);
        if (tmp_metaclass_value_42 == NULL) {
            tmp_metaclass_value_42 = Py_None;
        }
        assert(!(tmp_metaclass_value_42 == NULL));
        Py_INCREF(tmp_metaclass_value_42);
        goto condexpr_end_106;
        condexpr_false_106:;
        CHECK_OBJECT(tmp_class_creation_33__bases);
        tmp_truth_name_44 = CHECK_IF_TRUE(tmp_class_creation_33__bases);
        if (tmp_truth_name_44 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2806;

            goto try_except_handler_124;
        }
        tmp_condition_result_273 = tmp_truth_name_44 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_273 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_107;
        } else {
            goto condexpr_false_107;
        }
        condexpr_true_107:;
        CHECK_OBJECT(tmp_class_creation_33__bases);
        tmp_expression_value_220 = tmp_class_creation_33__bases;
        tmp_subscript_value_42 = mod_consts[52];
        tmp_type_arg_83 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_220, tmp_subscript_value_42, 0);
        if (tmp_type_arg_83 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2806;

            goto try_except_handler_124;
        }
        tmp_metaclass_value_42 = BUILTIN_TYPE1(tmp_type_arg_83);
        Py_DECREF(tmp_type_arg_83);
        if (tmp_metaclass_value_42 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2806;

            goto try_except_handler_124;
        }
        goto condexpr_end_107;
        condexpr_false_107:;
        tmp_metaclass_value_42 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_42);
        condexpr_end_107:;
        condexpr_end_106:;
        CHECK_OBJECT(tmp_class_creation_33__bases);
        tmp_bases_value_42 = tmp_class_creation_33__bases;
        tmp_assign_source_354 = SELECT_METACLASS(tmp_metaclass_value_42, tmp_bases_value_42);
        Py_DECREF(tmp_metaclass_value_42);
        if (tmp_assign_source_354 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2806;

            goto try_except_handler_124;
        }
        assert(tmp_class_creation_33__metaclass == NULL);
        tmp_class_creation_33__metaclass = tmp_assign_source_354;
    }
    {
        bool tmp_condition_result_274;
        PyObject *tmp_key_value_126;
        PyObject *tmp_dict_arg_value_126;
        tmp_key_value_126 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
        tmp_dict_arg_value_126 = tmp_class_creation_33__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_126, tmp_key_value_126);
        assert(!(tmp_res == -1));
        tmp_condition_result_274 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_274 != false) {
            goto branch_yes_167;
        } else {
            goto branch_no_167;
        }
    }
    branch_yes_167:;
    CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_33__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2806;

        goto try_except_handler_124;
    }
    branch_no_167:;
    {
        nuitka_bool tmp_condition_result_275;
        PyObject *tmp_expression_value_221;
        CHECK_OBJECT(tmp_class_creation_33__metaclass);
        tmp_expression_value_221 = tmp_class_creation_33__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_221, mod_consts[411]);
        tmp_condition_result_275 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_275 == NUITKA_BOOL_TRUE) {
            goto branch_yes_168;
        } else {
            goto branch_no_168;
        }
    }
    branch_yes_168:;
    {
        PyObject *tmp_assign_source_355;
        PyObject *tmp_called_value_139;
        PyObject *tmp_expression_value_222;
        PyObject *tmp_args_value_83;
        PyObject *tmp_tuple_element_164;
        PyObject *tmp_kwargs_value_83;
        CHECK_OBJECT(tmp_class_creation_33__metaclass);
        tmp_expression_value_222 = tmp_class_creation_33__metaclass;
        tmp_called_value_139 = LOOKUP_ATTRIBUTE(tmp_expression_value_222, mod_consts[411]);
        if (tmp_called_value_139 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2806;

            goto try_except_handler_124;
        }
        tmp_tuple_element_164 = mod_consts[670];
        tmp_args_value_83 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_83, 0, tmp_tuple_element_164);
        CHECK_OBJECT(tmp_class_creation_33__bases);
        tmp_tuple_element_164 = tmp_class_creation_33__bases;
        PyTuple_SET_ITEM0(tmp_args_value_83, 1, tmp_tuple_element_164);
        CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
        tmp_kwargs_value_83 = tmp_class_creation_33__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2806;
        tmp_assign_source_355 = CALL_FUNCTION(tmp_called_value_139, tmp_args_value_83, tmp_kwargs_value_83);
        Py_DECREF(tmp_called_value_139);
        Py_DECREF(tmp_args_value_83);
        if (tmp_assign_source_355 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2806;

            goto try_except_handler_124;
        }
        assert(tmp_class_creation_33__prepared == NULL);
        tmp_class_creation_33__prepared = tmp_assign_source_355;
    }
    {
        bool tmp_condition_result_276;
        PyObject *tmp_operand_value_42;
        PyObject *tmp_expression_value_223;
        CHECK_OBJECT(tmp_class_creation_33__prepared);
        tmp_expression_value_223 = tmp_class_creation_33__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_223, mod_consts[413]);
        tmp_operand_value_42 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_42);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2806;

            goto try_except_handler_124;
        }
        tmp_condition_result_276 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_276 != false) {
            goto branch_yes_169;
        } else {
            goto branch_no_169;
        }
    }
    branch_yes_169:;
    {
        PyObject *tmp_raise_type_42;
        PyObject *tmp_raise_value_42;
        PyObject *tmp_left_value_42;
        PyObject *tmp_right_value_42;
        PyObject *tmp_tuple_element_165;
        PyObject *tmp_getattr_target_42;
        PyObject *tmp_getattr_attr_42;
        PyObject *tmp_getattr_default_42;
        tmp_raise_type_42 = PyExc_TypeError;
        tmp_left_value_42 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_33__metaclass);
        tmp_getattr_target_42 = tmp_class_creation_33__metaclass;
        tmp_getattr_attr_42 = mod_consts[190];
        tmp_getattr_default_42 = mod_consts[415];
        tmp_tuple_element_165 = BUILTIN_GETATTR(tmp_getattr_target_42, tmp_getattr_attr_42, tmp_getattr_default_42);
        if (tmp_tuple_element_165 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2806;

            goto try_except_handler_124;
        }
        tmp_right_value_42 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_224;
            PyObject *tmp_type_arg_84;
            PyTuple_SET_ITEM(tmp_right_value_42, 0, tmp_tuple_element_165);
            CHECK_OBJECT(tmp_class_creation_33__prepared);
            tmp_type_arg_84 = tmp_class_creation_33__prepared;
            tmp_expression_value_224 = BUILTIN_TYPE1(tmp_type_arg_84);
            assert(!(tmp_expression_value_224 == NULL));
            tmp_tuple_element_165 = LOOKUP_ATTRIBUTE(tmp_expression_value_224, mod_consts[190]);
            Py_DECREF(tmp_expression_value_224);
            if (tmp_tuple_element_165 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2806;

                goto tuple_build_exception_56;
            }
            PyTuple_SET_ITEM(tmp_right_value_42, 1, tmp_tuple_element_165);
        }
        goto tuple_build_noexception_56;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_56:;
        Py_DECREF(tmp_right_value_42);
        goto try_except_handler_124;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_56:;
        tmp_raise_value_42 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_42, tmp_right_value_42);
        Py_DECREF(tmp_right_value_42);
        if (tmp_raise_value_42 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2806;

            goto try_except_handler_124;
        }
        exception_type = tmp_raise_type_42;
        Py_INCREF(tmp_raise_type_42);
        exception_value = tmp_raise_value_42;
        exception_lineno = 2806;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_124;
    }
    branch_no_169:;
    goto branch_end_168;
    branch_no_168:;
    {
        PyObject *tmp_assign_source_356;
        tmp_assign_source_356 = PyDict_New();
        assert(tmp_class_creation_33__prepared == NULL);
        tmp_class_creation_33__prepared = tmp_assign_source_356;
    }
    branch_end_168:;
    {
        PyObject *tmp_assign_source_357;
        {
            PyObject *tmp_set_locals_42;
            CHECK_OBJECT(tmp_class_creation_33__prepared);
            tmp_set_locals_42 = tmp_class_creation_33__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__42_BIGINT_2806 = tmp_set_locals_42;
            Py_INCREF(tmp_set_locals_42);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__42_BIGINT_2806, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2806;

            goto try_except_handler_126;
        }
        tmp_dictset_value = mod_consts[671];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__42_BIGINT_2806, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2806;

            goto try_except_handler_126;
        }
        tmp_dictset_value = mod_consts[670];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__42_BIGINT_2806, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2806;

            goto try_except_handler_126;
        }
        if (isFrameUnusable(cache_frame_d8df478d7eb23f028e26024736594ee7_41)) {
            Py_XDECREF(cache_frame_d8df478d7eb23f028e26024736594ee7_41);

#if _DEBUG_REFCOUNTS
            if (cache_frame_d8df478d7eb23f028e26024736594ee7_41 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_d8df478d7eb23f028e26024736594ee7_41 = MAKE_FUNCTION_FRAME(codeobj_d8df478d7eb23f028e26024736594ee7, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_d8df478d7eb23f028e26024736594ee7_41->m_type_description == NULL);
        frame_d8df478d7eb23f028e26024736594ee7_41 = cache_frame_d8df478d7eb23f028e26024736594ee7_41;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_d8df478d7eb23f028e26024736594ee7_41);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_d8df478d7eb23f028e26024736594ee7_41) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[670];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__42_BIGINT_2806, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2810;
            type_description_2 = "o";
            goto frame_exception_exit_41;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_d8df478d7eb23f028e26024736594ee7_41);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_40;

        frame_exception_exit_41:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_d8df478d7eb23f028e26024736594ee7_41);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_d8df478d7eb23f028e26024736594ee7_41, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_d8df478d7eb23f028e26024736594ee7_41->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_d8df478d7eb23f028e26024736594ee7_41, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_d8df478d7eb23f028e26024736594ee7_41,
            type_description_2,
            outline_41_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_d8df478d7eb23f028e26024736594ee7_41 == cache_frame_d8df478d7eb23f028e26024736594ee7_41) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_d8df478d7eb23f028e26024736594ee7_41);
            cache_frame_d8df478d7eb23f028e26024736594ee7_41 = NULL;
        }

        assertFrameObject(frame_d8df478d7eb23f028e26024736594ee7_41);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_40;

        frame_no_exception_40:;
        goto skip_nested_handling_40;
        nested_frame_exit_40:;

        goto try_except_handler_126;
        skip_nested_handling_40:;
        {
            nuitka_bool tmp_condition_result_277;
            PyObject *tmp_cmp_expr_left_42;
            PyObject *tmp_cmp_expr_right_42;
            CHECK_OBJECT(tmp_class_creation_33__bases);
            tmp_cmp_expr_left_42 = tmp_class_creation_33__bases;
            CHECK_OBJECT(tmp_class_creation_33__bases_orig);
            tmp_cmp_expr_right_42 = tmp_class_creation_33__bases_orig;
            tmp_condition_result_277 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_42, tmp_cmp_expr_right_42);
            if (tmp_condition_result_277 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2806;

                goto try_except_handler_126;
            }
            if (tmp_condition_result_277 == NUITKA_BOOL_TRUE) {
                goto branch_yes_170;
            } else {
                goto branch_no_170;
            }
            assert(tmp_condition_result_277 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_170:;
        CHECK_OBJECT(tmp_class_creation_33__bases_orig);
        tmp_dictset_value = tmp_class_creation_33__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__42_BIGINT_2806, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2806;

            goto try_except_handler_126;
        }
        branch_no_170:;
        {
            PyObject *tmp_assign_source_358;
            PyObject *tmp_called_value_140;
            PyObject *tmp_args_value_84;
            PyObject *tmp_tuple_element_166;
            PyObject *tmp_kwargs_value_84;
            CHECK_OBJECT(tmp_class_creation_33__metaclass);
            tmp_called_value_140 = tmp_class_creation_33__metaclass;
            tmp_tuple_element_166 = mod_consts[670];
            tmp_args_value_84 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_84, 0, tmp_tuple_element_166);
            CHECK_OBJECT(tmp_class_creation_33__bases);
            tmp_tuple_element_166 = tmp_class_creation_33__bases;
            PyTuple_SET_ITEM0(tmp_args_value_84, 1, tmp_tuple_element_166);
            tmp_tuple_element_166 = locals_sqlalchemy$sql$sqltypes$$$class__42_BIGINT_2806;
            PyTuple_SET_ITEM0(tmp_args_value_84, 2, tmp_tuple_element_166);
            CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
            tmp_kwargs_value_84 = tmp_class_creation_33__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2806;
            tmp_assign_source_358 = CALL_FUNCTION(tmp_called_value_140, tmp_args_value_84, tmp_kwargs_value_84);
            Py_DECREF(tmp_args_value_84);
            if (tmp_assign_source_358 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2806;

                goto try_except_handler_126;
            }
            assert(outline_41_var___class__ == NULL);
            outline_41_var___class__ = tmp_assign_source_358;
        }
        CHECK_OBJECT(outline_41_var___class__);
        tmp_assign_source_357 = outline_41_var___class__;
        Py_INCREF(tmp_assign_source_357);
        goto try_return_handler_126;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_126:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__42_BIGINT_2806);
        locals_sqlalchemy$sql$sqltypes$$$class__42_BIGINT_2806 = NULL;
        goto try_return_handler_125;
        // Exception handler code:
        try_except_handler_126:;
        exception_keeper_type_124 = exception_type;
        exception_keeper_value_124 = exception_value;
        exception_keeper_tb_124 = exception_tb;
        exception_keeper_lineno_124 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__42_BIGINT_2806);
        locals_sqlalchemy$sql$sqltypes$$$class__42_BIGINT_2806 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_124;
        exception_value = exception_keeper_value_124;
        exception_tb = exception_keeper_tb_124;
        exception_lineno = exception_keeper_lineno_124;

        goto try_except_handler_125;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_125:;
        CHECK_OBJECT(outline_41_var___class__);
        Py_DECREF(outline_41_var___class__);
        outline_41_var___class__ = NULL;
        goto outline_result_42;
        // Exception handler code:
        try_except_handler_125:;
        exception_keeper_type_125 = exception_type;
        exception_keeper_value_125 = exception_value;
        exception_keeper_tb_125 = exception_tb;
        exception_keeper_lineno_125 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_125;
        exception_value = exception_keeper_value_125;
        exception_tb = exception_keeper_tb_125;
        exception_lineno = exception_keeper_lineno_125;

        goto outline_exception_42;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_42:;
        exception_lineno = 2806;
        goto try_except_handler_124;
        outline_result_42:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[670], tmp_assign_source_357);
    }
    goto try_end_42;
    // Exception handler code:
    try_except_handler_124:;
    exception_keeper_type_126 = exception_type;
    exception_keeper_value_126 = exception_value;
    exception_keeper_tb_126 = exception_tb;
    exception_keeper_lineno_126 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_33__bases_orig);
    tmp_class_creation_33__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_33__bases);
    tmp_class_creation_33__bases = NULL;
    Py_XDECREF(tmp_class_creation_33__class_decl_dict);
    tmp_class_creation_33__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_33__metaclass);
    tmp_class_creation_33__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_33__prepared);
    tmp_class_creation_33__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_126;
    exception_value = exception_keeper_value_126;
    exception_tb = exception_keeper_tb_126;
    exception_lineno = exception_keeper_lineno_126;

    goto frame_exception_exit_1;
    // End of try:
    try_end_42:;
    CHECK_OBJECT(tmp_class_creation_33__bases_orig);
    Py_DECREF(tmp_class_creation_33__bases_orig);
    tmp_class_creation_33__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_33__bases);
    Py_DECREF(tmp_class_creation_33__bases);
    tmp_class_creation_33__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
    Py_DECREF(tmp_class_creation_33__class_decl_dict);
    tmp_class_creation_33__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_33__metaclass);
    Py_DECREF(tmp_class_creation_33__metaclass);
    tmp_class_creation_33__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_33__prepared);
    Py_DECREF(tmp_class_creation_33__prepared);
    tmp_class_creation_33__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_359;
        PyObject *tmp_tuple_element_167;
        tmp_tuple_element_167 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[103]);

        if (unlikely(tmp_tuple_element_167 == NULL)) {
            tmp_tuple_element_167 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[103]);
        }

        if (tmp_tuple_element_167 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2813;

            goto try_except_handler_127;
        }
        tmp_assign_source_359 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_359, 0, tmp_tuple_element_167);
        assert(tmp_class_creation_34__bases_orig == NULL);
        tmp_class_creation_34__bases_orig = tmp_assign_source_359;
    }
    {
        PyObject *tmp_assign_source_360;
        PyObject *tmp_dircall_arg1_43;
        CHECK_OBJECT(tmp_class_creation_34__bases_orig);
        tmp_dircall_arg1_43 = tmp_class_creation_34__bases_orig;
        Py_INCREF(tmp_dircall_arg1_43);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_43};
            tmp_assign_source_360 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_360 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2813;

            goto try_except_handler_127;
        }
        assert(tmp_class_creation_34__bases == NULL);
        tmp_class_creation_34__bases = tmp_assign_source_360;
    }
    {
        PyObject *tmp_assign_source_361;
        tmp_assign_source_361 = PyDict_New();
        assert(tmp_class_creation_34__class_decl_dict == NULL);
        tmp_class_creation_34__class_decl_dict = tmp_assign_source_361;
    }
    {
        PyObject *tmp_assign_source_362;
        PyObject *tmp_metaclass_value_43;
        bool tmp_condition_result_278;
        PyObject *tmp_key_value_127;
        PyObject *tmp_dict_arg_value_127;
        PyObject *tmp_dict_arg_value_128;
        PyObject *tmp_key_value_128;
        nuitka_bool tmp_condition_result_279;
        int tmp_truth_name_45;
        PyObject *tmp_type_arg_85;
        PyObject *tmp_expression_value_225;
        PyObject *tmp_subscript_value_43;
        PyObject *tmp_bases_value_43;
        tmp_key_value_127 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
        tmp_dict_arg_value_127 = tmp_class_creation_34__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_127, tmp_key_value_127);
        assert(!(tmp_res == -1));
        tmp_condition_result_278 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_278 != false) {
            goto condexpr_true_108;
        } else {
            goto condexpr_false_108;
        }
        condexpr_true_108:;
        CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
        tmp_dict_arg_value_128 = tmp_class_creation_34__class_decl_dict;
        tmp_key_value_128 = mod_consts[410];
        tmp_metaclass_value_43 = DICT_GET_ITEM0(tmp_dict_arg_value_128, tmp_key_value_128);
        if (tmp_metaclass_value_43 == NULL) {
            tmp_metaclass_value_43 = Py_None;
        }
        assert(!(tmp_metaclass_value_43 == NULL));
        Py_INCREF(tmp_metaclass_value_43);
        goto condexpr_end_108;
        condexpr_false_108:;
        CHECK_OBJECT(tmp_class_creation_34__bases);
        tmp_truth_name_45 = CHECK_IF_TRUE(tmp_class_creation_34__bases);
        if (tmp_truth_name_45 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2813;

            goto try_except_handler_127;
        }
        tmp_condition_result_279 = tmp_truth_name_45 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_279 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_109;
        } else {
            goto condexpr_false_109;
        }
        condexpr_true_109:;
        CHECK_OBJECT(tmp_class_creation_34__bases);
        tmp_expression_value_225 = tmp_class_creation_34__bases;
        tmp_subscript_value_43 = mod_consts[52];
        tmp_type_arg_85 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_225, tmp_subscript_value_43, 0);
        if (tmp_type_arg_85 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2813;

            goto try_except_handler_127;
        }
        tmp_metaclass_value_43 = BUILTIN_TYPE1(tmp_type_arg_85);
        Py_DECREF(tmp_type_arg_85);
        if (tmp_metaclass_value_43 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2813;

            goto try_except_handler_127;
        }
        goto condexpr_end_109;
        condexpr_false_109:;
        tmp_metaclass_value_43 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_43);
        condexpr_end_109:;
        condexpr_end_108:;
        CHECK_OBJECT(tmp_class_creation_34__bases);
        tmp_bases_value_43 = tmp_class_creation_34__bases;
        tmp_assign_source_362 = SELECT_METACLASS(tmp_metaclass_value_43, tmp_bases_value_43);
        Py_DECREF(tmp_metaclass_value_43);
        if (tmp_assign_source_362 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2813;

            goto try_except_handler_127;
        }
        assert(tmp_class_creation_34__metaclass == NULL);
        tmp_class_creation_34__metaclass = tmp_assign_source_362;
    }
    {
        bool tmp_condition_result_280;
        PyObject *tmp_key_value_129;
        PyObject *tmp_dict_arg_value_129;
        tmp_key_value_129 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
        tmp_dict_arg_value_129 = tmp_class_creation_34__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_129, tmp_key_value_129);
        assert(!(tmp_res == -1));
        tmp_condition_result_280 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_280 != false) {
            goto branch_yes_171;
        } else {
            goto branch_no_171;
        }
    }
    branch_yes_171:;
    CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_34__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2813;

        goto try_except_handler_127;
    }
    branch_no_171:;
    {
        nuitka_bool tmp_condition_result_281;
        PyObject *tmp_expression_value_226;
        CHECK_OBJECT(tmp_class_creation_34__metaclass);
        tmp_expression_value_226 = tmp_class_creation_34__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_226, mod_consts[411]);
        tmp_condition_result_281 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_281 == NUITKA_BOOL_TRUE) {
            goto branch_yes_172;
        } else {
            goto branch_no_172;
        }
    }
    branch_yes_172:;
    {
        PyObject *tmp_assign_source_363;
        PyObject *tmp_called_value_141;
        PyObject *tmp_expression_value_227;
        PyObject *tmp_args_value_85;
        PyObject *tmp_tuple_element_168;
        PyObject *tmp_kwargs_value_85;
        CHECK_OBJECT(tmp_class_creation_34__metaclass);
        tmp_expression_value_227 = tmp_class_creation_34__metaclass;
        tmp_called_value_141 = LOOKUP_ATTRIBUTE(tmp_expression_value_227, mod_consts[411]);
        if (tmp_called_value_141 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2813;

            goto try_except_handler_127;
        }
        tmp_tuple_element_168 = mod_consts[357];
        tmp_args_value_85 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_85, 0, tmp_tuple_element_168);
        CHECK_OBJECT(tmp_class_creation_34__bases);
        tmp_tuple_element_168 = tmp_class_creation_34__bases;
        PyTuple_SET_ITEM0(tmp_args_value_85, 1, tmp_tuple_element_168);
        CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
        tmp_kwargs_value_85 = tmp_class_creation_34__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2813;
        tmp_assign_source_363 = CALL_FUNCTION(tmp_called_value_141, tmp_args_value_85, tmp_kwargs_value_85);
        Py_DECREF(tmp_called_value_141);
        Py_DECREF(tmp_args_value_85);
        if (tmp_assign_source_363 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2813;

            goto try_except_handler_127;
        }
        assert(tmp_class_creation_34__prepared == NULL);
        tmp_class_creation_34__prepared = tmp_assign_source_363;
    }
    {
        bool tmp_condition_result_282;
        PyObject *tmp_operand_value_43;
        PyObject *tmp_expression_value_228;
        CHECK_OBJECT(tmp_class_creation_34__prepared);
        tmp_expression_value_228 = tmp_class_creation_34__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_228, mod_consts[413]);
        tmp_operand_value_43 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_43);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2813;

            goto try_except_handler_127;
        }
        tmp_condition_result_282 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_282 != false) {
            goto branch_yes_173;
        } else {
            goto branch_no_173;
        }
    }
    branch_yes_173:;
    {
        PyObject *tmp_raise_type_43;
        PyObject *tmp_raise_value_43;
        PyObject *tmp_left_value_43;
        PyObject *tmp_right_value_43;
        PyObject *tmp_tuple_element_169;
        PyObject *tmp_getattr_target_43;
        PyObject *tmp_getattr_attr_43;
        PyObject *tmp_getattr_default_43;
        tmp_raise_type_43 = PyExc_TypeError;
        tmp_left_value_43 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_34__metaclass);
        tmp_getattr_target_43 = tmp_class_creation_34__metaclass;
        tmp_getattr_attr_43 = mod_consts[190];
        tmp_getattr_default_43 = mod_consts[415];
        tmp_tuple_element_169 = BUILTIN_GETATTR(tmp_getattr_target_43, tmp_getattr_attr_43, tmp_getattr_default_43);
        if (tmp_tuple_element_169 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2813;

            goto try_except_handler_127;
        }
        tmp_right_value_43 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_229;
            PyObject *tmp_type_arg_86;
            PyTuple_SET_ITEM(tmp_right_value_43, 0, tmp_tuple_element_169);
            CHECK_OBJECT(tmp_class_creation_34__prepared);
            tmp_type_arg_86 = tmp_class_creation_34__prepared;
            tmp_expression_value_229 = BUILTIN_TYPE1(tmp_type_arg_86);
            assert(!(tmp_expression_value_229 == NULL));
            tmp_tuple_element_169 = LOOKUP_ATTRIBUTE(tmp_expression_value_229, mod_consts[190]);
            Py_DECREF(tmp_expression_value_229);
            if (tmp_tuple_element_169 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2813;

                goto tuple_build_exception_57;
            }
            PyTuple_SET_ITEM(tmp_right_value_43, 1, tmp_tuple_element_169);
        }
        goto tuple_build_noexception_57;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_57:;
        Py_DECREF(tmp_right_value_43);
        goto try_except_handler_127;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_57:;
        tmp_raise_value_43 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_43, tmp_right_value_43);
        Py_DECREF(tmp_right_value_43);
        if (tmp_raise_value_43 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2813;

            goto try_except_handler_127;
        }
        exception_type = tmp_raise_type_43;
        Py_INCREF(tmp_raise_type_43);
        exception_value = tmp_raise_value_43;
        exception_lineno = 2813;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_127;
    }
    branch_no_173:;
    goto branch_end_172;
    branch_no_172:;
    {
        PyObject *tmp_assign_source_364;
        tmp_assign_source_364 = PyDict_New();
        assert(tmp_class_creation_34__prepared == NULL);
        tmp_class_creation_34__prepared = tmp_assign_source_364;
    }
    branch_end_172:;
    {
        PyObject *tmp_assign_source_365;
        {
            PyObject *tmp_set_locals_43;
            CHECK_OBJECT(tmp_class_creation_34__prepared);
            tmp_set_locals_43 = tmp_class_creation_34__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__43_TIMESTAMP_2813 = tmp_set_locals_43;
            Py_INCREF(tmp_set_locals_43);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__43_TIMESTAMP_2813, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2813;

            goto try_except_handler_129;
        }
        tmp_dictset_value = mod_consts[672];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__43_TIMESTAMP_2813, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2813;

            goto try_except_handler_129;
        }
        tmp_dictset_value = mod_consts[357];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__43_TIMESTAMP_2813, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2813;

            goto try_except_handler_129;
        }
        if (isFrameUnusable(cache_frame_fb92ac5fa6e748da5337a2580ce7460f_42)) {
            Py_XDECREF(cache_frame_fb92ac5fa6e748da5337a2580ce7460f_42);

#if _DEBUG_REFCOUNTS
            if (cache_frame_fb92ac5fa6e748da5337a2580ce7460f_42 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_fb92ac5fa6e748da5337a2580ce7460f_42 = MAKE_FUNCTION_FRAME(codeobj_fb92ac5fa6e748da5337a2580ce7460f, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_fb92ac5fa6e748da5337a2580ce7460f_42->m_type_description == NULL);
        frame_fb92ac5fa6e748da5337a2580ce7460f_42 = cache_frame_fb92ac5fa6e748da5337a2580ce7460f_42;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_fb92ac5fa6e748da5337a2580ce7460f_42);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_fb92ac5fa6e748da5337a2580ce7460f_42) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[357];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__43_TIMESTAMP_2813, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2824;
            type_description_2 = "o";
            goto frame_exception_exit_42;
        }
        {
            PyObject *tmp_defaults_20;
            tmp_defaults_20 = mod_consts[493];
            Py_INCREF(tmp_defaults_20);


            tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__135___init__(tmp_defaults_20);

            tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__43_TIMESTAMP_2813, mod_consts[66], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2826;
                type_description_2 = "o";
                goto frame_exception_exit_42;
            }
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__136_get_dbapi_type();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__43_TIMESTAMP_2813, mod_consts[447], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2839;
            type_description_2 = "o";
            goto frame_exception_exit_42;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_fb92ac5fa6e748da5337a2580ce7460f_42);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_41;

        frame_exception_exit_42:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_fb92ac5fa6e748da5337a2580ce7460f_42);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_fb92ac5fa6e748da5337a2580ce7460f_42, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_fb92ac5fa6e748da5337a2580ce7460f_42->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_fb92ac5fa6e748da5337a2580ce7460f_42, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_fb92ac5fa6e748da5337a2580ce7460f_42,
            type_description_2,
            outline_42_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_fb92ac5fa6e748da5337a2580ce7460f_42 == cache_frame_fb92ac5fa6e748da5337a2580ce7460f_42) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_fb92ac5fa6e748da5337a2580ce7460f_42);
            cache_frame_fb92ac5fa6e748da5337a2580ce7460f_42 = NULL;
        }

        assertFrameObject(frame_fb92ac5fa6e748da5337a2580ce7460f_42);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_41;

        frame_no_exception_41:;
        goto skip_nested_handling_41;
        nested_frame_exit_41:;

        goto try_except_handler_129;
        skip_nested_handling_41:;
        {
            nuitka_bool tmp_condition_result_283;
            PyObject *tmp_cmp_expr_left_43;
            PyObject *tmp_cmp_expr_right_43;
            CHECK_OBJECT(tmp_class_creation_34__bases);
            tmp_cmp_expr_left_43 = tmp_class_creation_34__bases;
            CHECK_OBJECT(tmp_class_creation_34__bases_orig);
            tmp_cmp_expr_right_43 = tmp_class_creation_34__bases_orig;
            tmp_condition_result_283 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_43, tmp_cmp_expr_right_43);
            if (tmp_condition_result_283 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2813;

                goto try_except_handler_129;
            }
            if (tmp_condition_result_283 == NUITKA_BOOL_TRUE) {
                goto branch_yes_174;
            } else {
                goto branch_no_174;
            }
            assert(tmp_condition_result_283 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_174:;
        CHECK_OBJECT(tmp_class_creation_34__bases_orig);
        tmp_dictset_value = tmp_class_creation_34__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__43_TIMESTAMP_2813, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2813;

            goto try_except_handler_129;
        }
        branch_no_174:;
        {
            PyObject *tmp_assign_source_366;
            PyObject *tmp_called_value_142;
            PyObject *tmp_args_value_86;
            PyObject *tmp_tuple_element_170;
            PyObject *tmp_kwargs_value_86;
            CHECK_OBJECT(tmp_class_creation_34__metaclass);
            tmp_called_value_142 = tmp_class_creation_34__metaclass;
            tmp_tuple_element_170 = mod_consts[357];
            tmp_args_value_86 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_86, 0, tmp_tuple_element_170);
            CHECK_OBJECT(tmp_class_creation_34__bases);
            tmp_tuple_element_170 = tmp_class_creation_34__bases;
            PyTuple_SET_ITEM0(tmp_args_value_86, 1, tmp_tuple_element_170);
            tmp_tuple_element_170 = locals_sqlalchemy$sql$sqltypes$$$class__43_TIMESTAMP_2813;
            PyTuple_SET_ITEM0(tmp_args_value_86, 2, tmp_tuple_element_170);
            CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
            tmp_kwargs_value_86 = tmp_class_creation_34__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2813;
            tmp_assign_source_366 = CALL_FUNCTION(tmp_called_value_142, tmp_args_value_86, tmp_kwargs_value_86);
            Py_DECREF(tmp_args_value_86);
            if (tmp_assign_source_366 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2813;

                goto try_except_handler_129;
            }
            assert(outline_42_var___class__ == NULL);
            outline_42_var___class__ = tmp_assign_source_366;
        }
        CHECK_OBJECT(outline_42_var___class__);
        tmp_assign_source_365 = outline_42_var___class__;
        Py_INCREF(tmp_assign_source_365);
        goto try_return_handler_129;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_129:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__43_TIMESTAMP_2813);
        locals_sqlalchemy$sql$sqltypes$$$class__43_TIMESTAMP_2813 = NULL;
        goto try_return_handler_128;
        // Exception handler code:
        try_except_handler_129:;
        exception_keeper_type_127 = exception_type;
        exception_keeper_value_127 = exception_value;
        exception_keeper_tb_127 = exception_tb;
        exception_keeper_lineno_127 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__43_TIMESTAMP_2813);
        locals_sqlalchemy$sql$sqltypes$$$class__43_TIMESTAMP_2813 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_127;
        exception_value = exception_keeper_value_127;
        exception_tb = exception_keeper_tb_127;
        exception_lineno = exception_keeper_lineno_127;

        goto try_except_handler_128;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_128:;
        CHECK_OBJECT(outline_42_var___class__);
        Py_DECREF(outline_42_var___class__);
        outline_42_var___class__ = NULL;
        goto outline_result_43;
        // Exception handler code:
        try_except_handler_128:;
        exception_keeper_type_128 = exception_type;
        exception_keeper_value_128 = exception_value;
        exception_keeper_tb_128 = exception_tb;
        exception_keeper_lineno_128 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_128;
        exception_value = exception_keeper_value_128;
        exception_tb = exception_keeper_tb_128;
        exception_lineno = exception_keeper_lineno_128;

        goto outline_exception_43;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_43:;
        exception_lineno = 2813;
        goto try_except_handler_127;
        outline_result_43:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[357], tmp_assign_source_365);
    }
    goto try_end_43;
    // Exception handler code:
    try_except_handler_127:;
    exception_keeper_type_129 = exception_type;
    exception_keeper_value_129 = exception_value;
    exception_keeper_tb_129 = exception_tb;
    exception_keeper_lineno_129 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_34__bases_orig);
    tmp_class_creation_34__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_34__bases);
    tmp_class_creation_34__bases = NULL;
    Py_XDECREF(tmp_class_creation_34__class_decl_dict);
    tmp_class_creation_34__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_34__metaclass);
    tmp_class_creation_34__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_34__prepared);
    tmp_class_creation_34__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_129;
    exception_value = exception_keeper_value_129;
    exception_tb = exception_keeper_tb_129;
    exception_lineno = exception_keeper_lineno_129;

    goto frame_exception_exit_1;
    // End of try:
    try_end_43:;
    CHECK_OBJECT(tmp_class_creation_34__bases_orig);
    Py_DECREF(tmp_class_creation_34__bases_orig);
    tmp_class_creation_34__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_34__bases);
    Py_DECREF(tmp_class_creation_34__bases);
    tmp_class_creation_34__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
    Py_DECREF(tmp_class_creation_34__class_decl_dict);
    tmp_class_creation_34__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_34__metaclass);
    Py_DECREF(tmp_class_creation_34__metaclass);
    tmp_class_creation_34__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_34__prepared);
    Py_DECREF(tmp_class_creation_34__prepared);
    tmp_class_creation_34__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_367;
        PyObject *tmp_tuple_element_171;
        tmp_tuple_element_171 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[103]);

        if (unlikely(tmp_tuple_element_171 == NULL)) {
            tmp_tuple_element_171 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[103]);
        }

        if (tmp_tuple_element_171 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2843;

            goto try_except_handler_130;
        }
        tmp_assign_source_367 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_367, 0, tmp_tuple_element_171);
        assert(tmp_class_creation_35__bases_orig == NULL);
        tmp_class_creation_35__bases_orig = tmp_assign_source_367;
    }
    {
        PyObject *tmp_assign_source_368;
        PyObject *tmp_dircall_arg1_44;
        CHECK_OBJECT(tmp_class_creation_35__bases_orig);
        tmp_dircall_arg1_44 = tmp_class_creation_35__bases_orig;
        Py_INCREF(tmp_dircall_arg1_44);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_44};
            tmp_assign_source_368 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_368 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2843;

            goto try_except_handler_130;
        }
        assert(tmp_class_creation_35__bases == NULL);
        tmp_class_creation_35__bases = tmp_assign_source_368;
    }
    {
        PyObject *tmp_assign_source_369;
        tmp_assign_source_369 = PyDict_New();
        assert(tmp_class_creation_35__class_decl_dict == NULL);
        tmp_class_creation_35__class_decl_dict = tmp_assign_source_369;
    }
    {
        PyObject *tmp_assign_source_370;
        PyObject *tmp_metaclass_value_44;
        bool tmp_condition_result_284;
        PyObject *tmp_key_value_130;
        PyObject *tmp_dict_arg_value_130;
        PyObject *tmp_dict_arg_value_131;
        PyObject *tmp_key_value_131;
        nuitka_bool tmp_condition_result_285;
        int tmp_truth_name_46;
        PyObject *tmp_type_arg_87;
        PyObject *tmp_expression_value_230;
        PyObject *tmp_subscript_value_44;
        PyObject *tmp_bases_value_44;
        tmp_key_value_130 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
        tmp_dict_arg_value_130 = tmp_class_creation_35__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_130, tmp_key_value_130);
        assert(!(tmp_res == -1));
        tmp_condition_result_284 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_284 != false) {
            goto condexpr_true_110;
        } else {
            goto condexpr_false_110;
        }
        condexpr_true_110:;
        CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
        tmp_dict_arg_value_131 = tmp_class_creation_35__class_decl_dict;
        tmp_key_value_131 = mod_consts[410];
        tmp_metaclass_value_44 = DICT_GET_ITEM0(tmp_dict_arg_value_131, tmp_key_value_131);
        if (tmp_metaclass_value_44 == NULL) {
            tmp_metaclass_value_44 = Py_None;
        }
        assert(!(tmp_metaclass_value_44 == NULL));
        Py_INCREF(tmp_metaclass_value_44);
        goto condexpr_end_110;
        condexpr_false_110:;
        CHECK_OBJECT(tmp_class_creation_35__bases);
        tmp_truth_name_46 = CHECK_IF_TRUE(tmp_class_creation_35__bases);
        if (tmp_truth_name_46 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2843;

            goto try_except_handler_130;
        }
        tmp_condition_result_285 = tmp_truth_name_46 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_285 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_111;
        } else {
            goto condexpr_false_111;
        }
        condexpr_true_111:;
        CHECK_OBJECT(tmp_class_creation_35__bases);
        tmp_expression_value_230 = tmp_class_creation_35__bases;
        tmp_subscript_value_44 = mod_consts[52];
        tmp_type_arg_87 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_230, tmp_subscript_value_44, 0);
        if (tmp_type_arg_87 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2843;

            goto try_except_handler_130;
        }
        tmp_metaclass_value_44 = BUILTIN_TYPE1(tmp_type_arg_87);
        Py_DECREF(tmp_type_arg_87);
        if (tmp_metaclass_value_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2843;

            goto try_except_handler_130;
        }
        goto condexpr_end_111;
        condexpr_false_111:;
        tmp_metaclass_value_44 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_44);
        condexpr_end_111:;
        condexpr_end_110:;
        CHECK_OBJECT(tmp_class_creation_35__bases);
        tmp_bases_value_44 = tmp_class_creation_35__bases;
        tmp_assign_source_370 = SELECT_METACLASS(tmp_metaclass_value_44, tmp_bases_value_44);
        Py_DECREF(tmp_metaclass_value_44);
        if (tmp_assign_source_370 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2843;

            goto try_except_handler_130;
        }
        assert(tmp_class_creation_35__metaclass == NULL);
        tmp_class_creation_35__metaclass = tmp_assign_source_370;
    }
    {
        bool tmp_condition_result_286;
        PyObject *tmp_key_value_132;
        PyObject *tmp_dict_arg_value_132;
        tmp_key_value_132 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
        tmp_dict_arg_value_132 = tmp_class_creation_35__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_132, tmp_key_value_132);
        assert(!(tmp_res == -1));
        tmp_condition_result_286 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_286 != false) {
            goto branch_yes_175;
        } else {
            goto branch_no_175;
        }
    }
    branch_yes_175:;
    CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_35__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2843;

        goto try_except_handler_130;
    }
    branch_no_175:;
    {
        nuitka_bool tmp_condition_result_287;
        PyObject *tmp_expression_value_231;
        CHECK_OBJECT(tmp_class_creation_35__metaclass);
        tmp_expression_value_231 = tmp_class_creation_35__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_231, mod_consts[411]);
        tmp_condition_result_287 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_287 == NUITKA_BOOL_TRUE) {
            goto branch_yes_176;
        } else {
            goto branch_no_176;
        }
    }
    branch_yes_176:;
    {
        PyObject *tmp_assign_source_371;
        PyObject *tmp_called_value_143;
        PyObject *tmp_expression_value_232;
        PyObject *tmp_args_value_87;
        PyObject *tmp_tuple_element_172;
        PyObject *tmp_kwargs_value_87;
        CHECK_OBJECT(tmp_class_creation_35__metaclass);
        tmp_expression_value_232 = tmp_class_creation_35__metaclass;
        tmp_called_value_143 = LOOKUP_ATTRIBUTE(tmp_expression_value_232, mod_consts[411]);
        if (tmp_called_value_143 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2843;

            goto try_except_handler_130;
        }
        tmp_tuple_element_172 = mod_consts[100];
        tmp_args_value_87 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_87, 0, tmp_tuple_element_172);
        CHECK_OBJECT(tmp_class_creation_35__bases);
        tmp_tuple_element_172 = tmp_class_creation_35__bases;
        PyTuple_SET_ITEM0(tmp_args_value_87, 1, tmp_tuple_element_172);
        CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
        tmp_kwargs_value_87 = tmp_class_creation_35__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2843;
        tmp_assign_source_371 = CALL_FUNCTION(tmp_called_value_143, tmp_args_value_87, tmp_kwargs_value_87);
        Py_DECREF(tmp_called_value_143);
        Py_DECREF(tmp_args_value_87);
        if (tmp_assign_source_371 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2843;

            goto try_except_handler_130;
        }
        assert(tmp_class_creation_35__prepared == NULL);
        tmp_class_creation_35__prepared = tmp_assign_source_371;
    }
    {
        bool tmp_condition_result_288;
        PyObject *tmp_operand_value_44;
        PyObject *tmp_expression_value_233;
        CHECK_OBJECT(tmp_class_creation_35__prepared);
        tmp_expression_value_233 = tmp_class_creation_35__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_233, mod_consts[413]);
        tmp_operand_value_44 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_44);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2843;

            goto try_except_handler_130;
        }
        tmp_condition_result_288 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_288 != false) {
            goto branch_yes_177;
        } else {
            goto branch_no_177;
        }
    }
    branch_yes_177:;
    {
        PyObject *tmp_raise_type_44;
        PyObject *tmp_raise_value_44;
        PyObject *tmp_left_value_44;
        PyObject *tmp_right_value_44;
        PyObject *tmp_tuple_element_173;
        PyObject *tmp_getattr_target_44;
        PyObject *tmp_getattr_attr_44;
        PyObject *tmp_getattr_default_44;
        tmp_raise_type_44 = PyExc_TypeError;
        tmp_left_value_44 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_35__metaclass);
        tmp_getattr_target_44 = tmp_class_creation_35__metaclass;
        tmp_getattr_attr_44 = mod_consts[190];
        tmp_getattr_default_44 = mod_consts[415];
        tmp_tuple_element_173 = BUILTIN_GETATTR(tmp_getattr_target_44, tmp_getattr_attr_44, tmp_getattr_default_44);
        if (tmp_tuple_element_173 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2843;

            goto try_except_handler_130;
        }
        tmp_right_value_44 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_234;
            PyObject *tmp_type_arg_88;
            PyTuple_SET_ITEM(tmp_right_value_44, 0, tmp_tuple_element_173);
            CHECK_OBJECT(tmp_class_creation_35__prepared);
            tmp_type_arg_88 = tmp_class_creation_35__prepared;
            tmp_expression_value_234 = BUILTIN_TYPE1(tmp_type_arg_88);
            assert(!(tmp_expression_value_234 == NULL));
            tmp_tuple_element_173 = LOOKUP_ATTRIBUTE(tmp_expression_value_234, mod_consts[190]);
            Py_DECREF(tmp_expression_value_234);
            if (tmp_tuple_element_173 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2843;

                goto tuple_build_exception_58;
            }
            PyTuple_SET_ITEM(tmp_right_value_44, 1, tmp_tuple_element_173);
        }
        goto tuple_build_noexception_58;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_58:;
        Py_DECREF(tmp_right_value_44);
        goto try_except_handler_130;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_58:;
        tmp_raise_value_44 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_44, tmp_right_value_44);
        Py_DECREF(tmp_right_value_44);
        if (tmp_raise_value_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2843;

            goto try_except_handler_130;
        }
        exception_type = tmp_raise_type_44;
        Py_INCREF(tmp_raise_type_44);
        exception_value = tmp_raise_value_44;
        exception_lineno = 2843;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_130;
    }
    branch_no_177:;
    goto branch_end_176;
    branch_no_176:;
    {
        PyObject *tmp_assign_source_372;
        tmp_assign_source_372 = PyDict_New();
        assert(tmp_class_creation_35__prepared == NULL);
        tmp_class_creation_35__prepared = tmp_assign_source_372;
    }
    branch_end_176:;
    {
        PyObject *tmp_assign_source_373;
        {
            PyObject *tmp_set_locals_44;
            CHECK_OBJECT(tmp_class_creation_35__prepared);
            tmp_set_locals_44 = tmp_class_creation_35__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__44_DATETIME_2843 = tmp_set_locals_44;
            Py_INCREF(tmp_set_locals_44);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__44_DATETIME_2843, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2843;

            goto try_except_handler_132;
        }
        tmp_dictset_value = mod_consts[675];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__44_DATETIME_2843, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2843;

            goto try_except_handler_132;
        }
        tmp_dictset_value = mod_consts[100];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__44_DATETIME_2843, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2843;

            goto try_except_handler_132;
        }
        if (isFrameUnusable(cache_frame_129b20ad960823b391a75d7794993936_43)) {
            Py_XDECREF(cache_frame_129b20ad960823b391a75d7794993936_43);

#if _DEBUG_REFCOUNTS
            if (cache_frame_129b20ad960823b391a75d7794993936_43 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_129b20ad960823b391a75d7794993936_43 = MAKE_FUNCTION_FRAME(codeobj_129b20ad960823b391a75d7794993936, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_129b20ad960823b391a75d7794993936_43->m_type_description == NULL);
        frame_129b20ad960823b391a75d7794993936_43 = cache_frame_129b20ad960823b391a75d7794993936_43;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_129b20ad960823b391a75d7794993936_43);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_129b20ad960823b391a75d7794993936_43) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[100];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__44_DATETIME_2843, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2847;
            type_description_2 = "o";
            goto frame_exception_exit_43;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_129b20ad960823b391a75d7794993936_43);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_42;

        frame_exception_exit_43:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_129b20ad960823b391a75d7794993936_43);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_129b20ad960823b391a75d7794993936_43, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_129b20ad960823b391a75d7794993936_43->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_129b20ad960823b391a75d7794993936_43, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_129b20ad960823b391a75d7794993936_43,
            type_description_2,
            outline_43_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_129b20ad960823b391a75d7794993936_43 == cache_frame_129b20ad960823b391a75d7794993936_43) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_129b20ad960823b391a75d7794993936_43);
            cache_frame_129b20ad960823b391a75d7794993936_43 = NULL;
        }

        assertFrameObject(frame_129b20ad960823b391a75d7794993936_43);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_42;

        frame_no_exception_42:;
        goto skip_nested_handling_42;
        nested_frame_exit_42:;

        goto try_except_handler_132;
        skip_nested_handling_42:;
        {
            nuitka_bool tmp_condition_result_289;
            PyObject *tmp_cmp_expr_left_44;
            PyObject *tmp_cmp_expr_right_44;
            CHECK_OBJECT(tmp_class_creation_35__bases);
            tmp_cmp_expr_left_44 = tmp_class_creation_35__bases;
            CHECK_OBJECT(tmp_class_creation_35__bases_orig);
            tmp_cmp_expr_right_44 = tmp_class_creation_35__bases_orig;
            tmp_condition_result_289 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_44, tmp_cmp_expr_right_44);
            if (tmp_condition_result_289 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2843;

                goto try_except_handler_132;
            }
            if (tmp_condition_result_289 == NUITKA_BOOL_TRUE) {
                goto branch_yes_178;
            } else {
                goto branch_no_178;
            }
            assert(tmp_condition_result_289 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_178:;
        CHECK_OBJECT(tmp_class_creation_35__bases_orig);
        tmp_dictset_value = tmp_class_creation_35__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__44_DATETIME_2843, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2843;

            goto try_except_handler_132;
        }
        branch_no_178:;
        {
            PyObject *tmp_assign_source_374;
            PyObject *tmp_called_value_144;
            PyObject *tmp_args_value_88;
            PyObject *tmp_tuple_element_174;
            PyObject *tmp_kwargs_value_88;
            CHECK_OBJECT(tmp_class_creation_35__metaclass);
            tmp_called_value_144 = tmp_class_creation_35__metaclass;
            tmp_tuple_element_174 = mod_consts[100];
            tmp_args_value_88 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_88, 0, tmp_tuple_element_174);
            CHECK_OBJECT(tmp_class_creation_35__bases);
            tmp_tuple_element_174 = tmp_class_creation_35__bases;
            PyTuple_SET_ITEM0(tmp_args_value_88, 1, tmp_tuple_element_174);
            tmp_tuple_element_174 = locals_sqlalchemy$sql$sqltypes$$$class__44_DATETIME_2843;
            PyTuple_SET_ITEM0(tmp_args_value_88, 2, tmp_tuple_element_174);
            CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
            tmp_kwargs_value_88 = tmp_class_creation_35__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2843;
            tmp_assign_source_374 = CALL_FUNCTION(tmp_called_value_144, tmp_args_value_88, tmp_kwargs_value_88);
            Py_DECREF(tmp_args_value_88);
            if (tmp_assign_source_374 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2843;

                goto try_except_handler_132;
            }
            assert(outline_43_var___class__ == NULL);
            outline_43_var___class__ = tmp_assign_source_374;
        }
        CHECK_OBJECT(outline_43_var___class__);
        tmp_assign_source_373 = outline_43_var___class__;
        Py_INCREF(tmp_assign_source_373);
        goto try_return_handler_132;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_132:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__44_DATETIME_2843);
        locals_sqlalchemy$sql$sqltypes$$$class__44_DATETIME_2843 = NULL;
        goto try_return_handler_131;
        // Exception handler code:
        try_except_handler_132:;
        exception_keeper_type_130 = exception_type;
        exception_keeper_value_130 = exception_value;
        exception_keeper_tb_130 = exception_tb;
        exception_keeper_lineno_130 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__44_DATETIME_2843);
        locals_sqlalchemy$sql$sqltypes$$$class__44_DATETIME_2843 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_130;
        exception_value = exception_keeper_value_130;
        exception_tb = exception_keeper_tb_130;
        exception_lineno = exception_keeper_lineno_130;

        goto try_except_handler_131;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_131:;
        CHECK_OBJECT(outline_43_var___class__);
        Py_DECREF(outline_43_var___class__);
        outline_43_var___class__ = NULL;
        goto outline_result_44;
        // Exception handler code:
        try_except_handler_131:;
        exception_keeper_type_131 = exception_type;
        exception_keeper_value_131 = exception_value;
        exception_keeper_tb_131 = exception_tb;
        exception_keeper_lineno_131 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_131;
        exception_value = exception_keeper_value_131;
        exception_tb = exception_keeper_tb_131;
        exception_lineno = exception_keeper_lineno_131;

        goto outline_exception_44;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_44:;
        exception_lineno = 2843;
        goto try_except_handler_130;
        outline_result_44:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[100], tmp_assign_source_373);
    }
    goto try_end_44;
    // Exception handler code:
    try_except_handler_130:;
    exception_keeper_type_132 = exception_type;
    exception_keeper_value_132 = exception_value;
    exception_keeper_tb_132 = exception_tb;
    exception_keeper_lineno_132 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_35__bases_orig);
    tmp_class_creation_35__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_35__bases);
    tmp_class_creation_35__bases = NULL;
    Py_XDECREF(tmp_class_creation_35__class_decl_dict);
    tmp_class_creation_35__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_35__metaclass);
    tmp_class_creation_35__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_35__prepared);
    tmp_class_creation_35__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_132;
    exception_value = exception_keeper_value_132;
    exception_tb = exception_keeper_tb_132;
    exception_lineno = exception_keeper_lineno_132;

    goto frame_exception_exit_1;
    // End of try:
    try_end_44:;
    CHECK_OBJECT(tmp_class_creation_35__bases_orig);
    Py_DECREF(tmp_class_creation_35__bases_orig);
    tmp_class_creation_35__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_35__bases);
    Py_DECREF(tmp_class_creation_35__bases);
    tmp_class_creation_35__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
    Py_DECREF(tmp_class_creation_35__class_decl_dict);
    tmp_class_creation_35__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_35__metaclass);
    Py_DECREF(tmp_class_creation_35__metaclass);
    tmp_class_creation_35__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_35__prepared);
    Py_DECREF(tmp_class_creation_35__prepared);
    tmp_class_creation_35__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_375;
        PyObject *tmp_tuple_element_175;
        tmp_tuple_element_175 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[72]);

        if (unlikely(tmp_tuple_element_175 == NULL)) {
            tmp_tuple_element_175 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[72]);
        }

        if (tmp_tuple_element_175 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2850;

            goto try_except_handler_133;
        }
        tmp_assign_source_375 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_375, 0, tmp_tuple_element_175);
        assert(tmp_class_creation_36__bases_orig == NULL);
        tmp_class_creation_36__bases_orig = tmp_assign_source_375;
    }
    {
        PyObject *tmp_assign_source_376;
        PyObject *tmp_dircall_arg1_45;
        CHECK_OBJECT(tmp_class_creation_36__bases_orig);
        tmp_dircall_arg1_45 = tmp_class_creation_36__bases_orig;
        Py_INCREF(tmp_dircall_arg1_45);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_45};
            tmp_assign_source_376 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_376 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2850;

            goto try_except_handler_133;
        }
        assert(tmp_class_creation_36__bases == NULL);
        tmp_class_creation_36__bases = tmp_assign_source_376;
    }
    {
        PyObject *tmp_assign_source_377;
        tmp_assign_source_377 = PyDict_New();
        assert(tmp_class_creation_36__class_decl_dict == NULL);
        tmp_class_creation_36__class_decl_dict = tmp_assign_source_377;
    }
    {
        PyObject *tmp_assign_source_378;
        PyObject *tmp_metaclass_value_45;
        bool tmp_condition_result_290;
        PyObject *tmp_key_value_133;
        PyObject *tmp_dict_arg_value_133;
        PyObject *tmp_dict_arg_value_134;
        PyObject *tmp_key_value_134;
        nuitka_bool tmp_condition_result_291;
        int tmp_truth_name_47;
        PyObject *tmp_type_arg_89;
        PyObject *tmp_expression_value_235;
        PyObject *tmp_subscript_value_45;
        PyObject *tmp_bases_value_45;
        tmp_key_value_133 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
        tmp_dict_arg_value_133 = tmp_class_creation_36__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_133, tmp_key_value_133);
        assert(!(tmp_res == -1));
        tmp_condition_result_290 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_290 != false) {
            goto condexpr_true_112;
        } else {
            goto condexpr_false_112;
        }
        condexpr_true_112:;
        CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
        tmp_dict_arg_value_134 = tmp_class_creation_36__class_decl_dict;
        tmp_key_value_134 = mod_consts[410];
        tmp_metaclass_value_45 = DICT_GET_ITEM0(tmp_dict_arg_value_134, tmp_key_value_134);
        if (tmp_metaclass_value_45 == NULL) {
            tmp_metaclass_value_45 = Py_None;
        }
        assert(!(tmp_metaclass_value_45 == NULL));
        Py_INCREF(tmp_metaclass_value_45);
        goto condexpr_end_112;
        condexpr_false_112:;
        CHECK_OBJECT(tmp_class_creation_36__bases);
        tmp_truth_name_47 = CHECK_IF_TRUE(tmp_class_creation_36__bases);
        if (tmp_truth_name_47 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2850;

            goto try_except_handler_133;
        }
        tmp_condition_result_291 = tmp_truth_name_47 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_291 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_113;
        } else {
            goto condexpr_false_113;
        }
        condexpr_true_113:;
        CHECK_OBJECT(tmp_class_creation_36__bases);
        tmp_expression_value_235 = tmp_class_creation_36__bases;
        tmp_subscript_value_45 = mod_consts[52];
        tmp_type_arg_89 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_235, tmp_subscript_value_45, 0);
        if (tmp_type_arg_89 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2850;

            goto try_except_handler_133;
        }
        tmp_metaclass_value_45 = BUILTIN_TYPE1(tmp_type_arg_89);
        Py_DECREF(tmp_type_arg_89);
        if (tmp_metaclass_value_45 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2850;

            goto try_except_handler_133;
        }
        goto condexpr_end_113;
        condexpr_false_113:;
        tmp_metaclass_value_45 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_45);
        condexpr_end_113:;
        condexpr_end_112:;
        CHECK_OBJECT(tmp_class_creation_36__bases);
        tmp_bases_value_45 = tmp_class_creation_36__bases;
        tmp_assign_source_378 = SELECT_METACLASS(tmp_metaclass_value_45, tmp_bases_value_45);
        Py_DECREF(tmp_metaclass_value_45);
        if (tmp_assign_source_378 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2850;

            goto try_except_handler_133;
        }
        assert(tmp_class_creation_36__metaclass == NULL);
        tmp_class_creation_36__metaclass = tmp_assign_source_378;
    }
    {
        bool tmp_condition_result_292;
        PyObject *tmp_key_value_135;
        PyObject *tmp_dict_arg_value_135;
        tmp_key_value_135 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
        tmp_dict_arg_value_135 = tmp_class_creation_36__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_135, tmp_key_value_135);
        assert(!(tmp_res == -1));
        tmp_condition_result_292 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_292 != false) {
            goto branch_yes_179;
        } else {
            goto branch_no_179;
        }
    }
    branch_yes_179:;
    CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_36__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2850;

        goto try_except_handler_133;
    }
    branch_no_179:;
    {
        nuitka_bool tmp_condition_result_293;
        PyObject *tmp_expression_value_236;
        CHECK_OBJECT(tmp_class_creation_36__metaclass);
        tmp_expression_value_236 = tmp_class_creation_36__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_236, mod_consts[411]);
        tmp_condition_result_293 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_293 == NUITKA_BOOL_TRUE) {
            goto branch_yes_180;
        } else {
            goto branch_no_180;
        }
    }
    branch_yes_180:;
    {
        PyObject *tmp_assign_source_379;
        PyObject *tmp_called_value_145;
        PyObject *tmp_expression_value_237;
        PyObject *tmp_args_value_89;
        PyObject *tmp_tuple_element_176;
        PyObject *tmp_kwargs_value_89;
        CHECK_OBJECT(tmp_class_creation_36__metaclass);
        tmp_expression_value_237 = tmp_class_creation_36__metaclass;
        tmp_called_value_145 = LOOKUP_ATTRIBUTE(tmp_expression_value_237, mod_consts[411]);
        if (tmp_called_value_145 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2850;

            goto try_except_handler_133;
        }
        tmp_tuple_element_176 = mod_consts[676];
        tmp_args_value_89 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_89, 0, tmp_tuple_element_176);
        CHECK_OBJECT(tmp_class_creation_36__bases);
        tmp_tuple_element_176 = tmp_class_creation_36__bases;
        PyTuple_SET_ITEM0(tmp_args_value_89, 1, tmp_tuple_element_176);
        CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
        tmp_kwargs_value_89 = tmp_class_creation_36__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2850;
        tmp_assign_source_379 = CALL_FUNCTION(tmp_called_value_145, tmp_args_value_89, tmp_kwargs_value_89);
        Py_DECREF(tmp_called_value_145);
        Py_DECREF(tmp_args_value_89);
        if (tmp_assign_source_379 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2850;

            goto try_except_handler_133;
        }
        assert(tmp_class_creation_36__prepared == NULL);
        tmp_class_creation_36__prepared = tmp_assign_source_379;
    }
    {
        bool tmp_condition_result_294;
        PyObject *tmp_operand_value_45;
        PyObject *tmp_expression_value_238;
        CHECK_OBJECT(tmp_class_creation_36__prepared);
        tmp_expression_value_238 = tmp_class_creation_36__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_238, mod_consts[413]);
        tmp_operand_value_45 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_45);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2850;

            goto try_except_handler_133;
        }
        tmp_condition_result_294 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_294 != false) {
            goto branch_yes_181;
        } else {
            goto branch_no_181;
        }
    }
    branch_yes_181:;
    {
        PyObject *tmp_raise_type_45;
        PyObject *tmp_raise_value_45;
        PyObject *tmp_left_value_45;
        PyObject *tmp_right_value_45;
        PyObject *tmp_tuple_element_177;
        PyObject *tmp_getattr_target_45;
        PyObject *tmp_getattr_attr_45;
        PyObject *tmp_getattr_default_45;
        tmp_raise_type_45 = PyExc_TypeError;
        tmp_left_value_45 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_36__metaclass);
        tmp_getattr_target_45 = tmp_class_creation_36__metaclass;
        tmp_getattr_attr_45 = mod_consts[190];
        tmp_getattr_default_45 = mod_consts[415];
        tmp_tuple_element_177 = BUILTIN_GETATTR(tmp_getattr_target_45, tmp_getattr_attr_45, tmp_getattr_default_45);
        if (tmp_tuple_element_177 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2850;

            goto try_except_handler_133;
        }
        tmp_right_value_45 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_239;
            PyObject *tmp_type_arg_90;
            PyTuple_SET_ITEM(tmp_right_value_45, 0, tmp_tuple_element_177);
            CHECK_OBJECT(tmp_class_creation_36__prepared);
            tmp_type_arg_90 = tmp_class_creation_36__prepared;
            tmp_expression_value_239 = BUILTIN_TYPE1(tmp_type_arg_90);
            assert(!(tmp_expression_value_239 == NULL));
            tmp_tuple_element_177 = LOOKUP_ATTRIBUTE(tmp_expression_value_239, mod_consts[190]);
            Py_DECREF(tmp_expression_value_239);
            if (tmp_tuple_element_177 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2850;

                goto tuple_build_exception_59;
            }
            PyTuple_SET_ITEM(tmp_right_value_45, 1, tmp_tuple_element_177);
        }
        goto tuple_build_noexception_59;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_59:;
        Py_DECREF(tmp_right_value_45);
        goto try_except_handler_133;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_59:;
        tmp_raise_value_45 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_45, tmp_right_value_45);
        Py_DECREF(tmp_right_value_45);
        if (tmp_raise_value_45 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2850;

            goto try_except_handler_133;
        }
        exception_type = tmp_raise_type_45;
        Py_INCREF(tmp_raise_type_45);
        exception_value = tmp_raise_value_45;
        exception_lineno = 2850;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_133;
    }
    branch_no_181:;
    goto branch_end_180;
    branch_no_180:;
    {
        PyObject *tmp_assign_source_380;
        tmp_assign_source_380 = PyDict_New();
        assert(tmp_class_creation_36__prepared == NULL);
        tmp_class_creation_36__prepared = tmp_assign_source_380;
    }
    branch_end_180:;
    {
        PyObject *tmp_assign_source_381;
        {
            PyObject *tmp_set_locals_45;
            CHECK_OBJECT(tmp_class_creation_36__prepared);
            tmp_set_locals_45 = tmp_class_creation_36__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__45_DATE_2850 = tmp_set_locals_45;
            Py_INCREF(tmp_set_locals_45);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__45_DATE_2850, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2850;

            goto try_except_handler_135;
        }
        tmp_dictset_value = mod_consts[677];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__45_DATE_2850, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2850;

            goto try_except_handler_135;
        }
        tmp_dictset_value = mod_consts[676];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__45_DATE_2850, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2850;

            goto try_except_handler_135;
        }
        if (isFrameUnusable(cache_frame_0c57d08b3724afe532570ab704c94d5a_44)) {
            Py_XDECREF(cache_frame_0c57d08b3724afe532570ab704c94d5a_44);

#if _DEBUG_REFCOUNTS
            if (cache_frame_0c57d08b3724afe532570ab704c94d5a_44 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_0c57d08b3724afe532570ab704c94d5a_44 = MAKE_FUNCTION_FRAME(codeobj_0c57d08b3724afe532570ab704c94d5a, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_0c57d08b3724afe532570ab704c94d5a_44->m_type_description == NULL);
        frame_0c57d08b3724afe532570ab704c94d5a_44 = cache_frame_0c57d08b3724afe532570ab704c94d5a_44;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_0c57d08b3724afe532570ab704c94d5a_44);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_0c57d08b3724afe532570ab704c94d5a_44) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[676];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__45_DATE_2850, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2854;
            type_description_2 = "o";
            goto frame_exception_exit_44;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_0c57d08b3724afe532570ab704c94d5a_44);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_43;

        frame_exception_exit_44:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_0c57d08b3724afe532570ab704c94d5a_44);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_0c57d08b3724afe532570ab704c94d5a_44, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_0c57d08b3724afe532570ab704c94d5a_44->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_0c57d08b3724afe532570ab704c94d5a_44, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_0c57d08b3724afe532570ab704c94d5a_44,
            type_description_2,
            outline_44_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_0c57d08b3724afe532570ab704c94d5a_44 == cache_frame_0c57d08b3724afe532570ab704c94d5a_44) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_0c57d08b3724afe532570ab704c94d5a_44);
            cache_frame_0c57d08b3724afe532570ab704c94d5a_44 = NULL;
        }

        assertFrameObject(frame_0c57d08b3724afe532570ab704c94d5a_44);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_43;

        frame_no_exception_43:;
        goto skip_nested_handling_43;
        nested_frame_exit_43:;

        goto try_except_handler_135;
        skip_nested_handling_43:;
        {
            nuitka_bool tmp_condition_result_295;
            PyObject *tmp_cmp_expr_left_45;
            PyObject *tmp_cmp_expr_right_45;
            CHECK_OBJECT(tmp_class_creation_36__bases);
            tmp_cmp_expr_left_45 = tmp_class_creation_36__bases;
            CHECK_OBJECT(tmp_class_creation_36__bases_orig);
            tmp_cmp_expr_right_45 = tmp_class_creation_36__bases_orig;
            tmp_condition_result_295 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_45, tmp_cmp_expr_right_45);
            if (tmp_condition_result_295 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2850;

                goto try_except_handler_135;
            }
            if (tmp_condition_result_295 == NUITKA_BOOL_TRUE) {
                goto branch_yes_182;
            } else {
                goto branch_no_182;
            }
            assert(tmp_condition_result_295 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_182:;
        CHECK_OBJECT(tmp_class_creation_36__bases_orig);
        tmp_dictset_value = tmp_class_creation_36__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__45_DATE_2850, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2850;

            goto try_except_handler_135;
        }
        branch_no_182:;
        {
            PyObject *tmp_assign_source_382;
            PyObject *tmp_called_value_146;
            PyObject *tmp_args_value_90;
            PyObject *tmp_tuple_element_178;
            PyObject *tmp_kwargs_value_90;
            CHECK_OBJECT(tmp_class_creation_36__metaclass);
            tmp_called_value_146 = tmp_class_creation_36__metaclass;
            tmp_tuple_element_178 = mod_consts[676];
            tmp_args_value_90 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_90, 0, tmp_tuple_element_178);
            CHECK_OBJECT(tmp_class_creation_36__bases);
            tmp_tuple_element_178 = tmp_class_creation_36__bases;
            PyTuple_SET_ITEM0(tmp_args_value_90, 1, tmp_tuple_element_178);
            tmp_tuple_element_178 = locals_sqlalchemy$sql$sqltypes$$$class__45_DATE_2850;
            PyTuple_SET_ITEM0(tmp_args_value_90, 2, tmp_tuple_element_178);
            CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
            tmp_kwargs_value_90 = tmp_class_creation_36__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2850;
            tmp_assign_source_382 = CALL_FUNCTION(tmp_called_value_146, tmp_args_value_90, tmp_kwargs_value_90);
            Py_DECREF(tmp_args_value_90);
            if (tmp_assign_source_382 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2850;

                goto try_except_handler_135;
            }
            assert(outline_44_var___class__ == NULL);
            outline_44_var___class__ = tmp_assign_source_382;
        }
        CHECK_OBJECT(outline_44_var___class__);
        tmp_assign_source_381 = outline_44_var___class__;
        Py_INCREF(tmp_assign_source_381);
        goto try_return_handler_135;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_135:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__45_DATE_2850);
        locals_sqlalchemy$sql$sqltypes$$$class__45_DATE_2850 = NULL;
        goto try_return_handler_134;
        // Exception handler code:
        try_except_handler_135:;
        exception_keeper_type_133 = exception_type;
        exception_keeper_value_133 = exception_value;
        exception_keeper_tb_133 = exception_tb;
        exception_keeper_lineno_133 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__45_DATE_2850);
        locals_sqlalchemy$sql$sqltypes$$$class__45_DATE_2850 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_133;
        exception_value = exception_keeper_value_133;
        exception_tb = exception_keeper_tb_133;
        exception_lineno = exception_keeper_lineno_133;

        goto try_except_handler_134;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_134:;
        CHECK_OBJECT(outline_44_var___class__);
        Py_DECREF(outline_44_var___class__);
        outline_44_var___class__ = NULL;
        goto outline_result_45;
        // Exception handler code:
        try_except_handler_134:;
        exception_keeper_type_134 = exception_type;
        exception_keeper_value_134 = exception_value;
        exception_keeper_tb_134 = exception_tb;
        exception_keeper_lineno_134 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_134;
        exception_value = exception_keeper_value_134;
        exception_tb = exception_keeper_tb_134;
        exception_lineno = exception_keeper_lineno_134;

        goto outline_exception_45;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_45:;
        exception_lineno = 2850;
        goto try_except_handler_133;
        outline_result_45:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[676], tmp_assign_source_381);
    }
    goto try_end_45;
    // Exception handler code:
    try_except_handler_133:;
    exception_keeper_type_135 = exception_type;
    exception_keeper_value_135 = exception_value;
    exception_keeper_tb_135 = exception_tb;
    exception_keeper_lineno_135 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_36__bases_orig);
    tmp_class_creation_36__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_36__bases);
    tmp_class_creation_36__bases = NULL;
    Py_XDECREF(tmp_class_creation_36__class_decl_dict);
    tmp_class_creation_36__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_36__metaclass);
    tmp_class_creation_36__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_36__prepared);
    tmp_class_creation_36__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_135;
    exception_value = exception_keeper_value_135;
    exception_tb = exception_keeper_tb_135;
    exception_lineno = exception_keeper_lineno_135;

    goto frame_exception_exit_1;
    // End of try:
    try_end_45:;
    CHECK_OBJECT(tmp_class_creation_36__bases_orig);
    Py_DECREF(tmp_class_creation_36__bases_orig);
    tmp_class_creation_36__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_36__bases);
    Py_DECREF(tmp_class_creation_36__bases);
    tmp_class_creation_36__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
    Py_DECREF(tmp_class_creation_36__class_decl_dict);
    tmp_class_creation_36__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_36__metaclass);
    Py_DECREF(tmp_class_creation_36__metaclass);
    tmp_class_creation_36__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_36__prepared);
    Py_DECREF(tmp_class_creation_36__prepared);
    tmp_class_creation_36__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_383;
        PyObject *tmp_tuple_element_179;
        tmp_tuple_element_179 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[105]);

        if (unlikely(tmp_tuple_element_179 == NULL)) {
            tmp_tuple_element_179 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[105]);
        }

        if (tmp_tuple_element_179 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2857;

            goto try_except_handler_136;
        }
        tmp_assign_source_383 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_383, 0, tmp_tuple_element_179);
        assert(tmp_class_creation_37__bases_orig == NULL);
        tmp_class_creation_37__bases_orig = tmp_assign_source_383;
    }
    {
        PyObject *tmp_assign_source_384;
        PyObject *tmp_dircall_arg1_46;
        CHECK_OBJECT(tmp_class_creation_37__bases_orig);
        tmp_dircall_arg1_46 = tmp_class_creation_37__bases_orig;
        Py_INCREF(tmp_dircall_arg1_46);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_46};
            tmp_assign_source_384 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_384 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2857;

            goto try_except_handler_136;
        }
        assert(tmp_class_creation_37__bases == NULL);
        tmp_class_creation_37__bases = tmp_assign_source_384;
    }
    {
        PyObject *tmp_assign_source_385;
        tmp_assign_source_385 = PyDict_New();
        assert(tmp_class_creation_37__class_decl_dict == NULL);
        tmp_class_creation_37__class_decl_dict = tmp_assign_source_385;
    }
    {
        PyObject *tmp_assign_source_386;
        PyObject *tmp_metaclass_value_46;
        bool tmp_condition_result_296;
        PyObject *tmp_key_value_136;
        PyObject *tmp_dict_arg_value_136;
        PyObject *tmp_dict_arg_value_137;
        PyObject *tmp_key_value_137;
        nuitka_bool tmp_condition_result_297;
        int tmp_truth_name_48;
        PyObject *tmp_type_arg_91;
        PyObject *tmp_expression_value_240;
        PyObject *tmp_subscript_value_46;
        PyObject *tmp_bases_value_46;
        tmp_key_value_136 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
        tmp_dict_arg_value_136 = tmp_class_creation_37__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_136, tmp_key_value_136);
        assert(!(tmp_res == -1));
        tmp_condition_result_296 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_296 != false) {
            goto condexpr_true_114;
        } else {
            goto condexpr_false_114;
        }
        condexpr_true_114:;
        CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
        tmp_dict_arg_value_137 = tmp_class_creation_37__class_decl_dict;
        tmp_key_value_137 = mod_consts[410];
        tmp_metaclass_value_46 = DICT_GET_ITEM0(tmp_dict_arg_value_137, tmp_key_value_137);
        if (tmp_metaclass_value_46 == NULL) {
            tmp_metaclass_value_46 = Py_None;
        }
        assert(!(tmp_metaclass_value_46 == NULL));
        Py_INCREF(tmp_metaclass_value_46);
        goto condexpr_end_114;
        condexpr_false_114:;
        CHECK_OBJECT(tmp_class_creation_37__bases);
        tmp_truth_name_48 = CHECK_IF_TRUE(tmp_class_creation_37__bases);
        if (tmp_truth_name_48 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2857;

            goto try_except_handler_136;
        }
        tmp_condition_result_297 = tmp_truth_name_48 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_297 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_115;
        } else {
            goto condexpr_false_115;
        }
        condexpr_true_115:;
        CHECK_OBJECT(tmp_class_creation_37__bases);
        tmp_expression_value_240 = tmp_class_creation_37__bases;
        tmp_subscript_value_46 = mod_consts[52];
        tmp_type_arg_91 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_240, tmp_subscript_value_46, 0);
        if (tmp_type_arg_91 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2857;

            goto try_except_handler_136;
        }
        tmp_metaclass_value_46 = BUILTIN_TYPE1(tmp_type_arg_91);
        Py_DECREF(tmp_type_arg_91);
        if (tmp_metaclass_value_46 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2857;

            goto try_except_handler_136;
        }
        goto condexpr_end_115;
        condexpr_false_115:;
        tmp_metaclass_value_46 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_46);
        condexpr_end_115:;
        condexpr_end_114:;
        CHECK_OBJECT(tmp_class_creation_37__bases);
        tmp_bases_value_46 = tmp_class_creation_37__bases;
        tmp_assign_source_386 = SELECT_METACLASS(tmp_metaclass_value_46, tmp_bases_value_46);
        Py_DECREF(tmp_metaclass_value_46);
        if (tmp_assign_source_386 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2857;

            goto try_except_handler_136;
        }
        assert(tmp_class_creation_37__metaclass == NULL);
        tmp_class_creation_37__metaclass = tmp_assign_source_386;
    }
    {
        bool tmp_condition_result_298;
        PyObject *tmp_key_value_138;
        PyObject *tmp_dict_arg_value_138;
        tmp_key_value_138 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
        tmp_dict_arg_value_138 = tmp_class_creation_37__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_138, tmp_key_value_138);
        assert(!(tmp_res == -1));
        tmp_condition_result_298 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_298 != false) {
            goto branch_yes_183;
        } else {
            goto branch_no_183;
        }
    }
    branch_yes_183:;
    CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_37__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2857;

        goto try_except_handler_136;
    }
    branch_no_183:;
    {
        nuitka_bool tmp_condition_result_299;
        PyObject *tmp_expression_value_241;
        CHECK_OBJECT(tmp_class_creation_37__metaclass);
        tmp_expression_value_241 = tmp_class_creation_37__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_241, mod_consts[411]);
        tmp_condition_result_299 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_299 == NUITKA_BOOL_TRUE) {
            goto branch_yes_184;
        } else {
            goto branch_no_184;
        }
    }
    branch_yes_184:;
    {
        PyObject *tmp_assign_source_387;
        PyObject *tmp_called_value_147;
        PyObject *tmp_expression_value_242;
        PyObject *tmp_args_value_91;
        PyObject *tmp_tuple_element_180;
        PyObject *tmp_kwargs_value_91;
        CHECK_OBJECT(tmp_class_creation_37__metaclass);
        tmp_expression_value_242 = tmp_class_creation_37__metaclass;
        tmp_called_value_147 = LOOKUP_ATTRIBUTE(tmp_expression_value_242, mod_consts[411]);
        if (tmp_called_value_147 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2857;

            goto try_except_handler_136;
        }
        tmp_tuple_element_180 = mod_consts[678];
        tmp_args_value_91 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_91, 0, tmp_tuple_element_180);
        CHECK_OBJECT(tmp_class_creation_37__bases);
        tmp_tuple_element_180 = tmp_class_creation_37__bases;
        PyTuple_SET_ITEM0(tmp_args_value_91, 1, tmp_tuple_element_180);
        CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
        tmp_kwargs_value_91 = tmp_class_creation_37__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2857;
        tmp_assign_source_387 = CALL_FUNCTION(tmp_called_value_147, tmp_args_value_91, tmp_kwargs_value_91);
        Py_DECREF(tmp_called_value_147);
        Py_DECREF(tmp_args_value_91);
        if (tmp_assign_source_387 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2857;

            goto try_except_handler_136;
        }
        assert(tmp_class_creation_37__prepared == NULL);
        tmp_class_creation_37__prepared = tmp_assign_source_387;
    }
    {
        bool tmp_condition_result_300;
        PyObject *tmp_operand_value_46;
        PyObject *tmp_expression_value_243;
        CHECK_OBJECT(tmp_class_creation_37__prepared);
        tmp_expression_value_243 = tmp_class_creation_37__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_243, mod_consts[413]);
        tmp_operand_value_46 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_46);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2857;

            goto try_except_handler_136;
        }
        tmp_condition_result_300 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_300 != false) {
            goto branch_yes_185;
        } else {
            goto branch_no_185;
        }
    }
    branch_yes_185:;
    {
        PyObject *tmp_raise_type_46;
        PyObject *tmp_raise_value_46;
        PyObject *tmp_left_value_46;
        PyObject *tmp_right_value_46;
        PyObject *tmp_tuple_element_181;
        PyObject *tmp_getattr_target_46;
        PyObject *tmp_getattr_attr_46;
        PyObject *tmp_getattr_default_46;
        tmp_raise_type_46 = PyExc_TypeError;
        tmp_left_value_46 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_37__metaclass);
        tmp_getattr_target_46 = tmp_class_creation_37__metaclass;
        tmp_getattr_attr_46 = mod_consts[190];
        tmp_getattr_default_46 = mod_consts[415];
        tmp_tuple_element_181 = BUILTIN_GETATTR(tmp_getattr_target_46, tmp_getattr_attr_46, tmp_getattr_default_46);
        if (tmp_tuple_element_181 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2857;

            goto try_except_handler_136;
        }
        tmp_right_value_46 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_244;
            PyObject *tmp_type_arg_92;
            PyTuple_SET_ITEM(tmp_right_value_46, 0, tmp_tuple_element_181);
            CHECK_OBJECT(tmp_class_creation_37__prepared);
            tmp_type_arg_92 = tmp_class_creation_37__prepared;
            tmp_expression_value_244 = BUILTIN_TYPE1(tmp_type_arg_92);
            assert(!(tmp_expression_value_244 == NULL));
            tmp_tuple_element_181 = LOOKUP_ATTRIBUTE(tmp_expression_value_244, mod_consts[190]);
            Py_DECREF(tmp_expression_value_244);
            if (tmp_tuple_element_181 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2857;

                goto tuple_build_exception_60;
            }
            PyTuple_SET_ITEM(tmp_right_value_46, 1, tmp_tuple_element_181);
        }
        goto tuple_build_noexception_60;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_60:;
        Py_DECREF(tmp_right_value_46);
        goto try_except_handler_136;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_60:;
        tmp_raise_value_46 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_46, tmp_right_value_46);
        Py_DECREF(tmp_right_value_46);
        if (tmp_raise_value_46 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2857;

            goto try_except_handler_136;
        }
        exception_type = tmp_raise_type_46;
        Py_INCREF(tmp_raise_type_46);
        exception_value = tmp_raise_value_46;
        exception_lineno = 2857;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_136;
    }
    branch_no_185:;
    goto branch_end_184;
    branch_no_184:;
    {
        PyObject *tmp_assign_source_388;
        tmp_assign_source_388 = PyDict_New();
        assert(tmp_class_creation_37__prepared == NULL);
        tmp_class_creation_37__prepared = tmp_assign_source_388;
    }
    branch_end_184:;
    {
        PyObject *tmp_assign_source_389;
        {
            PyObject *tmp_set_locals_46;
            CHECK_OBJECT(tmp_class_creation_37__prepared);
            tmp_set_locals_46 = tmp_class_creation_37__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__46_TIME_2857 = tmp_set_locals_46;
            Py_INCREF(tmp_set_locals_46);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__46_TIME_2857, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2857;

            goto try_except_handler_138;
        }
        tmp_dictset_value = mod_consts[679];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__46_TIME_2857, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2857;

            goto try_except_handler_138;
        }
        tmp_dictset_value = mod_consts[678];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__46_TIME_2857, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2857;

            goto try_except_handler_138;
        }
        if (isFrameUnusable(cache_frame_e299163180ce2dbf407f9be39be4d965_45)) {
            Py_XDECREF(cache_frame_e299163180ce2dbf407f9be39be4d965_45);

#if _DEBUG_REFCOUNTS
            if (cache_frame_e299163180ce2dbf407f9be39be4d965_45 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_e299163180ce2dbf407f9be39be4d965_45 = MAKE_FUNCTION_FRAME(codeobj_e299163180ce2dbf407f9be39be4d965, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_e299163180ce2dbf407f9be39be4d965_45->m_type_description == NULL);
        frame_e299163180ce2dbf407f9be39be4d965_45 = cache_frame_e299163180ce2dbf407f9be39be4d965_45;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_e299163180ce2dbf407f9be39be4d965_45);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_e299163180ce2dbf407f9be39be4d965_45) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[678];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__46_TIME_2857, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2861;
            type_description_2 = "o";
            goto frame_exception_exit_45;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e299163180ce2dbf407f9be39be4d965_45);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_44;

        frame_exception_exit_45:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e299163180ce2dbf407f9be39be4d965_45);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_e299163180ce2dbf407f9be39be4d965_45, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_e299163180ce2dbf407f9be39be4d965_45->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_e299163180ce2dbf407f9be39be4d965_45, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_e299163180ce2dbf407f9be39be4d965_45,
            type_description_2,
            outline_45_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_e299163180ce2dbf407f9be39be4d965_45 == cache_frame_e299163180ce2dbf407f9be39be4d965_45) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_e299163180ce2dbf407f9be39be4d965_45);
            cache_frame_e299163180ce2dbf407f9be39be4d965_45 = NULL;
        }

        assertFrameObject(frame_e299163180ce2dbf407f9be39be4d965_45);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_44;

        frame_no_exception_44:;
        goto skip_nested_handling_44;
        nested_frame_exit_44:;

        goto try_except_handler_138;
        skip_nested_handling_44:;
        {
            nuitka_bool tmp_condition_result_301;
            PyObject *tmp_cmp_expr_left_46;
            PyObject *tmp_cmp_expr_right_46;
            CHECK_OBJECT(tmp_class_creation_37__bases);
            tmp_cmp_expr_left_46 = tmp_class_creation_37__bases;
            CHECK_OBJECT(tmp_class_creation_37__bases_orig);
            tmp_cmp_expr_right_46 = tmp_class_creation_37__bases_orig;
            tmp_condition_result_301 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_46, tmp_cmp_expr_right_46);
            if (tmp_condition_result_301 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2857;

                goto try_except_handler_138;
            }
            if (tmp_condition_result_301 == NUITKA_BOOL_TRUE) {
                goto branch_yes_186;
            } else {
                goto branch_no_186;
            }
            assert(tmp_condition_result_301 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_186:;
        CHECK_OBJECT(tmp_class_creation_37__bases_orig);
        tmp_dictset_value = tmp_class_creation_37__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__46_TIME_2857, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2857;

            goto try_except_handler_138;
        }
        branch_no_186:;
        {
            PyObject *tmp_assign_source_390;
            PyObject *tmp_called_value_148;
            PyObject *tmp_args_value_92;
            PyObject *tmp_tuple_element_182;
            PyObject *tmp_kwargs_value_92;
            CHECK_OBJECT(tmp_class_creation_37__metaclass);
            tmp_called_value_148 = tmp_class_creation_37__metaclass;
            tmp_tuple_element_182 = mod_consts[678];
            tmp_args_value_92 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_92, 0, tmp_tuple_element_182);
            CHECK_OBJECT(tmp_class_creation_37__bases);
            tmp_tuple_element_182 = tmp_class_creation_37__bases;
            PyTuple_SET_ITEM0(tmp_args_value_92, 1, tmp_tuple_element_182);
            tmp_tuple_element_182 = locals_sqlalchemy$sql$sqltypes$$$class__46_TIME_2857;
            PyTuple_SET_ITEM0(tmp_args_value_92, 2, tmp_tuple_element_182);
            CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
            tmp_kwargs_value_92 = tmp_class_creation_37__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2857;
            tmp_assign_source_390 = CALL_FUNCTION(tmp_called_value_148, tmp_args_value_92, tmp_kwargs_value_92);
            Py_DECREF(tmp_args_value_92);
            if (tmp_assign_source_390 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2857;

                goto try_except_handler_138;
            }
            assert(outline_45_var___class__ == NULL);
            outline_45_var___class__ = tmp_assign_source_390;
        }
        CHECK_OBJECT(outline_45_var___class__);
        tmp_assign_source_389 = outline_45_var___class__;
        Py_INCREF(tmp_assign_source_389);
        goto try_return_handler_138;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_138:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__46_TIME_2857);
        locals_sqlalchemy$sql$sqltypes$$$class__46_TIME_2857 = NULL;
        goto try_return_handler_137;
        // Exception handler code:
        try_except_handler_138:;
        exception_keeper_type_136 = exception_type;
        exception_keeper_value_136 = exception_value;
        exception_keeper_tb_136 = exception_tb;
        exception_keeper_lineno_136 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__46_TIME_2857);
        locals_sqlalchemy$sql$sqltypes$$$class__46_TIME_2857 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_136;
        exception_value = exception_keeper_value_136;
        exception_tb = exception_keeper_tb_136;
        exception_lineno = exception_keeper_lineno_136;

        goto try_except_handler_137;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_137:;
        CHECK_OBJECT(outline_45_var___class__);
        Py_DECREF(outline_45_var___class__);
        outline_45_var___class__ = NULL;
        goto outline_result_46;
        // Exception handler code:
        try_except_handler_137:;
        exception_keeper_type_137 = exception_type;
        exception_keeper_value_137 = exception_value;
        exception_keeper_tb_137 = exception_tb;
        exception_keeper_lineno_137 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_137;
        exception_value = exception_keeper_value_137;
        exception_tb = exception_keeper_tb_137;
        exception_lineno = exception_keeper_lineno_137;

        goto outline_exception_46;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_46:;
        exception_lineno = 2857;
        goto try_except_handler_136;
        outline_result_46:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[678], tmp_assign_source_389);
    }
    goto try_end_46;
    // Exception handler code:
    try_except_handler_136:;
    exception_keeper_type_138 = exception_type;
    exception_keeper_value_138 = exception_value;
    exception_keeper_tb_138 = exception_tb;
    exception_keeper_lineno_138 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_37__bases_orig);
    tmp_class_creation_37__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_37__bases);
    tmp_class_creation_37__bases = NULL;
    Py_XDECREF(tmp_class_creation_37__class_decl_dict);
    tmp_class_creation_37__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_37__metaclass);
    tmp_class_creation_37__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_37__prepared);
    tmp_class_creation_37__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_138;
    exception_value = exception_keeper_value_138;
    exception_tb = exception_keeper_tb_138;
    exception_lineno = exception_keeper_lineno_138;

    goto frame_exception_exit_1;
    // End of try:
    try_end_46:;
    CHECK_OBJECT(tmp_class_creation_37__bases_orig);
    Py_DECREF(tmp_class_creation_37__bases_orig);
    tmp_class_creation_37__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_37__bases);
    Py_DECREF(tmp_class_creation_37__bases);
    tmp_class_creation_37__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
    Py_DECREF(tmp_class_creation_37__class_decl_dict);
    tmp_class_creation_37__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_37__metaclass);
    Py_DECREF(tmp_class_creation_37__metaclass);
    tmp_class_creation_37__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_37__prepared);
    Py_DECREF(tmp_class_creation_37__prepared);
    tmp_class_creation_37__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_391;
        PyObject *tmp_tuple_element_183;
        tmp_tuple_element_183 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[452]);

        if (unlikely(tmp_tuple_element_183 == NULL)) {
            tmp_tuple_element_183 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[452]);
        }

        if (tmp_tuple_element_183 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2864;

            goto try_except_handler_139;
        }
        tmp_assign_source_391 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_391, 0, tmp_tuple_element_183);
        assert(tmp_class_creation_38__bases_orig == NULL);
        tmp_class_creation_38__bases_orig = tmp_assign_source_391;
    }
    {
        PyObject *tmp_assign_source_392;
        PyObject *tmp_dircall_arg1_47;
        CHECK_OBJECT(tmp_class_creation_38__bases_orig);
        tmp_dircall_arg1_47 = tmp_class_creation_38__bases_orig;
        Py_INCREF(tmp_dircall_arg1_47);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_47};
            tmp_assign_source_392 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_392 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2864;

            goto try_except_handler_139;
        }
        assert(tmp_class_creation_38__bases == NULL);
        tmp_class_creation_38__bases = tmp_assign_source_392;
    }
    {
        PyObject *tmp_assign_source_393;
        tmp_assign_source_393 = PyDict_New();
        assert(tmp_class_creation_38__class_decl_dict == NULL);
        tmp_class_creation_38__class_decl_dict = tmp_assign_source_393;
    }
    {
        PyObject *tmp_assign_source_394;
        PyObject *tmp_metaclass_value_47;
        bool tmp_condition_result_302;
        PyObject *tmp_key_value_139;
        PyObject *tmp_dict_arg_value_139;
        PyObject *tmp_dict_arg_value_140;
        PyObject *tmp_key_value_140;
        nuitka_bool tmp_condition_result_303;
        int tmp_truth_name_49;
        PyObject *tmp_type_arg_93;
        PyObject *tmp_expression_value_245;
        PyObject *tmp_subscript_value_47;
        PyObject *tmp_bases_value_47;
        tmp_key_value_139 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
        tmp_dict_arg_value_139 = tmp_class_creation_38__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_139, tmp_key_value_139);
        assert(!(tmp_res == -1));
        tmp_condition_result_302 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_302 != false) {
            goto condexpr_true_116;
        } else {
            goto condexpr_false_116;
        }
        condexpr_true_116:;
        CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
        tmp_dict_arg_value_140 = tmp_class_creation_38__class_decl_dict;
        tmp_key_value_140 = mod_consts[410];
        tmp_metaclass_value_47 = DICT_GET_ITEM0(tmp_dict_arg_value_140, tmp_key_value_140);
        if (tmp_metaclass_value_47 == NULL) {
            tmp_metaclass_value_47 = Py_None;
        }
        assert(!(tmp_metaclass_value_47 == NULL));
        Py_INCREF(tmp_metaclass_value_47);
        goto condexpr_end_116;
        condexpr_false_116:;
        CHECK_OBJECT(tmp_class_creation_38__bases);
        tmp_truth_name_49 = CHECK_IF_TRUE(tmp_class_creation_38__bases);
        if (tmp_truth_name_49 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2864;

            goto try_except_handler_139;
        }
        tmp_condition_result_303 = tmp_truth_name_49 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_303 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_117;
        } else {
            goto condexpr_false_117;
        }
        condexpr_true_117:;
        CHECK_OBJECT(tmp_class_creation_38__bases);
        tmp_expression_value_245 = tmp_class_creation_38__bases;
        tmp_subscript_value_47 = mod_consts[52];
        tmp_type_arg_93 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_245, tmp_subscript_value_47, 0);
        if (tmp_type_arg_93 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2864;

            goto try_except_handler_139;
        }
        tmp_metaclass_value_47 = BUILTIN_TYPE1(tmp_type_arg_93);
        Py_DECREF(tmp_type_arg_93);
        if (tmp_metaclass_value_47 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2864;

            goto try_except_handler_139;
        }
        goto condexpr_end_117;
        condexpr_false_117:;
        tmp_metaclass_value_47 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_47);
        condexpr_end_117:;
        condexpr_end_116:;
        CHECK_OBJECT(tmp_class_creation_38__bases);
        tmp_bases_value_47 = tmp_class_creation_38__bases;
        tmp_assign_source_394 = SELECT_METACLASS(tmp_metaclass_value_47, tmp_bases_value_47);
        Py_DECREF(tmp_metaclass_value_47);
        if (tmp_assign_source_394 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2864;

            goto try_except_handler_139;
        }
        assert(tmp_class_creation_38__metaclass == NULL);
        tmp_class_creation_38__metaclass = tmp_assign_source_394;
    }
    {
        bool tmp_condition_result_304;
        PyObject *tmp_key_value_141;
        PyObject *tmp_dict_arg_value_141;
        tmp_key_value_141 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
        tmp_dict_arg_value_141 = tmp_class_creation_38__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_141, tmp_key_value_141);
        assert(!(tmp_res == -1));
        tmp_condition_result_304 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_304 != false) {
            goto branch_yes_187;
        } else {
            goto branch_no_187;
        }
    }
    branch_yes_187:;
    CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_38__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2864;

        goto try_except_handler_139;
    }
    branch_no_187:;
    {
        nuitka_bool tmp_condition_result_305;
        PyObject *tmp_expression_value_246;
        CHECK_OBJECT(tmp_class_creation_38__metaclass);
        tmp_expression_value_246 = tmp_class_creation_38__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_246, mod_consts[411]);
        tmp_condition_result_305 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_305 == NUITKA_BOOL_TRUE) {
            goto branch_yes_188;
        } else {
            goto branch_no_188;
        }
    }
    branch_yes_188:;
    {
        PyObject *tmp_assign_source_395;
        PyObject *tmp_called_value_149;
        PyObject *tmp_expression_value_247;
        PyObject *tmp_args_value_93;
        PyObject *tmp_tuple_element_184;
        PyObject *tmp_kwargs_value_93;
        CHECK_OBJECT(tmp_class_creation_38__metaclass);
        tmp_expression_value_247 = tmp_class_creation_38__metaclass;
        tmp_called_value_149 = LOOKUP_ATTRIBUTE(tmp_expression_value_247, mod_consts[411]);
        if (tmp_called_value_149 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2864;

            goto try_except_handler_139;
        }
        tmp_tuple_element_184 = mod_consts[680];
        tmp_args_value_93 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_93, 0, tmp_tuple_element_184);
        CHECK_OBJECT(tmp_class_creation_38__bases);
        tmp_tuple_element_184 = tmp_class_creation_38__bases;
        PyTuple_SET_ITEM0(tmp_args_value_93, 1, tmp_tuple_element_184);
        CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
        tmp_kwargs_value_93 = tmp_class_creation_38__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2864;
        tmp_assign_source_395 = CALL_FUNCTION(tmp_called_value_149, tmp_args_value_93, tmp_kwargs_value_93);
        Py_DECREF(tmp_called_value_149);
        Py_DECREF(tmp_args_value_93);
        if (tmp_assign_source_395 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2864;

            goto try_except_handler_139;
        }
        assert(tmp_class_creation_38__prepared == NULL);
        tmp_class_creation_38__prepared = tmp_assign_source_395;
    }
    {
        bool tmp_condition_result_306;
        PyObject *tmp_operand_value_47;
        PyObject *tmp_expression_value_248;
        CHECK_OBJECT(tmp_class_creation_38__prepared);
        tmp_expression_value_248 = tmp_class_creation_38__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_248, mod_consts[413]);
        tmp_operand_value_47 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_47);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2864;

            goto try_except_handler_139;
        }
        tmp_condition_result_306 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_306 != false) {
            goto branch_yes_189;
        } else {
            goto branch_no_189;
        }
    }
    branch_yes_189:;
    {
        PyObject *tmp_raise_type_47;
        PyObject *tmp_raise_value_47;
        PyObject *tmp_left_value_47;
        PyObject *tmp_right_value_47;
        PyObject *tmp_tuple_element_185;
        PyObject *tmp_getattr_target_47;
        PyObject *tmp_getattr_attr_47;
        PyObject *tmp_getattr_default_47;
        tmp_raise_type_47 = PyExc_TypeError;
        tmp_left_value_47 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_38__metaclass);
        tmp_getattr_target_47 = tmp_class_creation_38__metaclass;
        tmp_getattr_attr_47 = mod_consts[190];
        tmp_getattr_default_47 = mod_consts[415];
        tmp_tuple_element_185 = BUILTIN_GETATTR(tmp_getattr_target_47, tmp_getattr_attr_47, tmp_getattr_default_47);
        if (tmp_tuple_element_185 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2864;

            goto try_except_handler_139;
        }
        tmp_right_value_47 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_249;
            PyObject *tmp_type_arg_94;
            PyTuple_SET_ITEM(tmp_right_value_47, 0, tmp_tuple_element_185);
            CHECK_OBJECT(tmp_class_creation_38__prepared);
            tmp_type_arg_94 = tmp_class_creation_38__prepared;
            tmp_expression_value_249 = BUILTIN_TYPE1(tmp_type_arg_94);
            assert(!(tmp_expression_value_249 == NULL));
            tmp_tuple_element_185 = LOOKUP_ATTRIBUTE(tmp_expression_value_249, mod_consts[190]);
            Py_DECREF(tmp_expression_value_249);
            if (tmp_tuple_element_185 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2864;

                goto tuple_build_exception_61;
            }
            PyTuple_SET_ITEM(tmp_right_value_47, 1, tmp_tuple_element_185);
        }
        goto tuple_build_noexception_61;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_61:;
        Py_DECREF(tmp_right_value_47);
        goto try_except_handler_139;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_61:;
        tmp_raise_value_47 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_47, tmp_right_value_47);
        Py_DECREF(tmp_right_value_47);
        if (tmp_raise_value_47 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2864;

            goto try_except_handler_139;
        }
        exception_type = tmp_raise_type_47;
        Py_INCREF(tmp_raise_type_47);
        exception_value = tmp_raise_value_47;
        exception_lineno = 2864;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_139;
    }
    branch_no_189:;
    goto branch_end_188;
    branch_no_188:;
    {
        PyObject *tmp_assign_source_396;
        tmp_assign_source_396 = PyDict_New();
        assert(tmp_class_creation_38__prepared == NULL);
        tmp_class_creation_38__prepared = tmp_assign_source_396;
    }
    branch_end_188:;
    {
        PyObject *tmp_assign_source_397;
        {
            PyObject *tmp_set_locals_47;
            CHECK_OBJECT(tmp_class_creation_38__prepared);
            tmp_set_locals_47 = tmp_class_creation_38__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__47_TEXT_2864 = tmp_set_locals_47;
            Py_INCREF(tmp_set_locals_47);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__47_TEXT_2864, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2864;

            goto try_except_handler_141;
        }
        tmp_dictset_value = mod_consts[681];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__47_TEXT_2864, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2864;

            goto try_except_handler_141;
        }
        tmp_dictset_value = mod_consts[680];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__47_TEXT_2864, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2864;

            goto try_except_handler_141;
        }
        if (isFrameUnusable(cache_frame_7b206f3a6494ba4343eb418408a70f2c_46)) {
            Py_XDECREF(cache_frame_7b206f3a6494ba4343eb418408a70f2c_46);

#if _DEBUG_REFCOUNTS
            if (cache_frame_7b206f3a6494ba4343eb418408a70f2c_46 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_7b206f3a6494ba4343eb418408a70f2c_46 = MAKE_FUNCTION_FRAME(codeobj_7b206f3a6494ba4343eb418408a70f2c, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_7b206f3a6494ba4343eb418408a70f2c_46->m_type_description == NULL);
        frame_7b206f3a6494ba4343eb418408a70f2c_46 = cache_frame_7b206f3a6494ba4343eb418408a70f2c_46;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_7b206f3a6494ba4343eb418408a70f2c_46);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_7b206f3a6494ba4343eb418408a70f2c_46) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[680];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__47_TEXT_2864, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2868;
            type_description_2 = "o";
            goto frame_exception_exit_46;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_7b206f3a6494ba4343eb418408a70f2c_46);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_45;

        frame_exception_exit_46:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_7b206f3a6494ba4343eb418408a70f2c_46);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_7b206f3a6494ba4343eb418408a70f2c_46, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_7b206f3a6494ba4343eb418408a70f2c_46->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_7b206f3a6494ba4343eb418408a70f2c_46, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_7b206f3a6494ba4343eb418408a70f2c_46,
            type_description_2,
            outline_46_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_7b206f3a6494ba4343eb418408a70f2c_46 == cache_frame_7b206f3a6494ba4343eb418408a70f2c_46) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_7b206f3a6494ba4343eb418408a70f2c_46);
            cache_frame_7b206f3a6494ba4343eb418408a70f2c_46 = NULL;
        }

        assertFrameObject(frame_7b206f3a6494ba4343eb418408a70f2c_46);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_45;

        frame_no_exception_45:;
        goto skip_nested_handling_45;
        nested_frame_exit_45:;

        goto try_except_handler_141;
        skip_nested_handling_45:;
        {
            nuitka_bool tmp_condition_result_307;
            PyObject *tmp_cmp_expr_left_47;
            PyObject *tmp_cmp_expr_right_47;
            CHECK_OBJECT(tmp_class_creation_38__bases);
            tmp_cmp_expr_left_47 = tmp_class_creation_38__bases;
            CHECK_OBJECT(tmp_class_creation_38__bases_orig);
            tmp_cmp_expr_right_47 = tmp_class_creation_38__bases_orig;
            tmp_condition_result_307 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_47, tmp_cmp_expr_right_47);
            if (tmp_condition_result_307 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2864;

                goto try_except_handler_141;
            }
            if (tmp_condition_result_307 == NUITKA_BOOL_TRUE) {
                goto branch_yes_190;
            } else {
                goto branch_no_190;
            }
            assert(tmp_condition_result_307 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_190:;
        CHECK_OBJECT(tmp_class_creation_38__bases_orig);
        tmp_dictset_value = tmp_class_creation_38__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__47_TEXT_2864, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2864;

            goto try_except_handler_141;
        }
        branch_no_190:;
        {
            PyObject *tmp_assign_source_398;
            PyObject *tmp_called_value_150;
            PyObject *tmp_args_value_94;
            PyObject *tmp_tuple_element_186;
            PyObject *tmp_kwargs_value_94;
            CHECK_OBJECT(tmp_class_creation_38__metaclass);
            tmp_called_value_150 = tmp_class_creation_38__metaclass;
            tmp_tuple_element_186 = mod_consts[680];
            tmp_args_value_94 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_94, 0, tmp_tuple_element_186);
            CHECK_OBJECT(tmp_class_creation_38__bases);
            tmp_tuple_element_186 = tmp_class_creation_38__bases;
            PyTuple_SET_ITEM0(tmp_args_value_94, 1, tmp_tuple_element_186);
            tmp_tuple_element_186 = locals_sqlalchemy$sql$sqltypes$$$class__47_TEXT_2864;
            PyTuple_SET_ITEM0(tmp_args_value_94, 2, tmp_tuple_element_186);
            CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
            tmp_kwargs_value_94 = tmp_class_creation_38__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2864;
            tmp_assign_source_398 = CALL_FUNCTION(tmp_called_value_150, tmp_args_value_94, tmp_kwargs_value_94);
            Py_DECREF(tmp_args_value_94);
            if (tmp_assign_source_398 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2864;

                goto try_except_handler_141;
            }
            assert(outline_46_var___class__ == NULL);
            outline_46_var___class__ = tmp_assign_source_398;
        }
        CHECK_OBJECT(outline_46_var___class__);
        tmp_assign_source_397 = outline_46_var___class__;
        Py_INCREF(tmp_assign_source_397);
        goto try_return_handler_141;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_141:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__47_TEXT_2864);
        locals_sqlalchemy$sql$sqltypes$$$class__47_TEXT_2864 = NULL;
        goto try_return_handler_140;
        // Exception handler code:
        try_except_handler_141:;
        exception_keeper_type_139 = exception_type;
        exception_keeper_value_139 = exception_value;
        exception_keeper_tb_139 = exception_tb;
        exception_keeper_lineno_139 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__47_TEXT_2864);
        locals_sqlalchemy$sql$sqltypes$$$class__47_TEXT_2864 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_139;
        exception_value = exception_keeper_value_139;
        exception_tb = exception_keeper_tb_139;
        exception_lineno = exception_keeper_lineno_139;

        goto try_except_handler_140;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_140:;
        CHECK_OBJECT(outline_46_var___class__);
        Py_DECREF(outline_46_var___class__);
        outline_46_var___class__ = NULL;
        goto outline_result_47;
        // Exception handler code:
        try_except_handler_140:;
        exception_keeper_type_140 = exception_type;
        exception_keeper_value_140 = exception_value;
        exception_keeper_tb_140 = exception_tb;
        exception_keeper_lineno_140 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_140;
        exception_value = exception_keeper_value_140;
        exception_tb = exception_keeper_tb_140;
        exception_lineno = exception_keeper_lineno_140;

        goto outline_exception_47;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_47:;
        exception_lineno = 2864;
        goto try_except_handler_139;
        outline_result_47:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[680], tmp_assign_source_397);
    }
    goto try_end_47;
    // Exception handler code:
    try_except_handler_139:;
    exception_keeper_type_141 = exception_type;
    exception_keeper_value_141 = exception_value;
    exception_keeper_tb_141 = exception_tb;
    exception_keeper_lineno_141 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_38__bases_orig);
    tmp_class_creation_38__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_38__bases);
    tmp_class_creation_38__bases = NULL;
    Py_XDECREF(tmp_class_creation_38__class_decl_dict);
    tmp_class_creation_38__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_38__metaclass);
    tmp_class_creation_38__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_38__prepared);
    tmp_class_creation_38__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_141;
    exception_value = exception_keeper_value_141;
    exception_tb = exception_keeper_tb_141;
    exception_lineno = exception_keeper_lineno_141;

    goto frame_exception_exit_1;
    // End of try:
    try_end_47:;
    CHECK_OBJECT(tmp_class_creation_38__bases_orig);
    Py_DECREF(tmp_class_creation_38__bases_orig);
    tmp_class_creation_38__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_38__bases);
    Py_DECREF(tmp_class_creation_38__bases);
    tmp_class_creation_38__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
    Py_DECREF(tmp_class_creation_38__class_decl_dict);
    tmp_class_creation_38__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_38__metaclass);
    Py_DECREF(tmp_class_creation_38__metaclass);
    tmp_class_creation_38__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_38__prepared);
    Py_DECREF(tmp_class_creation_38__prepared);
    tmp_class_creation_38__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_399;
        PyObject *tmp_tuple_element_187;
        tmp_tuple_element_187 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[452]);

        if (unlikely(tmp_tuple_element_187 == NULL)) {
            tmp_tuple_element_187 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[452]);
        }

        if (tmp_tuple_element_187 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2871;

            goto try_except_handler_142;
        }
        tmp_assign_source_399 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_399, 0, tmp_tuple_element_187);
        assert(tmp_class_creation_39__bases_orig == NULL);
        tmp_class_creation_39__bases_orig = tmp_assign_source_399;
    }
    {
        PyObject *tmp_assign_source_400;
        PyObject *tmp_dircall_arg1_48;
        CHECK_OBJECT(tmp_class_creation_39__bases_orig);
        tmp_dircall_arg1_48 = tmp_class_creation_39__bases_orig;
        Py_INCREF(tmp_dircall_arg1_48);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_48};
            tmp_assign_source_400 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_400 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2871;

            goto try_except_handler_142;
        }
        assert(tmp_class_creation_39__bases == NULL);
        tmp_class_creation_39__bases = tmp_assign_source_400;
    }
    {
        PyObject *tmp_assign_source_401;
        tmp_assign_source_401 = PyDict_New();
        assert(tmp_class_creation_39__class_decl_dict == NULL);
        tmp_class_creation_39__class_decl_dict = tmp_assign_source_401;
    }
    {
        PyObject *tmp_assign_source_402;
        PyObject *tmp_metaclass_value_48;
        bool tmp_condition_result_308;
        PyObject *tmp_key_value_142;
        PyObject *tmp_dict_arg_value_142;
        PyObject *tmp_dict_arg_value_143;
        PyObject *tmp_key_value_143;
        nuitka_bool tmp_condition_result_309;
        int tmp_truth_name_50;
        PyObject *tmp_type_arg_95;
        PyObject *tmp_expression_value_250;
        PyObject *tmp_subscript_value_48;
        PyObject *tmp_bases_value_48;
        tmp_key_value_142 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
        tmp_dict_arg_value_142 = tmp_class_creation_39__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_142, tmp_key_value_142);
        assert(!(tmp_res == -1));
        tmp_condition_result_308 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_308 != false) {
            goto condexpr_true_118;
        } else {
            goto condexpr_false_118;
        }
        condexpr_true_118:;
        CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
        tmp_dict_arg_value_143 = tmp_class_creation_39__class_decl_dict;
        tmp_key_value_143 = mod_consts[410];
        tmp_metaclass_value_48 = DICT_GET_ITEM0(tmp_dict_arg_value_143, tmp_key_value_143);
        if (tmp_metaclass_value_48 == NULL) {
            tmp_metaclass_value_48 = Py_None;
        }
        assert(!(tmp_metaclass_value_48 == NULL));
        Py_INCREF(tmp_metaclass_value_48);
        goto condexpr_end_118;
        condexpr_false_118:;
        CHECK_OBJECT(tmp_class_creation_39__bases);
        tmp_truth_name_50 = CHECK_IF_TRUE(tmp_class_creation_39__bases);
        if (tmp_truth_name_50 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2871;

            goto try_except_handler_142;
        }
        tmp_condition_result_309 = tmp_truth_name_50 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_309 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_119;
        } else {
            goto condexpr_false_119;
        }
        condexpr_true_119:;
        CHECK_OBJECT(tmp_class_creation_39__bases);
        tmp_expression_value_250 = tmp_class_creation_39__bases;
        tmp_subscript_value_48 = mod_consts[52];
        tmp_type_arg_95 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_250, tmp_subscript_value_48, 0);
        if (tmp_type_arg_95 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2871;

            goto try_except_handler_142;
        }
        tmp_metaclass_value_48 = BUILTIN_TYPE1(tmp_type_arg_95);
        Py_DECREF(tmp_type_arg_95);
        if (tmp_metaclass_value_48 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2871;

            goto try_except_handler_142;
        }
        goto condexpr_end_119;
        condexpr_false_119:;
        tmp_metaclass_value_48 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_48);
        condexpr_end_119:;
        condexpr_end_118:;
        CHECK_OBJECT(tmp_class_creation_39__bases);
        tmp_bases_value_48 = tmp_class_creation_39__bases;
        tmp_assign_source_402 = SELECT_METACLASS(tmp_metaclass_value_48, tmp_bases_value_48);
        Py_DECREF(tmp_metaclass_value_48);
        if (tmp_assign_source_402 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2871;

            goto try_except_handler_142;
        }
        assert(tmp_class_creation_39__metaclass == NULL);
        tmp_class_creation_39__metaclass = tmp_assign_source_402;
    }
    {
        bool tmp_condition_result_310;
        PyObject *tmp_key_value_144;
        PyObject *tmp_dict_arg_value_144;
        tmp_key_value_144 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
        tmp_dict_arg_value_144 = tmp_class_creation_39__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_144, tmp_key_value_144);
        assert(!(tmp_res == -1));
        tmp_condition_result_310 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_310 != false) {
            goto branch_yes_191;
        } else {
            goto branch_no_191;
        }
    }
    branch_yes_191:;
    CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_39__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2871;

        goto try_except_handler_142;
    }
    branch_no_191:;
    {
        nuitka_bool tmp_condition_result_311;
        PyObject *tmp_expression_value_251;
        CHECK_OBJECT(tmp_class_creation_39__metaclass);
        tmp_expression_value_251 = tmp_class_creation_39__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_251, mod_consts[411]);
        tmp_condition_result_311 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_311 == NUITKA_BOOL_TRUE) {
            goto branch_yes_192;
        } else {
            goto branch_no_192;
        }
    }
    branch_yes_192:;
    {
        PyObject *tmp_assign_source_403;
        PyObject *tmp_called_value_151;
        PyObject *tmp_expression_value_252;
        PyObject *tmp_args_value_95;
        PyObject *tmp_tuple_element_188;
        PyObject *tmp_kwargs_value_95;
        CHECK_OBJECT(tmp_class_creation_39__metaclass);
        tmp_expression_value_252 = tmp_class_creation_39__metaclass;
        tmp_called_value_151 = LOOKUP_ATTRIBUTE(tmp_expression_value_252, mod_consts[411]);
        if (tmp_called_value_151 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2871;

            goto try_except_handler_142;
        }
        tmp_tuple_element_188 = mod_consts[682];
        tmp_args_value_95 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_95, 0, tmp_tuple_element_188);
        CHECK_OBJECT(tmp_class_creation_39__bases);
        tmp_tuple_element_188 = tmp_class_creation_39__bases;
        PyTuple_SET_ITEM0(tmp_args_value_95, 1, tmp_tuple_element_188);
        CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
        tmp_kwargs_value_95 = tmp_class_creation_39__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2871;
        tmp_assign_source_403 = CALL_FUNCTION(tmp_called_value_151, tmp_args_value_95, tmp_kwargs_value_95);
        Py_DECREF(tmp_called_value_151);
        Py_DECREF(tmp_args_value_95);
        if (tmp_assign_source_403 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2871;

            goto try_except_handler_142;
        }
        assert(tmp_class_creation_39__prepared == NULL);
        tmp_class_creation_39__prepared = tmp_assign_source_403;
    }
    {
        bool tmp_condition_result_312;
        PyObject *tmp_operand_value_48;
        PyObject *tmp_expression_value_253;
        CHECK_OBJECT(tmp_class_creation_39__prepared);
        tmp_expression_value_253 = tmp_class_creation_39__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_253, mod_consts[413]);
        tmp_operand_value_48 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_48);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2871;

            goto try_except_handler_142;
        }
        tmp_condition_result_312 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_312 != false) {
            goto branch_yes_193;
        } else {
            goto branch_no_193;
        }
    }
    branch_yes_193:;
    {
        PyObject *tmp_raise_type_48;
        PyObject *tmp_raise_value_48;
        PyObject *tmp_left_value_48;
        PyObject *tmp_right_value_48;
        PyObject *tmp_tuple_element_189;
        PyObject *tmp_getattr_target_48;
        PyObject *tmp_getattr_attr_48;
        PyObject *tmp_getattr_default_48;
        tmp_raise_type_48 = PyExc_TypeError;
        tmp_left_value_48 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_39__metaclass);
        tmp_getattr_target_48 = tmp_class_creation_39__metaclass;
        tmp_getattr_attr_48 = mod_consts[190];
        tmp_getattr_default_48 = mod_consts[415];
        tmp_tuple_element_189 = BUILTIN_GETATTR(tmp_getattr_target_48, tmp_getattr_attr_48, tmp_getattr_default_48);
        if (tmp_tuple_element_189 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2871;

            goto try_except_handler_142;
        }
        tmp_right_value_48 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_254;
            PyObject *tmp_type_arg_96;
            PyTuple_SET_ITEM(tmp_right_value_48, 0, tmp_tuple_element_189);
            CHECK_OBJECT(tmp_class_creation_39__prepared);
            tmp_type_arg_96 = tmp_class_creation_39__prepared;
            tmp_expression_value_254 = BUILTIN_TYPE1(tmp_type_arg_96);
            assert(!(tmp_expression_value_254 == NULL));
            tmp_tuple_element_189 = LOOKUP_ATTRIBUTE(tmp_expression_value_254, mod_consts[190]);
            Py_DECREF(tmp_expression_value_254);
            if (tmp_tuple_element_189 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2871;

                goto tuple_build_exception_62;
            }
            PyTuple_SET_ITEM(tmp_right_value_48, 1, tmp_tuple_element_189);
        }
        goto tuple_build_noexception_62;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_62:;
        Py_DECREF(tmp_right_value_48);
        goto try_except_handler_142;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_62:;
        tmp_raise_value_48 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_48, tmp_right_value_48);
        Py_DECREF(tmp_right_value_48);
        if (tmp_raise_value_48 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2871;

            goto try_except_handler_142;
        }
        exception_type = tmp_raise_type_48;
        Py_INCREF(tmp_raise_type_48);
        exception_value = tmp_raise_value_48;
        exception_lineno = 2871;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_142;
    }
    branch_no_193:;
    goto branch_end_192;
    branch_no_192:;
    {
        PyObject *tmp_assign_source_404;
        tmp_assign_source_404 = PyDict_New();
        assert(tmp_class_creation_39__prepared == NULL);
        tmp_class_creation_39__prepared = tmp_assign_source_404;
    }
    branch_end_192:;
    {
        PyObject *tmp_assign_source_405;
        {
            PyObject *tmp_set_locals_48;
            CHECK_OBJECT(tmp_class_creation_39__prepared);
            tmp_set_locals_48 = tmp_class_creation_39__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__48_CLOB_2871 = tmp_set_locals_48;
            Py_INCREF(tmp_set_locals_48);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__48_CLOB_2871, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2871;

            goto try_except_handler_144;
        }
        tmp_dictset_value = mod_consts[683];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__48_CLOB_2871, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2871;

            goto try_except_handler_144;
        }
        tmp_dictset_value = mod_consts[682];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__48_CLOB_2871, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2871;

            goto try_except_handler_144;
        }
        if (isFrameUnusable(cache_frame_8f75080c4c2caf8a9ab8abd490624ae2_47)) {
            Py_XDECREF(cache_frame_8f75080c4c2caf8a9ab8abd490624ae2_47);

#if _DEBUG_REFCOUNTS
            if (cache_frame_8f75080c4c2caf8a9ab8abd490624ae2_47 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_8f75080c4c2caf8a9ab8abd490624ae2_47 = MAKE_FUNCTION_FRAME(codeobj_8f75080c4c2caf8a9ab8abd490624ae2, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_8f75080c4c2caf8a9ab8abd490624ae2_47->m_type_description == NULL);
        frame_8f75080c4c2caf8a9ab8abd490624ae2_47 = cache_frame_8f75080c4c2caf8a9ab8abd490624ae2_47;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_8f75080c4c2caf8a9ab8abd490624ae2_47);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_8f75080c4c2caf8a9ab8abd490624ae2_47) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[682];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__48_CLOB_2871, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2878;
            type_description_2 = "o";
            goto frame_exception_exit_47;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_8f75080c4c2caf8a9ab8abd490624ae2_47);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_46;

        frame_exception_exit_47:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_8f75080c4c2caf8a9ab8abd490624ae2_47);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_8f75080c4c2caf8a9ab8abd490624ae2_47, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_8f75080c4c2caf8a9ab8abd490624ae2_47->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_8f75080c4c2caf8a9ab8abd490624ae2_47, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_8f75080c4c2caf8a9ab8abd490624ae2_47,
            type_description_2,
            outline_47_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_8f75080c4c2caf8a9ab8abd490624ae2_47 == cache_frame_8f75080c4c2caf8a9ab8abd490624ae2_47) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_8f75080c4c2caf8a9ab8abd490624ae2_47);
            cache_frame_8f75080c4c2caf8a9ab8abd490624ae2_47 = NULL;
        }

        assertFrameObject(frame_8f75080c4c2caf8a9ab8abd490624ae2_47);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_46;

        frame_no_exception_46:;
        goto skip_nested_handling_46;
        nested_frame_exit_46:;

        goto try_except_handler_144;
        skip_nested_handling_46:;
        {
            nuitka_bool tmp_condition_result_313;
            PyObject *tmp_cmp_expr_left_48;
            PyObject *tmp_cmp_expr_right_48;
            CHECK_OBJECT(tmp_class_creation_39__bases);
            tmp_cmp_expr_left_48 = tmp_class_creation_39__bases;
            CHECK_OBJECT(tmp_class_creation_39__bases_orig);
            tmp_cmp_expr_right_48 = tmp_class_creation_39__bases_orig;
            tmp_condition_result_313 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_48, tmp_cmp_expr_right_48);
            if (tmp_condition_result_313 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2871;

                goto try_except_handler_144;
            }
            if (tmp_condition_result_313 == NUITKA_BOOL_TRUE) {
                goto branch_yes_194;
            } else {
                goto branch_no_194;
            }
            assert(tmp_condition_result_313 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_194:;
        CHECK_OBJECT(tmp_class_creation_39__bases_orig);
        tmp_dictset_value = tmp_class_creation_39__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__48_CLOB_2871, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2871;

            goto try_except_handler_144;
        }
        branch_no_194:;
        {
            PyObject *tmp_assign_source_406;
            PyObject *tmp_called_value_152;
            PyObject *tmp_args_value_96;
            PyObject *tmp_tuple_element_190;
            PyObject *tmp_kwargs_value_96;
            CHECK_OBJECT(tmp_class_creation_39__metaclass);
            tmp_called_value_152 = tmp_class_creation_39__metaclass;
            tmp_tuple_element_190 = mod_consts[682];
            tmp_args_value_96 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_96, 0, tmp_tuple_element_190);
            CHECK_OBJECT(tmp_class_creation_39__bases);
            tmp_tuple_element_190 = tmp_class_creation_39__bases;
            PyTuple_SET_ITEM0(tmp_args_value_96, 1, tmp_tuple_element_190);
            tmp_tuple_element_190 = locals_sqlalchemy$sql$sqltypes$$$class__48_CLOB_2871;
            PyTuple_SET_ITEM0(tmp_args_value_96, 2, tmp_tuple_element_190);
            CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
            tmp_kwargs_value_96 = tmp_class_creation_39__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2871;
            tmp_assign_source_406 = CALL_FUNCTION(tmp_called_value_152, tmp_args_value_96, tmp_kwargs_value_96);
            Py_DECREF(tmp_args_value_96);
            if (tmp_assign_source_406 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2871;

                goto try_except_handler_144;
            }
            assert(outline_47_var___class__ == NULL);
            outline_47_var___class__ = tmp_assign_source_406;
        }
        CHECK_OBJECT(outline_47_var___class__);
        tmp_assign_source_405 = outline_47_var___class__;
        Py_INCREF(tmp_assign_source_405);
        goto try_return_handler_144;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_144:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__48_CLOB_2871);
        locals_sqlalchemy$sql$sqltypes$$$class__48_CLOB_2871 = NULL;
        goto try_return_handler_143;
        // Exception handler code:
        try_except_handler_144:;
        exception_keeper_type_142 = exception_type;
        exception_keeper_value_142 = exception_value;
        exception_keeper_tb_142 = exception_tb;
        exception_keeper_lineno_142 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__48_CLOB_2871);
        locals_sqlalchemy$sql$sqltypes$$$class__48_CLOB_2871 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_142;
        exception_value = exception_keeper_value_142;
        exception_tb = exception_keeper_tb_142;
        exception_lineno = exception_keeper_lineno_142;

        goto try_except_handler_143;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_143:;
        CHECK_OBJECT(outline_47_var___class__);
        Py_DECREF(outline_47_var___class__);
        outline_47_var___class__ = NULL;
        goto outline_result_48;
        // Exception handler code:
        try_except_handler_143:;
        exception_keeper_type_143 = exception_type;
        exception_keeper_value_143 = exception_value;
        exception_keeper_tb_143 = exception_tb;
        exception_keeper_lineno_143 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_143;
        exception_value = exception_keeper_value_143;
        exception_tb = exception_keeper_tb_143;
        exception_lineno = exception_keeper_lineno_143;

        goto outline_exception_48;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_48:;
        exception_lineno = 2871;
        goto try_except_handler_142;
        outline_result_48:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[682], tmp_assign_source_405);
    }
    goto try_end_48;
    // Exception handler code:
    try_except_handler_142:;
    exception_keeper_type_144 = exception_type;
    exception_keeper_value_144 = exception_value;
    exception_keeper_tb_144 = exception_tb;
    exception_keeper_lineno_144 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_39__bases_orig);
    tmp_class_creation_39__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_39__bases);
    tmp_class_creation_39__bases = NULL;
    Py_XDECREF(tmp_class_creation_39__class_decl_dict);
    tmp_class_creation_39__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_39__metaclass);
    tmp_class_creation_39__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_39__prepared);
    tmp_class_creation_39__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_144;
    exception_value = exception_keeper_value_144;
    exception_tb = exception_keeper_tb_144;
    exception_lineno = exception_keeper_lineno_144;

    goto frame_exception_exit_1;
    // End of try:
    try_end_48:;
    CHECK_OBJECT(tmp_class_creation_39__bases_orig);
    Py_DECREF(tmp_class_creation_39__bases_orig);
    tmp_class_creation_39__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_39__bases);
    Py_DECREF(tmp_class_creation_39__bases);
    tmp_class_creation_39__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
    Py_DECREF(tmp_class_creation_39__class_decl_dict);
    tmp_class_creation_39__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_39__metaclass);
    Py_DECREF(tmp_class_creation_39__metaclass);
    tmp_class_creation_39__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_39__prepared);
    Py_DECREF(tmp_class_creation_39__prepared);
    tmp_class_creation_39__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_407;
        PyObject *tmp_tuple_element_191;
        tmp_tuple_element_191 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[215]);

        if (unlikely(tmp_tuple_element_191 == NULL)) {
            tmp_tuple_element_191 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[215]);
        }

        if (tmp_tuple_element_191 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2881;

            goto try_except_handler_145;
        }
        tmp_assign_source_407 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_407, 0, tmp_tuple_element_191);
        assert(tmp_class_creation_40__bases_orig == NULL);
        tmp_class_creation_40__bases_orig = tmp_assign_source_407;
    }
    {
        PyObject *tmp_assign_source_408;
        PyObject *tmp_dircall_arg1_49;
        CHECK_OBJECT(tmp_class_creation_40__bases_orig);
        tmp_dircall_arg1_49 = tmp_class_creation_40__bases_orig;
        Py_INCREF(tmp_dircall_arg1_49);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_49};
            tmp_assign_source_408 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_408 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2881;

            goto try_except_handler_145;
        }
        assert(tmp_class_creation_40__bases == NULL);
        tmp_class_creation_40__bases = tmp_assign_source_408;
    }
    {
        PyObject *tmp_assign_source_409;
        tmp_assign_source_409 = PyDict_New();
        assert(tmp_class_creation_40__class_decl_dict == NULL);
        tmp_class_creation_40__class_decl_dict = tmp_assign_source_409;
    }
    {
        PyObject *tmp_assign_source_410;
        PyObject *tmp_metaclass_value_49;
        bool tmp_condition_result_314;
        PyObject *tmp_key_value_145;
        PyObject *tmp_dict_arg_value_145;
        PyObject *tmp_dict_arg_value_146;
        PyObject *tmp_key_value_146;
        nuitka_bool tmp_condition_result_315;
        int tmp_truth_name_51;
        PyObject *tmp_type_arg_97;
        PyObject *tmp_expression_value_255;
        PyObject *tmp_subscript_value_49;
        PyObject *tmp_bases_value_49;
        tmp_key_value_145 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
        tmp_dict_arg_value_145 = tmp_class_creation_40__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_145, tmp_key_value_145);
        assert(!(tmp_res == -1));
        tmp_condition_result_314 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_314 != false) {
            goto condexpr_true_120;
        } else {
            goto condexpr_false_120;
        }
        condexpr_true_120:;
        CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
        tmp_dict_arg_value_146 = tmp_class_creation_40__class_decl_dict;
        tmp_key_value_146 = mod_consts[410];
        tmp_metaclass_value_49 = DICT_GET_ITEM0(tmp_dict_arg_value_146, tmp_key_value_146);
        if (tmp_metaclass_value_49 == NULL) {
            tmp_metaclass_value_49 = Py_None;
        }
        assert(!(tmp_metaclass_value_49 == NULL));
        Py_INCREF(tmp_metaclass_value_49);
        goto condexpr_end_120;
        condexpr_false_120:;
        CHECK_OBJECT(tmp_class_creation_40__bases);
        tmp_truth_name_51 = CHECK_IF_TRUE(tmp_class_creation_40__bases);
        if (tmp_truth_name_51 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2881;

            goto try_except_handler_145;
        }
        tmp_condition_result_315 = tmp_truth_name_51 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_315 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_121;
        } else {
            goto condexpr_false_121;
        }
        condexpr_true_121:;
        CHECK_OBJECT(tmp_class_creation_40__bases);
        tmp_expression_value_255 = tmp_class_creation_40__bases;
        tmp_subscript_value_49 = mod_consts[52];
        tmp_type_arg_97 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_255, tmp_subscript_value_49, 0);
        if (tmp_type_arg_97 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2881;

            goto try_except_handler_145;
        }
        tmp_metaclass_value_49 = BUILTIN_TYPE1(tmp_type_arg_97);
        Py_DECREF(tmp_type_arg_97);
        if (tmp_metaclass_value_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2881;

            goto try_except_handler_145;
        }
        goto condexpr_end_121;
        condexpr_false_121:;
        tmp_metaclass_value_49 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_49);
        condexpr_end_121:;
        condexpr_end_120:;
        CHECK_OBJECT(tmp_class_creation_40__bases);
        tmp_bases_value_49 = tmp_class_creation_40__bases;
        tmp_assign_source_410 = SELECT_METACLASS(tmp_metaclass_value_49, tmp_bases_value_49);
        Py_DECREF(tmp_metaclass_value_49);
        if (tmp_assign_source_410 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2881;

            goto try_except_handler_145;
        }
        assert(tmp_class_creation_40__metaclass == NULL);
        tmp_class_creation_40__metaclass = tmp_assign_source_410;
    }
    {
        bool tmp_condition_result_316;
        PyObject *tmp_key_value_147;
        PyObject *tmp_dict_arg_value_147;
        tmp_key_value_147 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
        tmp_dict_arg_value_147 = tmp_class_creation_40__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_147, tmp_key_value_147);
        assert(!(tmp_res == -1));
        tmp_condition_result_316 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_316 != false) {
            goto branch_yes_195;
        } else {
            goto branch_no_195;
        }
    }
    branch_yes_195:;
    CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_40__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2881;

        goto try_except_handler_145;
    }
    branch_no_195:;
    {
        nuitka_bool tmp_condition_result_317;
        PyObject *tmp_expression_value_256;
        CHECK_OBJECT(tmp_class_creation_40__metaclass);
        tmp_expression_value_256 = tmp_class_creation_40__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_256, mod_consts[411]);
        tmp_condition_result_317 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_317 == NUITKA_BOOL_TRUE) {
            goto branch_yes_196;
        } else {
            goto branch_no_196;
        }
    }
    branch_yes_196:;
    {
        PyObject *tmp_assign_source_411;
        PyObject *tmp_called_value_153;
        PyObject *tmp_expression_value_257;
        PyObject *tmp_args_value_97;
        PyObject *tmp_tuple_element_192;
        PyObject *tmp_kwargs_value_97;
        CHECK_OBJECT(tmp_class_creation_40__metaclass);
        tmp_expression_value_257 = tmp_class_creation_40__metaclass;
        tmp_called_value_153 = LOOKUP_ATTRIBUTE(tmp_expression_value_257, mod_consts[411]);
        if (tmp_called_value_153 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2881;

            goto try_except_handler_145;
        }
        tmp_tuple_element_192 = mod_consts[684];
        tmp_args_value_97 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_97, 0, tmp_tuple_element_192);
        CHECK_OBJECT(tmp_class_creation_40__bases);
        tmp_tuple_element_192 = tmp_class_creation_40__bases;
        PyTuple_SET_ITEM0(tmp_args_value_97, 1, tmp_tuple_element_192);
        CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
        tmp_kwargs_value_97 = tmp_class_creation_40__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2881;
        tmp_assign_source_411 = CALL_FUNCTION(tmp_called_value_153, tmp_args_value_97, tmp_kwargs_value_97);
        Py_DECREF(tmp_called_value_153);
        Py_DECREF(tmp_args_value_97);
        if (tmp_assign_source_411 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2881;

            goto try_except_handler_145;
        }
        assert(tmp_class_creation_40__prepared == NULL);
        tmp_class_creation_40__prepared = tmp_assign_source_411;
    }
    {
        bool tmp_condition_result_318;
        PyObject *tmp_operand_value_49;
        PyObject *tmp_expression_value_258;
        CHECK_OBJECT(tmp_class_creation_40__prepared);
        tmp_expression_value_258 = tmp_class_creation_40__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_258, mod_consts[413]);
        tmp_operand_value_49 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_49);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2881;

            goto try_except_handler_145;
        }
        tmp_condition_result_318 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_318 != false) {
            goto branch_yes_197;
        } else {
            goto branch_no_197;
        }
    }
    branch_yes_197:;
    {
        PyObject *tmp_raise_type_49;
        PyObject *tmp_raise_value_49;
        PyObject *tmp_left_value_49;
        PyObject *tmp_right_value_49;
        PyObject *tmp_tuple_element_193;
        PyObject *tmp_getattr_target_49;
        PyObject *tmp_getattr_attr_49;
        PyObject *tmp_getattr_default_49;
        tmp_raise_type_49 = PyExc_TypeError;
        tmp_left_value_49 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_40__metaclass);
        tmp_getattr_target_49 = tmp_class_creation_40__metaclass;
        tmp_getattr_attr_49 = mod_consts[190];
        tmp_getattr_default_49 = mod_consts[415];
        tmp_tuple_element_193 = BUILTIN_GETATTR(tmp_getattr_target_49, tmp_getattr_attr_49, tmp_getattr_default_49);
        if (tmp_tuple_element_193 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2881;

            goto try_except_handler_145;
        }
        tmp_right_value_49 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_259;
            PyObject *tmp_type_arg_98;
            PyTuple_SET_ITEM(tmp_right_value_49, 0, tmp_tuple_element_193);
            CHECK_OBJECT(tmp_class_creation_40__prepared);
            tmp_type_arg_98 = tmp_class_creation_40__prepared;
            tmp_expression_value_259 = BUILTIN_TYPE1(tmp_type_arg_98);
            assert(!(tmp_expression_value_259 == NULL));
            tmp_tuple_element_193 = LOOKUP_ATTRIBUTE(tmp_expression_value_259, mod_consts[190]);
            Py_DECREF(tmp_expression_value_259);
            if (tmp_tuple_element_193 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2881;

                goto tuple_build_exception_63;
            }
            PyTuple_SET_ITEM(tmp_right_value_49, 1, tmp_tuple_element_193);
        }
        goto tuple_build_noexception_63;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_63:;
        Py_DECREF(tmp_right_value_49);
        goto try_except_handler_145;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_63:;
        tmp_raise_value_49 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_49, tmp_right_value_49);
        Py_DECREF(tmp_right_value_49);
        if (tmp_raise_value_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2881;

            goto try_except_handler_145;
        }
        exception_type = tmp_raise_type_49;
        Py_INCREF(tmp_raise_type_49);
        exception_value = tmp_raise_value_49;
        exception_lineno = 2881;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_145;
    }
    branch_no_197:;
    goto branch_end_196;
    branch_no_196:;
    {
        PyObject *tmp_assign_source_412;
        tmp_assign_source_412 = PyDict_New();
        assert(tmp_class_creation_40__prepared == NULL);
        tmp_class_creation_40__prepared = tmp_assign_source_412;
    }
    branch_end_196:;
    {
        PyObject *tmp_assign_source_413;
        {
            PyObject *tmp_set_locals_49;
            CHECK_OBJECT(tmp_class_creation_40__prepared);
            tmp_set_locals_49 = tmp_class_creation_40__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__49_VARCHAR_2881 = tmp_set_locals_49;
            Py_INCREF(tmp_set_locals_49);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__49_VARCHAR_2881, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2881;

            goto try_except_handler_147;
        }
        tmp_dictset_value = mod_consts[685];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__49_VARCHAR_2881, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2881;

            goto try_except_handler_147;
        }
        tmp_dictset_value = mod_consts[684];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__49_VARCHAR_2881, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2881;

            goto try_except_handler_147;
        }
        if (isFrameUnusable(cache_frame_835290d5fa19bfe44dae7be164462f32_48)) {
            Py_XDECREF(cache_frame_835290d5fa19bfe44dae7be164462f32_48);

#if _DEBUG_REFCOUNTS
            if (cache_frame_835290d5fa19bfe44dae7be164462f32_48 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_835290d5fa19bfe44dae7be164462f32_48 = MAKE_FUNCTION_FRAME(codeobj_835290d5fa19bfe44dae7be164462f32, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_835290d5fa19bfe44dae7be164462f32_48->m_type_description == NULL);
        frame_835290d5fa19bfe44dae7be164462f32_48 = cache_frame_835290d5fa19bfe44dae7be164462f32_48;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_835290d5fa19bfe44dae7be164462f32_48);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_835290d5fa19bfe44dae7be164462f32_48) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[684];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__49_VARCHAR_2881, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2885;
            type_description_2 = "o";
            goto frame_exception_exit_48;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_835290d5fa19bfe44dae7be164462f32_48);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_47;

        frame_exception_exit_48:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_835290d5fa19bfe44dae7be164462f32_48);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_835290d5fa19bfe44dae7be164462f32_48, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_835290d5fa19bfe44dae7be164462f32_48->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_835290d5fa19bfe44dae7be164462f32_48, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_835290d5fa19bfe44dae7be164462f32_48,
            type_description_2,
            outline_48_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_835290d5fa19bfe44dae7be164462f32_48 == cache_frame_835290d5fa19bfe44dae7be164462f32_48) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_835290d5fa19bfe44dae7be164462f32_48);
            cache_frame_835290d5fa19bfe44dae7be164462f32_48 = NULL;
        }

        assertFrameObject(frame_835290d5fa19bfe44dae7be164462f32_48);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_47;

        frame_no_exception_47:;
        goto skip_nested_handling_47;
        nested_frame_exit_47:;

        goto try_except_handler_147;
        skip_nested_handling_47:;
        {
            nuitka_bool tmp_condition_result_319;
            PyObject *tmp_cmp_expr_left_49;
            PyObject *tmp_cmp_expr_right_49;
            CHECK_OBJECT(tmp_class_creation_40__bases);
            tmp_cmp_expr_left_49 = tmp_class_creation_40__bases;
            CHECK_OBJECT(tmp_class_creation_40__bases_orig);
            tmp_cmp_expr_right_49 = tmp_class_creation_40__bases_orig;
            tmp_condition_result_319 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_49, tmp_cmp_expr_right_49);
            if (tmp_condition_result_319 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2881;

                goto try_except_handler_147;
            }
            if (tmp_condition_result_319 == NUITKA_BOOL_TRUE) {
                goto branch_yes_198;
            } else {
                goto branch_no_198;
            }
            assert(tmp_condition_result_319 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_198:;
        CHECK_OBJECT(tmp_class_creation_40__bases_orig);
        tmp_dictset_value = tmp_class_creation_40__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__49_VARCHAR_2881, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2881;

            goto try_except_handler_147;
        }
        branch_no_198:;
        {
            PyObject *tmp_assign_source_414;
            PyObject *tmp_called_value_154;
            PyObject *tmp_args_value_98;
            PyObject *tmp_tuple_element_194;
            PyObject *tmp_kwargs_value_98;
            CHECK_OBJECT(tmp_class_creation_40__metaclass);
            tmp_called_value_154 = tmp_class_creation_40__metaclass;
            tmp_tuple_element_194 = mod_consts[684];
            tmp_args_value_98 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_98, 0, tmp_tuple_element_194);
            CHECK_OBJECT(tmp_class_creation_40__bases);
            tmp_tuple_element_194 = tmp_class_creation_40__bases;
            PyTuple_SET_ITEM0(tmp_args_value_98, 1, tmp_tuple_element_194);
            tmp_tuple_element_194 = locals_sqlalchemy$sql$sqltypes$$$class__49_VARCHAR_2881;
            PyTuple_SET_ITEM0(tmp_args_value_98, 2, tmp_tuple_element_194);
            CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
            tmp_kwargs_value_98 = tmp_class_creation_40__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2881;
            tmp_assign_source_414 = CALL_FUNCTION(tmp_called_value_154, tmp_args_value_98, tmp_kwargs_value_98);
            Py_DECREF(tmp_args_value_98);
            if (tmp_assign_source_414 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2881;

                goto try_except_handler_147;
            }
            assert(outline_48_var___class__ == NULL);
            outline_48_var___class__ = tmp_assign_source_414;
        }
        CHECK_OBJECT(outline_48_var___class__);
        tmp_assign_source_413 = outline_48_var___class__;
        Py_INCREF(tmp_assign_source_413);
        goto try_return_handler_147;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_147:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__49_VARCHAR_2881);
        locals_sqlalchemy$sql$sqltypes$$$class__49_VARCHAR_2881 = NULL;
        goto try_return_handler_146;
        // Exception handler code:
        try_except_handler_147:;
        exception_keeper_type_145 = exception_type;
        exception_keeper_value_145 = exception_value;
        exception_keeper_tb_145 = exception_tb;
        exception_keeper_lineno_145 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__49_VARCHAR_2881);
        locals_sqlalchemy$sql$sqltypes$$$class__49_VARCHAR_2881 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_145;
        exception_value = exception_keeper_value_145;
        exception_tb = exception_keeper_tb_145;
        exception_lineno = exception_keeper_lineno_145;

        goto try_except_handler_146;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_146:;
        CHECK_OBJECT(outline_48_var___class__);
        Py_DECREF(outline_48_var___class__);
        outline_48_var___class__ = NULL;
        goto outline_result_49;
        // Exception handler code:
        try_except_handler_146:;
        exception_keeper_type_146 = exception_type;
        exception_keeper_value_146 = exception_value;
        exception_keeper_tb_146 = exception_tb;
        exception_keeper_lineno_146 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_146;
        exception_value = exception_keeper_value_146;
        exception_tb = exception_keeper_tb_146;
        exception_lineno = exception_keeper_lineno_146;

        goto outline_exception_49;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_49:;
        exception_lineno = 2881;
        goto try_except_handler_145;
        outline_result_49:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[684], tmp_assign_source_413);
    }
    goto try_end_49;
    // Exception handler code:
    try_except_handler_145:;
    exception_keeper_type_147 = exception_type;
    exception_keeper_value_147 = exception_value;
    exception_keeper_tb_147 = exception_tb;
    exception_keeper_lineno_147 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_40__bases_orig);
    tmp_class_creation_40__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_40__bases);
    tmp_class_creation_40__bases = NULL;
    Py_XDECREF(tmp_class_creation_40__class_decl_dict);
    tmp_class_creation_40__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_40__metaclass);
    tmp_class_creation_40__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_40__prepared);
    tmp_class_creation_40__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_147;
    exception_value = exception_keeper_value_147;
    exception_tb = exception_keeper_tb_147;
    exception_lineno = exception_keeper_lineno_147;

    goto frame_exception_exit_1;
    // End of try:
    try_end_49:;
    CHECK_OBJECT(tmp_class_creation_40__bases_orig);
    Py_DECREF(tmp_class_creation_40__bases_orig);
    tmp_class_creation_40__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_40__bases);
    Py_DECREF(tmp_class_creation_40__bases);
    tmp_class_creation_40__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
    Py_DECREF(tmp_class_creation_40__class_decl_dict);
    tmp_class_creation_40__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_40__metaclass);
    Py_DECREF(tmp_class_creation_40__metaclass);
    tmp_class_creation_40__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_40__prepared);
    Py_DECREF(tmp_class_creation_40__prepared);
    tmp_class_creation_40__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_415;
        PyObject *tmp_tuple_element_195;
        tmp_tuple_element_195 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[65]);

        if (unlikely(tmp_tuple_element_195 == NULL)) {
            tmp_tuple_element_195 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[65]);
        }

        if (tmp_tuple_element_195 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2888;

            goto try_except_handler_148;
        }
        tmp_assign_source_415 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_415, 0, tmp_tuple_element_195);
        assert(tmp_class_creation_41__bases_orig == NULL);
        tmp_class_creation_41__bases_orig = tmp_assign_source_415;
    }
    {
        PyObject *tmp_assign_source_416;
        PyObject *tmp_dircall_arg1_50;
        CHECK_OBJECT(tmp_class_creation_41__bases_orig);
        tmp_dircall_arg1_50 = tmp_class_creation_41__bases_orig;
        Py_INCREF(tmp_dircall_arg1_50);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_50};
            tmp_assign_source_416 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_416 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2888;

            goto try_except_handler_148;
        }
        assert(tmp_class_creation_41__bases == NULL);
        tmp_class_creation_41__bases = tmp_assign_source_416;
    }
    {
        PyObject *tmp_assign_source_417;
        tmp_assign_source_417 = PyDict_New();
        assert(tmp_class_creation_41__class_decl_dict == NULL);
        tmp_class_creation_41__class_decl_dict = tmp_assign_source_417;
    }
    {
        PyObject *tmp_assign_source_418;
        PyObject *tmp_metaclass_value_50;
        bool tmp_condition_result_320;
        PyObject *tmp_key_value_148;
        PyObject *tmp_dict_arg_value_148;
        PyObject *tmp_dict_arg_value_149;
        PyObject *tmp_key_value_149;
        nuitka_bool tmp_condition_result_321;
        int tmp_truth_name_52;
        PyObject *tmp_type_arg_99;
        PyObject *tmp_expression_value_260;
        PyObject *tmp_subscript_value_50;
        PyObject *tmp_bases_value_50;
        tmp_key_value_148 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_41__class_decl_dict);
        tmp_dict_arg_value_148 = tmp_class_creation_41__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_148, tmp_key_value_148);
        assert(!(tmp_res == -1));
        tmp_condition_result_320 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_320 != false) {
            goto condexpr_true_122;
        } else {
            goto condexpr_false_122;
        }
        condexpr_true_122:;
        CHECK_OBJECT(tmp_class_creation_41__class_decl_dict);
        tmp_dict_arg_value_149 = tmp_class_creation_41__class_decl_dict;
        tmp_key_value_149 = mod_consts[410];
        tmp_metaclass_value_50 = DICT_GET_ITEM0(tmp_dict_arg_value_149, tmp_key_value_149);
        if (tmp_metaclass_value_50 == NULL) {
            tmp_metaclass_value_50 = Py_None;
        }
        assert(!(tmp_metaclass_value_50 == NULL));
        Py_INCREF(tmp_metaclass_value_50);
        goto condexpr_end_122;
        condexpr_false_122:;
        CHECK_OBJECT(tmp_class_creation_41__bases);
        tmp_truth_name_52 = CHECK_IF_TRUE(tmp_class_creation_41__bases);
        if (tmp_truth_name_52 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2888;

            goto try_except_handler_148;
        }
        tmp_condition_result_321 = tmp_truth_name_52 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_321 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_123;
        } else {
            goto condexpr_false_123;
        }
        condexpr_true_123:;
        CHECK_OBJECT(tmp_class_creation_41__bases);
        tmp_expression_value_260 = tmp_class_creation_41__bases;
        tmp_subscript_value_50 = mod_consts[52];
        tmp_type_arg_99 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_260, tmp_subscript_value_50, 0);
        if (tmp_type_arg_99 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2888;

            goto try_except_handler_148;
        }
        tmp_metaclass_value_50 = BUILTIN_TYPE1(tmp_type_arg_99);
        Py_DECREF(tmp_type_arg_99);
        if (tmp_metaclass_value_50 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2888;

            goto try_except_handler_148;
        }
        goto condexpr_end_123;
        condexpr_false_123:;
        tmp_metaclass_value_50 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_50);
        condexpr_end_123:;
        condexpr_end_122:;
        CHECK_OBJECT(tmp_class_creation_41__bases);
        tmp_bases_value_50 = tmp_class_creation_41__bases;
        tmp_assign_source_418 = SELECT_METACLASS(tmp_metaclass_value_50, tmp_bases_value_50);
        Py_DECREF(tmp_metaclass_value_50);
        if (tmp_assign_source_418 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2888;

            goto try_except_handler_148;
        }
        assert(tmp_class_creation_41__metaclass == NULL);
        tmp_class_creation_41__metaclass = tmp_assign_source_418;
    }
    {
        bool tmp_condition_result_322;
        PyObject *tmp_key_value_150;
        PyObject *tmp_dict_arg_value_150;
        tmp_key_value_150 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_41__class_decl_dict);
        tmp_dict_arg_value_150 = tmp_class_creation_41__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_150, tmp_key_value_150);
        assert(!(tmp_res == -1));
        tmp_condition_result_322 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_322 != false) {
            goto branch_yes_199;
        } else {
            goto branch_no_199;
        }
    }
    branch_yes_199:;
    CHECK_OBJECT(tmp_class_creation_41__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_41__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2888;

        goto try_except_handler_148;
    }
    branch_no_199:;
    {
        nuitka_bool tmp_condition_result_323;
        PyObject *tmp_expression_value_261;
        CHECK_OBJECT(tmp_class_creation_41__metaclass);
        tmp_expression_value_261 = tmp_class_creation_41__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_261, mod_consts[411]);
        tmp_condition_result_323 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_323 == NUITKA_BOOL_TRUE) {
            goto branch_yes_200;
        } else {
            goto branch_no_200;
        }
    }
    branch_yes_200:;
    {
        PyObject *tmp_assign_source_419;
        PyObject *tmp_called_value_155;
        PyObject *tmp_expression_value_262;
        PyObject *tmp_args_value_99;
        PyObject *tmp_tuple_element_196;
        PyObject *tmp_kwargs_value_99;
        CHECK_OBJECT(tmp_class_creation_41__metaclass);
        tmp_expression_value_262 = tmp_class_creation_41__metaclass;
        tmp_called_value_155 = LOOKUP_ATTRIBUTE(tmp_expression_value_262, mod_consts[411]);
        if (tmp_called_value_155 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2888;

            goto try_except_handler_148;
        }
        tmp_tuple_element_196 = mod_consts[686];
        tmp_args_value_99 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_99, 0, tmp_tuple_element_196);
        CHECK_OBJECT(tmp_class_creation_41__bases);
        tmp_tuple_element_196 = tmp_class_creation_41__bases;
        PyTuple_SET_ITEM0(tmp_args_value_99, 1, tmp_tuple_element_196);
        CHECK_OBJECT(tmp_class_creation_41__class_decl_dict);
        tmp_kwargs_value_99 = tmp_class_creation_41__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2888;
        tmp_assign_source_419 = CALL_FUNCTION(tmp_called_value_155, tmp_args_value_99, tmp_kwargs_value_99);
        Py_DECREF(tmp_called_value_155);
        Py_DECREF(tmp_args_value_99);
        if (tmp_assign_source_419 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2888;

            goto try_except_handler_148;
        }
        assert(tmp_class_creation_41__prepared == NULL);
        tmp_class_creation_41__prepared = tmp_assign_source_419;
    }
    {
        bool tmp_condition_result_324;
        PyObject *tmp_operand_value_50;
        PyObject *tmp_expression_value_263;
        CHECK_OBJECT(tmp_class_creation_41__prepared);
        tmp_expression_value_263 = tmp_class_creation_41__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_263, mod_consts[413]);
        tmp_operand_value_50 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_50);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2888;

            goto try_except_handler_148;
        }
        tmp_condition_result_324 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_324 != false) {
            goto branch_yes_201;
        } else {
            goto branch_no_201;
        }
    }
    branch_yes_201:;
    {
        PyObject *tmp_raise_type_50;
        PyObject *tmp_raise_value_50;
        PyObject *tmp_left_value_50;
        PyObject *tmp_right_value_50;
        PyObject *tmp_tuple_element_197;
        PyObject *tmp_getattr_target_50;
        PyObject *tmp_getattr_attr_50;
        PyObject *tmp_getattr_default_50;
        tmp_raise_type_50 = PyExc_TypeError;
        tmp_left_value_50 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_41__metaclass);
        tmp_getattr_target_50 = tmp_class_creation_41__metaclass;
        tmp_getattr_attr_50 = mod_consts[190];
        tmp_getattr_default_50 = mod_consts[415];
        tmp_tuple_element_197 = BUILTIN_GETATTR(tmp_getattr_target_50, tmp_getattr_attr_50, tmp_getattr_default_50);
        if (tmp_tuple_element_197 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2888;

            goto try_except_handler_148;
        }
        tmp_right_value_50 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_264;
            PyObject *tmp_type_arg_100;
            PyTuple_SET_ITEM(tmp_right_value_50, 0, tmp_tuple_element_197);
            CHECK_OBJECT(tmp_class_creation_41__prepared);
            tmp_type_arg_100 = tmp_class_creation_41__prepared;
            tmp_expression_value_264 = BUILTIN_TYPE1(tmp_type_arg_100);
            assert(!(tmp_expression_value_264 == NULL));
            tmp_tuple_element_197 = LOOKUP_ATTRIBUTE(tmp_expression_value_264, mod_consts[190]);
            Py_DECREF(tmp_expression_value_264);
            if (tmp_tuple_element_197 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2888;

                goto tuple_build_exception_64;
            }
            PyTuple_SET_ITEM(tmp_right_value_50, 1, tmp_tuple_element_197);
        }
        goto tuple_build_noexception_64;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_64:;
        Py_DECREF(tmp_right_value_50);
        goto try_except_handler_148;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_64:;
        tmp_raise_value_50 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_50, tmp_right_value_50);
        Py_DECREF(tmp_right_value_50);
        if (tmp_raise_value_50 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2888;

            goto try_except_handler_148;
        }
        exception_type = tmp_raise_type_50;
        Py_INCREF(tmp_raise_type_50);
        exception_value = tmp_raise_value_50;
        exception_lineno = 2888;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_148;
    }
    branch_no_201:;
    goto branch_end_200;
    branch_no_200:;
    {
        PyObject *tmp_assign_source_420;
        tmp_assign_source_420 = PyDict_New();
        assert(tmp_class_creation_41__prepared == NULL);
        tmp_class_creation_41__prepared = tmp_assign_source_420;
    }
    branch_end_200:;
    {
        PyObject *tmp_assign_source_421;
        {
            PyObject *tmp_set_locals_50;
            CHECK_OBJECT(tmp_class_creation_41__prepared);
            tmp_set_locals_50 = tmp_class_creation_41__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__50_NVARCHAR_2888 = tmp_set_locals_50;
            Py_INCREF(tmp_set_locals_50);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__50_NVARCHAR_2888, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2888;

            goto try_except_handler_150;
        }
        tmp_dictset_value = mod_consts[687];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__50_NVARCHAR_2888, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2888;

            goto try_except_handler_150;
        }
        tmp_dictset_value = mod_consts[686];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__50_NVARCHAR_2888, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2888;

            goto try_except_handler_150;
        }
        if (isFrameUnusable(cache_frame_8a4e565f357d6055f4c0b5024adbf69f_49)) {
            Py_XDECREF(cache_frame_8a4e565f357d6055f4c0b5024adbf69f_49);

#if _DEBUG_REFCOUNTS
            if (cache_frame_8a4e565f357d6055f4c0b5024adbf69f_49 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_8a4e565f357d6055f4c0b5024adbf69f_49 = MAKE_FUNCTION_FRAME(codeobj_8a4e565f357d6055f4c0b5024adbf69f, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_8a4e565f357d6055f4c0b5024adbf69f_49->m_type_description == NULL);
        frame_8a4e565f357d6055f4c0b5024adbf69f_49 = cache_frame_8a4e565f357d6055f4c0b5024adbf69f_49;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_8a4e565f357d6055f4c0b5024adbf69f_49);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_8a4e565f357d6055f4c0b5024adbf69f_49) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[686];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__50_NVARCHAR_2888, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2892;
            type_description_2 = "o";
            goto frame_exception_exit_49;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_8a4e565f357d6055f4c0b5024adbf69f_49);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_48;

        frame_exception_exit_49:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_8a4e565f357d6055f4c0b5024adbf69f_49);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_8a4e565f357d6055f4c0b5024adbf69f_49, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_8a4e565f357d6055f4c0b5024adbf69f_49->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_8a4e565f357d6055f4c0b5024adbf69f_49, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_8a4e565f357d6055f4c0b5024adbf69f_49,
            type_description_2,
            outline_49_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_8a4e565f357d6055f4c0b5024adbf69f_49 == cache_frame_8a4e565f357d6055f4c0b5024adbf69f_49) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_8a4e565f357d6055f4c0b5024adbf69f_49);
            cache_frame_8a4e565f357d6055f4c0b5024adbf69f_49 = NULL;
        }

        assertFrameObject(frame_8a4e565f357d6055f4c0b5024adbf69f_49);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_48;

        frame_no_exception_48:;
        goto skip_nested_handling_48;
        nested_frame_exit_48:;

        goto try_except_handler_150;
        skip_nested_handling_48:;
        {
            nuitka_bool tmp_condition_result_325;
            PyObject *tmp_cmp_expr_left_50;
            PyObject *tmp_cmp_expr_right_50;
            CHECK_OBJECT(tmp_class_creation_41__bases);
            tmp_cmp_expr_left_50 = tmp_class_creation_41__bases;
            CHECK_OBJECT(tmp_class_creation_41__bases_orig);
            tmp_cmp_expr_right_50 = tmp_class_creation_41__bases_orig;
            tmp_condition_result_325 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_50, tmp_cmp_expr_right_50);
            if (tmp_condition_result_325 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2888;

                goto try_except_handler_150;
            }
            if (tmp_condition_result_325 == NUITKA_BOOL_TRUE) {
                goto branch_yes_202;
            } else {
                goto branch_no_202;
            }
            assert(tmp_condition_result_325 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_202:;
        CHECK_OBJECT(tmp_class_creation_41__bases_orig);
        tmp_dictset_value = tmp_class_creation_41__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__50_NVARCHAR_2888, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2888;

            goto try_except_handler_150;
        }
        branch_no_202:;
        {
            PyObject *tmp_assign_source_422;
            PyObject *tmp_called_value_156;
            PyObject *tmp_args_value_100;
            PyObject *tmp_tuple_element_198;
            PyObject *tmp_kwargs_value_100;
            CHECK_OBJECT(tmp_class_creation_41__metaclass);
            tmp_called_value_156 = tmp_class_creation_41__metaclass;
            tmp_tuple_element_198 = mod_consts[686];
            tmp_args_value_100 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_100, 0, tmp_tuple_element_198);
            CHECK_OBJECT(tmp_class_creation_41__bases);
            tmp_tuple_element_198 = tmp_class_creation_41__bases;
            PyTuple_SET_ITEM0(tmp_args_value_100, 1, tmp_tuple_element_198);
            tmp_tuple_element_198 = locals_sqlalchemy$sql$sqltypes$$$class__50_NVARCHAR_2888;
            PyTuple_SET_ITEM0(tmp_args_value_100, 2, tmp_tuple_element_198);
            CHECK_OBJECT(tmp_class_creation_41__class_decl_dict);
            tmp_kwargs_value_100 = tmp_class_creation_41__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2888;
            tmp_assign_source_422 = CALL_FUNCTION(tmp_called_value_156, tmp_args_value_100, tmp_kwargs_value_100);
            Py_DECREF(tmp_args_value_100);
            if (tmp_assign_source_422 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2888;

                goto try_except_handler_150;
            }
            assert(outline_49_var___class__ == NULL);
            outline_49_var___class__ = tmp_assign_source_422;
        }
        CHECK_OBJECT(outline_49_var___class__);
        tmp_assign_source_421 = outline_49_var___class__;
        Py_INCREF(tmp_assign_source_421);
        goto try_return_handler_150;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_150:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__50_NVARCHAR_2888);
        locals_sqlalchemy$sql$sqltypes$$$class__50_NVARCHAR_2888 = NULL;
        goto try_return_handler_149;
        // Exception handler code:
        try_except_handler_150:;
        exception_keeper_type_148 = exception_type;
        exception_keeper_value_148 = exception_value;
        exception_keeper_tb_148 = exception_tb;
        exception_keeper_lineno_148 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__50_NVARCHAR_2888);
        locals_sqlalchemy$sql$sqltypes$$$class__50_NVARCHAR_2888 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_148;
        exception_value = exception_keeper_value_148;
        exception_tb = exception_keeper_tb_148;
        exception_lineno = exception_keeper_lineno_148;

        goto try_except_handler_149;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_149:;
        CHECK_OBJECT(outline_49_var___class__);
        Py_DECREF(outline_49_var___class__);
        outline_49_var___class__ = NULL;
        goto outline_result_50;
        // Exception handler code:
        try_except_handler_149:;
        exception_keeper_type_149 = exception_type;
        exception_keeper_value_149 = exception_value;
        exception_keeper_tb_149 = exception_tb;
        exception_keeper_lineno_149 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_149;
        exception_value = exception_keeper_value_149;
        exception_tb = exception_keeper_tb_149;
        exception_lineno = exception_keeper_lineno_149;

        goto outline_exception_50;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_50:;
        exception_lineno = 2888;
        goto try_except_handler_148;
        outline_result_50:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[686], tmp_assign_source_421);
    }
    goto try_end_50;
    // Exception handler code:
    try_except_handler_148:;
    exception_keeper_type_150 = exception_type;
    exception_keeper_value_150 = exception_value;
    exception_keeper_tb_150 = exception_tb;
    exception_keeper_lineno_150 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_41__bases_orig);
    tmp_class_creation_41__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_41__bases);
    tmp_class_creation_41__bases = NULL;
    Py_XDECREF(tmp_class_creation_41__class_decl_dict);
    tmp_class_creation_41__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_41__metaclass);
    tmp_class_creation_41__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_41__prepared);
    tmp_class_creation_41__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_150;
    exception_value = exception_keeper_value_150;
    exception_tb = exception_keeper_tb_150;
    exception_lineno = exception_keeper_lineno_150;

    goto frame_exception_exit_1;
    // End of try:
    try_end_50:;
    CHECK_OBJECT(tmp_class_creation_41__bases_orig);
    Py_DECREF(tmp_class_creation_41__bases_orig);
    tmp_class_creation_41__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_41__bases);
    Py_DECREF(tmp_class_creation_41__bases);
    tmp_class_creation_41__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_41__class_decl_dict);
    Py_DECREF(tmp_class_creation_41__class_decl_dict);
    tmp_class_creation_41__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_41__metaclass);
    Py_DECREF(tmp_class_creation_41__metaclass);
    tmp_class_creation_41__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_41__prepared);
    Py_DECREF(tmp_class_creation_41__prepared);
    tmp_class_creation_41__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_423;
        PyObject *tmp_tuple_element_199;
        tmp_tuple_element_199 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[215]);

        if (unlikely(tmp_tuple_element_199 == NULL)) {
            tmp_tuple_element_199 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[215]);
        }

        if (tmp_tuple_element_199 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2895;

            goto try_except_handler_151;
        }
        tmp_assign_source_423 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_423, 0, tmp_tuple_element_199);
        assert(tmp_class_creation_42__bases_orig == NULL);
        tmp_class_creation_42__bases_orig = tmp_assign_source_423;
    }
    {
        PyObject *tmp_assign_source_424;
        PyObject *tmp_dircall_arg1_51;
        CHECK_OBJECT(tmp_class_creation_42__bases_orig);
        tmp_dircall_arg1_51 = tmp_class_creation_42__bases_orig;
        Py_INCREF(tmp_dircall_arg1_51);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_51};
            tmp_assign_source_424 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_424 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2895;

            goto try_except_handler_151;
        }
        assert(tmp_class_creation_42__bases == NULL);
        tmp_class_creation_42__bases = tmp_assign_source_424;
    }
    {
        PyObject *tmp_assign_source_425;
        tmp_assign_source_425 = PyDict_New();
        assert(tmp_class_creation_42__class_decl_dict == NULL);
        tmp_class_creation_42__class_decl_dict = tmp_assign_source_425;
    }
    {
        PyObject *tmp_assign_source_426;
        PyObject *tmp_metaclass_value_51;
        bool tmp_condition_result_326;
        PyObject *tmp_key_value_151;
        PyObject *tmp_dict_arg_value_151;
        PyObject *tmp_dict_arg_value_152;
        PyObject *tmp_key_value_152;
        nuitka_bool tmp_condition_result_327;
        int tmp_truth_name_53;
        PyObject *tmp_type_arg_101;
        PyObject *tmp_expression_value_265;
        PyObject *tmp_subscript_value_51;
        PyObject *tmp_bases_value_51;
        tmp_key_value_151 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_42__class_decl_dict);
        tmp_dict_arg_value_151 = tmp_class_creation_42__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_151, tmp_key_value_151);
        assert(!(tmp_res == -1));
        tmp_condition_result_326 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_326 != false) {
            goto condexpr_true_124;
        } else {
            goto condexpr_false_124;
        }
        condexpr_true_124:;
        CHECK_OBJECT(tmp_class_creation_42__class_decl_dict);
        tmp_dict_arg_value_152 = tmp_class_creation_42__class_decl_dict;
        tmp_key_value_152 = mod_consts[410];
        tmp_metaclass_value_51 = DICT_GET_ITEM0(tmp_dict_arg_value_152, tmp_key_value_152);
        if (tmp_metaclass_value_51 == NULL) {
            tmp_metaclass_value_51 = Py_None;
        }
        assert(!(tmp_metaclass_value_51 == NULL));
        Py_INCREF(tmp_metaclass_value_51);
        goto condexpr_end_124;
        condexpr_false_124:;
        CHECK_OBJECT(tmp_class_creation_42__bases);
        tmp_truth_name_53 = CHECK_IF_TRUE(tmp_class_creation_42__bases);
        if (tmp_truth_name_53 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2895;

            goto try_except_handler_151;
        }
        tmp_condition_result_327 = tmp_truth_name_53 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_327 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_125;
        } else {
            goto condexpr_false_125;
        }
        condexpr_true_125:;
        CHECK_OBJECT(tmp_class_creation_42__bases);
        tmp_expression_value_265 = tmp_class_creation_42__bases;
        tmp_subscript_value_51 = mod_consts[52];
        tmp_type_arg_101 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_265, tmp_subscript_value_51, 0);
        if (tmp_type_arg_101 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2895;

            goto try_except_handler_151;
        }
        tmp_metaclass_value_51 = BUILTIN_TYPE1(tmp_type_arg_101);
        Py_DECREF(tmp_type_arg_101);
        if (tmp_metaclass_value_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2895;

            goto try_except_handler_151;
        }
        goto condexpr_end_125;
        condexpr_false_125:;
        tmp_metaclass_value_51 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_51);
        condexpr_end_125:;
        condexpr_end_124:;
        CHECK_OBJECT(tmp_class_creation_42__bases);
        tmp_bases_value_51 = tmp_class_creation_42__bases;
        tmp_assign_source_426 = SELECT_METACLASS(tmp_metaclass_value_51, tmp_bases_value_51);
        Py_DECREF(tmp_metaclass_value_51);
        if (tmp_assign_source_426 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2895;

            goto try_except_handler_151;
        }
        assert(tmp_class_creation_42__metaclass == NULL);
        tmp_class_creation_42__metaclass = tmp_assign_source_426;
    }
    {
        bool tmp_condition_result_328;
        PyObject *tmp_key_value_153;
        PyObject *tmp_dict_arg_value_153;
        tmp_key_value_153 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_42__class_decl_dict);
        tmp_dict_arg_value_153 = tmp_class_creation_42__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_153, tmp_key_value_153);
        assert(!(tmp_res == -1));
        tmp_condition_result_328 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_328 != false) {
            goto branch_yes_203;
        } else {
            goto branch_no_203;
        }
    }
    branch_yes_203:;
    CHECK_OBJECT(tmp_class_creation_42__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_42__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2895;

        goto try_except_handler_151;
    }
    branch_no_203:;
    {
        nuitka_bool tmp_condition_result_329;
        PyObject *tmp_expression_value_266;
        CHECK_OBJECT(tmp_class_creation_42__metaclass);
        tmp_expression_value_266 = tmp_class_creation_42__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_266, mod_consts[411]);
        tmp_condition_result_329 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_329 == NUITKA_BOOL_TRUE) {
            goto branch_yes_204;
        } else {
            goto branch_no_204;
        }
    }
    branch_yes_204:;
    {
        PyObject *tmp_assign_source_427;
        PyObject *tmp_called_value_157;
        PyObject *tmp_expression_value_267;
        PyObject *tmp_args_value_101;
        PyObject *tmp_tuple_element_200;
        PyObject *tmp_kwargs_value_101;
        CHECK_OBJECT(tmp_class_creation_42__metaclass);
        tmp_expression_value_267 = tmp_class_creation_42__metaclass;
        tmp_called_value_157 = LOOKUP_ATTRIBUTE(tmp_expression_value_267, mod_consts[411]);
        if (tmp_called_value_157 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2895;

            goto try_except_handler_151;
        }
        tmp_tuple_element_200 = mod_consts[688];
        tmp_args_value_101 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_101, 0, tmp_tuple_element_200);
        CHECK_OBJECT(tmp_class_creation_42__bases);
        tmp_tuple_element_200 = tmp_class_creation_42__bases;
        PyTuple_SET_ITEM0(tmp_args_value_101, 1, tmp_tuple_element_200);
        CHECK_OBJECT(tmp_class_creation_42__class_decl_dict);
        tmp_kwargs_value_101 = tmp_class_creation_42__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2895;
        tmp_assign_source_427 = CALL_FUNCTION(tmp_called_value_157, tmp_args_value_101, tmp_kwargs_value_101);
        Py_DECREF(tmp_called_value_157);
        Py_DECREF(tmp_args_value_101);
        if (tmp_assign_source_427 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2895;

            goto try_except_handler_151;
        }
        assert(tmp_class_creation_42__prepared == NULL);
        tmp_class_creation_42__prepared = tmp_assign_source_427;
    }
    {
        bool tmp_condition_result_330;
        PyObject *tmp_operand_value_51;
        PyObject *tmp_expression_value_268;
        CHECK_OBJECT(tmp_class_creation_42__prepared);
        tmp_expression_value_268 = tmp_class_creation_42__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_268, mod_consts[413]);
        tmp_operand_value_51 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_51);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2895;

            goto try_except_handler_151;
        }
        tmp_condition_result_330 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_330 != false) {
            goto branch_yes_205;
        } else {
            goto branch_no_205;
        }
    }
    branch_yes_205:;
    {
        PyObject *tmp_raise_type_51;
        PyObject *tmp_raise_value_51;
        PyObject *tmp_left_value_51;
        PyObject *tmp_right_value_51;
        PyObject *tmp_tuple_element_201;
        PyObject *tmp_getattr_target_51;
        PyObject *tmp_getattr_attr_51;
        PyObject *tmp_getattr_default_51;
        tmp_raise_type_51 = PyExc_TypeError;
        tmp_left_value_51 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_42__metaclass);
        tmp_getattr_target_51 = tmp_class_creation_42__metaclass;
        tmp_getattr_attr_51 = mod_consts[190];
        tmp_getattr_default_51 = mod_consts[415];
        tmp_tuple_element_201 = BUILTIN_GETATTR(tmp_getattr_target_51, tmp_getattr_attr_51, tmp_getattr_default_51);
        if (tmp_tuple_element_201 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2895;

            goto try_except_handler_151;
        }
        tmp_right_value_51 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_269;
            PyObject *tmp_type_arg_102;
            PyTuple_SET_ITEM(tmp_right_value_51, 0, tmp_tuple_element_201);
            CHECK_OBJECT(tmp_class_creation_42__prepared);
            tmp_type_arg_102 = tmp_class_creation_42__prepared;
            tmp_expression_value_269 = BUILTIN_TYPE1(tmp_type_arg_102);
            assert(!(tmp_expression_value_269 == NULL));
            tmp_tuple_element_201 = LOOKUP_ATTRIBUTE(tmp_expression_value_269, mod_consts[190]);
            Py_DECREF(tmp_expression_value_269);
            if (tmp_tuple_element_201 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2895;

                goto tuple_build_exception_65;
            }
            PyTuple_SET_ITEM(tmp_right_value_51, 1, tmp_tuple_element_201);
        }
        goto tuple_build_noexception_65;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_65:;
        Py_DECREF(tmp_right_value_51);
        goto try_except_handler_151;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_65:;
        tmp_raise_value_51 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_51, tmp_right_value_51);
        Py_DECREF(tmp_right_value_51);
        if (tmp_raise_value_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2895;

            goto try_except_handler_151;
        }
        exception_type = tmp_raise_type_51;
        Py_INCREF(tmp_raise_type_51);
        exception_value = tmp_raise_value_51;
        exception_lineno = 2895;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_151;
    }
    branch_no_205:;
    goto branch_end_204;
    branch_no_204:;
    {
        PyObject *tmp_assign_source_428;
        tmp_assign_source_428 = PyDict_New();
        assert(tmp_class_creation_42__prepared == NULL);
        tmp_class_creation_42__prepared = tmp_assign_source_428;
    }
    branch_end_204:;
    {
        PyObject *tmp_assign_source_429;
        {
            PyObject *tmp_set_locals_51;
            CHECK_OBJECT(tmp_class_creation_42__prepared);
            tmp_set_locals_51 = tmp_class_creation_42__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__51_CHAR_2895 = tmp_set_locals_51;
            Py_INCREF(tmp_set_locals_51);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__51_CHAR_2895, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2895;

            goto try_except_handler_153;
        }
        tmp_dictset_value = mod_consts[689];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__51_CHAR_2895, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2895;

            goto try_except_handler_153;
        }
        tmp_dictset_value = mod_consts[688];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__51_CHAR_2895, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2895;

            goto try_except_handler_153;
        }
        if (isFrameUnusable(cache_frame_d668942271df1e498746e83d8bf29e1b_50)) {
            Py_XDECREF(cache_frame_d668942271df1e498746e83d8bf29e1b_50);

#if _DEBUG_REFCOUNTS
            if (cache_frame_d668942271df1e498746e83d8bf29e1b_50 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_d668942271df1e498746e83d8bf29e1b_50 = MAKE_FUNCTION_FRAME(codeobj_d668942271df1e498746e83d8bf29e1b, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_d668942271df1e498746e83d8bf29e1b_50->m_type_description == NULL);
        frame_d668942271df1e498746e83d8bf29e1b_50 = cache_frame_d668942271df1e498746e83d8bf29e1b_50;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_d668942271df1e498746e83d8bf29e1b_50);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_d668942271df1e498746e83d8bf29e1b_50) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[688];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__51_CHAR_2895, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2899;
            type_description_2 = "o";
            goto frame_exception_exit_50;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_d668942271df1e498746e83d8bf29e1b_50);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_49;

        frame_exception_exit_50:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_d668942271df1e498746e83d8bf29e1b_50);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_d668942271df1e498746e83d8bf29e1b_50, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_d668942271df1e498746e83d8bf29e1b_50->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_d668942271df1e498746e83d8bf29e1b_50, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_d668942271df1e498746e83d8bf29e1b_50,
            type_description_2,
            outline_50_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_d668942271df1e498746e83d8bf29e1b_50 == cache_frame_d668942271df1e498746e83d8bf29e1b_50) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_d668942271df1e498746e83d8bf29e1b_50);
            cache_frame_d668942271df1e498746e83d8bf29e1b_50 = NULL;
        }

        assertFrameObject(frame_d668942271df1e498746e83d8bf29e1b_50);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_49;

        frame_no_exception_49:;
        goto skip_nested_handling_49;
        nested_frame_exit_49:;

        goto try_except_handler_153;
        skip_nested_handling_49:;
        {
            nuitka_bool tmp_condition_result_331;
            PyObject *tmp_cmp_expr_left_51;
            PyObject *tmp_cmp_expr_right_51;
            CHECK_OBJECT(tmp_class_creation_42__bases);
            tmp_cmp_expr_left_51 = tmp_class_creation_42__bases;
            CHECK_OBJECT(tmp_class_creation_42__bases_orig);
            tmp_cmp_expr_right_51 = tmp_class_creation_42__bases_orig;
            tmp_condition_result_331 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_51, tmp_cmp_expr_right_51);
            if (tmp_condition_result_331 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2895;

                goto try_except_handler_153;
            }
            if (tmp_condition_result_331 == NUITKA_BOOL_TRUE) {
                goto branch_yes_206;
            } else {
                goto branch_no_206;
            }
            assert(tmp_condition_result_331 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_206:;
        CHECK_OBJECT(tmp_class_creation_42__bases_orig);
        tmp_dictset_value = tmp_class_creation_42__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__51_CHAR_2895, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2895;

            goto try_except_handler_153;
        }
        branch_no_206:;
        {
            PyObject *tmp_assign_source_430;
            PyObject *tmp_called_value_158;
            PyObject *tmp_args_value_102;
            PyObject *tmp_tuple_element_202;
            PyObject *tmp_kwargs_value_102;
            CHECK_OBJECT(tmp_class_creation_42__metaclass);
            tmp_called_value_158 = tmp_class_creation_42__metaclass;
            tmp_tuple_element_202 = mod_consts[688];
            tmp_args_value_102 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_102, 0, tmp_tuple_element_202);
            CHECK_OBJECT(tmp_class_creation_42__bases);
            tmp_tuple_element_202 = tmp_class_creation_42__bases;
            PyTuple_SET_ITEM0(tmp_args_value_102, 1, tmp_tuple_element_202);
            tmp_tuple_element_202 = locals_sqlalchemy$sql$sqltypes$$$class__51_CHAR_2895;
            PyTuple_SET_ITEM0(tmp_args_value_102, 2, tmp_tuple_element_202);
            CHECK_OBJECT(tmp_class_creation_42__class_decl_dict);
            tmp_kwargs_value_102 = tmp_class_creation_42__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2895;
            tmp_assign_source_430 = CALL_FUNCTION(tmp_called_value_158, tmp_args_value_102, tmp_kwargs_value_102);
            Py_DECREF(tmp_args_value_102);
            if (tmp_assign_source_430 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2895;

                goto try_except_handler_153;
            }
            assert(outline_50_var___class__ == NULL);
            outline_50_var___class__ = tmp_assign_source_430;
        }
        CHECK_OBJECT(outline_50_var___class__);
        tmp_assign_source_429 = outline_50_var___class__;
        Py_INCREF(tmp_assign_source_429);
        goto try_return_handler_153;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_153:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__51_CHAR_2895);
        locals_sqlalchemy$sql$sqltypes$$$class__51_CHAR_2895 = NULL;
        goto try_return_handler_152;
        // Exception handler code:
        try_except_handler_153:;
        exception_keeper_type_151 = exception_type;
        exception_keeper_value_151 = exception_value;
        exception_keeper_tb_151 = exception_tb;
        exception_keeper_lineno_151 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__51_CHAR_2895);
        locals_sqlalchemy$sql$sqltypes$$$class__51_CHAR_2895 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_151;
        exception_value = exception_keeper_value_151;
        exception_tb = exception_keeper_tb_151;
        exception_lineno = exception_keeper_lineno_151;

        goto try_except_handler_152;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_152:;
        CHECK_OBJECT(outline_50_var___class__);
        Py_DECREF(outline_50_var___class__);
        outline_50_var___class__ = NULL;
        goto outline_result_51;
        // Exception handler code:
        try_except_handler_152:;
        exception_keeper_type_152 = exception_type;
        exception_keeper_value_152 = exception_value;
        exception_keeper_tb_152 = exception_tb;
        exception_keeper_lineno_152 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_152;
        exception_value = exception_keeper_value_152;
        exception_tb = exception_keeper_tb_152;
        exception_lineno = exception_keeper_lineno_152;

        goto outline_exception_51;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_51:;
        exception_lineno = 2895;
        goto try_except_handler_151;
        outline_result_51:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[688], tmp_assign_source_429);
    }
    goto try_end_51;
    // Exception handler code:
    try_except_handler_151:;
    exception_keeper_type_153 = exception_type;
    exception_keeper_value_153 = exception_value;
    exception_keeper_tb_153 = exception_tb;
    exception_keeper_lineno_153 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_42__bases_orig);
    tmp_class_creation_42__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_42__bases);
    tmp_class_creation_42__bases = NULL;
    Py_XDECREF(tmp_class_creation_42__class_decl_dict);
    tmp_class_creation_42__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_42__metaclass);
    tmp_class_creation_42__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_42__prepared);
    tmp_class_creation_42__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_153;
    exception_value = exception_keeper_value_153;
    exception_tb = exception_keeper_tb_153;
    exception_lineno = exception_keeper_lineno_153;

    goto frame_exception_exit_1;
    // End of try:
    try_end_51:;
    CHECK_OBJECT(tmp_class_creation_42__bases_orig);
    Py_DECREF(tmp_class_creation_42__bases_orig);
    tmp_class_creation_42__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_42__bases);
    Py_DECREF(tmp_class_creation_42__bases);
    tmp_class_creation_42__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_42__class_decl_dict);
    Py_DECREF(tmp_class_creation_42__class_decl_dict);
    tmp_class_creation_42__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_42__metaclass);
    Py_DECREF(tmp_class_creation_42__metaclass);
    tmp_class_creation_42__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_42__prepared);
    Py_DECREF(tmp_class_creation_42__prepared);
    tmp_class_creation_42__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_431;
        PyObject *tmp_tuple_element_203;
        tmp_tuple_element_203 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[65]);

        if (unlikely(tmp_tuple_element_203 == NULL)) {
            tmp_tuple_element_203 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[65]);
        }

        if (tmp_tuple_element_203 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2902;

            goto try_except_handler_154;
        }
        tmp_assign_source_431 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_431, 0, tmp_tuple_element_203);
        assert(tmp_class_creation_43__bases_orig == NULL);
        tmp_class_creation_43__bases_orig = tmp_assign_source_431;
    }
    {
        PyObject *tmp_assign_source_432;
        PyObject *tmp_dircall_arg1_52;
        CHECK_OBJECT(tmp_class_creation_43__bases_orig);
        tmp_dircall_arg1_52 = tmp_class_creation_43__bases_orig;
        Py_INCREF(tmp_dircall_arg1_52);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_52};
            tmp_assign_source_432 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_432 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2902;

            goto try_except_handler_154;
        }
        assert(tmp_class_creation_43__bases == NULL);
        tmp_class_creation_43__bases = tmp_assign_source_432;
    }
    {
        PyObject *tmp_assign_source_433;
        tmp_assign_source_433 = PyDict_New();
        assert(tmp_class_creation_43__class_decl_dict == NULL);
        tmp_class_creation_43__class_decl_dict = tmp_assign_source_433;
    }
    {
        PyObject *tmp_assign_source_434;
        PyObject *tmp_metaclass_value_52;
        bool tmp_condition_result_332;
        PyObject *tmp_key_value_154;
        PyObject *tmp_dict_arg_value_154;
        PyObject *tmp_dict_arg_value_155;
        PyObject *tmp_key_value_155;
        nuitka_bool tmp_condition_result_333;
        int tmp_truth_name_54;
        PyObject *tmp_type_arg_103;
        PyObject *tmp_expression_value_270;
        PyObject *tmp_subscript_value_52;
        PyObject *tmp_bases_value_52;
        tmp_key_value_154 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_43__class_decl_dict);
        tmp_dict_arg_value_154 = tmp_class_creation_43__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_154, tmp_key_value_154);
        assert(!(tmp_res == -1));
        tmp_condition_result_332 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_332 != false) {
            goto condexpr_true_126;
        } else {
            goto condexpr_false_126;
        }
        condexpr_true_126:;
        CHECK_OBJECT(tmp_class_creation_43__class_decl_dict);
        tmp_dict_arg_value_155 = tmp_class_creation_43__class_decl_dict;
        tmp_key_value_155 = mod_consts[410];
        tmp_metaclass_value_52 = DICT_GET_ITEM0(tmp_dict_arg_value_155, tmp_key_value_155);
        if (tmp_metaclass_value_52 == NULL) {
            tmp_metaclass_value_52 = Py_None;
        }
        assert(!(tmp_metaclass_value_52 == NULL));
        Py_INCREF(tmp_metaclass_value_52);
        goto condexpr_end_126;
        condexpr_false_126:;
        CHECK_OBJECT(tmp_class_creation_43__bases);
        tmp_truth_name_54 = CHECK_IF_TRUE(tmp_class_creation_43__bases);
        if (tmp_truth_name_54 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2902;

            goto try_except_handler_154;
        }
        tmp_condition_result_333 = tmp_truth_name_54 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_333 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_127;
        } else {
            goto condexpr_false_127;
        }
        condexpr_true_127:;
        CHECK_OBJECT(tmp_class_creation_43__bases);
        tmp_expression_value_270 = tmp_class_creation_43__bases;
        tmp_subscript_value_52 = mod_consts[52];
        tmp_type_arg_103 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_270, tmp_subscript_value_52, 0);
        if (tmp_type_arg_103 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2902;

            goto try_except_handler_154;
        }
        tmp_metaclass_value_52 = BUILTIN_TYPE1(tmp_type_arg_103);
        Py_DECREF(tmp_type_arg_103);
        if (tmp_metaclass_value_52 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2902;

            goto try_except_handler_154;
        }
        goto condexpr_end_127;
        condexpr_false_127:;
        tmp_metaclass_value_52 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_52);
        condexpr_end_127:;
        condexpr_end_126:;
        CHECK_OBJECT(tmp_class_creation_43__bases);
        tmp_bases_value_52 = tmp_class_creation_43__bases;
        tmp_assign_source_434 = SELECT_METACLASS(tmp_metaclass_value_52, tmp_bases_value_52);
        Py_DECREF(tmp_metaclass_value_52);
        if (tmp_assign_source_434 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2902;

            goto try_except_handler_154;
        }
        assert(tmp_class_creation_43__metaclass == NULL);
        tmp_class_creation_43__metaclass = tmp_assign_source_434;
    }
    {
        bool tmp_condition_result_334;
        PyObject *tmp_key_value_156;
        PyObject *tmp_dict_arg_value_156;
        tmp_key_value_156 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_43__class_decl_dict);
        tmp_dict_arg_value_156 = tmp_class_creation_43__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_156, tmp_key_value_156);
        assert(!(tmp_res == -1));
        tmp_condition_result_334 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_334 != false) {
            goto branch_yes_207;
        } else {
            goto branch_no_207;
        }
    }
    branch_yes_207:;
    CHECK_OBJECT(tmp_class_creation_43__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_43__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2902;

        goto try_except_handler_154;
    }
    branch_no_207:;
    {
        nuitka_bool tmp_condition_result_335;
        PyObject *tmp_expression_value_271;
        CHECK_OBJECT(tmp_class_creation_43__metaclass);
        tmp_expression_value_271 = tmp_class_creation_43__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_271, mod_consts[411]);
        tmp_condition_result_335 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_335 == NUITKA_BOOL_TRUE) {
            goto branch_yes_208;
        } else {
            goto branch_no_208;
        }
    }
    branch_yes_208:;
    {
        PyObject *tmp_assign_source_435;
        PyObject *tmp_called_value_159;
        PyObject *tmp_expression_value_272;
        PyObject *tmp_args_value_103;
        PyObject *tmp_tuple_element_204;
        PyObject *tmp_kwargs_value_103;
        CHECK_OBJECT(tmp_class_creation_43__metaclass);
        tmp_expression_value_272 = tmp_class_creation_43__metaclass;
        tmp_called_value_159 = LOOKUP_ATTRIBUTE(tmp_expression_value_272, mod_consts[411]);
        if (tmp_called_value_159 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2902;

            goto try_except_handler_154;
        }
        tmp_tuple_element_204 = mod_consts[690];
        tmp_args_value_103 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_103, 0, tmp_tuple_element_204);
        CHECK_OBJECT(tmp_class_creation_43__bases);
        tmp_tuple_element_204 = tmp_class_creation_43__bases;
        PyTuple_SET_ITEM0(tmp_args_value_103, 1, tmp_tuple_element_204);
        CHECK_OBJECT(tmp_class_creation_43__class_decl_dict);
        tmp_kwargs_value_103 = tmp_class_creation_43__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2902;
        tmp_assign_source_435 = CALL_FUNCTION(tmp_called_value_159, tmp_args_value_103, tmp_kwargs_value_103);
        Py_DECREF(tmp_called_value_159);
        Py_DECREF(tmp_args_value_103);
        if (tmp_assign_source_435 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2902;

            goto try_except_handler_154;
        }
        assert(tmp_class_creation_43__prepared == NULL);
        tmp_class_creation_43__prepared = tmp_assign_source_435;
    }
    {
        bool tmp_condition_result_336;
        PyObject *tmp_operand_value_52;
        PyObject *tmp_expression_value_273;
        CHECK_OBJECT(tmp_class_creation_43__prepared);
        tmp_expression_value_273 = tmp_class_creation_43__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_273, mod_consts[413]);
        tmp_operand_value_52 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_52);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2902;

            goto try_except_handler_154;
        }
        tmp_condition_result_336 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_336 != false) {
            goto branch_yes_209;
        } else {
            goto branch_no_209;
        }
    }
    branch_yes_209:;
    {
        PyObject *tmp_raise_type_52;
        PyObject *tmp_raise_value_52;
        PyObject *tmp_left_value_52;
        PyObject *tmp_right_value_52;
        PyObject *tmp_tuple_element_205;
        PyObject *tmp_getattr_target_52;
        PyObject *tmp_getattr_attr_52;
        PyObject *tmp_getattr_default_52;
        tmp_raise_type_52 = PyExc_TypeError;
        tmp_left_value_52 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_43__metaclass);
        tmp_getattr_target_52 = tmp_class_creation_43__metaclass;
        tmp_getattr_attr_52 = mod_consts[190];
        tmp_getattr_default_52 = mod_consts[415];
        tmp_tuple_element_205 = BUILTIN_GETATTR(tmp_getattr_target_52, tmp_getattr_attr_52, tmp_getattr_default_52);
        if (tmp_tuple_element_205 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2902;

            goto try_except_handler_154;
        }
        tmp_right_value_52 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_274;
            PyObject *tmp_type_arg_104;
            PyTuple_SET_ITEM(tmp_right_value_52, 0, tmp_tuple_element_205);
            CHECK_OBJECT(tmp_class_creation_43__prepared);
            tmp_type_arg_104 = tmp_class_creation_43__prepared;
            tmp_expression_value_274 = BUILTIN_TYPE1(tmp_type_arg_104);
            assert(!(tmp_expression_value_274 == NULL));
            tmp_tuple_element_205 = LOOKUP_ATTRIBUTE(tmp_expression_value_274, mod_consts[190]);
            Py_DECREF(tmp_expression_value_274);
            if (tmp_tuple_element_205 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2902;

                goto tuple_build_exception_66;
            }
            PyTuple_SET_ITEM(tmp_right_value_52, 1, tmp_tuple_element_205);
        }
        goto tuple_build_noexception_66;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_66:;
        Py_DECREF(tmp_right_value_52);
        goto try_except_handler_154;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_66:;
        tmp_raise_value_52 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_52, tmp_right_value_52);
        Py_DECREF(tmp_right_value_52);
        if (tmp_raise_value_52 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2902;

            goto try_except_handler_154;
        }
        exception_type = tmp_raise_type_52;
        Py_INCREF(tmp_raise_type_52);
        exception_value = tmp_raise_value_52;
        exception_lineno = 2902;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_154;
    }
    branch_no_209:;
    goto branch_end_208;
    branch_no_208:;
    {
        PyObject *tmp_assign_source_436;
        tmp_assign_source_436 = PyDict_New();
        assert(tmp_class_creation_43__prepared == NULL);
        tmp_class_creation_43__prepared = tmp_assign_source_436;
    }
    branch_end_208:;
    {
        PyObject *tmp_assign_source_437;
        {
            PyObject *tmp_set_locals_52;
            CHECK_OBJECT(tmp_class_creation_43__prepared);
            tmp_set_locals_52 = tmp_class_creation_43__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__52_NCHAR_2902 = tmp_set_locals_52;
            Py_INCREF(tmp_set_locals_52);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__52_NCHAR_2902, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2902;

            goto try_except_handler_156;
        }
        tmp_dictset_value = mod_consts[691];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__52_NCHAR_2902, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2902;

            goto try_except_handler_156;
        }
        tmp_dictset_value = mod_consts[690];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__52_NCHAR_2902, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2902;

            goto try_except_handler_156;
        }
        if (isFrameUnusable(cache_frame_fefa8d4f1568f2058ed31d49ec673b09_51)) {
            Py_XDECREF(cache_frame_fefa8d4f1568f2058ed31d49ec673b09_51);

#if _DEBUG_REFCOUNTS
            if (cache_frame_fefa8d4f1568f2058ed31d49ec673b09_51 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_fefa8d4f1568f2058ed31d49ec673b09_51 = MAKE_FUNCTION_FRAME(codeobj_fefa8d4f1568f2058ed31d49ec673b09, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_fefa8d4f1568f2058ed31d49ec673b09_51->m_type_description == NULL);
        frame_fefa8d4f1568f2058ed31d49ec673b09_51 = cache_frame_fefa8d4f1568f2058ed31d49ec673b09_51;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_fefa8d4f1568f2058ed31d49ec673b09_51);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_fefa8d4f1568f2058ed31d49ec673b09_51) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[690];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__52_NCHAR_2902, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2906;
            type_description_2 = "o";
            goto frame_exception_exit_51;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_fefa8d4f1568f2058ed31d49ec673b09_51);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_50;

        frame_exception_exit_51:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_fefa8d4f1568f2058ed31d49ec673b09_51);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_fefa8d4f1568f2058ed31d49ec673b09_51, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_fefa8d4f1568f2058ed31d49ec673b09_51->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_fefa8d4f1568f2058ed31d49ec673b09_51, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_fefa8d4f1568f2058ed31d49ec673b09_51,
            type_description_2,
            outline_51_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_fefa8d4f1568f2058ed31d49ec673b09_51 == cache_frame_fefa8d4f1568f2058ed31d49ec673b09_51) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_fefa8d4f1568f2058ed31d49ec673b09_51);
            cache_frame_fefa8d4f1568f2058ed31d49ec673b09_51 = NULL;
        }

        assertFrameObject(frame_fefa8d4f1568f2058ed31d49ec673b09_51);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_50;

        frame_no_exception_50:;
        goto skip_nested_handling_50;
        nested_frame_exit_50:;

        goto try_except_handler_156;
        skip_nested_handling_50:;
        {
            nuitka_bool tmp_condition_result_337;
            PyObject *tmp_cmp_expr_left_52;
            PyObject *tmp_cmp_expr_right_52;
            CHECK_OBJECT(tmp_class_creation_43__bases);
            tmp_cmp_expr_left_52 = tmp_class_creation_43__bases;
            CHECK_OBJECT(tmp_class_creation_43__bases_orig);
            tmp_cmp_expr_right_52 = tmp_class_creation_43__bases_orig;
            tmp_condition_result_337 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_52, tmp_cmp_expr_right_52);
            if (tmp_condition_result_337 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2902;

                goto try_except_handler_156;
            }
            if (tmp_condition_result_337 == NUITKA_BOOL_TRUE) {
                goto branch_yes_210;
            } else {
                goto branch_no_210;
            }
            assert(tmp_condition_result_337 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_210:;
        CHECK_OBJECT(tmp_class_creation_43__bases_orig);
        tmp_dictset_value = tmp_class_creation_43__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__52_NCHAR_2902, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2902;

            goto try_except_handler_156;
        }
        branch_no_210:;
        {
            PyObject *tmp_assign_source_438;
            PyObject *tmp_called_value_160;
            PyObject *tmp_args_value_104;
            PyObject *tmp_tuple_element_206;
            PyObject *tmp_kwargs_value_104;
            CHECK_OBJECT(tmp_class_creation_43__metaclass);
            tmp_called_value_160 = tmp_class_creation_43__metaclass;
            tmp_tuple_element_206 = mod_consts[690];
            tmp_args_value_104 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_104, 0, tmp_tuple_element_206);
            CHECK_OBJECT(tmp_class_creation_43__bases);
            tmp_tuple_element_206 = tmp_class_creation_43__bases;
            PyTuple_SET_ITEM0(tmp_args_value_104, 1, tmp_tuple_element_206);
            tmp_tuple_element_206 = locals_sqlalchemy$sql$sqltypes$$$class__52_NCHAR_2902;
            PyTuple_SET_ITEM0(tmp_args_value_104, 2, tmp_tuple_element_206);
            CHECK_OBJECT(tmp_class_creation_43__class_decl_dict);
            tmp_kwargs_value_104 = tmp_class_creation_43__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2902;
            tmp_assign_source_438 = CALL_FUNCTION(tmp_called_value_160, tmp_args_value_104, tmp_kwargs_value_104);
            Py_DECREF(tmp_args_value_104);
            if (tmp_assign_source_438 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2902;

                goto try_except_handler_156;
            }
            assert(outline_51_var___class__ == NULL);
            outline_51_var___class__ = tmp_assign_source_438;
        }
        CHECK_OBJECT(outline_51_var___class__);
        tmp_assign_source_437 = outline_51_var___class__;
        Py_INCREF(tmp_assign_source_437);
        goto try_return_handler_156;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_156:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__52_NCHAR_2902);
        locals_sqlalchemy$sql$sqltypes$$$class__52_NCHAR_2902 = NULL;
        goto try_return_handler_155;
        // Exception handler code:
        try_except_handler_156:;
        exception_keeper_type_154 = exception_type;
        exception_keeper_value_154 = exception_value;
        exception_keeper_tb_154 = exception_tb;
        exception_keeper_lineno_154 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__52_NCHAR_2902);
        locals_sqlalchemy$sql$sqltypes$$$class__52_NCHAR_2902 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_154;
        exception_value = exception_keeper_value_154;
        exception_tb = exception_keeper_tb_154;
        exception_lineno = exception_keeper_lineno_154;

        goto try_except_handler_155;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_155:;
        CHECK_OBJECT(outline_51_var___class__);
        Py_DECREF(outline_51_var___class__);
        outline_51_var___class__ = NULL;
        goto outline_result_52;
        // Exception handler code:
        try_except_handler_155:;
        exception_keeper_type_155 = exception_type;
        exception_keeper_value_155 = exception_value;
        exception_keeper_tb_155 = exception_tb;
        exception_keeper_lineno_155 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_155;
        exception_value = exception_keeper_value_155;
        exception_tb = exception_keeper_tb_155;
        exception_lineno = exception_keeper_lineno_155;

        goto outline_exception_52;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_52:;
        exception_lineno = 2902;
        goto try_except_handler_154;
        outline_result_52:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[690], tmp_assign_source_437);
    }
    goto try_end_52;
    // Exception handler code:
    try_except_handler_154:;
    exception_keeper_type_156 = exception_type;
    exception_keeper_value_156 = exception_value;
    exception_keeper_tb_156 = exception_tb;
    exception_keeper_lineno_156 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_43__bases_orig);
    tmp_class_creation_43__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_43__bases);
    tmp_class_creation_43__bases = NULL;
    Py_XDECREF(tmp_class_creation_43__class_decl_dict);
    tmp_class_creation_43__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_43__metaclass);
    tmp_class_creation_43__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_43__prepared);
    tmp_class_creation_43__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_156;
    exception_value = exception_keeper_value_156;
    exception_tb = exception_keeper_tb_156;
    exception_lineno = exception_keeper_lineno_156;

    goto frame_exception_exit_1;
    // End of try:
    try_end_52:;
    CHECK_OBJECT(tmp_class_creation_43__bases_orig);
    Py_DECREF(tmp_class_creation_43__bases_orig);
    tmp_class_creation_43__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_43__bases);
    Py_DECREF(tmp_class_creation_43__bases);
    tmp_class_creation_43__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_43__class_decl_dict);
    Py_DECREF(tmp_class_creation_43__class_decl_dict);
    tmp_class_creation_43__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_43__metaclass);
    Py_DECREF(tmp_class_creation_43__metaclass);
    tmp_class_creation_43__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_43__prepared);
    Py_DECREF(tmp_class_creation_43__prepared);
    tmp_class_creation_43__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_439;
        PyObject *tmp_tuple_element_207;
        tmp_tuple_element_207 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[125]);

        if (unlikely(tmp_tuple_element_207 == NULL)) {
            tmp_tuple_element_207 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[125]);
        }

        if (tmp_tuple_element_207 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2909;

            goto try_except_handler_157;
        }
        tmp_assign_source_439 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_439, 0, tmp_tuple_element_207);
        assert(tmp_class_creation_44__bases_orig == NULL);
        tmp_class_creation_44__bases_orig = tmp_assign_source_439;
    }
    {
        PyObject *tmp_assign_source_440;
        PyObject *tmp_dircall_arg1_53;
        CHECK_OBJECT(tmp_class_creation_44__bases_orig);
        tmp_dircall_arg1_53 = tmp_class_creation_44__bases_orig;
        Py_INCREF(tmp_dircall_arg1_53);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_53};
            tmp_assign_source_440 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_440 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2909;

            goto try_except_handler_157;
        }
        assert(tmp_class_creation_44__bases == NULL);
        tmp_class_creation_44__bases = tmp_assign_source_440;
    }
    {
        PyObject *tmp_assign_source_441;
        tmp_assign_source_441 = PyDict_New();
        assert(tmp_class_creation_44__class_decl_dict == NULL);
        tmp_class_creation_44__class_decl_dict = tmp_assign_source_441;
    }
    {
        PyObject *tmp_assign_source_442;
        PyObject *tmp_metaclass_value_53;
        bool tmp_condition_result_338;
        PyObject *tmp_key_value_157;
        PyObject *tmp_dict_arg_value_157;
        PyObject *tmp_dict_arg_value_158;
        PyObject *tmp_key_value_158;
        nuitka_bool tmp_condition_result_339;
        int tmp_truth_name_55;
        PyObject *tmp_type_arg_105;
        PyObject *tmp_expression_value_275;
        PyObject *tmp_subscript_value_53;
        PyObject *tmp_bases_value_53;
        tmp_key_value_157 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_44__class_decl_dict);
        tmp_dict_arg_value_157 = tmp_class_creation_44__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_157, tmp_key_value_157);
        assert(!(tmp_res == -1));
        tmp_condition_result_338 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_338 != false) {
            goto condexpr_true_128;
        } else {
            goto condexpr_false_128;
        }
        condexpr_true_128:;
        CHECK_OBJECT(tmp_class_creation_44__class_decl_dict);
        tmp_dict_arg_value_158 = tmp_class_creation_44__class_decl_dict;
        tmp_key_value_158 = mod_consts[410];
        tmp_metaclass_value_53 = DICT_GET_ITEM0(tmp_dict_arg_value_158, tmp_key_value_158);
        if (tmp_metaclass_value_53 == NULL) {
            tmp_metaclass_value_53 = Py_None;
        }
        assert(!(tmp_metaclass_value_53 == NULL));
        Py_INCREF(tmp_metaclass_value_53);
        goto condexpr_end_128;
        condexpr_false_128:;
        CHECK_OBJECT(tmp_class_creation_44__bases);
        tmp_truth_name_55 = CHECK_IF_TRUE(tmp_class_creation_44__bases);
        if (tmp_truth_name_55 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2909;

            goto try_except_handler_157;
        }
        tmp_condition_result_339 = tmp_truth_name_55 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_339 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_129;
        } else {
            goto condexpr_false_129;
        }
        condexpr_true_129:;
        CHECK_OBJECT(tmp_class_creation_44__bases);
        tmp_expression_value_275 = tmp_class_creation_44__bases;
        tmp_subscript_value_53 = mod_consts[52];
        tmp_type_arg_105 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_275, tmp_subscript_value_53, 0);
        if (tmp_type_arg_105 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2909;

            goto try_except_handler_157;
        }
        tmp_metaclass_value_53 = BUILTIN_TYPE1(tmp_type_arg_105);
        Py_DECREF(tmp_type_arg_105);
        if (tmp_metaclass_value_53 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2909;

            goto try_except_handler_157;
        }
        goto condexpr_end_129;
        condexpr_false_129:;
        tmp_metaclass_value_53 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_53);
        condexpr_end_129:;
        condexpr_end_128:;
        CHECK_OBJECT(tmp_class_creation_44__bases);
        tmp_bases_value_53 = tmp_class_creation_44__bases;
        tmp_assign_source_442 = SELECT_METACLASS(tmp_metaclass_value_53, tmp_bases_value_53);
        Py_DECREF(tmp_metaclass_value_53);
        if (tmp_assign_source_442 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2909;

            goto try_except_handler_157;
        }
        assert(tmp_class_creation_44__metaclass == NULL);
        tmp_class_creation_44__metaclass = tmp_assign_source_442;
    }
    {
        bool tmp_condition_result_340;
        PyObject *tmp_key_value_159;
        PyObject *tmp_dict_arg_value_159;
        tmp_key_value_159 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_44__class_decl_dict);
        tmp_dict_arg_value_159 = tmp_class_creation_44__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_159, tmp_key_value_159);
        assert(!(tmp_res == -1));
        tmp_condition_result_340 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_340 != false) {
            goto branch_yes_211;
        } else {
            goto branch_no_211;
        }
    }
    branch_yes_211:;
    CHECK_OBJECT(tmp_class_creation_44__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_44__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2909;

        goto try_except_handler_157;
    }
    branch_no_211:;
    {
        nuitka_bool tmp_condition_result_341;
        PyObject *tmp_expression_value_276;
        CHECK_OBJECT(tmp_class_creation_44__metaclass);
        tmp_expression_value_276 = tmp_class_creation_44__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_276, mod_consts[411]);
        tmp_condition_result_341 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_341 == NUITKA_BOOL_TRUE) {
            goto branch_yes_212;
        } else {
            goto branch_no_212;
        }
    }
    branch_yes_212:;
    {
        PyObject *tmp_assign_source_443;
        PyObject *tmp_called_value_161;
        PyObject *tmp_expression_value_277;
        PyObject *tmp_args_value_105;
        PyObject *tmp_tuple_element_208;
        PyObject *tmp_kwargs_value_105;
        CHECK_OBJECT(tmp_class_creation_44__metaclass);
        tmp_expression_value_277 = tmp_class_creation_44__metaclass;
        tmp_called_value_161 = LOOKUP_ATTRIBUTE(tmp_expression_value_277, mod_consts[411]);
        if (tmp_called_value_161 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2909;

            goto try_except_handler_157;
        }
        tmp_tuple_element_208 = mod_consts[692];
        tmp_args_value_105 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_105, 0, tmp_tuple_element_208);
        CHECK_OBJECT(tmp_class_creation_44__bases);
        tmp_tuple_element_208 = tmp_class_creation_44__bases;
        PyTuple_SET_ITEM0(tmp_args_value_105, 1, tmp_tuple_element_208);
        CHECK_OBJECT(tmp_class_creation_44__class_decl_dict);
        tmp_kwargs_value_105 = tmp_class_creation_44__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2909;
        tmp_assign_source_443 = CALL_FUNCTION(tmp_called_value_161, tmp_args_value_105, tmp_kwargs_value_105);
        Py_DECREF(tmp_called_value_161);
        Py_DECREF(tmp_args_value_105);
        if (tmp_assign_source_443 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2909;

            goto try_except_handler_157;
        }
        assert(tmp_class_creation_44__prepared == NULL);
        tmp_class_creation_44__prepared = tmp_assign_source_443;
    }
    {
        bool tmp_condition_result_342;
        PyObject *tmp_operand_value_53;
        PyObject *tmp_expression_value_278;
        CHECK_OBJECT(tmp_class_creation_44__prepared);
        tmp_expression_value_278 = tmp_class_creation_44__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_278, mod_consts[413]);
        tmp_operand_value_53 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_53);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2909;

            goto try_except_handler_157;
        }
        tmp_condition_result_342 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_342 != false) {
            goto branch_yes_213;
        } else {
            goto branch_no_213;
        }
    }
    branch_yes_213:;
    {
        PyObject *tmp_raise_type_53;
        PyObject *tmp_raise_value_53;
        PyObject *tmp_left_value_53;
        PyObject *tmp_right_value_53;
        PyObject *tmp_tuple_element_209;
        PyObject *tmp_getattr_target_53;
        PyObject *tmp_getattr_attr_53;
        PyObject *tmp_getattr_default_53;
        tmp_raise_type_53 = PyExc_TypeError;
        tmp_left_value_53 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_44__metaclass);
        tmp_getattr_target_53 = tmp_class_creation_44__metaclass;
        tmp_getattr_attr_53 = mod_consts[190];
        tmp_getattr_default_53 = mod_consts[415];
        tmp_tuple_element_209 = BUILTIN_GETATTR(tmp_getattr_target_53, tmp_getattr_attr_53, tmp_getattr_default_53);
        if (tmp_tuple_element_209 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2909;

            goto try_except_handler_157;
        }
        tmp_right_value_53 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_279;
            PyObject *tmp_type_arg_106;
            PyTuple_SET_ITEM(tmp_right_value_53, 0, tmp_tuple_element_209);
            CHECK_OBJECT(tmp_class_creation_44__prepared);
            tmp_type_arg_106 = tmp_class_creation_44__prepared;
            tmp_expression_value_279 = BUILTIN_TYPE1(tmp_type_arg_106);
            assert(!(tmp_expression_value_279 == NULL));
            tmp_tuple_element_209 = LOOKUP_ATTRIBUTE(tmp_expression_value_279, mod_consts[190]);
            Py_DECREF(tmp_expression_value_279);
            if (tmp_tuple_element_209 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2909;

                goto tuple_build_exception_67;
            }
            PyTuple_SET_ITEM(tmp_right_value_53, 1, tmp_tuple_element_209);
        }
        goto tuple_build_noexception_67;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_67:;
        Py_DECREF(tmp_right_value_53);
        goto try_except_handler_157;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_67:;
        tmp_raise_value_53 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_53, tmp_right_value_53);
        Py_DECREF(tmp_right_value_53);
        if (tmp_raise_value_53 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2909;

            goto try_except_handler_157;
        }
        exception_type = tmp_raise_type_53;
        Py_INCREF(tmp_raise_type_53);
        exception_value = tmp_raise_value_53;
        exception_lineno = 2909;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_157;
    }
    branch_no_213:;
    goto branch_end_212;
    branch_no_212:;
    {
        PyObject *tmp_assign_source_444;
        tmp_assign_source_444 = PyDict_New();
        assert(tmp_class_creation_44__prepared == NULL);
        tmp_class_creation_44__prepared = tmp_assign_source_444;
    }
    branch_end_212:;
    {
        PyObject *tmp_assign_source_445;
        {
            PyObject *tmp_set_locals_53;
            CHECK_OBJECT(tmp_class_creation_44__prepared);
            tmp_set_locals_53 = tmp_class_creation_44__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__53_BLOB_2909 = tmp_set_locals_53;
            Py_INCREF(tmp_set_locals_53);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__53_BLOB_2909, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2909;

            goto try_except_handler_159;
        }
        tmp_dictset_value = mod_consts[693];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__53_BLOB_2909, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2909;

            goto try_except_handler_159;
        }
        tmp_dictset_value = mod_consts[692];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__53_BLOB_2909, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2909;

            goto try_except_handler_159;
        }
        if (isFrameUnusable(cache_frame_5d289192711717ac19f9183b5f5570bf_52)) {
            Py_XDECREF(cache_frame_5d289192711717ac19f9183b5f5570bf_52);

#if _DEBUG_REFCOUNTS
            if (cache_frame_5d289192711717ac19f9183b5f5570bf_52 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_5d289192711717ac19f9183b5f5570bf_52 = MAKE_FUNCTION_FRAME(codeobj_5d289192711717ac19f9183b5f5570bf, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_5d289192711717ac19f9183b5f5570bf_52->m_type_description == NULL);
        frame_5d289192711717ac19f9183b5f5570bf_52 = cache_frame_5d289192711717ac19f9183b5f5570bf_52;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_5d289192711717ac19f9183b5f5570bf_52);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_5d289192711717ac19f9183b5f5570bf_52) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[692];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__53_BLOB_2909, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2913;
            type_description_2 = "o";
            goto frame_exception_exit_52;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_5d289192711717ac19f9183b5f5570bf_52);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_51;

        frame_exception_exit_52:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_5d289192711717ac19f9183b5f5570bf_52);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_5d289192711717ac19f9183b5f5570bf_52, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_5d289192711717ac19f9183b5f5570bf_52->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_5d289192711717ac19f9183b5f5570bf_52, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_5d289192711717ac19f9183b5f5570bf_52,
            type_description_2,
            outline_52_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_5d289192711717ac19f9183b5f5570bf_52 == cache_frame_5d289192711717ac19f9183b5f5570bf_52) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_5d289192711717ac19f9183b5f5570bf_52);
            cache_frame_5d289192711717ac19f9183b5f5570bf_52 = NULL;
        }

        assertFrameObject(frame_5d289192711717ac19f9183b5f5570bf_52);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_51;

        frame_no_exception_51:;
        goto skip_nested_handling_51;
        nested_frame_exit_51:;

        goto try_except_handler_159;
        skip_nested_handling_51:;
        {
            nuitka_bool tmp_condition_result_343;
            PyObject *tmp_cmp_expr_left_53;
            PyObject *tmp_cmp_expr_right_53;
            CHECK_OBJECT(tmp_class_creation_44__bases);
            tmp_cmp_expr_left_53 = tmp_class_creation_44__bases;
            CHECK_OBJECT(tmp_class_creation_44__bases_orig);
            tmp_cmp_expr_right_53 = tmp_class_creation_44__bases_orig;
            tmp_condition_result_343 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_53, tmp_cmp_expr_right_53);
            if (tmp_condition_result_343 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2909;

                goto try_except_handler_159;
            }
            if (tmp_condition_result_343 == NUITKA_BOOL_TRUE) {
                goto branch_yes_214;
            } else {
                goto branch_no_214;
            }
            assert(tmp_condition_result_343 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_214:;
        CHECK_OBJECT(tmp_class_creation_44__bases_orig);
        tmp_dictset_value = tmp_class_creation_44__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__53_BLOB_2909, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2909;

            goto try_except_handler_159;
        }
        branch_no_214:;
        {
            PyObject *tmp_assign_source_446;
            PyObject *tmp_called_value_162;
            PyObject *tmp_args_value_106;
            PyObject *tmp_tuple_element_210;
            PyObject *tmp_kwargs_value_106;
            CHECK_OBJECT(tmp_class_creation_44__metaclass);
            tmp_called_value_162 = tmp_class_creation_44__metaclass;
            tmp_tuple_element_210 = mod_consts[692];
            tmp_args_value_106 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_106, 0, tmp_tuple_element_210);
            CHECK_OBJECT(tmp_class_creation_44__bases);
            tmp_tuple_element_210 = tmp_class_creation_44__bases;
            PyTuple_SET_ITEM0(tmp_args_value_106, 1, tmp_tuple_element_210);
            tmp_tuple_element_210 = locals_sqlalchemy$sql$sqltypes$$$class__53_BLOB_2909;
            PyTuple_SET_ITEM0(tmp_args_value_106, 2, tmp_tuple_element_210);
            CHECK_OBJECT(tmp_class_creation_44__class_decl_dict);
            tmp_kwargs_value_106 = tmp_class_creation_44__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2909;
            tmp_assign_source_446 = CALL_FUNCTION(tmp_called_value_162, tmp_args_value_106, tmp_kwargs_value_106);
            Py_DECREF(tmp_args_value_106);
            if (tmp_assign_source_446 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2909;

                goto try_except_handler_159;
            }
            assert(outline_52_var___class__ == NULL);
            outline_52_var___class__ = tmp_assign_source_446;
        }
        CHECK_OBJECT(outline_52_var___class__);
        tmp_assign_source_445 = outline_52_var___class__;
        Py_INCREF(tmp_assign_source_445);
        goto try_return_handler_159;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_159:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__53_BLOB_2909);
        locals_sqlalchemy$sql$sqltypes$$$class__53_BLOB_2909 = NULL;
        goto try_return_handler_158;
        // Exception handler code:
        try_except_handler_159:;
        exception_keeper_type_157 = exception_type;
        exception_keeper_value_157 = exception_value;
        exception_keeper_tb_157 = exception_tb;
        exception_keeper_lineno_157 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__53_BLOB_2909);
        locals_sqlalchemy$sql$sqltypes$$$class__53_BLOB_2909 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_157;
        exception_value = exception_keeper_value_157;
        exception_tb = exception_keeper_tb_157;
        exception_lineno = exception_keeper_lineno_157;

        goto try_except_handler_158;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_158:;
        CHECK_OBJECT(outline_52_var___class__);
        Py_DECREF(outline_52_var___class__);
        outline_52_var___class__ = NULL;
        goto outline_result_53;
        // Exception handler code:
        try_except_handler_158:;
        exception_keeper_type_158 = exception_type;
        exception_keeper_value_158 = exception_value;
        exception_keeper_tb_158 = exception_tb;
        exception_keeper_lineno_158 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_158;
        exception_value = exception_keeper_value_158;
        exception_tb = exception_keeper_tb_158;
        exception_lineno = exception_keeper_lineno_158;

        goto outline_exception_53;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_53:;
        exception_lineno = 2909;
        goto try_except_handler_157;
        outline_result_53:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[692], tmp_assign_source_445);
    }
    goto try_end_53;
    // Exception handler code:
    try_except_handler_157:;
    exception_keeper_type_159 = exception_type;
    exception_keeper_value_159 = exception_value;
    exception_keeper_tb_159 = exception_tb;
    exception_keeper_lineno_159 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_44__bases_orig);
    tmp_class_creation_44__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_44__bases);
    tmp_class_creation_44__bases = NULL;
    Py_XDECREF(tmp_class_creation_44__class_decl_dict);
    tmp_class_creation_44__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_44__metaclass);
    tmp_class_creation_44__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_44__prepared);
    tmp_class_creation_44__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_159;
    exception_value = exception_keeper_value_159;
    exception_tb = exception_keeper_tb_159;
    exception_lineno = exception_keeper_lineno_159;

    goto frame_exception_exit_1;
    // End of try:
    try_end_53:;
    CHECK_OBJECT(tmp_class_creation_44__bases_orig);
    Py_DECREF(tmp_class_creation_44__bases_orig);
    tmp_class_creation_44__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_44__bases);
    Py_DECREF(tmp_class_creation_44__bases);
    tmp_class_creation_44__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_44__class_decl_dict);
    Py_DECREF(tmp_class_creation_44__class_decl_dict);
    tmp_class_creation_44__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_44__metaclass);
    Py_DECREF(tmp_class_creation_44__metaclass);
    tmp_class_creation_44__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_44__prepared);
    Py_DECREF(tmp_class_creation_44__prepared);
    tmp_class_creation_44__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_447;
        PyObject *tmp_tuple_element_211;
        tmp_tuple_element_211 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[119]);

        if (unlikely(tmp_tuple_element_211 == NULL)) {
            tmp_tuple_element_211 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[119]);
        }

        if (tmp_tuple_element_211 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2916;

            goto try_except_handler_160;
        }
        tmp_assign_source_447 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_447, 0, tmp_tuple_element_211);
        assert(tmp_class_creation_45__bases_orig == NULL);
        tmp_class_creation_45__bases_orig = tmp_assign_source_447;
    }
    {
        PyObject *tmp_assign_source_448;
        PyObject *tmp_dircall_arg1_54;
        CHECK_OBJECT(tmp_class_creation_45__bases_orig);
        tmp_dircall_arg1_54 = tmp_class_creation_45__bases_orig;
        Py_INCREF(tmp_dircall_arg1_54);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_54};
            tmp_assign_source_448 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_448 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2916;

            goto try_except_handler_160;
        }
        assert(tmp_class_creation_45__bases == NULL);
        tmp_class_creation_45__bases = tmp_assign_source_448;
    }
    {
        PyObject *tmp_assign_source_449;
        tmp_assign_source_449 = PyDict_New();
        assert(tmp_class_creation_45__class_decl_dict == NULL);
        tmp_class_creation_45__class_decl_dict = tmp_assign_source_449;
    }
    {
        PyObject *tmp_assign_source_450;
        PyObject *tmp_metaclass_value_54;
        bool tmp_condition_result_344;
        PyObject *tmp_key_value_160;
        PyObject *tmp_dict_arg_value_160;
        PyObject *tmp_dict_arg_value_161;
        PyObject *tmp_key_value_161;
        nuitka_bool tmp_condition_result_345;
        int tmp_truth_name_56;
        PyObject *tmp_type_arg_107;
        PyObject *tmp_expression_value_280;
        PyObject *tmp_subscript_value_54;
        PyObject *tmp_bases_value_54;
        tmp_key_value_160 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_45__class_decl_dict);
        tmp_dict_arg_value_160 = tmp_class_creation_45__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_160, tmp_key_value_160);
        assert(!(tmp_res == -1));
        tmp_condition_result_344 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_344 != false) {
            goto condexpr_true_130;
        } else {
            goto condexpr_false_130;
        }
        condexpr_true_130:;
        CHECK_OBJECT(tmp_class_creation_45__class_decl_dict);
        tmp_dict_arg_value_161 = tmp_class_creation_45__class_decl_dict;
        tmp_key_value_161 = mod_consts[410];
        tmp_metaclass_value_54 = DICT_GET_ITEM0(tmp_dict_arg_value_161, tmp_key_value_161);
        if (tmp_metaclass_value_54 == NULL) {
            tmp_metaclass_value_54 = Py_None;
        }
        assert(!(tmp_metaclass_value_54 == NULL));
        Py_INCREF(tmp_metaclass_value_54);
        goto condexpr_end_130;
        condexpr_false_130:;
        CHECK_OBJECT(tmp_class_creation_45__bases);
        tmp_truth_name_56 = CHECK_IF_TRUE(tmp_class_creation_45__bases);
        if (tmp_truth_name_56 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2916;

            goto try_except_handler_160;
        }
        tmp_condition_result_345 = tmp_truth_name_56 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_345 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_131;
        } else {
            goto condexpr_false_131;
        }
        condexpr_true_131:;
        CHECK_OBJECT(tmp_class_creation_45__bases);
        tmp_expression_value_280 = tmp_class_creation_45__bases;
        tmp_subscript_value_54 = mod_consts[52];
        tmp_type_arg_107 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_280, tmp_subscript_value_54, 0);
        if (tmp_type_arg_107 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2916;

            goto try_except_handler_160;
        }
        tmp_metaclass_value_54 = BUILTIN_TYPE1(tmp_type_arg_107);
        Py_DECREF(tmp_type_arg_107);
        if (tmp_metaclass_value_54 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2916;

            goto try_except_handler_160;
        }
        goto condexpr_end_131;
        condexpr_false_131:;
        tmp_metaclass_value_54 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_54);
        condexpr_end_131:;
        condexpr_end_130:;
        CHECK_OBJECT(tmp_class_creation_45__bases);
        tmp_bases_value_54 = tmp_class_creation_45__bases;
        tmp_assign_source_450 = SELECT_METACLASS(tmp_metaclass_value_54, tmp_bases_value_54);
        Py_DECREF(tmp_metaclass_value_54);
        if (tmp_assign_source_450 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2916;

            goto try_except_handler_160;
        }
        assert(tmp_class_creation_45__metaclass == NULL);
        tmp_class_creation_45__metaclass = tmp_assign_source_450;
    }
    {
        bool tmp_condition_result_346;
        PyObject *tmp_key_value_162;
        PyObject *tmp_dict_arg_value_162;
        tmp_key_value_162 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_45__class_decl_dict);
        tmp_dict_arg_value_162 = tmp_class_creation_45__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_162, tmp_key_value_162);
        assert(!(tmp_res == -1));
        tmp_condition_result_346 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_346 != false) {
            goto branch_yes_215;
        } else {
            goto branch_no_215;
        }
    }
    branch_yes_215:;
    CHECK_OBJECT(tmp_class_creation_45__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_45__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2916;

        goto try_except_handler_160;
    }
    branch_no_215:;
    {
        nuitka_bool tmp_condition_result_347;
        PyObject *tmp_expression_value_281;
        CHECK_OBJECT(tmp_class_creation_45__metaclass);
        tmp_expression_value_281 = tmp_class_creation_45__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_281, mod_consts[411]);
        tmp_condition_result_347 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_347 == NUITKA_BOOL_TRUE) {
            goto branch_yes_216;
        } else {
            goto branch_no_216;
        }
    }
    branch_yes_216:;
    {
        PyObject *tmp_assign_source_451;
        PyObject *tmp_called_value_163;
        PyObject *tmp_expression_value_282;
        PyObject *tmp_args_value_107;
        PyObject *tmp_tuple_element_212;
        PyObject *tmp_kwargs_value_107;
        CHECK_OBJECT(tmp_class_creation_45__metaclass);
        tmp_expression_value_282 = tmp_class_creation_45__metaclass;
        tmp_called_value_163 = LOOKUP_ATTRIBUTE(tmp_expression_value_282, mod_consts[411]);
        if (tmp_called_value_163 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2916;

            goto try_except_handler_160;
        }
        tmp_tuple_element_212 = mod_consts[122];
        tmp_args_value_107 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_107, 0, tmp_tuple_element_212);
        CHECK_OBJECT(tmp_class_creation_45__bases);
        tmp_tuple_element_212 = tmp_class_creation_45__bases;
        PyTuple_SET_ITEM0(tmp_args_value_107, 1, tmp_tuple_element_212);
        CHECK_OBJECT(tmp_class_creation_45__class_decl_dict);
        tmp_kwargs_value_107 = tmp_class_creation_45__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2916;
        tmp_assign_source_451 = CALL_FUNCTION(tmp_called_value_163, tmp_args_value_107, tmp_kwargs_value_107);
        Py_DECREF(tmp_called_value_163);
        Py_DECREF(tmp_args_value_107);
        if (tmp_assign_source_451 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2916;

            goto try_except_handler_160;
        }
        assert(tmp_class_creation_45__prepared == NULL);
        tmp_class_creation_45__prepared = tmp_assign_source_451;
    }
    {
        bool tmp_condition_result_348;
        PyObject *tmp_operand_value_54;
        PyObject *tmp_expression_value_283;
        CHECK_OBJECT(tmp_class_creation_45__prepared);
        tmp_expression_value_283 = tmp_class_creation_45__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_283, mod_consts[413]);
        tmp_operand_value_54 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_54);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2916;

            goto try_except_handler_160;
        }
        tmp_condition_result_348 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_348 != false) {
            goto branch_yes_217;
        } else {
            goto branch_no_217;
        }
    }
    branch_yes_217:;
    {
        PyObject *tmp_raise_type_54;
        PyObject *tmp_raise_value_54;
        PyObject *tmp_left_value_54;
        PyObject *tmp_right_value_54;
        PyObject *tmp_tuple_element_213;
        PyObject *tmp_getattr_target_54;
        PyObject *tmp_getattr_attr_54;
        PyObject *tmp_getattr_default_54;
        tmp_raise_type_54 = PyExc_TypeError;
        tmp_left_value_54 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_45__metaclass);
        tmp_getattr_target_54 = tmp_class_creation_45__metaclass;
        tmp_getattr_attr_54 = mod_consts[190];
        tmp_getattr_default_54 = mod_consts[415];
        tmp_tuple_element_213 = BUILTIN_GETATTR(tmp_getattr_target_54, tmp_getattr_attr_54, tmp_getattr_default_54);
        if (tmp_tuple_element_213 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2916;

            goto try_except_handler_160;
        }
        tmp_right_value_54 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_284;
            PyObject *tmp_type_arg_108;
            PyTuple_SET_ITEM(tmp_right_value_54, 0, tmp_tuple_element_213);
            CHECK_OBJECT(tmp_class_creation_45__prepared);
            tmp_type_arg_108 = tmp_class_creation_45__prepared;
            tmp_expression_value_284 = BUILTIN_TYPE1(tmp_type_arg_108);
            assert(!(tmp_expression_value_284 == NULL));
            tmp_tuple_element_213 = LOOKUP_ATTRIBUTE(tmp_expression_value_284, mod_consts[190]);
            Py_DECREF(tmp_expression_value_284);
            if (tmp_tuple_element_213 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2916;

                goto tuple_build_exception_68;
            }
            PyTuple_SET_ITEM(tmp_right_value_54, 1, tmp_tuple_element_213);
        }
        goto tuple_build_noexception_68;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_68:;
        Py_DECREF(tmp_right_value_54);
        goto try_except_handler_160;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_68:;
        tmp_raise_value_54 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_54, tmp_right_value_54);
        Py_DECREF(tmp_right_value_54);
        if (tmp_raise_value_54 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2916;

            goto try_except_handler_160;
        }
        exception_type = tmp_raise_type_54;
        Py_INCREF(tmp_raise_type_54);
        exception_value = tmp_raise_value_54;
        exception_lineno = 2916;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_160;
    }
    branch_no_217:;
    goto branch_end_216;
    branch_no_216:;
    {
        PyObject *tmp_assign_source_452;
        tmp_assign_source_452 = PyDict_New();
        assert(tmp_class_creation_45__prepared == NULL);
        tmp_class_creation_45__prepared = tmp_assign_source_452;
    }
    branch_end_216:;
    {
        PyObject *tmp_assign_source_453;
        {
            PyObject *tmp_set_locals_54;
            CHECK_OBJECT(tmp_class_creation_45__prepared);
            tmp_set_locals_54 = tmp_class_creation_45__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__54_BINARY_2916 = tmp_set_locals_54;
            Py_INCREF(tmp_set_locals_54);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__54_BINARY_2916, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2916;

            goto try_except_handler_162;
        }
        tmp_dictset_value = mod_consts[694];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__54_BINARY_2916, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2916;

            goto try_except_handler_162;
        }
        tmp_dictset_value = mod_consts[122];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__54_BINARY_2916, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2916;

            goto try_except_handler_162;
        }
        if (isFrameUnusable(cache_frame_bbb3be16f4c3f03b451ed3e5919b1208_53)) {
            Py_XDECREF(cache_frame_bbb3be16f4c3f03b451ed3e5919b1208_53);

#if _DEBUG_REFCOUNTS
            if (cache_frame_bbb3be16f4c3f03b451ed3e5919b1208_53 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_bbb3be16f4c3f03b451ed3e5919b1208_53 = MAKE_FUNCTION_FRAME(codeobj_bbb3be16f4c3f03b451ed3e5919b1208, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_bbb3be16f4c3f03b451ed3e5919b1208_53->m_type_description == NULL);
        frame_bbb3be16f4c3f03b451ed3e5919b1208_53 = cache_frame_bbb3be16f4c3f03b451ed3e5919b1208_53;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_bbb3be16f4c3f03b451ed3e5919b1208_53);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_bbb3be16f4c3f03b451ed3e5919b1208_53) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[122];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__54_BINARY_2916, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2920;
            type_description_2 = "o";
            goto frame_exception_exit_53;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_bbb3be16f4c3f03b451ed3e5919b1208_53);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_52;

        frame_exception_exit_53:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_bbb3be16f4c3f03b451ed3e5919b1208_53);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_bbb3be16f4c3f03b451ed3e5919b1208_53, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_bbb3be16f4c3f03b451ed3e5919b1208_53->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_bbb3be16f4c3f03b451ed3e5919b1208_53, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_bbb3be16f4c3f03b451ed3e5919b1208_53,
            type_description_2,
            outline_53_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_bbb3be16f4c3f03b451ed3e5919b1208_53 == cache_frame_bbb3be16f4c3f03b451ed3e5919b1208_53) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_bbb3be16f4c3f03b451ed3e5919b1208_53);
            cache_frame_bbb3be16f4c3f03b451ed3e5919b1208_53 = NULL;
        }

        assertFrameObject(frame_bbb3be16f4c3f03b451ed3e5919b1208_53);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_52;

        frame_no_exception_52:;
        goto skip_nested_handling_52;
        nested_frame_exit_52:;

        goto try_except_handler_162;
        skip_nested_handling_52:;
        {
            nuitka_bool tmp_condition_result_349;
            PyObject *tmp_cmp_expr_left_54;
            PyObject *tmp_cmp_expr_right_54;
            CHECK_OBJECT(tmp_class_creation_45__bases);
            tmp_cmp_expr_left_54 = tmp_class_creation_45__bases;
            CHECK_OBJECT(tmp_class_creation_45__bases_orig);
            tmp_cmp_expr_right_54 = tmp_class_creation_45__bases_orig;
            tmp_condition_result_349 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_54, tmp_cmp_expr_right_54);
            if (tmp_condition_result_349 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2916;

                goto try_except_handler_162;
            }
            if (tmp_condition_result_349 == NUITKA_BOOL_TRUE) {
                goto branch_yes_218;
            } else {
                goto branch_no_218;
            }
            assert(tmp_condition_result_349 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_218:;
        CHECK_OBJECT(tmp_class_creation_45__bases_orig);
        tmp_dictset_value = tmp_class_creation_45__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__54_BINARY_2916, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2916;

            goto try_except_handler_162;
        }
        branch_no_218:;
        {
            PyObject *tmp_assign_source_454;
            PyObject *tmp_called_value_164;
            PyObject *tmp_args_value_108;
            PyObject *tmp_tuple_element_214;
            PyObject *tmp_kwargs_value_108;
            CHECK_OBJECT(tmp_class_creation_45__metaclass);
            tmp_called_value_164 = tmp_class_creation_45__metaclass;
            tmp_tuple_element_214 = mod_consts[122];
            tmp_args_value_108 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_108, 0, tmp_tuple_element_214);
            CHECK_OBJECT(tmp_class_creation_45__bases);
            tmp_tuple_element_214 = tmp_class_creation_45__bases;
            PyTuple_SET_ITEM0(tmp_args_value_108, 1, tmp_tuple_element_214);
            tmp_tuple_element_214 = locals_sqlalchemy$sql$sqltypes$$$class__54_BINARY_2916;
            PyTuple_SET_ITEM0(tmp_args_value_108, 2, tmp_tuple_element_214);
            CHECK_OBJECT(tmp_class_creation_45__class_decl_dict);
            tmp_kwargs_value_108 = tmp_class_creation_45__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2916;
            tmp_assign_source_454 = CALL_FUNCTION(tmp_called_value_164, tmp_args_value_108, tmp_kwargs_value_108);
            Py_DECREF(tmp_args_value_108);
            if (tmp_assign_source_454 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2916;

                goto try_except_handler_162;
            }
            assert(outline_53_var___class__ == NULL);
            outline_53_var___class__ = tmp_assign_source_454;
        }
        CHECK_OBJECT(outline_53_var___class__);
        tmp_assign_source_453 = outline_53_var___class__;
        Py_INCREF(tmp_assign_source_453);
        goto try_return_handler_162;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_162:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__54_BINARY_2916);
        locals_sqlalchemy$sql$sqltypes$$$class__54_BINARY_2916 = NULL;
        goto try_return_handler_161;
        // Exception handler code:
        try_except_handler_162:;
        exception_keeper_type_160 = exception_type;
        exception_keeper_value_160 = exception_value;
        exception_keeper_tb_160 = exception_tb;
        exception_keeper_lineno_160 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__54_BINARY_2916);
        locals_sqlalchemy$sql$sqltypes$$$class__54_BINARY_2916 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_160;
        exception_value = exception_keeper_value_160;
        exception_tb = exception_keeper_tb_160;
        exception_lineno = exception_keeper_lineno_160;

        goto try_except_handler_161;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_161:;
        CHECK_OBJECT(outline_53_var___class__);
        Py_DECREF(outline_53_var___class__);
        outline_53_var___class__ = NULL;
        goto outline_result_54;
        // Exception handler code:
        try_except_handler_161:;
        exception_keeper_type_161 = exception_type;
        exception_keeper_value_161 = exception_value;
        exception_keeper_tb_161 = exception_tb;
        exception_keeper_lineno_161 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_161;
        exception_value = exception_keeper_value_161;
        exception_tb = exception_keeper_tb_161;
        exception_lineno = exception_keeper_lineno_161;

        goto outline_exception_54;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_54:;
        exception_lineno = 2916;
        goto try_except_handler_160;
        outline_result_54:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[122], tmp_assign_source_453);
    }
    goto try_end_54;
    // Exception handler code:
    try_except_handler_160:;
    exception_keeper_type_162 = exception_type;
    exception_keeper_value_162 = exception_value;
    exception_keeper_tb_162 = exception_tb;
    exception_keeper_lineno_162 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_45__bases_orig);
    tmp_class_creation_45__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_45__bases);
    tmp_class_creation_45__bases = NULL;
    Py_XDECREF(tmp_class_creation_45__class_decl_dict);
    tmp_class_creation_45__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_45__metaclass);
    tmp_class_creation_45__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_45__prepared);
    tmp_class_creation_45__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_162;
    exception_value = exception_keeper_value_162;
    exception_tb = exception_keeper_tb_162;
    exception_lineno = exception_keeper_lineno_162;

    goto frame_exception_exit_1;
    // End of try:
    try_end_54:;
    CHECK_OBJECT(tmp_class_creation_45__bases_orig);
    Py_DECREF(tmp_class_creation_45__bases_orig);
    tmp_class_creation_45__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_45__bases);
    Py_DECREF(tmp_class_creation_45__bases);
    tmp_class_creation_45__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_45__class_decl_dict);
    Py_DECREF(tmp_class_creation_45__class_decl_dict);
    tmp_class_creation_45__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_45__metaclass);
    Py_DECREF(tmp_class_creation_45__metaclass);
    tmp_class_creation_45__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_45__prepared);
    Py_DECREF(tmp_class_creation_45__prepared);
    tmp_class_creation_45__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_455;
        PyObject *tmp_tuple_element_215;
        tmp_tuple_element_215 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[119]);

        if (unlikely(tmp_tuple_element_215 == NULL)) {
            tmp_tuple_element_215 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[119]);
        }

        if (tmp_tuple_element_215 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2923;

            goto try_except_handler_163;
        }
        tmp_assign_source_455 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_455, 0, tmp_tuple_element_215);
        assert(tmp_class_creation_46__bases_orig == NULL);
        tmp_class_creation_46__bases_orig = tmp_assign_source_455;
    }
    {
        PyObject *tmp_assign_source_456;
        PyObject *tmp_dircall_arg1_55;
        CHECK_OBJECT(tmp_class_creation_46__bases_orig);
        tmp_dircall_arg1_55 = tmp_class_creation_46__bases_orig;
        Py_INCREF(tmp_dircall_arg1_55);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_55};
            tmp_assign_source_456 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_456 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2923;

            goto try_except_handler_163;
        }
        assert(tmp_class_creation_46__bases == NULL);
        tmp_class_creation_46__bases = tmp_assign_source_456;
    }
    {
        PyObject *tmp_assign_source_457;
        tmp_assign_source_457 = PyDict_New();
        assert(tmp_class_creation_46__class_decl_dict == NULL);
        tmp_class_creation_46__class_decl_dict = tmp_assign_source_457;
    }
    {
        PyObject *tmp_assign_source_458;
        PyObject *tmp_metaclass_value_55;
        bool tmp_condition_result_350;
        PyObject *tmp_key_value_163;
        PyObject *tmp_dict_arg_value_163;
        PyObject *tmp_dict_arg_value_164;
        PyObject *tmp_key_value_164;
        nuitka_bool tmp_condition_result_351;
        int tmp_truth_name_57;
        PyObject *tmp_type_arg_109;
        PyObject *tmp_expression_value_285;
        PyObject *tmp_subscript_value_55;
        PyObject *tmp_bases_value_55;
        tmp_key_value_163 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_46__class_decl_dict);
        tmp_dict_arg_value_163 = tmp_class_creation_46__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_163, tmp_key_value_163);
        assert(!(tmp_res == -1));
        tmp_condition_result_350 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_350 != false) {
            goto condexpr_true_132;
        } else {
            goto condexpr_false_132;
        }
        condexpr_true_132:;
        CHECK_OBJECT(tmp_class_creation_46__class_decl_dict);
        tmp_dict_arg_value_164 = tmp_class_creation_46__class_decl_dict;
        tmp_key_value_164 = mod_consts[410];
        tmp_metaclass_value_55 = DICT_GET_ITEM0(tmp_dict_arg_value_164, tmp_key_value_164);
        if (tmp_metaclass_value_55 == NULL) {
            tmp_metaclass_value_55 = Py_None;
        }
        assert(!(tmp_metaclass_value_55 == NULL));
        Py_INCREF(tmp_metaclass_value_55);
        goto condexpr_end_132;
        condexpr_false_132:;
        CHECK_OBJECT(tmp_class_creation_46__bases);
        tmp_truth_name_57 = CHECK_IF_TRUE(tmp_class_creation_46__bases);
        if (tmp_truth_name_57 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2923;

            goto try_except_handler_163;
        }
        tmp_condition_result_351 = tmp_truth_name_57 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_351 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_133;
        } else {
            goto condexpr_false_133;
        }
        condexpr_true_133:;
        CHECK_OBJECT(tmp_class_creation_46__bases);
        tmp_expression_value_285 = tmp_class_creation_46__bases;
        tmp_subscript_value_55 = mod_consts[52];
        tmp_type_arg_109 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_285, tmp_subscript_value_55, 0);
        if (tmp_type_arg_109 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2923;

            goto try_except_handler_163;
        }
        tmp_metaclass_value_55 = BUILTIN_TYPE1(tmp_type_arg_109);
        Py_DECREF(tmp_type_arg_109);
        if (tmp_metaclass_value_55 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2923;

            goto try_except_handler_163;
        }
        goto condexpr_end_133;
        condexpr_false_133:;
        tmp_metaclass_value_55 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_55);
        condexpr_end_133:;
        condexpr_end_132:;
        CHECK_OBJECT(tmp_class_creation_46__bases);
        tmp_bases_value_55 = tmp_class_creation_46__bases;
        tmp_assign_source_458 = SELECT_METACLASS(tmp_metaclass_value_55, tmp_bases_value_55);
        Py_DECREF(tmp_metaclass_value_55);
        if (tmp_assign_source_458 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2923;

            goto try_except_handler_163;
        }
        assert(tmp_class_creation_46__metaclass == NULL);
        tmp_class_creation_46__metaclass = tmp_assign_source_458;
    }
    {
        bool tmp_condition_result_352;
        PyObject *tmp_key_value_165;
        PyObject *tmp_dict_arg_value_165;
        tmp_key_value_165 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_46__class_decl_dict);
        tmp_dict_arg_value_165 = tmp_class_creation_46__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_165, tmp_key_value_165);
        assert(!(tmp_res == -1));
        tmp_condition_result_352 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_352 != false) {
            goto branch_yes_219;
        } else {
            goto branch_no_219;
        }
    }
    branch_yes_219:;
    CHECK_OBJECT(tmp_class_creation_46__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_46__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2923;

        goto try_except_handler_163;
    }
    branch_no_219:;
    {
        nuitka_bool tmp_condition_result_353;
        PyObject *tmp_expression_value_286;
        CHECK_OBJECT(tmp_class_creation_46__metaclass);
        tmp_expression_value_286 = tmp_class_creation_46__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_286, mod_consts[411]);
        tmp_condition_result_353 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_353 == NUITKA_BOOL_TRUE) {
            goto branch_yes_220;
        } else {
            goto branch_no_220;
        }
    }
    branch_yes_220:;
    {
        PyObject *tmp_assign_source_459;
        PyObject *tmp_called_value_165;
        PyObject *tmp_expression_value_287;
        PyObject *tmp_args_value_109;
        PyObject *tmp_tuple_element_216;
        PyObject *tmp_kwargs_value_109;
        CHECK_OBJECT(tmp_class_creation_46__metaclass);
        tmp_expression_value_287 = tmp_class_creation_46__metaclass;
        tmp_called_value_165 = LOOKUP_ATTRIBUTE(tmp_expression_value_287, mod_consts[411]);
        if (tmp_called_value_165 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2923;

            goto try_except_handler_163;
        }
        tmp_tuple_element_216 = mod_consts[695];
        tmp_args_value_109 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_109, 0, tmp_tuple_element_216);
        CHECK_OBJECT(tmp_class_creation_46__bases);
        tmp_tuple_element_216 = tmp_class_creation_46__bases;
        PyTuple_SET_ITEM0(tmp_args_value_109, 1, tmp_tuple_element_216);
        CHECK_OBJECT(tmp_class_creation_46__class_decl_dict);
        tmp_kwargs_value_109 = tmp_class_creation_46__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2923;
        tmp_assign_source_459 = CALL_FUNCTION(tmp_called_value_165, tmp_args_value_109, tmp_kwargs_value_109);
        Py_DECREF(tmp_called_value_165);
        Py_DECREF(tmp_args_value_109);
        if (tmp_assign_source_459 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2923;

            goto try_except_handler_163;
        }
        assert(tmp_class_creation_46__prepared == NULL);
        tmp_class_creation_46__prepared = tmp_assign_source_459;
    }
    {
        bool tmp_condition_result_354;
        PyObject *tmp_operand_value_55;
        PyObject *tmp_expression_value_288;
        CHECK_OBJECT(tmp_class_creation_46__prepared);
        tmp_expression_value_288 = tmp_class_creation_46__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_288, mod_consts[413]);
        tmp_operand_value_55 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_55);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2923;

            goto try_except_handler_163;
        }
        tmp_condition_result_354 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_354 != false) {
            goto branch_yes_221;
        } else {
            goto branch_no_221;
        }
    }
    branch_yes_221:;
    {
        PyObject *tmp_raise_type_55;
        PyObject *tmp_raise_value_55;
        PyObject *tmp_left_value_55;
        PyObject *tmp_right_value_55;
        PyObject *tmp_tuple_element_217;
        PyObject *tmp_getattr_target_55;
        PyObject *tmp_getattr_attr_55;
        PyObject *tmp_getattr_default_55;
        tmp_raise_type_55 = PyExc_TypeError;
        tmp_left_value_55 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_46__metaclass);
        tmp_getattr_target_55 = tmp_class_creation_46__metaclass;
        tmp_getattr_attr_55 = mod_consts[190];
        tmp_getattr_default_55 = mod_consts[415];
        tmp_tuple_element_217 = BUILTIN_GETATTR(tmp_getattr_target_55, tmp_getattr_attr_55, tmp_getattr_default_55);
        if (tmp_tuple_element_217 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2923;

            goto try_except_handler_163;
        }
        tmp_right_value_55 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_289;
            PyObject *tmp_type_arg_110;
            PyTuple_SET_ITEM(tmp_right_value_55, 0, tmp_tuple_element_217);
            CHECK_OBJECT(tmp_class_creation_46__prepared);
            tmp_type_arg_110 = tmp_class_creation_46__prepared;
            tmp_expression_value_289 = BUILTIN_TYPE1(tmp_type_arg_110);
            assert(!(tmp_expression_value_289 == NULL));
            tmp_tuple_element_217 = LOOKUP_ATTRIBUTE(tmp_expression_value_289, mod_consts[190]);
            Py_DECREF(tmp_expression_value_289);
            if (tmp_tuple_element_217 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2923;

                goto tuple_build_exception_69;
            }
            PyTuple_SET_ITEM(tmp_right_value_55, 1, tmp_tuple_element_217);
        }
        goto tuple_build_noexception_69;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_69:;
        Py_DECREF(tmp_right_value_55);
        goto try_except_handler_163;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_69:;
        tmp_raise_value_55 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_55, tmp_right_value_55);
        Py_DECREF(tmp_right_value_55);
        if (tmp_raise_value_55 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2923;

            goto try_except_handler_163;
        }
        exception_type = tmp_raise_type_55;
        Py_INCREF(tmp_raise_type_55);
        exception_value = tmp_raise_value_55;
        exception_lineno = 2923;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_163;
    }
    branch_no_221:;
    goto branch_end_220;
    branch_no_220:;
    {
        PyObject *tmp_assign_source_460;
        tmp_assign_source_460 = PyDict_New();
        assert(tmp_class_creation_46__prepared == NULL);
        tmp_class_creation_46__prepared = tmp_assign_source_460;
    }
    branch_end_220:;
    {
        PyObject *tmp_assign_source_461;
        {
            PyObject *tmp_set_locals_55;
            CHECK_OBJECT(tmp_class_creation_46__prepared);
            tmp_set_locals_55 = tmp_class_creation_46__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__55_VARBINARY_2923 = tmp_set_locals_55;
            Py_INCREF(tmp_set_locals_55);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__55_VARBINARY_2923, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2923;

            goto try_except_handler_165;
        }
        tmp_dictset_value = mod_consts[696];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__55_VARBINARY_2923, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2923;

            goto try_except_handler_165;
        }
        tmp_dictset_value = mod_consts[695];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__55_VARBINARY_2923, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2923;

            goto try_except_handler_165;
        }
        if (isFrameUnusable(cache_frame_9ed1c41dd3bbf10a08851a8fa95ad26d_54)) {
            Py_XDECREF(cache_frame_9ed1c41dd3bbf10a08851a8fa95ad26d_54);

#if _DEBUG_REFCOUNTS
            if (cache_frame_9ed1c41dd3bbf10a08851a8fa95ad26d_54 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_9ed1c41dd3bbf10a08851a8fa95ad26d_54 = MAKE_FUNCTION_FRAME(codeobj_9ed1c41dd3bbf10a08851a8fa95ad26d, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_9ed1c41dd3bbf10a08851a8fa95ad26d_54->m_type_description == NULL);
        frame_9ed1c41dd3bbf10a08851a8fa95ad26d_54 = cache_frame_9ed1c41dd3bbf10a08851a8fa95ad26d_54;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_9ed1c41dd3bbf10a08851a8fa95ad26d_54);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_9ed1c41dd3bbf10a08851a8fa95ad26d_54) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[695];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__55_VARBINARY_2923, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2927;
            type_description_2 = "o";
            goto frame_exception_exit_54;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_9ed1c41dd3bbf10a08851a8fa95ad26d_54);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_53;

        frame_exception_exit_54:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_9ed1c41dd3bbf10a08851a8fa95ad26d_54);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_9ed1c41dd3bbf10a08851a8fa95ad26d_54, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_9ed1c41dd3bbf10a08851a8fa95ad26d_54->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_9ed1c41dd3bbf10a08851a8fa95ad26d_54, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_9ed1c41dd3bbf10a08851a8fa95ad26d_54,
            type_description_2,
            outline_54_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_9ed1c41dd3bbf10a08851a8fa95ad26d_54 == cache_frame_9ed1c41dd3bbf10a08851a8fa95ad26d_54) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_9ed1c41dd3bbf10a08851a8fa95ad26d_54);
            cache_frame_9ed1c41dd3bbf10a08851a8fa95ad26d_54 = NULL;
        }

        assertFrameObject(frame_9ed1c41dd3bbf10a08851a8fa95ad26d_54);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_53;

        frame_no_exception_53:;
        goto skip_nested_handling_53;
        nested_frame_exit_53:;

        goto try_except_handler_165;
        skip_nested_handling_53:;
        {
            nuitka_bool tmp_condition_result_355;
            PyObject *tmp_cmp_expr_left_55;
            PyObject *tmp_cmp_expr_right_55;
            CHECK_OBJECT(tmp_class_creation_46__bases);
            tmp_cmp_expr_left_55 = tmp_class_creation_46__bases;
            CHECK_OBJECT(tmp_class_creation_46__bases_orig);
            tmp_cmp_expr_right_55 = tmp_class_creation_46__bases_orig;
            tmp_condition_result_355 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_55, tmp_cmp_expr_right_55);
            if (tmp_condition_result_355 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2923;

                goto try_except_handler_165;
            }
            if (tmp_condition_result_355 == NUITKA_BOOL_TRUE) {
                goto branch_yes_222;
            } else {
                goto branch_no_222;
            }
            assert(tmp_condition_result_355 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_222:;
        CHECK_OBJECT(tmp_class_creation_46__bases_orig);
        tmp_dictset_value = tmp_class_creation_46__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__55_VARBINARY_2923, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2923;

            goto try_except_handler_165;
        }
        branch_no_222:;
        {
            PyObject *tmp_assign_source_462;
            PyObject *tmp_called_value_166;
            PyObject *tmp_args_value_110;
            PyObject *tmp_tuple_element_218;
            PyObject *tmp_kwargs_value_110;
            CHECK_OBJECT(tmp_class_creation_46__metaclass);
            tmp_called_value_166 = tmp_class_creation_46__metaclass;
            tmp_tuple_element_218 = mod_consts[695];
            tmp_args_value_110 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_110, 0, tmp_tuple_element_218);
            CHECK_OBJECT(tmp_class_creation_46__bases);
            tmp_tuple_element_218 = tmp_class_creation_46__bases;
            PyTuple_SET_ITEM0(tmp_args_value_110, 1, tmp_tuple_element_218);
            tmp_tuple_element_218 = locals_sqlalchemy$sql$sqltypes$$$class__55_VARBINARY_2923;
            PyTuple_SET_ITEM0(tmp_args_value_110, 2, tmp_tuple_element_218);
            CHECK_OBJECT(tmp_class_creation_46__class_decl_dict);
            tmp_kwargs_value_110 = tmp_class_creation_46__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2923;
            tmp_assign_source_462 = CALL_FUNCTION(tmp_called_value_166, tmp_args_value_110, tmp_kwargs_value_110);
            Py_DECREF(tmp_args_value_110);
            if (tmp_assign_source_462 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2923;

                goto try_except_handler_165;
            }
            assert(outline_54_var___class__ == NULL);
            outline_54_var___class__ = tmp_assign_source_462;
        }
        CHECK_OBJECT(outline_54_var___class__);
        tmp_assign_source_461 = outline_54_var___class__;
        Py_INCREF(tmp_assign_source_461);
        goto try_return_handler_165;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_165:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__55_VARBINARY_2923);
        locals_sqlalchemy$sql$sqltypes$$$class__55_VARBINARY_2923 = NULL;
        goto try_return_handler_164;
        // Exception handler code:
        try_except_handler_165:;
        exception_keeper_type_163 = exception_type;
        exception_keeper_value_163 = exception_value;
        exception_keeper_tb_163 = exception_tb;
        exception_keeper_lineno_163 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__55_VARBINARY_2923);
        locals_sqlalchemy$sql$sqltypes$$$class__55_VARBINARY_2923 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_163;
        exception_value = exception_keeper_value_163;
        exception_tb = exception_keeper_tb_163;
        exception_lineno = exception_keeper_lineno_163;

        goto try_except_handler_164;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_164:;
        CHECK_OBJECT(outline_54_var___class__);
        Py_DECREF(outline_54_var___class__);
        outline_54_var___class__ = NULL;
        goto outline_result_55;
        // Exception handler code:
        try_except_handler_164:;
        exception_keeper_type_164 = exception_type;
        exception_keeper_value_164 = exception_value;
        exception_keeper_tb_164 = exception_tb;
        exception_keeper_lineno_164 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_164;
        exception_value = exception_keeper_value_164;
        exception_tb = exception_keeper_tb_164;
        exception_lineno = exception_keeper_lineno_164;

        goto outline_exception_55;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_55:;
        exception_lineno = 2923;
        goto try_except_handler_163;
        outline_result_55:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[695], tmp_assign_source_461);
    }
    goto try_end_55;
    // Exception handler code:
    try_except_handler_163:;
    exception_keeper_type_165 = exception_type;
    exception_keeper_value_165 = exception_value;
    exception_keeper_tb_165 = exception_tb;
    exception_keeper_lineno_165 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_46__bases_orig);
    tmp_class_creation_46__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_46__bases);
    tmp_class_creation_46__bases = NULL;
    Py_XDECREF(tmp_class_creation_46__class_decl_dict);
    tmp_class_creation_46__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_46__metaclass);
    tmp_class_creation_46__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_46__prepared);
    tmp_class_creation_46__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_165;
    exception_value = exception_keeper_value_165;
    exception_tb = exception_keeper_tb_165;
    exception_lineno = exception_keeper_lineno_165;

    goto frame_exception_exit_1;
    // End of try:
    try_end_55:;
    CHECK_OBJECT(tmp_class_creation_46__bases_orig);
    Py_DECREF(tmp_class_creation_46__bases_orig);
    tmp_class_creation_46__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_46__bases);
    Py_DECREF(tmp_class_creation_46__bases);
    tmp_class_creation_46__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_46__class_decl_dict);
    Py_DECREF(tmp_class_creation_46__class_decl_dict);
    tmp_class_creation_46__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_46__metaclass);
    Py_DECREF(tmp_class_creation_46__metaclass);
    tmp_class_creation_46__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_46__prepared);
    Py_DECREF(tmp_class_creation_46__prepared);
    tmp_class_creation_46__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_463;
        PyObject *tmp_tuple_element_219;
        tmp_tuple_element_219 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[297]);

        if (unlikely(tmp_tuple_element_219 == NULL)) {
            tmp_tuple_element_219 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[297]);
        }

        if (tmp_tuple_element_219 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2930;

            goto try_except_handler_166;
        }
        tmp_assign_source_463 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_463, 0, tmp_tuple_element_219);
        assert(tmp_class_creation_47__bases_orig == NULL);
        tmp_class_creation_47__bases_orig = tmp_assign_source_463;
    }
    {
        PyObject *tmp_assign_source_464;
        PyObject *tmp_dircall_arg1_56;
        CHECK_OBJECT(tmp_class_creation_47__bases_orig);
        tmp_dircall_arg1_56 = tmp_class_creation_47__bases_orig;
        Py_INCREF(tmp_dircall_arg1_56);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_56};
            tmp_assign_source_464 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_464 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2930;

            goto try_except_handler_166;
        }
        assert(tmp_class_creation_47__bases == NULL);
        tmp_class_creation_47__bases = tmp_assign_source_464;
    }
    {
        PyObject *tmp_assign_source_465;
        tmp_assign_source_465 = PyDict_New();
        assert(tmp_class_creation_47__class_decl_dict == NULL);
        tmp_class_creation_47__class_decl_dict = tmp_assign_source_465;
    }
    {
        PyObject *tmp_assign_source_466;
        PyObject *tmp_metaclass_value_56;
        bool tmp_condition_result_356;
        PyObject *tmp_key_value_166;
        PyObject *tmp_dict_arg_value_166;
        PyObject *tmp_dict_arg_value_167;
        PyObject *tmp_key_value_167;
        nuitka_bool tmp_condition_result_357;
        int tmp_truth_name_58;
        PyObject *tmp_type_arg_111;
        PyObject *tmp_expression_value_290;
        PyObject *tmp_subscript_value_56;
        PyObject *tmp_bases_value_56;
        tmp_key_value_166 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_47__class_decl_dict);
        tmp_dict_arg_value_166 = tmp_class_creation_47__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_166, tmp_key_value_166);
        assert(!(tmp_res == -1));
        tmp_condition_result_356 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_356 != false) {
            goto condexpr_true_134;
        } else {
            goto condexpr_false_134;
        }
        condexpr_true_134:;
        CHECK_OBJECT(tmp_class_creation_47__class_decl_dict);
        tmp_dict_arg_value_167 = tmp_class_creation_47__class_decl_dict;
        tmp_key_value_167 = mod_consts[410];
        tmp_metaclass_value_56 = DICT_GET_ITEM0(tmp_dict_arg_value_167, tmp_key_value_167);
        if (tmp_metaclass_value_56 == NULL) {
            tmp_metaclass_value_56 = Py_None;
        }
        assert(!(tmp_metaclass_value_56 == NULL));
        Py_INCREF(tmp_metaclass_value_56);
        goto condexpr_end_134;
        condexpr_false_134:;
        CHECK_OBJECT(tmp_class_creation_47__bases);
        tmp_truth_name_58 = CHECK_IF_TRUE(tmp_class_creation_47__bases);
        if (tmp_truth_name_58 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2930;

            goto try_except_handler_166;
        }
        tmp_condition_result_357 = tmp_truth_name_58 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_357 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_135;
        } else {
            goto condexpr_false_135;
        }
        condexpr_true_135:;
        CHECK_OBJECT(tmp_class_creation_47__bases);
        tmp_expression_value_290 = tmp_class_creation_47__bases;
        tmp_subscript_value_56 = mod_consts[52];
        tmp_type_arg_111 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_290, tmp_subscript_value_56, 0);
        if (tmp_type_arg_111 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2930;

            goto try_except_handler_166;
        }
        tmp_metaclass_value_56 = BUILTIN_TYPE1(tmp_type_arg_111);
        Py_DECREF(tmp_type_arg_111);
        if (tmp_metaclass_value_56 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2930;

            goto try_except_handler_166;
        }
        goto condexpr_end_135;
        condexpr_false_135:;
        tmp_metaclass_value_56 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_56);
        condexpr_end_135:;
        condexpr_end_134:;
        CHECK_OBJECT(tmp_class_creation_47__bases);
        tmp_bases_value_56 = tmp_class_creation_47__bases;
        tmp_assign_source_466 = SELECT_METACLASS(tmp_metaclass_value_56, tmp_bases_value_56);
        Py_DECREF(tmp_metaclass_value_56);
        if (tmp_assign_source_466 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2930;

            goto try_except_handler_166;
        }
        assert(tmp_class_creation_47__metaclass == NULL);
        tmp_class_creation_47__metaclass = tmp_assign_source_466;
    }
    {
        bool tmp_condition_result_358;
        PyObject *tmp_key_value_168;
        PyObject *tmp_dict_arg_value_168;
        tmp_key_value_168 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_47__class_decl_dict);
        tmp_dict_arg_value_168 = tmp_class_creation_47__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_168, tmp_key_value_168);
        assert(!(tmp_res == -1));
        tmp_condition_result_358 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_358 != false) {
            goto branch_yes_223;
        } else {
            goto branch_no_223;
        }
    }
    branch_yes_223:;
    CHECK_OBJECT(tmp_class_creation_47__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_47__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2930;

        goto try_except_handler_166;
    }
    branch_no_223:;
    {
        nuitka_bool tmp_condition_result_359;
        PyObject *tmp_expression_value_291;
        CHECK_OBJECT(tmp_class_creation_47__metaclass);
        tmp_expression_value_291 = tmp_class_creation_47__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_291, mod_consts[411]);
        tmp_condition_result_359 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_359 == NUITKA_BOOL_TRUE) {
            goto branch_yes_224;
        } else {
            goto branch_no_224;
        }
    }
    branch_yes_224:;
    {
        PyObject *tmp_assign_source_467;
        PyObject *tmp_called_value_167;
        PyObject *tmp_expression_value_292;
        PyObject *tmp_args_value_111;
        PyObject *tmp_tuple_element_220;
        PyObject *tmp_kwargs_value_111;
        CHECK_OBJECT(tmp_class_creation_47__metaclass);
        tmp_expression_value_292 = tmp_class_creation_47__metaclass;
        tmp_called_value_167 = LOOKUP_ATTRIBUTE(tmp_expression_value_292, mod_consts[411]);
        if (tmp_called_value_167 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2930;

            goto try_except_handler_166;
        }
        tmp_tuple_element_220 = mod_consts[697];
        tmp_args_value_111 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_111, 0, tmp_tuple_element_220);
        CHECK_OBJECT(tmp_class_creation_47__bases);
        tmp_tuple_element_220 = tmp_class_creation_47__bases;
        PyTuple_SET_ITEM0(tmp_args_value_111, 1, tmp_tuple_element_220);
        CHECK_OBJECT(tmp_class_creation_47__class_decl_dict);
        tmp_kwargs_value_111 = tmp_class_creation_47__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2930;
        tmp_assign_source_467 = CALL_FUNCTION(tmp_called_value_167, tmp_args_value_111, tmp_kwargs_value_111);
        Py_DECREF(tmp_called_value_167);
        Py_DECREF(tmp_args_value_111);
        if (tmp_assign_source_467 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2930;

            goto try_except_handler_166;
        }
        assert(tmp_class_creation_47__prepared == NULL);
        tmp_class_creation_47__prepared = tmp_assign_source_467;
    }
    {
        bool tmp_condition_result_360;
        PyObject *tmp_operand_value_56;
        PyObject *tmp_expression_value_293;
        CHECK_OBJECT(tmp_class_creation_47__prepared);
        tmp_expression_value_293 = tmp_class_creation_47__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_293, mod_consts[413]);
        tmp_operand_value_56 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_56);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2930;

            goto try_except_handler_166;
        }
        tmp_condition_result_360 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_360 != false) {
            goto branch_yes_225;
        } else {
            goto branch_no_225;
        }
    }
    branch_yes_225:;
    {
        PyObject *tmp_raise_type_56;
        PyObject *tmp_raise_value_56;
        PyObject *tmp_left_value_56;
        PyObject *tmp_right_value_56;
        PyObject *tmp_tuple_element_221;
        PyObject *tmp_getattr_target_56;
        PyObject *tmp_getattr_attr_56;
        PyObject *tmp_getattr_default_56;
        tmp_raise_type_56 = PyExc_TypeError;
        tmp_left_value_56 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_47__metaclass);
        tmp_getattr_target_56 = tmp_class_creation_47__metaclass;
        tmp_getattr_attr_56 = mod_consts[190];
        tmp_getattr_default_56 = mod_consts[415];
        tmp_tuple_element_221 = BUILTIN_GETATTR(tmp_getattr_target_56, tmp_getattr_attr_56, tmp_getattr_default_56);
        if (tmp_tuple_element_221 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2930;

            goto try_except_handler_166;
        }
        tmp_right_value_56 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_294;
            PyObject *tmp_type_arg_112;
            PyTuple_SET_ITEM(tmp_right_value_56, 0, tmp_tuple_element_221);
            CHECK_OBJECT(tmp_class_creation_47__prepared);
            tmp_type_arg_112 = tmp_class_creation_47__prepared;
            tmp_expression_value_294 = BUILTIN_TYPE1(tmp_type_arg_112);
            assert(!(tmp_expression_value_294 == NULL));
            tmp_tuple_element_221 = LOOKUP_ATTRIBUTE(tmp_expression_value_294, mod_consts[190]);
            Py_DECREF(tmp_expression_value_294);
            if (tmp_tuple_element_221 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2930;

                goto tuple_build_exception_70;
            }
            PyTuple_SET_ITEM(tmp_right_value_56, 1, tmp_tuple_element_221);
        }
        goto tuple_build_noexception_70;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_70:;
        Py_DECREF(tmp_right_value_56);
        goto try_except_handler_166;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_70:;
        tmp_raise_value_56 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_56, tmp_right_value_56);
        Py_DECREF(tmp_right_value_56);
        if (tmp_raise_value_56 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2930;

            goto try_except_handler_166;
        }
        exception_type = tmp_raise_type_56;
        Py_INCREF(tmp_raise_type_56);
        exception_value = tmp_raise_value_56;
        exception_lineno = 2930;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_166;
    }
    branch_no_225:;
    goto branch_end_224;
    branch_no_224:;
    {
        PyObject *tmp_assign_source_468;
        tmp_assign_source_468 = PyDict_New();
        assert(tmp_class_creation_47__prepared == NULL);
        tmp_class_creation_47__prepared = tmp_assign_source_468;
    }
    branch_end_224:;
    {
        PyObject *tmp_assign_source_469;
        {
            PyObject *tmp_set_locals_56;
            CHECK_OBJECT(tmp_class_creation_47__prepared);
            tmp_set_locals_56 = tmp_class_creation_47__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__56_BOOLEAN_2930 = tmp_set_locals_56;
            Py_INCREF(tmp_set_locals_56);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__56_BOOLEAN_2930, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2930;

            goto try_except_handler_168;
        }
        tmp_dictset_value = mod_consts[698];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__56_BOOLEAN_2930, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2930;

            goto try_except_handler_168;
        }
        tmp_dictset_value = mod_consts[697];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__56_BOOLEAN_2930, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2930;

            goto try_except_handler_168;
        }
        if (isFrameUnusable(cache_frame_5e93e047ae7af10f6f94f90bef907808_55)) {
            Py_XDECREF(cache_frame_5e93e047ae7af10f6f94f90bef907808_55);

#if _DEBUG_REFCOUNTS
            if (cache_frame_5e93e047ae7af10f6f94f90bef907808_55 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_5e93e047ae7af10f6f94f90bef907808_55 = MAKE_FUNCTION_FRAME(codeobj_5e93e047ae7af10f6f94f90bef907808, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_5e93e047ae7af10f6f94f90bef907808_55->m_type_description == NULL);
        frame_5e93e047ae7af10f6f94f90bef907808_55 = cache_frame_5e93e047ae7af10f6f94f90bef907808_55;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_5e93e047ae7af10f6f94f90bef907808_55);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_5e93e047ae7af10f6f94f90bef907808_55) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[697];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__56_BOOLEAN_2930, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2934;
            type_description_2 = "o";
            goto frame_exception_exit_55;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_5e93e047ae7af10f6f94f90bef907808_55);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_54;

        frame_exception_exit_55:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_5e93e047ae7af10f6f94f90bef907808_55);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_5e93e047ae7af10f6f94f90bef907808_55, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_5e93e047ae7af10f6f94f90bef907808_55->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_5e93e047ae7af10f6f94f90bef907808_55, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_5e93e047ae7af10f6f94f90bef907808_55,
            type_description_2,
            outline_55_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_5e93e047ae7af10f6f94f90bef907808_55 == cache_frame_5e93e047ae7af10f6f94f90bef907808_55) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_5e93e047ae7af10f6f94f90bef907808_55);
            cache_frame_5e93e047ae7af10f6f94f90bef907808_55 = NULL;
        }

        assertFrameObject(frame_5e93e047ae7af10f6f94f90bef907808_55);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_54;

        frame_no_exception_54:;
        goto skip_nested_handling_54;
        nested_frame_exit_54:;

        goto try_except_handler_168;
        skip_nested_handling_54:;
        {
            nuitka_bool tmp_condition_result_361;
            PyObject *tmp_cmp_expr_left_56;
            PyObject *tmp_cmp_expr_right_56;
            CHECK_OBJECT(tmp_class_creation_47__bases);
            tmp_cmp_expr_left_56 = tmp_class_creation_47__bases;
            CHECK_OBJECT(tmp_class_creation_47__bases_orig);
            tmp_cmp_expr_right_56 = tmp_class_creation_47__bases_orig;
            tmp_condition_result_361 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_56, tmp_cmp_expr_right_56);
            if (tmp_condition_result_361 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2930;

                goto try_except_handler_168;
            }
            if (tmp_condition_result_361 == NUITKA_BOOL_TRUE) {
                goto branch_yes_226;
            } else {
                goto branch_no_226;
            }
            assert(tmp_condition_result_361 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_226:;
        CHECK_OBJECT(tmp_class_creation_47__bases_orig);
        tmp_dictset_value = tmp_class_creation_47__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__56_BOOLEAN_2930, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2930;

            goto try_except_handler_168;
        }
        branch_no_226:;
        {
            PyObject *tmp_assign_source_470;
            PyObject *tmp_called_value_168;
            PyObject *tmp_args_value_112;
            PyObject *tmp_tuple_element_222;
            PyObject *tmp_kwargs_value_112;
            CHECK_OBJECT(tmp_class_creation_47__metaclass);
            tmp_called_value_168 = tmp_class_creation_47__metaclass;
            tmp_tuple_element_222 = mod_consts[697];
            tmp_args_value_112 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_112, 0, tmp_tuple_element_222);
            CHECK_OBJECT(tmp_class_creation_47__bases);
            tmp_tuple_element_222 = tmp_class_creation_47__bases;
            PyTuple_SET_ITEM0(tmp_args_value_112, 1, tmp_tuple_element_222);
            tmp_tuple_element_222 = locals_sqlalchemy$sql$sqltypes$$$class__56_BOOLEAN_2930;
            PyTuple_SET_ITEM0(tmp_args_value_112, 2, tmp_tuple_element_222);
            CHECK_OBJECT(tmp_class_creation_47__class_decl_dict);
            tmp_kwargs_value_112 = tmp_class_creation_47__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2930;
            tmp_assign_source_470 = CALL_FUNCTION(tmp_called_value_168, tmp_args_value_112, tmp_kwargs_value_112);
            Py_DECREF(tmp_args_value_112);
            if (tmp_assign_source_470 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2930;

                goto try_except_handler_168;
            }
            assert(outline_55_var___class__ == NULL);
            outline_55_var___class__ = tmp_assign_source_470;
        }
        CHECK_OBJECT(outline_55_var___class__);
        tmp_assign_source_469 = outline_55_var___class__;
        Py_INCREF(tmp_assign_source_469);
        goto try_return_handler_168;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_168:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__56_BOOLEAN_2930);
        locals_sqlalchemy$sql$sqltypes$$$class__56_BOOLEAN_2930 = NULL;
        goto try_return_handler_167;
        // Exception handler code:
        try_except_handler_168:;
        exception_keeper_type_166 = exception_type;
        exception_keeper_value_166 = exception_value;
        exception_keeper_tb_166 = exception_tb;
        exception_keeper_lineno_166 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__56_BOOLEAN_2930);
        locals_sqlalchemy$sql$sqltypes$$$class__56_BOOLEAN_2930 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_166;
        exception_value = exception_keeper_value_166;
        exception_tb = exception_keeper_tb_166;
        exception_lineno = exception_keeper_lineno_166;

        goto try_except_handler_167;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_167:;
        CHECK_OBJECT(outline_55_var___class__);
        Py_DECREF(outline_55_var___class__);
        outline_55_var___class__ = NULL;
        goto outline_result_56;
        // Exception handler code:
        try_except_handler_167:;
        exception_keeper_type_167 = exception_type;
        exception_keeper_value_167 = exception_value;
        exception_keeper_tb_167 = exception_tb;
        exception_keeper_lineno_167 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_167;
        exception_value = exception_keeper_value_167;
        exception_tb = exception_keeper_tb_167;
        exception_lineno = exception_keeper_lineno_167;

        goto outline_exception_56;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_56:;
        exception_lineno = 2930;
        goto try_except_handler_166;
        outline_result_56:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[697], tmp_assign_source_469);
    }
    goto try_end_56;
    // Exception handler code:
    try_except_handler_166:;
    exception_keeper_type_168 = exception_type;
    exception_keeper_value_168 = exception_value;
    exception_keeper_tb_168 = exception_tb;
    exception_keeper_lineno_168 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_47__bases_orig);
    tmp_class_creation_47__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_47__bases);
    tmp_class_creation_47__bases = NULL;
    Py_XDECREF(tmp_class_creation_47__class_decl_dict);
    tmp_class_creation_47__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_47__metaclass);
    tmp_class_creation_47__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_47__prepared);
    tmp_class_creation_47__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_168;
    exception_value = exception_keeper_value_168;
    exception_tb = exception_keeper_tb_168;
    exception_lineno = exception_keeper_lineno_168;

    goto frame_exception_exit_1;
    // End of try:
    try_end_56:;
    CHECK_OBJECT(tmp_class_creation_47__bases_orig);
    Py_DECREF(tmp_class_creation_47__bases_orig);
    tmp_class_creation_47__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_47__bases);
    Py_DECREF(tmp_class_creation_47__bases);
    tmp_class_creation_47__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_47__class_decl_dict);
    Py_DECREF(tmp_class_creation_47__class_decl_dict);
    tmp_class_creation_47__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_47__metaclass);
    Py_DECREF(tmp_class_creation_47__metaclass);
    tmp_class_creation_47__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_47__prepared);
    Py_DECREF(tmp_class_creation_47__prepared);
    tmp_class_creation_47__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_471;
        PyObject *tmp_tuple_element_223;
        tmp_tuple_element_223 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[398]);

        if (unlikely(tmp_tuple_element_223 == NULL)) {
            tmp_tuple_element_223 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[398]);
        }

        if (tmp_tuple_element_223 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2937;

            goto try_except_handler_169;
        }
        tmp_assign_source_471 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_471, 0, tmp_tuple_element_223);
        assert(tmp_class_creation_48__bases_orig == NULL);
        tmp_class_creation_48__bases_orig = tmp_assign_source_471;
    }
    {
        PyObject *tmp_assign_source_472;
        PyObject *tmp_dircall_arg1_57;
        CHECK_OBJECT(tmp_class_creation_48__bases_orig);
        tmp_dircall_arg1_57 = tmp_class_creation_48__bases_orig;
        Py_INCREF(tmp_dircall_arg1_57);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_57};
            tmp_assign_source_472 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_472 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2937;

            goto try_except_handler_169;
        }
        assert(tmp_class_creation_48__bases == NULL);
        tmp_class_creation_48__bases = tmp_assign_source_472;
    }
    {
        PyObject *tmp_assign_source_473;
        tmp_assign_source_473 = PyDict_New();
        assert(tmp_class_creation_48__class_decl_dict == NULL);
        tmp_class_creation_48__class_decl_dict = tmp_assign_source_473;
    }
    {
        PyObject *tmp_assign_source_474;
        PyObject *tmp_metaclass_value_57;
        bool tmp_condition_result_362;
        PyObject *tmp_key_value_169;
        PyObject *tmp_dict_arg_value_169;
        PyObject *tmp_dict_arg_value_170;
        PyObject *tmp_key_value_170;
        nuitka_bool tmp_condition_result_363;
        int tmp_truth_name_59;
        PyObject *tmp_type_arg_113;
        PyObject *tmp_expression_value_295;
        PyObject *tmp_subscript_value_57;
        PyObject *tmp_bases_value_57;
        tmp_key_value_169 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_48__class_decl_dict);
        tmp_dict_arg_value_169 = tmp_class_creation_48__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_169, tmp_key_value_169);
        assert(!(tmp_res == -1));
        tmp_condition_result_362 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_362 != false) {
            goto condexpr_true_136;
        } else {
            goto condexpr_false_136;
        }
        condexpr_true_136:;
        CHECK_OBJECT(tmp_class_creation_48__class_decl_dict);
        tmp_dict_arg_value_170 = tmp_class_creation_48__class_decl_dict;
        tmp_key_value_170 = mod_consts[410];
        tmp_metaclass_value_57 = DICT_GET_ITEM0(tmp_dict_arg_value_170, tmp_key_value_170);
        if (tmp_metaclass_value_57 == NULL) {
            tmp_metaclass_value_57 = Py_None;
        }
        assert(!(tmp_metaclass_value_57 == NULL));
        Py_INCREF(tmp_metaclass_value_57);
        goto condexpr_end_136;
        condexpr_false_136:;
        CHECK_OBJECT(tmp_class_creation_48__bases);
        tmp_truth_name_59 = CHECK_IF_TRUE(tmp_class_creation_48__bases);
        if (tmp_truth_name_59 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2937;

            goto try_except_handler_169;
        }
        tmp_condition_result_363 = tmp_truth_name_59 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_363 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_137;
        } else {
            goto condexpr_false_137;
        }
        condexpr_true_137:;
        CHECK_OBJECT(tmp_class_creation_48__bases);
        tmp_expression_value_295 = tmp_class_creation_48__bases;
        tmp_subscript_value_57 = mod_consts[52];
        tmp_type_arg_113 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_295, tmp_subscript_value_57, 0);
        if (tmp_type_arg_113 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2937;

            goto try_except_handler_169;
        }
        tmp_metaclass_value_57 = BUILTIN_TYPE1(tmp_type_arg_113);
        Py_DECREF(tmp_type_arg_113);
        if (tmp_metaclass_value_57 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2937;

            goto try_except_handler_169;
        }
        goto condexpr_end_137;
        condexpr_false_137:;
        tmp_metaclass_value_57 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_57);
        condexpr_end_137:;
        condexpr_end_136:;
        CHECK_OBJECT(tmp_class_creation_48__bases);
        tmp_bases_value_57 = tmp_class_creation_48__bases;
        tmp_assign_source_474 = SELECT_METACLASS(tmp_metaclass_value_57, tmp_bases_value_57);
        Py_DECREF(tmp_metaclass_value_57);
        if (tmp_assign_source_474 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2937;

            goto try_except_handler_169;
        }
        assert(tmp_class_creation_48__metaclass == NULL);
        tmp_class_creation_48__metaclass = tmp_assign_source_474;
    }
    {
        bool tmp_condition_result_364;
        PyObject *tmp_key_value_171;
        PyObject *tmp_dict_arg_value_171;
        tmp_key_value_171 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_48__class_decl_dict);
        tmp_dict_arg_value_171 = tmp_class_creation_48__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_171, tmp_key_value_171);
        assert(!(tmp_res == -1));
        tmp_condition_result_364 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_364 != false) {
            goto branch_yes_227;
        } else {
            goto branch_no_227;
        }
    }
    branch_yes_227:;
    CHECK_OBJECT(tmp_class_creation_48__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_48__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2937;

        goto try_except_handler_169;
    }
    branch_no_227:;
    {
        nuitka_bool tmp_condition_result_365;
        PyObject *tmp_expression_value_296;
        CHECK_OBJECT(tmp_class_creation_48__metaclass);
        tmp_expression_value_296 = tmp_class_creation_48__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_296, mod_consts[411]);
        tmp_condition_result_365 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_365 == NUITKA_BOOL_TRUE) {
            goto branch_yes_228;
        } else {
            goto branch_no_228;
        }
    }
    branch_yes_228:;
    {
        PyObject *tmp_assign_source_475;
        PyObject *tmp_called_value_169;
        PyObject *tmp_expression_value_297;
        PyObject *tmp_args_value_113;
        PyObject *tmp_tuple_element_224;
        PyObject *tmp_kwargs_value_113;
        CHECK_OBJECT(tmp_class_creation_48__metaclass);
        tmp_expression_value_297 = tmp_class_creation_48__metaclass;
        tmp_called_value_169 = LOOKUP_ATTRIBUTE(tmp_expression_value_297, mod_consts[411]);
        if (tmp_called_value_169 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2937;

            goto try_except_handler_169;
        }
        tmp_tuple_element_224 = mod_consts[10];
        tmp_args_value_113 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_113, 0, tmp_tuple_element_224);
        CHECK_OBJECT(tmp_class_creation_48__bases);
        tmp_tuple_element_224 = tmp_class_creation_48__bases;
        PyTuple_SET_ITEM0(tmp_args_value_113, 1, tmp_tuple_element_224);
        CHECK_OBJECT(tmp_class_creation_48__class_decl_dict);
        tmp_kwargs_value_113 = tmp_class_creation_48__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2937;
        tmp_assign_source_475 = CALL_FUNCTION(tmp_called_value_169, tmp_args_value_113, tmp_kwargs_value_113);
        Py_DECREF(tmp_called_value_169);
        Py_DECREF(tmp_args_value_113);
        if (tmp_assign_source_475 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2937;

            goto try_except_handler_169;
        }
        assert(tmp_class_creation_48__prepared == NULL);
        tmp_class_creation_48__prepared = tmp_assign_source_475;
    }
    {
        bool tmp_condition_result_366;
        PyObject *tmp_operand_value_57;
        PyObject *tmp_expression_value_298;
        CHECK_OBJECT(tmp_class_creation_48__prepared);
        tmp_expression_value_298 = tmp_class_creation_48__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_298, mod_consts[413]);
        tmp_operand_value_57 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_57);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2937;

            goto try_except_handler_169;
        }
        tmp_condition_result_366 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_366 != false) {
            goto branch_yes_229;
        } else {
            goto branch_no_229;
        }
    }
    branch_yes_229:;
    {
        PyObject *tmp_raise_type_57;
        PyObject *tmp_raise_value_57;
        PyObject *tmp_left_value_57;
        PyObject *tmp_right_value_57;
        PyObject *tmp_tuple_element_225;
        PyObject *tmp_getattr_target_57;
        PyObject *tmp_getattr_attr_57;
        PyObject *tmp_getattr_default_57;
        tmp_raise_type_57 = PyExc_TypeError;
        tmp_left_value_57 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_48__metaclass);
        tmp_getattr_target_57 = tmp_class_creation_48__metaclass;
        tmp_getattr_attr_57 = mod_consts[190];
        tmp_getattr_default_57 = mod_consts[415];
        tmp_tuple_element_225 = BUILTIN_GETATTR(tmp_getattr_target_57, tmp_getattr_attr_57, tmp_getattr_default_57);
        if (tmp_tuple_element_225 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2937;

            goto try_except_handler_169;
        }
        tmp_right_value_57 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_299;
            PyObject *tmp_type_arg_114;
            PyTuple_SET_ITEM(tmp_right_value_57, 0, tmp_tuple_element_225);
            CHECK_OBJECT(tmp_class_creation_48__prepared);
            tmp_type_arg_114 = tmp_class_creation_48__prepared;
            tmp_expression_value_299 = BUILTIN_TYPE1(tmp_type_arg_114);
            assert(!(tmp_expression_value_299 == NULL));
            tmp_tuple_element_225 = LOOKUP_ATTRIBUTE(tmp_expression_value_299, mod_consts[190]);
            Py_DECREF(tmp_expression_value_299);
            if (tmp_tuple_element_225 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2937;

                goto tuple_build_exception_71;
            }
            PyTuple_SET_ITEM(tmp_right_value_57, 1, tmp_tuple_element_225);
        }
        goto tuple_build_noexception_71;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_71:;
        Py_DECREF(tmp_right_value_57);
        goto try_except_handler_169;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_71:;
        tmp_raise_value_57 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_57, tmp_right_value_57);
        Py_DECREF(tmp_right_value_57);
        if (tmp_raise_value_57 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2937;

            goto try_except_handler_169;
        }
        exception_type = tmp_raise_type_57;
        Py_INCREF(tmp_raise_type_57);
        exception_value = tmp_raise_value_57;
        exception_lineno = 2937;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_169;
    }
    branch_no_229:;
    goto branch_end_228;
    branch_no_228:;
    {
        PyObject *tmp_assign_source_476;
        tmp_assign_source_476 = PyDict_New();
        assert(tmp_class_creation_48__prepared == NULL);
        tmp_class_creation_48__prepared = tmp_assign_source_476;
    }
    branch_end_228:;
    {
        PyObject *tmp_assign_source_477;
        {
            PyObject *tmp_set_locals_57;
            CHECK_OBJECT(tmp_class_creation_48__prepared);
            tmp_set_locals_57 = tmp_class_creation_48__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__57_NullType_2937 = tmp_set_locals_57;
            Py_INCREF(tmp_set_locals_57);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__57_NullType_2937, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2937;

            goto try_except_handler_171;
        }
        tmp_dictset_value = mod_consts[699];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__57_NullType_2937, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2937;

            goto try_except_handler_171;
        }
        tmp_dictset_value = mod_consts[10];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__57_NullType_2937, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2937;

            goto try_except_handler_171;
        }
        if (isFrameUnusable(cache_frame_20e5239b46284e37f44cef9cc19db9db_56)) {
            Py_XDECREF(cache_frame_20e5239b46284e37f44cef9cc19db9db_56);

#if _DEBUG_REFCOUNTS
            if (cache_frame_20e5239b46284e37f44cef9cc19db9db_56 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_20e5239b46284e37f44cef9cc19db9db_56 = MAKE_FUNCTION_FRAME(codeobj_20e5239b46284e37f44cef9cc19db9db, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_20e5239b46284e37f44cef9cc19db9db_56->m_type_description == NULL);
        frame_20e5239b46284e37f44cef9cc19db9db_56 = cache_frame_20e5239b46284e37f44cef9cc19db9db_56;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_20e5239b46284e37f44cef9cc19db9db_56);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_20e5239b46284e37f44cef9cc19db9db_56) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[700];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__57_NullType_2937, mod_consts[437], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2964;
            type_description_2 = "o";
            goto frame_exception_exit_56;
        }
        tmp_dictset_value = Py_True;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__57_NullType_2937, mod_consts[701], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2966;
            type_description_2 = "o";
            goto frame_exception_exit_56;
        }
        tmp_dictset_value = Py_False;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__57_NullType_2937, mod_consts[606], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2968;
            type_description_2 = "o";
            goto frame_exception_exit_56;
        }


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__137_literal_processor();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__57_NullType_2937, mod_consts[228], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2970;
            type_description_2 = "o";
            goto frame_exception_exit_56;
        }
        // Tried code:
        {
            PyObject *tmp_assign_source_478;
            PyObject *tmp_tuple_element_226;
            PyObject *tmp_expression_value_300;
            tmp_expression_value_300 = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__57_NullType_2937, mod_consts[398]);

            if (tmp_expression_value_300 == NULL) {
                if (CHECK_AND_CLEAR_KEY_ERROR_OCCURRED()) {
                    tmp_expression_value_300 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[398]);

                    if (unlikely(tmp_expression_value_300 == NULL)) {
                        tmp_expression_value_300 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[398]);
                    }

                    if (tmp_expression_value_300 == NULL) {
                        assert(ERROR_OCCURRED());

                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                        exception_lineno = 2976;
                        type_description_2 = "o";
                        goto try_except_handler_172;
                    }
                    Py_INCREF(tmp_expression_value_300);
                } else {
                    goto try_except_handler_172;
                }
            }

            tmp_tuple_element_226 = LOOKUP_ATTRIBUTE(tmp_expression_value_300, mod_consts[9]);
            Py_DECREF(tmp_expression_value_300);
            if (tmp_tuple_element_226 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2976;
                type_description_2 = "o";
                goto try_except_handler_172;
            }
            tmp_assign_source_478 = PyTuple_New(1);
            PyTuple_SET_ITEM(tmp_assign_source_478, 0, tmp_tuple_element_226);
            assert(tmp_NullType$class_creation_1__bases_orig == NULL);
            tmp_NullType$class_creation_1__bases_orig = tmp_assign_source_478;
        }
        {
            PyObject *tmp_assign_source_479;
            PyObject *tmp_dircall_arg1_58;
            CHECK_OBJECT(tmp_NullType$class_creation_1__bases_orig);
            tmp_dircall_arg1_58 = tmp_NullType$class_creation_1__bases_orig;
            Py_INCREF(tmp_dircall_arg1_58);

            {
                PyObject *dir_call_args[] = {tmp_dircall_arg1_58};
                tmp_assign_source_479 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
            }
            if (tmp_assign_source_479 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2976;
                type_description_2 = "o";
                goto try_except_handler_172;
            }
            assert(tmp_NullType$class_creation_1__bases == NULL);
            tmp_NullType$class_creation_1__bases = tmp_assign_source_479;
        }
        {
            PyObject *tmp_assign_source_480;
            tmp_assign_source_480 = PyDict_New();
            assert(tmp_NullType$class_creation_1__class_decl_dict == NULL);
            tmp_NullType$class_creation_1__class_decl_dict = tmp_assign_source_480;
        }
        {
            PyObject *tmp_assign_source_481;
            PyObject *tmp_metaclass_value_58;
            bool tmp_condition_result_367;
            PyObject *tmp_key_value_172;
            PyObject *tmp_dict_arg_value_172;
            PyObject *tmp_dict_arg_value_173;
            PyObject *tmp_key_value_173;
            nuitka_bool tmp_condition_result_368;
            int tmp_truth_name_60;
            PyObject *tmp_type_arg_115;
            PyObject *tmp_expression_value_301;
            PyObject *tmp_subscript_value_58;
            PyObject *tmp_bases_value_58;
            tmp_key_value_172 = mod_consts[410];
            CHECK_OBJECT(tmp_NullType$class_creation_1__class_decl_dict);
            tmp_dict_arg_value_172 = tmp_NullType$class_creation_1__class_decl_dict;
            tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_172, tmp_key_value_172);
            assert(!(tmp_res == -1));
            tmp_condition_result_367 = (tmp_res != 0) ? true : false;
            if (tmp_condition_result_367 != false) {
                goto condexpr_true_138;
            } else {
                goto condexpr_false_138;
            }
            condexpr_true_138:;
            CHECK_OBJECT(tmp_NullType$class_creation_1__class_decl_dict);
            tmp_dict_arg_value_173 = tmp_NullType$class_creation_1__class_decl_dict;
            tmp_key_value_173 = mod_consts[410];
            tmp_metaclass_value_58 = DICT_GET_ITEM0(tmp_dict_arg_value_173, tmp_key_value_173);
            if (tmp_metaclass_value_58 == NULL) {
                tmp_metaclass_value_58 = Py_None;
            }
            assert(!(tmp_metaclass_value_58 == NULL));
            Py_INCREF(tmp_metaclass_value_58);
            goto condexpr_end_138;
            condexpr_false_138:;
            CHECK_OBJECT(tmp_NullType$class_creation_1__bases);
            tmp_truth_name_60 = CHECK_IF_TRUE(tmp_NullType$class_creation_1__bases);
            if (tmp_truth_name_60 == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2976;
                type_description_2 = "o";
                goto try_except_handler_172;
            }
            tmp_condition_result_368 = tmp_truth_name_60 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
            if (tmp_condition_result_368 == NUITKA_BOOL_TRUE) {
                goto condexpr_true_139;
            } else {
                goto condexpr_false_139;
            }
            condexpr_true_139:;
            CHECK_OBJECT(tmp_NullType$class_creation_1__bases);
            tmp_expression_value_301 = tmp_NullType$class_creation_1__bases;
            tmp_subscript_value_58 = mod_consts[52];
            tmp_type_arg_115 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_301, tmp_subscript_value_58, 0);
            if (tmp_type_arg_115 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2976;
                type_description_2 = "o";
                goto try_except_handler_172;
            }
            tmp_metaclass_value_58 = BUILTIN_TYPE1(tmp_type_arg_115);
            Py_DECREF(tmp_type_arg_115);
            if (tmp_metaclass_value_58 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2976;
                type_description_2 = "o";
                goto try_except_handler_172;
            }
            goto condexpr_end_139;
            condexpr_false_139:;
            tmp_metaclass_value_58 = (PyObject *)&PyType_Type;
            Py_INCREF(tmp_metaclass_value_58);
            condexpr_end_139:;
            condexpr_end_138:;
            CHECK_OBJECT(tmp_NullType$class_creation_1__bases);
            tmp_bases_value_58 = tmp_NullType$class_creation_1__bases;
            tmp_assign_source_481 = SELECT_METACLASS(tmp_metaclass_value_58, tmp_bases_value_58);
            Py_DECREF(tmp_metaclass_value_58);
            if (tmp_assign_source_481 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2976;
                type_description_2 = "o";
                goto try_except_handler_172;
            }
            assert(tmp_NullType$class_creation_1__metaclass == NULL);
            tmp_NullType$class_creation_1__metaclass = tmp_assign_source_481;
        }
        {
            bool tmp_condition_result_369;
            PyObject *tmp_key_value_174;
            PyObject *tmp_dict_arg_value_174;
            tmp_key_value_174 = mod_consts[410];
            CHECK_OBJECT(tmp_NullType$class_creation_1__class_decl_dict);
            tmp_dict_arg_value_174 = tmp_NullType$class_creation_1__class_decl_dict;
            tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_174, tmp_key_value_174);
            assert(!(tmp_res == -1));
            tmp_condition_result_369 = (tmp_res != 0) ? true : false;
            if (tmp_condition_result_369 != false) {
                goto branch_yes_230;
            } else {
                goto branch_no_230;
            }
        }
        branch_yes_230:;
        CHECK_OBJECT(tmp_NullType$class_creation_1__class_decl_dict);
        tmp_dictdel_dict = tmp_NullType$class_creation_1__class_decl_dict;
        tmp_dictdel_key = mod_consts[410];
        tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2976;
            type_description_2 = "o";
            goto try_except_handler_172;
        }
        branch_no_230:;
        {
            nuitka_bool tmp_condition_result_370;
            PyObject *tmp_expression_value_302;
            CHECK_OBJECT(tmp_NullType$class_creation_1__metaclass);
            tmp_expression_value_302 = tmp_NullType$class_creation_1__metaclass;
            tmp_result = HAS_ATTR_BOOL(tmp_expression_value_302, mod_consts[411]);
            tmp_condition_result_370 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
            if (tmp_condition_result_370 == NUITKA_BOOL_TRUE) {
                goto branch_yes_231;
            } else {
                goto branch_no_231;
            }
        }
        branch_yes_231:;
        {
            PyObject *tmp_assign_source_482;
            PyObject *tmp_called_value_170;
            PyObject *tmp_expression_value_303;
            PyObject *tmp_args_value_114;
            PyObject *tmp_tuple_element_227;
            PyObject *tmp_kwargs_value_114;
            CHECK_OBJECT(tmp_NullType$class_creation_1__metaclass);
            tmp_expression_value_303 = tmp_NullType$class_creation_1__metaclass;
            tmp_called_value_170 = LOOKUP_ATTRIBUTE(tmp_expression_value_303, mod_consts[411]);
            if (tmp_called_value_170 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2976;
                type_description_2 = "o";
                goto try_except_handler_172;
            }
            tmp_tuple_element_227 = mod_consts[9];
            tmp_args_value_114 = PyTuple_New(2);
            PyTuple_SET_ITEM0(tmp_args_value_114, 0, tmp_tuple_element_227);
            CHECK_OBJECT(tmp_NullType$class_creation_1__bases);
            tmp_tuple_element_227 = tmp_NullType$class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_114, 1, tmp_tuple_element_227);
            CHECK_OBJECT(tmp_NullType$class_creation_1__class_decl_dict);
            tmp_kwargs_value_114 = tmp_NullType$class_creation_1__class_decl_dict;
            frame_20e5239b46284e37f44cef9cc19db9db_56->m_frame.f_lineno = 2976;
            tmp_assign_source_482 = CALL_FUNCTION(tmp_called_value_170, tmp_args_value_114, tmp_kwargs_value_114);
            Py_DECREF(tmp_called_value_170);
            Py_DECREF(tmp_args_value_114);
            if (tmp_assign_source_482 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2976;
                type_description_2 = "o";
                goto try_except_handler_172;
            }
            assert(tmp_NullType$class_creation_1__prepared == NULL);
            tmp_NullType$class_creation_1__prepared = tmp_assign_source_482;
        }
        {
            bool tmp_condition_result_371;
            PyObject *tmp_operand_value_58;
            PyObject *tmp_expression_value_304;
            CHECK_OBJECT(tmp_NullType$class_creation_1__prepared);
            tmp_expression_value_304 = tmp_NullType$class_creation_1__prepared;
            tmp_result = HAS_ATTR_BOOL(tmp_expression_value_304, mod_consts[413]);
            tmp_operand_value_58 = (tmp_result) ? Py_True : Py_False;
            tmp_res = CHECK_IF_TRUE(tmp_operand_value_58);
            if (tmp_res == -1) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2976;
                type_description_2 = "o";
                goto try_except_handler_172;
            }
            tmp_condition_result_371 = (tmp_res == 0) ? true : false;
            if (tmp_condition_result_371 != false) {
                goto branch_yes_232;
            } else {
                goto branch_no_232;
            }
        }
        branch_yes_232:;
        {
            PyObject *tmp_raise_type_58;
            PyObject *tmp_raise_value_58;
            PyObject *tmp_left_value_58;
            PyObject *tmp_right_value_58;
            PyObject *tmp_tuple_element_228;
            PyObject *tmp_getattr_target_58;
            PyObject *tmp_getattr_attr_58;
            PyObject *tmp_getattr_default_58;
            tmp_raise_type_58 = PyExc_TypeError;
            tmp_left_value_58 = mod_consts[414];
            CHECK_OBJECT(tmp_NullType$class_creation_1__metaclass);
            tmp_getattr_target_58 = tmp_NullType$class_creation_1__metaclass;
            tmp_getattr_attr_58 = mod_consts[190];
            tmp_getattr_default_58 = mod_consts[415];
            tmp_tuple_element_228 = BUILTIN_GETATTR(tmp_getattr_target_58, tmp_getattr_attr_58, tmp_getattr_default_58);
            if (tmp_tuple_element_228 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2976;
                type_description_2 = "o";
                goto try_except_handler_172;
            }
            tmp_right_value_58 = PyTuple_New(2);
            {
                PyObject *tmp_expression_value_305;
                PyObject *tmp_type_arg_116;
                PyTuple_SET_ITEM(tmp_right_value_58, 0, tmp_tuple_element_228);
                CHECK_OBJECT(tmp_NullType$class_creation_1__prepared);
                tmp_type_arg_116 = tmp_NullType$class_creation_1__prepared;
                tmp_expression_value_305 = BUILTIN_TYPE1(tmp_type_arg_116);
                assert(!(tmp_expression_value_305 == NULL));
                tmp_tuple_element_228 = LOOKUP_ATTRIBUTE(tmp_expression_value_305, mod_consts[190]);
                Py_DECREF(tmp_expression_value_305);
                if (tmp_tuple_element_228 == NULL) {
                    assert(ERROR_OCCURRED());

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                    exception_lineno = 2976;
                    type_description_2 = "o";
                    goto tuple_build_exception_72;
                }
                PyTuple_SET_ITEM(tmp_right_value_58, 1, tmp_tuple_element_228);
            }
            goto tuple_build_noexception_72;
            // Exception handling pass through code for tuple_build:
            tuple_build_exception_72:;
            Py_DECREF(tmp_right_value_58);
            goto try_except_handler_172;
            // Finished with no exception for tuple_build:
            tuple_build_noexception_72:;
            tmp_raise_value_58 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_58, tmp_right_value_58);
            Py_DECREF(tmp_right_value_58);
            if (tmp_raise_value_58 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2976;
                type_description_2 = "o";
                goto try_except_handler_172;
            }
            exception_type = tmp_raise_type_58;
            Py_INCREF(tmp_raise_type_58);
            exception_value = tmp_raise_value_58;
            exception_lineno = 2976;
            RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);
            type_description_2 = "o";
            goto try_except_handler_172;
        }
        branch_no_232:;
        goto branch_end_231;
        branch_no_231:;
        {
            PyObject *tmp_assign_source_483;
            tmp_assign_source_483 = PyDict_New();
            assert(tmp_NullType$class_creation_1__prepared == NULL);
            tmp_NullType$class_creation_1__prepared = tmp_assign_source_483;
        }
        branch_end_231:;
        {
            PyObject *tmp_set_locals_58;
            CHECK_OBJECT(tmp_NullType$class_creation_1__prepared);
            tmp_set_locals_58 = tmp_NullType$class_creation_1__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__58_Comparator_2976 = tmp_set_locals_58;
            Py_INCREF(tmp_set_locals_58);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__58_Comparator_2976, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2976;
            type_description_2 = "o";
            goto try_except_handler_174;
        }
        tmp_dictset_value = mod_consts[703];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__58_Comparator_2976, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2976;
            type_description_2 = "o";
            goto try_except_handler_174;
        }
        if (isFrameUnusable(cache_frame_a913f0a54f81b0786bbcb5c29ee1e419_57)) {
            Py_XDECREF(cache_frame_a913f0a54f81b0786bbcb5c29ee1e419_57);

#if _DEBUG_REFCOUNTS
            if (cache_frame_a913f0a54f81b0786bbcb5c29ee1e419_57 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_a913f0a54f81b0786bbcb5c29ee1e419_57 = MAKE_FUNCTION_FRAME(codeobj_a913f0a54f81b0786bbcb5c29ee1e419, module_sqlalchemy$sql$sqltypes, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_a913f0a54f81b0786bbcb5c29ee1e419_57->m_type_description == NULL);
        frame_a913f0a54f81b0786bbcb5c29ee1e419_57 = cache_frame_a913f0a54f81b0786bbcb5c29ee1e419_57;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_a913f0a54f81b0786bbcb5c29ee1e419_57);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_a913f0a54f81b0786bbcb5c29ee1e419_57) == 2); // Frame stack

        // Framed code:


        tmp_dictset_value = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__138__adapt_expression();

        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__58_Comparator_2976, mod_consts[13], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2977;
            type_description_3 = "o";
            goto frame_exception_exit_57;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a913f0a54f81b0786bbcb5c29ee1e419_57);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_55;

        frame_exception_exit_57:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a913f0a54f81b0786bbcb5c29ee1e419_57);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_a913f0a54f81b0786bbcb5c29ee1e419_57, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_a913f0a54f81b0786bbcb5c29ee1e419_57->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_a913f0a54f81b0786bbcb5c29ee1e419_57, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_a913f0a54f81b0786bbcb5c29ee1e419_57,
            type_description_3,
            outline_57_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_a913f0a54f81b0786bbcb5c29ee1e419_57 == cache_frame_a913f0a54f81b0786bbcb5c29ee1e419_57) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_a913f0a54f81b0786bbcb5c29ee1e419_57);
            cache_frame_a913f0a54f81b0786bbcb5c29ee1e419_57 = NULL;
        }

        assertFrameObject(frame_a913f0a54f81b0786bbcb5c29ee1e419_57);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_56;

        frame_no_exception_55:;
        goto skip_nested_handling_55;
        nested_frame_exit_56:;
        type_description_2 = "o";
        goto try_except_handler_174;
        skip_nested_handling_55:;
        {
            nuitka_bool tmp_condition_result_372;
            PyObject *tmp_cmp_expr_left_57;
            PyObject *tmp_cmp_expr_right_57;
            CHECK_OBJECT(tmp_NullType$class_creation_1__bases);
            tmp_cmp_expr_left_57 = tmp_NullType$class_creation_1__bases;
            CHECK_OBJECT(tmp_NullType$class_creation_1__bases_orig);
            tmp_cmp_expr_right_57 = tmp_NullType$class_creation_1__bases_orig;
            tmp_condition_result_372 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_57, tmp_cmp_expr_right_57);
            if (tmp_condition_result_372 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2976;
                type_description_2 = "o";
                goto try_except_handler_174;
            }
            if (tmp_condition_result_372 == NUITKA_BOOL_TRUE) {
                goto branch_yes_233;
            } else {
                goto branch_no_233;
            }
            assert(tmp_condition_result_372 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_233:;
        CHECK_OBJECT(tmp_NullType$class_creation_1__bases_orig);
        tmp_dictset_value = tmp_NullType$class_creation_1__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__58_Comparator_2976, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2976;
            type_description_2 = "o";
            goto try_except_handler_174;
        }
        branch_no_233:;
        {
            PyObject *tmp_assign_source_484;
            PyObject *tmp_called_value_171;
            PyObject *tmp_args_value_115;
            PyObject *tmp_tuple_element_229;
            PyObject *tmp_kwargs_value_115;
            CHECK_OBJECT(tmp_NullType$class_creation_1__metaclass);
            tmp_called_value_171 = tmp_NullType$class_creation_1__metaclass;
            tmp_tuple_element_229 = mod_consts[9];
            tmp_args_value_115 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_115, 0, tmp_tuple_element_229);
            CHECK_OBJECT(tmp_NullType$class_creation_1__bases);
            tmp_tuple_element_229 = tmp_NullType$class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_115, 1, tmp_tuple_element_229);
            tmp_tuple_element_229 = locals_sqlalchemy$sql$sqltypes$$$class__58_Comparator_2976;
            PyTuple_SET_ITEM0(tmp_args_value_115, 2, tmp_tuple_element_229);
            CHECK_OBJECT(tmp_NullType$class_creation_1__class_decl_dict);
            tmp_kwargs_value_115 = tmp_NullType$class_creation_1__class_decl_dict;
            frame_20e5239b46284e37f44cef9cc19db9db_56->m_frame.f_lineno = 2976;
            tmp_assign_source_484 = CALL_FUNCTION(tmp_called_value_171, tmp_args_value_115, tmp_kwargs_value_115);
            Py_DECREF(tmp_args_value_115);
            if (tmp_assign_source_484 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2976;
                type_description_2 = "o";
                goto try_except_handler_174;
            }
            assert(outline_57_var___class__ == NULL);
            outline_57_var___class__ = tmp_assign_source_484;
        }
        CHECK_OBJECT(outline_57_var___class__);
        tmp_dictset_value = outline_57_var___class__;
        Py_INCREF(tmp_dictset_value);
        goto try_return_handler_174;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_174:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__58_Comparator_2976);
        locals_sqlalchemy$sql$sqltypes$$$class__58_Comparator_2976 = NULL;
        goto try_return_handler_173;
        // Exception handler code:
        try_except_handler_174:;
        exception_keeper_type_169 = exception_type;
        exception_keeper_value_169 = exception_value;
        exception_keeper_tb_169 = exception_tb;
        exception_keeper_lineno_169 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__58_Comparator_2976);
        locals_sqlalchemy$sql$sqltypes$$$class__58_Comparator_2976 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_169;
        exception_value = exception_keeper_value_169;
        exception_tb = exception_keeper_tb_169;
        exception_lineno = exception_keeper_lineno_169;

        goto try_except_handler_173;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_173:;
        CHECK_OBJECT(outline_57_var___class__);
        Py_DECREF(outline_57_var___class__);
        outline_57_var___class__ = NULL;
        goto outline_result_58;
        // Exception handler code:
        try_except_handler_173:;
        exception_keeper_type_170 = exception_type;
        exception_keeper_value_170 = exception_value;
        exception_keeper_tb_170 = exception_tb;
        exception_keeper_lineno_170 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_170;
        exception_value = exception_keeper_value_170;
        exception_tb = exception_keeper_tb_170;
        exception_lineno = exception_keeper_lineno_170;

        goto outline_exception_58;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_58:;
        exception_lineno = 2976;
        goto try_except_handler_172;
        outline_result_58:;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__57_NullType_2937, mod_consts[9], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2976;
            type_description_2 = "o";
            goto try_except_handler_172;
        }
        goto try_end_57;
        // Exception handler code:
        try_except_handler_172:;
        exception_keeper_type_171 = exception_type;
        exception_keeper_value_171 = exception_value;
        exception_keeper_tb_171 = exception_tb;
        exception_keeper_lineno_171 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_NullType$class_creation_1__bases_orig);
        tmp_NullType$class_creation_1__bases_orig = NULL;
        Py_XDECREF(tmp_NullType$class_creation_1__bases);
        tmp_NullType$class_creation_1__bases = NULL;
        Py_XDECREF(tmp_NullType$class_creation_1__class_decl_dict);
        tmp_NullType$class_creation_1__class_decl_dict = NULL;
        Py_XDECREF(tmp_NullType$class_creation_1__metaclass);
        tmp_NullType$class_creation_1__metaclass = NULL;
        Py_XDECREF(tmp_NullType$class_creation_1__prepared);
        tmp_NullType$class_creation_1__prepared = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_171;
        exception_value = exception_keeper_value_171;
        exception_tb = exception_keeper_tb_171;
        exception_lineno = exception_keeper_lineno_171;

        goto frame_exception_exit_56;
        // End of try:
        try_end_57:;
        CHECK_OBJECT(tmp_NullType$class_creation_1__bases_orig);
        Py_DECREF(tmp_NullType$class_creation_1__bases_orig);
        tmp_NullType$class_creation_1__bases_orig = NULL;
        CHECK_OBJECT(tmp_NullType$class_creation_1__bases);
        Py_DECREF(tmp_NullType$class_creation_1__bases);
        tmp_NullType$class_creation_1__bases = NULL;
        CHECK_OBJECT(tmp_NullType$class_creation_1__class_decl_dict);
        Py_DECREF(tmp_NullType$class_creation_1__class_decl_dict);
        tmp_NullType$class_creation_1__class_decl_dict = NULL;
        CHECK_OBJECT(tmp_NullType$class_creation_1__metaclass);
        Py_DECREF(tmp_NullType$class_creation_1__metaclass);
        tmp_NullType$class_creation_1__metaclass = NULL;
        CHECK_OBJECT(tmp_NullType$class_creation_1__prepared);
        Py_DECREF(tmp_NullType$class_creation_1__prepared);
        tmp_NullType$class_creation_1__prepared = NULL;
        tmp_dictset_value = PyObject_GetItem(locals_sqlalchemy$sql$sqltypes$$$class__57_NullType_2937, mod_consts[9]);

        if (unlikely(tmp_dictset_value == NULL && CHECK_AND_CLEAR_KEY_ERROR_OCCURRED())) {

            FORMAT_NAME_ERROR(&exception_type, &exception_value, mod_consts[9]);
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2985;
            type_description_2 = "o";
            goto frame_exception_exit_56;
        }

        if (tmp_dictset_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2985;
            type_description_2 = "o";
            goto frame_exception_exit_56;
        }
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__57_NullType_2937, mod_consts[426], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2985;
            type_description_2 = "o";
            goto frame_exception_exit_56;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_20e5239b46284e37f44cef9cc19db9db_56);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_56;

        frame_exception_exit_56:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_20e5239b46284e37f44cef9cc19db9db_56);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_20e5239b46284e37f44cef9cc19db9db_56, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_20e5239b46284e37f44cef9cc19db9db_56->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_20e5239b46284e37f44cef9cc19db9db_56, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_20e5239b46284e37f44cef9cc19db9db_56,
            type_description_2,
            outline_56_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_20e5239b46284e37f44cef9cc19db9db_56 == cache_frame_20e5239b46284e37f44cef9cc19db9db_56) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_20e5239b46284e37f44cef9cc19db9db_56);
            cache_frame_20e5239b46284e37f44cef9cc19db9db_56 = NULL;
        }

        assertFrameObject(frame_20e5239b46284e37f44cef9cc19db9db_56);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_55;

        frame_no_exception_56:;
        goto skip_nested_handling_56;
        nested_frame_exit_55:;

        goto try_except_handler_171;
        skip_nested_handling_56:;
        {
            nuitka_bool tmp_condition_result_373;
            PyObject *tmp_cmp_expr_left_58;
            PyObject *tmp_cmp_expr_right_58;
            CHECK_OBJECT(tmp_class_creation_48__bases);
            tmp_cmp_expr_left_58 = tmp_class_creation_48__bases;
            CHECK_OBJECT(tmp_class_creation_48__bases_orig);
            tmp_cmp_expr_right_58 = tmp_class_creation_48__bases_orig;
            tmp_condition_result_373 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_58, tmp_cmp_expr_right_58);
            if (tmp_condition_result_373 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2937;

                goto try_except_handler_171;
            }
            if (tmp_condition_result_373 == NUITKA_BOOL_TRUE) {
                goto branch_yes_234;
            } else {
                goto branch_no_234;
            }
            assert(tmp_condition_result_373 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_234:;
        CHECK_OBJECT(tmp_class_creation_48__bases_orig);
        tmp_dictset_value = tmp_class_creation_48__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__57_NullType_2937, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2937;

            goto try_except_handler_171;
        }
        branch_no_234:;
        {
            PyObject *tmp_assign_source_485;
            PyObject *tmp_called_value_172;
            PyObject *tmp_args_value_116;
            PyObject *tmp_tuple_element_230;
            PyObject *tmp_kwargs_value_116;
            CHECK_OBJECT(tmp_class_creation_48__metaclass);
            tmp_called_value_172 = tmp_class_creation_48__metaclass;
            tmp_tuple_element_230 = mod_consts[10];
            tmp_args_value_116 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_116, 0, tmp_tuple_element_230);
            CHECK_OBJECT(tmp_class_creation_48__bases);
            tmp_tuple_element_230 = tmp_class_creation_48__bases;
            PyTuple_SET_ITEM0(tmp_args_value_116, 1, tmp_tuple_element_230);
            tmp_tuple_element_230 = locals_sqlalchemy$sql$sqltypes$$$class__57_NullType_2937;
            PyTuple_SET_ITEM0(tmp_args_value_116, 2, tmp_tuple_element_230);
            CHECK_OBJECT(tmp_class_creation_48__class_decl_dict);
            tmp_kwargs_value_116 = tmp_class_creation_48__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2937;
            tmp_assign_source_485 = CALL_FUNCTION(tmp_called_value_172, tmp_args_value_116, tmp_kwargs_value_116);
            Py_DECREF(tmp_args_value_116);
            if (tmp_assign_source_485 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2937;

                goto try_except_handler_171;
            }
            assert(outline_56_var___class__ == NULL);
            outline_56_var___class__ = tmp_assign_source_485;
        }
        CHECK_OBJECT(outline_56_var___class__);
        tmp_assign_source_477 = outline_56_var___class__;
        Py_INCREF(tmp_assign_source_477);
        goto try_return_handler_171;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_171:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__57_NullType_2937);
        locals_sqlalchemy$sql$sqltypes$$$class__57_NullType_2937 = NULL;
        goto try_return_handler_170;
        // Exception handler code:
        try_except_handler_171:;
        exception_keeper_type_172 = exception_type;
        exception_keeper_value_172 = exception_value;
        exception_keeper_tb_172 = exception_tb;
        exception_keeper_lineno_172 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__57_NullType_2937);
        locals_sqlalchemy$sql$sqltypes$$$class__57_NullType_2937 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_172;
        exception_value = exception_keeper_value_172;
        exception_tb = exception_keeper_tb_172;
        exception_lineno = exception_keeper_lineno_172;

        goto try_except_handler_170;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_170:;
        CHECK_OBJECT(outline_56_var___class__);
        Py_DECREF(outline_56_var___class__);
        outline_56_var___class__ = NULL;
        goto outline_result_57;
        // Exception handler code:
        try_except_handler_170:;
        exception_keeper_type_173 = exception_type;
        exception_keeper_value_173 = exception_value;
        exception_keeper_tb_173 = exception_tb;
        exception_keeper_lineno_173 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_173;
        exception_value = exception_keeper_value_173;
        exception_tb = exception_keeper_tb_173;
        exception_lineno = exception_keeper_lineno_173;

        goto outline_exception_57;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_57:;
        exception_lineno = 2937;
        goto try_except_handler_169;
        outline_result_57:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[10], tmp_assign_source_477);
    }
    goto try_end_58;
    // Exception handler code:
    try_except_handler_169:;
    exception_keeper_type_174 = exception_type;
    exception_keeper_value_174 = exception_value;
    exception_keeper_tb_174 = exception_tb;
    exception_keeper_lineno_174 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_48__bases_orig);
    tmp_class_creation_48__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_48__bases);
    tmp_class_creation_48__bases = NULL;
    Py_XDECREF(tmp_class_creation_48__class_decl_dict);
    tmp_class_creation_48__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_48__metaclass);
    tmp_class_creation_48__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_48__prepared);
    tmp_class_creation_48__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_174;
    exception_value = exception_keeper_value_174;
    exception_tb = exception_keeper_tb_174;
    exception_lineno = exception_keeper_lineno_174;

    goto frame_exception_exit_1;
    // End of try:
    try_end_58:;
    CHECK_OBJECT(tmp_class_creation_48__bases_orig);
    Py_DECREF(tmp_class_creation_48__bases_orig);
    tmp_class_creation_48__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_48__bases);
    Py_DECREF(tmp_class_creation_48__bases);
    tmp_class_creation_48__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_48__class_decl_dict);
    Py_DECREF(tmp_class_creation_48__class_decl_dict);
    tmp_class_creation_48__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_48__metaclass);
    Py_DECREF(tmp_class_creation_48__metaclass);
    tmp_class_creation_48__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_48__prepared);
    Py_DECREF(tmp_class_creation_48__prepared);
    tmp_class_creation_48__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_486;
        PyObject *tmp_tuple_element_231;
        tmp_tuple_element_231 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[297]);

        if (unlikely(tmp_tuple_element_231 == NULL)) {
            tmp_tuple_element_231 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[297]);
        }

        if (tmp_tuple_element_231 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2988;

            goto try_except_handler_175;
        }
        tmp_assign_source_486 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_486, 0, tmp_tuple_element_231);
        assert(tmp_class_creation_49__bases_orig == NULL);
        tmp_class_creation_49__bases_orig = tmp_assign_source_486;
    }
    {
        PyObject *tmp_assign_source_487;
        PyObject *tmp_dircall_arg1_59;
        CHECK_OBJECT(tmp_class_creation_49__bases_orig);
        tmp_dircall_arg1_59 = tmp_class_creation_49__bases_orig;
        Py_INCREF(tmp_dircall_arg1_59);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_59};
            tmp_assign_source_487 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_487 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2988;

            goto try_except_handler_175;
        }
        assert(tmp_class_creation_49__bases == NULL);
        tmp_class_creation_49__bases = tmp_assign_source_487;
    }
    {
        PyObject *tmp_assign_source_488;
        tmp_assign_source_488 = PyDict_New();
        assert(tmp_class_creation_49__class_decl_dict == NULL);
        tmp_class_creation_49__class_decl_dict = tmp_assign_source_488;
    }
    {
        PyObject *tmp_assign_source_489;
        PyObject *tmp_metaclass_value_59;
        bool tmp_condition_result_374;
        PyObject *tmp_key_value_175;
        PyObject *tmp_dict_arg_value_175;
        PyObject *tmp_dict_arg_value_176;
        PyObject *tmp_key_value_176;
        nuitka_bool tmp_condition_result_375;
        int tmp_truth_name_61;
        PyObject *tmp_type_arg_117;
        PyObject *tmp_expression_value_306;
        PyObject *tmp_subscript_value_59;
        PyObject *tmp_bases_value_59;
        tmp_key_value_175 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_49__class_decl_dict);
        tmp_dict_arg_value_175 = tmp_class_creation_49__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_175, tmp_key_value_175);
        assert(!(tmp_res == -1));
        tmp_condition_result_374 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_374 != false) {
            goto condexpr_true_140;
        } else {
            goto condexpr_false_140;
        }
        condexpr_true_140:;
        CHECK_OBJECT(tmp_class_creation_49__class_decl_dict);
        tmp_dict_arg_value_176 = tmp_class_creation_49__class_decl_dict;
        tmp_key_value_176 = mod_consts[410];
        tmp_metaclass_value_59 = DICT_GET_ITEM0(tmp_dict_arg_value_176, tmp_key_value_176);
        if (tmp_metaclass_value_59 == NULL) {
            tmp_metaclass_value_59 = Py_None;
        }
        assert(!(tmp_metaclass_value_59 == NULL));
        Py_INCREF(tmp_metaclass_value_59);
        goto condexpr_end_140;
        condexpr_false_140:;
        CHECK_OBJECT(tmp_class_creation_49__bases);
        tmp_truth_name_61 = CHECK_IF_TRUE(tmp_class_creation_49__bases);
        if (tmp_truth_name_61 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2988;

            goto try_except_handler_175;
        }
        tmp_condition_result_375 = tmp_truth_name_61 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_375 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_141;
        } else {
            goto condexpr_false_141;
        }
        condexpr_true_141:;
        CHECK_OBJECT(tmp_class_creation_49__bases);
        tmp_expression_value_306 = tmp_class_creation_49__bases;
        tmp_subscript_value_59 = mod_consts[52];
        tmp_type_arg_117 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_306, tmp_subscript_value_59, 0);
        if (tmp_type_arg_117 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2988;

            goto try_except_handler_175;
        }
        tmp_metaclass_value_59 = BUILTIN_TYPE1(tmp_type_arg_117);
        Py_DECREF(tmp_type_arg_117);
        if (tmp_metaclass_value_59 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2988;

            goto try_except_handler_175;
        }
        goto condexpr_end_141;
        condexpr_false_141:;
        tmp_metaclass_value_59 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_59);
        condexpr_end_141:;
        condexpr_end_140:;
        CHECK_OBJECT(tmp_class_creation_49__bases);
        tmp_bases_value_59 = tmp_class_creation_49__bases;
        tmp_assign_source_489 = SELECT_METACLASS(tmp_metaclass_value_59, tmp_bases_value_59);
        Py_DECREF(tmp_metaclass_value_59);
        if (tmp_assign_source_489 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2988;

            goto try_except_handler_175;
        }
        assert(tmp_class_creation_49__metaclass == NULL);
        tmp_class_creation_49__metaclass = tmp_assign_source_489;
    }
    {
        bool tmp_condition_result_376;
        PyObject *tmp_key_value_177;
        PyObject *tmp_dict_arg_value_177;
        tmp_key_value_177 = mod_consts[410];
        CHECK_OBJECT(tmp_class_creation_49__class_decl_dict);
        tmp_dict_arg_value_177 = tmp_class_creation_49__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_177, tmp_key_value_177);
        assert(!(tmp_res == -1));
        tmp_condition_result_376 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_376 != false) {
            goto branch_yes_235;
        } else {
            goto branch_no_235;
        }
    }
    branch_yes_235:;
    CHECK_OBJECT(tmp_class_creation_49__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_49__class_decl_dict;
    tmp_dictdel_key = mod_consts[410];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2988;

        goto try_except_handler_175;
    }
    branch_no_235:;
    {
        nuitka_bool tmp_condition_result_377;
        PyObject *tmp_expression_value_307;
        CHECK_OBJECT(tmp_class_creation_49__metaclass);
        tmp_expression_value_307 = tmp_class_creation_49__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_307, mod_consts[411]);
        tmp_condition_result_377 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_377 == NUITKA_BOOL_TRUE) {
            goto branch_yes_236;
        } else {
            goto branch_no_236;
        }
    }
    branch_yes_236:;
    {
        PyObject *tmp_assign_source_490;
        PyObject *tmp_called_value_173;
        PyObject *tmp_expression_value_308;
        PyObject *tmp_args_value_117;
        PyObject *tmp_tuple_element_232;
        PyObject *tmp_kwargs_value_117;
        CHECK_OBJECT(tmp_class_creation_49__metaclass);
        tmp_expression_value_308 = tmp_class_creation_49__metaclass;
        tmp_called_value_173 = LOOKUP_ATTRIBUTE(tmp_expression_value_308, mod_consts[411]);
        if (tmp_called_value_173 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2988;

            goto try_except_handler_175;
        }
        tmp_tuple_element_232 = mod_consts[705];
        tmp_args_value_117 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_117, 0, tmp_tuple_element_232);
        CHECK_OBJECT(tmp_class_creation_49__bases);
        tmp_tuple_element_232 = tmp_class_creation_49__bases;
        PyTuple_SET_ITEM0(tmp_args_value_117, 1, tmp_tuple_element_232);
        CHECK_OBJECT(tmp_class_creation_49__class_decl_dict);
        tmp_kwargs_value_117 = tmp_class_creation_49__class_decl_dict;
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2988;
        tmp_assign_source_490 = CALL_FUNCTION(tmp_called_value_173, tmp_args_value_117, tmp_kwargs_value_117);
        Py_DECREF(tmp_called_value_173);
        Py_DECREF(tmp_args_value_117);
        if (tmp_assign_source_490 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2988;

            goto try_except_handler_175;
        }
        assert(tmp_class_creation_49__prepared == NULL);
        tmp_class_creation_49__prepared = tmp_assign_source_490;
    }
    {
        bool tmp_condition_result_378;
        PyObject *tmp_operand_value_59;
        PyObject *tmp_expression_value_309;
        CHECK_OBJECT(tmp_class_creation_49__prepared);
        tmp_expression_value_309 = tmp_class_creation_49__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_309, mod_consts[413]);
        tmp_operand_value_59 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_59);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2988;

            goto try_except_handler_175;
        }
        tmp_condition_result_378 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_378 != false) {
            goto branch_yes_237;
        } else {
            goto branch_no_237;
        }
    }
    branch_yes_237:;
    {
        PyObject *tmp_raise_type_59;
        PyObject *tmp_raise_value_59;
        PyObject *tmp_left_value_59;
        PyObject *tmp_right_value_59;
        PyObject *tmp_tuple_element_233;
        PyObject *tmp_getattr_target_59;
        PyObject *tmp_getattr_attr_59;
        PyObject *tmp_getattr_default_59;
        tmp_raise_type_59 = PyExc_TypeError;
        tmp_left_value_59 = mod_consts[414];
        CHECK_OBJECT(tmp_class_creation_49__metaclass);
        tmp_getattr_target_59 = tmp_class_creation_49__metaclass;
        tmp_getattr_attr_59 = mod_consts[190];
        tmp_getattr_default_59 = mod_consts[415];
        tmp_tuple_element_233 = BUILTIN_GETATTR(tmp_getattr_target_59, tmp_getattr_attr_59, tmp_getattr_default_59);
        if (tmp_tuple_element_233 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2988;

            goto try_except_handler_175;
        }
        tmp_right_value_59 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_310;
            PyObject *tmp_type_arg_118;
            PyTuple_SET_ITEM(tmp_right_value_59, 0, tmp_tuple_element_233);
            CHECK_OBJECT(tmp_class_creation_49__prepared);
            tmp_type_arg_118 = tmp_class_creation_49__prepared;
            tmp_expression_value_310 = BUILTIN_TYPE1(tmp_type_arg_118);
            assert(!(tmp_expression_value_310 == NULL));
            tmp_tuple_element_233 = LOOKUP_ATTRIBUTE(tmp_expression_value_310, mod_consts[190]);
            Py_DECREF(tmp_expression_value_310);
            if (tmp_tuple_element_233 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2988;

                goto tuple_build_exception_73;
            }
            PyTuple_SET_ITEM(tmp_right_value_59, 1, tmp_tuple_element_233);
        }
        goto tuple_build_noexception_73;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_73:;
        Py_DECREF(tmp_right_value_59);
        goto try_except_handler_175;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_73:;
        tmp_raise_value_59 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_59, tmp_right_value_59);
        Py_DECREF(tmp_right_value_59);
        if (tmp_raise_value_59 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2988;

            goto try_except_handler_175;
        }
        exception_type = tmp_raise_type_59;
        Py_INCREF(tmp_raise_type_59);
        exception_value = tmp_raise_value_59;
        exception_lineno = 2988;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_175;
    }
    branch_no_237:;
    goto branch_end_236;
    branch_no_236:;
    {
        PyObject *tmp_assign_source_491;
        tmp_assign_source_491 = PyDict_New();
        assert(tmp_class_creation_49__prepared == NULL);
        tmp_class_creation_49__prepared = tmp_assign_source_491;
    }
    branch_end_236:;
    {
        PyObject *tmp_assign_source_492;
        {
            PyObject *tmp_set_locals_59;
            CHECK_OBJECT(tmp_class_creation_49__prepared);
            tmp_set_locals_59 = tmp_class_creation_49__prepared;
            locals_sqlalchemy$sql$sqltypes$$$class__59_MatchType_2988 = tmp_set_locals_59;
            Py_INCREF(tmp_set_locals_59);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[416];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__59_MatchType_2988, mod_consts[417], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2988;

            goto try_except_handler_177;
        }
        tmp_dictset_value = mod_consts[706];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__59_MatchType_2988, mod_consts[370], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2988;

            goto try_except_handler_177;
        }
        tmp_dictset_value = mod_consts[705];
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__59_MatchType_2988, mod_consts[419], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2988;

            goto try_except_handler_177;
        }
        {
            nuitka_bool tmp_condition_result_379;
            PyObject *tmp_cmp_expr_left_59;
            PyObject *tmp_cmp_expr_right_59;
            CHECK_OBJECT(tmp_class_creation_49__bases);
            tmp_cmp_expr_left_59 = tmp_class_creation_49__bases;
            CHECK_OBJECT(tmp_class_creation_49__bases_orig);
            tmp_cmp_expr_right_59 = tmp_class_creation_49__bases_orig;
            tmp_condition_result_379 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_59, tmp_cmp_expr_right_59);
            if (tmp_condition_result_379 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2988;

                goto try_except_handler_177;
            }
            if (tmp_condition_result_379 == NUITKA_BOOL_TRUE) {
                goto branch_yes_238;
            } else {
                goto branch_no_238;
            }
            assert(tmp_condition_result_379 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_238:;
        CHECK_OBJECT(tmp_class_creation_49__bases_orig);
        tmp_dictset_value = tmp_class_creation_49__bases_orig;
        tmp_res = PyObject_SetItem(locals_sqlalchemy$sql$sqltypes$$$class__59_MatchType_2988, mod_consts[425], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2988;

            goto try_except_handler_177;
        }
        branch_no_238:;
        {
            PyObject *tmp_assign_source_493;
            PyObject *tmp_called_value_174;
            PyObject *tmp_args_value_118;
            PyObject *tmp_tuple_element_234;
            PyObject *tmp_kwargs_value_118;
            CHECK_OBJECT(tmp_class_creation_49__metaclass);
            tmp_called_value_174 = tmp_class_creation_49__metaclass;
            tmp_tuple_element_234 = mod_consts[705];
            tmp_args_value_118 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_118, 0, tmp_tuple_element_234);
            CHECK_OBJECT(tmp_class_creation_49__bases);
            tmp_tuple_element_234 = tmp_class_creation_49__bases;
            PyTuple_SET_ITEM0(tmp_args_value_118, 1, tmp_tuple_element_234);
            tmp_tuple_element_234 = locals_sqlalchemy$sql$sqltypes$$$class__59_MatchType_2988;
            PyTuple_SET_ITEM0(tmp_args_value_118, 2, tmp_tuple_element_234);
            CHECK_OBJECT(tmp_class_creation_49__class_decl_dict);
            tmp_kwargs_value_118 = tmp_class_creation_49__class_decl_dict;
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 2988;
            tmp_assign_source_493 = CALL_FUNCTION(tmp_called_value_174, tmp_args_value_118, tmp_kwargs_value_118);
            Py_DECREF(tmp_args_value_118);
            if (tmp_assign_source_493 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2988;

                goto try_except_handler_177;
            }
            assert(outline_58_var___class__ == NULL);
            outline_58_var___class__ = tmp_assign_source_493;
        }
        CHECK_OBJECT(outline_58_var___class__);
        tmp_assign_source_492 = outline_58_var___class__;
        Py_INCREF(tmp_assign_source_492);
        goto try_return_handler_177;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_177:;
        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__59_MatchType_2988);
        locals_sqlalchemy$sql$sqltypes$$$class__59_MatchType_2988 = NULL;
        goto try_return_handler_176;
        // Exception handler code:
        try_except_handler_177:;
        exception_keeper_type_175 = exception_type;
        exception_keeper_value_175 = exception_value;
        exception_keeper_tb_175 = exception_tb;
        exception_keeper_lineno_175 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_sqlalchemy$sql$sqltypes$$$class__59_MatchType_2988);
        locals_sqlalchemy$sql$sqltypes$$$class__59_MatchType_2988 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_175;
        exception_value = exception_keeper_value_175;
        exception_tb = exception_keeper_tb_175;
        exception_lineno = exception_keeper_lineno_175;

        goto try_except_handler_176;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_176:;
        CHECK_OBJECT(outline_58_var___class__);
        Py_DECREF(outline_58_var___class__);
        outline_58_var___class__ = NULL;
        goto outline_result_59;
        // Exception handler code:
        try_except_handler_176:;
        exception_keeper_type_176 = exception_type;
        exception_keeper_value_176 = exception_value;
        exception_keeper_tb_176 = exception_tb;
        exception_keeper_lineno_176 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_176;
        exception_value = exception_keeper_value_176;
        exception_tb = exception_keeper_tb_176;
        exception_lineno = exception_keeper_lineno_176;

        goto outline_exception_59;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_59:;
        exception_lineno = 2988;
        goto try_except_handler_175;
        outline_result_59:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[705], tmp_assign_source_492);
    }
    goto try_end_59;
    // Exception handler code:
    try_except_handler_175:;
    exception_keeper_type_177 = exception_type;
    exception_keeper_value_177 = exception_value;
    exception_keeper_tb_177 = exception_tb;
    exception_keeper_lineno_177 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_49__bases_orig);
    tmp_class_creation_49__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_49__bases);
    tmp_class_creation_49__bases = NULL;
    Py_XDECREF(tmp_class_creation_49__class_decl_dict);
    tmp_class_creation_49__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_49__metaclass);
    tmp_class_creation_49__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_49__prepared);
    tmp_class_creation_49__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_177;
    exception_value = exception_keeper_value_177;
    exception_tb = exception_keeper_tb_177;
    exception_lineno = exception_keeper_lineno_177;

    goto frame_exception_exit_1;
    // End of try:
    try_end_59:;
    CHECK_OBJECT(tmp_class_creation_49__bases_orig);
    Py_DECREF(tmp_class_creation_49__bases_orig);
    tmp_class_creation_49__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_49__bases);
    Py_DECREF(tmp_class_creation_49__bases);
    tmp_class_creation_49__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_49__class_decl_dict);
    Py_DECREF(tmp_class_creation_49__class_decl_dict);
    tmp_class_creation_49__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_49__metaclass);
    Py_DECREF(tmp_class_creation_49__metaclass);
    tmp_class_creation_49__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_49__prepared);
    Py_DECREF(tmp_class_creation_49__prepared);
    tmp_class_creation_49__prepared = NULL;
    {
        PyObject *tmp_assign_source_494;
        PyObject *tmp_called_value_175;
        tmp_called_value_175 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[10]);

        if (unlikely(tmp_called_value_175 == NULL)) {
            tmp_called_value_175 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[10]);
        }

        if (tmp_called_value_175 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3004;

            goto frame_exception_exit_1;
        }
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 3004;
        tmp_assign_source_494 = CALL_FUNCTION_NO_ARGS(tmp_called_value_175);
        if (tmp_assign_source_494 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3004;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[368], tmp_assign_source_494);
    }
    {
        PyObject *tmp_assign_source_495;
        PyObject *tmp_called_value_176;
        tmp_called_value_176 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[297]);

        if (unlikely(tmp_called_value_176 == NULL)) {
            tmp_called_value_176 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[297]);
        }

        if (tmp_called_value_176 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3005;

            goto frame_exception_exit_1;
        }
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 3005;
        tmp_assign_source_495 = CALL_FUNCTION_NO_ARGS(tmp_called_value_176);
        if (tmp_assign_source_495 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3005;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[707], tmp_assign_source_495);
    }
    {
        PyObject *tmp_assign_source_496;
        PyObject *tmp_called_value_177;
        tmp_called_value_177 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[215]);

        if (unlikely(tmp_called_value_177 == NULL)) {
            tmp_called_value_177 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[215]);
        }

        if (tmp_called_value_177 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3006;

            goto frame_exception_exit_1;
        }
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 3006;
        tmp_assign_source_496 = CALL_FUNCTION_NO_ARGS(tmp_called_value_177);
        if (tmp_assign_source_496 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3006;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[708], tmp_assign_source_496);
    }
    {
        PyObject *tmp_assign_source_497;
        PyObject *tmp_called_value_178;
        tmp_called_value_178 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[73]);

        if (unlikely(tmp_called_value_178 == NULL)) {
            tmp_called_value_178 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
        }

        if (tmp_called_value_178 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3007;

            goto frame_exception_exit_1;
        }
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 3007;
        tmp_assign_source_497 = CALL_FUNCTION_NO_ARGS(tmp_called_value_178);
        if (tmp_assign_source_497 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3007;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[335], tmp_assign_source_497);
    }
    {
        PyObject *tmp_assign_source_498;
        PyObject *tmp_called_value_179;
        tmp_called_value_179 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[705]);

        if (unlikely(tmp_called_value_179 == NULL)) {
            tmp_called_value_179 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[705]);
        }

        if (tmp_called_value_179 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3008;

            goto frame_exception_exit_1;
        }
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 3008;
        tmp_assign_source_498 = CALL_FUNCTION_NO_ARGS(tmp_called_value_179);
        if (tmp_assign_source_498 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3008;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[709], tmp_assign_source_498);
    }
    {
        PyObject *tmp_assign_source_499;
        PyObject *tmp_dict_key_1;
        PyObject *tmp_dict_value_1;
        PyObject *tmp_called_value_180;
        tmp_dict_key_1 = (PyObject *)&PyLong_Type;
        tmp_called_value_180 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[73]);

        if (unlikely(tmp_called_value_180 == NULL)) {
            tmp_called_value_180 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[73]);
        }

        if (tmp_called_value_180 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3011;

            goto frame_exception_exit_1;
        }
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 3011;
        tmp_dict_value_1 = CALL_FUNCTION_NO_ARGS(tmp_called_value_180);
        if (tmp_dict_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3011;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_499 = _PyDict_NewPresized( 9 );
        {
            PyObject *tmp_called_value_181;
            PyObject *tmp_expression_value_311;
            PyObject *tmp_called_value_182;
            PyObject *tmp_expression_value_312;
            PyObject *tmp_called_value_183;
            PyObject *tmp_expression_value_313;
            PyObject *tmp_called_value_184;
            PyObject *tmp_expression_value_314;
            PyObject *tmp_called_value_185;
            PyObject *tmp_expression_value_315;
            PyObject *tmp_called_value_186;
            PyObject *tmp_expression_value_316;
            tmp_res = PyDict_SetItem(tmp_assign_source_499, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = (PyObject *)&PyFloat_Type;
            tmp_called_value_181 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[304]);

            if (unlikely(tmp_called_value_181 == NULL)) {
                tmp_called_value_181 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[304]);
            }

            if (tmp_called_value_181 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3012;

                goto dict_build_exception_1;
            }
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 3012;
            tmp_dict_value_1 = CALL_FUNCTION_NO_ARGS(tmp_called_value_181);
            if (tmp_dict_value_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3012;

                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_assign_source_499, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_dict_key_1 = (PyObject *)&PyBool_Type;
            tmp_dict_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[707]);

            if (unlikely(tmp_dict_value_1 == NULL)) {
                tmp_dict_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[707]);
            }

            if (tmp_dict_value_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3013;

                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_assign_source_499, tmp_dict_key_1, tmp_dict_value_1);
            assert(!(tmp_res != 0));
            tmp_expression_value_311 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[87]);

            if (unlikely(tmp_expression_value_311 == NULL)) {
                tmp_expression_value_311 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[87]);
            }

            if (tmp_expression_value_311 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3014;

                goto dict_build_exception_1;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_311, mod_consts[88]);
            if (tmp_dict_key_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3014;

                goto dict_build_exception_1;
            }
            tmp_called_value_182 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[74]);

            if (unlikely(tmp_called_value_182 == NULL)) {
                tmp_called_value_182 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[74]);
            }

            if (tmp_called_value_182 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 3014;

                goto dict_build_exception_1;
            }
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 3014;
            tmp_dict_value_1 = CALL_FUNCTION_NO_ARGS(tmp_called_value_182);
            if (tmp_dict_value_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 3014;

                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_assign_source_499, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3014;

                goto dict_build_exception_1;
            }
            tmp_expression_value_312 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[101]);

            if (unlikely(tmp_expression_value_312 == NULL)) {
                tmp_expression_value_312 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[101]);
            }

            if (tmp_expression_value_312 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3015;

                goto dict_build_exception_1;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_312, mod_consts[104]);
            if (tmp_dict_key_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3015;

                goto dict_build_exception_1;
            }
            tmp_called_value_183 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[72]);

            if (unlikely(tmp_called_value_183 == NULL)) {
                tmp_called_value_183 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[72]);
            }

            if (tmp_called_value_183 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 3015;

                goto dict_build_exception_1;
            }
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 3015;
            tmp_dict_value_1 = CALL_FUNCTION_NO_ARGS(tmp_called_value_183);
            if (tmp_dict_value_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 3015;

                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_assign_source_499, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3015;

                goto dict_build_exception_1;
            }
            tmp_expression_value_313 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[101]);

            if (unlikely(tmp_expression_value_313 == NULL)) {
                tmp_expression_value_313 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[101]);
            }

            if (tmp_expression_value_313 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3016;

                goto dict_build_exception_1;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_313, mod_consts[102]);
            if (tmp_dict_key_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3016;

                goto dict_build_exception_1;
            }
            tmp_called_value_184 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[103]);

            if (unlikely(tmp_called_value_184 == NULL)) {
                tmp_called_value_184 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[103]);
            }

            if (tmp_called_value_184 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 3016;

                goto dict_build_exception_1;
            }
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 3016;
            tmp_dict_value_1 = CALL_FUNCTION_NO_ARGS(tmp_called_value_184);
            if (tmp_dict_value_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 3016;

                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_assign_source_499, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3016;

                goto dict_build_exception_1;
            }
            tmp_expression_value_314 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[101]);

            if (unlikely(tmp_expression_value_314 == NULL)) {
                tmp_expression_value_314 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[101]);
            }

            if (tmp_expression_value_314 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3017;

                goto dict_build_exception_1;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_314, mod_consts[106]);
            if (tmp_dict_key_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3017;

                goto dict_build_exception_1;
            }
            tmp_called_value_185 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[105]);

            if (unlikely(tmp_called_value_185 == NULL)) {
                tmp_called_value_185 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[105]);
            }

            if (tmp_called_value_185 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 3017;

                goto dict_build_exception_1;
            }
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 3017;
            tmp_dict_value_1 = CALL_FUNCTION_NO_ARGS(tmp_called_value_185);
            if (tmp_dict_value_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 3017;

                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_assign_source_499, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3017;

                goto dict_build_exception_1;
            }
            tmp_expression_value_315 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[101]);

            if (unlikely(tmp_expression_value_315 == NULL)) {
                tmp_expression_value_315 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[101]);
            }

            if (tmp_expression_value_315 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3018;

                goto dict_build_exception_1;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_315, mod_consts[270]);
            if (tmp_dict_key_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3018;

                goto dict_build_exception_1;
            }
            tmp_called_value_186 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[76]);

            if (unlikely(tmp_called_value_186 == NULL)) {
                tmp_called_value_186 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[76]);
            }

            if (tmp_called_value_186 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 3018;

                goto dict_build_exception_1;
            }
            frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 3018;
            tmp_dict_value_1 = CALL_FUNCTION_NO_ARGS(tmp_called_value_186);
            if (tmp_dict_value_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 3018;

                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_assign_source_499, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3018;

                goto dict_build_exception_1;
            }
            tmp_expression_value_316 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

            if (unlikely(tmp_expression_value_316 == NULL)) {
                tmp_expression_value_316 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
            }

            if (tmp_expression_value_316 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3019;

                goto dict_build_exception_1;
            }
            tmp_dict_key_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_316, mod_consts[710]);
            if (tmp_dict_key_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3019;

                goto dict_build_exception_1;
            }
            tmp_dict_value_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[368]);

            if (unlikely(tmp_dict_value_1 == NULL)) {
                tmp_dict_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[368]);
            }

            if (tmp_dict_value_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                Py_DECREF(tmp_dict_key_1);

                exception_lineno = 3019;

                goto dict_build_exception_1;
            }
            tmp_res = PyDict_SetItem(tmp_assign_source_499, tmp_dict_key_1, tmp_dict_value_1);
            Py_DECREF(tmp_dict_key_1);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 3019;

                goto dict_build_exception_1;
            }
        }
        goto dict_build_noexception_1;
        // Exception handling pass through code for dict_build:
        dict_build_exception_1:;
        Py_DECREF(tmp_assign_source_499);
        goto frame_exception_exit_1;
        // Finished with no exception for dict_build:
        dict_build_noexception_1:;
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[711], tmp_assign_source_499);
    }
    {
        nuitka_bool tmp_condition_result_380;
        PyObject *tmp_expression_value_317;
        PyObject *tmp_attribute_value_3;
        int tmp_truth_name_62;
        tmp_expression_value_317 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_expression_value_317 == NULL)) {
            tmp_expression_value_317 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
        }

        if (tmp_expression_value_317 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3022;

            goto frame_exception_exit_1;
        }
        tmp_attribute_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_317, mod_consts[712]);
        if (tmp_attribute_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3022;

            goto frame_exception_exit_1;
        }
        tmp_truth_name_62 = CHECK_IF_TRUE(tmp_attribute_value_3);
        if (tmp_truth_name_62 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_attribute_value_3);

            exception_lineno = 3022;

            goto frame_exception_exit_1;
        }
        tmp_condition_result_380 = tmp_truth_name_62 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        Py_DECREF(tmp_attribute_value_3);
        if (tmp_condition_result_380 == NUITKA_BOOL_TRUE) {
            goto branch_yes_239;
        } else {
            goto branch_no_239;
        }
    }
    branch_yes_239:;
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_called_value_187;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_ass_subscript_1;
        tmp_called_value_187 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[125]);

        if (unlikely(tmp_called_value_187 == NULL)) {
            tmp_called_value_187 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[125]);
        }

        if (tmp_called_value_187 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3023;

            goto frame_exception_exit_1;
        }
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 3023;
        tmp_ass_subvalue_1 = CALL_FUNCTION_NO_ARGS(tmp_called_value_187);
        if (tmp_ass_subvalue_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3023;

            goto frame_exception_exit_1;
        }
        tmp_ass_subscribed_1 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[711]);

        if (unlikely(tmp_ass_subscribed_1 == NULL)) {
            tmp_ass_subscribed_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[711]);
        }

        if (tmp_ass_subscribed_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_ass_subvalue_1);

            exception_lineno = 3023;

            goto frame_exception_exit_1;
        }
        tmp_ass_subscript_1 = (PyObject *)&PyBytes_Type;
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
        Py_DECREF(tmp_ass_subvalue_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3023;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_ass_subvalue_2;
        PyObject *tmp_called_value_188;
        PyObject *tmp_ass_subscribed_2;
        PyObject *tmp_ass_subscript_2;
        tmp_called_value_188 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[65]);

        if (unlikely(tmp_called_value_188 == NULL)) {
            tmp_called_value_188 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[65]);
        }

        if (tmp_called_value_188 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3024;

            goto frame_exception_exit_1;
        }
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 3024;
        tmp_ass_subvalue_2 = CALL_FUNCTION_NO_ARGS(tmp_called_value_188);
        if (tmp_ass_subvalue_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3024;

            goto frame_exception_exit_1;
        }
        tmp_ass_subscribed_2 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[711]);

        if (unlikely(tmp_ass_subscribed_2 == NULL)) {
            tmp_ass_subscribed_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[711]);
        }

        if (tmp_ass_subscribed_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_ass_subvalue_2);

            exception_lineno = 3024;

            goto frame_exception_exit_1;
        }
        tmp_ass_subscript_2 = (PyObject *)&PyUnicode_Type;
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2);
        Py_DECREF(tmp_ass_subvalue_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3024;

            goto frame_exception_exit_1;
        }
    }
    goto branch_end_239;
    branch_no_239:;
    {
        PyObject *tmp_ass_subvalue_3;
        PyObject *tmp_called_value_189;
        PyObject *tmp_ass_subscribed_3;
        PyObject *tmp_ass_subscript_3;
        tmp_called_value_189 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[65]);

        if (unlikely(tmp_called_value_189 == NULL)) {
            tmp_called_value_189 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[65]);
        }

        if (tmp_called_value_189 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3026;

            goto frame_exception_exit_1;
        }
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 3026;
        tmp_ass_subvalue_3 = CALL_FUNCTION_NO_ARGS(tmp_called_value_189);
        if (tmp_ass_subvalue_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3026;

            goto frame_exception_exit_1;
        }
        tmp_ass_subscribed_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[711]);

        if (unlikely(tmp_ass_subscribed_3 == NULL)) {
            tmp_ass_subscribed_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[711]);
        }

        if (tmp_ass_subscribed_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_ass_subvalue_3);

            exception_lineno = 3026;

            goto frame_exception_exit_1;
        }
        tmp_ass_subscript_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[456]);

        if (unlikely(tmp_ass_subscript_3 == NULL)) {
            tmp_ass_subscript_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[456]);
        }

        if (tmp_ass_subscript_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_ass_subvalue_3);

            exception_lineno = 3026;

            goto frame_exception_exit_1;
        }
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_3, tmp_ass_subscript_3, tmp_ass_subvalue_3);
        Py_DECREF(tmp_ass_subvalue_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3026;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_ass_subvalue_4;
        PyObject *tmp_called_value_190;
        PyObject *tmp_ass_subscribed_4;
        PyObject *tmp_ass_subscript_4;
        tmp_called_value_190 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[215]);

        if (unlikely(tmp_called_value_190 == NULL)) {
            tmp_called_value_190 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[215]);
        }

        if (tmp_called_value_190 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3027;

            goto frame_exception_exit_1;
        }
        frame_710839dc2352d5736e91d4b9f559d9ef->m_frame.f_lineno = 3027;
        tmp_ass_subvalue_4 = CALL_FUNCTION_NO_ARGS(tmp_called_value_190);
        if (tmp_ass_subvalue_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3027;

            goto frame_exception_exit_1;
        }
        tmp_ass_subscribed_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[711]);

        if (unlikely(tmp_ass_subscribed_4 == NULL)) {
            tmp_ass_subscribed_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[711]);
        }

        if (tmp_ass_subscribed_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_ass_subvalue_4);

            exception_lineno = 3027;

            goto frame_exception_exit_1;
        }
        tmp_ass_subscript_4 = (PyObject *)&PyUnicode_Type;
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_4, tmp_ass_subscript_4, tmp_ass_subvalue_4);
        Py_DECREF(tmp_ass_subvalue_4);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3027;

            goto frame_exception_exit_1;
        }
    }
    branch_end_239:;
    {
        PyObject *tmp_assign_source_500;
        PyObject *tmp_expression_value_318;
        tmp_expression_value_318 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[711]);

        if (unlikely(tmp_expression_value_318 == NULL)) {
            tmp_expression_value_318 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[711]);
        }

        if (tmp_expression_value_318 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3029;

            goto frame_exception_exit_1;
        }
        tmp_assign_source_500 = LOOKUP_ATTRIBUTE(tmp_expression_value_318, mod_consts[3]);
        if (tmp_assign_source_500 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3029;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[363], tmp_assign_source_500);
    }
    {
        PyObject *tmp_assign_source_501;


        tmp_assign_source_501 = MAKE_FUNCTION_sqlalchemy$sql$sqltypes$$$function__139__resolve_value_to_type();

        UPDATE_STRING_DICT1(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[713], tmp_assign_source_501);
    }
    {
        PyObject *tmp_assattr_value_3;
        PyObject *tmp_assattr_target_3;
        tmp_assattr_value_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[707]);

        if (unlikely(tmp_assattr_value_3 == NULL)) {
            tmp_assattr_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[707]);
        }

        if (tmp_assattr_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3054;

            goto frame_exception_exit_1;
        }
        tmp_assattr_target_3 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[334]);

        if (unlikely(tmp_assattr_target_3 == NULL)) {
            tmp_assattr_target_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[334]);
        }

        if (tmp_assattr_target_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3054;

            goto frame_exception_exit_1;
        }
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_3, mod_consts[707], tmp_assattr_value_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3054;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_4;
        PyObject *tmp_assattr_target_4;
        tmp_assattr_value_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[708]);

        if (unlikely(tmp_assattr_value_4 == NULL)) {
            tmp_assattr_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[708]);
        }

        if (tmp_assattr_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3055;

            goto frame_exception_exit_1;
        }
        tmp_assattr_target_4 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[334]);

        if (unlikely(tmp_assattr_target_4 == NULL)) {
            tmp_assattr_target_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[334]);
        }

        if (tmp_assattr_target_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3055;

            goto frame_exception_exit_1;
        }
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_4, mod_consts[708], tmp_assattr_value_4);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3055;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_5;
        PyObject *tmp_assattr_target_5;
        tmp_assattr_value_5 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[335]);

        if (unlikely(tmp_assattr_value_5 == NULL)) {
            tmp_assattr_value_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[335]);
        }

        if (tmp_assattr_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3056;

            goto frame_exception_exit_1;
        }
        tmp_assattr_target_5 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[334]);

        if (unlikely(tmp_assattr_target_5 == NULL)) {
            tmp_assattr_target_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[334]);
        }

        if (tmp_assattr_target_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3056;

            goto frame_exception_exit_1;
        }
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_5, mod_consts[335], tmp_assattr_value_5);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3056;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_6;
        PyObject *tmp_assattr_target_6;
        tmp_assattr_value_6 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[368]);

        if (unlikely(tmp_assattr_value_6 == NULL)) {
            tmp_assattr_value_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[368]);
        }

        if (tmp_assattr_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3057;

            goto frame_exception_exit_1;
        }
        tmp_assattr_target_6 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[334]);

        if (unlikely(tmp_assattr_target_6 == NULL)) {
            tmp_assattr_target_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[334]);
        }

        if (tmp_assattr_target_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3057;

            goto frame_exception_exit_1;
        }
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_6, mod_consts[368], tmp_assattr_value_6);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3057;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_7;
        PyObject *tmp_assattr_target_7;
        tmp_assattr_value_7 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[709]);

        if (unlikely(tmp_assattr_value_7 == NULL)) {
            tmp_assattr_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[709]);
        }

        if (tmp_assattr_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3058;

            goto frame_exception_exit_1;
        }
        tmp_assattr_target_7 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[334]);

        if (unlikely(tmp_assattr_target_7 == NULL)) {
            tmp_assattr_target_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[334]);
        }

        if (tmp_assattr_target_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3058;

            goto frame_exception_exit_1;
        }
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_7, mod_consts[709], tmp_assattr_value_7);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3058;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_8;
        PyObject *tmp_assattr_target_8;
        tmp_assattr_value_8 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[430]);

        if (unlikely(tmp_assattr_value_8 == NULL)) {
            tmp_assattr_value_8 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[430]);
        }

        if (tmp_assattr_value_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3059;

            goto frame_exception_exit_1;
        }
        tmp_assattr_target_8 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[334]);

        if (unlikely(tmp_assattr_target_8 == NULL)) {
            tmp_assattr_target_8 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[334]);
        }

        if (tmp_assattr_target_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3059;

            goto frame_exception_exit_1;
        }
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_8, mod_consts[714], tmp_assattr_value_8);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3059;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_9;
        PyObject *tmp_assattr_target_9;
        tmp_assattr_value_9 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[713]);

        if (unlikely(tmp_assattr_value_9 == NULL)) {
            tmp_assattr_value_9 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[713]);
        }

        if (tmp_assattr_value_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3060;

            goto frame_exception_exit_1;
        }
        tmp_assattr_target_9 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[334]);

        if (unlikely(tmp_assattr_target_9 == NULL)) {
            tmp_assattr_target_9 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[334]);
        }

        if (tmp_assattr_target_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3060;

            goto frame_exception_exit_1;
        }
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_9, mod_consts[713], tmp_assattr_value_9);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3060;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_10;
        PyObject *tmp_assattr_target_10;
        PyObject *tmp_expression_value_319;
        tmp_assattr_value_10 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[707]);

        if (unlikely(tmp_assattr_value_10 == NULL)) {
            tmp_assattr_value_10 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[707]);
        }

        if (tmp_assattr_value_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3061;

            goto frame_exception_exit_1;
        }
        tmp_expression_value_319 = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)mod_consts[398]);

        if (unlikely(tmp_expression_value_319 == NULL)) {
            tmp_expression_value_319 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[398]);
        }

        if (tmp_expression_value_319 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3061;

            goto frame_exception_exit_1;
        }
        tmp_assattr_target_10 = LOOKUP_ATTRIBUTE(tmp_expression_value_319, mod_consts[9]);
        if (tmp_assattr_target_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3061;

            goto frame_exception_exit_1;
        }
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_10, mod_consts[707], tmp_assattr_value_10);
        Py_DECREF(tmp_assattr_target_10);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3061;

            goto frame_exception_exit_1;
        }
    }

    // Restore frame exception if necessary.
#if 0
    RESTORE_FRAME_EXCEPTION(frame_710839dc2352d5736e91d4b9f559d9ef);
#endif
    popFrameStack();

    assertFrameObject(frame_710839dc2352d5736e91d4b9f559d9ef);

    goto frame_no_exception_57;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_710839dc2352d5736e91d4b9f559d9ef);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_710839dc2352d5736e91d4b9f559d9ef, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_710839dc2352d5736e91d4b9f559d9ef->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_710839dc2352d5736e91d4b9f559d9ef, exception_lineno);
    }

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto module_exception_exit;

    frame_no_exception_57:;

    // Report to PGO about leaving the module without error.
    PGO_onModuleExit("sqlalchemy.sql.sqltypes", false);

    Py_INCREF(module_sqlalchemy$sql$sqltypes);
    return module_sqlalchemy$sql$sqltypes;
    module_exception_exit:

#if defined(_NUITKA_MODULE) && 0
    {
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_sqlalchemy$sql$sqltypes, (Nuitka_StringObject *)const_str_plain___name__);

        if (module_name != NULL) {
            Nuitka_DelModule(module_name);
        }
    }
#endif
    PGO_onModuleExit("sqlalchemy$sql$sqltypes", false);

    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);
    return NULL;
}
